void sub_24C6664C0()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  v0 = (void *)MEMORY[0x2532F8ED0]();
  qword_26B17C808 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v1, v2, v3, v4);
}

void sub_24C666598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6669B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_24C666A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C666A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C666A80()
{
}

void sub_24C666B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2532F8960](v15, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_24C666DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_24C667050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_24C667294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6672A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (!__p)
  {

    _Unwind_Resume(a1);
  }
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_24C6673C8()
{
}

void sub_24C6673E0(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24C66743C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2652E7B28, MEMORY[0x263F8C060]);
}

void sub_24C667428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_24C66743C(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_24C667470()
{
}

void sub_24C667578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6679D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6679F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C667A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  v38 = v31;

  _Unwind_Resume(a1);
}

void sub_24C668108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66824C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66843C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66862C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6686E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66879C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_24C668E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C668F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6695D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_24C66DB7C((uint64_t)&__p);

  if (a2 == 1)
  {
    v19 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v19, v14);
    __cxa_end_catch();
    JUMPOUT(0x24C6694F8);
  }
  uint64_t v20 = *(void *)(v16 - 80);
  if (!v20) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 48))(v20);
  sub_24C669A38((void *)(v16 - 104));
  _Unwind_Resume(a1);
}

void sub_24C669728(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C669758()
{
}

void sub_24C6698AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2532F8960](v15, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *sub_24C6698FC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void **sub_24C6699B0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24C669A24(void *a1)
{
}

void *sub_24C669A38(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_24C669D14(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C669D24(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x2532F8960](v13, 0x20C4093837F09);
  if (a2 == 1)
  {
    uint64_t v16 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v16, v12);
    __cxa_end_catch();
    JUMPOUT(0x24C669C44);
  }
  if (!a12) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a12 + 48))(a12);
  sub_24C669A38(&a9);
  _Unwind_Resume(a1);
}

void sub_24C669DC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x24C669D1CLL);
}

void sub_24C66A2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(a33);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_14:

      _Unwind_Resume(a1);
    }
LABEL_13:
    __cxa_free_exception(v42);
    goto LABEL_14;
  }
LABEL_12:
  if (!v43) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

__n128 sub_24C66A45C@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(a1);
  uint64_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_24C66A4BC(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_24C66A574(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_24C66A590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_24C66A5A0@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_24C66A8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  if (v16) {
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_24C66A9F8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3812000000;
  v15[3] = sub_24C6748B8;
  v15[4] = nullsub_7;
  v15[5] = &unk_24C74DED7;
  v15[6] = a2;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_24C6748C8;
  v10[3] = &unk_2652E7C70;
  v12 = v15;
  uint64_t v13 = v14;
  id v11 = v5;
  id v6 = v5;
  objc_msgSend__enumerateVisibleLabelsAndIndicesInVocabularyUsingBlock_(a1, v7, (uint64_t)v10, v8, v9);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v15, 8);
}

void sub_24C66AB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_24C66AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C66AC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66AC40(uint64_t a1, void *a2, float a3)
{
  id v13 = a2;
  *(float *)&double v5 = a3;
  v10 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v8, v9, v5);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);
}

void sub_24C66ACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66ACD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66AECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66AEE4()
{
}

void sub_24C66AFF0(_Unwind_Exception *a1)
{
  if (v5) {
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_24C66B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C66B19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66B1AC(uint64_t a1, void *a2, float a3)
{
  id v13 = a2;
  *(float *)&double v5 = a3;
  v10 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v8, v9, v5);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);
}

void sub_24C66B228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C66B370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66B380(uint64_t a1, void *a2, float a3)
{
  id v13 = a2;
  *(float *)&double v5 = a3;
  v10 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v8, v9, v5);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);
}

void sub_24C66B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66B60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66B624()
{
}

void sub_24C66B800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66B818()
{
}

void sub_24C66B8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66B8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66BE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_24C66BFF0((void **)va);
  sub_24C66BEFC((uint64_t *)(v12 - 88));

  _Unwind_Resume(a1);
}

uint64_t *sub_24C66BEFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(void *)(v2 + 80) = v3;
      operator delete(v3);
    }

    uint64_t v4 = *(void **)(v2 + 40);
    if (v4)
    {
      do
      {
        double v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    id v6 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v6) {
      operator delete(v6);
    }
    MEMORY[0x2532F8960](v2, 0x10B0C40BA831511);
  }
  return a1;
}

uint64_t sub_24C66BF8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  double v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void **sub_24C66BFF0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24C66C4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v29 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v29)
  {
LABEL_8:
    sub_24C66E148((const void **)(v30 - 80));
    if (a2 == 1)
    {
      v33 = __cxa_begin_catch(a1);
      sub_24C676DA0((uint64_t)v33, v27);
      __cxa_end_catch();
      JUMPOUT(0x24C66C38CLL);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t sub_24C66C5E0(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD930;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_24C66C668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C66C7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C66C824((void **)va);

  _Unwind_Resume(a1);
}

void sub_24C66C7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C66C824((void **)va);

  _Unwind_Resume(a1);
}

void sub_24C66C7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66C7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  double v5 = v4;

  sub_24C66C824((void **)va);
  _Unwind_Resume(a1);
}

void sub_24C66C808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_24C66C824((void **)va);
  _Unwind_Resume(a1);
}

void **sub_24C66C824(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      double v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        id v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24C66CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_24C66C824((void **)va);

  _Unwind_Resume(a1);
}

void sub_24C66CA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_24C66C824((void **)va);

  _Unwind_Resume(a1);
}

void sub_24C66CA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_24C66C824(&a15);
  _Unwind_Resume(a1);
}

void sub_24C66CC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66CC78()
{
}

void sub_24C66CD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C66CD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C66CD9C(uint64_t a1, void *a2, float a3)
{
  id v13 = a2;
  *(float *)&double v5 = a3;
  v10 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v8, v9, v5);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);
}

void sub_24C66CE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C66D30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_24C6717DC(v36 - 224);
  _Unwind_Resume(a1);
}

void sub_24C66D4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 == v8)
  {
    sub_24C66E8A4((uint64_t)&__p);
  }
  else
  {
    __p = 0;
    id v13 = 0;
    uint64_t v14 = 0;
    sub_24C671B74((char *)&__p, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  sub_24C66E3E8(a1, a2, (long long **)&__p, a3);
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    v10 = v13;
    id v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      id v11 = __p;
    }
    id v13 = v9;
    operator delete(v11);
  }
}

void sub_24C66D584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6699B0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C66D598(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26FEDD950;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
LABEL_5:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_24C66D660(void *a1)
{
  *a1 = &unk_26FEDD950;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

id sub_24C66D704(void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v15 = 0;
    goto LABEL_26;
  }
  double v5 = *a1;
  id v6 = v3;
  id v11 = (const char *)objc_msgSend_UTF8String(v6, v7, v8, v9, v10);
  size_t v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_24C6673C8();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    size_t v48 = v13;
    unint64_t v49 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v49) = v12;
  p_dst = (void **)&__dst;
  if (v12) {
LABEL_10:
  }
    memmove(p_dst, v11, v13);
  *((unsigned char *)p_dst + v13) = 0;
  v18 = sub_24C66F168(v5, (uint64_t)&__dst);
  uint64_t v15 = v18;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst);
    if (!v15) {
      goto LABEL_26;
    }
  }
  else if (!v18)
  {
    goto LABEL_26;
  }
  v19 = *a1;
  id v20 = v6;
  v25 = (const char *)objc_msgSend_UTF8String(v20, v21, v22, v23, v24);
  size_t v26 = strlen(v25);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_24C6673C8();
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    size_t v48 = v27;
    unint64_t v49 = v30 | 0x8000000000000000;
    __dst = v28;
  }
  else
  {
    HIBYTE(v49) = v26;
    v28 = (void **)&__dst;
    if (!v26) {
      goto LABEL_23;
    }
  }
  memmove(v28, v25, v27);
LABEL_23:
  *((unsigned char *)v28 + v27) = 0;
  v31 = sub_24C66F168(v19, (uint64_t)&__dst);
  if (!v31) {
    sub_24C66DE30("unordered_map::at: key not found");
  }
  uint64_t v35 = v31[10];
  long long v36 = *(_OWORD *)(v35 + 40);
  long long v37 = *(_OWORD *)(v35 + 24);
  v45[0] = *(_OWORD *)(v35 + 8);
  v45[1] = v37;
  v45[2] = v36;
  long long v38 = *(_OWORD *)(v35 + 88);
  long long v39 = *(_OWORD *)(v35 + 104);
  long long v40 = *(_OWORD *)(v35 + 72);
  v45[3] = *(_OWORD *)(v35 + 56);
  v45[4] = v40;
  long long v41 = *(_OWORD *)(v35 + 120);
  long long v42 = *(_OWORD *)(v35 + 136);
  long long v43 = *(_OWORD *)(v35 + 152);
  uint64_t v46 = *(void *)(v35 + 168);
  v45[8] = v42;
  v45[9] = v43;
  v45[6] = v39;
  v45[7] = v41;
  v45[5] = v38;
  uint64_t v15 = objc_msgSend_fromEspressoBuffer_(CSUEspressoBuffer, v32, (uint64_t)v45, v33, v34);
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
LABEL_26:

  return v15;
}

void sub_24C66D960(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_24C66DAC0()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26FEDDA30;
  __cxa_throw(exception, (struct type_info *)&unk_26FEDD718, (void (*)(void *))std::exception::~exception);
}

void sub_24C66DB10(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C66DB48()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t sub_24C66DB7C(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    uint64_t v2 = *(void ***)(a1 + 88);
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)(a1 + 88);
    if (!v2) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v7 = (void **)*v2;
    if (*((char *)v2 + 39) < 0) {
      operator delete(v2[2]);
    }
    operator delete(v2);
    uint64_t v2 = v7;
  }
  while (v7);
LABEL_5:
  id v3 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    double v5 = *(void ***)(a1 + 8);
    id v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      id v6 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_24C66DC4C(uint64_t result, char *a2)
{
  if (result)
  {
    int v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v10, a2);
    sub_24C66A45C("PixelBufferTransfer operation [", &v10, &v11);
    sub_24C66A5A0("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v5 = &v9;
    }
    else {
      double v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C66DD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_24C66DE30(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24C66DE8C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2652E7B30, MEMORY[0x263F8C068]);
}

void sub_24C66DE78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_24C66DE8C(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

unsigned char *sub_24C66DEC0(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_24C667470();
    }
    __n128 result = operator new(48 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        std::string v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        *(_OWORD *)std::string v10 = *(_OWORD *)(a2 + v9);
        *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + v9 + 16);
        __n128 result = &v8[v9 + 24];
        std::string v12 = (void **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          __n128 result = sub_24C66E0A8(result, *v12, *(void *)(v11 + 32));
        }
        else
        {
          *(_OWORD *)__n128 result = *(_OWORD *)v12;
          *(void *)&v8[v9 + 40] = *(void *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_24C66DFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_24C66DFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_24C66E010(&a9);
  _Unwind_Resume(a1);
}

void ***sub_24C66E010(void ***result)
{
  id v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    int v2 = *result;
    id v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      double v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        double v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_24C66E0A8(unsigned char *__dst, void *__src, unint64_t a3)
{
  double v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_24C6673C8();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    double v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

const void **sub_24C66E148(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_24C66E17C(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD930;
  if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    JUMPOUT(0x2532F8960);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_24C66E230(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x2532F8960](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

uint64_t sub_24C66E264(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD930;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_24C66E2EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C66E300(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD930;
  if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    JUMPOUT(0x2532F8960);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_24C66E3B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x2532F8960](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

uint64_t sub_24C66E3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  double v5 = *(long long **)(a1 + 8);
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    *(void *)uint64_t v34 = &unk_26FEDD878;
    if (*((char *)i + 39) < 0)
    {
      sub_24C66E0A8(&v34[8], (void *)i[2], i[3]);
    }
    else
    {
      long long v7 = *((_OWORD *)i + 1);
      uint64_t v35 = i[4];
      *(_OWORD *)&v34[8] = v7;
    }
    long long v36 = *v5;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)i[10] + 16))(i[10], v34);
    if (SHIBYTE(v35) < 0) {
      operator delete(*(void **)&v34[8]);
    }
  }
  uint64_t v9 = *a3;
  long long v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      if (sub_24C66F168((void *)v5 + 24, (uint64_t)v9))
      {
        uint64_t v10 = sub_24C66F7E4((void *)v5 + 24, (uint64_t)v9);
        if (!v10) {
          sub_24C66DE30("unordered_map::at: key not found");
        }
        uint64_t v11 = v10;
        v25 = &unk_26FEDD950;
        int v26 = *((_DWORD *)v10 + 12);
        v28 = 0;
        uint64_t v29 = 0;
        size_t v27 = 0;
        std::string v13 = (unsigned char *)v10[7];
        std::string v12 = (unsigned char *)v10[8];
        int64_t v14 = v12 - v13;
        if (v12 != v13)
        {
          if (v14 < 0) {
            sub_24C667470();
          }
          size_t v27 = operator new(v12 - v13);
          v28 = (char *)v27;
          uint64_t v15 = (char *)v27 + 8 * (v14 >> 3);
          uint64_t v29 = v15;
          memcpy(v27, v13, v14);
          v28 = v15;
        }
        uint64_t v16 = (std::__shared_weak_count *)v11[11];
        uint64_t v30 = v11[10];
        v31 = v16;
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v17 = v31;
          v25 = &unk_26FEDD950;
          if (v31) {
            goto LABEL_29;
          }
        }
        else
        {
          v25 = &unk_26FEDD950;
        }
      }
      else
      {
        int v33 = espresso_network_bind_buffer();
        HIBYTE(v32[2]) = 21;
        strcpy((char *)v32, "Binding output buffer");
        sub_24C66EAE0(&v33, (uint64_t *)v32);
        if (SHIBYTE(v32[2]) < 0) {
          operator delete(v32[0]);
        }
        LOWORD(v32[0]) = 0;
        sub_24C66FCBC((uint64_t)&v25, (uint64_t)v34, v32);
        v32[0] = v9;
        v18 = sub_24C6707E0((uint64_t)(v5 + 12), (uint64_t)v9, (uint64_t)&unk_24C72FF38, v32);
        v19 = v18;
        *((_DWORD *)v18 + 12) = v26;
        if (v18 + 5 != (uint64_t *)&v25) {
          sub_24C670F38(v18 + 7, (char *)v27, v28, (v28 - (unsigned char *)v27) >> 3);
        }
        uint64_t v21 = v30;
        id v20 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = (std::__shared_weak_count *)v19[11];
        v19[10] = v21;
        v19[11] = (uint64_t)v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          uint64_t v17 = v31;
          v25 = &unk_26FEDD950;
          if (v31)
          {
LABEL_29:
            if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        else
        {
          uint64_t v17 = v31;
          v25 = &unk_26FEDD950;
          if (v31) {
            goto LABEL_29;
          }
        }
      }
      if (v27)
      {
        v28 = (char *)v27;
        operator delete(v27);
      }
      uint64_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  LODWORD(v32[0]) = espresso_plan_execute_sync();
  v34[23] = 14;
  strcpy(v34, "Executing plan");
  sub_24C66EAE0((int *)v32, (uint64_t *)v34);
  if ((v34[23] & 0x80000000) != 0) {
    operator delete(*(void **)v34);
  }
  return sub_24C67110C(a4, (uint64_t)(v5 + 12));
}

void sub_24C66E818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_24C66E8A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::string v12 = 0;
  while (1)
  {
    __n128 result = (const char *)espresso_get_output_blob_name();
    double v5 = result;
    std::string v12 = result;
    if (!result) {
      return result;
    }
    uint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 >= *(void *)(a1 + 16))
    {
      id v3 = sub_24C6718D8((void **)a1, &v12);
      goto LABEL_3;
    }
    size_t v7 = strlen(result);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_24C6673C8();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = operator new(v10 + 1);
      *((void *)v6 + 1) = v8;
      *((void *)v6 + 2) = v11 | 0x8000000000000000;
      *(void *)uint64_t v6 = v9;
    }
    else
    {
      v6[23] = v7;
      uint64_t v9 = v6;
      if (!v7) {
        goto LABEL_14;
      }
    }
    memmove(v9, v5, v8);
LABEL_14:
    *((unsigned char *)v9 + v8) = 0;
    id v3 = v6 + 24;
    *(void *)(a1 + 8) = v6 + 24;
LABEL_3:
    *(void *)(a1 + 8) = v3;
    ++v2;
  }
}

void sub_24C66E9C8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_24C72989C((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C66E9F8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void *sub_24C66EA3C(void *a1)
{
  *a1 = &unk_26FEDD950;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    id v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

int *sub_24C66EAE0(int *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v2 = result;
    sub_24C671080((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_24C66A5A0(" [espresso error: ", &v9, &v10);
    std::to_string(&v8, *v2);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &v8;
    }
    else {
      uint64_t v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v8.__r_.__value_.__l.__size_;
    }
    uint64_t v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_24C66A5A0("]", &v11, &v12);
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26FEDD810;
    __cxa_throw(exception, (struct type_info *)&unk_26FEDD5E8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_24C66EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if (a21 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_24C66ECF0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2532F8960);
}

void sub_24C66ED44(uint64_t a1, long long *a2, _DWORD *a3)
{
  switch(*a3)
  {
    case 0:
      long long v3 = a2[1];
      long long v10 = *a2;
      long long v11 = v3;
      int v12 = espresso_network_bind_input_vimagebuffer_bgra8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_24C66EAE0(&v12, (uint64_t *)__p);
      break;
    case 1:
      long long v5 = a2[1];
      long long v10 = *a2;
      long long v11 = v5;
      int v12 = espresso_network_bind_input_vimagebuffer_rgba8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_24C66EAE0(&v12, (uint64_t *)__p);
      break;
    case 2:
      long long v4 = a2[1];
      long long v10 = *a2;
      long long v11 = v4;
      int v12 = espresso_network_bind_input_vimagebuffer_argb8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_24C66EAE0(&v12, (uint64_t *)__p);
      break;
    case 3:
      long long v6 = a2[1];
      long long v10 = *a2;
      long long v11 = v6;
      int v12 = espresso_network_bind_input_vimagebuffer_planar8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_24C66EAE0(&v12, (uint64_t *)__p);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported image buffer type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_24C66EF8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C66EFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C66EFD8()
{
  int v2 = espresso_network_bind_cvpixelbuffer();
  char v1 = 21;
  strcpy(__p, "Binding CVPixelBuffer");
  sub_24C66EAE0(&v2, (uint64_t *)__p);
  if (v1 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_24C66F078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C66F094()
{
  int v2 = espresso_network_bind_buffer();
  __p = operator new(0x20uLL);
  long long v1 = xmmword_24C72F5A0;
  strcpy((char *)__p, "Binding espresso_buffer_t");
  sub_24C66EAE0(&v2, (uint64_t *)&__p);
  if (SHIBYTE(v1) < 0) {
    operator delete(__p);
  }
}

void sub_24C66F14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C66F168(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_24C66F398((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  int v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    std::string v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          std::string v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        std::string v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_24C66F398(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      long long v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *sub_24C66F7E4(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_24C66F398((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_24C66FA14(void *a1)
{
  *a1 = &unk_26FEDD950;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x2532F8960);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

void *sub_24C66FAD8(void *a1)
{
  *a1 = &unk_26FEDD950;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_24C66FB7C(void *a1)
{
  *a1 = &unk_26FEDD950;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x2532F8960);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

uint64_t sub_24C66FC40(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_24C66FCBC(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  sub_24C6700B0(a2, a3, &v18);
  uint64_t v6 = v18;
  unint64_t v5 = v19;
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v7 = *(_DWORD *)(a2 + 160);
  switch(v7)
  {
    case 65568:
      int v8 = 4;
      break;
    case 262152:
      int v8 = 0;
      break;
    case 131104:
      int v8 = 2;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v24 = 0;
  int v23 = espresso_buffer_unpack_tensor_shape();
  strcpy((char *)__p, "Unpacking tensor shape");
  HIBYTE(__p[2]) = 22;
  sub_24C66EAE0(&v23, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    unint64_t v9 = (unint64_t)v24;
    memset(__p, 0, sizeof(__p));
    if (v24) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  unint64_t v9 = (unint64_t)v24;
  memset(__p, 0, sizeof(__p));
  if (!v24) {
    goto LABEL_13;
  }
LABEL_9:
  if (v9 >> 61) {
    sub_24C667470();
  }
  size_t v10 = 8 * v9;
  if (((8 * v9) & 0x8000000000000000) != 0) {
    sub_24C667470();
  }
  uint64_t v11 = (char *)operator new(8 * v9);
  unint64_t v9 = (unint64_t)&v11[8 * ((uint64_t)(8 * v9) >> 3)];
  memcpy(v11, __src, v10);
LABEL_14:
  *(void *)a1 = &unk_26FEDD950;
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v12 = v9 - (void)v11;
  if ((char *)v9 != v11)
  {
    if (v12 < 0) {
      sub_24C667470();
    }
    uint64_t v13 = (char *)operator new(v9 - (void)v11);
    *(void *)(a1 + 16) = v13;
    char v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 32) = v14;
    memcpy(v13, v11, v9 - (void)v11);
    *(void *)(a1 + 24) = v14;
  }
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    operator delete(v11);
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v15 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)a1 = &unk_26FEDD7F0;
  return a1;
}

void sub_24C66FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_24C67004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  unint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 24) = v9;
    operator delete(v9);
  }
  if (v6) {
    JUMPOUT(0x24C670068);
  }
  sub_24C66FC40((uint64_t)va1);
  sub_24C66FC40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C670084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C66FC40((uint64_t)&a15);
  sub_24C66FC40((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void *sub_24C6700B0@<X0>(uint64_t a1@<X1>, _WORD *a2@<X2>, void *a3@<X8>)
{
  unint64_t result = operator new(0xD0uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26FEDDAC8;
  result[3] = &unk_26FEDD8F0;
  long long v7 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)result + 10) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)result + 11) = v7;
  result[24] = *(void *)(a1 + 160);
  long long v8 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)result + 6) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)result + 7) = v8;
  long long v9 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)result + 8) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)result + 9) = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)result + 2) = *(_OWORD *)a1;
  *((_OWORD *)result + 3) = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)result + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)result + 5) = v11;
  int v12 = *((_DWORD *)result + 48) - 0x10000;
  *((_WORD *)result + 100) = *a2;
  if (v12 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected espresso buffer storage type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_24C6701B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_24C6701CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_24C6701EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C67020C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C670260(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 201)) {
    free(*(void **)(a1 + 32));
  }
}

uint64_t sub_24C670278(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 177)) {
    free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_24C6702AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 177)) {
    free(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C670300(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1 + 8);
}

uint64_t sub_24C670330(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unint64_t sub_24C67034C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = espresso_buffer_get_rank();
  unint64_t v5 = result;
  if (result >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, v5);
    sub_24C66A45C("Unsupported tensor rank: ", &v16, (std::string *)v14);
    std::runtime_error::runtime_error(exception, (const std::string *)v14);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int8x16_t v6 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 152), 2uLL);
  int8x16_t v7 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 136), 2uLL);
  v14[0] = vextq_s8(v6, v6, 8uLL);
  v14[1] = vextq_s8(v7, v7, 8uLL);
  uint64_t v15 = 4 * *(void *)(a1 + 128);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = 8 * (5 - result);
    size_t v9 = 40 - v8;
    long long v10 = (char *)operator new(40 - v8);
    long long v11 = (char *)v14 + v8;
    *a2 = v10;
    int v12 = &v10[8 * ((unint64_t)(40 - v8) >> 3)];
    a2[2] = v12;
    unint64_t result = (unint64_t)memcpy(v10, v11, v9);
    a2[1] = v12;
  }
  return result;
}

void sub_24C67046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_24C6704F0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(&__p, a1);
  sub_24C6705BC();
}

void sub_24C6705A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6705BC()
{
}

void sub_24C6706B8(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_24C6706DC(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_24C66FC40(v1);
  _Unwind_Resume(a1);
}

void sub_24C670704(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C67073C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x2532F8930);
  }
  return result;
}

uint64_t sub_24C67075C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000024C72F718) {
    return a1 + 24;
  }
  if (((v3 & 0x800000024C72F718 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000024C72F718)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000024C72F718 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *sub_24C6707E0(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int8x16_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_24C66F398((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          int8x16_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = v26 + 16;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  *((_DWORD *)v26 + 12) = 4;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((void *)v26 + 11) = 0;
  *((void *)v26 + 5) = &unk_26FEDD7F0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C670C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C670C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C670C90(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_24C66DB48();
  }
  unint64_t v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  int8x16_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        unint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          int8x16_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *int8x16_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          int8x16_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    char v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *int8x16_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          void *v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          char v16 = v7;
LABEL_25:
          int8x16_t v7 = v16;
          char v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          int8x16_t v7 = v16;
          char v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void sub_24C670E40(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((unsigned char *)a1 + 16)) {
      goto LABEL_9;
    }
    *(void *)(v2 + 40) = &unk_26FEDD950;
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 88);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = *(void **)(v2 + 56);
    if (v4)
    {
      *(void *)(v2 + 64) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      unint64_t v5 = (void *)v2;
    }
    else
    {
LABEL_9:
      unint64_t v5 = (void *)v2;
    }
    operator delete(v5);
  }
}

void *sub_24C670F38(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  int8x16_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int8x16_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_24C667470();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    unint64_t v9 = (char *)result;
    *int8x16_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  char v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  void *v15 = &v9[v14];
  return result;
}

void sub_24C671080(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR)) {
    sub_24C729904(a2);
  }
}

void sub_24C6710D4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C67110C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_24C670C90(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(long long **)(a2 + 16); i; i = *(long long **)i)
    sub_24C671250(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_24C671228(_Unwind_Exception *a1)
{
  sub_24C6717DC(v1);
  _Unwind_Resume(a1);
}

void sub_24C67123C(_Unwind_Exception *a1)
{
  sub_24C6717DC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C671250(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      size_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            size_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          size_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v25 = 0;
  v25[1] = v10;
  sub_24C6716AC(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      long long v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *long long v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  long long v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *long long v29 = *v28;
  void *v28 = v41[0];
LABEL_89:
  size_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24C671678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C671690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *sub_24C6716AC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_26FEDD950;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  BOOL v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_24C667470();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  uint64_t v11 = *((void *)a2 + 9);
  __dst[8] = *((void *)a2 + 8);
  __dst[9] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  __dst[3] = &unk_26FEDD7F0;
  return __dst;
}

void sub_24C6717B8(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6717DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = (void *)*v2;
      v2[5] = &unk_26FEDD950;
      long long v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v5 = (void *)v2[7];
      if (v5) {
        goto LABEL_7;
      }
LABEL_8:
      if (*((char *)v2 + 39) < 0) {
        operator delete((void *)v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (void *)v2[7];
    if (!v5) {
      goto LABEL_8;
    }
LABEL_7:
    v2[8] = v5;
    operator delete(v5);
    goto LABEL_8;
  }
LABEL_12:
  BOOL v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

char *sub_24C6718D8(void **a1, const char **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C66DB48();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  int64_t v8 = &v7[24 * v3];
  uint64_t v22 = v8;
  uint64_t v23 = v8;
  uint64_t v24 = &v7[24 * v6];
  unint64_t v9 = *a2;
  size_t v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v16 = v10 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = (char *)operator new(v16 + 1);
    *((void *)v8 + 1) = v11;
    *((void *)v8 + 2) = v17 | 0x8000000000000000;
    *(void *)int64_t v8 = v18;
    int64_t v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *int64_t v8 = 0;
      uint8x8_t v12 = v8;
      uint64_t v13 = v8 + 24;
      size_t v14 = (char *)*a1;
      char v15 = (char *)a1[1];
      if (v15 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  uint8x8_t v12 = v22;
  uint64_t v13 = v23 + 24;
  size_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v19 = *(_OWORD *)(v15 - 24);
    *((void *)v12 - 1) = *((void *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    *((void *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  uint64_t v20 = (char *)*a1;
  char v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0) {
        operator delete(*((void **)v15 - 3));
      }
      v15 -= 24;
    }
    while (v15 != v20);
    char v15 = v20;
  }
LABEL_28:
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_24C671AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C671B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C671B0C(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_24C671B74(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_24C667470();
    }
    uint64_t result = (char *)operator new(24 * a4);
    int64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_24C66E0A8(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_24C671C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_24C671C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_24C671CA8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_24C671CA8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_24C671D40(uint64_t a1, __CVBuffer *a2)
{
  CVPixelBufferRef pixelBuffer = a2;
  unint64_t v3 = (std::__shared_weak_count *)operator new(0x28uLL);
  sub_24C67222C(v3, &pixelBuffer);
  long long v19 = v3 + 1;
  uint64_t v20 = v3;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v4 = sub_24C671FAC(pixelBuffer);
  int v5 = pixelBuffer;
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t Width = CVPixelBufferGetWidth(v5);
  uint64_t v8 = sub_24C672718(v5);
  sub_24C6728D4(&v15, Height, Width, v8);
  *(void *)a1 = &unk_26FEDD950;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = v15;
  int64_t v10 = v16 - v15;
  if (v16 != v15)
  {
    if (v10 < 0) {
      sub_24C667470();
    }
    uint64_t v11 = (char *)operator new(v16 - v15);
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v11;
    uint8x8_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 32) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 24) = v12;
  }
  *(void *)(a1 + 40) = v3 + 1;
  *(void *)(a1 + 48) = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v9)
  {
    uint64_t v16 = v9;
    operator delete(v9);
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_26FEDD838;
  return a1;
}

void sub_24C671F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
}

uint64_t sub_24C671FAC(__CVBuffer *a1)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        int v2 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369) {
      return 0;
    }
    int v2 = 1278226488;
LABEL_10:
    if (PixelFormatType == v2) {
      return 0;
    }
LABEL_15:
    unsigned int v4 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v4);
    sub_24C66A45C("Unsupported CVPixelBuffer type: ", &v6, &v7);
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600) {
      goto LABEL_15;
    }
  }
  else if (PixelFormatType != 1278226534)
  {
    int v2 = 1380401729;
    goto LABEL_10;
  }
  return 4;
}

void sub_24C672108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_24C672168(void *a1)
{
  *a1 = &unk_26FEDD950;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x2532F8960);
    }
  }
  else
  {
    unint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

void *sub_24C67222C(void *a1, __CVBuffer **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26FEDDA90;
  unint64_t v3 = *a2;
  a1[3] = &unk_26FEDD8B0;
  a1[4] = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CVPixelBufferRetain(v3);
  return a1;
}

void sub_24C6722E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_24C6722FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_24C672310(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C672330(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C672384(uint64_t a1)
{
}

uint64_t sub_24C6723A8(uint64_t a1)
{
  return a1;
}

void sub_24C6723D8(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C672428(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *sub_24C672458(uint64_t a1)
{
  BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 8));
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v3 = BaseAddress;
  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a1 + 8));
  return v3;
}

void sub_24C6724D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6724E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = qword_24C72F980[sub_24C671FAC(*(__CVBuffer **)(a1 + 8))];
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 8));
  uint64_t v6 = sub_24C672718(*(__CVBuffer **)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  void *result = BytesPerRow;
  result[1] = v6 * v4;
  result[2] = v4;
  *a2 = result;
  return result;
}

void sub_24C672564(CVPixelBufferRef *a1)
{
  if (!CVPixelBufferLockBaseAddress(a1[1], 1uLL))
  {
    (*((void (**)(CVPixelBufferRef *))*a1 + 3))(a1);
    (*((void (**)(void **__return_ptr, CVPixelBufferRef *))*a1 + 4))(&__p, a1);
    sub_24C6705BC();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_24C6726C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6726D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6726E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_24C66E264((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_24C672718(__CVBuffer *a1)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32) {
        return 4;
      }
      int v2 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369) {
      return 4;
    }
    int v4 = 1278226488;
LABEL_14:
    if (PixelFormatType != v4) {
      goto LABEL_16;
    }
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627) {
      return 1;
    }
    int v4 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    int v2 = 1380401729;
LABEL_8:
    if (PixelFormatType == v2) {
      return 4;
    }
LABEL_16:
    unsigned int v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v7, v5);
    sub_24C66A45C("Unsupported CVPixelBuffer type: ", &v7, &v8);
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return 1;
}

void sub_24C672874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

char **sub_24C6728D4(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string v8 = (char *)operator new(8uLL);
  *(void *)std::string v8 = a2;
  a1[1] = v8 + 8;
  a1[2] = v8 + 8;
  *a1 = v8;
  uint64_t v9 = (char *)operator new(0x10uLL);
  int64_t v10 = v9 + 16;
  *(void *)uint64_t v9 = *(void *)v8;
  *((void *)v9 + 1) = a3;
  *a1 = v9;
  a1[1] = v9 + 16;
  a1[2] = v9 + 16;
  operator delete(v8);
  unint64_t v11 = (unint64_t)a1[2];
  a1[1] = v9 + 16;
  if ((unint64_t)(v9 + 16) < v11)
  {
    *((void *)v9 + 2) = a4;
    uint64_t v12 = (uint64_t)(v9 + 24);
    goto LABEL_21;
  }
  uint64_t v13 = *a1;
  uint64_t v14 = (v10 - *a1) >> 3;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61) {
    sub_24C667470();
  }
  uint64_t v16 = v11 - (void)v13;
  if (v16 >> 2 > v15) {
    unint64_t v15 = v16 >> 2;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 61) {
      sub_24C66DB48();
    }
    uint64_t v18 = (char *)operator new(8 * v17);
    long long v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *(void *)long long v19 = a4;
    uint64_t v12 = (uint64_t)(v19 + 8);
    if (v10 == v13) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  uint64_t v18 = 0;
  long long v19 = (char *)(8 * v14);
  uint64_t v20 = 0;
  *(void *)(8 * v14) = a4;
  uint64_t v12 = 8 * v14 + 8;
  if (v10 != v13)
  {
LABEL_14:
    unint64_t v21 = v9 - v13 + 8;
    if (v21 < 0x18) {
      goto LABEL_26;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v23;
    v19 -= v23;
    uint64_t v24 = &v18[8 * v14 - 16];
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v9;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v9 - 1);
      *(_OWORD *)uint64_t v24 = v26;
      v24 -= 32;
      v9 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_26:
      do
      {
        uint64_t v27 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v10 != v13);
    }
  }
LABEL_19:
  *a1 = v19;
  a1[1] = (char *)v12;
  a1[2] = v20;
  if (v13) {
    operator delete(v13);
  }
LABEL_21:
  a1[1] = (char *)v12;
  return a1;
}

void sub_24C672A98(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C672AB4(uint64_t a1, const char **a2, uint64_t a3)
{
  unsigned int v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    std::string v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  std::string v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD950;
  *(_DWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v13 = *(unsigned char **)(a3 + 16);
  uint64_t v12 = *(unsigned char **)(a3 + 24);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_24C667470();
    }
    unint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 48) = v16;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  *(void *)(a1 + 64) = *(void *)(a3 + 40);
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C672BFC(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C672C20(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_24C672C8C(uint64_t a1, uint64_t a2, long long *a3)
{
  unsigned int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unsigned int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v25 = 0;
  v25[1] = v10;
  sub_24C6730E8(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      long long v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *long long v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  long long v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *long long v29 = *v28;
  void *v28 = v41[0];
LABEL_89:
  int64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24C6730B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C6730CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *sub_24C6730E8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_26FEDD950;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  size_t v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_24C667470();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  uint64_t v11 = *((void *)a2 + 9);
  __dst[8] = *((void *)a2 + 8);
  __dst[9] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_24C6731D8(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_24C673200()
{
}

void *sub_24C673214(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDDBD8;
  result[1] = v3;
  return result;
}

uint64_t sub_24C67325C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDDBD8;
  a2[1] = v2;
  return result;
}

void sub_24C673288(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetLoadResources", "", v5, 2u);
  }
}

uint64_t sub_24C673310(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31-[CSUSceneNetV5 loadResources:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31-[CSUSceneNetV5 loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31-[CSUSceneNetV5 loadResources:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31-[CSUSceneNetV5 loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C673380()
{
  return &unk_26FEDDC38;
}

void *sub_24C67338C(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_26FEDD7D0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_24C673424(void *a1)
{
  *a1 = &unk_26FEDD7D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x2532F8960);
}

void sub_24C6734CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C6734EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C673540(uint64_t a1)
{
  return sub_24C67443C(a1 + 24);
}

uint64_t sub_24C67354C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  size_t v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  sub_24C673CB8(a1 + 56, a3);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  if (!*(unsigned char *)(a3 + 28) && qword_2697ED268 != -1) {
    dispatch_once(&qword_2697ED268, &unk_26FEDDB28);
  }
  uint64_t context = espresso_create_context();
  *size_t v6 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso context.");
    goto LABEL_63;
  }
  uint64_t plan = espresso_create_plan();
  *(void *)(a1 + 24) = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso plan.");
LABEL_63:
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26FEDD810;
    __cxa_throw(exception, (struct type_info *)&unk_26FEDD5E8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*(unsigned char *)(a3 + 52)
    && (LODWORD(__dst.__r_.__value_.__l.__data_) = espresso_plan_set_priority(),
        HIBYTE(__p[2]) = 20,
        strcpy((char *)__p, "Setting plan priorty"),
        sub_24C66EAE0((int *)&__dst, (uint64_t *)__p),
        SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    *(_OWORD *)__p = *a2;
    __p[2] = *((void **)a2 + 2);
    goto LABEL_15;
  }
  sub_24C66E0A8(__p, *(void **)a2, *((void *)a2 + 1));
LABEL_15:
  int v10 = *(char *)(a3 + 135);
  if (v10 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 135);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 120);
  }
  if (!v11) {
    goto LABEL_40;
  }
  int v12 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v13 = HIBYTE(__p[2]);
  }
  else {
    size_t v13 = (size_t)__p[1];
  }
  unint64_t v14 = v13 + 1;
  if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 1;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
  if (v13)
  {
LABEL_29:
    if (v12 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    memmove(p_dst, v18, v13);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 58;
  if (v10 >= 0) {
    uint64_t v19 = (const std::string::value_type *)(a3 + 112);
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)(a3 + 112);
  }
  uint64_t v20 = std::string::append(&__dst, v19, v11);
  uint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
  *(void *)&long long v31 = v20->__r_.__value_.__l.__size_;
  *(void *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v21;
  __p[1] = (void *)v31;
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v31 + 7);
  HIBYTE(__p[2]) = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_40:
  LODWORD(v31) = espresso_plan_add_network();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_24C72F5B0;
  strcpy(__dst.__r_.__value_.__l.__data_, "Loading espresso Network");
  sub_24C66EAE0((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*(unsigned char *)(a3 + 64)) {
      goto LABEL_45;
    }
  }
  else if (!*(unsigned char *)(a3 + 64))
  {
    goto LABEL_45;
  }
  LODWORD(v31) = espresso_plan_share_intermediate_buffer();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_24C72F5C0;
  strcpy(__dst.__r_.__value_.__l.__data_, "Sharing intermediate buffer");
  sub_24C66EAE0((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    uint64_t v24 = *(void *)a3;
    uint64_t v23 = *(void *)(a3 + 8);
    if (*(void *)a3 == v23) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_45:
  uint64_t v24 = *(void *)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  if (*(void *)a3 == v23) {
    goto LABEL_51;
  }
  do
  {
LABEL_48:
    LODWORD(v31) = espresso_network_declare_output();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_24C72F5B0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Declaring network output");
    sub_24C66EAE0((int *)&v31, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v24 += 24;
  }
  while (v24 != v23);
LABEL_51:
  for (i = *(uint64_t **)(a3 + 88); i; i = (uint64_t *)*i)
  {
    long long v31 = *(_OWORD *)(i + 5);
    int v32 = *((_DWORD *)i + 14);
    int v28 = espresso_set_image_preprocessing_params();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_24C72F5D0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Setting preprocessing params");
    sub_24C66EAE0(&v28, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  LODWORD(v31) = espresso_plan_build();
  strcpy((char *)&__dst, "Building espresso plan");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
  sub_24C66EAE0((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_60:
    operator delete(__p[0]);
    return a1;
  }
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_60;
  }
  return a1;
}

void sub_24C673BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_24C6717DC(a10);
  sub_24C6717DC(a11);
  sub_24C66DB7C(a12);
  if (*(char *)(v29 + 55) < 0) {
    operator delete(*a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C673CB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_24C671B74((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  sub_24C673E04(a1 + 72, a2 + 72);
  size_t v6 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_24C66E0A8(v6, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)size_t v6 = v7;
  }
  return a1;
}

void sub_24C673D74(_Unwind_Exception *exception_object)
{
  long long v4 = (void **)v1[11];
  if (v4) {
    sub_24C7299CC(v4);
  }
  long long v5 = *v2;
  std::__shared_weak_count *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    size_t v6 = (void **)*v1;
    if (!*v1) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    size_t v6 = (void **)*v1;
    if (!*v1) {
      goto LABEL_5;
    }
  }
  long long v7 = (void **)v1[1];
  int64_t v8 = v6;
  if (v7 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0) {
        operator delete(*(v7 - 3));
      }
      v7 -= 3;
    }
    while (v7 != v6);
    int64_t v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C673E04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_24C670C90(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    sub_24C673F48(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_24C673F20(_Unwind_Exception *a1)
{
  sub_24C672C20(v1);
  _Unwind_Resume(a1);
}

void sub_24C673F34(_Unwind_Exception *a1)
{
  sub_24C672C20(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C673F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    size_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  float v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_24C66E0A8(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)float v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v25 + 14) = *(_DWORD *)(a3 + 40);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      BOOL v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  BOOL v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24C674398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6743C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6743AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6743C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6743C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_24C674414()
{
  uint64_t result = MGGetBoolAnswer();
  byte_2697ED260 = result;
  return result;
}

uint64_t sub_24C67443C(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    espresso_plan_destroy();
  }
  if (*(void *)(a1 + 16)) {
    espresso_context_destroy();
  }
  sub_24C6717DC(a1 + 232);
  sub_24C6717DC(a1 + 192);
  sub_24C66DB7C(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_24C6744B8()
{
}

void *sub_24C6744CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDDC58;
  result[1] = v3;
  return result;
}

uint64_t sub_24C674514(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDDC58;
  a2[1] = v2;
  return result;
}

void sub_24C674540(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetResampleImage", "", v5, 2u);
  }
}

uint64_t sub_24C6745C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z52-[CSUSceneNetV5 resampleImage:intoInputImage:error:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C674638()
{
  return &unk_26FEDDCB8;
}

void sub_24C674644()
{
}

void sub_24C6746F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x2532F8960](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_24C67472C()
{
}

void *sub_24C674740(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDDCD8;
  result[1] = v3;
  return result;
}

uint64_t sub_24C674788(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDDCD8;
  a2[1] = v2;
  return result;
}

void sub_24C6747B4(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUSceneNetRunOnInputImage", "", v5, 2u);
  }
}

uint64_t sub_24C67483C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44-[CSUSceneNetV5 runOnInputImage:completion:]E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C6748AC()
{
  return &unk_26FEDDD38;
}

uint64_t sub_24C6748B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

void sub_24C6748C8(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)(*(void *)(a1[5] + 8) + 48) += 4 * (a3 - *(void *)(*(void *)(a1[6] + 8) + 24));
  *(void *)(*(void *)(a1[6] + 8) + 24) = a3;
  (*(void (**)(float))(a1[4] + 16))(**(float **)(*(void *)(a1[5] + 8) + 48));
}

void sub_24C674978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67498C(void **a1)
{
}

void sub_24C674AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_24C674B28(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 3) != 0)
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, a2, 8, @"embedding bufferA does not have all floats", a5);
LABEL_16:
      **BOOL v6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  unint64_t v9 = a3 >> 2;
  if (a3 >> 2 != objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v10, 8, @"embedding bufferA does not have same number of elements as the reference array", v12);
      goto LABEL_16;
    }
LABEL_17:
    **(_DWORD **)(a1 + 72) = -1082130432;
    return;
  }
  if (!a2)
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v10, 8, @"pointer to embedding bufferA is null", v12);
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (a3 >= 4)
  {
    uint64_t v13 = 0;
    if (v9 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v9;
    }
    do
    {
      char v15 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v10, v13, v11, v12);
      objc_msgSend_floatValue(v15, v16, v17, v18, v19);
      *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(float *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                            + 24)
                                                                 + (float)(v20 * *(float *)&a2[4 * v13]);
      *(float *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(float *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                            + 24)
                                                                 + (float)(*(float *)&a2[4 * v13]
                                                                         * *(float *)&a2[4 * v13]);
      *(float *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(float *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 24)
                                                                 + (float)(v20 * v20);

      ++v13;
    }
    while (v14 != v13);
  }
}

void sub_24C674C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C674E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v14 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_24C674E50(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3 >> 2;
  if ((a3 & 3) != 0)
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, a2, 8, @"embedding bufferA does not have all floats", a5);
LABEL_18:
      **BOOL v6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v8 != objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v9, 8, @"embedding bufferA does not have same number of elements as the reference array", v11);
      goto LABEL_18;
    }
LABEL_19:
    **(_DWORD **)(a1 + 72) = -1082130432;
    return;
  }
  if (!a2)
  {
    BOOL v6 = (void **)(a1 + 64);
    if (*(void *)(a1 + 64))
    {
      objc_msgSend_errorWithCode_message_(CSUError, v9, 8, @"pointer to embedding bufferA is null", v11);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v12 = 0;
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, 0, v10, v11);
    while (1)
      uint64_t v18 = {;
      objc_msgSend_floatValue(v18, v19, v20, v21, v22);
      float v14 = vabds_f32(v23, *(float *)&a2[4 * v12]);
      if (*(void *)(a1 + 80) == 1)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
        float v14 = v14 + *(float *)(v13 + 24);
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
        if (*(float *)(v13 + 24) >= v14) {
          float v14 = *(float *)(v13 + 24);
        }
      }
      *(float *)(v13 + 24) = v14;

      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) <= (unint64_t)++v12) {
        break;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v15, v12, v16, v17);
    }
  }
}

void sub_24C674FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6750B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6750C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6750D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67525C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6753A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6753B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6753CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6755A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67599C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6759B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675A6C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v5 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v5, v3);
    __cxa_end_catch();
    JUMPOUT(0x24C675A40);
  }

  _Unwind_Resume(a1);
}

void sub_24C675CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C675F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6762B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6762C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6763E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6764D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6767AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6768D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C676DA0(uint64_t a1, void *a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  os_signpost_id_t v4 = sub_24C69662C();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_24C729A58(a1, v4);
  }

  if (a2)
  {
    id v5 = (void *)MEMORY[0x263F087E8];
    uint64_t v16 = *MEMORY[0x263F08320];
    BOOL v6 = NSString;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v11 = objc_msgSend_stringWithUTF8String_(v6, v8, v7, v9, v10);
    v17[0] = v11;
    uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v12, (uint64_t)v17, (uint64_t)&v16, 1);
    objc_msgSend_errorWithDomain_code_userInfo_(v5, v14, *MEMORY[0x263F08410], -1, (uint64_t)v13);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

void sub_24C676EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C676F04(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 23) = 0;
  *(unsigned char *)a3 = 0;
  if (a2 >= 25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid Parameter for number of bits");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v5 = a1 << (24 - a2);
  std::string::push_back((std::string *)a3, aAbcdefghijklmn[(v5 >> 18) & 0x3F]);
  int v6 = vcvtd_n_s64_f64(ceil((double)a2 * 0.125), 3uLL);
  if (v6 < 7) {
    std::string::value_type v7 = 61;
  }
  else {
    std::string::value_type v7 = aAbcdefghijklmn[(v5 >> 12) & 0x3F];
  }
  std::string::push_back((std::string *)a3, v7);
  if (v6 < 13) {
    std::string::value_type v8 = 61;
  }
  else {
    std::string::value_type v8 = aAbcdefghijklmn[(v5 >> 6) & 0x3F];
  }
  std::string::push_back((std::string *)a3, v8);
  if (v6 < 19) {
    std::string::value_type v9 = 61;
  }
  else {
    std::string::value_type v9 = aAbcdefghijklmn[v5 & 0x3F];
  }
  std::string::push_back((std::string *)a3, v9);
}

void sub_24C677020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C677034(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C677050(float *a1, unsigned int a2, int a3, uint64_t a4)
{
  if (*(char *)(a4 + 23) < 0)
  {
    *(void *)(a4 + 8) = 0;
    std::string::value_type v7 = *(unsigned char **)a4;
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    std::string::value_type v7 = (unsigned char *)a4;
  }
  *std::string::value_type v7 = 0;
  int v8 = vcvtpd_s64_f64(log2((double)(2 * a3)));
  if (v8 > 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid Parameter for number of bits per hash");
    goto LABEL_31;
  }
  unint64_t v9 = 0;
  if (a2)
  {
    int v10 = 24;
    uint64_t v11 = a2;
    while (1)
    {
      unint64_t v12 = (unint64_t)*a1;
      if (*a1 != (float)v12) {
        break;
      }
      if (v10 >= v8)
      {
        unint64_t v9 = (v9 << v8) | v12;
        v10 -= v8;
        ++a1;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      else
      {
        int v13 = v8 - v10;
        sub_24C676F04((v12 >> (v8 - v10)) | (v9 << v10), 24, (uint64_t)&__p);
        if ((v22 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v15 = v22;
        }
        else {
          std::string::size_type v15 = v21;
        }
        std::string::append((std::string *)a4, p_p, v15);
        double v16 = ldexp(1.0, v13);
        if ((char)v22 < 0) {
          operator delete(__p);
        }
        unint64_t v9 = (unint64_t)(v16 + -1.0) & v12;
        int v10 = 24 - v13;
        ++a1;
        if (!--v11) {
          goto LABEL_21;
        }
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Data not consistent");
LABEL_31:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v10 = 24;
LABEL_21:
  sub_24C676F04(v9, 24 - v10, (uint64_t)&__p);
  if ((v22 & 0x80u) == 0) {
    uint64_t v17 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v17 = (const std::string::value_type *)__p;
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v18 = v22;
  }
  else {
    std::string::size_type v18 = v21;
  }
  std::string::append((std::string *)a4, v17, v18);
  if ((char)v22 < 0) {
    operator delete(__p);
  }
}

void sub_24C677240(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C677254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C677288(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1[1] != a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "input feature vector size does not match hasher expectation!";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
  unint64_t v7 = a1[2];
  float v26 = 0;
  float v27 = 0;
  __p = 0;
  if (v7)
  {
    if (v7 >> 62) {
      sub_24C667470();
    }
    int v8 = (char *)operator new(4 * v7);
    __p = v8;
    float v27 = &v8[4 * v7];
    bzero(v8, 4 * v7);
    float v26 = v27;
  }
  else
  {
    int v8 = 0;
  }
  (*(void (**)(void *, uint64_t, char *))(*a1 + 16))(a1, a2, v8);
  unint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  uint64_t v24 = v8;
  if (v10)
  {
    unint64_t v11 = v9 / v10;
    uint64_t v12 = (int)v11;
    if (v11 << 32)
    {
      int v13 = *(char **)(a4 + 8);
      if (((v11 << 32) & 0x8000000000000000) != 0)
      {
        unsigned int v21 = 1;
        do
        {
          float v23 = &v8[4 * v12];
          if ((unint64_t)v13 < *(void *)(a4 + 16))
          {
            *(void *)int v13 = 0;
            *((void *)v13 + 1) = 0;
            *((void *)v13 + 2) = 0;
            sub_24C667470();
          }
          int v13 = sub_24C67756C((char **)a4, (const void **)&v24, (const void **)&v23);
          *(void *)(a4 + 8) = v13;
          int v8 = &v24[4 * v12];
          uint64_t v24 = v8;
          BOOL v16 = a1[3] > (unint64_t)v21++;
        }
        while (v16);
      }
      else
      {
        size_t v14 = 4 * (int)v11;
        unsigned int v15 = 1;
        do
        {
          float v23 = &v8[4 * v12];
          if ((unint64_t)v13 >= *(void *)(a4 + 16))
          {
            int v13 = sub_24C67756C((char **)a4, (const void **)&v24, (const void **)&v23);
          }
          else
          {
            *(void *)int v13 = 0;
            *((void *)v13 + 1) = 0;
            *((void *)v13 + 2) = 0;
            uint64_t v17 = (char *)operator new(v14);
            *(void *)int v13 = v17;
            *((void *)v13 + 1) = v17;
            std::string::size_type v18 = &v17[4 * v12];
            *((void *)v13 + 2) = v18;
            memcpy(v17, v8, v14);
            *((void *)v13 + 1) = v18;
            v13 += 24;
            *(void *)(a4 + 8) = v13;
          }
          *(void *)(a4 + 8) = v13;
          int v8 = &v24[4 * v12];
          uint64_t v24 = v8;
          BOOL v16 = a1[3] > (unint64_t)v15++;
        }
        while (v16);
      }
    }
    else
    {
      uint64_t v19 = *(char **)(a4 + 8);
      unsigned int v20 = 1;
      do
      {
        float v23 = &v8[4 * v12];
        if ((unint64_t)v19 < *(void *)(a4 + 16))
        {
          *(void *)uint64_t v19 = 0;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = 0;
          v19 += 24;
          *(void *)(a4 + 8) = v19;
        }
        else
        {
          uint64_t v19 = sub_24C67756C((char **)a4, (const void **)&v24, (const void **)&v23);
          int v8 = v24;
        }
        *(void *)(a4 + 8) = v19;
        v8 += 4 * v12;
        uint64_t v24 = v8;
        BOOL v16 = a1[3] > (unint64_t)v20++;
      }
      while (v16);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_24C677508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24C67756C(char **a1, const void **a2, const void **a3)
{
  unint64_t v5 = *a1;
  os_signpost_id_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C66DB48();
    }
    unint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v12 = &v11[24 * v6];
  int v13 = &v11[24 * v10];
  size_t v14 = *a2;
  *((void *)v12 + 1) = 0;
  unsigned int v15 = (char **)(v12 + 8);
  BOOL v16 = *a3;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = 0;
  int64_t v17 = v16 - v14;
  if (v16 != v14)
  {
    if (v17 < 0) {
      sub_24C667470();
    }
    std::string::size_type v18 = (char *)operator new(v16 - v14);
    *(void *)uint64_t v12 = v18;
    const char *v15 = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    *((void *)v12 + 2) = v19;
    memcpy(v18, v14, v17);
    const char *v15 = v19;
  }
  unsigned int v20 = v12 + 24;
  float v28 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v20;
    a1[2] = v13;
  }
  else
  {
    do
    {
      unsigned int v21 = v12;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      long long v22 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v22;
      v12 -= 24;
      *((void *)v21 - 1) = *((void *)v4 + 2);
      *(void *)os_signpost_id_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    while (v4 != v5);
    float v23 = *a1;
    os_signpost_id_t v4 = a1[1];
    unsigned int v20 = v28;
    *a1 = v12;
    a1[1] = v28;
    a1[2] = v13;
    if (v4 != v23)
    {
      uint64_t v24 = v4;
      do
      {
        float v26 = (void *)*((void *)v24 - 3);
        v24 -= 24;
        uint64_t v25 = v26;
        if (v26)
        {
          *((void *)v4 - 2) = v25;
          operator delete(v25);
        }
        os_signpost_id_t v4 = v24;
      }
      while (v24 != v23);
      os_signpost_id_t v4 = v23;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_24C677760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_24C677784((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C677784(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        os_signpost_id_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24C6779A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6779B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677C88(_Unwind_Exception *a1)
{
  unint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_24C677D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C677FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6781F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_24C678274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C678284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_24C678294(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)unint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    int v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unsigned int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          int v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          float v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_24C667470();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_24C66DB48();
    }
    BOOL v30 = (char *)operator new(4 * v29);
    BOOL v31 = &v30[4 * v8];
    unint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    BOOL v30 = 0;
    BOOL v31 = (char *)(4 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_24C66DB48();
    }
    uint64_t v53 = (char *)operator new(4 * v52);
    BOOL v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v32 = &v53[4 * v52];
    if (v30)
    {
      uint64_t v54 = &v53[4 * v52];
      operator delete(v30);
      unint64_t v32 = v54;
      int8x8_t v34 = (char *)*a1;
      *(_DWORD *)BOOL v31 = *a3;
      int8x8_t v35 = v31 + 4;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  int8x8_t v34 = (char *)v6;
  *(_DWORD *)BOOL v31 = *a3;
  int8x8_t v35 = v31 + 4;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint8x8_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    char v42 = v31 - 16;
    char v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)char v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
    int8x8_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_24C6785EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C678C5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v15);
  MEMORY[0x2532F8960](v10, 0xA1C409BE6959DLL);
  sub_24C66DB7C((uint64_t)&a9);
  if (*(char *)(v12 - 105) < 0) {
    operator delete(*(void **)(v12 - 128));
  }
  if (a2 == 1)
  {
    unint64_t v16 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v16, v9);
    __cxa_end_catch();
    JUMPOUT(0x24C678B7CLL);
  }
  uint64_t v17 = *(void *)(v12 - 80);
  if (!v17) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
  sub_24C669A38((void *)(v12 - 104));
  _Unwind_Resume(a1);
}

void sub_24C678D98(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C678EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C679024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C679040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C679058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67906C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67907C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C679098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C679698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (__p)
  {
    operator delete(__p);
    uint8x8_t v37 = a32;
    if (!a32)
    {
LABEL_3:
      sub_24C66EA3C(&a36);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint8x8_t v37 = a32;
    if (!a32) {
      goto LABEL_3;
    }
  }
  operator delete(v37);
  sub_24C66EA3C(&a36);
  _Unwind_Resume(a1);
}

void sub_24C679814(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 40) + 32))(__p);
  sub_24C67C4BC(a1, v4, (uint64_t)__p);
  *a1 = &unk_26FEDD1C0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24C679920(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C679934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_24C679958(void *a1)
{
  *a1 = off_26FEDD970;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C67AFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  sub_24C67BA58((void **)&STACK[0x268]);
  sub_24C66C824((void **)&STACK[0x280]);

  _Unwind_Resume(a1);
}

char *sub_24C67B50C(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = &(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C667470();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    unint64_t v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_24C66DB48();
      }
      uint64_t v17 = (char *)operator new(24 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    int8x8_t v34 = v17;
    int8x8_t v35 = &v17[24 * v7];
    unint64_t v36 = v35;
    uint8x8_t v37 = &v17[24 * v16];
    sub_24C67CBE0((uint64_t)&v34, a3);
    unint64_t v18 = v35;
    uint64_t v19 = *a1;
    uint64_t v20 = v35;
    if (*a1 != v8)
    {
      uint64_t v20 = v35;
      uint64_t v21 = v8;
      do
      {
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        v20 -= 24;
        *((void *)v20 + 2) = 0;
        long long v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)uint64_t v20 = v22;
        *((void *)v20 + 2) = *((void *)v21 + 2);
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    int8x8_t v35 = v20;
    float v23 = a1[1];
    uint64_t v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(void *)uint64_t v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v8;
        *((void *)v24 + 2) = *((void *)v8 + 2);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      uint64_t v20 = v35;
      uint64_t v8 = a1[1];
    }
    long long v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    unint64_t v26 = a1[2];
    a1[2] = v37;
    unint64_t v36 = v8;
    uint8x8_t v37 = v26;
    int8x8_t v34 = v25;
    int8x8_t v35 = v25;
    if (v8 == v25)
    {
      if (!v8) {
        return v18;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          uint64_t v28 = v8 - 24;
          float v27 = (void *)*((void *)v8 - 3);
          unint64_t v36 = v8 - 24;
          if (!v27) {
            break;
          }
          *((void *)v8 - 2) = v27;
          operator delete(v27);
          uint64_t v8 = v36;
          if (v36 == v25) {
            goto LABEL_32;
          }
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      uint64_t v8 = v34;
      if (!v34) {
        return v18;
      }
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(__n128 *)uint64_t v8 = *a3;
    *(void *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  uint64_t v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    int v13 = a1[1];
    do
    {
      *(void *)int v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *(_OWORD *)int v13 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((void *)v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v29 = 8 * ((uint64_t)(v5 - (void)v10) >> 3);
    do
    {
      BOOL v31 = *(void **)v11;
      if (*(void *)v11)
      {
        *(void *)(v11 + 8) = v31;
        operator delete(v31);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
      }
      uint64_t v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
      *(void *)(v11 + 16) = *(void *)&v8[v29 - 8];
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((void *)v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  unint64_t v32 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)&v6[24 * v7 + 8] = v32;
    operator delete(v32);
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
  }
  *(__n128 *)uint64_t v8 = *a3;
  *(void *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_24C67B87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C677784((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C67B890(uint64_t a1, const void *a2, size_t a3)
{
  return memcpy((void *)(*(void *)(*(void *)(a1 + 72) + 8) + 4 * *(void *)(a1 + 88)), a2, a3);
}

void *sub_24C67B8A4(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 40);
  result[6] = 0;
  unint64_t v5 = result + 4;
  result[4] = &unk_26FEDD950;
  *((_DWORD *)result + 10) = v4;
  result[7] = 0;
  result[8] = 0;
  uint64_t v7 = *(unsigned char **)(a2 + 48);
  unint64_t v6 = *(unsigned char **)(a2 + 56);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_24C667470();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    v3[6] = v9;
    v3[7] = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    v3[8] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v3[7] = v10;
  }
  uint64_t v11 = *(void *)(a2 + 80);
  v3[9] = *(void *)(a2 + 72);
  v3[10] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  void *v5 = &unk_26FEDD7F0;
  return result;
}

void sub_24C67B984(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C67B9A0(void *a1)
{
  a1[4] = &unk_26FEDD950;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[6];
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[6];
    if (!v3) {
      return;
    }
  }
  a1[7] = v3;
  operator delete(v3);
}

void **sub_24C67BA58(void **a1)
{
  uint64_t v2 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = v3 - 2;

        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24C67BB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67BFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_24C67C134(void **__dst, void *__src, size_t __len)
{
  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = (unint64_t)__dst[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        unint64_t v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22) {
            operator delete(v9);
          }
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *std::string __dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        unint64_t v12 = 2 * v8;
        if (__len > 2 * v8) {
          unint64_t v12 = __len;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      sub_24C6673C8();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = *__dst;
  }
  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        unint64_t v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)__dst + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __len) = 0;
  return __dst;
}

void **sub_24C67C294(void **a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_24C67C134(a1, __s, v4);
}

uint64_t sub_24C67C2DC@<X0>(int32x4_t **a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D0>)
{
  int v30 = 4;
  sub_24C67D4C0(a2, &v30, (uint64_t)a1);
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  uint64_t v7 = *a1;
  unint64_t v6 = (char *)a1[1];
  if (*a1 == (int32x4_t *)v6) {
    return result;
  }
  unint64_t v8 = v6 - (char *)v7 - 8;
  if (v8 >= 0x38)
  {
    uint64_t v11 = (v8 >> 3) + 1;
    unint64_t v10 = (int32x4_t *)((char *)v7 + 8 * (v11 & 0x3FFFFFFFFFFFFFF8));
    unint64_t v12 = v7 + 2;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFF8;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      int32x4_t v17 = v12[-2];
      int32x4_t v16 = v12[-1];
      int32x4_t v19 = *v12;
      int32x4_t v18 = v12[1];
      v12 += 4;
      int32x4_t v13 = vmulq_s32(v13, vuzp1q_s32(v17, v16));
      int32x4_t v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      v14 -= 8;
    }
    while (v14);
    int8x16_t v20 = (int8x16_t)vmulq_s32(v15, v13);
    *(int32x2_t *)v20.i8 = vmul_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    signed int v9 = v20.i32[0] * v20.i32[1];
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_9;
    }
  }
  else
  {
    signed int v9 = 1;
    unint64_t v10 = *a1;
  }
  do
  {
    __int32 v21 = v10->i32[0];
    unint64_t v10 = (int32x4_t *)((char *)v10 + 8);
    v9 *= v21;
  }
  while (v10 != (int32x4_t *)v6);
LABEL_9:
  if (!v9) {
    return result;
  }
  if (v9 < 8)
  {
    unint64_t v22 = 0;
LABEL_15:
    unint64_t v26 = (_DWORD *)(result + 4 * v22);
    unint64_t v27 = v9 - v22;
    do
    {
      *v26++ = a3.i32[0];
      --v27;
    }
    while (v27);
    return result;
  }
  unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v23 = vdupq_lane_s32(a3, 0);
  uint64_t v24 = (int32x4_t *)(result + 16);
  unint64_t v25 = v22;
  do
  {
    v24[-1] = v23;
    int32x4_t *v24 = v23;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v22 != v9) {
    goto LABEL_15;
  }
  return result;
}

void sub_24C67C48C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_24C66EA3C(v1);
  _Unwind_Resume(a1);
}

void sub_24C67C4A8(_Unwind_Exception *a1)
{
  sub_24C66EA3C(v1);
  _Unwind_Resume(a1);
}

void *sub_24C67C4BC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  *a1 = off_26FEDD970;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  unint64_t v5 = *(const void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  int64_t v6 = v4 - *(void *)a3;
  if (v4 == *(void *)a3)
  {
    a1[5] = 0;
  }
  else
  {
    if (v6 < 0) {
      sub_24C667470();
    }
    uint64_t v7 = operator new(v4 - *(void *)a3);
    a1[2] = v7;
    a1[3] = v7;
    uint64_t v8 = v6 >> 3;
    a1[4] = &v7[v8];
    memcpy(v7, v5, v6);
    a1[3] = &v7[v8];
    a1[5] = v6 >> 3;
    do
    {
      if ((*v7 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      *v7++ >>= 2;
      --v8;
    }
    while (v8 * 8);
  }
  return a1;
}

void sub_24C67C5D0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C67C600(void *a1)
{
  *a1 = off_26FEDD970;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2532F8960);
}

void *sub_24C67C670(void *a1)
{
  *a1 = off_26FEDD970;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C67C6C0(void *a1)
{
  *a1 = off_26FEDD970;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2532F8960);
}

char *sub_24C67C730(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 2;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62) {
      sub_24C667470();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_24C66DB48();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v20 = v18;
      __int32 v21 = operator new(4 * v18);
      unint64_t v18 = v20;
      uint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 2;
      uint64_t v11 = __src;
    }
    else
    {
      __int32 v21 = 0;
    }
    char v43 = &v21[4 * v13];
    uint64_t v44 = &v43[4 * a5];
    long long v45 = v43;
    int v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    long long v45 = &v21[4 * v13];
    int v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    long long v45 = &v43[v48];
    int v46 = &v11[v48];
    uint64_t v49 = (long long *)(v11 + 16);
    size_t v50 = &v21[4 * v13 + 16];
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *size_t v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        int v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)long long v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    uint64_t v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      int v55 = v8;
      uint64_t v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_58;
      }
      int v55 = v8;
      uint64_t v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      int v55 = &v8[-v57];
      uint64_t v54 = &v43[-v57];
      uint64_t v58 = 4 * v13 - 16;
      unint64_t v59 = &v21[v58];
      unint64_t v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *unint64_t v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          int v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[4 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[4 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 2;
  if (v23 >= a5)
  {
    uint64_t v24 = &__src[4 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    uint64_t v24 = &__src[4 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      uint64_t v13 = v7 >> 2;
      uint64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  unint64_t v27 = &v8[4 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 2;
  int v30 = (int *)(v26 - 4 * a5);
  BOOL v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    unint64_t v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 4;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      BOOL v31 = (_DWORD *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      BOOL v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 2) + 1;
        uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        int v30 = (int *)((char *)v30 + v38);
        BOOL v31 = (_DWORD *)(v26 + v38);
        unint64_t v39 = (_OWORD *)(v26 + 16);
        uint64_t v40 = (long long *)(4 * v29 + 4 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          _OWORD *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      int v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    uint64_t v8 = v67;
  }
  if (v24 != v11)
  {
    char v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

uint64_t sub_24C67CADC(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  int v6 = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD950;
  *(_DWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = *(unsigned char **)(a3 + 16);
  uint64_t v7 = *(unsigned char **)(a3 + 24);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_24C667470();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 56) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 48) = v11;
  }
  uint64_t v12 = *(void *)(a3 + 48);
  *(void *)(a1 + 64) = *(void *)(a3 + 40);
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C67CBBC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

__n128 sub_24C67CBE0(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    long long v5 = *(char **)a1;
    int v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v13 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5) {
        unint64_t v13 = 1;
      }
      if (v13 >= 0xAAAAAAAAAAAAAABLL) {
        sub_24C66DB48();
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = 24 * v13;
      unint64_t v16 = (char *)operator new(24 * v13);
      uint64_t v17 = &v16[24 * v14];
      unint64_t v18 = &v16[v15];
      if (v4 == v6)
      {
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v18;
      }
      else
      {
        unint64_t v19 = &v17[v4 - v6];
        uint64_t v20 = 24 * v14;
        do
        {
          __int32 v21 = &v16[v20];
          *(_OWORD *)__int32 v21 = *(_OWORD *)v6;
          *((void *)v21 + 2) = *((void *)v6 + 2);
          *(void *)int v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v20 += 24;
          v6 += 24;
        }
        while (v21 + 24 != v19);
        long long v5 = *(char **)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v18;
        if (v23 != v22)
        {
          uint64_t v24 = v23;
          do
          {
            unint64_t v26 = *(void **)(v24 - 24);
            v24 -= 24;
            int64_t v25 = v26;
            if (v26)
            {
              *(void *)(v23 - 16) = v25;
              operator delete(v25);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(char **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        unint64_t v27 = &v6[-24 * v9];
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)&v6[24 * v10];
          uint64_t v12 = *v11;
          if (*v11)
          {
            v11[1] = v12;
            operator delete(v12);
            *uint64_t v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v6;
          v11[2] = (void *)*((void *)v6 + 2);
          *(void *)int v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v6 += 24;
        }
        while (v6 != v4);
        uint64_t v4 = *(char **)(a1 + 8);
        unint64_t v27 = &v6[24 * v10];
      }
      *(void *)(a1 + 8) = &v4[24 * v10];
      *(void *)(a1 + 16) = v27;
      uint64_t v4 = v27;
    }
  }
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  *((void *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

uint64_t sub_24C67CDF8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        int64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        int v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

char *sub_24C67CE68(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C66DB48();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  uint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  uint64_t v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  unint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      sub_24C667470();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)uint64_t v10 = v15;
    void *v12 = v15;
    unint64_t v16 = &v15[4 * (v14 >> 2)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    void *v12 = v16;
  }
  uint64_t v17 = v10 + 24;
  int64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      __int32 v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_24C67D054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_24C677784((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_24C67D078(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C66DB48();
  }
  uint64_t v7 = 24 * v5;
  unint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = v9 + 24;
  unint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    long long v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v12 + 2);
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
  }
  while (v12 != v13);
  uint64_t v15 = *a1;
  uint64_t v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    unint64_t v16 = v12;
    do
    {
      unint64_t v18 = (void *)*((void *)v16 - 3);
      v16 -= 24;
      uint64_t v17 = v18;
      if (v18)
      {
        *((void *)v12 - 2) = v17;
        operator delete(v17);
      }
      uint64_t v12 = v16;
    }
    while (v16 != v15);
    uint64_t v12 = v15;
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

char *sub_24C67D1D4(void **a1, void *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = a2[1];
  *(_DWORD *)uint64_t v11 = *a2;
  a2[1] = 0;
  *((void *)v11 + 1) = v13;
  long long v14 = v11 + 16;
  unint64_t v16 = (id *)*a1;
  uint64_t v15 = (id *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v15) {
      return v14;
    }
    goto LABEL_13;
  }
  uint64_t v17 = (id *)a1[1];
  do
  {
    int v18 = *((_DWORD *)v17 - 4);
    v17 -= 2;
    *((_DWORD *)v11 - 4) = v18;
    v11 -= 16;
    id v19 = v17[1];
    v17[1] = 0;
    *((void *)v11 + 1) = v19;
  }
  while (v17 != v16);
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  do
  {
    uint64_t v20 = v15 - 2;

    uint64_t v15 = v20;
  }
  while (v20 != v16);
  uint64_t v15 = v16;
  if (v16) {
LABEL_13:
  }
    operator delete(v15);
  return v14;
}

void *sub_24C67D2E4(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_24C667470();
    }
    unint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_24C67D3BC(v3, v4, v5, v8);
  }
  return a1;
}

void sub_24C67D390(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_24C729B04((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C67D3BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_24C667470();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_24C67D488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C67D49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_24C67CDF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_24C67D4C0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDDAC8;
  sub_24C67D6B4((uint64_t)&v6[1], a2, (int32x4_t **)a3);
  *(void *)a1 = &unk_26FEDD950;
  int v7 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v8 = *(int32x4_t **)a3;
  int64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9)
  {
    if (v9 < 0) {
      sub_24C667470();
    }
    int64_t v10 = (char *)operator new(v9);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 32) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 24) = v11;
  }
  *(void *)(a1 + 40) = v6 + 1;
  *(void *)(a1 + 48) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_26FEDD7F0;
  return a1;
}

void sub_24C67D670(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_24C67D688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  long long v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 24) = v14;
    operator delete(v14);
  }
  sub_24C66FC40((uint64_t)&a11);
  sub_24C66FC40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_24C67D6B4(uint64_t a1, int *a2, int32x4_t **a3)
{
  long long v28 = 0u;
  espresso_buffer_pack_tensor_shape();
  uint64_t v6 = *a2;
  if (v6 >= 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type");
    goto LABEL_20;
  }
  uint64_t v7 = qword_24C72FAE8[v6];
  int64_t v9 = *a3;
  uint64_t v8 = (char *)a3[1];
  if (*a3 == (int32x4_t *)v8)
  {
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  unint64_t v10 = v8 - (char *)v9 - 8;
  if (v10 >= 0x38)
  {
    uint64_t v14 = (v10 >> 3) + 1;
    uint64_t v12 = (int32x4_t *)((char *)v9 + 8 * (v14 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v15 = v9 + 2;
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFF8;
    v18.i64[0] = 0x100000001;
    v18.i64[1] = 0x100000001;
    do
    {
      int32x4_t v20 = v15[-2];
      int32x4_t v19 = v15[-1];
      int32x4_t v22 = *v15;
      int32x4_t v21 = v15[1];
      v15 += 4;
      int32x4_t v16 = vmulq_s32(v16, vuzp1q_s32(v20, v19));
      int32x4_t v18 = vmulq_s32(v18, vuzp1q_s32(v22, v21));
      v17 -= 8;
    }
    while (v17);
    int8x16_t v23 = (int8x16_t)vmulq_s32(v18, v16);
    *(int32x2_t *)v23.i8 = vmul_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    int v11 = v23.i32[0] * v23.i32[1];
    if (v14 == (v14 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_10;
    }
  }
  else
  {
    int v11 = 1;
    uint64_t v12 = *a3;
  }
  do
  {
    __int32 v24 = v12->i32[0];
    uint64_t v12 = (int32x4_t *)((char *)v12 + 8);
    v11 *= v24;
  }
  while (v12 != (int32x4_t *)v8);
LABEL_10:
  uint64_t v13 = v11;
LABEL_11:
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v13 * v7 + 4095) & 0xFFFFFFFFFFFFF000, 0x1E091250uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_20;
  }
  *(void *)&long long v28 = memptr;
  uint64_t v25 = *a2;
  if (v25 >= 5 || ((0x1Du >> v25) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type.");
    goto LABEL_20;
  }
  uint64_t v29 = dword_24C72FB10[v25];
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8) = v28;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_26FEDD8F0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 168) = v29;
  *(_WORD *)(a1 + 176) = 257;
  if (*(_DWORD *)(a1 + 168) != 65568)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected espresso buffer storage type");
LABEL_20:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_24C67D938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C67D94C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C67D960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C67D974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C67D98C()
{
}

void *sub_24C67D9A0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDBA20;
  result[1] = v3;
  return result;
}

uint64_t sub_24C67D9E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDBA20;
  a2[1] = v2;
  return result;
}

void sub_24C67DA14(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderEspressoV1LoadResources", "", v5, 2u);
  }
}

uint64_t sub_24C67DA9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46-[CSUSystemSearchTextEncoderV1 loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C67DB0C()
{
  return &unk_26FEDB838;
}

unsigned __int8 *sub_24C67DB18(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_24C66F398((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x60uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  unint64_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)unint64_t v27 = 0;
  *((_DWORD *)v15 + 12) = 4;
  *((void *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((void *)v15 + 5) = &unk_26FEDD7F0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  void *v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C67DF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C67E0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
      {
LABEL_8:

        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a15);

      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_24C67E178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C67E188(uint64_t a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if ((std::__fs::filesystem::path *)a1 == this) {
      return a1;
    }
    char v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*(char *)(a1 + 23) < 0)
    {
      if (v4 >= 0) {
        unint64_t v10 = this;
      }
      else {
        unint64_t v10 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      }
      if (v4 >= 0) {
        std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
      }
      sub_24C67E33C((void **)a1, v10, size);
      return a1;
    }
    else
    {
      if ((*((unsigned char *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        long long v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = *((void *)&this->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v5;
        return a1;
      }
      sub_24C67E274((void *)a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      return a1;
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a1).__size_) {
      std::string::push_back((std::string *)a1, 47);
    }
    int v7 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v7 >= 0) {
      unint64_t v8 = this;
    }
    else {
      unint64_t v8 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v7 >= 0) {
      std::string::size_type v9 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a1, (const std::string::value_type *)v8, v9);
    return a1;
  }
}

void *sub_24C67E274(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      sub_24C6673C8();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    uint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      uint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **sub_24C67E33C(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    sub_24C6673C8();
  }
  unint64_t v10 = v7 - 1;
  unint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

std::string *sub_24C67E484(std::string *this, std::string *__src, std::string *a3)
{
  int v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  size_t v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v12 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    unint64_t v9 = 22;
    LOBYTE(v10) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    unint64_t v11 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size >= v7)
      {
        uint64_t v17 = this;
        if ((v10 & 0x80) == 0) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      size_t v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9) {
        sub_24C6673C8();
      }
      uint64_t v15 = this;
      if (v6 < 0)
      {
        uint64_t v15 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_16:
          char v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!size)
          {
LABEL_18:
            if (v9 != 22) {
              operator delete(v15);
            }
            this->__r_.__value_.__l.__size_ = size;
            this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
LABEL_22:
            uint64_t v17 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_23:
            unint64_t v18 = (char *)v17 + size;
            if (a3 != __src)
            {
              if (v7 >= 0x20)
              {
                if ((unint64_t)((char *)v17 + size - (char *)__src) >= 0x20)
                {
                  uint64_t v19 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
                  v18 += v7 & 0xFFFFFFFFFFFFFFE0;
                  unint64_t v26 = (_OWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + size);
                  unint64_t v27 = &__src->__r_.__value_.__r.__words[2];
                  unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v29 = *(_OWORD *)v27;
                    *(v26 - 1) = *((_OWORD *)v27 - 1);
                    _OWORD *v26 = v29;
                    v26 += 2;
                    v27 += 4;
                    v28 -= 32;
                  }
                  while (v28);
                  if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  uint64_t v19 = __src;
                }
              }
              else
              {
                uint64_t v19 = __src;
              }
              do
              {
                std::string::value_type v30 = v19->__r_.__value_.__s.__data_[0];
                uint64_t v19 = (std::string *)((char *)v19 + 1);
                *v18++ = v30;
              }
              while (v19 != a3);
            }
LABEL_54:
            std::string::value_type *v18 = 0;
            std::string::size_type v31 = v7 + size;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
              this->__r_.__value_.__l.__size_ = v31;
            }
            else {
              *((unsigned char *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            }
            return this;
          }
LABEL_17:
          memmove(v16, v15, size);
          goto LABEL_18;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_16;
      }
      unint64_t v24 = 2 * v9;
      if (v7 + size > 2 * v9) {
        unint64_t v24 = v7 + size;
      }
      uint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v25 = v24 | 7;
      }
      if (v24 >= 0x17) {
        size_t v14 = v25 + 1;
      }
      else {
        size_t v14 = 23;
      }
      char v16 = operator new(v14);
      if (!size) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src) {
    goto LABEL_12;
  }
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_24C6673C8();
  }
  if (v7 > 0x16)
  {
    uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v20 = v7 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    std::string::size_type v34 = v7;
    int64_t v35 = v21 | 0x8000000000000000;
    std::string __dst = p_dst;
    if (a3 == __src) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  HIBYTE(v35) = (_BYTE)a3 - (_BYTE)__src;
  p_dst = (void **)&__dst;
  if (a3 != __src)
  {
LABEL_29:
    memcpy(p_dst, __src, v7);
    p_dst = (void **)((char *)p_dst + v7);
  }
LABEL_30:
  *(unsigned char *)p_dst = 0;
  if (v35 >= 0) {
    uint64_t v22 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v22 = (const std::string::value_type *)__dst;
  }
  if (v35 >= 0) {
    std::string::size_type v23 = HIBYTE(v35);
  }
  else {
    std::string::size_type v23 = v34;
  }
  std::string::append(this, v22, v23);
  if (SHIBYTE(v35) < 0) {
    operator delete(__dst);
  }
  return this;
}

void sub_24C67E774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C67E858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67E9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67E9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67E9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67EA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67EB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67EBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67EC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67ED68(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24C67ED88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C67EEBC(uint64_t a1, void *a2, void *a3)
{
  id v19 = a2;
  id v9 = a3;
  uint64_t v10 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(void, void, id))(v10 + 16))(*(void *)(a1 + 40), 0, v9);
  }
  else
  {
    unint64_t v11 = objc_msgSend_imageEmbedding(v19, v5, v6, v7, v8);
    uint64_t v16 = objc_msgSend_embeddingRevision(*(void **)(*(void *)(a1 + 32) + 24), v12, v13, v14, v15);
    unint64_t v18 = objc_msgSend_embeddingWithBuffer_type_revision_(CSUCLIPV3Embedding, v17, (uint64_t)v11, 1, v16);
    (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v18, 0);
  }
}

void sub_24C67EFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67EFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67EFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C67F0B4(uint64_t a1, void *a2, void *a3)
{
  id v24 = a2;
  id v9 = a3;
  uint64_t v10 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(void, void, id))(v10 + 16))(*(void *)(a1 + 40), 0, v9);
  }
  else
  {
    unint64_t v11 = objc_msgSend_clipTextEmbedding(v24, v5, v6, v7, v8);
    uint64_t v16 = objc_msgSend_textEmbeddingType(*(void **)(*(void *)(a1 + 32) + 24), v12, v13, v14, v15);
    uint64_t v21 = objc_msgSend_embeddingRevision(*(void **)(*(void *)(a1 + 32) + 24), v17, v18, v19, v20);
    std::string::size_type v23 = objc_msgSend_embeddingWithBuffer_type_revision_(CSUCLIPV3Embedding, v22, (uint64_t)v11, v16, v21);
    (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v23, 0);
  }
}

void sub_24C67F1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C67F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_24C67F3D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67F3EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = objc_msgSend_buffer(*(void **)(a1 + 32), a2, a3, a4, a5);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = sub_24C67F4A8;
  v12[3] = &unk_2652E7D88;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 40);
  objc_msgSend_accessDataUsingBlock_(v8, v9, (uint64_t)v12, v10, v11);
}

void sub_24C67F498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C67F4A8(uint64_t a1, float *__B, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 56) != a3)
  {
    if (!*(void *)(a1 + 64)) {
      return;
    }
    objc_msgSend_errorWithCode_message_(CSUError, (const char *)__B, 8, @"Embedding buffers have incompatible sizes", a5);
    goto LABEL_7;
  }
  if ((a3 & 3) == 0)
  {
    vDSP_dotpr(*(const float **)(a1 + 48), 1, __B, 1, (float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a3 >> 2);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    return;
  }
  if (*(void *)(a1 + 64))
  {
    objc_msgSend_errorWithCode_message_(CSUError, (const char *)__B, 8, @"Invalid buffer length for float data", a5);
LABEL_7:
    **(void **)(a1 + 64) = (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_24C67FED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_24C6800E8((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_24C680064(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      char v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        char v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_24C6800E8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_24C68034C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_24C729B7C((void **)(v1 + 24), v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6804AC(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C680800(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      char v4 = *(void ***)a1;
      if (*(void *)a1)
      {
        long long v5 = *(void ***)(a1 + 8);
        uint64_t v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0) {
              operator delete(*(v5 - 3));
            }
            v5 -= 3;
          }
          while (v5 != v4);
          uint64_t v6 = *(void ***)a1;
        }
        *(void *)(a1 + 8) = v4;
        operator delete(v6);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = *(void ***)a1;
    if (*(void *)a1)
    {
      uint64_t v8 = *(void ***)(a1 + 8);
      id v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        id v9 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void sub_24C680940(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void ***)(a2 + 8);
      size_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a2) >> 3);
      long long v5 = *(void ***)a2;
      sub_24C680A58((void **)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void ***)a1;
    if (*(void *)a1)
    {
      uint64_t v7 = *(void ***)(a1 + 8);
      uint64_t v8 = *(void **)a1;
      if (v7 != v6)
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        uint64_t v8 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v6;
      operator delete(v8);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_24C671B74((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void sub_24C680A58(void **a1, void **a2, void **a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  id v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    unint64_t v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v19 = (void **)*a1;
      }
      else
      {
        uint64_t v19 = (void **)*a1;
        do
        {
          if (v6 != v9)
          {
            char v22 = *((unsigned char *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v22 >= 0) {
                uint64_t v20 = v6;
              }
              else {
                uint64_t v20 = *v6;
              }
              if (v22 >= 0) {
                size_t v21 = *((unsigned __int8 *)v6 + 23);
              }
              else {
                size_t v21 = (size_t)v6[1];
              }
              sub_24C67E33C(v9, v20, v21);
            }
            else if ((*((unsigned char *)v6 + 23) & 0x80) != 0)
            {
              sub_24C67E274(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              long long v23 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)id v9 = v23;
            }
          }
          v6 += 3;
          v9 += 3;
          v19 += 3;
        }
        while (v6 != a3);
        unint64_t v12 = (void **)a1[1];
      }
      while (v12 != v19)
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      a1[1] = v19;
    }
    else
    {
      long long v13 = &a2[v12 - v9];
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (v12 - v9);
        do
        {
          if (v6 != v9)
          {
            char v17 = *((unsigned char *)v6 + 23);
            if (*((char *)v9 + 23) < 0)
            {
              if (v17 >= 0) {
                uint64_t v15 = v6;
              }
              else {
                uint64_t v15 = *v6;
              }
              if (v17 >= 0) {
                size_t v16 = *((unsigned __int8 *)v6 + 23);
              }
              else {
                size_t v16 = (size_t)v6[1];
              }
              sub_24C67E33C(v9, v15, v16);
            }
            else if ((*((unsigned char *)v6 + 23) & 0x80) != 0)
            {
              sub_24C67E274(v9, *v6, (size_t)v6[1]);
            }
            else
            {
              long long v18 = *(_OWORD *)v6;
              v9[2] = v6[2];
              *(_OWORD *)id v9 = v18;
            }
          }
          v6 += 3;
          v9 += 3;
          v14 -= 24;
        }
        while (v14);
        id v9 = (void **)a1[1];
      }
      unint64_t v32 = v9;
      if (v13 != a3)
      {
        uint64_t v33 = 0;
        do
        {
          int64_t v35 = &v9[v33];
          unint64_t v36 = &v13[v33];
          if (SHIBYTE(v13[v33 + 2]) < 0)
          {
            sub_24C66E0A8(v35, *v36, (unint64_t)v36[1]);
          }
          else
          {
            long long v34 = *(_OWORD *)v36;
            v35[2] = v36[2];
            *(_OWORD *)int64_t v35 = v34;
          }
          v33 += 3;
        }
        while (&v13[v33] != a3);
        unint64_t v32 = &v9[v33];
      }
      a1[1] = v32;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (void **)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_72;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL) {
LABEL_72:
    }
      sub_24C667470();
    uint64_t v27 = 24 * v26;
    unint64_t v28 = (char *)operator new(24 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      uint64_t v29 = 0;
      do
      {
        std::string::value_type v30 = &v28[v29 * 8];
        std::string::size_type v31 = &v6[v29];
        if (SHIBYTE(v6[v29 + 2]) < 0)
        {
          sub_24C66E0A8(v30, *v31, (unint64_t)v31[1]);
        }
        else
        {
          *(_OWORD *)std::string::value_type v30 = *(_OWORD *)v31;
          *((void *)v30 + 2) = v31[2];
        }
        v29 += 3;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 8;
    }
    a1[1] = v28;
  }
}

void *sub_24C680E00(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    *uint64_t v11 = *v25;
LABEL_59:
    void *v25 = v11;
    goto LABEL_60;
  }
  *uint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    unint64_t v26 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24C681104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C681118((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C681118(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_24C681168(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C681188(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6811DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_24C681204(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C681224(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C681278(uint64_t a1)
{
  return sub_24C682DD8((void *)(a1 + 24));
}

uint64_t sub_24C681284(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a3[1];
  uint64_t v7 = *a3;
  unint64_t v8 = (std::__shared_weak_count *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_24C681348(a1, a2, &v7);
  long long v5 = v8;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_24C681330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_24C729840(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C681348(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_24C6814CC(a1, (long long *)a2, &v12);
  uint64_t v6 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int v7 = *(_DWORD *)(a2 + 80);
    int v8 = *(_DWORD *)(a2 + 88);
    uint64_t v9 = *(void *)(a1 + 152);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 160);
    if (v10) {
      goto LABEL_6;
    }
LABEL_10:
    *(_DWORD *)(a1 + 168) = v7;
    *(_DWORD *)(a1 + 172) = v8;
    *(void *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    return a1;
  }
  int v7 = *(_DWORD *)(a2 + 80);
  int v8 = *(_DWORD *)(a2 + 88);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v10) {
    goto LABEL_10;
  }
LABEL_6:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 168) = v7;
  *(_DWORD *)(a1 + 172) = v8;
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 184) = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void sub_24C6814B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6814CC(uint64_t a1, long long *a2, void *a3)
{
  long long v6 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v6;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v7 = a1 + 24;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    sub_24C671B74((char *)v7, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(void *)(a1 + 56) = *((id *)a2 + 7);
  *(_OWORD *)(a1 + 64) = a2[4];
  int v8 = *((_DWORD *)a2 + 22);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(_DWORD *)(a1 + 88) = v8;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 128) = *a3;
  uint64_t v9 = (void *)(a1 + 128);
  uint64_t v10 = (void **)(a1 + 96);
  uint64_t v49 = (void *)(a1 + 104);
  *(void *)(a1 + 96) = &unk_26FEDD380;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 136) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 160) = 0;
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v59 = (unsigned int *)&v60;
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v12 = (long long *)*((void *)a2 + 3);
    for (i = (long long *)*((void *)a2 + 4); v12 != i; uint64_t v12 = (long long *)((char *)v12 + 24))
    {
      while (1)
      {
        if (*((char *)v12 + 23) < 0)
        {
          sub_24C66E0A8(__p, *(void **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v14 = *v12;
          uint64_t v57 = (void *)*((void *)v12 + 2);
          *(_OWORD *)__p = v14;
        }
        if ((*(unsigned int (**)(void, void **))(*(void *)*v9 + 88))(*v9, __p))
        {
          if (SHIBYTE(v57) >= 0) {
            float v15 = __p;
          }
          else {
            float v15 = (void **)__p[0];
          }
          if (SHIBYTE(v57) >= 0) {
            float v16 = (void *)HIBYTE(v57);
          }
          else {
            float v16 = __p[1];
          }
          unsigned int v17 = (*(uint64_t (**)(void, void **, void *))(*(void *)*v9 + 32))(*v9, v15, v16);
          unsigned int v18 = v17;
          unint64_t v19 = v60;
          uint64_t v20 = &v60;
          unint64_t v21 = &v60;
          if (v60)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v21 = (uint64_t **)v19;
                unsigned int v22 = *((_DWORD *)v19 + 7);
                if (v17 >= v22) {
                  break;
                }
                unint64_t v19 = *v21;
                uint64_t v20 = v21;
                if (!*v21) {
                  goto LABEL_28;
                }
              }
              if (v22 >= v17) {
                break;
              }
              unint64_t v19 = v21[1];
              if (!v19)
              {
                uint64_t v20 = v21 + 1;
                goto LABEL_28;
              }
            }
          }
          else
          {
LABEL_28:
            uint64_t v23 = operator new(0x20uLL);
            v23[7] = v18;
            *(void *)uint64_t v23 = 0;
            *((void *)v23 + 1) = 0;
            *((void *)v23 + 2) = v21;
            *uint64_t v20 = (uint64_t *)v23;
            if (*(void *)v59)
            {
              unint64_t v59 = *(unsigned int **)v59;
              uint64_t v23 = *v20;
            }
            sub_24C681E28(v60, (uint64_t *)v23);
            ++v61;
          }
        }
        if (SHIBYTE(v57) < 0) {
          break;
        }
        uint64_t v12 = (long long *)((char *)v12 + 24);
        if (v12 == i) {
          goto LABEL_31;
        }
      }
      operator delete(__p[0]);
    }
  }
LABEL_31:
  uint64_t v24 = (void *)*v9;
  if (*(char *)(*v9 + 79) < 0)
  {
    uint64_t v25 = (void *)v24[7];
    uint64_t v26 = v24[8];
  }
  else
  {
    uint64_t v25 = v24 + 7;
    uint64_t v26 = *(unsigned __int8 *)(*v9 + 79);
  }
  unsigned int v27 = (*(uint64_t (**)(void *, void *, uint64_t))(*v24 + 32))(v24, v25, v26);
  unsigned int v28 = v27;
  uint64_t v29 = v60;
  std::string::value_type v30 = &v60;
  std::string::size_type v31 = &v60;
  if (v60)
  {
    while (1)
    {
      while (1)
      {
        std::string::size_type v31 = (uint64_t **)v29;
        unsigned int v32 = *((_DWORD *)v29 + 7);
        if (v27 >= v32) {
          break;
        }
        uint64_t v29 = *v31;
        std::string::value_type v30 = v31;
        if (!*v31) {
          goto LABEL_41;
        }
      }
      if (v32 >= v27) {
        break;
      }
      uint64_t v29 = v31[1];
      if (!v29)
      {
        std::string::value_type v30 = v31 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    uint64_t v33 = operator new(0x20uLL);
    v33[7] = v28;
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + 1) = 0;
    *((void *)v33 + 2) = v31;
    char *v30 = (uint64_t *)v33;
    if (*(void *)v59)
    {
      unint64_t v59 = *(unsigned int **)v59;
      uint64_t v33 = *v30;
    }
    sub_24C681E28(v60, (uint64_t *)v33);
    ++v61;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int v53 = &v54;
  sub_24C681FDC((uint64_t *)&v53, v59, (unsigned int *)&v60);
  int64_t v35 = v53;
  long long v34 = v54;
  __p[0] = &unk_26FEDD380;
  __p[1] = v53;
  uint64_t v57 = v54;
  uint64_t v58 = v55;
  if (!v55)
  {
    __p[1] = &v57;
    int64_t v35 = &v57;
    if (v10 == __p) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v54[2] = &v57;
  int v53 = &v54;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  if (v10 != __p)
  {
LABEL_48:
    sub_24C6822F4(v49, v35, &v57);
    long long v34 = v57;
  }
LABEL_49:
  __p[0] = &unk_26FEDD380;
  sub_24C6822A0((uint64_t)&__p[1], v34);
  sub_24C6822A0((uint64_t)&v53, v54);
  uint64_t v36 = objc_opt_new();
  int8x8_t v37 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v36;

  objc_msgSend_setDenyListRules_(*(void **)(a1 + 144), v38, *(void *)(a1 + 56), v39, v40);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  size_t v50 = &v51;
  sub_24C681FDC((uint64_t *)&v50, v59, (unsigned int *)&v60);
  unint64_t v42 = v50;
  unint64_t v41 = v51;
  __p[0] = &unk_26FEDD380;
  __p[1] = v50;
  uint64_t v57 = v51;
  uint64_t v58 = v52;
  if (!v52)
  {
    __p[1] = &v57;
    unint64_t v42 = &v57;
    if (v10 == __p) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v51[2] = &v57;
  size_t v50 = &v51;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v10 != __p)
  {
LABEL_53:
    sub_24C6822F4(v49, v42, &v57);
    unint64_t v41 = v57;
  }
LABEL_54:
  __p[0] = &unk_26FEDD380;
  sub_24C6822A0((uint64_t)&__p[1], v41);
  sub_24C6822A0((uint64_t)&v50, v51);
  uint64_t v43 = *(void *)(a1 + 72);
  if (v43)
  {
    if (v43 == 1)
    {
      uint64_t v44 = operator new(0x48uLL);
      v44[1] = 0;
      void v44[2] = 0;
      *uint64_t v44 = &unk_26FEDBBB8;
      char v45 = v44 + 3;
      sub_24C682B78((uint64_t)(v44 + 3), (uint64_t)&v59, (int *)(a1 + 68));
    }
    else
    {
      int v46 = sub_24C69662C();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_24C664000, v46, OS_LOG_TYPE_INFO, "Scoring method not specified, using GEOMETRICMEAN scorer by default", (uint8_t *)__p, 2u);
      }

      uint64_t v44 = operator new(0x48uLL);
      v44[1] = 0;
      void v44[2] = 0;
      *uint64_t v44 = &unk_26FEDBBB8;
      char v45 = v44 + 3;
      sub_24C682B78((uint64_t)(v44 + 3), (uint64_t)&v59, (int *)(a1 + 68));
    }
  }
  else
  {
    uint64_t v44 = operator new(0x48uLL);
    v44[1] = 0;
    void v44[2] = 0;
    *uint64_t v44 = &unk_26FEDBBF0;
    char v45 = v44 + 3;
    sub_24C6826E8((uint64_t)(v44 + 3), (uint64_t)&v59, (int *)(a1 + 88));
  }
  uint64_t v47 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v45;
  *(void *)(a1 + 160) = v44;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  sub_24C6822A0((uint64_t)&v59, v60);
  return a1;
}

void sub_24C681B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v26);
  sub_24C6822A0(v24 - 104, *(void **)(v24 - 96));
  sub_24C66FC40(a10);

  sub_24C66FC40(v22);
  *(void *)(v21 + 96) = a11;
  sub_24C6822A0(a12, *(void **)(v21 + 112));
  sub_24C680064(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_24C681C68(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {

    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *(void *)(a1 + 96) = &unk_26FEDD380;
  sub_24C6822A0(a1 + 104, *(void **)(a1 + 112));

  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      long long v6 = *(void **)(a1 + 24);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 24;
        }
        while (v5 != v4);
        long long v6 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v4;
      operator delete(v6);
    }
  }
  return a1;
}

uint64_t sub_24C681DC4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2 != (void *)(result + 16))
  {
    uint64_t v3 = *a2;
    do
    {
      *(_DWORD *)(v3 + 4 * *((unsigned int *)v2 + 7)) = 872415232;
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)(result + 16));
  }
  return result;
}

uint64_t *sub_24C681E28(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *uint64_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *uint64_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_24C681FDC(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    int v6 = a2;
    uint64_t v7 = result;
    int v8 = result + 1;
    do
    {
      __n128 result = sub_24C6820F0(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x20uLL);
        v11[7] = v6[7];
        uint64_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        uint64_t *v10 = (uint64_t)v11;
        uint64_t v13 = *(void **)*v7;
        if (v13)
        {
          *uint64_t v7 = (uint64_t)v13;
          uint64_t v14 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v14 = (uint64_t *)v11;
        }
        __n128 result = sub_24C681E28((uint64_t *)v7[1], v14);
        ++v7[2];
        uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            float v15 = v9;
            uint64_t v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        float v15 = (unsigned int *)*((void *)v6 + 2);
        BOOL v16 = *(void *)v15 == (void)v6;
        int v6 = v15;
      }
      while (!v16);
LABEL_3:
      int v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_24C6820F0(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    unsigned int v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v19 = (uint64_t *)v18;
          unsigned int v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t *)v22;
            unsigned int v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_24C6822A0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_24C6822A0(a1, *a2);
    sub_24C6822A0(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_24C6822F4(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)a1;
  if (a1[2])
  {
    unsigned int v6 = (void *)*a1;
    int v8 = (uint64_t **)(a1 + 1);
    uint64_t v7 = a1[1];
    *a1 = a1 + 1;
    *(void *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1]) {
      uint64_t v9 = (void *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      unsigned int v24 = 0;
LABEL_47:
      sub_24C6822A0((uint64_t)a1, v24);
      goto LABEL_48;
    }
    uint64_t v10 = (void *)v9[2];
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if ((void *)*v10 == v9)
      {
        void *v10 = 0;
        while (1)
        {
          int64_t v35 = (void *)v10[1];
          if (!v35) {
            break;
          }
          do
          {
            uint64_t v10 = v35;
            int64_t v35 = (void *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (void *)v10[1])
        {
          do
          {
            uint64_t v10 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      uint64_t v12 = v9;
      uint64_t v13 = v4;
      while (1)
      {
        uint64_t v9 = v10;
        unsigned int v14 = *((_DWORD *)v13 + 7);
        *((_DWORD *)v12 + 7) = v14;
        BOOL v15 = *v8;
        unsigned int v16 = (void *)(v5 + 8);
        unsigned int v17 = (void *)(v5 + 8);
        if (*v8) {
          break;
        }
LABEL_14:
        void *v12 = 0;
        v12[1] = 0;
        v12[2] = v16;
        void *v17 = v12;
        uint64_t v18 = **(void **)v5;
        if (v18) {
          goto LABEL_15;
        }
LABEL_16:
        sub_24C681E28(*(uint64_t **)(v5 + 8), v12);
        ++*(void *)(v5 + 16);
        if (v10)
        {
          uint64_t v10 = (void *)v10[2];
          if (v10)
          {
            uint64_t v21 = (void *)*v10;
            if ((void *)*v10 == v9)
            {
              void *v10 = 0;
              while (1)
              {
                uint64_t v22 = (void *)v10[1];
                if (!v22) {
                  break;
                }
                do
                {
                  uint64_t v10 = v22;
                  uint64_t v22 = (void *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; uint64_t v21 = (void *)v10[1])
              {
                do
                {
                  uint64_t v10 = v21;
                  uint64_t v21 = (void *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        unint64_t v19 = (void *)v13[1];
        if (v19)
        {
          do
          {
            uint64_t v4 = v19;
            unint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v4 = (void *)v13[2];
            BOOL v20 = *v4 == (void)v13;
            uint64_t v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          uint64_t v12 = v9;
          uint64_t v13 = v4;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          unsigned int v16 = v15;
          if (v14 >= *((_DWORD *)v15 + 7)) {
            break;
          }
          BOOL v15 = (uint64_t *)*v15;
          unsigned int v17 = v16;
          if (!*v16) {
            goto LABEL_14;
          }
        }
        BOOL v15 = (uint64_t *)v15[1];
      }
      while (v15);
      unsigned int v17 = v16 + 1;
      void *v12 = 0;
      v12[1] = 0;
      v12[2] = v16;
      v16[1] = v12;
      uint64_t v18 = **(void **)v5;
      if (!v18) {
        goto LABEL_16;
      }
LABEL_15:
      *(void *)uint64_t v5 = v18;
      uint64_t v12 = (void *)*v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_24C6822A0(v5, v9);
    if (v10)
    {
      for (i = (void *)v10[2]; i; i = (void *)i[2])
        uint64_t v10 = i;
      a1 = (void *)v5;
      unsigned int v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    uint64_t v25 = (uint64_t ***)(v5 + 8);
    while (1)
    {
      uint64_t v26 = (uint64_t *)operator new(0x20uLL);
      unsigned int v27 = v26;
      unsigned int v28 = *((_DWORD *)v4 + 7);
      *((_DWORD *)v26 + 7) = v28;
      uint64_t v29 = *v25;
      std::string::value_type v30 = (uint64_t **)(v5 + 8);
      std::string::size_type v31 = (uint64_t **)(v5 + 8);
      if (*v25) {
        break;
      }
LABEL_52:
      uint64_t *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      _DWORD *v31 = v26;
      uint64_t v32 = **(void **)v5;
      if (v32) {
        goto LABEL_53;
      }
LABEL_54:
      sub_24C681E28(*(uint64_t **)(v5 + 8), v27);
      ++*(void *)(v5 + 16);
      uint64_t v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          long long v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = (void *)v4[2];
          BOOL v20 = *v34 == (void)v4;
          uint64_t v4 = v34;
        }
        while (!v20);
      }
      uint64_t v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        std::string::value_type v30 = v29;
        if (v28 >= *((_DWORD *)v29 + 7)) {
          break;
        }
        uint64_t v29 = (uint64_t **)*v29;
        std::string::size_type v31 = v30;
        if (!*v30) {
          goto LABEL_52;
        }
      }
      uint64_t v29 = (uint64_t **)v29[1];
    }
    while (v29);
    std::string::size_type v31 = v30 + 1;
    uint64_t *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)v5;
    if (!v32) {
      goto LABEL_54;
    }
LABEL_53:
    *(void *)uint64_t v5 = v32;
    unsigned int v27 = *v31;
    goto LABEL_54;
  }
}

void sub_24C682620(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBBF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C682640(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBBF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C682694(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26FEDB888;
  *(void *)(a1 + 32) = &unk_26FEDD380;
  sub_24C6822A0(a1 + 40, *(void **)(a1 + 48));
}

uint64_t sub_24C6826E8(uint64_t a1, uint64_t a2, int *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = (unsigned int *)v8;
  sub_24C681FDC((uint64_t *)&v7, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  int v5 = *a3;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = v10;
  sub_24C681FDC((uint64_t *)&v9, v7, (unsigned int *)v8);
  sub_24C6827F0((void *)a1, (uint64_t)&v9);
  sub_24C6822A0((uint64_t)&v9, v10[0]);
  *(void *)a1 = &unk_26FEDB8E8;
  *(_DWORD *)(a1 + 40) = v5;
  sub_24C6822A0((uint64_t)&v7, v8[0]);
  return a1;
}

void sub_24C6827B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

void sub_24C6827D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *sub_24C6827F0(void *a1, uint64_t a2)
{
  *a1 = &unk_26FEDB888;
  uint64_t v3 = (void **)(a1 + 1);
  a1[3] = 0;
  a1[1] = &unk_26FEDD380;
  a1[2] = a1 + 3;
  uint64_t v4 = a1 + 2;
  a1[4] = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = &v9;
  sub_24C681FDC((uint64_t *)&v8, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  unsigned int v6 = v8;
  int v5 = v9;
  uint64_t v11 = &unk_26FEDD380;
  uint64_t v12 = v8;
  v13[0] = v9;
  v13[1] = v10;
  if (v10)
  {
    v9[2] = v13;
    int v8 = &v9;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (v3 == &v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v12 = v13;
  unsigned int v6 = v13;
  if (v3 != &v11)
  {
LABEL_5:
    sub_24C6822F4(v4, v6, v13);
    int v5 = (void *)v13[0];
  }
LABEL_6:
  uint64_t v11 = &unk_26FEDD380;
  sub_24C6822A0((uint64_t)&v12, v5);
  sub_24C6822A0((uint64_t)&v8, v9);
  return a1;
}

void sub_24C68293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  sub_24C6822A0(v17, a15);
  sub_24C6822A0((uint64_t)&a10, a11);
  void *v18 = v15;
  sub_24C6822A0(v16, *v19);
  _Unwind_Resume(a1);
}

__n64 sub_24C682980(uint64_t a1, float **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    return 0;
  }
  else
  {
    unint64_t v4 = (char *)v3 - (char *)v2 - 4;
    int v5 = *a2;
    if (v4 < 4) {
      goto LABEL_13;
    }
    uint64_t v6 = (v4 >> 2) + 1;
    int v5 = &v2[v6 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    int v8 = *a2;
    do
    {
      LODWORD(v12) = *(void *)v8;
      float v13 = logf(COERCE_FLOAT(HIDWORD(*(void *)v8)));
      result.n64_f32[0] = logf(v12);
      result.n64_f32[1] = v13;
      *(__n64 *)int v8 = result;
      v8 += 2;
      v7 -= 2;
    }
    while (v7);
    if (v6 != (v6 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_13:
      do
      {
        float *v5 = logf(*v5);
        ++v5;
      }
      while (v5 != v3);
    }
    int v10 = 0;
    do
    {
      float v11 = *v2++;
      int v10 = (int)(float)(v11 + (float)v10);
    }
    while (v2 != v3);
    result.n64_f32[0] = (float)v10;
  }
  return result;
}

float sub_24C682A68(uint64_t a1, unint64_t a2, float a3)
{
  float v3 = a3 / powf((float)a2, *(float *)(a1 + 40));
  return expf(v3);
}

float sub_24C682AA8(float a1, float a2)
{
  return a1 + a2;
}

void sub_24C682AB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C682AD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C682B24(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26FEDB888;
  *(void *)(a1 + 32) = &unk_26FEDD380;
  sub_24C6822A0(a1 + 40, *(void **)(a1 + 48));
}

uint64_t sub_24C682B78(uint64_t a1, uint64_t a2, int *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = (unsigned int *)v8;
  sub_24C681FDC((uint64_t *)&v7, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  int v5 = *a3;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = v10;
  sub_24C681FDC((uint64_t *)&v9, v7, (unsigned int *)v8);
  sub_24C6827F0((void *)a1, (uint64_t)&v9);
  sub_24C6822A0((uint64_t)&v9, v10[0]);
  *(void *)a1 = &unk_26FEDB8B8;
  *(_DWORD *)(a1 + 40) = v5;
  sub_24C6822A0((uint64_t)&v7, v8[0]);
  return a1;
}

void sub_24C682C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

void sub_24C682C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

__n64 sub_24C682C84(uint64_t a1, float **a2)
{
  uint64_t v2 = *a2;
  float v3 = a2[1];
  if (*a2 == v3)
  {
    return 0;
  }
  else
  {
    unint64_t v4 = (char *)v3 - (char *)v2 - 4;
    int v5 = *a2;
    if (v4 < 4) {
      goto LABEL_13;
    }
    uint64_t v6 = (v4 >> 2) + 1;
    int v5 = &v2[v6 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    int v8 = *a2;
    do
    {
      LODWORD(v12) = *(void *)v8;
      float v13 = logf(COERCE_FLOAT(HIDWORD(*(void *)v8)));
      result.n64_f32[0] = logf(v12);
      result.n64_f32[1] = v13;
      *(__n64 *)int v8 = result;
      v8 += 2;
      v7 -= 2;
    }
    while (v7);
    if (v6 != (v6 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_13:
      do
      {
        float *v5 = logf(*v5);
        ++v5;
      }
      while (v5 != v3);
    }
    int v10 = 0;
    do
    {
      float v11 = *v2++;
      int v10 = (int)(float)(v11 + (float)v10);
    }
    while (v2 != v3);
    result.n64_f32[0] = (float)v10;
  }
  return result;
}

float sub_24C682D6C(uint64_t a1, unint64_t a2, float a3)
{
  long double v5 = pow(2.71828183, a3);
  long double v6 = pow((double)a2, *(float *)(a1 + 40));
  return pow(v5, 1.0 / v6);
}

float sub_24C682DD0(float a1, float a2)
{
  return a1 + a2;
}

uint64_t sub_24C682DD8(void *a1)
{
  uint64_t v2 = a1[24];
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = a1[25];
  unint64_t v4 = (void *)a1[24];
  if (v3 == v2) {
    goto LABEL_12;
  }
  do
  {
    long double v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long double v6 = *(void **)(v3 - 40);
      if (!v6) {
        goto LABEL_4;
      }
LABEL_8:
      *(void *)(v3 - 32) = v6;
      operator delete(v6);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long double v6 = *(void **)(v3 - 40);
    if (v6) {
      goto LABEL_8;
    }
LABEL_4:
    v3 -= 48;
  }
  while (v3 != v2);
  unint64_t v4 = (void *)a1[24];
LABEL_12:
  a1[25] = v2;
  operator delete(v4);
LABEL_13:
  uint64_t v7 = (std::__shared_weak_count *)a1[23];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return sub_24C681C68((uint64_t)a1);
}

void sub_24C683000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68323C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68337C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68349C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6834AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C683808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6839E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6839F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6841C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_24C6843A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6846E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6848E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_24C684964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C684974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C684C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a12 + 48))(a12);
  sub_24C669A38(&a9);
  _Unwind_Resume(a1);
}

void sub_24C684C9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6852D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  if (a2 == 1)
  {
    uint64_t v26 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v26, v21);
    __cxa_end_catch();
    JUMPOUT(0x24C6851ECLL);
  }
  if (!a21) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a21 + 48))(a21);
  sub_24C669A38(&a18);
  _Unwind_Resume(a1);
}

void sub_24C685488(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6855D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C685700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68571C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C685E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C685ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6877D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_24C67BA58(&a64);
  sub_24C66C824((void **)(v67 - 144));

  _Unwind_Resume(a1);
}

uint64_t sub_24C687DB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = sub_24C687E28;
  v7[3] = &unk_2652E7DD0;
  long double v5 = *(void **)(a1 + 32);
  v7[4] = *(void *)(a1 + 40);
  v7[5] = a2;
  v7[6] = a3;
  return objc_msgSend_getMutableBytesWithHandler_(v5, a2, (uint64_t)v7, a4, a5);
}

void *sub_24C687E28(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a2 + *(void *)(a1 + 32)), *(const void **)(a1 + 40), *(void *)(a1 + 48));
}

void sub_24C687EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C687F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C687F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C688280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_24C6883D0(void **a1, uint64_t *a2)
{
  unint64_t v4 = (id *)*a1;
  uint64_t v3 = (id *)a1[1];
  uint64_t v5 = (char *)v3 - (unsigned char *)*a1;
  unint64_t v6 = (v5 >> 4) + 1;
  if (v6 >> 60) {
    sub_24C667470();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v6;
  int v10 = (char *)operator new(16 * v6);
  float v11 = &v10[16 * (v5 >> 4)];
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  unsigned int v14 = &v10[v9];
  a2[1] = 0;
  *(void *)float v11 = v12;
  *((void *)v11 + 1) = v13;
  uint64_t v15 = v11 + 16;
  uint64_t v16 = (char *)((char *)v3 - (char *)v4);
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v14;
    if (!v3) {
      return v15;
    }
    goto LABEL_32;
  }
  uint64_t v17 = v16 - 16;
  if ((unint64_t)(v16 - 16) < 0x110)
  {
    uint64_t v18 = v3;
LABEL_27:
    uint64_t v25 = v11;
    do
    {
      uint64_t v29 = (uint64_t)*(v18 - 2);
      v18 -= 2;
      *((void *)v25 - 2) = v29;
      v25 -= 16;
      id v30 = v18[1];
      v18[1] = 0;
      *((void *)v25 + 1) = v30;
    }
    while (v18 != v4);
    goto LABEL_29;
  }
  unint64_t v19 = (char *)v3 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0);
  BOOL v21 = v19 - 8 < v11 && &v10[v5 - 8 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0)] < (char *)v3;
  uint64_t v18 = v3;
  if (v19 - 16 < &v10[v5 - 8] && &v10[v5 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v3 - 8) {
    goto LABEL_27;
  }
  if (v21) {
    goto LABEL_27;
  }
  uint64_t v23 = ((unint64_t)v17 >> 4) + 1;
  uint64_t v24 = 16 * (v23 & 0x1FFFFFFFFFFFFFFELL);
  uint64_t v25 = &v11[-v24];
  uint64_t v18 = &v3[v24 / 0xFFFFFFFFFFFFFFF8];
  uint64_t v26 = (double *)(v11 - 32);
  unsigned int v27 = (const double *)(v3 - 4);
  uint64_t v28 = v23 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v32 = vld2q_f64(v27);
    v27[3] = 0.0;
    v27[1] = 0.0;
    vst2q_f64(v26, v32);
    v27 -= 4;
    v26 -= 4;
    v28 -= 2;
  }
  while (v28);
  float v11 = v25;
  if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_27;
  }
LABEL_29:
  *a1 = v25;
  a1[1] = v15;
  a1[2] = v14;
  do
  {

    v3 -= 2;
  }
  while (v3 != v4);
  uint64_t v3 = v4;
  if (v4) {
LABEL_32:
  }
    operator delete(v3);
  return v15;
}

void sub_24C6885A4()
{
}

void *sub_24C6885B8(uint64_t a1)
{
  __n64 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDB970;
  result[1] = v3;
  return result;
}

uint64_t sub_24C688600(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDB970;
  a2[1] = v2;
  return result;
}

void sub_24C68862C(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLLoadResources", "", v5, 2u);
  }
}

uint64_t sub_24C6886B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z36-[CSUTextEncoderE5ML loadResources:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z36-[CSUTextEncoderE5ML loadResources:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36-[CSUTextEncoderE5ML loadResources:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36-[CSUTextEncoderE5ML loadResources:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C688724()
{
  return &unk_26FEDB818;
}

void sub_24C688734()
{
}

void *sub_24C688748(uint64_t a1)
{
  __n64 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDB9C8;
  result[1] = v3;
  return result;
}

uint64_t sub_24C688790(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDB9C8;
  a2[1] = v2;
  return result;
}

void sub_24C6887BC(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLReLoadResources", "", v5, 2u);
  }
}

uint64_t sub_24C688844(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38-[CSUTextEncoderE5ML reLoadResources:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C6888B4()
{
  return &unk_26FEDB828;
}

void sub_24C6888C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_24C688E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  __cxa_free_exception(v20);

  _Unwind_Resume(a1);
}

void *sub_24C688F30(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2532F8600](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](a1 + 52);
  return a1;
}

void sub_24C6893E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  std::istream::~istream();
  MEMORY[0x2532F88A0](a12);
  *a10 = &unk_26FEDD950;
  uint64_t v23 = (std::__shared_weak_count *)a10[6];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = (void *)a10[2];
  if (v24)
  {
    a10[3] = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_24C689630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C689648(uint64_t a1)
{
  v15[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  v15[0] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = (uint64_t *)MEMORY[0x263F8C2B0];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v13 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)&v14[*(void *)(v13 - 24) - 8] = v4;
  uint64_t v5 = (std::ios_base *)&v14[*(void *)(v13 - 24) - 8];
  std::ios_base::init(v5, v14);
  uint64_t v6 = MEMORY[0x263F8C310] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  uint64_t v13 = v6;
  v15[0] = v2;
  MEMORY[0x2532F85F0](v14);
  id v7 = *(id *)(a1 + 32);
  objc_msgSend_UTF8String(v7, v8, v9, v10, v11);
  std::ofstream::open();
  std::ostream::write();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v14[*(void *)(v13 - 24) - 8], *(_DWORD *)&v14[*(void *)(v13 - 24) + 24] | 4);
  }
  uint64_t v13 = *v3;
  *(void *)&v14[*(void *)(v13 - 24) - 8] = v3[3];
  MEMORY[0x2532F8600](v14);
  std::ostream::~ostream();
  return MEMORY[0x2532F88A0](v15);
}

void sub_24C6898DC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](v1);
  _Unwind_Resume(a1);
}

void sub_24C689BBC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](v1);

  _Unwind_Resume(a1);
}

uint64_t sub_24C689C00(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {

    return 10007;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {

    return 5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {

    return 0;
  }
  else
  {
LABEL_8:
    if (qword_2697ED278 != -1) {
      dispatch_once(&qword_2697ED278, &unk_26FEDDB48);
    }
    if (byte_2697ED270) {
      uint64_t v3 = 10007;
    }
    else {
      uint64_t v3 = 5;
    }

    return v3;
  }
}

void sub_24C689D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C689D1C()
{
  uint64_t result = MGGetBoolAnswer();
  byte_2697ED270 = result;
  return result;
}

void *sub_24C689D44(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2532F86B0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_24C689EE8(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x2532F86C0](v13);
  return a1;
}

void sub_24C689E80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x2532F86C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x24C689E60);
}

void sub_24C689ED4(_Unwind_Exception *a1)
{
}

uint64_t sub_24C689EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_24C6673C8();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_24C68A0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **sub_24C68A0D8(char **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = (char *)operator new(8uLL);
  *(void *)uint64_t v10 = a2;
  a1[1] = v10 + 8;
  a1[2] = v10 + 8;
  *a1 = v10;
  uint64_t v11 = (char *)operator new(0x10uLL);
  size_t v12 = v11 + 16;
  *(void *)uint64_t v11 = *(void *)v10;
  *((void *)v11 + 1) = a3;
  *a1 = v11;
  a1[1] = v11 + 16;
  a1[2] = v11 + 16;
  operator delete(v10);
  unint64_t v13 = (unint64_t)a1[2];
  a1[1] = v11 + 16;
  if ((unint64_t)(v11 + 16) < v13)
  {
    *((void *)v11 + 2) = a4;
    uint64_t v14 = v11 + 24;
    goto LABEL_21;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = (v12 - *a1) >> 3;
  unint64_t v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61) {
    goto LABEL_43;
  }
  uint64_t v18 = v13 - (void)v15;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_44;
    }
    BOOL v20 = (char *)operator new(8 * v19);
    BOOL v21 = &v20[8 * v16];
    unint64_t v13 = (unint64_t)&v20[8 * v19];
    *(void *)BOOL v21 = a4;
    uint64_t v14 = v21 + 8;
    if (v12 == v15) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  BOOL v20 = 0;
  BOOL v21 = (char *)(8 * v16);
  unint64_t v13 = 0;
  *(void *)(8 * v16) = a4;
  uint64_t v14 = (char *)(8 * v16 + 8);
  if (v12 != v15)
  {
LABEL_14:
    unint64_t v22 = v11 - v15 + 8;
    if (v22 < 0x18) {
      goto LABEL_47;
    }
    uint64_t v23 = (v22 >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v24;
    v21 -= v24;
    uint64_t v25 = &v20[8 * v16 - 16];
    uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v11;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v11 - 1);
      *(_OWORD *)uint64_t v25 = v27;
      v25 -= 32;
      v11 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        uint64_t v28 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v21 - 1) = v28;
        v21 -= 8;
      }
      while (v12 != v15);
    }
  }
LABEL_19:
  *a1 = v21;
  a1[1] = v14;
  a1[2] = (char *)v13;
  if (v15)
  {
    operator delete(v15);
    unint64_t v13 = (unint64_t)a1[2];
  }
LABEL_21:
  a1[1] = v14;
  if ((unint64_t)v14 < v13)
  {
    *(void *)uint64_t v14 = a5;
    uint64_t v29 = (uint64_t)(v14 + 8);
    goto LABEL_42;
  }
  id v30 = *a1;
  uint64_t v31 = (v14 - *a1) >> 3;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61) {
LABEL_43:
  }
    sub_24C667470();
  uint64_t v33 = v13 - (void)v30;
  if (v33 >> 2 > v32) {
    unint64_t v32 = v33 >> 2;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (!v34)
  {
    int64_t v35 = 0;
    uint64_t v36 = (char *)(8 * v31);
    int8x8_t v37 = 0;
    *(void *)(8 * v31) = a5;
    uint64_t v29 = 8 * v31 + 8;
    int64_t v38 = v14 - v30;
    if (v14 == v30) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
  if (v34 >> 61) {
LABEL_44:
  }
    sub_24C66DB48();
  int64_t v35 = (char *)operator new(8 * v34);
  uint64_t v36 = &v35[8 * v31];
  int8x8_t v37 = &v35[8 * v34];
  *(void *)uint64_t v36 = a5;
  uint64_t v29 = (uint64_t)(v36 + 8);
  int64_t v38 = v14 - v30;
  if (v14 == v30) {
    goto LABEL_40;
  }
LABEL_34:
  unint64_t v39 = v38 - 8;
  if (v39 < 0x18)
  {
    uint64_t v40 = v14;
    do
    {
LABEL_39:
      uint64_t v47 = *((void *)v40 - 1);
      v40 -= 8;
      *((void *)v36 - 1) = v47;
      v36 -= 8;
    }
    while (v40 != v30);
    goto LABEL_40;
  }
  uint64_t v41 = (v39 >> 3) + 1;
  uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v40 = &v14[-v42];
  v36 -= v42;
  uint64_t v43 = &v35[8 * v31 - 16];
  uint64_t v44 = v14 - 16;
  uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v46 = *(_OWORD *)v44;
    *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
    *(_OWORD *)uint64_t v43 = v46;
    v43 -= 32;
    v44 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_39;
  }
LABEL_40:
  *a1 = v36;
  a1[1] = (char *)v29;
  a1[2] = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_42:
  a1[1] = (char *)v29;
  return a1;
}

void sub_24C68A3C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C68A4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68A8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68A9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68A9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68ABD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68ABE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68AF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C68B018(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_24C68B028(uint64_t a1)
{
}

void sub_24C68B030(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_24C68B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_24C68B324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68B33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68B350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68B360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68B370(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v8 + 40);
  uint64_t v9 = objc_msgSend_executeFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v10 = *(void *)(a1[6] + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_24C68B554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_24C68B594(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_setMergePolicy_(*(void **)(a1 + 32), a2, *MEMORY[0x263EFF060], a4, a5);
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v7 + 40);
  char v11 = objc_msgSend_save_(v6, v8, (uint64_t)&obj, v9, v10);
  objc_storeStrong((id *)(v7 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v11;
}

void sub_24C68BA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,id a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a60, 8);

  _Unwind_Resume(a1);
}

void sub_24C68BB64(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v8 + 40);
  uint64_t v9 = objc_msgSend_executeFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v10 = *(void *)(a1[6] + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_24C68BBDC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = (void *)a1[4];
  uint64_t v6 = *(void *)(a1[5] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  uint64_t v8 = *(void *)(a1[6] + 8);
  id v9 = *(id *)(v8 + 40);
  id obj = v7;
  objc_msgSend_convertToEntity_error_(v5, a2, (uint64_t)&obj, (uint64_t)&v9, a5);
  objc_storeStrong((id *)(v6 + 40), obj);
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_24C68BD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68BD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68BDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68BDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68BDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68BDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_24C68C044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C064(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = (void *)a1[4];
  uint64_t v6 = *(void *)(a1[5] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  uint64_t v8 = *(void *)(a1[6] + 8);
  id v9 = *(id *)(v8 + 40);
  id obj = v7;
  objc_msgSend_convertToEntity_error_(v5, a2, (uint64_t)&obj, (uint64_t)&v9, a5);
  objc_storeStrong((id *)(v6 + 40), obj);
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_24C68C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C68C21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C68C23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9A6D0](*(void *)(a1 + 32), sel_deleteObject_, *(void *)(a1 + 40), a4, a5);
}

void sub_24C68C340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_24C68C57C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v8 + 40);
  uint64_t Request_error = objc_msgSend_countForFetchRequest_error_(v6, a2, v7, (uint64_t)&obj, a5);
  objc_storeStrong((id *)(v8 + 40), obj);
  *(void *)(*(void *)(a1[6] + 8) + 24) = Request_error;
}

void sub_24C68C694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68C9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68D10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68D124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68D724()
{
}

void sub_24C68D820(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_24C669A24(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C68D83C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_24C68D84C(uint64_t a1)
{
}

void sub_24C68D854(uint64_t a1, void *a2, void *a3)
{
  id v80 = a2;
  id v8 = a3;
  if (!v80 || v8)
  {
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v5, 0, v6, v7);
    uint64_t v78 = *(void *)(*(void *)(a1 + 40) + 8);
    id v79 = v8;
    v69 = *(void **)(v78 + 40);
    *(void *)(v78 + 40) = v79;
  }
  else
  {
    id v9 = objc_opt_new();
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);

    unint64_t v17 = objc_msgSend_textEmbedding(v80, v13, v14, v15, v16);
    unint64_t v22 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v18, v19, v20, v21);
    objc_msgSend_setCSUTextEmbedding_(v22, v23, (uint64_t)v17, v24, v25);

    id v30 = objc_msgSend_additionalLayers(v80, v26, v27, v28, v29);
    int64_t v35 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v31, v32, v33, v34);
    objc_msgSend_setAdditionalLayers_(v35, v36, (uint64_t)v30, v37, v38);

    uint64_t v43 = objc_msgSend_tokenSegments(v80, v39, v40, v41, v42);
    uint64_t v48 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v44, v45, v46, v47);
    objc_msgSend_setTokenSegments_(v48, v49, (uint64_t)v43, v50, v51);

    uint64_t v56 = objc_msgSend_truncatedInput(v80, v52, v53, v54, v55);
    uint64_t v61 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v57, v58, v59, v60);
    objc_msgSend_setTruncatedInput_(v61, v62, v56, v63, v64);

    v69 = objc_msgSend_processedInput(v80, v65, v66, v67, v68);
    v74 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v70, v71, v72, v73);
    objc_msgSend_setProcessedInput_(v74, v75, (uint64_t)v69, v76, v77);
  }
}

void sub_24C68D9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68DA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68DA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_24C68DC1C(uint64_t a1, void *a2, void *a3)
{
  id v80 = a2;
  id v8 = a3;
  if (v80)
  {
    id v9 = objc_opt_new();
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v10, (uint64_t)v9, v11, v12);

    unint64_t v17 = objc_msgSend_textEmbedding(v80, v13, v14, v15, v16);
    unint64_t v22 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v18, v19, v20, v21);
    objc_msgSend_setCSUTextEmbedding_(v22, v23, (uint64_t)v17, v24, v25);

    id v30 = objc_msgSend_additionalLayers(v80, v26, v27, v28, v29);
    int64_t v35 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v31, v32, v33, v34);
    objc_msgSend_setAdditionalLayers_(v35, v36, (uint64_t)v30, v37, v38);

    uint64_t v43 = objc_msgSend_tokenSegments(v80, v39, v40, v41, v42);
    uint64_t v48 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v44, v45, v46, v47);
    objc_msgSend_setTokenSegments_(v48, v49, (uint64_t)v43, v50, v51);

    uint64_t v56 = objc_msgSend_truncatedInput(v80, v52, v53, v54, v55);
    uint64_t v61 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v57, v58, v59, v60);
    objc_msgSend_setTruncatedInput_(v61, v62, v56, v63, v64);

    v69 = objc_msgSend_processedInput(v80, v65, v66, v67, v68);
    v74 = objc_msgSend_inferenceOutputs(*(void **)(a1 + 32), v70, v71, v72, v73);
    objc_msgSend_setProcessedInput_(v74, v75, (uint64_t)v69, v76, v77);
  }
  else
  {
    objc_msgSend_setInferenceOutputs_(*(void **)(a1 + 32), v5, 0, v6, v7);
    uint64_t v78 = *(void *)(*(void *)(a1 + 40) + 8);
    id v79 = v8;
    v69 = *(void **)(v78 + 40);
    *(void *)(v78 + 40) = v79;
  }
}

void sub_24C68DDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68DE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C68E038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E148()
{
}

void *sub_24C68E15C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDB918;
  result[1] = v3;
  return result;
}

uint64_t sub_24C68E1A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDB918;
  a2[1] = v2;
  return result;
}

void sub_24C68E1D0(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)id v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUTextEncoderE5MLRunOnInput", "", v5, 2u);
  }
}

uint64_t sub_24C68E258(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z35-[CSUTextEncoder runOnInput:error:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z35-[CSUTextEncoder runOnInput:error:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35-[CSUTextEncoder runOnInput:error:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35-[CSUTextEncoder runOnInput:error:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C68E2C8()
{
  return &unk_26FEDB808;
}

void sub_24C68E454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68E9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68EC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68ED58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68EEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68EF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68EF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68EF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68F9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C68FA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C68FC68(_Unwind_Exception *a1, int a2)
{
  sub_24C66DB7C((uint64_t)&v9);

  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  uint64_t v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v3);
  __cxa_end_catch();
  return v7;
}

uint64_t sub_24C68FDE0(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x2532F8960](v3, 0x20C4093837F09);
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  uint64_t v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_24C6903D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_24C6717DC((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_24C690670(uint64_t result, char *a2)
{
  if (result)
  {
    int v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v10, a2);
    sub_24C66A45C("PixelBufferTransfer operation [", &v10, &v11);
    sub_24C66A5A0("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v5 = &v9;
    }
    else {
      id v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C690768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_24C690854(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @" %@ ", a4, a5, a1);
}

void sub_24C6909EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C690B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C690B4C(uint64_t a1, unint64_t a2)
{
  int v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_24C667470();
  }
  os_signpost_id_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  uint64_t v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  int64_t v8 = v4 - v2;
  std::string v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_24;
  }
  unint64_t v10 = v8 - 16;
  std::string v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  std::string v12 = v4;
  if ((unint64_t)(v8 - 16) < 0x110) {
    goto LABEL_32;
  }
  std::string v13 = &v4[-(v10 & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v14 = (unint64_t)(v13 - 16);
  unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFF0;
  unint64_t v16 = (unint64_t)&v6[v15 - (v10 & 0xFFFFFFFFFFFFFFF0) - 16];
  v15 -= 8;
  unint64_t v17 = &v6[v15];
  unint64_t v18 = (unint64_t)(v13 - 8);
  BOOL v19 = &v6[v15 - (v10 & 0xFFFFFFFFFFFFFFF0)] >= v4 || v18 >= (unint64_t)v9;
  BOOL v20 = !v19;
  BOOL v21 = v16 >= (unint64_t)(v4 - 8) || v14 >= (unint64_t)v17;
  std::string v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  std::string v12 = v4;
  if (!v21) {
    goto LABEL_32;
  }
  std::string v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  std::string v12 = v4;
  if (v20) {
    goto LABEL_32;
  }
  uint64_t v22 = (v10 >> 4) + 1;
  uint64_t v23 = 16 * (v22 & 0x1FFFFFFFFFFFFFFELL);
  std::string v11 = &v9[-v23];
  std::string v12 = &v4[-v23];
  uint64_t v24 = (double *)(v9 - 32);
  uint64_t v25 = (const double *)(v4 - 32);
  uint64_t v26 = v22 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v30 = vld2q_f64(v25);
    v25[2] = 0.0;
    const double *v25 = 0.0;
    v25 -= 4;
    vst2q_f64(v24, v30);
    v24 -= 4;
    v26 -= 2;
  }
  while (v26);
  if (v22 != (v22 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_32:
    do
    {
      uint64_t v27 = *((void *)v12 - 2);
      v12 -= 16;
      *(void *)std::string v12 = 0;
      *((void *)v11 - 2) = v27;
      v11 -= 16;
      *((void *)v11 + 1) = *((void *)v12 + 1);
    }
    while (v12 != v2);
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  do
  {
    uint64_t v28 = (void *)*((void *)v4 - 2);
    v4 -= 16;
  }
  while (v4 != v2);
  if (v2)
  {
LABEL_24:
    operator delete(v2);
  }
}

void sub_24C690F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C690F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C690F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69107C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6910A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6910B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C691D64()
{
  JUMPOUT(0x24C691DC0);
}

void sub_24C691D6C()
{
}

void sub_24C691D80(void *a1, int a2)
{
  if (a2) {
    sub_24C669A24(a1);
  }
  _Unwind_Resume(v2);
}

void sub_24C691D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  JUMPOUT(0x24C691F44);
}

void sub_24C691D98()
{
  JUMPOUT(0x24C691F38);
}

void sub_24C691DAC()
{
  JUMPOUT(0x24C691F44);
}

void sub_24C691DB8()
{
}

void sub_24C691DC8()
{
  JUMPOUT(0x24C691FA8);
}

void sub_24C691DD4()
{
}

void sub_24C691DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  JUMPOUT(0x24C691F54);
}

void sub_24C691DF0()
{
}

void sub_24C691DF8()
{
}

void sub_24C691E00()
{
}

void sub_24C691E14()
{
  JUMPOUT(0x24C691F5CLL);
}

void sub_24C691E28()
{
  JUMPOUT(0x24C691F38);
}

void sub_24C691E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  JUMPOUT(0x24C691F8CLL);
}

void sub_24C691E54()
{
}

void sub_24C691E5C()
{
}

void sub_24C691E68()
{
}

void sub_24C691E70()
{
}

void sub_24C691E78()
{
}

void sub_24C691E80()
{
  JUMPOUT(0x24C691F54);
}

void sub_24C691E8C()
{
}

void sub_24C691E94()
{
}

void sub_24C691E9C()
{
}

void sub_24C691EA4()
{
}

void sub_24C691EAC()
{
}

void sub_24C691EB8()
{
  JUMPOUT(0x24C691EC0);
}

void sub_24C691EE8()
{
}

void sub_24C691EF0()
{
}

void sub_24C691EFC()
{
}

void sub_24C691F04()
{
  JUMPOUT(0x24C691F38);
}

void sub_24C691F0C()
{
}

void sub_24C691F18()
{
  JUMPOUT(0x24C691F38);
}

void sub_24C691F20()
{
  JUMPOUT(0x24C691F34);
}

id sub_24C691FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_hasPrefix_(v3, v4, @"/", v5, v6))
  {
    id v10 = v3;
  }
  else
  {
    objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 32), v7, (uint64_t)v3, v8, v9);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  std::string v11 = v10;

  return v11;
}

void sub_24C69201C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C69202C(const char ****a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (**a1)
  {
    uint64_t v7 = v3;
    objc_msgSend_errorWithCode_message_(CSUError, v3, 6, (uint64_t)v3, v4);
    id v3 = (const char *)(id)objc_claimAutoreleasedReturnValue();
    ***a1 = v3;
    uint64_t v5 = v7;
  }
  return MEMORY[0x270F9A758](v3, v5);
}

void sub_24C6920A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6920BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 24), v6, a2, v7, v8);
  unint64_t started = objc_msgSend_startIndex(v9, v10, v11, v12, v13);

  unint64_t v18 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 24), v15, (uint64_t)v5, v16, v17);
  unint64_t v23 = objc_msgSend_startIndex(v18, v19, v20, v21, v22);

  if (started >= v23) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = -1;
  }
  if (started > v23) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = v24;
  }

  return v25;
}

void sub_24C69214C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C692160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C692170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C692184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C692194(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 16))
  {

    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t result = sub_24C6928E4(a1, *a2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_24C69223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C692318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C692398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6923B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C692578(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6925BC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

void *sub_24C692708(void *a1, id *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1] - *a1;
  unint64_t v5 = (v4 >> 4) + 1;
  if (v5 >> 60) {
    sub_24C667470();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_24C66DB48();
    }
    id v10 = (char *)operator new(16 * v9);
  }
  else
  {
    id v10 = 0;
  }
  uint64_t v11 = &v10[16 * (v4 >> 4)];
  uint64_t v12 = &v10[16 * v9];
  id v13 = *a2;
  uint64_t v14 = *a3;
  *(void *)uint64_t v11 = v13;
  *((void *)v11 + 1) = v14;
  unint64_t v15 = v11 + 16;
  uint64_t v17 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  unint64_t v18 = &v16[-*a1];
  if (v16 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v16) {
      return v15;
    }
    goto LABEL_19;
  }
  BOOL v19 = v18 - 16;
  if ((unint64_t)(v18 - 16) < 0x110)
  {
    uint64_t v20 = (char *)a1[1];
LABEL_14:
    uint64_t v21 = v11;
    do
    {
      uint64_t v22 = *((void *)v20 - 2);
      v20 -= 16;
      *(void *)uint64_t v20 = 0;
      *((void *)v21 - 2) = v22;
      v21 -= 16;
      *((void *)v21 + 1) = *((void *)v20 + 1);
    }
    while (v20 != v17);
    goto LABEL_16;
  }
  uint64_t v25 = &v16[-((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v26 = (unint64_t)(v25 - 16);
  unint64_t v27 = (unint64_t)(v25 - 8);
  BOOL v29 = &v10[v4 - 8 - ((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0)] < v16 && v27 < (unint64_t)v11;
  uint64_t v20 = (char *)a1[1];
  if (&v10[v4 - ((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0) - 16] < v16 - 8 && v26 < (unint64_t)&v10[v4 - 8]) {
    goto LABEL_14;
  }
  if (v29) {
    goto LABEL_14;
  }
  uint64_t v31 = ((unint64_t)v19 >> 4) + 1;
  uint64_t v32 = 16 * (v31 & 0x1FFFFFFFFFFFFFFELL);
  uint64_t v21 = &v11[-v32];
  uint64_t v20 = &v16[-v32];
  int v33 = (double *)(v11 - 32);
  uint64_t v34 = (const double *)(v16 - 32);
  uint64_t v35 = v31 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v36 = vld2q_f64(v34);
    v34[2] = 0.0;
    const double *v34 = 0.0;
    v34 -= 4;
    vst2q_f64(v33, v36);
    v33 -= 4;
    v35 -= 2;
  }
  while (v35);
  uint64_t v11 = v21;
  if (v31 != (v31 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_14;
  }
LABEL_16:
  *a1 = v21;
  a1[1] = v15;
  a1[2] = v12;
  do
  {
    unint64_t v23 = (void *)*((void *)v16 - 2);
    v16 -= 16;
  }
  while (v16 != v17);
  uint64_t v16 = v17;
  if (v17) {
LABEL_19:
  }
    operator delete(v16);
  return v15;
}

uint64_t sub_24C6928E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = objc_msgSend_copy(v3, v4, v5, v6, v7);
  *(void *)(a1 + 8) = (unint64_t)objc_msgSend_length(v3, v8, v9, v10, v11) >> 1;
  if (objc_msgSend_length(*(void **)a1, v12, v13, v14, v15))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Malformed taxonomy relation data stream, buffer size is not divisible by node identifier size");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return a1;
}

void sub_24C69297C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

void sub_24C69299C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6929AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6929C4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(unsigned char *)(a1 + 55) = 4;
  strcpy((char *)(a1 + 32), "</s>");
  *(unsigned char *)(a1 + 79) = 5;
  strcpy((char *)(a1 + 56), "<unk>");
  uint64_t v4 = a1 + 96;
  *(void *)a1 = &unk_26FEDD310;
  sub_24C6EA744(a1 + 96);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_24C6EAC70(v4, v6, v7);
  if (v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C714970((uint64_t)&v12, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v11;
    }
    else {
      uint64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)v10);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  sub_24C71463C(&v12);
  return a1;
}

void sub_24C692B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_24C71463C(&a15);
      sub_24C6EA8E4(v16);
      sub_24C692B74(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void sub_24C692B60(_Unwind_Exception *a1)
{
  sub_24C692B74(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C692B74(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD250;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_24C692C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_24C6929C4(a1, a2) + 96;
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(void *)a3;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a3 + 8);
  }
  sub_24C6EC380(v5, v7, v8, &v10);
  sub_24C71463C(&v10);
  return a1;
}

void sub_24C692C64(_Unwind_Exception *a1)
{
  sub_24C692C78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C692C78(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD310;
  sub_24C6EA8E4(a1 + 96);
  *(void *)a1 = &unk_26FEDD250;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_24C692D28@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (((uint64_t (*)(void **))(*a1)[10])(a1) <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::to_string(&v16, a2);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v16;
    }
    else {
      uint64_t v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    sub_24C693C50((uint64_t)exception, v14, size);
    __cxa_throw(exception, (struct type_info *)&unk_26FEDBF78, (void (*)(void *))sub_24C692EC4);
  }
  uint64_t result = (void *)sub_24C6F50BC(a1 + 12, a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  unint64_t v8 = result;
  size_t v9 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = operator new(v10 + 1);
    a3[1] = v9;
    a3[2] = v11 | 0x8000000000000000;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v7;
    if (!v7)
    {
      *(unsigned char *)a3 = 0;
      return result;
    }
  }
  uint64_t result = memmove(a3, v8, v9);
  *((unsigned char *)a3 + v9) = 0;
  return result;
}

void sub_24C692E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_24C692EC4(std::exception *this)
{
  uint64_t v1 = this;
  this->__vftable = (std::exception_vtbl *)&unk_26FEDD2E8;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::exception::~exception(this);
}

uint64_t sub_24C692F44(uint64_t a1, char *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    size_t v29 = __len;
    int64_t v30 = v8 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v30) = __len;
    if (!__len)
    {
      LOBYTE(__dst) = 0;
      goto LABEL_18;
    }
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  if (*__src == 60 && __src[__len - 1] == 62)
  {
    if (v30 >= 0) {
      size_t v9 = (void **)&__dst;
    }
    else {
      size_t v9 = __dst;
    }
    if (v30 >= 0) {
      uint64_t v10 = HIBYTE(v30);
    }
    else {
      uint64_t v10 = v29;
    }
    uint64_t v11 = sub_24C6F4EF4((void **)(a1 + 96), (uint64_t)v9, v10);
    goto LABEL_36;
  }
LABEL_18:
  __p = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v30 >= 0) {
    uint64_t v12 = (void **)&__dst;
  }
  else {
    uint64_t v12 = __dst;
  }
  if (v30 >= 0) {
    uint64_t v13 = HIBYTE(v30);
  }
  else {
    uint64_t v13 = v29;
  }
  sub_24C6EE384(a1 + 96, (uint64_t)v12, v13, (char **)&__p, &v24);
  if (v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C714970((uint64_t)&v24, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v23;
    }
    else {
      uint64_t v22 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)v22);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  sub_24C71463C(&v24);
  uint64_t v14 = (unsigned int *)__p;
  uint64_t v15 = v26;
  if (v26 - (unsigned char *)__p == 8)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v16 = a1 + 8;
      uint64_t v17 = *(unsigned __int8 *)(a1 + 31);
    }
    int v18 = *(_DWORD *)__p;
    if (v18 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v16, v17))
    {
      BOOL v19 = __p;
      uint64_t v14 = (unsigned int *)((char *)__p + 4);
      goto LABEL_33;
    }
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v26;
  }
  BOOL v19 = v14;
  if (v15 - (unsigned char *)v14 != 4)
  {
    uint64_t v11 = sub_24C6F4EF4((void **)(a1 + 96), (uint64_t)"<unk>", 5);
    BOOL v19 = __p;
    if (!__p) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_33:
  uint64_t v11 = *v14;
LABEL_35:
  unint64_t v26 = v19;
  operator delete(v19);
LABEL_36:
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  return v11;
}

void sub_24C6931A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_24C693234(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 40))(__p, a1, v5);
      size_t v8 = __p;
      *((_DWORD *)sub_24C6943E0((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_24C72FF38, (_OWORD **)&v8) + 14) = v5;
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v5 = (v5 + 1);
    }
    while (v4 != v5);
  }
}

void sub_24C69332C(_Unwind_Exception *a1)
{
  sub_24C69435C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C693344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_24C69435C(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_24C69435C(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_24C693384@<Q0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  a2[1] = 0;
  uint64_t v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v5)
  {
    for (uint64_t i = 0; i != v5; uint64_t i = (i + 1))
    {
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 40))(&v17, a1, i);
      size_t v8 = *v4;
      size_t v9 = v4;
      uint64_t v10 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v10 = v8;
            unsigned int v11 = *((_DWORD *)v8 + 8);
            if (i >= v11) {
              break;
            }
            size_t v8 = (uint64_t *)*v10;
            size_t v9 = (uint64_t **)v10;
            if (!*v10) {
              goto LABEL_11;
            }
          }
          if (v11 >= i) {
            break;
          }
          size_t v8 = (uint64_t *)v10[1];
          if (!v8)
          {
            size_t v9 = (uint64_t **)(v10 + 1);
            goto LABEL_11;
          }
        }
        uint64_t v16 = v10;
        uint64_t v15 = (void **)(v10 + 5);
        if ((*((char *)v16 + 63) & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        uint64_t v12 = operator new(0x40uLL);
        v12[8] = i;
        *((void *)v12 + 6) = 0;
        *((void *)v12 + 7) = 0;
        *((void *)v12 + 5) = 0;
        *(void *)uint64_t v12 = 0;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = v10;
        *size_t v9 = (uint64_t *)v12;
        uint64_t v13 = (uint64_t *)**a2;
        uint64_t v14 = (uint64_t *)v12;
        if (v13)
        {
          *a2 = v13;
          uint64_t v14 = *v9;
        }
        sub_24C681E28(a2[1], v14);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        uint64_t v15 = (void **)(v12 + 10);
        if ((*((char *)v12 + 63) & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      operator delete(*v15);
LABEL_3:
      __n128 result = v17;
      *(__n128 *)uint64_t v15 = v17;
      v15[2] = v18;
    }
  }
  return result;
}

void sub_24C693518(_Unwind_Exception *a1)
{
  sub_24C69454C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C693530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_24C69454C(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_24C69454C(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_24C693570(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (*(char *)(a2 + 23) < 0) {
    sub_24C66E0A8(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  sub_24C6EE384(a1 + 96, (uint64_t)p_p, size, &v27, &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C714970((uint64_t)&v26, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v23 = &__p;
    }
    else {
      std::string v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)v23);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  sub_24C71463C(&v26);
  if (a3)
  {
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "prepending BOS not implemented!");
    __cxa_throw(v24, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  size_t v9 = v27;
  uint64_t v10 = v28;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    if (v11 < 0) {
      sub_24C667470();
    }
    uint64_t v12 = operator new(v10 - v9);
    *a4 = v12;
    a4[2] = &v12[v11 >> 2];
    bzero(v12, v10 - v9);
    a4[1] = (char *)v12 + v11;
    if ((unint64_t)(v11 - 4) < 0x1C)
    {
      uint64_t v13 = v9;
    }
    else
    {
      uint64_t v13 = v9;
      if ((unint64_t)((char *)v12 - v9) >= 0x20)
      {
        unint64_t v14 = ((unint64_t)(v11 - 4) >> 2) + 1;
        uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v16 = &v12[v15];
        uint64_t v13 = &v9[v15 * 4];
        __n128 v17 = (long long *)(v9 + 16);
        int v18 = v12 + 4;
        uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          _OWORD *v18 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 8;
        }
        while (v19);
        uint64_t v12 = v16;
        if (v14 == (v14 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_24;
        }
      }
    }
    do
    {
      int v21 = *(_DWORD *)v13;
      v13 += 4;
      *v12++ = v21;
    }
    while (v13 != v10);
  }
LABEL_24:
  if (v9)
  {
    uint64_t v28 = v9;
    operator delete(v9);
  }
}

void sub_24C6937AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C693848@<X0>(uint64_t a1@<X0>, char **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = *a2;
  uint64_t v5 = a2[1];
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_24C667470();
    }
    size_t v8 = operator new(v5 - v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[v7 >> 2];
    bzero(v8, v5 - v6);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8 + v7;
    if ((unint64_t)(v7 - 4) < 0x1C) {
      goto LABEL_20;
    }
    if ((unint64_t)((char *)v8 - v6) < 0x20) {
      goto LABEL_20;
    }
    unint64_t v9 = ((unint64_t)(v7 - 4) >> 2) + 1;
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v11 = &v8[v10];
    uint64_t v12 = &v6[v10 * 4];
    uint64_t v13 = (long long *)(v6 + 16);
    unint64_t v14 = v8 + 4;
    uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      _OWORD *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    size_t v8 = v11;
    int v6 = v12;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_20:
      do
      {
        int v17 = *(_DWORD *)v6;
        v6 += 4;
        *v8++ = v17;
      }
      while (v6 != v5);
    }
  }
  sub_24C6EEA8C(a1 + 96, (uint64_t)&__p, (uint64_t)a3, &v22);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C714970((uint64_t)&v22, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)p_p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return sub_24C71463C(&v22);
}

void sub_24C6939E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_24C71463C(&a15);
      if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
        _Unwind_Resume(a1);
      }
      operator delete(*(void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_24C693A68(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD310;
  sub_24C6EA8E4(a1 + 96);
  *(void *)a1 = &unk_26FEDD250;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 8));
LABEL_4:
      JUMPOUT(0x2532F8960);
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

void sub_24C693B2C(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_24C693E2C((uint64_t)a3, (uint64_t)v5, v3, (uint64_t)v5, v4);
}

void sub_24C693B68(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_24C6940A0((uint64_t)a3, (uint64_t)v5, v3, (uint64_t)v5, v4);
}

uint64_t sub_24C693BA4(uint64_t a1)
{
  return (int)sub_24C6F4D44((void **)(a1 + 96));
}

BOOL sub_24C693BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a1 + 96);
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = v4;
  }
  int v6 = sub_24C6F4EF4(v3, a2, v5);
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v7 = a1 + 56;
    uint64_t v8 = *(unsigned __int8 *)(a1 + 79);
  }
  return v6 != (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v7, v8);
}

uint64_t sub_24C693C50(uint64_t a1, void *__src, size_t __len)
{
  *(void *)a1 = &unk_26FEDD2E8;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  unint64_t v9 = std::string::insert(&__dst, 0, "OutOfVocabularyError: ", 0x16uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)(a1 + 24) = *((void *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 8) = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_24C693D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::exception::~exception(v15);
    _Unwind_Resume(a1);
  }
  std::exception::~exception(v15);
  _Unwind_Resume(a1);
}

void sub_24C693D9C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26FEDD2E8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C693E10(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_24C693E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  char v16 = 0;
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)a2 + 40))(__p);
      unint64_t v10 = *(void *)(a1 + 8);
      if (v10 < *(void *)(a1 + 16))
      {
        long long v9 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v14;
        *(_OWORD *)unint64_t v10 = v9;
        *(void *)(a1 + 8) = v10 + 24;
      }
      else
      {
        uint64_t v11 = sub_24C693F34((void **)a1, (uint64_t)__p);
        int v12 = SHIBYTE(v14);
        *(void *)(a1 + 8) = v11;
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 += 4;
    }
    while (v6 != a5);
  }
}

void sub_24C693EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_24C671CA8(&a16);
    _Unwind_Resume(a1);
  }
  sub_24C671CA8(&a16);
  _Unwind_Resume(a1);
}

char *sub_24C693F34(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C66DB48();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  size_t v8 = &v7[24 * v3];
  long long v9 = &v7[24 * v6];
  *(_OWORD *)size_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  int v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  uint64_t v14 = (char *)*a1;
  int v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    int v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_24C6940A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  if (a3 != a5)
  {
    while (1)
    {
      int v8 = sub_24C694280((uint64_t)&v29);
      int v9 = v8;
      uint64_t v11 = *(char **)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      if ((unint64_t)v11 >= v10) {
        break;
      }
      *(_DWORD *)uint64_t v11 = v8;
      uint64_t v7 = (uint64_t)(v11 + 4);
LABEL_4:
      *(void *)(a1 + 8) = v7;
      v30 += 24;
      if (v30 == a5) {
        return;
      }
    }
    int v12 = *(char **)a1;
    uint64_t v13 = (uint64_t)&v11[-*(void *)a1];
    uint64_t v14 = v13 >> 2;
    unint64_t v15 = (v13 >> 2) + 1;
    if (v15 >> 62) {
      sub_24C667470();
    }
    uint64_t v16 = v10 - (void)v12;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 62) {
        sub_24C66DB48();
      }
      int v18 = operator new(4 * v17);
      uint64_t v19 = &v18[4 * v14];
      _DWORD *v19 = v9;
      uint64_t v7 = (uint64_t)(v19 + 1);
      if (v11 == v12) {
        goto LABEL_23;
      }
    }
    else
    {
      int v18 = 0;
      uint64_t v19 = (_DWORD *)(4 * v14);
      *(_DWORD *)(4 * v14) = v9;
      uint64_t v7 = 4 * v14 + 4;
      if (v11 == v12)
      {
LABEL_23:
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = &v18[4 * v17];
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_4;
      }
    }
    unint64_t v20 = v11 - 4 - v12;
    if (v20 < 0x2C) {
      goto LABEL_30;
    }
    if ((unint64_t)(v11 - &v18[v13]) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v21 = (v20 >> 2) + 1;
    uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    std::string v23 = &v11[-v22];
    uint64_t v19 = (_DWORD *)((char *)v19 - v22);
    uint64_t v24 = &v18[4 * v14 - 16];
    uint64_t v25 = v11 - 16;
    uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    uint64_t v11 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_30:
      do
      {
        int v28 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--uint64_t v19 = v28;
      }
      while (v11 != v12);
    }
    goto LABEL_23;
  }
}

void sub_24C694260(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C694280(uint64_t a1)
{
  int v2 = *(void **)a1;
  uint64_t v1 = *(long long **)(a1 + 8);
  if (*((char *)v1 + 23) < 0)
  {
    sub_24C66E0A8(__p, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v3 = *v1;
    uint64_t v9 = *((void *)v1 + 2);
    *(_OWORD *)std::string __p = v3;
  }
  if (v9 >= 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    uint64_t v5 = (void *)HIBYTE(v9);
  }
  else {
    uint64_t v5 = __p[1];
  }
  uint64_t result = (*(uint64_t (**)(void, void **, void *))(*(void *)*v2 + 32))(*v2, v4, v5);
  uint64_t v7 = result;
  if (SHIBYTE(v9) < 0)
  {
    operator delete(__p[0]);
    return v7;
  }
  return result;
}

void sub_24C694340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C69435C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_24C69435C(a1, *(void *)a2);
    sub_24C69435C(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t **sub_24C6943E0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (!v6)
  {
    uint64_t v11 = a1 + 1;
    goto LABEL_29;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v8 >= 0) {
    unint64_t v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v10 = a2[1];
  }
  do
  {
    while (1)
    {
      uint64_t v11 = (uint64_t **)v6;
      uint64_t v14 = v6[4];
      int v12 = v6 + 4;
      uint64_t v13 = (void *)v14;
      int v15 = *((char *)v12 + 23);
      uint64_t v16 = v15 >= 0 ? v12 : v13;
      unint64_t v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      size_t v18 = (size_t)(v17 >= v10 ? v10 : v17);
      int v19 = memcmp(v9, v16, v18);
      if (v19) {
        break;
      }
      if (v10 >= v17) {
        goto LABEL_22;
      }
LABEL_8:
      unint64_t v6 = *v11;
      uint64_t v7 = v11;
      if (!*v11) {
        goto LABEL_29;
      }
    }
    if (v19 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    int v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0) {
        return v11;
      }
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    unint64_t v6 = v11[1];
  }
  while (v6);
  uint64_t v7 = v11 + 1;
LABEL_29:
  uint64_t v21 = (uint64_t *)v11;
  uint64_t v11 = (uint64_t **)operator new(0x40uLL);
  uint64_t v22 = *a4;
  std::string v23 = (uint64_t *)*((void *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *uint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  *((_DWORD *)v11 + 14) = 0;
  *uint64_t v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *uint64_t v7 = (uint64_t *)v11;
  uint64_t v24 = (uint64_t *)**a1;
  uint64_t v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    uint64_t v25 = *v7;
  }
  sub_24C681E28(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_24C69454C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_24C69454C(a1, *(void *)a2);
    sub_24C69454C(a1, *((void *)a2 + 1));
    if (a2[63] < 0)
    {
      operator delete(*((void **)a2 + 5));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void sub_24C694778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6947A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C694F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6950A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69510C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C695164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6951BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C695214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69526C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C695324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69547C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6954DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69562C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6956D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6958D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2 == 1)
  {
    uint64_t v11 = __cxa_begin_catch(exception_object);
    sub_24C676DA0((uint64_t)v11, v10);
    __cxa_end_catch();
    JUMPOUT(0x24C6958B4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C695B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C695B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C695B34(uint64_t a1, void *a2, float a3)
{
  id v13 = a2;
  *(float *)&double v5 = a3;
  unint64_t v10 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v8, v9, v5);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v11, (uint64_t)v10, (uint64_t)v13, v12);
}

void sub_24C695BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C695BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C695DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C695E04()
{
}

uint64_t sub_24C695E24(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_24C695EDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_24C695EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69631C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_24C6717DC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6964C0(uint64_t a1, const char **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD950;
  *(_DWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  id v13 = *(unsigned char **)(a3 + 16);
  uint64_t v12 = *(unsigned char **)(a3 + 24);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_24C667470();
    }
    int v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 48) = v16;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  *(void *)(a1 + 64) = *(void *)(a3 + 40);
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C696608(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

id sub_24C69662C()
{
  if (qword_2697ED2C8 == -1)
  {
    v0 = (void *)qword_2697ED018;
  }
  else
  {
    dispatch_once(&qword_2697ED2C8, &unk_26FEDDB68);
    v0 = (void *)qword_2697ED018;
  }
  return v0;
}

uint64_t sub_24C69669C()
{
  os_log_t v0 = os_log_create("com.apple.CoreSceneUnderstanding", "default");
  uint64_t v1 = qword_2697ED018;
  qword_2697ED018 = (uint64_t)v0;
  return MEMORY[0x270F9A758](v0, v1);
}

void sub_24C696BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6970C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_24C697194(uint64_t a1, void *__dst, size_t a3)
{
  return memcpy(__dst, **(const void ***)(a1 + 32), a3);
}

void sub_24C6975E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int16 sub_24C6976AC@<H0>(uint64_t a1@<X0>, float16x8_t *a2@<X1>)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = **(float32x4_t ***)(a1 + 32);
    if (v2 < 0x10)
    {
      unint64_t v4 = 0;
LABEL_7:
      unint64_t v14 = v2 - v4;
      int v15 = &a2->i16[v4];
      uint64_t v16 = &v3->i32[v4];
      do
      {
        __int32 v17 = *v16++;
        _Q0.i32[0] = v17;
        __asm { FCVT            H0, S0 }
        *v15++ = _Q0.i16[0];
        --v14;
      }
      while (v14);
      return _Q0.i16[0];
    }
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v5 = v3 + 2;
    size_t v6 = a2 + 1;
    unint64_t v7 = v2 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float32x4_t v9 = v5[-2];
      float32x4_t v8 = v5[-1];
      float32x4_t v11 = *v5;
      float32x4_t v10 = v5[1];
      v5 += 4;
      float16x8_t v12 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v9), v8);
      _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v11), v10);
      v6[-1] = v12;
      *size_t v6 = _Q0;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    if (v2 != v4) {
      goto LABEL_7;
    }
  }
  return _Q0.i16[0];
}

void sub_24C697794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6977A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  NSLog(&cfstr_PrintingMlmuti.isa);
  if (a3 >= 4)
  {
    uint64_t v5 = 0;
    do
    {
      NSLog(&cfstr_IndexZuValueF.isa, v5, *(float *)(a2 + 4 * v5));
      ++v5;
    }
    while (a3 >> 2 != v5);
  }
}

void sub_24C697D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_24C698590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C698798(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_24C6987A8(uint64_t a1)
{
}

void sub_24C6987B0(void *a1, uint64_t a2)
{
  id v4 = objc_alloc(MEMORY[0x263F00DA8]);
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v9 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v4, v8, a2, v5, 65568, v6, 0, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v10 = *(void *)(a1[6] + 8);
  float32x4_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_24C698924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C698938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69894C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C698968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C698980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C698C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C66EA3C(v19);
  operator delete(v17);

  _Unwind_Resume(a1);
}

void sub_24C698DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C698FC4(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    uint64_t v9 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v9, v2);
    __cxa_end_catch();
    JUMPOUT(0x24C698F80);
  }
  _Unwind_Resume(a1);
}

void sub_24C6993B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2 == 1)
  {
    uint64_t v21 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v21, a11);
    __cxa_end_catch();
    if (*MEMORY[0x263EF8340] != a18) {
      JUMPOUT(0x24C6993ACLL);
    }
    JUMPOUT(0x24C699134);
  }
  _Unwind_Resume(a1);
}

void sub_24C699714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C699998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6999AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6999C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6999DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C699EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (v33) {
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

float32_t sub_24C699FFC(uint64_t a1, float32x4_t *a2)
{
  uint64_t v3 = *(uint32x4_t **)(a1 + 32);
  unint64_t v2 = *(uint32x4_t **)(a1 + 40);
  if (v3 != v2)
  {
    unint64_t v4 = (char *)v2 - (char *)v3 - 4;
    if (v4 < 0x1C)
    {
      uint64_t v5 = (float *)a2;
      uint64_t v6 = *(unsigned int **)(a1 + 32);
      do
      {
LABEL_7:
        unsigned int v14 = *v6++;
        v12.f32[0] = (float)v14;
        *v5++ = (float)v14;
      }
      while (v6 != (unsigned int *)v2);
      return v12.f32[0];
    }
    uint64_t v7 = (v4 >> 2) + 1;
    uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v5 = &a2->f32[v8];
    uint64_t v6 = &v3->u32[v8];
    uint64_t v9 = v3 + 1;
    uint64_t v10 = a2 + 1;
    uint64_t v11 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v12 = vcvtq_f32_u32(v9[-1]);
      float32x4_t v13 = vcvtq_f32_u32(*v9);
      v10[-1] = v12;
      float32x4_t *v10 = v13;
      v9 += 2;
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_7;
    }
  }
  return v12.f32[0];
}

void *sub_24C69A088(void *result, uint64_t a2)
{
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 32);
  unint64_t v2 = *(unsigned char **)(a2 + 40);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (v4 < 0) {
      sub_24C667470();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[4] = v6;
    v5[5] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    v5[6] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[5] = v7;
  }
  return result;
}

void sub_24C69A100(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C69A11C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

__n128 sub_24C69A134(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_24C69A158(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

float sub_24C69A170(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = objc_msgSend_strides(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, 1, v9, v10);
  int v16 = objc_msgSend_intValue(v11, v12, v13, v14, v15);

  uint64_t v18 = *(void *)(a1 + 48);
  if (v18)
  {
    uint64_t v19 = 0;
    int v20 = &a2[2 * *(_DWORD *)(a1 + 56) * v16];
    do
    {
      _H0 = *(_WORD *)&v20[2 * v19];
      __asm { FCVT            S0, H0 }
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) + 4 * v19++) = result;
    }
    while (v18 != v19);
  }
  return result;
}

void sub_24C69A210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69A224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69AFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20)
{
}

void sub_24C69AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
}

void sub_24C69B004()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 152);
  if (v1) {
    sub_24C729840(v1);
  }
  uint64_t v2 = *(void *)(v0 - 144);
  if (v2)
  {
    *(void *)(v0 - 136) = v2;
    JUMPOUT(0x24C69B1F4);
  }
  JUMPOUT(0x24C69B1F8);
}

void sub_24C69B024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_24C69B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v42 = *(void **)(v40 - 216);
  if (v42)
  {
    *(void *)(v40 - 208) = v42;
    operator delete(v42);
  }
  uint64_t v43 = *(void *)(v40 - 192);
  if (!v43) {
    goto LABEL_15;
  }
  uint64_t v44 = *(void *)(v40 - 184);
  uint64_t v45 = *(void **)(v40 - 192);
  if (v44 == v43) {
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t v47 = *(std::__shared_weak_count **)(v44 - 8);
    if (v47)
    {
      if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    uint64_t v46 = *(void **)(v44 - 40);
    if (v46) {
      goto LABEL_7;
    }
LABEL_8:
    v44 -= 48;
    if (v44 == v43)
    {
      uint64_t v45 = *(void **)(v40 - 192);
LABEL_14:
      *(void *)(v40 - 184) = v43;
      operator delete(v45);
LABEL_15:
      sub_24C66FC40((uint64_t)&a18);
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  uint64_t v46 = *(void **)(v44 - 40);
  if (!v46) {
    goto LABEL_8;
  }
LABEL_7:
  *(void *)(v44 - 32) = v46;
  operator delete(v46);
  goto LABEL_8;
}

void sub_24C69B098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x24C69B22CLL);
}

void sub_24C69B0B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (*(char *)(v16 - 169) < 0) {
    operator delete(*(void **)(v16 - 192));
  }
  sub_24C66FC40(v16 - 216);
  JUMPOUT(0x24C69B21CLL);
}

void sub_24C69B0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v20 = *(void *)(v18 - 192);
  if (!v20) {
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(v18 - 184);
  uint64_t v22 = *(void **)(v18 - 192);
  if (v21 == v20) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v24 = *(std::__shared_weak_count **)(v21 - 8);
    if (v24)
    {
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    std::string v23 = *(void **)(v21 - 40);
    if (v23) {
      goto LABEL_5;
    }
LABEL_6:
    v21 -= 48;
    if (v21 == v20)
    {
      uint64_t v22 = *(void **)(v18 - 192);
LABEL_12:
      *(void *)(v18 - 184) = v20;
      operator delete(v22);
LABEL_13:
      sub_24C66FC40((uint64_t)&a18);
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  std::string v23 = *(void **)(v21 - 40);
  if (!v23) {
    goto LABEL_6;
  }
LABEL_5:
  *(void *)(v21 - 32) = v23;
  operator delete(v23);
  goto LABEL_6;
}

void sub_24C69B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x24C69B22CLL);
}

void sub_24C69B104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  uint64_t v35 = a33;
  if (a33 && !atomic_fetch_add(&a33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (a29)
  {
    a30 = a29;
    JUMPOUT(0x24C69B15CLL);
  }
  uint64_t v36 = *(void *)(v33 - 192);
  if (!v36) {
    goto LABEL_19;
  }
  uint64_t v37 = *(void *)(v33 - 184);
  uint64_t v38 = *(void **)(v33 - 192);
  if (v37 == v36) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v40 = *(std::__shared_weak_count **)(v37 - 8);
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    unint64_t v39 = *(void **)(v37 - 40);
    if (v39) {
      goto LABEL_11;
    }
LABEL_12:
    v37 -= 48;
    if (v37 == v36)
    {
      uint64_t v38 = *(void **)(v33 - 192);
LABEL_18:
      *(void *)(v33 - 184) = v36;
      operator delete(v38);
LABEL_19:
      sub_24C66FC40((uint64_t)&a18);
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  unint64_t v39 = *(void **)(v37 - 40);
  if (!v39) {
    goto LABEL_12;
  }
LABEL_11:
  *(void *)(v37 - 32) = v39;
  operator delete(v39);
  goto LABEL_12;
}

void **sub_24C69B248(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 4);
        v5 -= 32;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 3) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_24C69BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v49 = *(void **)(v47 - 208);
  if (v49)
  {
    *(void *)(v47 - 200) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v47 - 184);
  if (v50)
  {
    *(void *)(v47 - 176) = v50;
    operator delete(v50);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C69BE44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = objc_msgSend_strides(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, 1, v9, v10);
  int v16 = objc_msgSend_intValue(v11, v12, v13, v14, v15);

  uint64_t v17 = *(void *)(a1 + 56) * v16;
  uint64_t v18 = (short float *)&a2[2 * v17];
  uint64_t v19 = v16 + v17;
  uint64_t v20 = v18 + 1;
  if (v17 == v19 || v20 == (short float *)&a2[2 * v19])
  {
    uint64_t v24 = (short float *)&a2[2 * v17];
  }
  else
  {
    short float v22 = *v18;
    uint64_t v23 = 2 * v16 - 2;
    uint64_t v24 = v18;
    uint64_t v25 = v18 + 1;
    do
    {
      short float v26 = *v25++;
      short float v27 = v26;
      if (v22 < v26)
      {
        short float v22 = v27;
        uint64_t v24 = v20;
      }
      uint64_t v20 = v25;
      v23 -= 2;
    }
    while (v23);
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v24;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40)
                                                                                                + 8)
                                                                                    + 24)
                                                                        - (void)v18) >> 1;
}

void sub_24C69BF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69BF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_24C69BF54(uint64_t a1, uint64_t a2)
{
  float result = (float)*(unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(float *)(a2 + 4 * *(void *)(a1 + 40) + 4) = result;
  return result;
}

void sub_24C69C040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69C058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69C0F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_24C69C534(a1, (uint64_t *)&v20);
  uint64_t v3 = v20;
  int64_t v4 = v21;
  if (v20 == v21)
  {
    if (!v20) {
      return;
    }
  }
  else
  {
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      uint64_t v6 = (unsigned char *)v3[1];
      uint64_t v5 = (unsigned char *)v3[2];
      int64_t v7 = v5 - v6;
      if (v5 != v6)
      {
        if (v7 < 0) {
          sub_24C667470();
        }
        uint64_t v8 = (char *)operator new(v5 - v6);
        uint64_t v9 = &v8[4 * (v7 >> 2)];
        __p[0] = v8;
        uint64_t v18 = v9;
        memcpy(v8, v6, v7);
        __p[1] = v9;
      }
      int v19 = *((_DWORD *)v3 + 1);
      unint64_t v10 = *(void *)(a2 + 8);
      if (v10 < *(void *)(a2 + 16))
      {
        *(void *)unint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(_OWORD *)unint64_t v10 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v18;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v18 = 0;
        *(_DWORD *)(v10 + 24) = v19;
        *(void *)(a2 + 8) = v10 + 32;
      }
      else
      {
        uint64_t v11 = sub_24C69ECC0((void **)a2, (uint64_t)__p);
        float32x4_t v12 = __p[0];
        *(void *)(a2 + 8) = v11;
        if (v12)
        {
          __p[1] = v12;
          operator delete(v12);
        }
      }
      v3 += 6;
    }
    while (v3 != v4);
    uint64_t v3 = v20;
    if (!v20) {
      return;
    }
  }
  uint64_t v13 = v21;
  uint64_t v14 = v3;
  if (v21 == v3) {
    goto LABEL_23;
  }
  do
  {
    uint64_t v15 = (std::__shared_weak_count *)*(v13 - 1);
    if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int v16 = (void *)*(v13 - 5);
      if (!v16) {
        goto LABEL_15;
      }
LABEL_19:
      *(v13 - 4) = v16;
      operator delete(v16);
      goto LABEL_15;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    int v16 = (void *)*(v13 - 5);
    if (v16) {
      goto LABEL_19;
    }
LABEL_15:
    v13 -= 6;
  }
  while (v13 != v3);
  uint64_t v14 = v20;
LABEL_23:
  uint64_t v21 = v3;
  operator delete(v14);
}

void sub_24C69C2C0(_Unwind_Exception *a1)
{
  sub_24C69B248(v1);
  _Unwind_Resume(a1);
}

void sub_24C69C2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C69D1D0(&a14);
  sub_24C69B248(v14);
  _Unwind_Resume(a1);
}

void sub_24C69C320(uint64_t a1, void *a2, uint64_t *a3, float a4)
{
  float v19 = a4;
  float v7 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), (uint64_t)(a2[1] - *a2) >> 2);
  float v18 = v7;
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v8) >> 4);
  if (*(_DWORD *)a1 <= (int)v10)
  {
    if (v7 <= *(float *)(v8 + 4)) {
      return;
    }
    sub_24C69DDFC((uint64_t *)v8, *(void *)(a1 + 32), (uint64_t)&v21, v10);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(std::__shared_weak_count **)(v12 - 8);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = *(void **)(v12 - 40);
    if (v14)
    {
      *(void *)(v12 - 32) = v14;
      operator delete(v14);
    }
    *(void *)(a1 + 32) = v12 - 48;
    if ((unint64_t)(v12 - 48) >= *(void *)(a1 + 40))
    {
      uint64_t v12 = sub_24C69D2A0((uint64_t **)(a1 + 24), (int *)&v19, (int *)&v18, (uint64_t)a2, a3);
    }
    else
    {
      sub_24C69D4A8(v12 - 48, (int *)&v19, (int *)&v18, (uint64_t)a2, a3);
      *(void *)(a1 + 32) = v12;
    }
    *(void *)(a1 + 32) = v12;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v15) >> 4);
    uint64_t v17 = &v22;
    uint64_t v11 = v12;
  }
  else
  {
    if (v9 >= *(void *)(a1 + 40))
    {
      uint64_t v11 = sub_24C69D2A0((uint64_t **)(a1 + 24), (int *)&v19, (int *)&v18, (uint64_t)a2, a3);
    }
    else
    {
      sub_24C69D4A8(*(void *)(a1 + 32), (int *)&v19, (int *)&v18, (uint64_t)a2, a3);
      uint64_t v11 = v9 + 48;
      *(void *)(a1 + 32) = v9 + 48;
    }
    *(void *)(a1 + 32) = v11;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v15) >> 4);
    uint64_t v17 = &v20;
  }
  sub_24C69D874(v15, v11, (uint64_t)v17, v16);
}

void sub_24C69C524(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_24C69C52C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_24C69C534(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_24C69E3BC(&v16, (uint64_t *)(a1 + 24));
  sub_24C69E2F0(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4));
  uint64_t v5 = v16;
  int64_t v4 = v17;
  if (v16 != v17)
  {
    while (1)
    {
      uint64_t v6 = -1 - 0x5555555555555555 * (((char *)v4 - (char *)v5) >> 4);
      uint64_t v7 = *a2;
      uint64_t v8 = (uint64_t *)(*a2 + 48 * v6);
      *uint64_t v8 = *v5;
      if (v8 != v5) {
        sub_24C69DCB4((void *)(v7 + 48 * v6 + 8), (char *)v5[1], (char *)v5[2], (v5[2] - v5[1]) >> 2);
      }
      uint64_t v10 = v5[4];
      uint64_t v9 = v5[5];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v7 + 48 * v6 + 32) = v10;
      uint64_t v11 = v7 + 48 * v6;
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 40);
      *(void *)(v11 + 40) = v9;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      sub_24C69DDFC(v16, (uint64_t)v17, (uint64_t)&v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 4));
      uint64_t v13 = v17;
      uint64_t v14 = (std::__shared_weak_count *)*(v17 - 1);
      if (v14)
      {
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v15 = (void *)*(v13 - 5);
      if (v15) {
        goto LABEL_14;
      }
LABEL_3:
      int64_t v4 = v13 - 6;
      uint64_t v17 = v13 - 6;
      uint64_t v5 = v16;
      if (v16 == v13 - 6) {
        goto LABEL_18;
      }
    }
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    uint64_t v15 = (void *)*(v13 - 5);
    if (!v15) {
      goto LABEL_3;
    }
LABEL_14:
    *(v13 - 4) = (uint64_t)v15;
    operator delete(v15);
    goto LABEL_3;
  }
  int64_t v4 = v16;
  if (v16)
  {
LABEL_18:
    uint64_t v17 = v4;
    operator delete(v4);
  }
}

void sub_24C69C718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C69D1D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_24C69C730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C69D1D0(v2);
  sub_24C69D1D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_24C69C74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a5;
  uint64_t v9 = **(float ***)a4;
  if (!v9
    || (objc_msgSend_nextTokensForInputs_AndforMaskPosition_(v9, (const char *)a2, a3, a5, a5),
        uint64_t v9 = v42,
        size_t v10 = (char *)v42 - (char *)v41,
        v42 == v41))
  {
    int v13 = 0;
    **(_DWORD **)(a4 + 8) = v5;
    *(_OWORD *)uint64_t v38 = 0u;
    memset(v39, 0, 25);
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    sub_24C667470();
  }
  uint64_t v40 = operator new((char *)v42 - (char *)v41);
  memcpy(v40, v41, v10);
  uint64_t v11 = (char *)operator new(v10);
  uint64_t v12 = &v11[v10];
  v38[0] = v11;
  v39[0] = (unint64_t)&v11[v10];
  memcpy(v11, v40, v10);
  *(void *)&v39[1] = 0;
  v38[1] = v12;
  int v13 = 1;
  BYTE8(v39[1]) = 1;
  operator delete(v40);
  uint64_t v9 = v41;
  if (v41)
  {
LABEL_7:
    operator delete(v9);
    int v13 = BYTE8(v39[1]);
  }
LABEL_8:
  if (!v13)
  {
    *(_OWORD *)a1 = *(_OWORD *)v38;
    *(void *)(a1 + 16) = *(void *)&v39[0];
    v38[0] = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v39 + 8);
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_48;
  }
  uint64_t v41 = 0;
  int64_t v14 = (char *)v38[1] - (char *)v38[0];
  if (v38[1] == v38[0])
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = *(void **)(a2 + 104);
    char v18 = (void *)(a2 + 112);
    if (v17 == (void *)(a2 + 112)) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }
  if (v14 < 0) {
    sub_24C667470();
  }
  uint64_t v15 = (float *)operator new((char *)v38[1] - (char *)v38[0]);
  uint64_t v16 = &v15[v14 >> 2];
  uint64_t v41 = v15;
  memcpy(v15, v38[0], v14);
  uint64_t v17 = *(void **)(a2 + 104);
  char v18 = (void *)(a2 + 112);
  if (v17 != (void *)(a2 + 112))
  {
    do
    {
LABEL_17:
      v15[*((unsigned int *)v17 + 7)] = 0.00000011921;
      float v19 = (void *)v17[1];
      if (v19)
      {
        do
        {
          char v20 = v19;
          float v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          char v20 = (void *)v17[2];
          BOOL v21 = *v20 == (void)v17;
          uint64_t v17 = v20;
        }
        while (!v21);
      }
      uint64_t v17 = v20;
    }
    while (v20 != v18);
  }
LABEL_23:
  if (v15 == v16)
  {
    int v28 = 0;
    std::string __p = 0;
    uint64_t v37 = 0;
    uint64_t v30 = *((void *)&v39[0] + 1);
    uint64_t v29 = *(std::__shared_weak_count **)&v39[1];
    if (!*(void *)&v39[1]) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v22 = (char *)v16 - (char *)v15 - 4;
    uint64_t v23 = v15;
    if (v22 < 4) {
      goto LABEL_57;
    }
    uint64_t v24 = (v22 >> 2) + 1;
    uint64_t v23 = &v15[v24 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
    short float v26 = v15;
    do
    {
      LODWORD(v34) = *(void *)v26;
      float v35 = logf(COERCE_FLOAT(HIDWORD(*(void *)v26)));
      *(float *)&uint64_t v27 = logf(v34);
      *((float *)&v27 + 1) = v35;
      *(void *)short float v26 = v27;
      v26 += 2;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_57:
      do
      {
        *uint64_t v23 = logf(*v23);
        ++v23;
      }
      while (v23 != v16);
    }
    if ((char *)v16 - (char *)v15 < 0) {
      sub_24C667470();
    }
    int v28 = (char *)operator new((char *)v16 - (char *)v15);
    std::string __p = v28;
    memcpy(v28, v15, (char *)v16 - (char *)v15);
    uint64_t v37 = &v28[4 * (v16 - v15)];
    uint64_t v30 = *((void *)&v39[0] + 1);
    uint64_t v29 = *(std::__shared_weak_count **)&v39[1];
    if (!*(void *)&v39[1]) {
      goto LABEL_32;
    }
  }
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_32:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64_t v31 = v37 - v28;
  if (v37 != v28)
  {
    if (v31 < 0) {
      sub_24C667470();
    }
    uint64_t v32 = (char *)operator new(v37 - v28);
    *(void *)a1 = v32;
    uint64_t v33 = &v32[4 * (v31 >> 2)];
    *(void *)(a1 + 16) = v33;
    memcpy(v32, v28, v31);
    *(void *)(a1 + 8) = v33;
  }
  *(void *)(a1 + 24) = v30;
  *(void *)(a1 + 32) = v29;
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 40) = 1;
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 1;
  }
  if (__p) {
    operator delete(__p);
  }
  if (v41) {
    operator delete(v41);
  }
  if (*(void *)&v39[1]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v39[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v39[1] + 16))(*(void *)&v39[1]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v39[1]);
  }
LABEL_48:
  if (v38[0]) {
    operator delete(v38[0]);
  }
}

void sub_24C69CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_24C66FC40((uint64_t)va);
  *(void *)(v18 - 120) = v17;
  operator delete(v17);
  char v20 = *(void **)(v18 - 104);
  if (v20)
  {
    *(void *)(v18 - 96) = v20;
    operator delete(v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C69CC48(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v9 = *(const void **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  int64_t v10 = v8 - *(void *)a2;
  if (v8 != *(void *)a2)
  {
    if (v10 < 0) {
      sub_24C667470();
    }
    uint64_t v11 = (char *)operator new(v8 - *(void *)a2);
    uint64_t v12 = &v11[4 * (v10 >> 2)];
    uint64_t v57 = v11;
    uint64_t v59 = v12;
    memcpy(v11, v9, v10);
    uint64_t v58 = v12;
  }
  int v13 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v55 = *(void *)(a2 + 24);
  uint64_t v56 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_24C69E494((uint64_t *)&v57, *(_DWORD *)(a1 + 84), &v53);
  int64_t v14 = v53;
  uint64_t v15 = v54;
  if (v53 != v54)
  {
    while (1)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v17 = *(const void **)a3;
      uint64_t v16 = *(void *)(a3 + 8);
      int64_t v18 = v16 - *(void *)a3;
      if (v16 == *(void *)a3)
      {
        float v19 = 0;
        char v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        unint64_t v23 = 1;
      }
      else
      {
        if (v18 < 0) {
          sub_24C667470();
        }
        float v19 = (char *)operator new(v16 - *(void *)a3);
        uint64_t v50 = v19;
        uint64_t v51 = v19;
        char v20 = &v19[4 * (v18 >> 2)];
        uint64_t v52 = v20;
        memcpy(v19, v17, v18);
        uint64_t v51 = v20;
        uint64_t v21 = 4 * (v18 >> 2);
        uint64_t v22 = v21 >> 2;
        unint64_t v23 = (v21 >> 2) + 1;
        if (v23 >> 62) {
          sub_24C667470();
        }
      }
      if (v21 >> 1 > v23) {
        unint64_t v23 = v21 >> 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        if (v24 >> 62) {
          sub_24C66DB48();
        }
        uint64_t v25 = (char *)operator new(4 * v24);
        short float v26 = &v25[4 * v22];
        *(_DWORD *)short float v26 = *((_DWORD *)v14 + 1);
        uint64_t v27 = (uint64_t)(v26 + 4);
        uint64_t v28 = v20 - v19;
        if (v20 == v19) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v25 = 0;
        short float v26 = (char *)(4 * v22);
        *(_DWORD *)(4 * v22) = *((_DWORD *)v14 + 1);
        uint64_t v27 = 4 * v22 + 4;
        uint64_t v28 = v20 - v19;
        if (v20 == v19) {
          goto LABEL_30;
        }
      }
      unint64_t v29 = v28 - 4;
      if (v29 < 0x1C)
      {
        uint64_t v30 = v20;
        do
        {
LABEL_29:
          int v37 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v26 - 1) = v37;
          v26 -= 4;
        }
        while (v30 != v19);
        goto LABEL_30;
      }
      uint64_t v31 = (v29 >> 2) + 1;
      uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v30 = &v20[-v32];
      v26 -= v32;
      uint64_t v33 = &v25[4 * v22 - 16];
      float v34 = v20 - 16;
      uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v36 = *(_OWORD *)v34;
        *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
        *(_OWORD *)uint64_t v33 = v36;
        v33 -= 32;
        v34 -= 32;
        v35 -= 8;
      }
      while (v35);
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_29;
      }
LABEL_30:
      uint64_t v50 = v26;
      uint64_t v51 = (unsigned char *)v27;
      uint64_t v52 = &v25[4 * v24];
      if (v19) {
        operator delete(v19);
      }
      uint64_t v51 = (unsigned char *)v27;
      if (sub_24C69E7D0(a1)) {
        goto LABEL_45;
      }
      uint64_t v38 = v50;
      int64_t v39 = v51 - (unsigned char *)v50;
      if ((unint64_t)(v51 - (unsigned char *)v50) < 9)
      {
        float v40 = *(float *)v14;
        std::string __p = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        if (v51 == v50) {
          goto LABEL_39;
        }
      }
      else
      {
        float v40 = (*(float (**)(void, float, float))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), a4, *(float *)v14);
        uint64_t v38 = v50;
        int64_t v39 = v51 - (unsigned char *)v50;
        std::string __p = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        if (v51 == v50) {
          goto LABEL_39;
        }
      }
      if (v39 < 0) {
        sub_24C667470();
      }
      std::string __p = operator new(v39);
      uint64_t v48 = __p;
      uint64_t v41 = (char *)__p + 4 * (v39 >> 2);
      uint64_t v49 = v41;
      memcpy(__p, v38, v39);
      uint64_t v48 = v41;
LABEL_39:
      uint64_t v45 = v55;
      uint64_t v46 = v56;
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_24C69C320(a1 + 168, &__p, &v45, v40);
      uint64_t v42 = v46;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        uint64_t v43 = __p;
        if (!__p) {
          goto LABEL_45;
        }
LABEL_44:
        uint64_t v48 = v43;
        operator delete(v43);
        goto LABEL_45;
      }
      uint64_t v43 = __p;
      if (__p) {
        goto LABEL_44;
      }
LABEL_45:
      if (v50)
      {
        uint64_t v51 = v50;
        operator delete(v50);
      }
      v14 += 8;
      if (v14 == v15)
      {
        int64_t v14 = v53;
        break;
      }
    }
  }
  if (v14)
  {
    uint64_t v54 = v14;
    operator delete(v14);
  }
  uint64_t v44 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
}

void sub_24C69D090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_24C69D110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17) {
    JUMPOUT(0x24C69D0DCLL);
  }
  JUMPOUT(0x24C69D0D4);
}

void sub_24C69D128(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    if (!a17) {
      JUMPOUT(0x24C69D0DCLL);
    }
    JUMPOUT(0x24C69D0D4);
  }
  JUMPOUT(0x24C69D0CCLL);
}

uint64_t sub_24C69D148(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_4:
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_24C69D1D0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (!*a1) {
    return a1;
  }
  uint64_t v3 = (char *)a1[1];
  int64_t v4 = *a1;
  if (v3 == v2) {
    goto LABEL_12;
  }
  do
  {
    int v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v6 = (void *)*((void *)v3 - 5);
      if (!v6) {
        goto LABEL_4;
      }
LABEL_8:
      *((void *)v3 - 4) = v6;
      operator delete(v6);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (void *)*((void *)v3 - 5);
    if (v6) {
      goto LABEL_8;
    }
LABEL_4:
    v3 -= 48;
  }
  while (v3 != v2);
  int64_t v4 = *a1;
LABEL_12:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_24C69D2A0(uint64_t **a1, int *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_24C667470();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_24C66DB48();
    }
    int v13 = (char *)operator new(48 * v12);
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v21 = (uint64_t)&v13[48 * v6];
  unint64_t v23 = (uint64_t *)&v13[48 * v12];
  sub_24C69D4A8(v21, a2, a3, a4, a5);
  int64_t v14 = (uint64_t *)v21;
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    uint64_t v17 = a1[1];
  }
  else
  {
    do
    {
      v15 -= 6;
      int64_t v14 = sub_24C69D728(v14 - 6, v15);
    }
    while (v15 != v16);
    uint64_t v17 = *a1;
    uint64_t v15 = a1[1];
  }
  *a1 = v14;
  a1[1] = (uint64_t *)(v21 + 48);
  a1[2] = v23;
  if (v15 != v17)
  {
    while (1)
    {
      uint64_t v22 = v15 - 6;
      int64_t v18 = (std::__shared_weak_count *)*(v15 - 1);
      if (v18)
      {
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      float v19 = (void *)*(v15 - 5);
      if (v19) {
        goto LABEL_21;
      }
LABEL_17:
      v15 -= 6;
      if (v22 == v17)
      {
        uint64_t v15 = v17;
        goto LABEL_25;
      }
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    float v19 = (void *)*(v15 - 5);
    if (!v19) {
      goto LABEL_17;
    }
LABEL_21:
    *(v15 - 4) = (uint64_t)v19;
    operator delete(v19);
    goto LABEL_17;
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v21 + 48;
}

void sub_24C69D494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C69D65C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C69D4A8(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  int v7 = *a2;
  int v8 = *a3;
  std::string __p = 0;
  int64_t v10 = *(const void **)a4;
  uint64_t v9 = *(void *)(a4 + 8);
  int64_t v11 = v9 - *(void *)a4;
  if (v9 == *(void *)a4)
  {
    int v13 = 0;
    unint64_t v12 = 0;
    uint64_t v15 = *a5;
    int64_t v14 = (std::__shared_weak_count *)a5[1];
    if (v14) {
LABEL_4:
    }
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (v11 < 0) {
      sub_24C667470();
    }
    unint64_t v12 = (char *)operator new(v9 - *(void *)a4);
    int v13 = &v12[4 * (v11 >> 2)];
    std::string __p = v12;
    memcpy(v12, v10, v11);
    uint64_t v15 = *a5;
    int64_t v14 = (std::__shared_weak_count *)a5[1];
    if (v14) {
      goto LABEL_4;
    }
  }
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v16 = v13 - v12;
  if (v13 != v12)
  {
    if (v16 < 0) {
      sub_24C667470();
    }
    uint64_t v17 = (char *)operator new(v13 - v12);
    *(void *)(a1 + 8) = v17;
    int64_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 24) = v18;
    memcpy(v17, v12, v13 - v12);
    *(void *)(a1 + 16) = v18;
  }
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return a1;
}

void sub_24C69D624(void *a1)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_24C669A24(a1);
}

void sub_24C69D640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C69D65C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    while (1)
    {
      *(void *)(a1 + 16) = v3 - 48;
      int64_t v4 = *(std::__shared_weak_count **)(v3 - 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v5 = *(void **)(v3 - 40);
      if (v5) {
        goto LABEL_7;
      }
LABEL_3:
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3 == v2) {
        goto LABEL_10;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = *(void **)(v3 - 40);
    if (!v5) {
      goto LABEL_3;
    }
LABEL_7:
    *(void *)(v3 - 32) = v5;
    operator delete(v5);
    goto LABEL_3;
  }
LABEL_10:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_24C69D728(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v6 = (unsigned char *)a2[1];
  int v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_24C667470();
    }
    int v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  uint64_t v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C69D7D0(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_24C669A24(a1);
}

void *sub_24C69D7EC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[1];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
LABEL_4:
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_24C69D874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1 + 48 * v6;
    sub_24C69D728(&v42, (uint64_t *)v7);
    int v8 = (uint64_t *)(a2 - 48);
    sub_24C69D728(&v38, (uint64_t *)(a2 - 48));
    float v9 = *((float *)&v42 + 1);
    float v10 = *((float *)&v38 + 1);
    int64_t v11 = v41;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (__p)
    {
      float v40 = __p;
      operator delete(__p);
    }
    unint64_t v12 = v45;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v43)
    {
      uint64_t v44 = v43;
      operator delete(v43);
    }
    if (v9 > v10)
    {
      sub_24C69D728(&v33, v8);
      while (1)
      {
        int v13 = (uint64_t *)v7;
        *int v8 = *(void *)v7;
        if (v8 != (uint64_t *)v7) {
          sub_24C69DCB4(v8 + 1, *(char **)(v7 + 8), *(char **)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 2);
        }
        uint64_t v15 = *(void *)(v7 + 32);
        uint64_t v14 = *(void *)(v7 + 40);
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = (std::__shared_weak_count *)v8[5];
        v8[4] = v15;
        v8[5] = v14;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (!v6)
        {
LABEL_38:
          *int v13 = v33;
          if (v13 != &v33) {
            sub_24C69DCB4(v13 + 1, (char *)v34, v35, (v35 - (unsigned char *)v34) >> 2);
          }
          uint64_t v25 = v36;
          unint64_t v24 = v37;
          if (v37) {
            atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          short float v26 = (std::__shared_weak_count *)v13[5];
          v13[4] = v25;
          v13[5] = (uint64_t)v24;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          uint64_t v27 = v37;
          if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          if (v34)
          {
            uint64_t v35 = (char *)v34;
            operator delete(v34);
          }
          return;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = a1 + 48 * v6;
        sub_24C69D728(&v29, (uint64_t *)v7);
        float v17 = *((float *)&v33 + 1);
        uint64_t v28 = 0;
        int64_t v18 = v34;
        size_t v19 = v35 - (unsigned char *)v34;
        if (v35 != v34)
        {
          if ((v19 & 0x8000000000000000) != 0) {
            sub_24C667470();
          }
          uint64_t v28 = operator new(v35 - (unsigned char *)v34);
          memcpy(v28, v18, v19);
        }
        char v20 = v37;
        if (v37)
        {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          float v21 = *((float *)&v29 + 1);
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          float v21 = *((float *)&v29 + 1);
        }
        if (v28) {
          operator delete(v28);
        }
        uint64_t v22 = v32;
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        unint64_t v23 = v30;
        if (v30) {
          goto LABEL_35;
        }
LABEL_14:
        int v8 = v13;
        if (v21 <= v17) {
          goto LABEL_38;
        }
      }
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      unint64_t v23 = v30;
      if (!v30) {
        goto LABEL_14;
      }
LABEL_35:
      uint64_t v31 = v23;
      operator delete(v23);
      goto LABEL_14;
    }
  }
}

void sub_24C69DC88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_24C669A24(a1);
  }
  sub_24C669A24(a1);
}

void *sub_24C69DCB4(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  float v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_24C667470();
    uint64_t v13 = 4 * v12;
    float result = operator new(4 * v12);
    float v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      float result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = (void *)*result;
LABEL_20:
    float result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  int64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    float result = memmove((void *)*result, __src, v16 - v9);
    float v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  uint64_t *v15 = &v9[v14];
  return result;
}

void sub_24C69DDFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  sub_24C69D728(&v23, a1);
  uint64_t v8 = (uint64_t *)sub_24C69E0CC((uint64_t)a1, a3, a4);
  float v9 = v8;
  uint64_t v10 = (uint64_t *)(a2 - 48);
  if ((uint64_t *)(a2 - 48) == v8)
  {
    *uint64_t v8 = v23;
    if (&v23 != v8) {
      sub_24C69DCB4(v8 + 1, (char *)__p, v25, (v25 - (unsigned char *)__p) >> 2);
    }
    uint64_t v21 = v26;
    char v20 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)v9[5];
    v9[4] = v21;
    v9[5] = (uint64_t)v20;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_15;
  }
  BOOL v11 = *(char **)(a2 - 40);
  *uint64_t v8 = *(void *)(a2 - 48);
  sub_24C69DCB4(v8 + 1, v11, *(char **)(a2 - 32), (uint64_t)(*(void *)(a2 - 32) - (void)v11) >> 2);
  uint64_t v13 = *(void *)(a2 - 16);
  uint64_t v12 = *(void *)(a2 - 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v14 = (std::__shared_weak_count *)v9[5];
  v9[4] = v13;
  v9[5] = v12;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    uint64_t *v10 = v23;
    if (v10 == &v23) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t *v10 = v23;
  if (v10 != &v23) {
LABEL_8:
  }
    sub_24C69DCB4((void *)(a2 - 40), (char *)__p, v25, (v25 - (unsigned char *)__p) >> 2);
LABEL_9:
  uint64_t v15 = (uint64_t)(v9 + 6);
  uint64_t v17 = v26;
  uint64_t v16 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int64_t v18 = *(std::__shared_weak_count **)(a2 - 8);
  *(void *)(a2 - 16) = v17;
  *(void *)(a2 - 8) = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_24C69D874((uint64_t)a1, v15, a3, 0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)a1) >> 4));
LABEL_15:
  size_t v19 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (__p)
  {
    uint64_t v25 = (char *)__p;
    operator delete(__p);
  }
}

void sub_24C69E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C69E0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (void *)a1;
    a1 += 48 * v5 + 48;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 >= a3) {
      goto LABEL_16;
    }
    sub_24C69D728(&v25, (uint64_t *)a1);
    sub_24C69D728(&v21, (uint64_t *)(a1 + 48));
    float v11 = *((float *)&v25 + 1);
    float v12 = *((float *)&v21 + 1);
    uint64_t v13 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      size_t v14 = __p;
      if (!__p) {
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v23 = v14;
      operator delete(v14);
      goto LABEL_10;
    }
    size_t v14 = __p;
    if (__p) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v15 = v28;
    if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v16 = v26;
      if (!v26) {
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v27 = v16;
      operator delete(v16);
      goto LABEL_14;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v16 = v26;
    if (v26) {
      goto LABEL_13;
    }
LABEL_14:
    if (v11 > v12)
    {
      a1 += 48;
      uint64_t v5 = v10;
    }
LABEL_16:
    *uint64_t v8 = *(void *)a1;
    if (v8 != (void *)a1) {
      sub_24C69DCB4(v8 + 1, *(char **)(a1 + 8), *(char **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
    }
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    size_t v19 = (std::__shared_weak_count *)v8[5];
    v8[4] = v18;
    v8[5] = v17;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  while (v5 <= v7);
  return a1;
}

void *sub_24C69E2F0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_24C667470();
    }
    uint64_t v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[2] = &v4[48 * a2];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24C69E39C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_24C72A03C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C69E3BC(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556) {
      sub_24C667470();
    }
    uint64_t v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v6];
    do
    {
      sub_24C69D728(&v7[v8], (uint64_t *)(v3 + v8));
      v8 += 48;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_24C69E474(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_24C72A03C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C69E494(uint64_t *a1@<X1>, int a2@<W2>, char **a3@<X8>)
{
  if (a2)
  {
    if (a2 < 0) {
      sub_24C667470();
    }
    uint64_t v4 = a2;
    size_t v5 = 8 * a2;
    uint64_t v31 = (char *)operator new(v5);
    uint64_t v27 = &v31[8 * v4];
    bzero(v31, v5);
    uint64_t v30 = v31;
    uint64_t v28 = &v31[v5];
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  if ((int)((unint64_t)(v6 - *a1) >> 2) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    float v11 = 0;
    while (1)
    {
      while (v8 < v10)
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)(v7 + 4 * v9);
        *((_DWORD *)v8 + 1) = v9;
        v8 += 8;
        if (++v9 >= (int)((unint64_t)(v6 - v7) >> 2)) {
          goto LABEL_34;
        }
      }
      uint64_t v12 = (v8 - v11) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_24C667470();
      }
      if ((v10 - v11) >> 2 > v13) {
        unint64_t v13 = (v10 - v11) >> 2;
      }
      if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 >> 61) {
        sub_24C66DB48();
      }
      uint64_t v15 = operator new(8 * v14);
      uint64_t v16 = &v15[8 * v12];
      _DWORD *v16 = *(_DWORD *)(v7 + 4 * v9);
      v16[1] = v9;
      if (v8 == v11)
      {
        size_t v19 = &v15[8 * v12];
        uint64_t v10 = &v15[8 * v14];
        uint64_t v8 = (char *)(v16 + 2);
        if (!v11) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v11);
        uint64_t v7 = *a1;
        uint64_t v6 = a1[1];
        goto LABEL_22;
      }
      unint64_t v17 = v8 - 8 - v11;
      if (v17 < 0x168
        || &v15[v8 - v11 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v11 - 8]
        || &v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
        || (unint64_t)(v11 - v15) < 0x20)
      {
        break;
      }
      uint64_t v21 = (v17 >> 3) + 1;
      uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v18 = &v8[-v22];
      size_t v19 = (char *)&v16[v22 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v23 = &v15[8 * v12 - 16];
      unint64_t v24 = v8 - 16;
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *uint64_t v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v10 = &v15[8 * v14];
      uint64_t v8 = (char *)(v16 + 2);
      if (v11) {
        goto LABEL_21;
      }
LABEL_22:
      float v11 = v19;
      if (++v9 >= (int)((unint64_t)(v6 - v7) >> 2)) {
        goto LABEL_34;
      }
    }
    uint64_t v18 = v8;
    size_t v19 = &v15[8 * v12];
    do
    {
LABEL_19:
      uint64_t v20 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v19 - 1) = v20;
      v19 -= 8;
    }
    while (v18 != v11);
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  float v11 = 0;
LABEL_34:
  sub_24C69E8CC(v11, v8, v30, v28);
  *a3 = v30;
  a3[1] = v28;
  a3[2] = v27;
  if (v11) {
    operator delete(v11);
  }
}

void sub_24C69E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (v18)
  {
    operator delete(v18);
    std::string __p = a17;
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C69E7D0(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 128) + 24))(__p);
  size_t v5 = *(void **)(a1 + 144);
  if (v13 >= 0) {
    objc_msgSend_stringWithFormat_(NSString, v2, @"%s", v3, v4, __p);
  }
  else {
  uint64_t v6 = objc_msgSend_stringWithFormat_(NSString, v2, @"%s", v3, v4, __p[0]);
  }
  uint64_t v10 = objc_msgSend_checkIfCaptionInDenylist_(v5, v7, (uint64_t)v6, v8, v9);

  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_24C69E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_24C69E8CC(void *a1, void *a2, char *a3, char *a4)
{
  if (a3 != a4)
  {
    size_t v5 = a3;
    if (a1 == a2)
    {
      a1 = a2;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      do
      {
        *(_DWORD *)size_t v5 = *(_DWORD *)a1;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a1++ + 1);
        v5 += 8;
      }
      while (a1 != a2 && v5 != a4);
      uint64_t v7 = v5 - a3;
      uint64_t v8 = (v5 - a3) >> 3;
      if (v5 - a3 >= 9 && (unint64_t)v7 >= 0x10)
      {
        int64_t v41 = (unint64_t)(v8 - 2) >> 1;
        int64_t v42 = v41;
        do
        {
          uint64_t v43 = 8 * v42;
          if (v41 >= (8 * v42) >> 3)
          {
            uint64_t v44 = (v43 >> 2) | 1;
            uint64_t v45 = (float *)&a3[8 * v44];
            if ((v43 >> 2) + 2 < v8 && *v45 > v45[2])
            {
              v45 += 2;
              uint64_t v44 = (v43 >> 2) + 2;
            }
            uint64_t v46 = (float *)&a3[v43];
            float v47 = *v46;
            float v48 = *v45;
            float v49 = *v46;
            if (*v45 <= *v46)
            {
              int v50 = *((_DWORD *)v46 + 1);
              do
              {
                uint64_t v51 = v46;
                uint64_t v46 = v45;
                *uint64_t v51 = v48;
                v51[1] = v45[1];
                if (v41 < v44) {
                  break;
                }
                uint64_t v52 = 2 * v44;
                uint64_t v44 = (2 * v44) | 1;
                uint64_t v45 = (float *)&a3[8 * v44];
                uint64_t v53 = v52 + 2;
                if (v53 < v8 && *v45 > v45[2])
                {
                  v45 += 2;
                  uint64_t v44 = v53;
                }
                float v48 = *v45;
              }
              while (*v45 <= v49);
              *uint64_t v46 = v47;
              *((_DWORD *)v46 + 1) = v50;
            }
          }
          BOOL v23 = v42-- <= 0;
        }
        while (!v23);
      }
    }
    if (a1 != a2)
    {
      if (v7 >= 16)
      {
        uint64_t v9 = (float *)(a3 + 8);
        uint64_t v10 = (float *)(a3 + 16);
        while (1)
        {
          if (COERCE_FLOAT(*a1) > *(float *)a3)
          {
            *(void *)a3 = *a1;
            if (v7 == 16 || *v9 <= *v10)
            {
              float v11 = (float *)(a3 + 8);
              uint64_t v12 = 1;
              float v13 = *(float *)a3;
              float v14 = *v9;
              float v15 = *(float *)a3;
              if (*v9 <= *(float *)a3)
              {
LABEL_27:
                int v16 = *((_DWORD *)a3 + 1);
                unint64_t v17 = (float *)a3;
                do
                {
                  uint64_t v18 = v17;
                  unint64_t v17 = v11;
                  float *v18 = v14;
                  v18[1] = v11[1];
                  if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v12) {
                    break;
                  }
                  uint64_t v19 = 2 * v12;
                  uint64_t v12 = (2 * v12) | 1;
                  float v11 = (float *)&a3[8 * v12];
                  uint64_t v20 = v19 + 2;
                  if (v20 < v8 && *v11 > v11[2])
                  {
                    v11 += 2;
                    uint64_t v12 = v20;
                  }
                  float v14 = *v11;
                }
                while (*v11 <= v15);
                float *v17 = v13;
                *((_DWORD *)v17 + 1) = v16;
              }
            }
            else
            {
              float v11 = (float *)(a3 + 16);
              uint64_t v12 = 2;
              float v13 = *(float *)a3;
              float v14 = *v10;
              float v15 = *(float *)a3;
              if (*v10 <= *(float *)a3) {
                goto LABEL_27;
              }
            }
          }
          if (++a1 == a2) {
            goto LABEL_33;
          }
        }
      }
      do
      {
        if (COERCE_FLOAT(*a1) > *(float *)a3) {
          *(void *)a3 = *a1;
        }
        ++a1;
      }
      while (a1 != a2);
    }
LABEL_33:
    if (v7 >= 9)
    {
      uint64_t v21 = (unint64_t)v7 >> 3;
      uint64_t v22 = v5;
      do
      {
        uint64_t v24 = 0;
        float v25 = *(float *)a3;
        int v26 = *((_DWORD *)a3 + 1);
        uint64_t v27 = a3;
        do
        {
          uint64_t v28 = v27;
          v27 += 8 * v24 + 8;
          uint64_t v29 = 2 * v24;
          uint64_t v24 = (2 * v24) | 1;
          uint64_t v30 = v29 + 2;
          if (v30 < v21 && *(float *)v27 > *((float *)v27 + 2))
          {
            v27 += 8;
            uint64_t v24 = v30;
          }
          *(_DWORD *)uint64_t v28 = *(_DWORD *)v27;
          *((_DWORD *)v28 + 1) = *((_DWORD *)v27 + 1);
        }
        while (v24 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        uint64_t v31 = v22 - 8;
        if (v27 == v22 - 8)
        {
          *(float *)uint64_t v27 = v25;
          *((_DWORD *)v27 + 1) = v26;
        }
        else
        {
          *(_DWORD *)uint64_t v27 = *((_DWORD *)v22 - 2);
          *((_DWORD *)v27 + 1) = *((_DWORD *)v22 - 1);
          *((float *)v22 - 2) = v25;
          *((_DWORD *)v22 - 1) = v26;
          uint64_t v32 = v27 - a3 + 8;
          if (v32 >= 9)
          {
            unint64_t v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            float v34 = &a3[8 * v33];
            float v35 = *(float *)v27;
            float v36 = COERCE_FLOAT(*(void *)v34);
            float v37 = *(float *)v27;
            if (v36 > *(float *)v27)
            {
              int v38 = *((_DWORD *)v27 + 1);
              do
              {
                int64_t v39 = v27;
                uint64_t v27 = v34;
                *(float *)int64_t v39 = v36;
                *((_DWORD *)v39 + 1) = *((_DWORD *)v34 + 1);
                if (!v33) {
                  break;
                }
                unint64_t v33 = (v33 - 1) >> 1;
                float v34 = &a3[8 * v33];
                float v36 = COERCE_FLOAT(*(void *)v34);
              }
              while (v36 > v37);
              *(float *)uint64_t v27 = v35;
              *((_DWORD *)v27 + 1) = v38;
            }
          }
        }
        uint64_t v22 = v31;
        BOOL v23 = v21-- <= 2;
      }
      while (!v23);
    }
  }
  return a2;
}

char *sub_24C69ECC0(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_24C66DB48();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  float v11 = &v10[32 * v3];
  uint64_t v12 = &v10[v9];
  *(_OWORD *)float v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  float v13 = v11 + 32;
  float v15 = (char *)*a1;
  float v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14) {
      return v13;
    }
    goto LABEL_17;
  }
  uint64_t v16 = 0;
  do
  {
    unint64_t v17 = &v11[v16];
    uint64_t v18 = &v14[v16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((void *)v17 - 2) = *(void *)&v14[v16 - 16];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((_DWORD *)v17 - 2) = *(_DWORD *)&v14[v16 - 8];
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  uint64_t v19 = (char *)*a1;
  float v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    uint64_t v20 = v14;
    do
    {
      uint64_t v22 = (void *)*((void *)v20 - 4);
      v20 -= 32;
      uint64_t v21 = v22;
      if (v22)
      {
        *((void *)v14 - 3) = v21;
        operator delete(v21);
      }
      float v14 = v20;
    }
    while (v20 != v19);
    float v14 = v19;
  }
  if (v14) {
LABEL_17:
  }
    operator delete(v14);
  return v13;
}

void sub_24C69EE20(unsigned __int8 *a1, const std::locale *a2)
{
  int v3 = (char)a1[23];
  if (v3 >= 0) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = *(unsigned __int8 **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  int locale = (int)a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  if (v5)
  {
    BOOL v6 = &v4[v5];
    unint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    uint64_t v8 = v4;
    while (1)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = std::locale::use_facet(&v17, v7);
      if ((v9 & 0x80) != 0 || (*((_DWORD *)&v10[1].~facet + v9) & locale) == 0) {
        break;
      }
      ++v8;
      if (!--v5)
      {
        uint64_t v8 = v6;
        break;
      }
    }
  }
  else
  {
    uint64_t v8 = v4;
  }
  unint64_t v11 = a1[23];
  int v12 = (char)v11;
  uint64_t v13 = *(void *)a1;
  if ((v11 & 0x80u) == 0) {
    float v14 = a1;
  }
  else {
    float v14 = *(unsigned __int8 **)a1;
  }
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *((void *)a1 + 1);
  }
  uint64_t v15 = v4 - v14;
  if (v11 < v4 - v14) {
    sub_24C69EF7C();
  }
  if (v8 - v4 == -1)
  {
    if (v12 < 0)
    {
      *((void *)a1 + 1) = v15;
      *(unsigned char *)(v13 + v15) = 0;
    }
    else
    {
      a1[23] = v15 & 0x7F;
      a1[v15] = 0;
    }
  }
  else
  {
    sub_24C69EF94(a1, v15, v8 - v4);
  }
  std::locale::~locale(&v17);
}

void sub_24C69EF54(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_24C69EF68(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_24C69EF7C()
{
}

void *sub_24C69EF94(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return result;
  }
  int v3 = result;
  int v4 = *((char *)result + 23);
  if (v4 < 0)
  {
    BOOL v6 = (void *)*result;
    uint64_t v5 = result[1];
    unint64_t v7 = v5 - a2;
    if (v5 - a2 >= a3) {
      unint64_t v8 = a3;
    }
    else {
      unint64_t v8 = v5 - a2;
    }
    if (v5 - a2 <= a3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)result + 23);
    BOOL v6 = result;
    unint64_t v7 = v5 - a2;
    if (v5 - a2 >= a3) {
      unint64_t v8 = a3;
    }
    else {
      unint64_t v8 = *((unsigned __int8 *)result + 23) - a2;
    }
    if (v7 <= a3) {
      goto LABEL_8;
    }
  }
  float result = memmove((char *)v6 + a2, (char *)v6 + a2 + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)v3 + 23);
LABEL_8:
  uint64_t v9 = v5 - v8;
  if ((v4 & 0x80) != 0) {
    v3[1] = v9;
  }
  else {
    *((unsigned char *)v3 + 23) = v9 & 0x7F;
  }
  *((unsigned char *)v6 + v9) = 0;
  return result;
}

void sub_24C69F02C(char *a1, const std::locale *a2)
{
  int v3 = a1[23];
  if (v3 >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = *(char **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  BOOL v6 = &v4[v5];
  int locale = (int)a2->__locale_;
  std::locale::locale(&v19, a2 + 1);
  int v20 = locale;
  std::locale::locale(&v21, &v19);
  unint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
  while (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v4[v5 - 1];
    uint64_t v10 = std::locale::use_facet(&v21, v7);
    if ((v9 & 0x80) != 0)
    {
      int v4 = v6;
      break;
    }
    --v6;
    int v11 = *((_DWORD *)&v10[1].~facet + v9);
    uint64_t v5 = v8 - 1;
    if ((v11 & v20) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v21);
  unint64_t v12 = a1[23];
  int v13 = (char)v12;
  float v14 = *(char **)a1;
  if ((v12 & 0x80u) == 0) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = *(char **)a1;
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v12 = *((void *)a1 + 1);
  }
  uint64_t v16 = v4 - v15;
  if (v12 < v4 - v15) {
    sub_24C69EF7C();
  }
  unint64_t v17 = &v15[v12] - v4;
  if (v17 == -1)
  {
    if (v13 < 0)
    {
      *((void *)a1 + 1) = v16;
      v14[v16] = 0;
    }
    else
    {
      a1[23] = v16 & 0x7F;
      a1[v16] = 0;
    }
  }
  else
  {
    sub_24C69EF94(a1, v16, v17);
  }
  std::locale::~locale(&v19);
}

void sub_24C69F188(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_24C69F19C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C69F1C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_24C69F36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69F9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C69FE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A0100(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v15);
  MEMORY[0x2532F8960](v10, 0xA1C409BE6959DLL);
  sub_24C66DB7C((uint64_t)&a9);
  if (*(char *)(v12 - 65) < 0) {
    operator delete(*(void **)(v12 - 88));
  }
  if (a2 == 1)
  {
    uint64_t v16 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v16, v9);
    __cxa_end_catch();
    JUMPOUT(0x24C6A00D4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A02B4(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x2532F8960](v3, 0x20C4093837F09);
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  BOOL v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_24C6A06E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_24C6717DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6A06F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_24C6717DC((uint64_t)&a20);
  sub_24C66D598((uint64_t)&a30);
  sub_24C66D660(&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_24C6A0860(uint64_t result, char *a2)
{
  if (result)
  {
    int v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v10, a2);
    sub_24C66A45C("PixelBufferTransfer operation [", &v10, &v11);
    sub_24C66A5A0("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v9;
    }
    else {
      uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C6A0958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_24C6A0A44(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v12 = a4;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Nil taxonomy object.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string v13 = objc_msgSend__vocabularyNamed_(v7, v9, (uint64_t)v8, v10, v11);
  if (!v13)
  {
    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v43, "Invalid vocabulary name ");
    id v21 = v8;
    int v26 = (char *)objc_msgSend_UTF8String(v21, v22, v23, v24, v25);
    sub_24C66A5A0(v26, &v43, &v44);
    sub_24C6698FC(v41, " in taxonomy ");
    if ((v42 & 0x80u) == 0) {
      uint64_t v27 = (const std::string::value_type *)v41;
    }
    else {
      uint64_t v27 = (const std::string::value_type *)v41[0];
    }
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v28 = v42;
    }
    else {
      std::string::size_type v28 = v41[1];
    }
    uint64_t v29 = std::string::append(&v44, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    objc_msgSend_name(v7, v31, v32, v33, v34);
    id v35 = objc_claimAutoreleasedReturnValue();
    float v40 = (char *)objc_msgSend_UTF8String(v35, v36, v37, v38, v39);
    sub_24C66A5A0(v40, &v45, &v46);
    std::runtime_error::runtime_error(v20, &v46);
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v46.__r_.__value_.__r.__words[0] = sub_24C6A0D88(a3);
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  uint64_t v18 = objc_msgSend_internalCount(v13, v14, v15, v16, v17);
  sub_24C6A0EFC((uint64_t)&v46, v18);
  sub_24C6A10E8(v13, (uint64_t)v46.__r_.__value_.__l.__data_, v12);
}

void sub_24C6A0C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v40 - 65) < 0) {
    operator delete(*(void **)(v40 - 88));
  }

  if (a33 < 0)
  {
    operator delete(a28);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_6:
    if (a21 < 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_7:
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_14:

      _Unwind_Resume(a1);
    }
LABEL_13:
    __cxa_free_exception(v37);

    _Unwind_Resume(a1);
  }
LABEL_12:
  if (!v39) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_24C6A0D88(void *a1)
{
  if (a1[10] != 1 || a1[11] != 1 || a1[13] != 1 || a1[14] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Expected a one-dimensional likelihood buffer with a size only along the channel dimension, but got something else.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a1[17] != 1)
  {
    int v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v5, a1[17]);
    sub_24C66A45C("Expected a contiguous likelihood buffer, but stride along the channel dimension is ", &v5, &v6);
    std::runtime_error::runtime_error(v4, &v6);
    __cxa_throw(v4, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *a1;
}

void sub_24C6A0E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_24C6A0EFC(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 8) != a2)
  {
    uint64_t v3 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, *(void *)(v3 + 8));
    sub_24C66A45C("Length of buffer ", &v10, &v11);
    sub_24C66A5A0(" does not match the expected length ", &v11, &v12);
    std::to_string(&v9, a2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v5 = &v9;
    }
    else {
      std::string v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    id v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C6A0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_24C6A10E8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = a2;
  v14[0] = 0;
  v14[1] = v14;
  _OWORD v14[2] = 0x2020000000;
  v14[3] = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = sub_24C6A13D8;
  v10[3] = &unk_2652E7C70;
  std::string v12 = v15;
  std::string v13 = v14;
  id v11 = v5;
  id v6 = v5;
  objc_msgSend__enumerateVisibleLabelsAndIndicesInVocabularyUsingBlock_(a1, v7, (uint64_t)v10, v8, v9);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v15, 8);
}

void sub_24C6A11C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_24C6A11F4(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = a1;
  id v12 = a2;
  if (v7)
  {
    objc_msgSend_relations(v7, v8, v9, v10, v11);
    id v13 = v37;
  }
  else
  {
    id v13 = 0;
    id v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  id v34 = v13;
  uint64_t v35 = v38;
  LODWORD(v36) = 1082130432;
  float v14 = (const void *)sub_24C6A0D88(a3);
  uint64_t v16 = v15;
  std::locale v19 = objc_msgSend__vocabularyNamed_(v7, v15, (uint64_t)v12, v17, v18);
  unint64_t v24 = objc_msgSend_internalCount(v7, v20, v21, v22, v23);
  unint64_t v29 = v24;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v24)
  {
    if (v24 >> 62) {
      sub_24C667470();
    }
    size_t v30 = 4 * v24;
    uint64_t v31 = (char *)operator new(4 * v24);
    *a4 = (uint64_t)v31;
    uint64_t v32 = &v31[4 * v29];
    a4[2] = (uint64_t)v32;
    memset_pattern16(v31, &unk_24C730060, v30);
    a4[1] = (uint64_t)v32;
  }
  else
  {
    uint64_t v31 = 0;
  }
  uint64_t started = objc_msgSend_startIndex(v19, v25, v26, v27, v28, v34, v35, v36);
  if (v16) {
    memmove(&v31[4 * started], v14, 4 * (void)v16);
  }
  sub_24C6AC688((uint64_t)&v34, a4);

  if ((_BYTE)v39) {
}
  }

void sub_24C6A1364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A1378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14)
{
  std::locale v19 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v19;
    operator delete(v19);
  }

  if (a14) {
  _Unwind_Resume(a1);
  }
}

void sub_24C6A13D8(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)(*(void *)(a1[5] + 8) + 24) += 4 * (a3 - *(void *)(*(void *)(a1[6] + 8) + 24));
  *(void *)(*(void *)(a1[6] + 8) + 24) = a3;
  (*(void (**)(float))(a1[4] + 16))(**(float **)(*(void *)(a1[5] + 8) + 24));
}

void sub_24C6A1488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A1550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A1588(char a1@<W0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v10 = a2;
  id v11 = a3;
  id v166 = a4;
  uint64_t v182 = 0;
  v183 = (float *)&v182;
  uint64_t v184 = 0x9012000000;
  v185 = sub_24C6A21D4;
  v186 = sub_24C6A2280;
  v187 = "'0";
  long long v189 = 0u;
  long long v190 = 0u;
  int v191 = 1065353216;
  long long v192 = 0u;
  long long v193 = 0u;
  char v188 = a1;
  v164 = v11;
  uint64_t v15 = objc_msgSend__vocabularyNamed_(v10, v12, (uint64_t)v11, v13, v14);
  uint64_t v16 = (void *)*((void *)v183 + 14);
  *((void *)v183 + 14) = v15;

  if (!*((void *)v183 + 14))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not load the detection vocabulary");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v21 = objc_msgSend_internalCount(v10, v17, v18, v19, v20);
  unint64_t v26 = objc_msgSend_count(v166, v22, v23, v24, v25);
  sub_24C670F38((void *)v183 + 15, 0, 0, 0);
  uint64_t v27 = v183;
  *((void *)v183 + 7) = -1;
  *((void *)v27 + 8) = 0xBF8000003F800000;
  v181[0] = 0;
  v181[1] = v181;
  v181[2] = 0x2020000000;
  v181[3] = 0;
  uint64_t v28 = (void *)*((void *)v27 + 14);
  v172[0] = MEMORY[0x263EF8330];
  v172[1] = 3221225472;
  v172[2] = sub_24C6A22F8;
  v172[3] = &unk_2652E80A8;
  v175 = &v182;
  id v162 = v10;
  id v173 = v162;
  id v161 = v164;
  id v174 = v161;
  v176 = v181;
  int v177 = a5;
  char v178 = BYTE4(a5);
  char v180 = HIBYTE(a5);
  __int16 v179 = HIDWORD(a5) >> 8;
  objc_msgSend__enumerateAllLabelsInVocabularyUsingBlock_(v28, v29, (uint64_t)v172, v30, v31);
  float v32 = *(float *)&a5;
  int v33 = v183;
  if (!BYTE4(a5)) {
    float v32 = 0.1;
  }
  v183[16] = v32;
  unint64_t v165 = v21;
  if (!v26) {
    goto LABEL_107;
  }
  sub_24C6A2628(&__p, v21);
  if (v21)
  {
    uint64_t v38 = 0;
    for (uint64_t i = 0; v21 != i; ++i)
    {
      int64_t v41 = objc_msgSend_labels(*((void **)v183 + 14), v34, v35, v36, v37);
      objc_msgSend_objectAtIndexedSubscript_(v41, v42, i, v43, v44);
      id v45 = objc_claimAutoreleasedReturnValue();
      int v50 = (const char *)objc_msgSend_UTF8String(v45, v46, v47, v48, v49);
      size_t v51 = strlen(v50);
      if (v51 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      std::string::size_type v52 = v51;
      if (v51 >= 0x17)
      {
        uint64_t v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17) {
          uint64_t v55 = v51 | 7;
        }
        uint64_t v56 = v55 + 1;
        p_dst = (std::string *)operator new(v55 + 1);
        __dst.__r_.__value_.__l.__size_ = v52;
        __dst.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v51;
        p_dst = &__dst;
        if (!v51)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v54 = (char *)__p + v38;
          if (*((char *)__p + v38 + 23) < 0) {
            goto LABEL_17;
          }
          goto LABEL_7;
        }
      }
      memmove(p_dst, v50, v52);
      p_dst->__r_.__value_.__s.__data_[v52] = 0;
      uint64_t v54 = (char *)__p + v38;
      if (*((char *)__p + v38 + 23) < 0) {
LABEL_17:
      }
        operator delete(*(void **)v54);
LABEL_7:
      long long v40 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)v54 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v54 = v40;

      v38 += 24;
    }
  }
  uint64_t v57 = 0;
  if (v26 <= 1) {
    uint64_t v58 = 1;
  }
  else {
    uint64_t v58 = v26;
  }
  do
  {
    uint64_t v61 = (void **)__p;
    uint64_t v60 = v171;
    objc_msgSend_objectAtIndexedSubscript_(v166, v34, v57, v36, v37);
    id v62 = objc_claimAutoreleasedReturnValue();
    uint64_t v67 = (const char *)objc_msgSend_UTF8String(v62, v63, v64, v65, v66);
    size_t v68 = strlen(v67);
    if (v68 > 0x7FFFFFFFFFFFFFF7) {
      sub_24C6673C8();
    }
    std::string::size_type v69 = v68;
    if (v68 >= 0x17)
    {
      uint64_t v72 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v68 | 7) != 0x17) {
        uint64_t v72 = v68 | 7;
      }
      uint64_t v73 = v72 + 1;
      unint64_t v70 = (std::string *)operator new(v72 + 1);
      __dst.__r_.__value_.__l.__size_ = v69;
      __dst.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68;
      unint64_t v70 = &__dst;
      if (!v68)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        std::string::size_type v71 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (v61 == v60) {
          goto LABEL_50;
        }
        goto LABEL_33;
      }
    }
    memmove(v70, v67, v69);
    v70->__r_.__value_.__s.__data_[v69] = 0;
    std::string::size_type v71 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (v61 == v60)
    {
LABEL_50:
      if ((v71 & 0x80) == 0) {
        goto LABEL_52;
      }
LABEL_51:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_52;
    }
LABEL_33:
    if ((v71 & 0x80u) == 0) {
      std::string::size_type size = v71;
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if ((v71 & 0x80u) == 0) {
      v75 = &__dst;
    }
    else {
      v75 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v76 = *((unsigned __int8 *)v61 + 23);
      if ((v76 & 0x80u) == 0) {
        uint64_t v77 = (void *)*((unsigned __int8 *)v61 + 23);
      }
      else {
        uint64_t v77 = v61[1];
      }
      if (v77 == (void *)size)
      {
        if ((v76 & 0x80) != 0)
        {
          if (!memcmp(*v61, v75, (size_t)v61[1])) {
            goto LABEL_50;
          }
        }
        else
        {
          if (!*((unsigned char *)v61 + 23)) {
            goto LABEL_50;
          }
          uint64_t v78 = 0;
          while (*((unsigned __int8 *)v61 + v78) == v75->__r_.__value_.__s.__data_[v78])
          {
            if (v76 == ++v78) {
              goto LABEL_50;
            }
          }
        }
      }
      v61 += 3;
    }
    while (v61 != v60);
    uint64_t v61 = v60;
    if ((v71 & 0x80) != 0) {
      goto LABEL_51;
    }
LABEL_52:

    if (v61 == v171)
    {
      v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      objc_msgSend_objectAtIndexedSubscript_(v166, v151, v57, v152, v153);
      id v154 = objc_claimAutoreleasedReturnValue();
      v159 = (char *)objc_msgSend_UTF8String(v154, v155, v156, v157, v158);
      sub_24C6698FC(&v167, v159);
      sub_24C66A45C("label ", &v167, &v168);
      sub_24C66A5A0(" not in detection taxonomy vocabulary", &v168, &__dst);
      std::runtime_error::runtime_error(v150, &__dst);
      __cxa_throw(v150, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (unsigned char *)__p) >> 3);
    id v80 = v183;
    if (v79 != *((void *)v183 + 7))
    {
      v82 = (unint64_t *)*((void *)v183 + 16);
      unint64_t v81 = *((void *)v183 + 17);
      if ((unint64_t)v82 >= v81)
      {
        v83 = (unint64_t *)*((void *)v183 + 15);
        uint64_t v84 = v82 - v83;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61) {
          sub_24C667470();
        }
        uint64_t v86 = v81 - (void)v83;
        if (v86 >> 2 > v85) {
          unint64_t v85 = v86 >> 2;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          if (v87 >> 61) {
            sub_24C66DB48();
          }
          v88 = operator new(8 * v87);
          v89 = (unint64_t *)&v88[8 * v84];
          unint64_t *v89 = v79;
          uint64_t v59 = (uint64_t)(v89 + 1);
          if (v82 != v83)
          {
LABEL_64:
            unint64_t v90 = (char *)(v82 - 1) - (char *)v83;
            if (v90 < 0x58)
            {
              unint64_t v21 = v165;
              goto LABEL_74;
            }
            unint64_t v21 = v165;
            if ((unint64_t)((char *)v83 - v88) < 0x20) {
              goto LABEL_155;
            }
            uint64_t v91 = (v90 >> 3) + 1;
            uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
            v93 = &v82[v92 / 0xFFFFFFFFFFFFFFF8];
            v89 = (unint64_t *)((char *)v89 - v92);
            v94 = &v88[8 * v84 - 16];
            v95 = v82 - 2;
            uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v97 = *(_OWORD *)v95;
              *(v94 - 1) = *((_OWORD *)v95 - 1);
              _OWORD *v94 = v97;
              v94 -= 2;
              v95 -= 4;
              v96 -= 4;
            }
            while (v96);
            v82 = v93;
            if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              do
              {
LABEL_74:
                unint64_t v98 = *--v82;
                *--v89 = v98;
              }
              while (v82 != v83);
            }
LABEL_75:
            *((void *)v80 + 15) = v89;
            *((void *)v80 + 16) = v59;
            *((void *)v80 + 17) = &v88[8 * v87];
            if (v83) {
              operator delete(v83);
            }
LABEL_22:
            *((void *)v80 + 16) = v59;
            goto LABEL_23;
          }
        }
        else
        {
          v88 = 0;
          v89 = (unint64_t *)(8 * v84);
          *(void *)(8 * v84) = v79;
          uint64_t v59 = 8 * v84 + 8;
          if (v82 != v83) {
            goto LABEL_64;
          }
        }
        unint64_t v21 = v165;
        goto LABEL_75;
      }
      unint64_t *v82 = v79;
      uint64_t v59 = (uint64_t)(v82 + 1);
      goto LABEL_22;
    }
LABEL_23:
    ++v57;
  }
  while (v57 != v58);
  v99 = v183;
  uint64_t v100 = *((void *)v183 + 7);
  v102 = (char *)*((void *)v183 + 16);
  unint64_t v101 = *((void *)v183 + 17);
  if ((unint64_t)v102 < v101)
  {
    *(void *)v102 = v100;
    uint64_t v103 = (uint64_t)(v102 + 8);
    goto LABEL_98;
  }
  v104 = (char *)*((void *)v183 + 15);
  uint64_t v105 = (v102 - v104) >> 3;
  unint64_t v106 = v105 + 1;
  if ((unint64_t)(v105 + 1) >> 61) {
    sub_24C667470();
  }
  uint64_t v107 = v101 - (void)v104;
  if (v107 >> 2 > v106) {
    unint64_t v106 = v107 >> 2;
  }
  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v108 = v106;
  }
  if (v108)
  {
    if (v108 >> 61) {
      sub_24C66DB48();
    }
    v109 = operator new(8 * v108);
    v110 = &v109[8 * v105];
    v111 = &v109[8 * v108];
    void *v110 = v100;
    uint64_t v103 = (uint64_t)(v110 + 1);
    int64_t v112 = v102 - v104;
    if (v102 == v104) {
      goto LABEL_96;
    }
LABEL_90:
    unint64_t v113 = v112 - 8;
    if (v113 < 0x58) {
      goto LABEL_156;
    }
    if ((unint64_t)(v104 - v109) < 0x20) {
      goto LABEL_156;
    }
    uint64_t v114 = (v113 >> 3) + 1;
    uint64_t v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v102[-v115];
    v110 = (void *)((char *)v110 - v115);
    v117 = &v109[8 * v105 - 16];
    v118 = v102 - 16;
    uint64_t v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v120 = *(_OWORD *)v118;
      *(v117 - 1) = *((_OWORD *)v118 - 1);
      _OWORD *v117 = v120;
      v117 -= 2;
      v118 -= 32;
      v119 -= 4;
    }
    while (v119);
    v102 = v116;
    if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_156:
      do
      {
        uint64_t v121 = *((void *)v102 - 1);
        v102 -= 8;
        *--v110 = v121;
      }
      while (v102 != v104);
    }
  }
  else
  {
    v109 = 0;
    v110 = (void *)(8 * v105);
    v111 = 0;
    *(void *)(8 * v105) = v100;
    uint64_t v103 = 8 * v105 + 8;
    int64_t v112 = v102 - v104;
    if (v102 != v104) {
      goto LABEL_90;
    }
  }
LABEL_96:
  *((void *)v99 + 15) = v110;
  *((void *)v99 + 16) = v103;
  *((void *)v99 + 17) = v111;
  if (v104) {
    operator delete(v104);
  }
LABEL_98:
  *((void *)v99 + 16) = v103;
  v122 = (void **)__p;
  if (__p)
  {
    v123 = v171;
    v124 = __p;
    if (v171 != __p)
    {
      do
      {
        if (*((char *)v123 - 1) < 0) {
          operator delete(*(v123 - 3));
        }
        v123 -= 3;
      }
      while (v123 != v122);
      v124 = __p;
    }
    v171 = v122;
    operator delete(v124);
  }
  int v33 = v183;
LABEL_107:
  if (*((void *)v33 + 15) == *((void *)v33 + 16) && v21 != 0)
  {
    uint64_t v126 = 0;
    while (1)
    {
      v128 = v183;
      v130 = (char *)*((void *)v183 + 16);
      unint64_t v129 = *((void *)v183 + 17);
      if ((unint64_t)v130 >= v129) {
        break;
      }
      *(void *)v130 = v126;
      uint64_t v127 = (uint64_t)(v130 + 8);
LABEL_113:
      *((void *)v128 + 16) = v127;
      if (++v126 == v21)
      {
        int v33 = v183;
        goto LABEL_136;
      }
    }
    v131 = (char *)*((void *)v183 + 15);
    uint64_t v132 = (v130 - v131) >> 3;
    unint64_t v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v134 = v129 - (void)v131;
    if (v134 >> 2 > v133) {
      unint64_t v133 = v134 >> 2;
    }
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v135 = v133;
    }
    if (v135)
    {
      if (v135 >> 61) {
        sub_24C66DB48();
      }
      v136 = operator new(8 * v135);
      v137 = &v136[8 * v132];
      void *v137 = v126;
      uint64_t v127 = (uint64_t)(v137 + 1);
      if (v130 != v131)
      {
LABEL_124:
        unint64_t v138 = v130 - 8 - v131;
        if (v138 < 0x58)
        {
          unint64_t v21 = v165;
          goto LABEL_132;
        }
        unint64_t v21 = v165;
        if ((unint64_t)(v131 - v136) < 0x20) {
          goto LABEL_157;
        }
        uint64_t v139 = (v138 >> 3) + 1;
        uint64_t v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
        v141 = &v130[-v140];
        v137 = (void *)((char *)v137 - v140);
        v142 = &v136[8 * v132 - 16];
        v143 = v130 - 16;
        uint64_t v144 = v139 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v145 = *(_OWORD *)v143;
          *(v142 - 1) = *((_OWORD *)v143 - 1);
          _OWORD *v142 = v145;
          v142 -= 2;
          v143 -= 32;
          v144 -= 4;
        }
        while (v144);
        v130 = v141;
        if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_157:
          do
          {
LABEL_132:
            uint64_t v146 = *((void *)v130 - 1);
            v130 -= 8;
            *--v137 = v146;
          }
          while (v130 != v131);
        }
LABEL_133:
        *((void *)v128 + 15) = v137;
        *((void *)v128 + 16) = v127;
        *((void *)v128 + 17) = &v136[8 * v135];
        if (v131) {
          operator delete(v131);
        }
        goto LABEL_113;
      }
    }
    else
    {
      v136 = 0;
      v137 = (void *)(8 * v132);
      *(void *)(8 * v132) = v126;
      uint64_t v127 = 8 * v132 + 8;
      if (v130 != v131) {
        goto LABEL_124;
      }
    }
    unint64_t v21 = v165;
    goto LABEL_133;
  }
LABEL_136:
  sub_24C6A3964(a6, (long long *)v33 + 3);

  _Block_object_dispose(v181, 8);
  _Block_object_dispose(&v182, 8);
  if (*((void *)&v192 + 1))
  {
    *(void *)&long long v193 = *((void *)&v192 + 1);
    operator delete(*((void **)&v192 + 1));
  }

  v147 = (void *)v190;
  if ((void)v190)
  {
    do
    {
      v148 = (void *)*v147;
      operator delete(v147);
      v147 = v148;
    }
    while (v148);
  }
  v149 = (void *)v189;
  *(void *)&long long v189 = 0;
  if (v149) {
    operator delete(v149);
  }
}

void sub_24C6A2040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  __cxa_free_exception(v47);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  sub_24C66BF8C(v48 - 184);

  _Unwind_Resume(a1);
}

__n128 sub_24C6A21D4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 72) = v3;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  if (v5)
  {
    unint64_t v6 = *(void *)(v4 + 8);
    unint64_t v7 = *(void *)(a1 + 80);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        v6 %= v7;
      }
    }
    else
    {
      v6 &= v7 - 1;
    }
    *(void *)(v3 + 8 * v6) = a1 + 88;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = result;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

void sub_24C6A2280(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_24C6A22F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (int *)(a1 + 64);
    if (!*(unsigned char *)(a1 + 68)) {
      uint64_t v4 = (int *)&unk_24C730080;
    }
    int v5 = *v4;
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8) + 72;
    v34.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    *((_DWORD *)sub_24C6A5BD8(v6, (unint64_t *)&v34, (uint64_t)&unk_24C72FF38, &v35) + 6) = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    if ((*(void *)(v7 + 56) & 0x8000000000000000) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      objc_msgSend_name(*(void **)(a1 + 32), v9, v10, v11, v12);
      id v13 = objc_claimAutoreleasedReturnValue();
      uint64_t v18 = (char *)objc_msgSend_UTF8String(v13, v14, v15, v16, v17);
      sub_24C6698FC(&v31, v18);
      sub_24C66A45C("Multiple background labels found in taxonomy ", &v31, &v32);
      sub_24C66A5A0(" vocabulary ", &v32, &v33);
      id v19 = *(id *)(a1 + 40);
      uint64_t v24 = (char *)objc_msgSend_UTF8String(v19, v20, v21, v22, v23);
      sub_24C6698FC(v29, v24);
      if ((v30 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v29;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v29[0];
      }
      if ((v30 & 0x80u) == 0) {
        std::string::size_type v26 = v30;
      }
      else {
        std::string::size_type v26 = v29[1];
      }
      uint64_t v27 = std::string::append(&v33, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      sub_24C66A5A0(".", &v34, &v35);
      std::runtime_error::runtime_error(exception, &v35);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *(void *)(v7 + 56) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 68) = 1063675494;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
}

void sub_24C6A24E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v42 - 65) < 0)
  {
    operator delete(*(void **)(v42 - 88));
    if ((a38 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0)
    {
LABEL_15:
      operator delete(a15);

      if (v41)
      {
LABEL_16:
        __cxa_free_exception(v39);

        _Unwind_Resume(a1);
      }
LABEL_17:

      _Unwind_Resume(a1);
    }
LABEL_13:

    if (v41) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
LABEL_12:
  operator delete(a21);
  if (a20 < 0) {
    goto LABEL_15;
  }
  goto LABEL_13;
}

void *sub_24C6A2628(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_24C667470();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24C6A26D4(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_24C72A0F0((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6A26F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  LOWORD(v110[0]) = 1;
  sub_24C66FCBC((uint64_t)v114, a1, v110);
  LOWORD(v105) = 1;
  sub_24C66FCBC((uint64_t)v110, a2, &v105);
  sub_24C6A3014(&v105, (uint64_t)v114);
  uint64_t v91 = a4;
  id v92 = *(id *)(a3 + 64);
  uint64_t v103 = 0;
  v104 = 0;
  v102 = 0;
  uint64_t v7 = v115[2];
  if (!v7 || (uint64_t v8 = v115[3]) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_62;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  while (2)
  {
    uint64_t v13 = 0;
    while (2)
    {
      if (v109 != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v15 = *(void *)(a3 + 8);
      uint64_t v16 = *((void *)v107 + 1);
      uint64_t v17 = *((void *)v107 + 2) * v12 + *((void *)v107 + 3) * v13;
      float v18 = *(float *)(v106 + 4 * (v17 + v15 * v16));
      if (v18 > *(float *)(a3 + 20) || *(unsigned char *)a3 && v18 > (float)(1.0 - *(float *)(a3 + 16))) {
        goto LABEL_8;
      }
      id v19 = *(unint64_t **)(a3 + 72);
      uint64_t v20 = *(void *)(a3 + 80) - (void)v19;
      if (!v20) {
        goto LABEL_8;
      }
      float v21 = (float)(1.0 - v18) * 0.5;
      unint64_t v22 = v20 >> 3;
      if (v22 <= 1) {
        unint64_t v22 = 1;
      }
      unint64_t v23 = -1;
      float v24 = 1.1755e-38;
      while (1)
      {
        unint64_t v26 = *v19++;
        unint64_t v25 = v26;
        if (v26 != v15) {
          break;
        }
LABEL_17:
        if (!--v22) {
          goto LABEL_24;
        }
      }
      unint64_t v27 = v17 + v25 * v16;
      float v28 = *(float *)(v106 + 4 * v27);
      if (!*(unsigned char *)a3 || v28 <= v21)
      {
        if (v28 > v24)
        {
          unint64_t v23 = v25;
          float v24 = *(float *)(v106 + 4 * v27);
        }
        goto LABEL_17;
      }
      unint64_t v23 = v25;
      float v24 = *(float *)(v106 + 4 * v27);
LABEL_24:
      if ((v23 & 0x8000000000000000) != 0) {
        goto LABEL_8;
      }
      int8x8_t v29 = *(int8x8_t *)(a3 + 32);
      if (!*(void *)&v29) {
        goto LABEL_120;
      }
      uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] >= 2uLL)
      {
        unint64_t v31 = v23;
        if (v23 >= *(void *)&v29) {
          unint64_t v31 = v23 % *(void *)&v29;
        }
      }
      else
      {
        unint64_t v31 = (*(void *)&v29 - 1) & v23;
      }
      std::string v32 = *(float ***)(*(void *)(a3 + 24) + 8 * v31);
      if (!v32 || (std::string v33 = *v32) == 0) {
LABEL_120:
      }
        sub_24C66DE30("unordered_map::at: key not found");
      if (v30.u32[0] < 2uLL)
      {
        uint64_t v34 = *(void *)&v29 - 1;
        while (1)
        {
          uint64_t v36 = *((void *)v33 + 1);
          if (v23 == v36)
          {
            if (*((void *)v33 + 2) == v23) {
              goto LABEL_45;
            }
          }
          else if ((v36 & v34) != v31)
          {
            goto LABEL_120;
          }
          std::string v33 = *(float **)v33;
          if (!v33) {
            goto LABEL_120;
          }
        }
      }
      while (2)
      {
        unint64_t v35 = *((void *)v33 + 1);
        if (v23 != v35)
        {
          if (v35 >= *(void *)&v29) {
            v35 %= *(void *)&v29;
          }
          if (v35 != v31) {
            goto LABEL_120;
          }
          goto LABEL_35;
        }
        if (*((void *)v33 + 2) != v23)
        {
LABEL_35:
          std::string v33 = *(float **)v33;
          if (!v33) {
            goto LABEL_120;
          }
          continue;
        }
        break;
      }
LABEL_45:
      if (v24 > v33[6])
      {
        if (v11 < v10)
        {
          *(void *)uint64_t v11 = v12;
          *((void *)v11 + 1) = v13;
          *((float *)v11 + 4) = v24;
          *((void *)v11 + 3) = v23;
          v11 += 32;
          uint64_t v14 = v9;
          goto LABEL_7;
        }
        uint64_t v37 = (v11 - v9) >> 5;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 59) {
          sub_24C667470();
        }
        if ((v10 - v9) >> 4 > v38) {
          unint64_t v38 = (v10 - v9) >> 4;
        }
        if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39 >> 59) {
          sub_24C66DB48();
        }
        long long v40 = (char *)operator new(32 * v39);
        int v41 = &v40[32 * v37];
        *(void *)int v41 = v12;
        *((void *)v41 + 1) = v13;
        *((float *)v41 + 4) = v24;
        *((void *)v41 + 3) = v23;
        if (v11 == v9)
        {
          uint64_t v14 = &v40[32 * v37];
          uint64_t v10 = &v40[32 * v39];
          uint64_t v11 = v41 + 32;
          v102 = v14;
          uint64_t v103 = v41 + 32;
          v104 = v10;
          if (!v9) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v42 = &v40[32 * v37];
          do
          {
            long long v43 = *((_OWORD *)v11 - 1);
            uint64_t v14 = v42 - 32;
            *((_OWORD *)v42 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v42 - 1) = v43;
            v11 -= 32;
            v42 -= 32;
          }
          while (v11 != v9);
          uint64_t v10 = &v40[32 * v39];
          uint64_t v11 = v41 + 32;
          v102 = v14;
          uint64_t v103 = v41 + 32;
          v104 = v10;
          if (!v9)
          {
LABEL_7:
            uint64_t v103 = v11;
            uint64_t v9 = v14;
            goto LABEL_8;
          }
        }
        operator delete(v9);
        goto LABEL_7;
      }
LABEL_8:
      if (++v13 != v8) {
        continue;
      }
      break;
    }
    if (++v12 != v7) {
      continue;
    }
    break;
  }
LABEL_62:
  sub_24C6A3014(&v97, (uint64_t)v110);
  *uint64_t v91 = 0;
  v91[1] = 0;
  v91[2] = 0;
  uint64_t v44 = (char *)v102;
  sub_24C6A313C((uint64_t)v91, (v11 - (unsigned char *)v102) >> 5);
  if (v44 != v11)
  {
    uint64_t v49 = v44 + 16;
    do
    {
      if (v101 != 4)
      {
        unint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v90, "Invalid number of indices provided.");
        __cxa_throw(v90, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      std::string::size_type v52 = v49 - 16;
      uint64_t v53 = *((void *)v99 + 1);
      uint64_t v54 = *((void *)v49 - 2) * *((void *)v99 + 2) + *((void *)v49 - 1) * *((void *)v99 + 3);
      float v55 = *(float *)(v98 + 4 * (v54 + v53));
      float v56 = *(float *)(v98 + 4 * v54);
      if (v55 <= 1.0) {
        float v57 = *(float *)(v98 + 4 * (v54 + v53));
      }
      else {
        float v57 = 1.0;
      }
      if (v55 >= 0.0) {
        float v58 = v57;
      }
      else {
        float v58 = 0.0;
      }
      if (v56 <= 1.0) {
        float v59 = *(float *)(v98 + 4 * v54);
      }
      else {
        float v59 = 1.0;
      }
      uint64_t v60 = 2 * v53;
      uint64_t v61 = v54 + 3 * v53;
      float v62 = *(float *)(v98 + 4 * v61);
      uint64_t v63 = v54 + v60;
      float v64 = *(float *)(v98 + 4 * v63);
      if (v56 >= 0.0) {
        float v65 = v59;
      }
      else {
        float v65 = 0.0;
      }
      if (v62 <= 1.0) {
        float v66 = *(float *)(v98 + 4 * v61);
      }
      else {
        float v66 = 1.0;
      }
      if (v62 < v58) {
        float v66 = v58;
      }
      if (v64 <= 1.0) {
        float v67 = *(float *)(v98 + 4 * v63);
      }
      else {
        float v67 = 1.0;
      }
      if (v64 < v65) {
        float v67 = v65;
      }
      if (vabds_f32(v66, v58) < 0.000001 && vabds_f32(v67, v65) < 0.000001) {
        goto LABEL_66;
      }
      *(void *)&long long v93 = __PAIR64__(LODWORD(v65), LODWORD(v58));
      *((float *)&v93 + 2) = v66 - v58;
      *((float *)&v93 + 3) = v67 - v65;
      int v94 = *(_DWORD *)v49;
      size_t v68 = objc_msgSend_labels(v92, v45, v46, v47, v48, v91);
      objc_msgSend_objectAtIndexedSubscript_(v68, v69, *((void *)v49 + 1), v70, v71);
      id v72 = objc_claimAutoreleasedReturnValue();
      uint64_t v77 = (const char *)objc_msgSend_UTF8String(v72, v73, v74, v75, v76);
      size_t v78 = strlen(v77);
      if (v78 >= 0x7FFFFFFFFFFFFFF8) {
        sub_24C6673C8();
      }
      size_t v79 = v78;
      if (v78 >= 0x17)
      {
        uint64_t v83 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17) {
          uint64_t v83 = v78 | 7;
        }
        uint64_t v84 = v83 + 1;
        p_p = (long long *)operator new(v83 + 1);
        *((void *)&__p + 1) = v79;
        unint64_t v96 = v84 | 0x8000000000000000;
        *(void *)&long long __p = p_p;
      }
      else
      {
        HIBYTE(v96) = v78;
        p_p = &__p;
        if (!v78)
        {
          LOBYTE(__p) = 0;
          unint64_t v81 = v91;
          unint64_t v82 = (unint64_t)v91[1];
          if (v82 >= (unint64_t)v91[2]) {
            goto LABEL_101;
          }
          goto LABEL_64;
        }
      }
      memmove(p_p, v77, v79);
      *((unsigned char *)p_p + v79) = 0;
      unint64_t v81 = v91;
      unint64_t v82 = (unint64_t)v91[1];
      if (v82 >= (unint64_t)v91[2])
      {
LABEL_101:
        unint64_t v85 = sub_24C6A3F14(v81, (uint64_t)&v93);
        int v86 = SHIBYTE(v96);
        v81[1] = v85;
        if (v86 < 0) {
          operator delete((void *)__p);
        }
        goto LABEL_65;
      }
LABEL_64:
      long long v50 = v93;
      *(_DWORD *)(v82 + 16) = v94;
      *(_OWORD *)unint64_t v82 = v50;
      long long v51 = __p;
      *(void *)(v82 + 40) = v96;
      *(_OWORD *)(v82 + 24) = v51;
      unint64_t v96 = 0;
      long long __p = 0uLL;
      v81[1] = (void *)(v82 + 48);
LABEL_65:

LABEL_66:
      v49 += 32;
    }
    while (v52 + 32 != v11);
  }
  long long v97 = off_26FEDD970;
  if (v99)
  {
    uint64_t v100 = v99;
    operator delete(v99);
  }
  if (v102) {
    operator delete(v102);
  }

  uint64_t v105 = off_26FEDD970;
  if (v107)
  {
    unint64_t v108 = v107;
    operator delete(v107);
  }
  v110[0] = &unk_26FEDD950;
  unint64_t v87 = v113;
  if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  if (v111)
  {
    int64_t v112 = v111;
    operator delete(v111);
  }
  v114[0] = &unk_26FEDD950;
  v88 = v117;
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
}

void sub_24C6A2ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_24C66BFF0(a9);
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }

  if (a31) {
    operator delete(a31);
  }
  sub_24C66EA3C(&a35);
  sub_24C66EA3C((void *)(v35 - 176));
  _Unwind_Resume(a1);
}

void sub_24C6A3014(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 40) + 32))(__p);
  sub_24C67C4BC(a1, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24C6A3104(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A3118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_24C6A313C(uint64_t a1, unint64_t a2)
{
  long long v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x555555555555556) {
    sub_24C667470();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 48 * a2;
  uint64_t v6 = (char *)operator new(48 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 3);
    *((_DWORD *)v9 - 8) = *((_DWORD *)v4 - 8);
    *((_OWORD *)v9 - 3) = v10;
    long long v11 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - 24) = v11;
    v9 -= 48;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 6;
  }
  while (v4 != v2);
  uint64_t v12 = *(void ***)a1;
  long long v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    do
    {
      if (*((char *)v2 - 1) < 0) {
        operator delete(*(v2 - 3));
      }
      v2 -= 6;
    }
    while (v2 != v12);
    long long v2 = v12;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

char *sub_24C6A3278@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *((void *)result + 1);
  if (*(void *)result != v3)
  {
    uint64_t v4 = *(void *)result + 24;
    do
    {
      while (1)
      {
        uint64_t v14 = (long long *)v4;
        uint64_t v6 = sub_24C6A5FDC((uint64_t **)a2, (const void **)v4, (uint64_t)&unk_24C72FF38, &v14);
        uint64_t v7 = v6;
        uint64_t v8 = (long long *)(v4 - 24);
        uint64_t v9 = v6[8];
        if (v9 < v6[9]) {
          break;
        }
        __n128 result = sub_24C6A40A0((char **)v6 + 7, (uint64_t)v8);
        v7[8] = (uint64_t *)result;
        uint64_t v5 = v4 + 24;
        v4 += 48;
        if (v5 == v3) {
          return result;
        }
      }
      long long v10 = *v8;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(v4 - 8);
      *(_OWORD *)uint64_t v9 = v10;
      long long v11 = v9 + 3;
      if (*(char *)(v4 + 23) < 0)
      {
        sub_24C66E0A8(v11, *(void **)v4, *(void *)(v4 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v4;
        v9[5] = *(void *)(v4 + 16);
        *(_OWORD *)long long v11 = v12;
      }
      __n128 result = (char *)(v9 + 6);
      v7[8] = v9 + 6;
      v7[8] = v9 + 6;
      uint64_t v13 = v4 + 24;
      v4 += 48;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_24C6A3378(_Unwind_Exception *a1)
{
  *(void *)(v2 + 64) = v3;
  sub_24C6A5F04(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C6A3394(_Unwind_Exception *a1)
{
  sub_24C6A5F04(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C6A33AC(char *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  sub_24C6A3278(a1, (uint64_t)&v54);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = (char *)v54;
  if (v54 != v55)
  {
    double v6 = a3;
    do
    {
      unint64_t v7 = *((void *)v5 + 7);
      uint64_t v8 = (_OWORD *)*((void *)v5 + 8);
      if ((_OWORD *)v7 != v8)
      {
        sub_24C6A429C(v7, v8, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 4)), 1);
        uint64_t v10 = *((void *)v5 + 7);
        uint64_t v9 = *((void *)v5 + 8);
        long long __p = 0;
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        uint64_t v11 = v9 - v10;
        if (v11)
        {
          if (v11 < 0) {
            sub_24C667470();
          }
          unint64_t v12 = v11 / 48;
          unint64_t v13 = ((unint64_t)(v11 / 48 - 1) >> 6) + 1;
          long long __p = operator new(8 * v13);
          uint64_t v52 = 0;
          unint64_t v53 = v13;
          sub_24C6A5A70(&__p, v12, 0);
          unint64_t v14 = 0;
          if (v12 <= 1) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v12;
          }
          do
          {
            if ((*(void *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14))
            {
              unint64_t v16 = v14 + 1;
            }
            else
            {
              uint64_t v17 = *((void *)v5 + 7);
              float v18 = (long long *)(v17 + 48 * v14);
              unint64_t v19 = *(void *)(a2 + 8);
              if (v19 >= *(void *)(a2 + 16))
              {
                *(void *)(a2 + 8) = sub_24C6A40A0((char **)a2, v17 + 48 * v14);
                unint64_t v16 = v14 + 1;
                if (v14 + 1 < v12) {
                  goto LABEL_20;
                }
              }
              else
              {
                long long v20 = *v18;
                *(_DWORD *)(v19 + 16) = *((_DWORD *)v18 + 4);
                *(_OWORD *)unint64_t v19 = v20;
                float v21 = (unsigned char *)(v19 + 24);
                unint64_t v22 = (void **)(v17 + 48 * v14 + 24);
                if (*((char *)v18 + 47) < 0)
                {
                  sub_24C66E0A8(v21, *v22, *(void *)(v17 + 48 * v14 + 32));
                }
                else
                {
                  long long v23 = *(_OWORD *)v22;
                  *(void *)(v19 + 40) = *(void *)(v17 + 48 * v14 + 40);
                  *(_OWORD *)float v21 = v23;
                }
                *(void *)(a2 + 8) = v19 + 48;
                *(void *)(a2 + 8) = v19 + 48;
                unint64_t v16 = v14 + 1;
                if (v14 + 1 < v12)
                {
LABEL_20:
                  float v24 = __p;
                  uint64_t v25 = 48 * v14;
                  for (unint64_t i = v16; v12 != i; ++i)
                  {
                    uint64_t v27 = v24[i >> 6];
                    if ((v27 & (1 << i)) == 0)
                    {
                      uint64_t v28 = *((void *)v5 + 7);
                      uint64_t v29 = v28 + v25;
                      float v30 = *(float *)(v28 + v25 + 56);
                      if (v30 > 0.0)
                      {
                        float v31 = *(float *)(v29 + 60);
                        if (v31 > 0.0)
                        {
                          float v32 = *((float *)v18 + 2);
                          if (v32 > 0.0)
                          {
                            float v33 = *((float *)v18 + 3);
                            if (v33 > 0.0)
                            {
                              float v34 = *(float *)(v29 + 48);
                              float v35 = *(float *)v18;
                              float v36 = v32 + *(float *)v18;
                              if (v34 < v36)
                              {
                                float v37 = v30 + v34;
                                if (v35 < (float)(v30 + v34))
                                {
                                  float v38 = *(float *)(v28 + v25 + 52);
                                  float v39 = *((float *)v18 + 1);
                                  if (v38 < (float)(v33 + v39) && v39 < (float)(v31 + v38))
                                  {
                                    float v40 = v36 - v34;
                                    float v41 = v37 - v35;
                                    if (v32 >= v30) {
                                      float v42 = *(float *)(v28 + v25 + 56);
                                    }
                                    else {
                                      float v42 = *((float *)v18 + 2);
                                    }
                                    if (v41 < v40) {
                                      float v40 = v41;
                                    }
                                    if (v42 < v40) {
                                      float v40 = v42;
                                    }
                                    float v43 = vabds_f32(v39, v31 + v38);
                                    float v44 = vabds_f32(v38, v33 + v39);
                                    if (v33 >= v31) {
                                      float v45 = *(float *)(v29 + 60);
                                    }
                                    else {
                                      float v45 = *((float *)v18 + 3);
                                    }
                                    if (v44 < v43) {
                                      float v43 = v44;
                                    }
                                    if (v45 < v43) {
                                      float v43 = v45;
                                    }
                                    float v46 = v40 * v43;
                                    float v47 = (float)((float)(v30 * v31) + (float)(v32 * v33)) - v46;
                                    if (v47 != 0.0)
                                    {
                                      if (v46 / v47 <= v6) {
                                        goto LABEL_21;
                                      }
LABEL_47:
                                      v24[i >> 6] = v27 | (1 << i);
                                      goto LABEL_21;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (v6 < 0.0) {
                        goto LABEL_47;
                      }
                    }
LABEL_21:
                    v25 += 48;
                  }
                }
              }
            }
            unint64_t v14 = v16;
          }
          while (v16 != v15);
          if (__p) {
            operator delete(__p);
          }
        }
      }
      uint64_t v48 = (char *)*((void *)v5 + 1);
      if (v48)
      {
        do
        {
          uint64_t v49 = (char **)v48;
          uint64_t v48 = *(char **)v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          uint64_t v49 = (char **)*((void *)v5 + 2);
          BOOL v50 = *v49 == v5;
          uint64_t v5 = (char *)v49;
        }
        while (!v50);
      }
      uint64_t v5 = (char *)v49;
    }
    while (v49 != v55);
  }
  sub_24C6A5F04((uint64_t)&v54, v55[0]);
}

void sub_24C6A3744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_24C66BFF0(v13);
  sub_24C6A5F04((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

id sub_24C6A3788(void *a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v4 = *a1 + 24;
    do
    {
      uint64_t v5 = v4 - 24;
      double v6 = *(float *)(v4 - 24);
      double v7 = *(float *)(v4 - 20);
      double v8 = *(float *)(v4 - 16);
      double v9 = *(float *)(v4 - 12);
      v27.origin.x = v6;
      v27.origin.y = v7;
      v27.size.width = v8;
      v27.size.height = v9;
      if (!CGRectIsEmpty(v27))
      {
        unint64_t v13 = [CSUObjectDetectionResult alloc];
        uint64_t v14 = v4;
        if (*(char *)(v4 + 23) < 0) {
          uint64_t v14 = *(void *)v4;
        }
        int v15 = *(_DWORD *)(v4 - 8);
        unint64_t v16 = objc_msgSend_stringWithUTF8String_(NSString, v10, v14, v11, v12);
        LODWORD(v17) = v15;
        float v21 = objc_msgSend_initWithCGRect_score_label_(v13, v18, (uint64_t)v16, v19, v20, v6, v7, v8, v9, v17);

        objc_msgSend_addObject_(v2, v22, (uint64_t)v21, v23, v24);
      }
      v4 += 48;
    }
    while (v5 + 48 != v3);
  }
  return v2;
}

void sub_24C6A38CC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24C6A38E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A38F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A3908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A3918(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_24C6A3964(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_24C6A3A44(a1 + 24, (uint64_t)a2 + 24);
  id v5 = *((id *)a2 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  double v7 = (unsigned char *)*((void *)a2 + 9);
  double v6 = (unsigned char *)*((void *)a2 + 10);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_24C667470();
    }
    double v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 88) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 80) = v10;
  }
  return a1;
}

void sub_24C6A3A18(_Unwind_Exception *a1)
{
  id v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }

  sub_24C6A3918(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A3A44(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_24C670C90(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    sub_24C6A3B88(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_24C6A3B60(_Unwind_Exception *a1)
{
  sub_24C6A3918(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A3B74(_Unwind_Exception *a1)
{
  sub_24C6A3918(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6A3B88(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    float v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        float v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        float v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      float v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    float v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24C6A3E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A3EAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_24C6A3F14(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_24C667470();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_24C66DB48();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint8x8_t v8 = &v7[48 * v3];
  uint64_t v9 = &v7[48 * v6];
  *(_OWORD *)uint8x8_t v8 = *(_OWORD *)a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = v8 + 48;
  unint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *((_OWORD *)v12 - 3);
    *((_DWORD *)v8 - 8) = *((_DWORD *)v12 - 8);
    *((_OWORD *)v8 - 3) = v13;
    long long v14 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v14;
    v8 -= 48;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 48;
  }
  while (v12 != v11);
  float v15 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v15)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 48;
    }
    while (v12 != v15);
    uint64_t v12 = v15;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

char *sub_24C6A40A0(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_24C66DB48();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[48 * v5];
  float v18 = v10;
  BOOL v19 = v10;
  unint64_t v20 = &v9[48 * v8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  unint64_t v11 = v10 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_24C66E0A8(v11, *(void **)(a2 + 24), *(void *)(a2 + 32));
    unint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    uint64_t v10 = v18;
    uint64_t v12 = v19 + 48;
    if (v4 == *a1)
    {
LABEL_17:
      float v15 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)(a2 + 24);
    *((void *)v10 + 5) = *(void *)(a2 + 40);
    uint64_t v12 = v10 + 48;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v13 = *((_OWORD *)v4 - 3);
    *((_DWORD *)v10 - 8) = *((_DWORD *)v4 - 8);
    *((_OWORD *)v10 - 3) = v13;
    long long v14 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v14;
    v10 -= 48;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 48;
  }
  while (v4 != v3);
  float v15 = *a1;
  unint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v20;
  if (v3 == v15)
  {
    if (v3) {
LABEL_20:
    }
      operator delete(v3);
  }
  else
  {
    do
    {
      uint64_t v17 = v3 - 48;
      if (*(v3 - 1) < 0) {
        operator delete(*((void **)v3 - 3));
      }
      v3 -= 48;
    }
    while (v17 != v15);
    unint64_t v3 = v15;
    if (v15) {
      goto LABEL_20;
    }
  }
  return v12;
}

void sub_24C6A4288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6A3EAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6A429C(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v130 = a2 - 3;
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((float *)a2 - 8) > *(float *)(v9 + 16))
                {
                  int v157 = *(_DWORD *)(v9 + 16);
                  long long v149 = *(_OWORD *)v9;
                  uint64_t v65 = *(void *)(v9 + 24);
                  *(void *)&long long v138 = *(void *)(v9 + 32);
                  *(void *)((char *)&v138 + 7) = *(void *)(v9 + 39);
                  char v66 = *(unsigned char *)(v9 + 47);
                  *(void *)(v9 + 32) = 0;
                  *(void *)(v9 + 40) = 0;
                  *(void *)(v9 + 24) = 0;
                  long long v67 = *(a2 - 3);
                  *(_DWORD *)(v9 + 16) = *((_DWORD *)a2 - 8);
                  *(_OWORD *)unint64_t v9 = v67;
                  long long v68 = *(_OWORD *)((char *)a2 - 24);
                  *(void *)(v9 + 40) = *((void *)a2 - 1);
                  *(_OWORD *)(v9 + 24) = v68;
                  *((_DWORD *)a2 - 8) = v157;
                  *(a2 - 3) = v149;
                  *((void *)a2 - 3) = v65;
                  *(void *)((char *)a2 - 9) = *(void *)((char *)&v138 + 7);
                  *((void *)a2 - 2) = v138;
                  *((unsigned char *)a2 - 1) = v66;
                }
                break;
              case 3uLL:
                sub_24C6A52D0(v9, v9 + 48, (uint64_t)v130);
                break;
              case 4uLL:
                sub_24C6A585C(v9, v9 + 48, v9 + 96, v130);
                break;
              case 5uLL:
                sub_24C6A501C(v9, v9 + 48, v9 + 96, v9 + 144, v130);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 1151)
          {
            std::string::size_type v69 = (_OWORD *)(v9 + 48);
            BOOL v71 = (_OWORD *)v9 == a2 || v69 == a2;
            if (a4)
            {
              if (!v71)
              {
                uint64_t v72 = 0;
                unint64_t v73 = v9;
                do
                {
                  uint64_t v74 = v69;
                  float v75 = *(float *)(v73 + 64);
                  if (v75 > *(float *)(v73 + 16))
                  {
                    long long v150 = *v69;
                    *(void *)&v139[7] = *(void *)(v73 + 87);
                    uint64_t v76 = *(void *)(v73 + 72);
                    *(void *)uint64_t v139 = *(void *)(v73 + 80);
                    char v77 = *(unsigned char *)(v73 + 95);
                    *(void *)(v73 + 80) = 0;
                    *(void *)(v73 + 88) = 0;
                    *(void *)(v73 + 72) = 0;
                    int v78 = *((char *)v69 + 47);
                    *((_DWORD *)v74 + 4) = *(_DWORD *)(v73 + 16);
                    _OWORD *v74 = *(_OWORD *)v73;
                    size_t v79 = (void **)v74 + 3;
                    if (v78 < 0) {
                      operator delete(*v79);
                    }
                    id v80 = (void *)(v73 + 24);
                    *(_OWORD *)size_t v79 = *(_OWORD *)(v73 + 24);
                    *((void *)v74 + 5) = *(void *)(v73 + 40);
                    *(unsigned char *)(v73 + 47) = 0;
                    *(unsigned char *)(v73 + 24) = 0;
                    if (v73 == a1)
                    {
                      unint64_t v73 = a1;
                    }
                    else if (v75 > *(float *)(v73 - 32))
                    {
                      uint64_t v81 = v72;
                      do
                      {
                        uint64_t v82 = a1 + v81;
                        *(_OWORD *)uint64_t v82 = *(_OWORD *)(a1 + v81 - 48);
                        *(_DWORD *)(v82 + 16) = *(_DWORD *)(a1 + v81 - 32);
                        *(_OWORD *)(v82 + 24) = *(_OWORD *)(a1 + v81 - 24);
                        *(void *)(v82 + 40) = *(void *)(a1 + v81 - 8);
                        *(unsigned char *)(v82 - 1) = 0;
                        *(unsigned char *)(v82 - 24) = 0;
                        v81 -= 48;
                        if (!v81)
                        {
                          unint64_t v73 = a1;
                          goto LABEL_95;
                        }
                      }
                      while (v75 > *(float *)(v82 - 80));
                      unint64_t v73 = a1 + v81;
LABEL_95:
                      id v80 = (void *)(v82 - 24);
                    }
                    *(_OWORD *)unint64_t v73 = v150;
                    *(float *)(v73 + 16) = v75;
                    *id v80 = v76;
                    *(void *)(v73 + 32) = *(void *)v139;
                    *(void *)(v73 + 39) = *(void *)&v139[7];
                    *(unsigned char *)(v73 + 47) = v77;
                  }
                  std::string::size_type v69 = v74 + 3;
                  v72 += 48;
                  unint64_t v73 = (unint64_t)v74;
                }
                while (v74 + 3 != a2);
              }
            }
            else if (!v71)
            {
              unint64_t v120 = v9 - 80;
              do
              {
                unint64_t v122 = (unint64_t)v69;
                float v123 = *(float *)(a1 + 64);
                if (v123 > *(float *)(a1 + 16))
                {
                  long long v153 = *v69;
                  *(void *)&v142[7] = *(void *)(a1 + 87);
                  uint64_t v124 = *(void *)(a1 + 72);
                  *(void *)v142 = *(void *)(a1 + 80);
                  char v125 = *(unsigned char *)(a1 + 95);
                  *(void *)(a1 + 80) = 0;
                  *(void *)(a1 + 88) = 0;
                  *(void *)(a1 + 72) = 0;
                  int v126 = *((char *)v69 + 47);
                  *(_DWORD *)(v122 + 16) = *(_DWORD *)(a1 + 16);
                  *(_OWORD *)unint64_t v122 = *(_OWORD *)a1;
                  uint64_t v127 = (void **)(v122 + 24);
                  if (v126 < 0) {
                    operator delete(*v127);
                  }
                  *(_OWORD *)uint64_t v127 = *(_OWORD *)(a1 + 24);
                  *(void *)(v122 + 40) = *(void *)(a1 + 40);
                  *(unsigned char *)(a1 + 47) = 0;
                  *(unsigned char *)(a1 + 24) = 0;
                  if (v123 > *(float *)(a1 - 32))
                  {
                    unint64_t v128 = v120;
                    do
                    {
                      *(_OWORD *)(v128 + 80) = *(_OWORD *)(v128 + 32);
                      *(_DWORD *)(v128 + 96) = *(_DWORD *)(v128 + 48);
                      *(_OWORD *)(v128 + 104) = *(_OWORD *)(v128 + 56);
                      *(void *)(v128 + 120) = *(void *)(v128 + 72);
                      *(unsigned char *)(v128 + 79) = 0;
                      *(unsigned char *)(v128 + 56) = 0;
                      float v129 = *(float *)v128;
                      v128 -= 48;
                    }
                    while (v123 > v129);
                    uint64_t v121 = (void *)(v128 + 104);
                    a1 = v128 + 80;
                  }
                  else
                  {
                    uint64_t v121 = (void *)(a1 + 24);
                  }
                  *(_OWORD *)a1 = v153;
                  *(float *)(a1 + 16) = v123;
                  *uint64_t v121 = v124;
                  *(void *)(a1 + 32) = *(void *)v142;
                  *(void *)(a1 + 39) = *(void *)&v142[7];
                  *(unsigned char *)(a1 + 47) = v125;
                }
                std::string::size_type v69 = (_OWORD *)(v122 + 48);
                v120 += 48;
                a1 = v122;
              }
              while ((_OWORD *)(v122 + 48) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v9 != a2)
            {
              int64_t v83 = (v11 - 2) >> 1;
              int64_t v84 = v83;
              do
              {
                if (v83 >= v84)
                {
                  uint64_t v86 = (2 * v84) | 1;
                  unint64_t v87 = v9 + 48 * v86;
                  if (2 * v84 + 2 < (uint64_t)v11 && *(float *)(v87 + 16) > *(float *)(v87 + 64))
                  {
                    v87 += 48;
                    uint64_t v86 = 2 * v84 + 2;
                  }
                  unint64_t v88 = v9 + 48 * v84;
                  float v89 = *(float *)(v88 + 16);
                  if (*(float *)(v87 + 16) <= v89)
                  {
                    long long v151 = *(_OWORD *)v88;
                    unint64_t v90 = (void *)(v9 + 48 * v84);
                    uint64_t v91 = v90[3];
                    *(void *)&v140[7] = *(void *)((char *)v90 + 39);
                    *(void *)uint64_t v140 = v90[4];
                    char v92 = *(unsigned char *)(v88 + 47);
                    v90[3] = 0;
                    v90[4] = 0;
                    v90[5] = 0;
                    do
                    {
                      unint64_t v93 = v88;
                      unint64_t v88 = v87;
                      long long v94 = *(_OWORD *)v87;
                      *(_DWORD *)(v93 + 16) = *(_DWORD *)(v87 + 16);
                      *(_OWORD *)unint64_t v93 = v94;
                      long long v95 = *(_OWORD *)(v87 + 24);
                      *(void *)(v93 + 40) = *(void *)(v87 + 40);
                      *(_OWORD *)(v93 + 24) = v95;
                      *(unsigned char *)(v87 + 47) = 0;
                      *(unsigned char *)(v87 + 24) = 0;
                      if (v83 < v86) {
                        break;
                      }
                      uint64_t v96 = 2 * v86;
                      uint64_t v86 = (2 * v86) | 1;
                      unint64_t v87 = v9 + 48 * v86;
                      uint64_t v97 = v96 + 2;
                      if (v97 < (uint64_t)v11 && *(float *)(v87 + 16) > *(float *)(v87 + 64))
                      {
                        v87 += 48;
                        uint64_t v86 = v97;
                      }
                    }
                    while (*(float *)(v87 + 16) <= v89);
                    *(_OWORD *)unint64_t v88 = v151;
                    *(float *)(v88 + 16) = v89;
                    *(void *)(v88 + 24) = v91;
                    *(void *)(v88 + 32) = *(void *)v140;
                    *(void *)(v88 + 39) = *(void *)&v140[7];
                    *(unsigned char *)(v88 + 47) = v92;
                  }
                }
                BOOL v85 = v84-- <= 0;
              }
              while (!v85);
              int64_t v98 = v10 / 0x30uLL;
              do
              {
                uint64_t v99 = 0;
                uint64_t v100 = a2;
                int v158 = *(_DWORD *)(v9 + 16);
                long long v152 = *(_OWORD *)v9;
                uint64_t v101 = *(void *)(v9 + 24);
                *(void *)uint64_t v134 = *(void *)(v9 + 32);
                *(void *)&v134[7] = *(void *)(v9 + 39);
                char v102 = *(unsigned char *)(v9 + 47);
                *(void *)(v9 + 32) = 0;
                *(void *)(v9 + 40) = 0;
                unint64_t v103 = v9;
                *(void *)(v9 + 24) = 0;
                do
                {
                  unint64_t v106 = v103;
                  v103 += 48 * v99 + 48;
                  uint64_t v107 = 2 * v99;
                  uint64_t v99 = (2 * v99) | 1;
                  int64_t v108 = v107 + 2;
                  if (v108 < v98 && *(float *)(v103 + 16) > *(float *)(v103 + 64))
                  {
                    v103 += 48;
                    uint64_t v99 = v108;
                  }
                  long long v104 = *(_OWORD *)v103;
                  *(_DWORD *)(v106 + 16) = *(_DWORD *)(v103 + 16);
                  *(_OWORD *)unint64_t v106 = v104;
                  long long v105 = *(_OWORD *)(v103 + 24);
                  *(void *)(v106 + 40) = *(void *)(v103 + 40);
                  *(_OWORD *)(v106 + 24) = v105;
                  *(unsigned char *)(v103 + 47) = 0;
                  *(unsigned char *)(v103 + 24) = 0;
                }
                while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
                a2 -= 3;
                if ((_OWORD *)v103 == v100 - 3)
                {
                  *(_OWORD *)unint64_t v103 = v152;
                  *(_DWORD *)(v103 + 16) = v158;
                  *(void *)(v103 + 24) = v101;
                  *(void *)(v103 + 32) = *(void *)v134;
                  *(void *)(v103 + 39) = *(void *)&v134[7];
                  *(unsigned char *)(v103 + 47) = v102;
                }
                else
                {
                  long long v109 = *a2;
                  *(_DWORD *)(v103 + 16) = *((_DWORD *)v100 - 8);
                  *(_OWORD *)unint64_t v103 = v109;
                  long long v110 = *(_OWORD *)((char *)v100 - 24);
                  *(void *)(v103 + 40) = *((void *)v100 - 1);
                  *(_OWORD *)(v103 + 24) = v110;
                  *a2 = v152;
                  *((_DWORD *)v100 - 8) = v158;
                  *((void *)v100 - 3) = v101;
                  *(void *)((char *)v100 - 9) = *(void *)&v134[7];
                  *((void *)v100 - 2) = *(void *)v134;
                  *((unsigned char *)v100 - 1) = v102;
                  uint64_t v111 = v103 - v9 + 48;
                  if (v111 >= 49)
                  {
                    unint64_t v112 = (v111 / 0x30uLL - 2) >> 1;
                    unint64_t v113 = v9 + 48 * v112;
                    float v114 = *(float *)(v103 + 16);
                    if (*(float *)(v113 + 16) > v114)
                    {
                      long long v141 = *(_OWORD *)v103;
                      uint64_t v115 = *(void *)(v103 + 24);
                      *(void *)&v145[7] = *(void *)(v103 + 39);
                      *(void *)long long v145 = *(void *)(v103 + 32);
                      char v116 = *(unsigned char *)(v103 + 47);
                      *(void *)(v103 + 24) = 0;
                      *(void *)(v103 + 32) = 0;
                      *(void *)(v103 + 40) = 0;
                      do
                      {
                        unint64_t v117 = v103;
                        unint64_t v103 = v113;
                        long long v118 = *(_OWORD *)v113;
                        *(_DWORD *)(v117 + 16) = *(_DWORD *)(v113 + 16);
                        *(_OWORD *)unint64_t v117 = v118;
                        long long v119 = *(_OWORD *)(v113 + 24);
                        *(void *)(v117 + 40) = *(void *)(v113 + 40);
                        *(_OWORD *)(v117 + 24) = v119;
                        *(unsigned char *)(v113 + 47) = 0;
                        *(unsigned char *)(v113 + 24) = 0;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        unint64_t v113 = v9 + 48 * v112;
                      }
                      while (*(float *)(v113 + 16) > v114);
                      *(_OWORD *)unint64_t v103 = v141;
                      *(float *)(v103 + 16) = v114;
                      *(void *)(v103 + 24) = v115;
                      *(void *)(v103 + 32) = *(void *)v145;
                      *(void *)(v103 + 39) = *(void *)&v145[7];
                      *(unsigned char *)(v103 + 47) = v116;
                    }
                  }
                }
                BOOL v85 = v98-- <= 2;
              }
              while (!v85);
            }
            return;
          }
          unint64_t v12 = v11 >> 1;
          uint64_t v13 = v9 + 48 * (v11 >> 1);
          if ((unint64_t)v10 >= 0x1801)
          {
            sub_24C6A52D0(a1, a1 + 48 * (v11 >> 1), (uint64_t)v130);
            uint64_t v14 = 48 * v12;
            float v15 = (void *)(a1 + v14);
            sub_24C6A52D0(a1 + 48, a1 + v14 - 48, (uint64_t)(a2 - 6));
            sub_24C6A52D0(a1 + 96, a1 + 48 + v14, (uint64_t)(a2 - 9));
            sub_24C6A52D0(a1 + v14 - 48, v13, a1 + 48 + v14);
            int v154 = *(_DWORD *)(a1 + 16);
            long long v146 = *(_OWORD *)a1;
            *(void *)((char *)&v135 + 7) = *(void *)(a1 + 39);
            uint64_t v16 = *(void *)(a1 + 24);
            *(void *)&long long v135 = *(void *)(a1 + 32);
            char v17 = *(unsigned char *)(a1 + 47);
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 24) = 0;
            long long v18 = *(_OWORD *)v13;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 + 16);
            *(_OWORD *)a1 = v18;
            uint64_t v19 = *(void *)(a1 + v14 + 40);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + v14 + 24);
            *(void *)(a1 + 40) = v19;
            *(_DWORD *)(v13 + 16) = v154;
            *(_OWORD *)uint64_t v13 = v146;
            v15[3] = v16;
            *(void *)((char *)v15 + 39) = *(void *)((char *)&v135 + 7);
            void v15[4] = v135;
            *(unsigned char *)(v13 + 47) = v17;
            --a3;
            if (a4) {
              goto LABEL_15;
            }
          }
          else
          {
            sub_24C6A52D0(a1 + 48 * (v11 >> 1), a1, (uint64_t)v130);
            --a3;
            if (a4)
            {
LABEL_15:
              float v20 = *(float *)(a1 + 16);
              break;
            }
          }
          float v20 = *(float *)(a1 + 16);
          if (*(float *)(a1 - 32) > v20) {
            break;
          }
          long long v136 = *(_OWORD *)a1;
          float v21 = *(float *)(a1 + 16);
          unint64_t v22 = (void **)(a1 + 24);
          uint64_t v23 = *(void *)(a1 + 24);
          *(void *)uint64_t v132 = *(void *)(a1 + 32);
          *(void *)&v132[7] = *(void *)(a1 + 39);
          char v24 = *(unsigned char *)(a1 + 47);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          if (v21 <= *((float *)a2 - 8))
          {
            unint64_t v50 = a1 + 48;
            do
            {
              unint64_t v9 = v50;
              if (v50 >= (unint64_t)a2) {
                break;
              }
              float v51 = *(float *)(v50 + 16);
              v50 += 48;
            }
            while (v21 <= v51);
          }
          else
          {
            unint64_t v25 = a1;
            do
            {
              unint64_t v9 = v25 + 48;
              float v26 = *(float *)(v25 + 64);
              v25 += 48;
            }
            while (v21 <= v26);
          }
          uint64_t v52 = (float *)a2;
          if (v9 < (unint64_t)a2)
          {
            unint64_t v53 = (float *)a2;
            do
            {
              uint64_t v52 = v53 - 12;
              float v54 = *(v53 - 8);
              v53 -= 12;
            }
            while (v21 > v54);
          }
          while (v9 < (unint64_t)v52)
          {
            int v156 = *(_DWORD *)(v9 + 16);
            long long v148 = *(_OWORD *)v9;
            uint64_t v55 = *(void *)(v9 + 24);
            *(void *)&long long v144 = *(void *)(v9 + 32);
            *(void *)((char *)&v144 + 7) = *(void *)(v9 + 39);
            char v56 = *(unsigned char *)(v9 + 47);
            *(void *)(v9 + 32) = 0;
            *(void *)(v9 + 40) = 0;
            *(void *)(v9 + 24) = 0;
            long long v57 = *(_OWORD *)v52;
            *(float *)(v9 + 16) = v52[4];
            *(_OWORD *)unint64_t v9 = v57;
            long long v58 = *(_OWORD *)(v52 + 6);
            *(void *)(v9 + 40) = *((void *)v52 + 5);
            *(_OWORD *)(v9 + 24) = v58;
            *((_DWORD *)v52 + 4) = v156;
            *(_OWORD *)uint64_t v52 = v148;
            *((void *)v52 + 3) = v55;
            *((void *)v52 + 4) = v144;
            *(void *)((char *)v52 + 39) = *(void *)((char *)&v144 + 7);
            *((unsigned char *)v52 + 47) = v56;
            do
            {
              float v59 = *(float *)(v9 + 64);
              v9 += 48;
            }
            while (v21 <= v59);
            do
            {
              float v60 = *(v52 - 8);
              v52 -= 12;
            }
            while (v21 > v60);
          }
          uint64_t v61 = (long long *)(v9 - 48);
          BOOL v4 = v9 - 48 >= a1;
          BOOL v5 = v9 - 48 == a1;
          if (v9 - 48 == a1)
          {
            int v64 = *(char *)(v9 - 1);
            *(_OWORD *)a1 = v136;
            *(float *)(v9 - 32) = v21;
            if (v64 < 0) {
              operator delete(*(void **)(v9 - 24));
            }
          }
          else
          {
            long long v62 = *v61;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 - 32);
            *(_OWORD *)a1 = v62;
            if (*(char *)(a1 + 47) < 0) {
              operator delete(*v22);
            }
            long long v63 = *(_OWORD *)(v9 - 24);
            *(void *)(a1 + 40) = *(void *)(v9 - 8);
            *(_OWORD *)unint64_t v22 = v63;
            *(unsigned char *)(v9 - 1) = 0;
            *(unsigned char *)(v9 - 24) = 0;
            *uint64_t v61 = v136;
            *(float *)(v9 - 32) = v21;
          }
          a4 = 0;
          *(void *)(v9 - 24) = v23;
          *(void *)(v9 - 9) = *(void *)&v132[7];
          *(void *)(v9 - 16) = *(void *)v132;
          *(unsigned char *)(v9 - 1) = v24;
        }
        uint64_t v27 = 0;
        long long v137 = *(_OWORD *)a1;
        uint64_t v28 = (void **)(a1 + 24);
        uint64_t v29 = *(void *)(a1 + 24);
        *(void *)unint64_t v133 = *(void *)(a1 + 32);
        *(void *)&v133[7] = *(void *)(a1 + 39);
        char v30 = *(unsigned char *)(a1 + 47);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        do
        {
          float v31 = *(float *)(a1 + v27 + 64);
          v27 += 48;
        }
        while (v31 > v20);
        unint64_t v32 = a1 + v27;
        float v33 = (float *)a2;
        if (v27 == 48)
        {
          float v36 = (float *)a2;
          while (v32 < (unint64_t)v36)
          {
            float v34 = v36 - 12;
            float v37 = *(v36 - 8);
            v36 -= 12;
            if (v37 > v20) {
              goto LABEL_24;
            }
          }
          float v34 = v36;
          unint64_t v9 = v32;
        }
        else
        {
          do
          {
            float v34 = v33 - 12;
            float v35 = *(v33 - 8);
            v33 -= 12;
          }
          while (v35 <= v20);
LABEL_24:
          unint64_t v9 = v32;
          if (v32 < (unint64_t)v34)
          {
            unint64_t v38 = (unint64_t)v34;
            do
            {
              int v155 = *(_DWORD *)(v9 + 16);
              long long v147 = *(_OWORD *)v9;
              uint64_t v39 = *(void *)(v9 + 24);
              *(void *)&long long v143 = *(void *)(v9 + 32);
              *(void *)((char *)&v143 + 7) = *(void *)(v9 + 39);
              char v40 = *(unsigned char *)(v9 + 47);
              *(void *)(v9 + 32) = 0;
              *(void *)(v9 + 40) = 0;
              *(void *)(v9 + 24) = 0;
              long long v41 = *(_OWORD *)v38;
              *(_DWORD *)(v9 + 16) = *(_DWORD *)(v38 + 16);
              *(_OWORD *)unint64_t v9 = v41;
              long long v42 = *(_OWORD *)(v38 + 24);
              *(void *)(v9 + 40) = *(void *)(v38 + 40);
              *(_OWORD *)(v9 + 24) = v42;
              *(_DWORD *)(v38 + 16) = v155;
              *(_OWORD *)unint64_t v38 = v147;
              *(void *)(v38 + 24) = v39;
              *(void *)(v38 + 32) = v143;
              *(void *)(v38 + 39) = *(void *)((char *)&v143 + 7);
              *(unsigned char *)(v38 + 47) = v40;
              do
              {
                float v43 = *(float *)(v9 + 64);
                v9 += 48;
              }
              while (v43 > v20);
              do
              {
                float v44 = *(float *)(v38 - 32);
                v38 -= 48;
              }
              while (v44 <= v20);
            }
            while (v9 < v38);
          }
        }
        float v45 = (long long *)(v9 - 48);
        if (v9 - 48 == a1)
        {
          int v48 = *(char *)(v9 - 1);
          *(_OWORD *)a1 = v137;
          *(float *)(v9 - 32) = v20;
          if (v48 < 0) {
            operator delete(*(void **)(v9 - 24));
          }
        }
        else
        {
          long long v46 = *v45;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 - 32);
          *(_OWORD *)a1 = v46;
          if (*(char *)(a1 + 47) < 0) {
            operator delete(*v28);
          }
          long long v47 = *(_OWORD *)(v9 - 24);
          *(void *)(a1 + 40) = *(void *)(v9 - 8);
          *(_OWORD *)uint64_t v28 = v47;
          *(unsigned char *)(v9 - 1) = 0;
          *(unsigned char *)(v9 - 24) = 0;
          *float v45 = v137;
          *(float *)(v9 - 32) = v20;
        }
        *(void *)(v9 - 24) = v29;
        *(void *)(v9 - 9) = *(void *)&v133[7];
        *(void *)(v9 - 16) = *(void *)v133;
        *(unsigned char *)(v9 - 1) = v30;
        if (v32 >= (unint64_t)v34) {
          break;
        }
LABEL_39:
        sub_24C6A429C(a1, v9 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v49 = sub_24C6A559C(a1, v9 - 48);
      if (sub_24C6A559C(v9, (uint64_t)a2)) {
        break;
      }
      if (!v49) {
        goto LABEL_39;
      }
    }
    a2 = (_OWORD *)(v9 - 48);
    if (!v49) {
      continue;
    }
    break;
  }
}

void sub_24C6A501C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  sub_24C6A585C(a1, a2, a3, (long long *)a4);
  if (*((float *)a5 + 4) > *(float *)(a4 + 16))
  {
    long long v30 = *(_OWORD *)a4;
    int v34 = *(_DWORD *)(a4 + 16);
    uint64_t v10 = *(void *)(a4 + 24);
    *(void *)&long long v26 = *(void *)(a4 + 32);
    *(void *)((char *)&v26 + 7) = *(void *)(a4 + 39);
    char v11 = *(unsigned char *)(a4 + 47);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 32) = 0;
    long long v12 = *a5;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *(_OWORD *)a4 = v12;
    uint64_t v13 = *((void *)a5 + 5);
    *(_OWORD *)(a4 + 24) = *(long long *)((char *)a5 + 24);
    *(void *)(a4 + 40) = v13;
    *a5 = v30;
    *((_DWORD *)a5 + 4) = v34;
    *((void *)a5 + 3) = v10;
    *((void *)a5 + 4) = v26;
    *(void *)((char *)a5 + 39) = *(void *)((char *)&v26 + 7);
    *((unsigned char *)a5 + 47) = v11;
    if (*(float *)(a4 + 16) > *(float *)(a3 + 16))
    {
      long long v31 = *(_OWORD *)a3;
      int v35 = *(_DWORD *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      *(void *)&long long v27 = *(void *)(a3 + 32);
      *(void *)((char *)&v27 + 7) = *(void *)(a3 + 39);
      char v15 = *(unsigned char *)(a3 + 47);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 32) = 0;
      long long v16 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = v16;
      uint64_t v17 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 40) = v17;
      *(_OWORD *)a4 = v31;
      *(_DWORD *)(a4 + 16) = v35;
      *(void *)(a4 + 24) = v14;
      *(void *)(a4 + 32) = v27;
      *(void *)(a4 + 39) = *(void *)((char *)&v27 + 7);
      *(unsigned char *)(a4 + 47) = v15;
      if (*(float *)(a3 + 16) > *(float *)(a2 + 16))
      {
        long long v32 = *(_OWORD *)a2;
        int v36 = *(_DWORD *)(a2 + 16);
        uint64_t v18 = *(void *)(a2 + 24);
        *(void *)&long long v28 = *(void *)(a2 + 32);
        *(void *)((char *)&v28 + 7) = *(void *)(a2 + 39);
        char v19 = *(unsigned char *)(a2 + 47);
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 32) = 0;
        long long v20 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = v20;
        uint64_t v21 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 40) = v21;
        *(_OWORD *)a3 = v32;
        *(_DWORD *)(a3 + 16) = v36;
        *(void *)(a3 + 24) = v18;
        *(void *)(a3 + 32) = v28;
        *(void *)(a3 + 39) = *(void *)((char *)&v28 + 7);
        *(unsigned char *)(a3 + 47) = v19;
        if (*(float *)(a2 + 16) > *(float *)(a1 + 16))
        {
          long long v33 = *(_OWORD *)a1;
          int v37 = *(_DWORD *)(a1 + 16);
          uint64_t v22 = *(void *)(a1 + 24);
          *(void *)&long long v29 = *(void *)(a1 + 32);
          *(void *)((char *)&v29 + 7) = *(void *)(a1 + 39);
          char v23 = *(unsigned char *)(a1 + 47);
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 24) = 0;
          long long v24 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = v24;
          uint64_t v25 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = v25;
          *(_OWORD *)a2 = v33;
          *(_DWORD *)(a2 + 16) = v37;
          *(void *)(a2 + 24) = v22;
          *(void *)(a2 + 32) = v29;
          *(void *)(a2 + 39) = *(void *)((char *)&v29 + 7);
          *(unsigned char *)(a2 + 47) = v23;
        }
      }
    }
  }
}

__n128 sub_24C6A52D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u32[0] = *(_DWORD *)(a2 + 16);
  float v4 = *(float *)(a3 + 16);
  if (result.n128_f32[0] <= *(float *)(a1 + 16))
  {
    if (v4 > result.n128_f32[0])
    {
      __n128 v28 = *(__n128 *)a2;
      int v32 = *(_DWORD *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)&long long v24 = *(void *)(a2 + 32);
      *(void *)((char *)&v24 + 7) = *(void *)(a2 + 39);
      char v12 = *(unsigned char *)(a2 + 47);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 32) = 0;
      __n128 v13 = *(__n128 *)a3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(__n128 *)a2 = v13;
      uint64_t v14 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v14;
      __n128 result = v28;
      *(__n128 *)a3 = v28;
      *(_DWORD *)(a3 + 16) = v32;
      *(void *)(a3 + 24) = v11;
      *(void *)(a3 + 32) = v24;
      *(void *)(a3 + 39) = *(void *)((char *)&v24 + 7);
      *(unsigned char *)(a3 + 47) = v12;
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      if (result.n128_f32[0] > *(float *)(a1 + 16))
      {
        __n128 v29 = *(__n128 *)a1;
        int v33 = *(_DWORD *)(a1 + 16);
        uint64_t v15 = *(void *)(a1 + 24);
        *(void *)&long long v25 = *(void *)(a1 + 32);
        *(void *)((char *)&v25 + 7) = *(void *)(a1 + 39);
        char v16 = *(unsigned char *)(a1 + 47);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        __n128 v17 = *(__n128 *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(__n128 *)a1 = v17;
        uint64_t v18 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = v18;
        __n128 result = v29;
        *(__n128 *)a2 = v29;
        *(_DWORD *)(a2 + 16) = v33;
        *(void *)(a2 + 24) = v15;
        *(void *)(a2 + 32) = v25;
        *(void *)(a2 + 39) = *(void *)((char *)&v25 + 7);
        *(unsigned char *)(a2 + 47) = v16;
      }
    }
  }
  else
  {
    BOOL v5 = (void *)(a1 + 24);
    unint64_t v6 = (void *)(a1 + 32);
    if (v4 <= result.n128_f32[0])
    {
      __n128 v30 = *(__n128 *)a1;
      int v34 = *(_DWORD *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)&long long v26 = *v6;
      *(void *)((char *)&v26 + 7) = *(void *)(a1 + 39);
      char v8 = *(unsigned char *)(a1 + 47);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      void *v5 = 0;
      __n128 v19 = *(__n128 *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(__n128 *)a1 = v19;
      uint64_t v20 = *(void *)(a2 + 40);
      *(_OWORD *)BOOL v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = v20;
      __n128 result = v30;
      *(__n128 *)a2 = v30;
      *(_DWORD *)(a2 + 16) = v34;
      *(void *)(a2 + 24) = v7;
      *(void *)(a2 + 32) = v26;
      *(void *)(a2 + 39) = *(void *)((char *)&v26 + 7);
      *(unsigned char *)(a2 + 47) = v8;
      result.n128_u32[0] = *(_DWORD *)(a3 + 16);
      if (result.n128_f32[0] <= *(float *)(a2 + 16)) {
        return result;
      }
      __n128 v27 = *(__n128 *)a2;
      int v31 = *(_DWORD *)(a2 + 16);
      *(void *)char v23 = *(void *)(a2 + 32);
      *(void *)&v23[7] = *(void *)(a2 + 39);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 24) = 0;
      int v21 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v21;
      uint64_t v22 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v22;
    }
    else
    {
      __n128 v27 = *(__n128 *)a1;
      int v31 = *(_DWORD *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)char v23 = *v6;
      *(void *)&v23[7] = *(void *)(a1 + 39);
      char v8 = *(unsigned char *)(a1 + 47);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      void *v5 = 0;
      __n128 v9 = *(__n128 *)a3;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 16);
      *(__n128 *)a1 = v9;
      uint64_t v10 = *(void *)(a3 + 40);
      *(_OWORD *)BOOL v5 = *(_OWORD *)(a3 + 24);
      *(void *)(a1 + 40) = v10;
    }
    __n128 result = v27;
    *(__n128 *)a3 = v27;
    *(_DWORD *)(a3 + 16) = v31;
    *(void *)(a3 + 24) = v7;
    *(void *)(a3 + 32) = *(void *)v23;
    *(void *)(a3 + 39) = *(void *)&v23[7];
    *(unsigned char *)(a3 + 47) = v8;
  }
  return result;
}

BOOL sub_24C6A559C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 32) > *(float *)(a1 + 16))
      {
        long long v22 = *(_OWORD *)a1;
        int v24 = *(_DWORD *)(a1 + 16);
        uint64_t v6 = *(void *)(a1 + 24);
        *(void *)&long long v20 = *(void *)(a1 + 32);
        *(void *)((char *)&v20 + 7) = *(void *)(a1 + 39);
        char v7 = *(unsigned char *)(a1 + 47);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        long long v8 = *(_OWORD *)(a2 - 48);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 32);
        *(_OWORD *)a1 = v8;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 40) = v9;
        *(_OWORD *)(a2 - 48) = v22;
        *(_DWORD *)(a2 - 32) = v24;
        *(void *)(a2 - 24) = v6;
        *(void *)(a2 - 16) = v20;
        *(void *)(a2 - 9) = *(void *)((char *)&v20 + 7);
        *(unsigned char *)(a2 - 1) = v7;
      }
      return result;
    case 3uLL:
      sub_24C6A52D0(a1, a1 + 48, a2 - 48);
      return 1;
    case 4uLL:
      sub_24C6A585C(a1, a1 + 48, a1 + 96, (long long *)(a2 - 48));
      return 1;
    case 5uLL:
      sub_24C6A501C(a1, a1 + 48, a1 + 96, a1 + 144, (long long *)(a2 - 48));
      return 1;
    default:
      uint64_t v10 = a1 + 96;
      sub_24C6A52D0(a1, a1 + 48, a1 + 96);
      uint64_t v11 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v15 = *(float *)(v11 + 16);
    if (v15 > *(float *)(v10 + 16))
    {
      long long v23 = *(_OWORD *)v11;
      uint64_t v16 = *(void *)(v11 + 24);
      *(void *)int v21 = *(void *)(v11 + 32);
      *(void *)&v21[7] = *(void *)(v11 + 39);
      char v17 = *(unsigned char *)(v11 + 47);
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0;
      uint64_t v18 = v12;
      *(void *)(v11 + 24) = 0;
      do
      {
        uint64_t v19 = a1 + v18;
        *(_OWORD *)(v19 + 144) = *(_OWORD *)(a1 + v18 + 96);
        *(_DWORD *)(v19 + 160) = *(_DWORD *)(a1 + v18 + 112);
        *(_OWORD *)(v19 + 168) = *(_OWORD *)(a1 + v18 + 120);
        *(void *)(v19 + 184) = *(void *)(a1 + v18 + 136);
        *(unsigned char *)(v19 + 143) = 0;
        *(unsigned char *)(v19 + 120) = 0;
        if (v18 == -96)
        {
          uint64_t v14 = a1;
          goto LABEL_7;
        }
        v18 -= 48;
      }
      while (v15 > *(float *)(v19 + 64));
      uint64_t v14 = a1 + v18 + 144;
LABEL_7:
      *(_OWORD *)uint64_t v14 = v23;
      *(float *)(v14 + 16) = v15;
      *(void *)(v19 + 120) = v16;
      *(void *)(v14 + 32) = *(void *)v21;
      *(void *)(v14 + 39) = *(void *)&v21[7];
      *(unsigned char *)(v14 + 47) = v17;
      if (++v13 == 8) {
        return v11 + 48 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 48;
    v11 += 48;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_24C6A585C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_24C6A52D0(a1, a2, a3);
  if (*((float *)a4 + 4) > *(float *)(a3 + 16))
  {
    long long v23 = *(_OWORD *)a3;
    int v26 = *(_DWORD *)(a3 + 16);
    uint64_t v8 = *(void *)(a3 + 24);
    *(void *)&long long v20 = *(void *)(a3 + 32);
    *(void *)((char *)&v20 + 7) = *(void *)(a3 + 39);
    char v9 = *(unsigned char *)(a3 + 47);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 32) = 0;
    long long v10 = *a4;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = v10;
    uint64_t v11 = *((void *)a4 + 5);
    *(_OWORD *)(a3 + 24) = *(long long *)((char *)a4 + 24);
    *(void *)(a3 + 40) = v11;
    *a4 = v23;
    *((_DWORD *)a4 + 4) = v26;
    *((void *)a4 + 3) = v8;
    *((void *)a4 + 4) = v20;
    *(void *)((char *)a4 + 39) = *(void *)((char *)&v20 + 7);
    *((unsigned char *)a4 + 47) = v9;
    if (*(float *)(a3 + 16) > *(float *)(a2 + 16))
    {
      long long v24 = *(_OWORD *)a2;
      int v27 = *(_DWORD *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)&long long v21 = *(void *)(a2 + 32);
      *(void *)((char *)&v21 + 7) = *(void *)(a2 + 39);
      char v13 = *(unsigned char *)(a2 + 47);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 32) = 0;
      long long v14 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = v14;
      uint64_t v15 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v15;
      *(_OWORD *)a3 = v24;
      *(_DWORD *)(a3 + 16) = v27;
      *(void *)(a3 + 24) = v12;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      *(unsigned char *)(a3 + 47) = v13;
      if (*(float *)(a2 + 16) > *(float *)(a1 + 16))
      {
        long long v25 = *(_OWORD *)a1;
        int v28 = *(_DWORD *)(a1 + 16);
        uint64_t v16 = *(void *)(a1 + 24);
        *(void *)&long long v22 = *(void *)(a1 + 32);
        *(void *)((char *)&v22 + 7) = *(void *)(a1 + 39);
        char v17 = *(unsigned char *)(a1 + 47);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        long long v18 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = v18;
        uint64_t v19 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = v19;
        *(_OWORD *)a2 = v25;
        *(_DWORD *)(a2 + 16) = v28;
        *(void *)(a2 + 24) = v16;
        *(void *)(a2 + 32) = v22;
        *(void *)(a2 + 39) = *(void *)((char *)&v22 + 7);
        *(unsigned char *)(a2 + 47) = v17;
      }
    }
  }
}

void sub_24C6A5A70(void *a1, unint64_t a2, int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    char v7 = (void *)(*a1 + 8 * (v4 >> 6));
    int v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v9 = (64 - v8);
        if (v9 >= a2) {
          unint64_t v10 = a2;
        }
        else {
          unint64_t v10 = v9;
        }
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        unint64_t v3 = a2 - v10;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        memset(v7, 255, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v13 = (64 - v8);
        if (v13 >= a2) {
          unint64_t v14 = a2;
        }
        else {
          unint64_t v14 = v13;
        }
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        unint64_t v3 = a2 - v14;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        bzero(v7, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

void *sub_24C6A5BD8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      void *v15 = *v19;
LABEL_61:
      void *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C6A5EF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A5F04(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_24C6A5F04(a1, *(void *)a2);
    sub_24C6A5F04(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 7);
    if (v4)
    {
      uint64_t v5 = *((void *)a2 + 8);
      unint64_t v6 = (void *)*((void *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 48;
        }
        while (v5 != v4);
        unint64_t v6 = (void *)*((void *)a2 + 7);
      }
      *((void *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v7 = a2;
    }
    else
    {
      unint64_t v7 = a2;
    }
    operator delete(v7);
  }
}

uint64_t **sub_24C6A5FDC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      uint8x8_t v9 = a2;
    }
    else {
      uint8x8_t v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v11 = (uint64_t **)v6;
      unint64_t v14 = (const void *)v6[4];
      unint64_t v12 = v6 + 4;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        float v16 = v12;
      }
      else {
        float v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        unint64_t v6 = v11[1];
        if (!v6)
        {
          unint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        unint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v11 = a1 + 1;
LABEL_29:
  unint64_t v21 = operator new(0x50uLL);
  unint64_t v22 = v21 + 4;
  long long v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v22, *(void **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)unint64_t v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  void *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *unint64_t v7 = v21;
  uint8x8_t v25 = (uint64_t *)**a1;
  uint64_t v26 = v21;
  if (v25)
  {
    *a1 = v25;
    uint64_t v26 = *v7;
  }
  sub_24C681E28(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_24C6A615C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A623C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A63A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A63F4()
{
  JUMPOUT(0x24C6A6400);
}

void sub_24C6A641C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6548(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24C6A668C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A6FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24C6A75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A79E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24C6A7EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C6A81A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C6A86FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A87EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint8x8_t v9 = objc_msgSend_localeIdentifier(a2, v5, v6, v7, v8);
  unint64_t v14 = objc_msgSend_localeIdentifier(v4, v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_compare_(v9, v15, (uint64_t)v14, v16, v17);

  return v18;
}

void sub_24C6A885C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24C6A8880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A890C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A8920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A89AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A89C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6A8A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A8A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24C6A8B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A8C0C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(unsigned char *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(unsigned char *)(a1 + 55) = 4;
  strcpy((char *)(a1 + 32), "</s>");
  *(_DWORD *)(a1 + 56) = 1802401084;
  uint8x8_t v9 = (void **)(a1 + 56);
  *(unsigned char *)(a1 + 79) = 5;
  *(_WORD *)(a1 + 60) = 62;
  *(void *)a1 = &unk_26FEDD1E0;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v10 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  if (a1 + 96 != a2)
  {
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
    sub_24C6A98A8((void *)(a1 + 96), *(uint64_t **)(a2 + 16), 0);
  }
  *(_DWORD *)(a1 + 80) = a3;
  uint64_t v18 = (_DWORD *)(a1 + 80);
  uint64_t v11 = sub_24C6AA05C(v10, (unsigned int *)(a1 + 80), (uint64_t)&unk_24C72FF38, &v18);
  if (*((char *)v11 + 47) < 0)
  {
    v11[4] = 0;
    uint64_t v12 = (unsigned char *)v11[3];
  }
  else
  {
    uint64_t v12 = v11 + 3;
    *((unsigned char *)v11 + 47) = 0;
  }
  unsigned char *v12 = 0;
  *(_DWORD *)(a1 + 84) = a4;
  uint64_t v18 = (_DWORD *)(a1 + 84);
  uint64_t v13 = sub_24C6AA05C(v10, (unsigned int *)(a1 + 84), (uint64_t)&unk_24C72FF38, &v18);
  if ((*((char *)v13 + 47) & 0x80000000) == 0)
  {
    *((unsigned char *)v13 + 47) = 0;
    *((unsigned char *)v13 + 24) = 0;
    *(_DWORD *)(a1 + 88) = a5;
    unint64_t v14 = (_DWORD *)(a1 + 88);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v13[4] = 0;
  *(unsigned char *)v13[3] = 0;
  *(_DWORD *)(a1 + 88) = a5;
  unint64_t v14 = (_DWORD *)(a1 + 88);
  if (*(char *)(a1 + 79) < 0) {
LABEL_8:
  }
    operator delete(*v9);
LABEL_9:
  strcpy((char *)(a1 + 56), "UNK");
  *(unsigned char *)(a1 + 79) = 3;
  uint64_t v18 = v14;
  int v15 = sub_24C6AA05C(v10, v14, (uint64_t)&unk_24C72FF38, &v18);
  if (*((char *)v15 + 47) < 0)
  {
    void v15[4] = 3;
    uint64_t v16 = (_DWORD *)v15[3];
  }
  else
  {
    uint64_t v16 = v15 + 3;
    *((unsigned char *)v15 + 47) = 3;
  }
  _DWORD *v16 = 4935253;
  return a1;
}

void sub_24C6A8E14(_Unwind_Exception *a1)
{
  sub_24C6800E8(v2);
  sub_24C692B74(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6A8E34@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6 = a2;
  BOOL result = (void *)(*(uint64_t (**)(void *))(*a1 + 80))(a1);
  if ((unint64_t)result <= v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::to_string(&v21, a2);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v19 = &v21;
    }
    else {
      int v19 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
    }
    sub_24C693C50((uint64_t)exception, v19, size);
    __cxa_throw(exception, (struct type_info *)&unk_26FEDBF78, (void (*)(void *))sub_24C692EC4);
  }
  int8x8_t v8 = (int8x8_t)a1[13];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (*(void *)&v8 <= v6) {
        unint64_t v10 = v6 % *(void *)&v8;
      }
    }
    else
    {
      unint64_t v10 = (v8.i32[0] - 1) & v6;
    }
    uint64_t v11 = *(uint64_t **)(a1[12] + 8 * v10);
    if (v11)
    {
      uint64_t v11 = (uint64_t *)*v11;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v8 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == v6)
            {
              if (*((_DWORD *)v11 + 4) == a2) {
                goto LABEL_23;
              }
            }
            else if ((v14 & v12) != v10)
            {
              goto LABEL_22;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v6)
          {
            if (*((_DWORD *)v11 + 4) == a2) {
              break;
            }
          }
          else
          {
            if (v13 >= *(void *)&v8) {
              v13 %= *(void *)&v8;
            }
            if (v13 != v10) {
              goto LABEL_22;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
LABEL_22:
    uint64_t v11 = 0;
  }
LABEL_23:
  if (*((char *)v11 + 47) < 0)
  {
    uint64_t v16 = (void *)v11[3];
    unint64_t v17 = v11[4];
    return sub_24C66E0A8((unsigned char *)a3, v16, v17);
  }
  else
  {
    long long v15 = *(_OWORD *)(v11 + 3);
    *(void *)(a3 + 16) = v11[5];
    *(_OWORD *)a3 = v15;
  }
  return result;
}

void sub_24C6A9018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C6A9054(uint64_t a1, void *__s1, size_t __n)
{
  v22[0] = __s1;
  v22[1] = __n;
  if (*(char *)(a1 + 55) < 0)
  {
    unint64_t v6 = *(const void **)(a1 + 32);
    if (__n != *(void *)(a1 + 40)) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v6 = (const void *)(a1 + 32);
    if (__n != *(unsigned __int8 *)(a1 + 55)) {
      goto LABEL_6;
    }
  }
  uint64_t result = memcmp(__s1, v6, __n);
  if (!result) {
    return result;
  }
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
  {
    int8x8_t v8 = *(const void **)(a1 + 8);
    if (__n != *(void *)(a1 + 16)) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t result = memcmp(__s1, v8, __n);
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  int8x8_t v8 = (const void *)(a1 + 8);
  if (__n == *(unsigned __int8 *)(a1 + 31)) {
    goto LABEL_10;
  }
LABEL_11:
  uint8x8_t v9 = *(uint64_t **)(a1 + 112);
  if (!v9)
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v21, "Did not find ID for token ");
    sub_24C6A92E0(v19, (uint64_t)v22);
    if ((v20 & 0x80u) == 0) {
      long long v15 = (const std::string::value_type *)v19;
    }
    else {
      long long v15 = (const std::string::value_type *)v19[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v16 = v20;
    }
    else {
      std::string::size_type v16 = v19[1];
    }
    unint64_t v17 = std::string::append(&v21, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  while (1)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 4);
    if (*((char *)v9 + 47) < 0)
    {
      sub_24C66E0A8(&__p.__r_.__value_.__s.__data_[8], (void *)v9[3], v9[4]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(v9 + 3);
      uint64_t v24 = v9[5];
    }
    std::string::size_type v10 = HIBYTE(v24);
    int v11 = SHIBYTE(v24);
    if (v24 < 0) {
      std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
    }
    if (v10 != __n)
    {
      BOOL v13 = 0;
      if ((SHIBYTE(v24) & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_24:
      operator delete((void *)__p.__r_.__value_.__l.__size_);
      goto LABEL_25;
    }
    if (v24 >= 0) {
      p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
    }
    else {
      p_std::string::size_type size = (std::string::size_type *)__p.__r_.__value_.__l.__size_;
    }
    BOOL v13 = memcmp(__s1, p_size, __n) == 0;
    if (v11 < 0) {
      goto LABEL_24;
    }
LABEL_25:
    if (v13) {
      return *((unsigned int *)v9 + 4);
    }
    uint8x8_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
}

void sub_24C6A924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if (a20 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if (a20 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v28);
    goto LABEL_10;
  }
LABEL_8:
  if (!v29) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void *sub_24C6A92E0(void *__dst, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  id v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *std::string __dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((unsigned char *)v5 + v3) = 0;
  return __dst;
}

void sub_24C6A938C()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24C6A93E0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_26FEDBF60, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_24C6A93CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_24C6A93E0(std::logic_error *a1)
{
  uint64_t result = std::logic_error::logic_error(a1, "Function not yet implemented");
  result->__vftable = (std::logic_error_vtbl *)&unk_26FEDD2C0;
  return result;
}

void sub_24C6A9420()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24C6A93E0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_26FEDBF60, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_24C6A9460(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A9474()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24C6A93E0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_26FEDBF60, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_24C6A94B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6A94C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 23) = 0;
  *(unsigned char *)a3 = 0;
  uint64_t v5 = *a2;
  if (a2[1] - *a2 != 4)
  {
    unint64_t v10 = 0;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)a1 + 40))(&v15, a1, *(unsigned int *)(v5 + 4 * v10));
      int v11 = std::string::append(&v15, " ", 1uLL);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t v17 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (v17 >= 0) {
        BOOL v13 = __p;
      }
      else {
        BOOL v13 = (void **)__p[0];
      }
      if (v17 >= 0) {
        std::string::size_type v14 = HIBYTE(v17);
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)a3, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v17) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_22;
        }
      }
      else if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_22:
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      ++v10;
      uint64_t v5 = *a2;
      unint64_t v6 = ((a2[1] - *a2) >> 2) - 1;
      if (v10 >= v6) {
        goto LABEL_3;
      }
    }
  }
  unint64_t v6 = 0;
LABEL_3:
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 40))(__p, a1, *(unsigned int *)(v5 + 4 * v6));
  if (v17 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v17 >= 0) {
    std::string::size_type v8 = HIBYTE(v17);
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a3, (const std::string::value_type *)v7, v8);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_24C6A9674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6A96DC(uint64_t a1)
{
  sub_24C6A975C(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6A9714(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_24C6A971C()
{
  return 1;
}

void sub_24C6A9724(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6A975C(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD1E0;
  uint64_t v2 = *(void ***)(a1 + 112);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  size_t v3 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    operator delete(v3);
  }
  *(void *)a1 = &unk_26FEDD250;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_24C6A9854(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      size_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_24C6A98A8(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_21;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  std::string::size_type v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      if (v8 != a2)
      {
        uint8x8_t v9 = (void **)(v8 + 3);
        char v10 = *((unsigned char *)a2 + 47);
        if (*((char *)v8 + 47) < 0)
        {
          if (v10 >= 0) {
            long long v12 = a2 + 3;
          }
          else {
            long long v12 = (void *)a2[3];
          }
          if (v10 >= 0) {
            size_t v13 = *((unsigned __int8 *)a2 + 47);
          }
          else {
            size_t v13 = a2[4];
          }
          sub_24C67E33C(v9, v12, v13);
        }
        else if ((*((unsigned char *)a2 + 47) & 0x80) != 0)
        {
          sub_24C67E274(v9, (void *)a2[3], a2[4]);
        }
        else
        {
          long long v11 = *(_OWORD *)(a2 + 3);
          v8[5] = a2[5];
          *(_OWORD *)uint8x8_t v9 = v11;
        }
      }
      std::string::size_type v14 = (uint64_t *)*v8;
      sub_24C6A9A04(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      std::string::size_type v8 = v14;
      if (!v14) {
        goto LABEL_21;
      }
    }
    do
    {
      std::string v15 = (uint64_t *)*v8;
      if (*((char *)v8 + 47) < 0) {
        operator delete((void *)v8[3]);
      }
      operator delete(v8);
      std::string::size_type v8 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_21:
    while (a2 != a3)
    {
      sub_24C6A9F8C(a1, (int *)a2 + 4);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_24C6A99D4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_24C6A9854(v1, v2);
  __cxa_rethrow();
}

void sub_24C6A99F0(_Unwind_Exception *a1)
{
}

unsigned int *sub_24C6A9A04(void *a1, unsigned int *a2)
{
  uint64_t v5 = (int *)(a2 + 4);
  unint64_t v4 = a2[4];
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_24C6A9B2C((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v6;
  *uint64_t v6 = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_24C6A9B2C(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        sub_24C6A9DB8(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(uint64_t **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      int v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  uint8x8_t v25 = *(uint64_t **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  int v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    uint8x8_t v25 = (uint64_t *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_24C6A9DB8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_24C66DB48();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *float v7 = v20;
              uint64_t v22 = 8 * v19;
              void *v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          int v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            std::string::size_type v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                std::string::size_type v14 = (void *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *float v7 = v14;
              uint64_t v16 = 8 * v13;
              void *v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned int *sub_24C6A9F8C(void *a1, int *a2)
{
  unint64_t v4 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 4) = *a2;
  uint64_t v6 = v4 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    sub_24C66E0A8(v6, *((void **)a2 + 1), *((void *)a2 + 2));
    unsigned int v5 = *((_DWORD *)v4 + 4);
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(a2 + 2);
    *((void *)v4 + 5) = *((void *)a2 + 3);
  }
  *((void *)v4 + 1) = v5;
  return sub_24C6A9A04(a1, (unsigned int *)v4);
}

void sub_24C6AA034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C681118((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6AA048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C681118((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_24C6AA05C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  std::string::size_type v14 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint8x8_t v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    *uint64_t v11 = *v25;
LABEL_59:
    void *v25 = v11;
    goto LABEL_60;
  }
  *uint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    unint64_t v26 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint8x8_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24C6AA360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C681118((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6AA444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA45C(_Unwind_Exception *a1)
{
  size_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24C6AA504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AA9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AAD20(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24C6AAD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AB02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a12 + 48))(a12);
  sub_24C669A38(&a9);
  _Unwind_Resume(a1);
}

void sub_24C6AB078(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_24C669A24(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6AB3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a16 + 48))(a16);
  sub_24C669A38(&a13);

  _Unwind_Resume(a1);
}

void sub_24C6AB46C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_24C669A24(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C6AB684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AB68C()
{
  JUMPOUT(0x24C6AB6F8);
}

void sub_24C6AB694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6AB69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    sub_24C66DAC0();
  }
  (*(void (**)(uint64_t))(*(void *)a12 + 48))(a12);
  JUMPOUT(0x24C6AB6D4);
}

void sub_24C6AB6E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_24C669A24(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C6AB938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ABFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AC004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AC05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AC134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AC168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AC1DC()
{
}

void *sub_24C6AC1F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDBA78;
  result[1] = v3;
  return result;
}

uint64_t sub_24C6AC238(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDBA78;
  a2[1] = v2;
  return result;
}

void sub_24C6AC264(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForImage", "", v5, 2u);
  }
}

uint64_t sub_24C6AC2EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z69-[CSUImageCaptioner computeCaptionForImage:withDecodingMethod:error:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C6AC35C()
{
  return &unk_26FEDB848;
}

void sub_24C6AC36C()
{
}

void *sub_24C6AC380(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDBAD0;
  result[1] = v3;
  return result;
}

uint64_t sub_24C6AC3C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDBAD0;
  a2[1] = v2;
  return result;
}

void sub_24C6AC3F4(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForEmbeddingNSData", "", v5, 2u);
  }
}

uint64_t sub_24C6AC47C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73-[CSUImageCaptioner computeCaptionForEmbedding:withDecodingMethod:error:]E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_24C6AC4EC()
{
  return &unk_26FEDB858;
}

void sub_24C6AC4FC()
{
}

void *sub_24C6AC510(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FEDBB28;
  result[1] = v3;
  return result;
}

uint64_t sub_24C6AC558(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FEDBB28;
  a2[1] = v2;
  return result;
}

void sub_24C6AC584(uint64_t a1)
{
  uint64_t v2 = sub_24C69662C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_24C664000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSUComputeCaptionForEmbeddingCSUBuffer", "", v5, 2u);
  }
}

uint64_t sub_24C6AC60C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82-[CSUImageCaptioner computeCaptionForCSUBufferEmbedding:withDecodingMethod:error:]E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_24C6AC67C()
{
  return &unk_26FEDB868;
}

void sub_24C6AC688(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = (a2[1] - *a2) >> 2;
  sub_24C6ACD50(&v35, *(void **)a1, 0);
  sub_24C6ACD50(v34, *(void **)a1, *(void *)(a1 + 8));
  id v4 = v35;
  if (v35 == (id)v34[0]) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v5 = v37;
  do
  {
    if (v38 >= v5 || v38 + 1 >= v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Read beyond the end of taxonomy relations buffer!");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    unint64_t v7 = (unsigned __int16 *)(v36 + 2 * v38);
    unint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    sub_24C6ACB64((unint64_t *)&v39, v8);
    uint64_t v10 = *a2;
    if (v9)
    {
      uint64_t v11 = v7 + 2;
      uint64_t v12 = 2 * v9;
      double v13 = 0.0;
      do
      {
        sub_24C6ACB64((unint64_t *)&v39, *v11);
        uint64_t v14 = *v11;
        uint64_t v15 = *a2;
        float v16 = *(float *)(*a2 + 4 * v14);
        if (v16 > 1.0 || v16 < 0.0)
        {
          unint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v29, *(float *)(v15 + 4 * v14));
          sub_24C66A45C("Mathematical error during graphical model propagation: probability ", &v29, &v30);
          sub_24C66A5A0(" for node ", &v30, &v31);
          std::to_string(&v28, *v11);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint8x8_t v22 = &v28;
          }
          else {
            uint8x8_t v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
          }
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v28.__r_.__value_.__l.__size_;
          }
          uint64_t v24 = std::string::append(&v31, (const std::string::value_type *)v22, size);
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          sub_24C66A5A0(" is out of bounds!", &v32, &v33);
          std::runtime_error::runtime_error(v21, &v33);
          __cxa_throw(v21, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v17 = *(float *)(a1 + 16);
        float v18 = powf(v16, v17);
        double v13 = v13 - log(1.0 - v18);
        ++v11;
        v12 -= 2;
      }
      while (v12);
    }
    else
    {
      float v17 = *(float *)(a1 + 16);
      double v13 = 0.0;
    }
    long double v19 = exp(-v13);
    float v20 = fmin(pow(1.0 - v19, 1.0 / v17), 1.0);
    *(float *)(v10 + 4 * v8) = v20;
    if (v38 + 1 >= v37)
    {
      int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Read beyond the end of taxonomy relations buffer!");
      __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    v38 += *(unsigned __int16 *)(v36 + 2 * v38 + 2) + 2;
    id v4 = v35;
    if (v35 != (id)v34[0]) {
      goto LABEL_2;
    }
LABEL_3:
    unint64_t v5 = v37;
    BOOL v6 = v36 == v34[1] && v37 == v34[2];
  }
  while (!v6 || v38 != v34[3]);
}

void sub_24C6AC9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ACA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46)
{
  if (a45 < 0)
  {
    operator delete(a40);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a33);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_7:
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_16:

      _Unwind_Resume(a1);
    }
LABEL_15:
    __cxa_free_exception(v46);

    _Unwind_Resume(a1);
  }
LABEL_14:
  if (!v47) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

unint64_t *sub_24C6ACB64(unint64_t *result, unint64_t a2)
{
  if (*result <= a2)
  {
    unint64_t v3 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, *v3);
    sub_24C66A45C("Score vector provided to graphical model has capacity ", &v10, &v11);
    sub_24C66A5A0(" but there exists a node with index ", &v11, &v12);
    std::to_string(&v9, a2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v5 = &v9;
    }
    else {
      unint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    unint64_t v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C6ACC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_24C6ACD50(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *a1 = v5;
  id v6 = v5;
  a1[1] = objc_msgSend_bytes(v6, v7, v8, v9, v10);
  a1[2] = (unint64_t)objc_msgSend_length(v6, v11, v12, v13, v14) >> 1;
  a1[3] = a3;

  return a1;
}

void sub_24C6ACDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ACF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ACF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6ACF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AD0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AD160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AD1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AD2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AD378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6AD550(_Unwind_Exception *a1, int a2)
{
  sub_24C66DB7C((uint64_t)&v9);

  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v3);
  __cxa_end_catch();
  return v7;
}

uint64_t sub_24C6AD6C8(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x2532F8960](v3, 0x20C4093837F09);
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_24C6ADCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  sub_24C6717DC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6ADE54(uint64_t result, char *a2)
{
  if (result)
  {
    int v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_24C6698FC(&v10, a2);
    sub_24C66A45C("PixelBufferTransfer operation [", &v10, &v11);
    sub_24C66A5A0("] failed. Status = ", &v11, &v12);
    std::to_string(&v9, v2);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v5 = &v9;
    }
    else {
      id v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = std::string::append(&v12, (const std::string::value_type *)v5, size);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_24C6ADF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0)
  {
    operator delete(*(void **)(v34 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v32);
    goto LABEL_14;
  }
LABEL_12:
  if (!v33) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_24C6AE0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AE918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

id sub_24C6AEB90(void ***a1, void *a2)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  id v81 = a2;
  id v6 = objc_msgSend_objectForKeyedSubscript_(**a1, v3, (uint64_t)v81, v4, v5);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    std::string v10 = objc_msgSend_objectForKeyedSubscript_(**a1, v7, (uint64_t)v81, v8, v9);

    if (v10)
    {
      uint64_t v82 = objc_msgSend_array(MEMORY[0x263EFF980], v11, v12, v13, v14);
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      id obj = v10;
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v84, (uint64_t)v88, 16);
      if (v16)
      {
        uint64_t v17 = *(void *)v85;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v85 != v17) {
              objc_enumerationMutation(obj);
            }
            long double v19 = *(void **)(*((void *)&v84 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              float v20 = v19;
            }
            else {
              float v20 = 0;
            }
            id v21 = v20;
            long long v25 = v21;
            if (v21)
            {
              unint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v21, v22, @"replaceKey", v23, v24);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                std::string v30 = objc_msgSend_objectForKeyedSubscript_(v25, v27, @"replaceKey", v28, v29);
              }
              else
              {
                std::string v30 = 0;
              }

              uint64_t v34 = objc_msgSend_objectForKeyedSubscript_(v25, v31, @"replaceWith", v32, v33);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v25, v35, @"replaceWith", v36, v37);
              }
              else
              {
                unint64_t v38 = 0;
              }

              long long v42 = objc_msgSend_objectForKeyedSubscript_(v25, v39, @"replaceProb", v40, v41);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v46 = objc_msgSend_objectForKeyedSubscript_(v25, v43, @"replaceProb", v44, v45);
              }
              else
              {
                long long v46 = 0;
              }

              unint64_t v50 = objc_msgSend_objectForKeyedSubscript_(v25, v47, @"genderOption", v48, v49);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                float v54 = objc_msgSend_objectForKeyedSubscript_(v25, v51, @"genderOption", v52, v53);
              }
              else
              {
                float v54 = 0;
              }

              if (v30 && v38)
              {
                uint64_t v55 = [CSUCaptionRuntimeReplacements alloc];
                objc_msgSend_doubleValue(v46, v56, v57, v58, v59);
                uint64_t v61 = objc_msgSend_initWithKey_value_prob_genderOption_(v55, v60, (uint64_t)v30, (uint64_t)v38, (uint64_t)v54);
                objc_msgSend_addObject_(v82, v62, (uint64_t)v61, v63, v64);
              }
            }
          }
          uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v84, (uint64_t)v88, 16);
        }
        while (v16);
      }
      char v66 = v82;
      long long v67 = obj;
      long long v68 = obj;
      goto LABEL_36;
    }
  }
  else
  {
  }
  long long v67 = sub_24C69662C();
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG)) {
    sub_24C72A618((uint64_t)v81, v67, v69, v70, v71, v72, v73, v74);
  }
  long long v68 = 0;
  char v66 = 0;
LABEL_36:

  size_t v79 = objc_msgSend_copy(v66, v75, v76, v77, v78);
  return v79;
}

void sub_24C6AEF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24C6AF14C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_24C6AF32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6AF520(_Unwind_Exception *a1, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_24C6AF6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6AFC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_24C66EA3C(&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_24C66EA3C(&a26);

  _Unwind_Resume(a1);
}

void sub_24C6AFDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v40 = *(void *)(v38 - 192);
  if (!v40) {
    goto LABEL_13;
  }
  uint64_t v41 = *(void *)(v38 - 184);
  long long v42 = *(void **)(v38 - 192);
  if (v41 == v40) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v44 = *(std::__shared_weak_count **)(v41 - 8);
    if (v44)
    {
      if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    float v43 = *(void **)(v41 - 40);
    if (v43) {
      goto LABEL_5;
    }
LABEL_6:
    v41 -= 48;
    if (v41 == v40)
    {
      long long v42 = *(void **)(v38 - 192);
LABEL_12:
      *(void *)(v38 - 184) = v40;
      operator delete(v42);
LABEL_13:
      sub_24C66FC40((uint64_t)&a18);
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  float v43 = *(void **)(v41 - 40);
  if (!v43) {
    goto LABEL_6;
  }
LABEL_5:
  *(void *)(v41 - 32) = v43;
  operator delete(v43);
  goto LABEL_6;
}

void sub_24C6B0CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(char *)(v34 - 169) < 0) {
    operator delete(*(void **)(v34 - 192));
  }
  sub_24C66FC40((uint64_t)&a34);
  if (SHIBYTE(a27) < 0) {
    operator delete(a25);
  }

  sub_24C69B248((void **)&a20);
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_24C6B0E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B0EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B0FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (const void *)(a3 + 4);
  uint64_t v41 = 0;
  long long v42 = 0;
  float v43 = 0;
  int64_t v13 = a4 - (a3 + 4);
  if (a4 == a3 + 4)
  {
    uint64_t v14 = 0;
    if (a5) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v13 < 0) {
      sub_24C667470();
    }
    uint64_t v14 = (float *)operator new(a4 - (a3 + 4));
    uint64_t v41 = v14;
    float v43 = &v14[v13 >> 2];
    memcpy(v14, v12, v13);
    long long v42 = v43;
    if (a5)
    {
LABEL_4:
      objc_msgSend_nextTokensForInputs_KVCache_AndforMaskPosition_(a5, (const char *)a2, (uint64_t)&v41, a7, a6);
      uint64_t v14 = v41;
      if (!v41) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  memset(v40, 0, sizeof(v40));
  *(_OWORD *)uint64_t v39 = 0u;
  if (v14)
  {
LABEL_5:
    long long v42 = v14;
    operator delete(v14);
  }
LABEL_6:
  if (!BYTE8(v40[1]))
  {
    *(_OWORD *)a1 = *(_OWORD *)v39;
    *(void *)(a1 + 16) = *(void *)&v40[0];
    v39[0] = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v40 + 8);
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_49;
  }
  uint64_t v41 = 0;
  long long v42 = 0;
  float v43 = 0;
  int64_t v15 = (char *)v39[1] - (char *)v39[0];
  if (v39[1] == v39[0])
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    float v18 = *(void **)(a2 + 104);
    long double v19 = (void *)(a2 + 112);
    if (v18 == (void *)(a2 + 112)) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if (v15 < 0) {
    sub_24C667470();
  }
  uint64_t v16 = (float *)operator new((char *)v39[1] - (char *)v39[0]);
  uint64_t v17 = &v16[v15 >> 2];
  uint64_t v41 = v16;
  float v43 = v17;
  memcpy(v16, v39[0], v15);
  long long v42 = v17;
  float v18 = *(void **)(a2 + 104);
  long double v19 = (void *)(a2 + 112);
  if (v18 != (void *)(a2 + 112))
  {
    do
    {
LABEL_18:
      v16[*((unsigned int *)v18 + 7)] = 0.00000011921;
      float v20 = (void *)v18[1];
      if (v20)
      {
        do
        {
          id v21 = v20;
          float v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          id v21 = (void *)v18[2];
          BOOL v22 = *v21 == (void)v18;
          float v18 = v21;
        }
        while (!v22);
      }
      float v18 = v21;
    }
    while (v21 != v19);
  }
LABEL_24:
  if (v16 == v17)
  {
    uint64_t v29 = 0;
    std::string __p = 0;
    uint64_t v38 = 0;
    uint64_t v31 = *((void *)&v40[0] + 1);
    std::string v30 = *(std::__shared_weak_count **)&v40[1];
    if (!*(void *)&v40[1]) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v23 = (char *)v17 - (char *)v16 - 4;
    uint64_t v24 = v16;
    if (v23 < 4) {
      goto LABEL_58;
    }
    uint64_t v25 = (v23 >> 2) + 1;
    uint64_t v24 = &v16[v25 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v26 = v25 & 0x7FFFFFFFFFFFFFFELL;
    int v27 = v16;
    do
    {
      LODWORD(v35) = *(void *)v27;
      float v36 = logf(COERCE_FLOAT(HIDWORD(*(void *)v27)));
      *(float *)&uint64_t v28 = logf(v35);
      *((float *)&v28 + 1) = v36;
      *(void *)int v27 = v28;
      v27 += 2;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_58:
      do
      {
        float *v24 = logf(*v24);
        ++v24;
      }
      while (v24 != v17);
    }
    if ((char *)v17 - (char *)v16 < 0) {
      sub_24C667470();
    }
    uint64_t v29 = (char *)operator new((char *)v17 - (char *)v16);
    std::string __p = v29;
    memcpy(v29, v16, (char *)v17 - (char *)v16);
    uint64_t v38 = &v29[4 * (v17 - v16)];
    uint64_t v31 = *((void *)&v40[0] + 1);
    std::string v30 = *(std::__shared_weak_count **)&v40[1];
    if (!*(void *)&v40[1]) {
      goto LABEL_33;
    }
  }
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_33:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64_t v32 = v38 - v29;
  if (v38 != v29)
  {
    if (v32 < 0) {
      sub_24C667470();
    }
    uint64_t v33 = (char *)operator new(v38 - v29);
    *(void *)a1 = v33;
    uint64_t v34 = &v33[4 * (v32 >> 2)];
    *(void *)(a1 + 16) = v34;
    memcpy(v33, v29, v32);
    *(void *)(a1 + 8) = v34;
  }
  *(void *)(a1 + 24) = v31;
  *(void *)(a1 + 32) = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 40) = 1;
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 1;
  }
  if (__p) {
    operator delete(__p);
  }
  if (v41) {
    operator delete(v41);
  }
  if (*(void *)&v40[1]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v40[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)&v40[1] + 16))(*(void *)&v40[1]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v40[1]);
  }
LABEL_49:
  if (v39[0]) {
    operator delete(v39[0]);
  }
}

void sub_24C6B13FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  id v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(void *)(v19 - 96) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6B1ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_24C6B1CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B22C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_24C6B2918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_24C6B2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  uint64_t v25 = v24;
  uint64_t v26 = v23;
  int v27 = v25;

  _Unwind_Resume(a1);
}

void sub_24C6B2E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B2ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3248(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24C6B3264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B35F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_24C6B39E0(_Unwind_Exception *a1)
{
  sub_24C66EA3C((void *)(v3 - 152));
  _Unwind_Resume(a1);
}

void sub_24C6B3B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B3F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B436C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B43AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B4598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6B45A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6B45C4(void *a1)
{
  v31[19] = *MEMORY[0x263EF8340];
  sub_24C6B4BC0(v29);
  if ((v30[*(void *)(v29[0] - 24) + 16] & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  size_t v26 = 0;
  long long __p = 0uLL;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_24C667470();
    }
    uint64_t v2 = operator new(__sz);
    size_t v3 = (size_t)v2 + __sz;
    *(void *)&long long __p = v2;
    size_t v26 = (size_t)v2 + __sz;
    bzero(v2, __sz);
    *((void *)&__p + 1) = v3;
  }
  std::istream::read();
  sub_24C6B4D9C(&__p, 1, 1, (uint64_t)v23);
  uint64_t v4 = sub_24C6B4E8C((uint64_t)v23, "feature_size");
  float v20 = 0;
  sub_24C6C55D0((uint64_t)v4, &v20);
  a1[1] = v20;
  uint64_t v5 = sub_24C6B4E8C((uint64_t)v23, "num_hashes");
  float v20 = 0;
  sub_24C6C55D0((uint64_t)v5, &v20);
  a1[3] = v20;
  id v6 = sub_24C6B4E8C((uint64_t)v23, "hash_size");
  float v20 = 0;
  sub_24C6C55D0((uint64_t)v6, &v20);
  a1[2] = v20;
  uint64_t v7 = sub_24C6B4E8C((uint64_t)v23, "matrix");
  uint64_t v8 = sub_24C6B50A8((uint64_t)v7);
  float v20 = 0;
  id v21 = 0;
  uint64_t v22 = 0;
  std::string v10 = *(const void **)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  size_t v11 = v9 - *(void *)v8;
  if (v9 == *(void *)v8)
  {
    uint64_t v12 = 0;
    unint64_t v13 = a1[2] * a1[1];
    if (v13) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0) {
      sub_24C667470();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)v8);
    float v20 = v12;
    uint64_t v22 = &v12[v11];
    memcpy(v12, v10, v11);
    id v21 = &v12[v11];
    unint64_t v13 = a1[2] * a1[1];
    if (v13)
    {
LABEL_8:
      if ((v13 & 0x8000000000000000) != 0) {
        sub_24C667470();
      }
      size_t v14 = 4 * v13;
      int64_t v15 = (char *)operator new(4 * v13);
      unint64_t v13 = (unint64_t)&v15[4 * v13];
      memcpy(v15, v12, v14);
      uint64_t v17 = a1 + 4;
      uint64_t v16 = (void *)a1[4];
      if (v16) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  int64_t v15 = 0;
  uint64_t v17 = a1 + 4;
  uint64_t v16 = (void *)a1[4];
  if (v16)
  {
LABEL_10:
    a1[5] = v16;
    operator delete(v16);
    void *v17 = 0;
    v17[1] = 0;
    void v17[2] = 0;
  }
LABEL_11:
  a1[4] = v15;
  a1[5] = v13;
  a1[6] = v13;
  if (v12) {
    operator delete(v12);
  }
  sub_24C6B5428(&v24, v23[0]);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v29[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2532F8600](v30);
  std::istream::~istream();
  return MEMORY[0x2532F88A0](v31);
}

void sub_24C6B4990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      sub_24C6B51B8(&a41);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  sub_24C6B51B8(&a41);
  _Unwind_Resume(a1);
}

void *sub_24C6B4A88(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[3] = 0;
  *a1 = &unk_26FEDD7A0;
  a1[5] = 0;
  a1[6] = 0;
  sub_24C6B45C4(a1);
  return a1;
}

void sub_24C6B4AE0(_Unwind_Exception *exception_object)
{
  size_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C6B4B00(void *a1)
{
  *a1 = &unk_26FEDD7A0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C6B4B50(void *a1)
{
  *a1 = &unk_26FEDD7A0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2532F8960);
}

uint64_t *sub_24C6B4BC0(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  size_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  id v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x2532F85F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_24C6B4D58(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2532F88A0](v1);
  _Unwind_Resume(a1);
}

void sub_24C6B4D9C(_OWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v14[0] = 0;
  uint64_t v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  *(_OWORD *)long long __p = 0u;
  long long v11 = 0u;
  char v12 = 0;
  char v13 = a3;
  v6[0] = *a1;
  v6[1] = xmmword_24C7303B0;
  char v7 = 1;
  if (!sub_24C6B5D78((uint64_t)v6, 4, (uint64_t)&v9, a2, 0))
  {
    *(unsigned char *)a4 = 9;
    *(void *)(a4 + 8) = 0;
    uint64_t v5 = __p[0];
    if (!__p[0]) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_24C6C4780(a4, v14);
  uint64_t v5 = __p[0];
  if (__p[0])
  {
LABEL_3:
    __p[1] = v5;
    operator delete(v5);
  }
LABEL_4:
  sub_24C6B5428(&v15, v14[0]);
}

void sub_24C6B4E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C6B5428(v17, *(unsigned __int8 *)(v18 - 32));
  _Unwind_Resume(a1);
}

uint64_t **sub_24C6B4E8C(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      size_t v14 = (char *)sub_24C6C537C((char *)a1);
      sub_24C6698FC(&v15, v14);
      sub_24C66A45C("cannot use operator[] with a string argument with ", &v15, &__dst);
      sub_24C6C51E0(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26FEDD6B8, (void (*)(void *))sub_24C6C53A4);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v4 = operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    void *v4 = v4 + 1;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8);
  size_t v6 = strlen(a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_11:
  }
    memcpy(p_dst, a2, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  long long v11 = sub_24C6C53F8(v5, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, &v15);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v11 + 7;
}

void sub_24C6B502C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6B50A8(uint64_t a1)
{
  if (*(unsigned char *)a1 != 8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (char *)sub_24C6C537C((char *)a1);
    sub_24C6698FC(&v5, v4);
    sub_24C66A45C("type must be binary, but is ", &v5, &v6);
    sub_24C6C51E0(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_26FEDD6B8, (void (*)(void *))sub_24C6C53A4);
  }
  return *(void *)(a1 + 8);
}

void sub_24C6B5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void *sub_24C6B51B8(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2532F8600](a1 + 2);
  std::istream::~istream();
  MEMORY[0x2532F88A0](a1 + 53);
  return a1;
}

void sub_24C6B5284(uint64_t a1, const float *__B, float *__C)
{
  if (!__B || !__C)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null pointer");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  vDSP_mmul(*(const float **)(a1 + 32), 1, __B, 1, __C, 1, *(void *)(a1 + 16), 1uLL, *(void *)(a1 + 8));
  float __Ca = 1.0;
  float __Ba = 0.0;
  vDSP_Length v5 = *(void *)(a1 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  if (v5)
  {
    if (v5 >> 62) {
      sub_24C667470();
    }
    std::string v6 = operator new(4 * v5);
    bzero(v6, 4 * v5);
  }
  else
  {
    std::string v6 = 0;
  }
  vDSP_vthrsc(__C, 1, &__Ba, &__Ca, (float *)v6, 1, v5);
  float v8 = 1.0;
  float v9 = 0.0;
  vDSP_vclip((const float *)v6, 1, &v9, &v8, __C, 1, *(void *)(a1 + 16));
  if (v6) {
    operator delete(v6);
  }
}

void sub_24C6B53C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6B53DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6B540C(uint64_t a1, float *a2, uint64_t a3)
{
}

void sub_24C6B5428(uint64_t *a1, int a2)
{
  long long __p = 0;
  char v66 = 0;
  long long v67 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_24C6B5A6C((uint64_t)&__p, *(void *)(*a1 + 16));
    uint64_t v7 = *a1 + 8;
    float v8 = *(char **)*a1;
    if (v8 != (char *)v7)
    {
      float v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          float v9 = sub_24C6B5BBC(&__p, v8 + 56);
        }
        else
        {
          *float v9 = v8[56];
          *((void *)v9 + 1) = *((void *)v8 + 8);
          v8[56] = 0;
          *((void *)v8 + 8) = 0;
          v9 += 16;
        }
        char v66 = v9;
        uint64_t v10 = (char *)*((void *)v8 + 1);
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (char *)*((void *)v8 + 2);
            BOOL v12 = *(void *)v11 == (void)v8;
            float v8 = v11;
          }
          while (!v12);
        }
        float v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_24C6B5A6C((uint64_t)&__p, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 4);
    uint64_t v4 = *(void *)*a1;
    uint64_t v5 = *(void *)(*a1 + 8);
    if (v4 != v5)
    {
      std::string v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *std::string v6 = *(unsigned char *)v4;
          *((void *)v6 + 1) = *(void *)(v4 + 8);
          *(unsigned char *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          std::string v6 = sub_24C6B5BBC(&__p, (char *)v4);
        }
        char v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  size_t v14 = (char *)__p;
  char v13 = v66;
  if (__p != v66)
  {
    int v62 = v3;
    while (1)
    {
      unsigned __int8 v63 = *(v13 - 16);
      uint64_t v64 = (void *)*((void *)v13 - 1);
      *(v13 - 16) = 0;
      *((void *)v13 - 1) = 0;
      std::string v15 = v66 - 16;
      sub_24C6B5428(v66 - 8, *(v66 - 16));
      char v66 = v15;
      if (v63 != 1)
      {
        if (v63 == 2)
        {
          uint64_t v16 = (void *)*v64;
          uint64_t v17 = v64 + 1;
          uint64_t v18 = (void *)v64[1];
          if ((void *)*v64 != v18)
          {
            do
            {
              if (v15 < v67)
              {
                char *v15 = *(unsigned char *)v16;
                *((void *)v15 + 1) = v16[1];
                *(unsigned char *)uint64_t v16 = 0;
                v16[1] = 0;
                v15 += 16;
              }
              else
              {
                uint64_t v19 = (char *)__p;
                uint64_t v20 = (v15 - (unsigned char *)__p) >> 4;
                unint64_t v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 60) {
                  goto LABEL_104;
                }
                uint64_t v22 = v67 - (unsigned char *)__p;
                if ((v67 - (unsigned char *)__p) >> 3 > v21) {
                  unint64_t v21 = v22 >> 3;
                }
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23 >> 60) {
                  goto LABEL_105;
                }
                uint64_t v24 = (char *)operator new(16 * v23);
                uint64_t v25 = &v24[16 * v20];
                char *v25 = *(unsigned char *)v16;
                *((void *)v25 + 1) = v16[1];
                *(unsigned char *)uint64_t v16 = 0;
                v16[1] = 0;
                size_t v26 = v66;
                std::string v27 = v25;
                if (v66 != v19)
                {
                  do
                  {
                    char v28 = *(v26 - 16);
                    v26 -= 16;
                    *(v27 - 16) = v28;
                    v27 -= 16;
                    *((void *)v27 + 1) = *((void *)v26 + 1);
                    char *v26 = 0;
                    *((void *)v26 + 1) = 0;
                  }
                  while (v26 != v19);
                  uint64_t v19 = v66;
                }
                uint64_t v29 = &v24[16 * v23];
                std::string v30 = (char *)__p;
                std::string v15 = v25 + 16;
                long long __p = v27;
                char v66 = v25 + 16;
                long long v67 = v29;
                if (v19 != v30)
                {
                  uint64_t v31 = v19 - 8;
                  do
                  {
                    uint64_t v32 = v31 - 8;
                    sub_24C6B5428(v31, *(v31 - 8));
                    v31 -= 16;
                  }
                  while (v32 != v30);
                }
                if (v30) {
                  operator delete(v30);
                }
              }
              char v66 = v15;
              v16 += 2;
            }
            while (v16 != v18);
            uint64_t v16 = (void *)*v64;
            uint64_t v17 = v64 + 1;
            uint64_t v50 = v64[1];
            if (v50 != *v64)
            {
              uint64_t v51 = v50 - 8;
              do
              {
                uint64_t v52 = (void *)(v51 - 8);
                sub_24C6B5428(v51, *(unsigned __int8 *)(v51 - 8));
                v51 -= 16;
              }
              while (v52 != v16);
            }
          }
          void *v17 = v16;
        }
        goto LABEL_24;
      }
      uint64_t v33 = (uint64_t)v64;
      uint64_t v34 = v64 + 1;
      float v35 = (void *)*v64;
      if ((void *)*v64 != v64 + 1) {
        break;
      }
LABEL_80:
      sub_24C6B5CE8(v33, *(char **)(v33 + 8));
      *(void *)uint64_t v33 = v33 + 8;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 8) = 0;
LABEL_24:
      sub_24C6B5428(&v64, v63);
      size_t v14 = (char *)__p;
      char v13 = v66;
      if (__p == v66)
      {
        int v3 = v62;
        goto LABEL_82;
      }
    }
    while (1)
    {
      if (v15 < v67)
      {
        char *v15 = *((unsigned char *)v35 + 56);
        *((void *)v15 + 1) = v35[8];
        *((unsigned char *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        char v66 = v15;
        float v36 = (void *)v35[1];
        if (v36) {
          goto LABEL_70;
        }
        goto LABEL_72;
      }
      uint64_t v37 = (char *)__p;
      uint64_t v38 = (v15 - (unsigned char *)__p) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
LABEL_104:
      }
        sub_24C667470();
      uint64_t v40 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41 >> 60) {
LABEL_105:
      }
        sub_24C66DB48();
      int v42 = (char *)operator new(16 * v41);
      float v43 = &v42[16 * v38];
      *float v43 = *((unsigned char *)v35 + 56);
      *((void *)v43 + 1) = v35[8];
      *((unsigned char *)v35 + 56) = 0;
      v35[8] = 0;
      uint64_t v44 = v43 + 16;
      if (v15 == v37)
      {
        long long __p = v43;
        char v66 = v43 + 16;
        long long v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          char v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((void *)v43 + 1) = *((void *)v15 + 1);
          char *v15 = 0;
          *((void *)v15 + 1) = 0;
        }
        while (v15 != v37);
        std::string v15 = (char *)__p;
        long long v46 = v66;
        long long __p = v43;
        char v66 = v44;
        long long v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          int v47 = v46 - 8;
          do
          {
            uint64_t v48 = v47 - 8;
            sub_24C6B5428(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          std::string v15 = v44;
          char v66 = v44;
          float v36 = (void *)v35[1];
          if (v36) {
            goto LABEL_70;
          }
          goto LABEL_72;
        }
      }
      operator delete(v15);
      std::string v15 = v44;
      char v66 = v44;
      float v36 = (void *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          uint64_t v49 = v36;
          float v36 = (void *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        uint64_t v49 = (void *)v35[2];
        BOOL v12 = *v49 == (void)v35;
        float v35 = v49;
      }
      while (!v12);
LABEL_49:
      float v35 = v49;
      if (v49 == v34)
      {
        uint64_t v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_82:
  switch(v3)
  {
    case 0:
      sub_24C6B5CE8(*a1, *(char **)(*a1 + 8));
      goto LABEL_95;
    case 1:
      uint64_t v53 = (void **)*a1;
      uint64_t v55 = *(void **)*a1;
      if (!v55) {
        goto LABEL_96;
      }
      char v56 = v53[1];
      float v54 = *(void **)*a1;
      if (v56 != v55)
      {
        uint64_t v57 = (uint64_t)v56 - 8;
        do
        {
          uint64_t v58 = (void *)(v57 - 8);
          sub_24C6B5428(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        float v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      uint64_t v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_96;
      }
      float v54 = *v53;
      break;
    case 7:
      uint64_t v53 = (void **)*a1;
      float v54 = *(void **)*a1;
      if (!v54) {
        goto LABEL_96;
      }
      v53[1] = v54;
      break;
    default:
      goto LABEL_97;
  }
  operator delete(v54);
LABEL_95:
  uint64_t v53 = (void **)*a1;
LABEL_96:
  operator delete(v53);
  size_t v14 = (char *)__p;
LABEL_97:
  if (v14)
  {
    uint64_t v59 = v14;
    if (v66 != v14)
    {
      float v60 = v66 - 8;
      do
      {
        uint64_t v61 = v60 - 8;
        sub_24C6B5428(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      uint64_t v59 = __p;
    }
    char v66 = v14;
    operator delete(v59);
  }
}

void sub_24C6B5A6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_24C667470();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  std::string v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  float v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  float v9 = &v6[v4 - v2];
  do
  {
    char v10 = *(v4 - 16);
    v4 -= 16;
    *(v9 - 16) = v10;
    v9 -= 16;
    *((void *)v9 + 1) = *((void *)v4 + 1);
    char *v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  uint64_t v2 = *(char **)a1;
  uint64_t v11 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v11 != v2)
  {
    BOOL v12 = v11 - 8;
    do
    {
      char v13 = v12 - 8;
      sub_24C6B5428(v12, *(v12 - 8));
      v12 -= 16;
    }
    while (v13 != v2);
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_24C6B5B64(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v5 = *(unsigned __int8 *)(i - 16);
    uint64_t v4 = i - 16;
    *(void *)(a1 + 16) = v4;
    sub_24C6B5428((uint64_t *)(v4 + 8), v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_24C6B5BBC(void **a1, char *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v7;
  char v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  BOOL v12 = &v10[v9];
  *uint64_t v11 = *a2;
  *((void *)v11 + 1) = *((void *)a2 + 1);
  *a2 = 0;
  *((void *)a2 + 1) = 0;
  char v13 = v11 + 16;
  size_t v14 = (char *)*a1;
  std::string v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_13;
  }
  do
  {
    char v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = *((void *)v15 + 1);
    char *v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  std::string v15 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    uint64_t v18 = v17 - 8;
    do
    {
      uint64_t v19 = v18 - 8;
      sub_24C6B5428(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15) {
LABEL_13:
  }
    operator delete(v15);
  return v13;
}

void sub_24C6B5CE8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_24C6B5CE8(a1, *(void *)a2);
    sub_24C6B5CE8(a1, *((void *)a2 + 1));
    sub_24C6B5428(a2 + 64, a2[56]);
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t sub_24C6B5D78(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(a1 + 40) = a3;
  switch(a2)
  {
    case 1:
      uint64_t v8 = sub_24C6B6114(a1, 1, a5);
      goto LABEL_9;
    case 2:
      uint64_t v8 = sub_24C6B7158((unsigned __int8 **)a1);
      goto LABEL_9;
    case 3:
      uint64_t v11 = *(unsigned __int8 **)a1;
      char v10 = *(unsigned __int8 **)(a1 + 8);
      uint64_t v12 = *(void *)(a1 + 24) + 1;
      break;
    case 4:
      LODWORD(v29[0].__vftable) = 0;
      sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)v29);
      if (sub_24C6B85FC(*(void *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        && sub_24C6B889C((unsigned __int8 **)a1, 0))
      {
        *(void *)(*(void *)(a1 + 40) + 16) -= 8;
        uint64_t v9 = 1;
        goto LABEL_14;
      }
      return 0;
    default:
      return 0;
  }
  while (1)
  {
    *(void *)(a1 + 24) = v12;
    if (v11 == v10) {
      break;
    }
    unsigned int v14 = *v11++;
    uint64_t v13 = v14;
    *(void *)a1 = v11;
    *(void *)(a1 + 16) = v14;
    ++v12;
    if (v14 != 78) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = -1;
  *(void *)(a1 + 16) = -1;
LABEL_8:
  uint64_t v8 = sub_24C6BF3EC(a1, v13);
LABEL_9:
  uint64_t v9 = v8;
  if (v8)
  {
LABEL_14:
    if (!a4) {
      return v9;
    }
    if (a2 == 3)
    {
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v17 = *(unsigned __int8 **)a1;
      char v16 = *(unsigned __int8 **)(a1 + 8);
      while (1)
      {
        *(void *)(a1 + 24) = ++v15;
        if (v17 == v16) {
          goto LABEL_34;
        }
        unsigned int v18 = *v17++;
        *(void *)a1 = v17;
        *(void *)(a1 + 16) = v18;
        if (v18 != 78) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v15 = *(void *)(a1 + 24) + 1;
    *(void *)(a1 + 24) = v15;
    uint64_t v19 = *(unsigned __int8 **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8))
    {
LABEL_34:
      *(void *)(a1 + 16) = -1;
      return 1;
    }
    uint64_t v20 = *v19;
    *(void *)a1 = v19 + 1;
    *(void *)(a1 + 16) = v20;
LABEL_22:
    uint64_t v21 = *(void *)(a1 + 40);
    sub_24C6B7C34(a1, v30);
    unint64_t v22 = *(void *)(a1 + 24);
    sub_24C6B7C34(a1, &v26);
    sub_24C66A45C("expected end of input; last byte: 0x", &v26, &v27);
    sub_24C6698FC(v24, "value");
    sub_24C6B80F8(a2, (uint64_t)&v27, (uint64_t)v24, &__p);
    sub_24C6B7D14(110, v22, (uint64_t)&__p, (uint64_t)v29);
    uint64_t v9 = sub_24C6B7BD4(v21, v15, (uint64_t)v30, (uint64_t)v29);
    sub_24C6B83F0(v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_24:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_30;
      }
    }
    else if ((v25 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v24[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v31 & 0x80000000) == 0) {
        return v9;
      }
LABEL_32:
      operator delete(v30[0]);
      return v9;
    }
LABEL_31:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0) {
      return v9;
    }
    goto LABEL_32;
  }
  return v9;
}

void sub_24C6B6030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::runtime_error a33)
{
  sub_24C6B83F0(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if (a20 < 0) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_7:
    operator delete(a15);
    if ((*(char *)(v33 - 49) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((*(char *)(v33 - 49) & 0x80000000) == 0) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(*(void **)(v33 - 72));
  _Unwind_Resume(a1);
}

void sub_24C6B60D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x24C6B60ACLL);
  }
  JUMPOUT(0x24C6B6078);
}

void sub_24C6B60E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x24C6B6080);
  }
  JUMPOUT(0x24C6B60BCLL);
}

void sub_24C6B60F4()
{
  if (*(char *)(v0 - 49) < 0) {
    JUMPOUT(0x24C6B60C4);
  }
  JUMPOUT(0x24C6B6090);
}

uint64_t sub_24C6B6114(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    std::string::size_type v6 = *(void *)(a1 + 16);
    std::string::size_type v7 = v6 + 1;
    goto LABEL_6;
  }
  ++*(void *)(a1 + 24);
  uint64_t v5 = *(unsigned __int8 **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    std::string::size_type v6 = -1;
    *(void *)(a1 + 16) = -1;
    std::string::size_type v7 = 0;
    goto LABEL_6;
  }
  std::string::size_type v6 = *v5;
  *(void *)a1 = v5 + 1;
  *(void *)(a1 + 16) = v6;
  std::string::size_type v7 = v6 + 1;
  if (v6 + 1 <= 0xFC)
  {
LABEL_6:
    switch(v7)
    {
      case 0uLL:
        return sub_24C6B8B9C((void *)a1, 1, "value");
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
        char v10 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = v6;
        sub_24C6BD5C0(v10, (uint64_t *)&__p);
        return 1;
      case 0x19uLL:
        LOBYTE(__dst) = 0;
        uint64_t v8 = sub_24C6BB0D0((unsigned __int8 **)a1, 1, &__dst);
        if (!v8) {
          return v8;
        }
        char v45 = *(unsigned __int8 ***)(a1 + 40);
        std::string::size_type v46 = LOBYTE(__dst);
        goto LABEL_114;
      case 0x1AuLL:
        LOWORD(__dst) = 0;
        uint64_t v8 = sub_24C6BBEA8((unsigned __int8 **)a1, 1, &__dst);
        if (!v8) {
          return v8;
        }
        char v45 = *(unsigned __int8 ***)(a1 + 40);
        std::string::size_type v46 = LOWORD(__dst);
        goto LABEL_114;
      case 0x1BuLL:
        LODWORD(__dst) = 0;
        uint64_t v8 = sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&__dst);
        if (!v8) {
          return v8;
        }
        char v45 = *(unsigned __int8 ***)(a1 + 40);
        std::string::size_type v46 = LODWORD(__dst);
        goto LABEL_114;
      case 0x1CuLL:
        double __dst = 0.0;
        uint64_t v8 = sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&__dst);
        if (!v8) {
          return v8;
        }
        char v45 = *(unsigned __int8 ***)(a1 + 40);
        std::string::size_type v46 = *(void *)&__dst;
LABEL_114:
        __p.__r_.__value_.__r.__words[0] = v46;
        sub_24C6BD5C0(v45, (uint64_t *)&__p);
        return v8;
      case 0x21uLL:
      case 0x22uLL:
      case 0x23uLL:
      case 0x24uLL:
      case 0x25uLL:
      case 0x26uLL:
      case 0x27uLL:
      case 0x28uLL:
      case 0x29uLL:
      case 0x2AuLL:
      case 0x2BuLL:
      case 0x2CuLL:
      case 0x2DuLL:
      case 0x2EuLL:
      case 0x2FuLL:
      case 0x30uLL:
      case 0x31uLL:
      case 0x32uLL:
      case 0x33uLL:
      case 0x34uLL:
      case 0x35uLL:
      case 0x36uLL:
      case 0x37uLL:
      case 0x38uLL:
        uint64_t v9 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = (char)(31 - v6);
        sub_24C6BBC60(v9, (uint64_t *)&__p);
        return 1;
      case 0x39uLL:
        LOBYTE(__dst) = 0;
        uint64_t v8 = sub_24C6BB0D0((unsigned __int8 **)a1, 1, &__dst);
        if (!v8) {
          return v8;
        }
        float v43 = *(unsigned __int8 ***)(a1 + 40);
        unint64_t v44 = LOBYTE(__dst);
        goto LABEL_124;
      case 0x3AuLL:
        LOWORD(__dst) = 0;
        uint64_t v8 = sub_24C6BBEA8((unsigned __int8 **)a1, 1, &__dst);
        if (!v8) {
          return v8;
        }
        float v43 = *(unsigned __int8 ***)(a1 + 40);
        unint64_t v44 = LOWORD(__dst);
        goto LABEL_124;
      case 0x3BuLL:
        LODWORD(__dst) = 0;
        uint64_t v8 = sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&__dst);
        if (!v8) {
          return v8;
        }
        float v43 = *(unsigned __int8 ***)(a1 + 40);
        unint64_t v44 = LODWORD(__dst);
        goto LABEL_124;
      case 0x3CuLL:
        double __dst = 0.0;
        uint64_t v8 = sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&__dst);
        if (!v8) {
          return v8;
        }
        float v43 = *(unsigned __int8 ***)(a1 + 40);
        unint64_t v44 = *(void *)&__dst;
LABEL_124:
        __p.__r_.__value_.__r.__words[0] = ~v44;
        sub_24C6BBC60(v43, (uint64_t *)&__p);
        return v8;
      case 0x41uLL:
      case 0x42uLL:
      case 0x43uLL:
      case 0x44uLL:
      case 0x45uLL:
      case 0x46uLL:
      case 0x47uLL:
      case 0x48uLL:
      case 0x49uLL:
      case 0x4AuLL:
      case 0x4BuLL:
      case 0x4CuLL:
      case 0x4DuLL:
      case 0x4EuLL:
      case 0x4FuLL:
      case 0x50uLL:
      case 0x51uLL:
      case 0x52uLL:
      case 0x53uLL:
      case 0x54uLL:
      case 0x55uLL:
      case 0x56uLL:
      case 0x57uLL:
      case 0x58uLL:
      case 0x59uLL:
      case 0x5AuLL:
      case 0x5BuLL:
      case 0x5CuLL:
      case 0x60uLL:
        memset(&__p, 0, sizeof(__p));
        __int16 v59 = 0;
        uint64_t v8 = sub_24C6BC480((unsigned __int8 **)a1, (uint64_t)&__p);
        if (v8) {
          sub_24C6BB3D4(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return v8;
      case 0x61uLL:
      case 0x62uLL:
      case 0x63uLL:
      case 0x64uLL:
      case 0x65uLL:
      case 0x66uLL:
      case 0x67uLL:
      case 0x68uLL:
      case 0x69uLL:
      case 0x6AuLL:
      case 0x6BuLL:
      case 0x6CuLL:
      case 0x6DuLL:
      case 0x6EuLL:
      case 0x6FuLL:
      case 0x70uLL:
      case 0x71uLL:
      case 0x72uLL:
      case 0x73uLL:
      case 0x74uLL:
      case 0x75uLL:
      case 0x76uLL:
      case 0x77uLL:
      case 0x78uLL:
      case 0x79uLL:
      case 0x7AuLL:
      case 0x7BuLL:
      case 0x7CuLL:
      case 0x80uLL:
        memset(&__p, 0, sizeof(__p));
        uint64_t v8 = sub_24C6BCB10((unsigned __int8 **)a1, &__p);
        if (v8) {
          sub_24C6BAA30(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        }
        goto LABEL_13;
      case 0x81uLL:
      case 0x82uLL:
      case 0x83uLL:
      case 0x84uLL:
      case 0x85uLL:
      case 0x86uLL:
      case 0x87uLL:
      case 0x88uLL:
      case 0x89uLL:
      case 0x8AuLL:
      case 0x8BuLL:
      case 0x8CuLL:
      case 0x8DuLL:
      case 0x8EuLL:
      case 0x8FuLL:
      case 0x90uLL:
      case 0x91uLL:
      case 0x92uLL:
      case 0x93uLL:
      case 0x94uLL:
      case 0x95uLL:
      case 0x96uLL:
      case 0x97uLL:
      case 0x98uLL:
        unint64_t v11 = v6 & 0x1F;
        if (!sub_24C6BAE30(*(void *)(a1 + 40), v11)) {
          return 0;
        }
        if (!v11) {
          goto LABEL_21;
        }
        do
        {
          if ((sub_24C6B6114(a1, 1, a3) & 1) == 0) {
            return 0;
          }
          --v11;
        }
        while (v11);
LABEL_21:
        *(void *)(*(void *)(a1 + 40) + 16) -= 8;
        return 1;
      case 0x99uLL:
        __p.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BB0D0((unsigned __int8 **)a1, 1, &__p)) {
          return v8;
        }
        unint64_t data_low = __p.__r_.__value_.__s.__data_[0];
        return sub_24C6BD218((unsigned __int8 **)a1, data_low, a3);
      case 0x9AuLL:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BBEA8((unsigned __int8 **)a1, 1, &__p)) {
          return v8;
        }
        unint64_t data_low = LOWORD(__p.__r_.__value_.__l.__data_);
        return sub_24C6BD218((unsigned __int8 **)a1, data_low, a3);
      case 0x9BuLL:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&__p)) {
          return v8;
        }
        unint64_t data_low = LODWORD(__p.__r_.__value_.__l.__data_);
        return sub_24C6BD218((unsigned __int8 **)a1, data_low, a3);
      case 0x9CuLL:
        __p.__r_.__value_.__r.__words[0] = 0;
        if (!sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&__p)) {
          return 0;
        }
        unint64_t data_low = __p.__r_.__value_.__r.__words[0];
        return sub_24C6BD218((unsigned __int8 **)a1, data_low, a3);
      case 0xA0uLL:
        return sub_24C6BD218((unsigned __int8 **)a1, 0xFFFFFFFFFFFFFFFFLL, a3);
      case 0xA1uLL:
      case 0xA2uLL:
      case 0xA3uLL:
      case 0xA4uLL:
      case 0xA5uLL:
      case 0xA6uLL:
      case 0xA7uLL:
      case 0xA8uLL:
      case 0xA9uLL:
      case 0xAAuLL:
      case 0xABuLL:
      case 0xACuLL:
      case 0xADuLL:
      case 0xAEuLL:
      case 0xAFuLL:
      case 0xB0uLL:
      case 0xB1uLL:
      case 0xB2uLL:
      case 0xB3uLL:
      case 0xB4uLL:
      case 0xB5uLL:
      case 0xB6uLL:
      case 0xB7uLL:
      case 0xB8uLL:
        unint64_t v12 = v6 & 0x1F;
        goto LABEL_23;
      case 0xB9uLL:
        __p.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BB0D0((unsigned __int8 **)a1, 1, &__p)) {
          return v8;
        }
        unint64_t v39 = __p.__r_.__value_.__s.__data_[0];
        return sub_24C6BD304(a1, v39, a3);
      case 0xBAuLL:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BBEA8((unsigned __int8 **)a1, 1, &__p)) {
          return v8;
        }
        unint64_t v39 = LOWORD(__p.__r_.__value_.__l.__data_);
        return sub_24C6BD304(a1, v39, a3);
      case 0xBBuLL:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = 0;
        if (!sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&__p)) {
          return v8;
        }
        unint64_t v39 = LODWORD(__p.__r_.__value_.__l.__data_);
        return sub_24C6BD304(a1, v39, a3);
      case 0xBCuLL:
        __p.__r_.__value_.__r.__words[0] = 0;
        if (!sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&__p)) {
          return 0;
        }
        unint64_t v39 = __p.__r_.__value_.__r.__words[0];
        return sub_24C6BD304(a1, v39, a3);
      case 0xC0uLL:
        unint64_t v12 = -1;
LABEL_23:
        return sub_24C6BD304(a1, v12, a3);
      case 0xC7uLL:
      case 0xC8uLL:
      case 0xC9uLL:
      case 0xCAuLL:
      case 0xCBuLL:
      case 0xCCuLL:
      case 0xCDuLL:
      case 0xCEuLL:
      case 0xCFuLL:
      case 0xD0uLL:
      case 0xD1uLL:
      case 0xD2uLL:
      case 0xD3uLL:
      case 0xD4uLL:
      case 0xD5uLL:
      case 0xD9uLL:
      case 0xDAuLL:
      case 0xDBuLL:
      case 0xDCuLL:
        if (a3 == 1)
        {
          switch(v6)
          {
            case 0xD8uLL:
              __p.__r_.__value_.__s.__data_[0] = 0;
              sub_24C6BB0D0((unsigned __int8 **)a1, 1, &__p);
              break;
            case 0xD9uLL:
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              sub_24C6BBEA8((unsigned __int8 **)a1, 1, &__p);
              break;
            case 0xDAuLL:
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&__p);
              break;
            case 0xDBuLL:
              __p.__r_.__value_.__r.__words[0] = 0;
              sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&__p);
              break;
            default:
              return sub_24C6B6114(a1, 1, 1);
          }
          return sub_24C6B6114(a1, 1, 1);
        }
        if (a3)
        {
LABEL_32:
          uint64_t v17 = *(unsigned __int8 ***)(a1 + 40);
          __p.__r_.__value_.__s.__data_[0] = 0;
          sub_24C6BB7F8(v17, (unsigned __int8 *)&__p);
          return 1;
        }
        __p.__r_.__value_.__s.__data_[2] = 0;
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        snprintf((char *)&__p, 3uLL, "%.2hhX", v6);
        size_t v14 = strlen((const char *)&__p);
        if (v14 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        size_t v15 = v14;
        if (v14 >= 0x17)
        {
          uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v18 = v14 | 7;
          }
          uint64_t v19 = v18 + 1;
          *(double *)&char v16 = COERCE_DOUBLE(operator new(v18 + 1));
          size_t v61 = v15;
          int64_t v62 = v19 | 0x8000000000000000;
          double __dst = *(double *)&v16;
        }
        else
        {
          HIBYTE(v62) = v14;
          *(double *)&char v16 = COERCE_DOUBLE(&__dst);
          if (!v14)
          {
LABEL_41:
            *((unsigned char *)v16 + v15) = 0;
            int v20 = SHIBYTE(v62);
            if (v62 >= 0) {
              size_t v21 = HIBYTE(v62);
            }
            else {
              size_t v21 = v61;
            }
            unint64_t v22 = v21 + 16;
            if (v21 + 16 > 0x7FFFFFFFFFFFFFF7) {
              sub_24C6673C8();
            }
            uint64_t v23 = *(void *)(a1 + 40);
            unint64_t v24 = *(void *)(a1 + 24);
            if (v22 >= 0x17)
            {
              uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17) {
                uint64_t v26 = v22 | 7;
              }
              uint64_t v27 = v26 + 1;
              char v28 = (unint64_t *)operator new(v26 + 1);
              v55[1] = (void *)(v21 + 16);
              unint64_t v56 = v27 | 0x8000000000000000;
              v55[0] = v28;
              *(_OWORD *)char v28 = *(_OWORD *)"invalid byte: 0x";
              char v25 = v28 + 2;
            }
            else
            {
              char v25 = &v56;
              unint64_t v56 = 0;
              HIBYTE(v56) = v21 + 16;
              *(_OWORD *)uint64_t v55 = *(_OWORD *)"invalid byte: 0x";
              if (!v21) {
                goto LABEL_55;
              }
            }
            if (v20 >= 0) {
              p_dst = (void **)&__dst;
            }
            else {
              p_dst = *(void ***)&__dst;
            }
            memmove(v25, p_dst, v21);
LABEL_55:
            *((unsigned char *)v25 + v21) = 0;
            char v54 = 5;
            strcpy((char *)v53, "value");
            sub_24C6B80F8(1, (uint64_t)v55, (uint64_t)v53, &v57);
            sub_24C6B7D14(112, v24, (uint64_t)&v57, (uint64_t)&__p);
            *(unsigned char *)(v23 + 40) = 1;
            if (*(unsigned char *)(v23 + 41))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              uint64_t v52 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&__p);
              __cxa_throw(v52, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FEDDA08;
            std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
            std::exception::~exception((std::exception *)&__p);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v57.__r_.__value_.__l.__data_);
              if ((v54 & 0x80000000) == 0)
              {
LABEL_58:
                if ((SHIBYTE(v56) & 0x80000000) == 0) {
                  goto LABEL_59;
                }
                goto LABEL_63;
              }
            }
            else if ((v54 & 0x80000000) == 0)
            {
              goto LABEL_58;
            }
            operator delete(v53[0]);
            if ((SHIBYTE(v56) & 0x80000000) == 0)
            {
LABEL_59:
              if ((v20 & 0x80000000) == 0) {
                return 0;
              }
LABEL_64:
              operator delete(*(void **)&__dst);
              return 0;
            }
LABEL_63:
            operator delete(v55[0]);
            if ((v20 & 0x80000000) == 0) {
              return 0;
            }
            goto LABEL_64;
          }
        }
        memcpy(v16, &__p, v15);
        goto LABEL_41;
      case 0xF5uLL:
        goto LABEL_32;
      case 0xF6uLL:
        uint64_t v40 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v8 = 1;
        __p.__r_.__value_.__s.__data_[0] = 1;
        sub_24C6BB7F8(v40, (unsigned __int8 *)&__p);
        return v8;
      case 0xF7uLL:
        int v42 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__r.__words[0] = 0;
        sub_24C6BBA40(v42);
        return 1;
      case 0xFAuLL:
        ++*(void *)(a1 + 24);
        uint64_t v32 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8))
        {
          uint64_t v33 = -1;
        }
        else
        {
          uint64_t v33 = *v32;
          *(void *)a1 = v32 + 1;
        }
        *(void *)(a1 + 16) = v33;
        if (!sub_24C6B8B9C((void *)a1, 1, "number")) {
          return 0;
        }
        ++*(void *)(a1 + 24);
        uint64_t v34 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8))
        {
          uint64_t v35 = -1;
        }
        else
        {
          uint64_t v35 = *v34;
          *(void *)a1 = v34 + 1;
        }
        *(void *)(a1 + 16) = v35;
        if (!sub_24C6B8B9C((void *)a1, 1, "number")) {
          return 0;
        }
        v57.__r_.__value_.__s.__data_[0] = v35;
        v57.__r_.__value_.__s.__data_[1] = v33;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
        double v36 = sub_24C6BD56C(&__p);
        uint64_t v37 = *(unsigned __int8 ***)(a1 + 40);
        if (((uint64_t)v57.__r_.__value_.__l.__data_ & 0x8000) != 0) {
          double v38 = -v36;
        }
        else {
          double v38 = v36;
        }
        sub_24C6698FC(&__p, "");
        double __dst = v38;
        sub_24C6BA7E8(v37, (uint64_t *)&__dst);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return 1;
      case 0xFBuLL:
        LODWORD(v57.__r_.__value_.__l.__data_) = 0;
        uint64_t v8 = sub_24C6BBF84((unsigned __int8 **)a1, 1, (int *)&v57);
        if (!v8) {
          return v8;
        }
        std::string v30 = *(unsigned __int8 ***)(a1 + 40);
        double v31 = *(float *)&v57.__r_.__value_.__l.__data_;
        sub_24C6698FC(&__p, "");
        double __dst = v31;
        sub_24C6BA7E8(v30, (uint64_t *)&__dst);
        goto LABEL_13;
      case 0xFCuLL:
        v57.__r_.__value_.__r.__words[0] = 0;
        uint64_t v8 = sub_24C6BC13C((unsigned __int8 **)a1, 1, (unint64_t *)&v57);
        if (!v8) {
          return v8;
        }
        int v47 = *(unsigned __int8 ***)(a1 + 40);
        double v48 = *(double *)&v57.__r_.__value_.__l.__data_;
        sub_24C6698FC(&__p, "");
        double __dst = v48;
        sub_24C6BA7E8(v47, (uint64_t *)&__dst);
LABEL_13:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return v8;
      default:
        break;
    }
  }
  sub_24C6B7C34(a1, &__dst);
  uint64_t v49 = *(void *)(a1 + 40);
  unint64_t v50 = *(void *)(a1 + 24);
  std::operator+<char>();
  sub_24C6698FC(v53, "value");
  sub_24C6B80F8(1, (uint64_t)v55, (uint64_t)v53, &v57);
  sub_24C6B7D14(112, v50, (uint64_t)&v57, (uint64_t)&__p);
  uint64_t v8 = sub_24C6B7BD4(v49, v50, (uint64_t)&__dst, (uint64_t)&__p);
  sub_24C6B83F0((std::runtime_error *)&__p);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v54 & 0x80000000) == 0)
    {
LABEL_133:
      if ((SHIBYTE(v56) & 0x80000000) == 0) {
        goto LABEL_134;
      }
      goto LABEL_138;
    }
  }
  else if ((v54 & 0x80000000) == 0)
  {
    goto LABEL_133;
  }
  operator delete(v53[0]);
  if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
LABEL_134:
    if (SHIBYTE(v62) < 0) {
      goto LABEL_139;
    }
    return v8;
  }
LABEL_138:
  operator delete(v55[0]);
  if (SHIBYTE(v62) < 0) {
LABEL_139:
  }
    operator delete(*(void **)&__dst);
  return v8;
}

void sub_24C6B6BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6B7158(unsigned __int8 **a1)
{
  ++a1[3];
  uint64_t v2 = *a1;
  if (*a1 == a1[1])
  {
    a1[2] = (unsigned __int8 *)-1;
    return sub_24C6B8B9C(a1, 2, "value");
  }
  else
  {
    std::string::size_type v3 = *v2;
    *a1 = v2 + 1;
    a1[2] = (unsigned __int8 *)v3;
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        unint64_t v4 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = v3;
        sub_24C6BD5C0(v4, (uint64_t *)&__p);
        goto LABEL_4;
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
        return sub_24C6BE564((uint64_t)a1, v3 & 0xF);
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
        unint64_t v8 = v3 & 0xF;
        if (!sub_24C6BAE30((uint64_t)a1[5], v8)) {
          goto LABEL_67;
        }
        if (!v8) {
          goto LABEL_18;
        }
        do
        {
          if ((sub_24C6B7158(a1) & 1) == 0)
          {
LABEL_67:
            uint64_t v5 = 0;
            goto LABEL_5;
          }
          --v8;
        }
        while (v8);
LABEL_18:
        *((void *)a1[5] + 2) -= 8;
LABEL_4:
        uint64_t v5 = 1;
        goto LABEL_5;
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 217:
      case 218:
      case 219:
        memset(&__p, 0, sizeof(__p));
        uint64_t v5 = sub_24C6BE750(a1, &__p);
        if (v5) {
          sub_24C6BAA30((unsigned __int8 **)a1[5], (uint64_t)&__p);
        }
        goto LABEL_8;
      case 192:
        char v16 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = 0;
        sub_24C6BBA40(v16);
        goto LABEL_4;
      case 194:
        uint64_t v9 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_24C6BB7F8(v9, (unsigned __int8 *)&__p);
        goto LABEL_4;
      case 195:
        uint64_t v19 = (unsigned __int8 **)a1[5];
        uint64_t v5 = 1;
        __p.__r_.__value_.__s.__data_[0] = 1;
        sub_24C6BB7F8(v19, (unsigned __int8 *)&__p);
        goto LABEL_5;
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
        memset(&__p, 0, sizeof(__p));
        __int16 v30 = 0;
        uint64_t v5 = sub_24C6BED34(a1, (uint64_t)&__p);
        if (v5) {
          sub_24C6BB3D4((unsigned __int8 **)a1[5], (uint64_t)&__p);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_5;
      case 202:
        LODWORD(v28.__r_.__value_.__l.__data_) = 0;
        uint64_t v5 = sub_24C6BBF84(a1, 2, (int *)&v28);
        if (!v5) {
          goto LABEL_5;
        }
        unint64_t v22 = (unsigned __int8 **)a1[5];
        double v23 = *(float *)&v28.__r_.__value_.__l.__data_;
        sub_24C6698FC(&__p, "");
        v31[0] = *(void **)&v23;
        sub_24C6BA7E8(v22, (uint64_t *)v31);
        goto LABEL_8;
      case 203:
        v28.__r_.__value_.__r.__words[0] = 0;
        uint64_t v5 = sub_24C6BC13C(a1, 2, (unint64_t *)&v28);
        if (!v5) {
          goto LABEL_5;
        }
        int v20 = (unsigned __int8 **)a1[5];
        size_t v21 = (void *)v28.__r_.__value_.__r.__words[0];
        sub_24C6698FC(&__p, "");
        v31[0] = v21;
        sub_24C6BA7E8(v20, (uint64_t *)v31);
LABEL_8:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_5;
      case 204:
        LOBYTE(v31[0]) = 0;
        uint64_t v5 = sub_24C6BB0D0(a1, 2, v31);
        if (!v5) {
          goto LABEL_5;
        }
        char v10 = (unsigned __int8 **)a1[5];
        std::string::size_type v11 = LOBYTE(v31[0]);
        goto LABEL_50;
      case 205:
        LOWORD(v31[0]) = 0;
        uint64_t v5 = sub_24C6BBEA8(a1, 2, v31);
        if (!v5) {
          goto LABEL_5;
        }
        char v10 = (unsigned __int8 **)a1[5];
        std::string::size_type v11 = LOWORD(v31[0]);
        goto LABEL_50;
      case 206:
        LODWORD(v31[0]) = 0;
        uint64_t v5 = sub_24C6BBF84(a1, 2, (int *)v31);
        if (!v5) {
          goto LABEL_5;
        }
        char v10 = (unsigned __int8 **)a1[5];
        std::string::size_type v11 = LODWORD(v31[0]);
        goto LABEL_50;
      case 207:
        v31[0] = 0;
        uint64_t v5 = sub_24C6BC13C(a1, 2, (unint64_t *)v31);
        if (!v5) {
          goto LABEL_5;
        }
        char v10 = (unsigned __int8 **)a1[5];
        std::string::size_type v11 = (std::string::size_type)v31[0];
LABEL_50:
        __p.__r_.__value_.__r.__words[0] = v11;
        sub_24C6BD5C0(v10, (uint64_t *)&__p);
        goto LABEL_5;
      case 208:
        LOBYTE(v31[0]) = 0;
        uint64_t v5 = sub_24C6BB0D0(a1, 2, v31);
        if (!v5) {
          goto LABEL_5;
        }
        unint64_t v12 = (unsigned __int8 **)a1[5];
        std::string::size_type v13 = SLOBYTE(v31[0]);
        goto LABEL_57;
      case 209:
        LOWORD(v31[0]) = 0;
        uint64_t v5 = sub_24C6BBEA8(a1, 2, v31);
        if (!v5) {
          goto LABEL_5;
        }
        unint64_t v12 = (unsigned __int8 **)a1[5];
        std::string::size_type v13 = SLOWORD(v31[0]);
        goto LABEL_57;
      case 210:
        LODWORD(v31[0]) = 0;
        uint64_t v5 = sub_24C6BBF84(a1, 2, (int *)v31);
        if (!v5) {
          goto LABEL_5;
        }
        unint64_t v12 = (unsigned __int8 **)a1[5];
        std::string::size_type v13 = SLODWORD(v31[0]);
        goto LABEL_57;
      case 211:
        v31[0] = 0;
        uint64_t v5 = sub_24C6BC13C(a1, 2, (unint64_t *)v31);
        if (!v5) {
          goto LABEL_5;
        }
        unint64_t v12 = (unsigned __int8 **)a1[5];
        std::string::size_type v13 = (std::string::size_type)v31[0];
LABEL_57:
        __p.__r_.__value_.__r.__words[0] = v13;
        sub_24C6BBC60(v12, (uint64_t *)&__p);
        goto LABEL_5;
      case 220:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v5 = 0;
        if (!sub_24C6BBEA8(a1, 2, &__p)) {
          goto LABEL_5;
        }
        unint64_t data_low = LOWORD(__p.__r_.__value_.__l.__data_);
        goto LABEL_32;
      case 221:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v5 = 0;
        if (!sub_24C6BBF84(a1, 2, (int *)&__p)) {
          goto LABEL_5;
        }
        unint64_t data_low = LODWORD(__p.__r_.__value_.__l.__data_);
LABEL_32:
        uint64_t v5 = sub_24C6BE6E4((uint64_t)a1, data_low);
        goto LABEL_5;
      case 222:
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v5 = 0;
        if (!sub_24C6BBEA8(a1, 2, &__p)) {
          goto LABEL_5;
        }
        unint64_t v15 = LOWORD(__p.__r_.__value_.__l.__data_);
        goto LABEL_60;
      case 223:
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v5 = 0;
        if (!sub_24C6BBF84(a1, 2, (int *)&__p)) {
          goto LABEL_5;
        }
        unint64_t v15 = LODWORD(__p.__r_.__value_.__l.__data_);
LABEL_60:
        uint64_t v5 = sub_24C6BE564((uint64_t)a1, v15);
        goto LABEL_5;
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 254:
      case 255:
        std::string::size_type v7 = (unsigned __int8 **)a1[5];
        __p.__r_.__value_.__r.__words[0] = (char)v3;
        sub_24C6BBC60(v7, (uint64_t *)&__p);
        goto LABEL_4;
      default:
        sub_24C6B7C34((uint64_t)a1, v31);
        uint64_t v17 = (uint64_t)a1[5];
        unint64_t v18 = (unint64_t)a1[3];
        std::operator+<char>();
        sub_24C6698FC(v24, "value");
        sub_24C6B80F8(2, (uint64_t)&v26, (uint64_t)v24, &v28);
        sub_24C6B7D14(112, v18, (uint64_t)&v28, (uint64_t)&__p);
        uint64_t v5 = sub_24C6B7BD4(v17, v18, (uint64_t)v31, (uint64_t)&__p);
        sub_24C6B83F0((std::runtime_error *)&__p);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v28.__r_.__value_.__l.__data_);
          if ((v25 & 0x80000000) == 0)
          {
LABEL_38:
            if ((v27 & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_65;
          }
        }
        else if ((v25 & 0x80000000) == 0)
        {
          goto LABEL_38;
        }
        operator delete(v24[0]);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v32 & 0x80000000) == 0) {
            goto LABEL_5;
          }
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v26);
        if ((v32 & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_66:
        operator delete(v31[0]);
LABEL_5:
        uint64_t result = v5;
        break;
    }
  }
  return result;
}

void sub_24C6B76FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6B7BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::size_type v7 = (void *)sub_24C6C469C((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
  }
  return 0;
}

size_t sub_24C6B7C34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v9 = 0;
  *(_WORD *)__str = 0;
  snprintf(__str, 3uLL, "%.2hhX", *(unsigned __int8 *)(a1 + 16));
  size_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v4 = result;
  if (result >= 0x17)
  {
    uint64_t v5 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v5 = result | 7;
    }
    uint64_t v6 = v5 + 1;
    std::string::size_type v7 = operator new(v5 + 1);
    a2[1] = v4;
    a2[2] = v6 | 0x8000000000000000;
    *a2 = v7;
    a2 = v7;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memcpy(a2, __str, v4);
  *((unsigned char *)a2 + v4) = 0;
  return result;
}

void sub_24C6B7D14(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v29 = 11;
  strcpy((char *)v28, "parse_error");
  sub_24C6B9378(v28, a1, &v30);
  unint64_t v8 = std::string::append(&v30, "parse error", 0xBuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (a2)
  {
    std::to_string(&v25, a2);
    char v10 = std::string::insert(&v25, 0, " at byte ", 9uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unsigned int v12 = HIBYTE(v27);
  }
  else
  {
    unsigned int v12 = 0;
    HIBYTE(v27) = 0;
    LOBYTE(__p[0]) = 0;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v13 = __p;
  }
  else {
    std::string::size_type v13 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v14 = v12;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  unint64_t v15 = std::string::append(&v31, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v32, ": ", 2uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = *(char *)(a3 + 23);
  if (v19 >= 0) {
    int v20 = (const std::string::value_type *)a3;
  }
  else {
    int v20 = *(const std::string::value_type **)a3;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v21 = *(void *)(a3 + 8);
  }
  unint64_t v22 = std::string::append(&v33, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  int64_t v35 = v22->__r_.__value_.__r.__words[2];
  long long v34 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      operator delete(__p[0]);
      if (!a2) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0) {
    goto LABEL_23;
  }
LABEL_19:
  if (!a2)
  {
LABEL_25:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_34;
  }
LABEL_24:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_25;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
LABEL_27:
  if ((v29 & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_36:
  operator delete((void *)v28[0]);
LABEL_28:
  if (v35 >= 0) {
    unint64_t v24 = (const char *)&v34;
  }
  else {
    unint64_t v24 = (const char *)v34;
  }
  *(void *)a4 = &unk_26FEDDA08;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v24);
  *(void *)a4 = &unk_26FEDD9B8;
  *(void *)(a4 + 32) = a2;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
}

void sub_24C6B7FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a40 < 0)
  {
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a28 & 0x80000000) == 0) {
LABEL_10:
      }
        _Unwind_Resume(exception_object);
LABEL_9:
      operator delete(a23);
      goto LABEL_10;
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a29);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_24C6B80F8(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = xmmword_24C72F5C0;
  strcpy(v29.__r_.__value_.__l.__data_, "syntax error while parsing ");
  if ((a1 - 1) < 4) {
    std::string::append(&v29, off_2652E80E8[a1 - 1], qword_24C730488[a1 - 1]);
  }
  int v8 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = size + 1;
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (v10 >= 0x17)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size) {
      goto LABEL_17;
    }
  }
  if (v8 >= 0) {
    std::string::size_type v14 = &v29;
  }
  else {
    std::string::size_type v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  memmove(p_dst, v14, size);
LABEL_17:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 32;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    long long v16 = (const std::string::value_type *)a3;
  }
  else {
    long long v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  long long v18 = std::string::append(&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v27, ": ", 2uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = *(char *)(a2 + 23);
  if (v22 >= 0) {
    long long v23 = (const std::string::value_type *)a2;
  }
  else {
    long long v23 = *(const std::string::value_type **)a2;
  }
  if (v22 >= 0) {
    std::string::size_type v24 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v24 = *(void *)(a2 + 8);
  }
  std::string v25 = std::string::append(&v28, v23, v24);
  *a4 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_37:
    operator delete(v29.__r_.__value_.__l.__data_);
    return;
  }
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
}

void sub_24C6B8344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_24C6B83F0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_24C6B8444(unsigned __int8 **a1, int a2, int *a3)
{
  ++a1[3];
  uint64_t v6 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  uint64_t result = sub_24C6B8B9C(a1, a2, "number");
  if (result)
  {
    int v9 = *((unsigned char *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
    char v10 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
    ++a1[3];
    long long v11 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (result)
    {
      char v13 = *((unsigned char *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
      char v14 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
      ++a1[3];
      int v15 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v16 = -1;
      }
      else
      {
        uint64_t v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      uint64_t result = sub_24C6B8B9C(a1, a2, "number");
      if (result)
      {
        unsigned __int8 v17 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : v13;
        unsigned __int8 v18 = *((unsigned char *)a1 + 32) ? v14 : *((_DWORD *)a1 + 4);
        ++a1[3];
        long long v19 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v20 = -1;
        }
        else
        {
          uint64_t v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        uint64_t result = sub_24C6B8B9C(a1, a2, "number");
        if (result)
        {
          int v21 = *((_DWORD *)a1 + 4);
          if (*((unsigned char *)a1 + 32)) {
            int v22 = *((_DWORD *)a1 + 4);
          }
          else {
            int v22 = v9;
          }
          if (*((unsigned char *)a1 + 32)) {
            LOBYTE(v21) = v10;
          }
          *a3 = (v17 << 16) | (v22 << 24) | (v18 << 8) | v21;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_24C6B85FC(uint64_t a1, unint64_t a2)
{
  v32.__r_.__value_.__s.__data_[0] = 1;
  uint64_t v4 = sub_24C6B8D80((unsigned __int8 **)a1, (unsigned __int8 *)&v32);
  uint64_t v5 = v4;
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  int v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *uint64_t v7 = v4;
    uint64_t v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v11 = ((char *)v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_24C667470();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_24C66DB48();
    }
    int v15 = (char *)operator new(8 * v14);
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    unsigned __int8 v17 = &v15[8 * v14];
    uint64_t *v16 = v5;
    uint64_t v9 = (uint64_t)(v16 + 1);
    unsigned __int8 v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  uint64_t v16 = (uint64_t *)(8 * v11);
  unsigned __int8 v17 = 0;
  *(void *)(8 * v11) = v5;
  uint64_t v9 = 8 * v11 + 8;
  unsigned __int8 v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    int v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v16 = (uint64_t *)((char *)v16 - v21);
    int v22 = &v15[8 * v11 - 16];
    long long v23 = v7 - 2;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)int v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *--v8;
        *--uint64_t v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    int v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *(void *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    unint64_t v27 = **(char **)(v9 - 8);
    if (v27 > 2) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = qword_24C7304A8[v27];
    }
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v31, a2);
      sub_24C66A45C("excessive object size: ", &v31, &v32);
      sub_24C6B9018(408, (uint64_t)&v32, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26FEDD6E8, (void (*)(void *))sub_24C6B91B8);
    }
  }
  return 1;
}

void sub_24C6B883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_24C6B889C(unsigned __int8 **a1, int a2)
{
  int v23 = a2;
  std::string __p = 0;
  size_t v25 = 0;
  unint64_t v26 = 0;
  ++a1[3];
  std::string::size_type v3 = *a1;
  if (*a1 == a1[1])
  {
LABEL_40:
    uint64_t v4 = -1;
    a1[2] = (unsigned __int8 *)-1;
LABEL_5:
    if (sub_24C6B8B9C(a1, 4, "element list"))
    {
      unint64_t v6 = (unint64_t)a1[3];
      for (unint64_t i = v6; ; unint64_t i = (unint64_t)a1[3])
      {
        a1[3] = (unsigned __int8 *)(i + 1);
        uint64_t v11 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v12 = -1;
        }
        else
        {
          uint64_t v12 = *v11;
          *a1 = v11 + 1;
        }
        a1[2] = (unsigned __int8 *)v12;
        if (!sub_24C6B8B9C(a1, 4, "cstring")) {
          goto LABEL_44;
        }
        uint64_t v13 = a1[2];
        if (!v13)
        {
          if ((v23 & 1) == 0)
          {
            unint64_t v19 = a1[5];
            uint64_t v20 = *(uint64_t ***)(*(void *)(*((void *)v19 + 2) - 8) + 8);
            p_p = &__p;
            *((void *)v19 + 4) = sub_24C6B9CF8(v20, (const void **)&__p, (uint64_t)&unk_24C72FF38, (long long **)&p_p)
                                 + 7;
          }
          if (!sub_24C6B973C((uint64_t)a1, v4, v6)) {
            goto LABEL_44;
          }
          if (SHIBYTE(v26) < 0)
          {
            *(unsigned char *)std::string __p = 0;
            size_t v25 = 0;
            ++a1[3];
            std::string::size_type v3 = *a1;
            if (*a1 == a1[1]) {
              goto LABEL_40;
            }
            goto LABEL_4;
          }
          LOBYTE(__p) = 0;
          HIBYTE(v26) = 0;
          ++a1[3];
          std::string::size_type v3 = *a1;
          if (*a1 != a1[1]) {
            goto LABEL_4;
          }
          goto LABEL_40;
        }
        if ((SHIBYTE(v26) & 0x80000000) == 0) {
          break;
        }
        size_t v8 = (v26 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v25 == v8)
        {
          if ((v26 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
            sub_24C6673C8();
          }
          unint64_t v14 = __p;
          if (v8 <= 0x3FFFFFFFFFFFFFF2) {
            goto LABEL_19;
          }
          size_t v17 = 0x7FFFFFFFFFFFFFF7;
LABEL_27:
          unsigned __int8 v18 = (char *)operator new(v17);
          uint64_t v9 = v18;
          if (!v8 || (memmove(v18, v14, v8), v8 != 22)) {
            operator delete(v14);
          }
          std::string __p = v9;
          unint64_t v26 = v17 | 0x8000000000000000;
          goto LABEL_32;
        }
        uint64_t v9 = (char *)__p;
        size_t v8 = v25;
LABEL_32:
        size_t v25 = v8 + 1;
LABEL_8:
        char v10 = &v9[v8];
        char *v10 = (char)v13;
        v10[1] = 0;
      }
      if (HIBYTE(v26) != 22)
      {
        size_t v8 = HIBYTE(v26);
        HIBYTE(v26) = (HIBYTE(v26) + 1) & 0x7F;
        uint64_t v9 = (char *)&__p;
        goto LABEL_8;
      }
      unint64_t v14 = &__p;
      size_t v8 = 22;
LABEL_19:
      if (v8 + 1 > 2 * v8) {
        unint64_t v15 = v8 + 1;
      }
      else {
        unint64_t v15 = 2 * v8;
      }
      uint64_t v16 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v16 = v15 | 7;
      }
      if (v15 >= 0x17) {
        size_t v17 = v16 + 1;
      }
      else {
        size_t v17 = 23;
      }
      goto LABEL_27;
    }
LABEL_44:
    uint64_t v21 = 0;
    if (SHIBYTE(v26) < 0) {
      goto LABEL_42;
    }
    return v21;
  }
LABEL_4:
  unsigned int v5 = *v3;
  uint64_t v4 = v5;
  *a1 = v3 + 1;
  a1[2] = (unsigned __int8 *)v5;
  if (v5) {
    goto LABEL_5;
  }
  uint64_t v21 = 1;
  if (SHIBYTE(v26) < 0) {
LABEL_42:
  }
    operator delete(__p);
  return v21;
}

void sub_24C6B8B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6B8B9C(void *a1, int a2, char *a3)
{
  if (a1[2] == -1)
  {
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[3];
    sub_24C6698FC(v17, "<end of file>");
    unint64_t v10 = a1[3];
    sub_24C6698FC(v13, "unexpected end of input");
    sub_24C6698FC(v11, a3);
    sub_24C6B80F8(a2, (uint64_t)v13, (uint64_t)v11, &__p);
    sub_24C6B7D14(110, v10, (uint64_t)&__p, (uint64_t)v16);
    uint64_t v3 = sub_24C6B7BD4(v8, v9, (uint64_t)v17, (uint64_t)v16);
    sub_24C6B83F0(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v14 & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v11[0]);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v18 & 0x80000000) == 0) {
        return v3;
      }
LABEL_12:
      operator delete(v17[0]);
      return v3;
    }
LABEL_11:
    operator delete(v13[0]);
    if ((v18 & 0x80000000) == 0) {
      return v3;
    }
    goto LABEL_12;
  }
  return 1;
}

void sub_24C6B8CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v28 - 49) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_24C6B8D80(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = *a2;
    switch(*a2)
    {
      case 1u:
        uint64_t v9 = operator new(0x18uLL);
        v9[2] = 0;
        v9[1] = 0;
        *uint64_t v9 = v9 + 1;
        break;
      case 2u:
        uint64_t v9 = operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *uint64_t v9 = 0;
        break;
      case 3u:
        uint64_t v9 = operator new(0x18uLL);
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        break;
      case 4u:
        LOBYTE(v22) = 0;
        uint64_t v9 = v22;
        break;
      case 8u:
        uint64_t v9 = operator new(0x20uLL);
        v9[1] = 0;
        v9[2] = 0;
        *uint64_t v9 = 0;
        *((_WORD *)v9 + 12) = 0;
        break;
      default:
        break;
    }
    uint64_t v14 = (uint64_t)*a1;
    int v15 = **a1;
    *(unsigned char *)uint64_t v14 = v10;
    char v21 = v15;
    uint64_t v16 = *(void *)(v14 + 8);
    *(void *)(v14 + 8) = v9;
    int v22 = (void *)v16;
    sub_24C6B5428((uint64_t *)&v22, v15);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(unsigned char **)(v5 + 8);
      if ((unint64_t)v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_24C6B920C((void **)v5, a2);
      }
      else
      {
        int v7 = *a2;
        *unint64_t v6 = v7;
        sub_24C6C50B8(v6 + 8, v7);
        uint64_t v8 = v6 + 16;
        *(void *)(v5 + 8) = v6 + 16;
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v11 = 0;
      unsigned __int8 v12 = *a2;
      switch(*a2)
      {
        case 1u:
          uint64_t v11 = operator new(0x18uLL);
          v11[2] = 0;
          v11[1] = 0;
          *uint64_t v11 = v11 + 1;
          break;
        case 2u:
          uint64_t v11 = operator new(0x18uLL);
          v11[1] = 0;
          v11[2] = 0;
          *uint64_t v11 = 0;
          break;
        case 3u:
          uint64_t v11 = operator new(0x18uLL);
          *((unsigned char *)v11 + 23) = 0;
          *(unsigned char *)uint64_t v11 = 0;
          break;
        case 4u:
          LOBYTE(v20) = 0;
          uint64_t v11 = v20;
          break;
        case 8u:
          uint64_t v11 = operator new(0x20uLL);
          v11[1] = 0;
          v11[2] = 0;
          *uint64_t v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          break;
        default:
          break;
      }
      size_t v17 = a1[4];
      int v18 = *v17;
      unsigned __int8 *v17 = v12;
      uint64_t v19 = *((void *)v17 + 1);
      *((void *)v17 + 1) = v11;
      uint64_t v20 = (void *)v19;
      sub_24C6B5428((uint64_t *)&v20, v18);
      return (uint64_t)a1[4];
    }
  }
}

void sub_24C6B9018(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_24C6B9378((const void **)__p, a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int v7 = (const std::string::value_type *)a2;
  }
  else {
    int v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_26FEDDA08;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_26FEDD9E0;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_24C6B9168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_24C6B91B8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

char *sub_24C6B920C(void **a1, unsigned __int8 *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_24C66DB48();
    }
    std::string::size_type v8 = (char *)operator new(16 * v7);
  }
  else
  {
    std::string::size_type v8 = 0;
  }
  uint64_t v19 = &v8[16 * v3];
  uint64_t v20 = &v8[16 * v7];
  int v9 = *a2;
  char *v19 = v9;
  sub_24C6C50B8(v19 + 8, v9);
  long long v10 = v19;
  uint64_t v11 = v19 + 16;
  char v13 = (uint64_t *)*a1;
  unsigned __int8 v12 = (uint64_t *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v14 = *((unsigned char *)v12 - 16);
      v12 -= 2;
      *(v10 - 16) = v14;
      v10 -= 16;
      *((void *)v10 + 1) = v12[1];
      *(unsigned char *)unsigned __int8 v12 = 0;
      v12[1] = 0;
    }
    while (v12 != v13);
    int v15 = (uint64_t *)*a1;
    unsigned __int8 v12 = (uint64_t *)a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v20;
    if (v12 != v15)
    {
      int64_t v16 = v12 - 1;
      do
      {
        size_t v17 = v16 - 1;
        sub_24C6B5428(v16, *((unsigned __int8 *)v16 - 8));
        v16 -= 2;
      }
      while (v17 != v15);
      unsigned __int8 v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 16;
}

void sub_24C6B9364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6B5B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6B9378(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  unint64_t v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    unsigned __int8 v12 = operator new(v10 + 1);
    int v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    _OWORD *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    int v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    char v13 = a1;
  }
  else {
    char v13 = *a1;
  }
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  char v14 = std::string::append(&v22, ".", 1uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v16 = &v21;
  }
  else {
    int64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  int v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
}

void sub_24C6B9574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_24C6B9610(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

const char *sub_24C6B9678(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_24C6B9680(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_24C6B96D4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6B973C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a2)
  {
    case 1:
      __dst[0] = 0;
      uint64_t v5 = sub_24C6B9EE8((unsigned __int8 **)a1, 4, (unint64_t *)__dst);
      if (v5)
      {
        unint64_t v6 = *(unsigned __int8 ***)(a1 + 40);
        __p.__r_.__value_.__l.__data_ = (std::string::pointer)__dst[0];
        sub_24C6BA7E8(v6, (uint64_t *)&__p);
      }
      return v5;
    case 2:
      LODWORD(__dst[0]) = 0;
      memset(&__p, 0, sizeof(__p));
      if (sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)__dst)
        && sub_24C6BA22C(a1, (int)__dst[0], &__p))
      {
        sub_24C6BAA30(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        uint64_t v5 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v5 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_33:
          char v13 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_36;
        }
      }
      return v5;
    case 3:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)&__p);
      if (!sub_24C6B85FC(*(void *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        || !sub_24C6B889C(a1, 0))
      {
        return 0;
      }
      goto LABEL_19;
    case 4:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)&__p);
      if (!sub_24C6BAE30(*(void *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL)
        || !sub_24C6B889C(a1, 1))
      {
        return 0;
      }
LABEL_19:
      *(void *)(*(void *)(a1 + 40) + 16) -= 8;
      return 1;
    case 5:
      LODWORD(__dst[0]) = 0;
      memset(&__p, 0, sizeof(__p));
      __int16 v34 = 0;
      if (sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)__dst)
        && sub_24C6BA52C((void *)a1, (int)__dst[0], (uint64_t)&__p))
      {
        sub_24C6BB3D4(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        uint64_t v5 = 1;
        char v13 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          return v5;
        }
      }
      else
      {
        uint64_t v5 = 0;
        char v13 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          return v5;
        }
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
LABEL_36:
      operator delete(v13);
      return v5;
    case 8:
      unint64_t v7 = *(unsigned __int8 ***)(a1 + 40);
      ++*(void *)(a1 + 24);
      std::string::size_type v8 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v9 = -1;
      }
      else
      {
        uint64_t v9 = *v8;
        *(void *)a1 = v8 + 1;
      }
      *(void *)(a1 + 16) = v9;
      __p.__r_.__value_.__s.__data_[0] = v9 != 0;
      sub_24C6BB7F8(v7, (unsigned __int8 *)&__p);
      return 1;
    case 10:
      uint64_t v10 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = 0;
      sub_24C6BBA40(v10);
      return 1;
    case 16:
      LODWORD(__dst[0]) = 0;
      uint64_t v5 = sub_24C6B8444((unsigned __int8 **)a1, 4, (int *)__dst);
      if (!v5) {
        return v5;
      }
      uint64_t v11 = *(unsigned __int8 ***)(a1 + 40);
      std::string::size_type v12 = SLODWORD(__dst[0]);
      goto LABEL_27;
    case 18:
      __dst[0] = 0;
      uint64_t v5 = sub_24C6B9EE8((unsigned __int8 **)a1, 4, (unint64_t *)__dst);
      if (!v5) {
        return v5;
      }
      uint64_t v11 = *(unsigned __int8 ***)(a1 + 40);
      std::string::size_type v12 = (std::string::size_type)__dst[0];
LABEL_27:
      __p.__r_.__value_.__r.__words[0] = v12;
      sub_24C6BBC60(v11, (uint64_t *)&__p);
      return v5;
    default:
      char v38 = 0;
      *(_WORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2hhX", a2);
      uint64_t v14 = *(void *)(a1 + 40);
      size_t v15 = strlen(__str);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      size_t v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v18 = v15 | 7;
        }
        uint64_t v19 = v18 + 1;
        size_t v17 = (void **)operator new(v18 + 1);
        __dst[0] = v17;
        unint64_t v36 = v19 | 0x8000000000000000;
      }
      else
      {
        HIBYTE(v36) = v15;
        size_t v17 = __dst;
        if (!v15) {
          goto LABEL_41;
        }
      }
      memcpy(v17, __str, v16);
LABEL_41:
      *((unsigned char *)v17 + v16) = 0;
      size_t v20 = strlen(__str);
      if (v20 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      std::string::size_type v21 = v20;
      if (v20 >= 0x17)
      {
        uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v23 = v20 | 7;
        }
        uint64_t v24 = v23 + 1;
        std::string v22 = operator new(v23 + 1);
        v30.__r_.__value_.__l.__size_ = v21;
        v30.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      }
      else
      {
        *((unsigned char *)&v30.__r_.__value_.__s + 23) = v20;
        std::string v22 = &v30;
        if (!v20) {
          goto LABEL_49;
        }
      }
      memcpy(v22, __str, v21);
LABEL_49:
      *((unsigned char *)v22 + v21) = 0;
      size_t v25 = std::string::insert(&v30, 0, "Unsupported BSON record type 0x", 0x1FuLL);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string v31 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      sub_24C6B7D14(114, a3, (uint64_t)v31, (uint64_t)&__p);
      *(unsigned char *)(v14 + 40) = 1;
      if (*(unsigned char *)(v14 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        std::string v29 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&__p);
        __cxa_throw(v29, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FEDDA08;
      std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v32) < 0)
      {
        operator delete(v31[0]);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          if ((SHIBYTE(v36) & 0x80000000) == 0) {
            return 0;
          }
          goto LABEL_57;
        }
      }
      else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36) & 0x80000000) == 0) {
        return 0;
      }
LABEL_57:
      operator delete(__dst[0]);
      return 0;
  }
}

void sub_24C6B9C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26)
{
  sub_24C6B83F0(&a22);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((*(char *)(v26 - 57) & 0x80000000) == 0) {
LABEL_9:
      }
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(*(void **)(v26 - 80));
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v26 - 57) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

uint64_t **sub_24C6B9CF8(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v11 = (uint64_t **)v6;
      uint64_t v14 = (const void *)v6[4];
      std::string::size_type v12 = v6 + 4;
      char v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        unint64_t v6 = v11[1];
        if (!v6)
        {
          unint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        unint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v11 = a1 + 1;
LABEL_29:
  std::string::size_type v21 = (char *)operator new(0x48uLL);
  std::string v22 = v21 + 32;
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v22, *(void **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    *((void *)v21 + 6) = *((void *)v23 + 2);
    *(_OWORD *)std::string v22 = v24;
  }
  v21[56] = 0;
  *((void *)v21 + 8) = 0;
  *(void *)std::string::size_type v21 = 0;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = v11;
  *unint64_t v7 = (uint64_t *)v21;
  size_t v25 = (uint64_t *)**a1;
  uint64_t v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    uint64_t v26 = *v7;
  }
  sub_24C681E28(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_24C6B9E78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6B9E8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_24C6B5428((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_24C6B9EE8(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  ++a1[3];
  unint64_t v6 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  uint64_t result = sub_24C6B8B9C(a1, a2, "number");
  if (result)
  {
    uint64_t v9 = *((unsigned char *)a1 + 32) ? 0 : a1[2];
    if (*((unsigned char *)a1 + 32)) {
      size_t v10 = a1[2];
    }
    else {
      LOBYTE(v10) = 0;
    }
    ++a1[3];
    uint64_t v11 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (result)
    {
      if (*((unsigned char *)a1 + 32)) {
        LOBYTE(v13) = 0;
      }
      else {
        char v13 = a1[2];
      }
      if (*((unsigned char *)a1 + 32)) {
        uint64_t v14 = a1[2];
      }
      else {
        LOBYTE(v14) = 0;
      }
      ++a1[3];
      int v15 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v16 = -1;
      }
      else
      {
        uint64_t v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      uint64_t result = sub_24C6B8B9C(a1, a2, "number");
      if (result)
      {
        if (*((unsigned char *)a1 + 32)) {
          LOBYTE(v17) = 0;
        }
        else {
          size_t v17 = a1[2];
        }
        if (*((unsigned char *)a1 + 32)) {
          size_t v18 = a1[2];
        }
        else {
          LOBYTE(v18) = 0;
        }
        ++a1[3];
        int v19 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v20 = -1;
        }
        else
        {
          uint64_t v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        uint64_t result = sub_24C6B8B9C(a1, a2, "number");
        if (result)
        {
          char v39 = (char)v13;
          char v40 = (char)v18;
          std::string::size_type v21 = a3;
          if (*((unsigned char *)a1 + 32)) {
            LOBYTE(v22) = 0;
          }
          else {
            std::string v22 = a1[2];
          }
          if (*((unsigned char *)a1 + 32)) {
            uint64_t v23 = a1[2];
          }
          else {
            LODWORD(v23) = 0;
          }
          ++a1[3];
          long long v24 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v25 = -1;
          }
          else
          {
            uint64_t v25 = *v24;
            *a1 = v24 + 1;
          }
          a1[2] = (unsigned __int8 *)v25;
          uint64_t result = sub_24C6B8B9C(a1, a2, "number");
          if (result)
          {
            uint64_t v26 = v9;
            char v38 = (char)v10;
            if (*((unsigned char *)a1 + 32)) {
              unint64_t v27 = a1[2];
            }
            else {
              LOBYTE(v27) = (_BYTE)v22;
            }
            if (!*((unsigned char *)a1 + 32)) {
              uint64_t v23 = a1[2];
            }
            ++a1[3];
            uint64_t v28 = *a1;
            if (*a1 == a1[1])
            {
              uint64_t v29 = -1;
            }
            else
            {
              uint64_t v29 = *v28;
              *a1 = v28 + 1;
            }
            a1[2] = (unsigned __int8 *)v29;
            uint64_t result = sub_24C6B8B9C(a1, a2, "number");
            if (result)
            {
              if (*((unsigned char *)a1 + 32))
              {
                size_t v17 = a1[2];
                LOBYTE(v30) = v40;
              }
              else
              {
                std::string v30 = a1[2];
              }
              ++a1[3];
              std::string v31 = *a1;
              if (*a1 == a1[1])
              {
                uint64_t v32 = -1;
              }
              else
              {
                uint64_t v32 = *v31;
                *a1 = v31 + 1;
              }
              a1[2] = (unsigned __int8 *)v32;
              uint64_t result = sub_24C6B8B9C(a1, a2, "number");
              if (result)
              {
                if (*((unsigned char *)a1 + 32)) {
                  std::string v33 = a1[2];
                }
                else {
                  LOBYTE(v33) = v39;
                }
                if (!*((unsigned char *)a1 + 32)) {
                  uint64_t v14 = a1[2];
                }
                ++a1[3];
                __int16 v34 = *a1;
                if (*a1 == a1[1])
                {
                  uint64_t v35 = -1;
                }
                else
                {
                  uint64_t v35 = *v34;
                  *a1 = v34 + 1;
                }
                a1[2] = (unsigned __int8 *)v35;
                uint64_t result = sub_24C6B8B9C(a1, a2, "number");
                if (result)
                {
                  unint64_t v36 = a1[2];
                  if (*((unsigned char *)a1 + 32)) {
                    uint64_t v37 = a1[2];
                  }
                  else {
                    uint64_t v37 = v26;
                  }
                  if (*((unsigned char *)a1 + 32)) {
                    LOBYTE(v36) = v38;
                  }
                  unint64_t *v21 = ((unint64_t)v33 << 48) | ((void)v37 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v27 << 32) | (v23 << 24) | ((unint64_t)v30 << 16) | ((unint64_t)v14 << 8) | v36;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_24C6BA22C(uint64_t a1, int a2, std::string *a3)
{
  if (a2 <= 0)
  {
    sub_24C6B7C34(a1, v23);
    uint64_t v15 = *(void *)(a1 + 40);
    unint64_t v16 = *(void *)(a1 + 24);
    std::to_string(&v19, a2);
    sub_24C66A45C("string length must be at least 1, is ", &v19, &v20);
    sub_24C6698FC(v17, "string");
    sub_24C6B80F8(4, (uint64_t)&v20, (uint64_t)v17, &__p);
    sub_24C6B7D14(112, v16, (uint64_t)&__p, (uint64_t)v22);
    uint64_t v13 = sub_24C6B7BD4(v15, v16, (uint64_t)v23, (uint64_t)v22);
    sub_24C6B83F0(v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v17[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v24 & 0x80000000) == 0) {
        return v13;
      }
LABEL_26:
      operator delete(v23[0]);
      return v13;
    }
LABEL_25:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0) {
      return v13;
    }
    goto LABEL_26;
  }
  int v5 = a2 - 1;
  if (a2 == 1) {
    goto LABEL_10;
  }
  BOOL v7 = 0;
  for (int i = 1; a2 != i; ++i)
  {
    ++*(void *)(a1 + 24);
    uint64_t v9 = *(unsigned __int8 **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8))
    {
      unsigned int v10 = *v9;
      *(void *)a1 = v9 + 1;
      *(void *)(a1 + 16) = v10;
      if (!sub_24C6B8B9C((void *)a1, 4, "string")) {
        break;
      }
      goto LABEL_6;
    }
    *(void *)(a1 + 16) = -1;
    if (!sub_24C6B8B9C((void *)a1, 4, "string")) {
      break;
    }
LABEL_6:
    std::string::push_back(a3, *(unsigned char *)(a1 + 16));
    BOOL v7 = i >= v5;
  }
  if (!v7) {
    return 0;
  }
LABEL_10:
  ++*(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    uint64_t v12 = -1;
  }
  else
  {
    uint64_t v12 = *v11;
    *(void *)a1 = v11 + 1;
  }
  *(void *)(a1 + 16) = v12;
  return v12 != -1;
}

void sub_24C6BA458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::runtime_error a33)
{
  sub_24C6B83F0(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v33 - 65) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a15);
  if ((*(char *)(v33 - 65) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)(v33 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_24C6BA52C(void *a1, int a2, uint64_t a3)
{
  if (a2 < 0)
  {
    sub_24C6B7C34((uint64_t)a1, v19);
    uint64_t v10 = a1[5];
    unint64_t v11 = a1[3];
    std::to_string(&v15, a2);
    sub_24C66A45C("byte array length cannot be negative, is ", &v15, &v16);
    sub_24C6698FC(v13, "binary");
    sub_24C6B80F8(4, (uint64_t)&v16, (uint64_t)v13, &__p);
    sub_24C6B7D14(112, v11, (uint64_t)&__p, (uint64_t)v18);
    uint64_t v12 = sub_24C6B7BD4(v10, v11, (uint64_t)v19, (uint64_t)v18);
    sub_24C6B83F0(v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_19;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v13[0]);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((v20 & 0x80000000) == 0) {
        return v12;
      }
LABEL_21:
      operator delete(v19[0]);
      return v12;
    }
LABEL_20:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_21;
  }
  ++a1[3];
  unint64_t v6 = (unsigned __int8 *)*a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = v7;
  if (sub_24C6B8B9C(a1, 4, "number")) {
    char v8 = *((unsigned char *)a1 + 16);
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(a3 + 24) = v8;
  *(unsigned char *)(a3 + 25) = 1;
  return sub_24C6BB154(a1, 4, a2, (void *)a3);
}

void sub_24C6BA714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::runtime_error a33)
{
  sub_24C6B83F0(&a33);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v33 - 33) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a15);
  if ((*(char *)(v33 - 33) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_24C6BA7E8(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 7;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_24C6B5428(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        char v8 = sub_24C6BA900((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 7;
        *(void *)(v6 + 8) = v7;
        char v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      std::string v15 = a1[4];
      int v16 = *v15;
      unsigned __int8 *v15 = 7;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_24C6B5428(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_24C6BA900(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 7;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      char v15 = *((unsigned char *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((void *)v11 + 1) = v3[1];
      *(unsigned char *)uint64_t v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    uint64_t v3 = (uint64_t *)*a1;
    int v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      uint64_t v3 = v16;
      if (!v16) {
        return v14;
      }
      goto LABEL_15;
    }
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_24C6B5428(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_15:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_24C6BAA30(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v10 = operator new(0x18uLL);
    int v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_24C66E0A8(v10, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
      v10[2] = *(void *)(a2 + 16);
    }
    uint64_t v15 = (uint64_t)*a1;
    int v16 = **a1;
    *(unsigned char *)uint64_t v15 = 3;
    char v23 = v16;
    uint64_t v17 = *(void *)(v15 + 8);
    *(void *)(v15 + 8) = v11;
    uint64_t v24 = v17;
    sub_24C6B5428(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v5 = *((void *)v4 - 1);
    if (*(unsigned char *)v5 == 2)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      unint64_t v7 = *(void *)(v6 + 8);
      if (v7 >= *(void *)(v6 + 16))
      {
        uint64_t v14 = sub_24C6BAC4C((uint64_t **)v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)unint64_t v7 = 3;
        char v8 = operator new(0x18uLL);
        uint64_t v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_24C66E0A8(v8, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)char v8 = *(_OWORD *)a2;
          v8[2] = *(void *)(a2 + 16);
        }
        *(void *)(v7 + 8) = v9;
        uint64_t v14 = (char *)(v7 + 16);
        *(void *)(v6 + 8) = v7 + 16;
      }
      *(void *)(v6 + 8) = v14;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v12 = operator new(0x18uLL);
      uint64_t v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_24C66E0A8(v12, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
        v12[2] = *(void *)(a2 + 16);
      }
      char v19 = a1[4];
      int v20 = *v19;
      unsigned __int8 *v19 = 3;
      uint64_t v21 = *((void *)v19 + 1);
      *((void *)v19 + 1) = v13;
      uint64_t v22 = v21;
      sub_24C6B5428(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_24C6BAC04(_Unwind_Exception *a1)
{
  operator delete(v2);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_24C6BAC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6BAC30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6BAC44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_24C6BAC4C(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = ((char *)v4 - (char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_24C66DB48();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[16 * v9];
  *((void *)v11 + 1) = 0;
  uint64_t v13 = v11 + 8;
  *int v11 = 3;
  uint64_t v14 = operator new(0x18uLL);
  uint64_t v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_24C66E0A8(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *uint64_t v13 = v15;
    int v16 = v11 + 16;
    uint64_t v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_18:
      *a1 = (uint64_t *)v11;
      a1[1] = (uint64_t *)v16;
      a1[2] = (uint64_t *)v12;
      goto LABEL_22;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    _OWORD v14[2] = *(void *)(a2 + 16);
    *uint64_t v13 = v14;
    int v16 = v11 + 16;
    uint64_t v22 = v11 + 16;
    if (v4 == v3) {
      goto LABEL_18;
    }
  }
  do
  {
    char v17 = *((unsigned char *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((void *)v11 + 1) = v4[1];
    *(unsigned char *)uint64_t v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v18 = *a1;
  uint64_t v3 = a1[1];
  int v16 = v22;
  *a1 = (uint64_t *)v11;
  a1[1] = (uint64_t *)v22;
  a1[2] = (uint64_t *)v12;
  if (v3 != v18)
  {
    char v19 = v3 - 1;
    do
    {
      int v20 = v19 - 1;
      sub_24C6B5428(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v18);
    uint64_t v3 = v18;
  }
LABEL_22:
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void sub_24C6BAE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  sub_24C6B5B64((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_24C6BAE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6B5B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6BAE30(uint64_t a1, unint64_t a2)
{
  v32.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v4 = sub_24C6B8D80((unsigned __int8 **)a1, (unsigned __int8 *)&v32);
  uint64_t v5 = v4;
  unint64_t v7 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *unint64_t v7 = v4;
    uint64_t v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v11 = ((char *)v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_24C667470();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_24C66DB48();
    }
    uint64_t v15 = (char *)operator new(8 * v14);
    int v16 = (uint64_t *)&v15[8 * v11];
    char v17 = &v15[8 * v14];
    uint64_t *v16 = v5;
    uint64_t v9 = (uint64_t)(v16 + 1);
    uint64_t v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  int v16 = (uint64_t *)(8 * v11);
  char v17 = 0;
  *(void *)(8 * v11) = v5;
  uint64_t v9 = 8 * v11 + 8;
  uint64_t v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    int v16 = (uint64_t *)((char *)v16 - v21);
    uint64_t v22 = &v15[8 * v11 - 16];
    char v23 = v7 - 2;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *--v8;
        *--int v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    uint64_t v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *(void *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    unint64_t v27 = **(char **)(v9 - 8);
    if (v27 > 2) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = qword_24C7304A8[v27];
    }
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v31, a2);
      sub_24C66A45C("excessive array size: ", &v31, &v32);
      sub_24C6B9018(408, (uint64_t)&v32, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26FEDD6E8, (void (*)(void *))sub_24C6B91B8);
    }
  }
  return 1;
}

void sub_24C6BB070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_24C6BB0D0(unsigned __int8 **a1, int a2, unsigned char *a3)
{
  ++a1[3];
  uint64_t v5 = *a1;
  if (*a1 == a1[1])
  {
    a1[2] = (unsigned __int8 *)-1;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (!result) {
      return result;
    }
  }
  else
  {
    unsigned int v6 = *v5;
    *a1 = v5 + 1;
    a1[2] = (unsigned __int8 *)v6;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (!result) {
      return result;
    }
  }
  *a3 = a1[2];
  return result;
}

BOOL sub_24C6BB154(void *a1, uint64_t a2, int a3, void *a4)
{
  if (a3 >= 1)
  {
    int v5 = a3;
    BOOL v8 = 0;
    int v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        uint64_t v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        else
        {
          unsigned int v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        char v12 = *((unsigned char *)a1 + 16);
        unint64_t v14 = (unsigned char *)a4[1];
        unint64_t v13 = a4[2];
        if ((unint64_t)v14 >= v13) {
          break;
        }
        unsigned char *v14 = v12;
        a4[1] = v14 + 1;
        BOOL v8 = ++v9 >= v5;
        if (v9 == v5) {
          return v8;
        }
      }
      uint64_t v15 = (unsigned char *)*a4;
      unint64_t v16 = (unint64_t)&v14[-*a4];
      unint64_t v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0) {
        sub_24C667470();
      }
      uint64_t v18 = a2;
      unint64_t v19 = v13 - (void)v15;
      if (2 * v19 > v17) {
        unint64_t v17 = 2 * v19;
      }
      size_t v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20) {
        break;
      }
      int v21 = 0;
      uint64_t v22 = &v14[-*a4];
      *(unsigned char *)unint64_t v16 = v12;
      uint64_t v23 = v16 + 1;
      if (v14 != v15) {
        goto LABEL_17;
      }
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14) {
        operator delete(v14);
      }
      a2 = v18;
      int v5 = a3;
      a4[1] = v23;
      BOOL v8 = ++v9 >= a3;
      if (v9 == a3) {
        return v8;
      }
    }
    int v21 = (char *)operator new(v20);
    uint64_t v22 = &v21[v16];
    v21[v16] = v12;
    uint64_t v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15) {
      goto LABEL_33;
    }
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        unint64_t v24 = 0;
        goto LABEL_25;
      }
      unint64_t v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      long long v25 = &v21[v16 - 16];
      uint64_t v26 = (long long *)(v14 - 16);
      unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)long long v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24) {
        goto LABEL_32;
      }
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v29 = &v21[&v14[-v24] - v15 - 8];
        std::string v30 = (uint64_t *)&v14[-v24 - 8];
        unint64_t v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v32 = *v30--;
          *(void *)uint64_t v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    uint64_t v33 = v22 - 1;
    do
    {
      char v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    unint64_t v14 = (unsigned char *)*a4;
    uint64_t v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

uint64_t sub_24C6BB3D4(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    v17[0] = 0;
    uint64_t v18 = 0;
    sub_24C6BB52C((uint64_t)v17, a2);
    uint64_t v8 = (uint64_t)*a1;
    int v9 = **a1;
    *(unsigned char *)uint64_t v8 = v17[0];
    v17[0] = v9;
    uint64_t v10 = *(void *)(v8 + 8);
    *(void *)(v8 + 8) = v18;
    uint64_t v18 = v10;
    sub_24C6B5428(&v18, v9);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      int v5 = *(uint64_t **)(v4 + 8);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = sub_24C6BB694(v5, a2);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        sub_24C6BB52C(v6, a2);
        uint64_t v7 = v6 + 16;
        v5[1] = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v15[0] = 0;
      uint64_t v16 = 0;
      sub_24C6BB52C((uint64_t)v15, a2);
      char v12 = a1[4];
      int v13 = *v12;
      unsigned __int8 *v12 = v15[0];
      v15[0] = v13;
      uint64_t v14 = *((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = v14;
      sub_24C6B5428(&v16, v13);
      return (uint64_t)a1[4];
    }
  }
}

void sub_24C6BB524(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_24C6BB52C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 8;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  size_t v6 = v4 - *(void *)a2;
  if (v4 == *(void *)a2)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_24C667470();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    uint64_t v8 = &v7[v6];
    memcpy(v7, v5, v6);
  }
  __int16 v9 = *(_WORD *)(a2 + 24);
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  size_t v11 = v8 - v7;
  if (v8 != v7)
  {
    if ((v11 & 0x8000000000000000) != 0) {
      sub_24C667470();
    }
    char v12 = (char *)operator new(v8 - v7);
    void *v10 = v12;
    int v13 = &v12[v11];
    v10[2] = &v12[v11];
    memcpy(v12, v7, v11);
    v10[1] = v13;
  }
  *((_WORD *)v10 + 12) = v9;
  *(void *)(a1 + 8) = v10;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_24C6BB648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6BB694(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  uint64_t v11 = (uint64_t)&v10[16 * v3];
  char v12 = &v10[v9];
  *(unsigned char *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  sub_24C6BB52C(v11, a2);
  uint64_t v13 = v11 + 16;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
  }
  else
  {
    do
    {
      char v16 = *(v14 - 16);
      v14 -= 16;
      *(unsigned char *)(v11 - 16) = v16;
      v11 -= 16;
      *(void *)(v11 + 8) = *((void *)v14 + 1);
      char *v14 = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v15);
    unint64_t v17 = (uint64_t *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (v14 != (char *)v17)
    {
      uint64_t v18 = (uint64_t *)(v14 - 8);
      do
      {
        unint64_t v19 = v18 - 1;
        sub_24C6B5428(v18, *((unsigned __int8 *)v18 - 8));
        v18 -= 2;
      }
      while (v19 != v17);
      uint64_t v14 = (char *)v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_24C6BB7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6B5B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6BB7F8(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 4;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_24C6B5428(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_24C6BB910((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 4;
        *(void *)(v6 + 8) = v7;
        uint64_t v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      uint64_t v15 = a1[4];
      int v16 = *v15;
      unsigned __int8 *v15 = 4;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_24C6B5428(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_24C6BB910(void **a1, unsigned __int8 *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 4;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      char v15 = *((unsigned char *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((void *)v11 + 1) = v3[1];
      *(unsigned char *)uint64_t v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    uint64_t v3 = (uint64_t *)*a1;
    int v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      uint64_t v3 = v16;
      if (!v16) {
        return v14;
      }
      goto LABEL_15;
    }
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_24C6B5428(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_15:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_24C6BBA40(unsigned __int8 **a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    uint64_t v7 = (uint64_t)*a1;
    int v8 = **a1;
    *(unsigned char *)uint64_t v7 = 0;
    char v15 = v8;
    uint64_t v9 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    uint64_t v16 = v9;
    sub_24C6B5428(&v16, v8);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v3 = *((void *)v2 - 1);
    if (*(unsigned char *)v3 == 2)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      unint64_t v5 = *(void *)(v4 + 8);
      if (v5 >= *(void *)(v4 + 16))
      {
        unint64_t v6 = sub_24C6BBB3C((void **)v4);
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        unint64_t v6 = (char *)(v5 + 16);
      }
      *(void *)(v4 + 8) = v6;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      int v11 = a1[4];
      int v12 = *v11;
      *int v11 = 0;
      uint64_t v13 = *((void *)v11 + 1);
      *((void *)v11 + 1) = 0;
      uint64_t v14 = v13;
      sub_24C6B5428(&v14, v12);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_24C6BBB3C(void **a1)
{
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v4 = ((char *)v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)v3;
  if (v6 >> 3 > v5) {
    unint64_t v5 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v7 = 16 * v5;
  int v8 = (char *)operator new(16 * v5);
  uint64_t v9 = &v8[16 * v4];
  uint64_t v10 = &v8[v7];
  *uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  int v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      char v12 = *((unsigned char *)v2 - 16);
      v2 -= 2;
      *(v9 - 16) = v12;
      v9 -= 16;
      *((void *)v9 + 1) = v2[1];
      *(unsigned char *)uint64_t v2 = 0;
      v2[1] = 0;
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*a1;
    uint64_t v13 = (uint64_t *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v13 == v2)
    {
      uint64_t v2 = v13;
      if (!v13) {
        return v11;
      }
      goto LABEL_15;
    }
    uint64_t v14 = v13 - 1;
    do
    {
      char v15 = v14 - 1;
      sub_24C6B5428(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2) {
LABEL_15:
  }
    operator delete(v2);
  return v11;
}

uint64_t sub_24C6BBC60(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 5;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_24C6B5428(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        int v8 = sub_24C6BBD78((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 5;
        *(void *)(v6 + 8) = v7;
        int v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      char v15 = a1[4];
      int v16 = *v15;
      unsigned __int8 *v15 = 5;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_24C6B5428(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_24C6BBD78(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 5;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      char v15 = *((unsigned char *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((void *)v11 + 1) = v3[1];
      *(unsigned char *)uint64_t v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    uint64_t v3 = (uint64_t *)*a1;
    int v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      uint64_t v3 = v16;
      if (!v16) {
        return v14;
      }
      goto LABEL_15;
    }
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_24C6B5428(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_15:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_24C6BBEA8(unsigned __int8 **a1, int a2, _WORD *a3)
{
  ++a1[3];
  unint64_t v6 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  uint64_t result = sub_24C6B8B9C(a1, a2, "number");
  if (result)
  {
    __int16 v9 = *((unsigned __int8 *)a1 + 16);
    ++a1[3];
    uint64_t v10 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v11 = -1;
    }
    else
    {
      uint64_t v11 = *v10;
      *a1 = v10 + 1;
    }
    a1[2] = (unsigned __int8 *)v11;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (result)
    {
      unsigned __int8 v12 = *((unsigned char *)a1 + 16);
      if (*((unsigned char *)a1 + 32)) {
        __int16 v13 = v9;
      }
      else {
        __int16 v13 = *((unsigned __int8 *)a1 + 16);
      }
      if (!*((unsigned char *)a1 + 32)) {
        unsigned __int8 v12 = v9;
      }
      *a3 = v12 | (unsigned __int16)(v13 << 8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_24C6BBF84(unsigned __int8 **a1, int a2, int *a3)
{
  ++a1[3];
  unint64_t v6 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  uint64_t result = sub_24C6B8B9C(a1, a2, "number");
  if (result)
  {
    int v9 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
    char v10 = *((unsigned char *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
    ++a1[3];
    uint64_t v11 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (result)
    {
      char v13 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : 0;
      char v14 = *((unsigned char *)a1 + 32) ? 0 : *((_DWORD *)a1 + 4);
      ++a1[3];
      char v15 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v16 = -1;
      }
      else
      {
        uint64_t v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      uint64_t result = sub_24C6B8B9C(a1, a2, "number");
      if (result)
      {
        unsigned __int8 v17 = *((unsigned char *)a1 + 32) ? v13 : *((_DWORD *)a1 + 4);
        unsigned __int8 v18 = *((unsigned char *)a1 + 32) ? *((_DWORD *)a1 + 4) : v14;
        ++a1[3];
        char v19 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v20 = -1;
        }
        else
        {
          uint64_t v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        uint64_t result = sub_24C6B8B9C(a1, a2, "number");
        if (result)
        {
          int v21 = *((_DWORD *)a1 + 4);
          if (*((unsigned char *)a1 + 32)) {
            int v22 = v9;
          }
          else {
            int v22 = *((_DWORD *)a1 + 4);
          }
          if (!*((unsigned char *)a1 + 32)) {
            LOBYTE(v21) = v10;
          }
          *a3 = (v17 << 16) | (v22 << 24) | (v18 << 8) | v21;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_24C6BC13C(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  ++a1[3];
  unint64_t v6 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v7 = -1;
  }
  else
  {
    uint64_t v7 = *v6;
    *a1 = v6 + 1;
  }
  a1[2] = (unsigned __int8 *)v7;
  uint64_t result = sub_24C6B8B9C(a1, a2, "number");
  if (result)
  {
    int v9 = *((unsigned char *)a1 + 32) ? a1[2] : 0;
    if (*((unsigned char *)a1 + 32)) {
      LOBYTE(v10) = 0;
    }
    else {
      char v10 = a1[2];
    }
    ++a1[3];
    uint64_t v11 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    uint64_t result = sub_24C6B8B9C(a1, a2, "number");
    if (result)
    {
      if (*((unsigned char *)a1 + 32)) {
        char v13 = a1[2];
      }
      else {
        LOBYTE(v13) = 0;
      }
      if (*((unsigned char *)a1 + 32)) {
        LOBYTE(v14) = 0;
      }
      else {
        char v14 = a1[2];
      }
      ++a1[3];
      char v15 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v16 = -1;
      }
      else
      {
        uint64_t v16 = *v15;
        *a1 = v15 + 1;
      }
      a1[2] = (unsigned __int8 *)v16;
      uint64_t result = sub_24C6B8B9C(a1, a2, "number");
      if (result)
      {
        if (*((unsigned char *)a1 + 32)) {
          unsigned __int8 v17 = a1[2];
        }
        else {
          LOBYTE(v17) = 0;
        }
        if (*((unsigned char *)a1 + 32)) {
          LOBYTE(v18) = 0;
        }
        else {
          unsigned __int8 v18 = a1[2];
        }
        ++a1[3];
        char v19 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v20 = -1;
        }
        else
        {
          uint64_t v20 = *v19;
          *a1 = v19 + 1;
        }
        a1[2] = (unsigned __int8 *)v20;
        uint64_t result = sub_24C6B8B9C(a1, a2, "number");
        if (result)
        {
          char v39 = (char)v13;
          char v40 = (char)v18;
          int v21 = a3;
          if (*((unsigned char *)a1 + 32)) {
            int v22 = a1[2];
          }
          else {
            LOBYTE(v22) = 0;
          }
          if (*((unsigned char *)a1 + 32)) {
            LODWORD(v23) = 0;
          }
          else {
            uint64_t v23 = a1[2];
          }
          ++a1[3];
          unint64_t v24 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v25 = -1;
          }
          else
          {
            uint64_t v25 = *v24;
            *a1 = v24 + 1;
          }
          a1[2] = (unsigned __int8 *)v25;
          uint64_t result = sub_24C6B8B9C(a1, a2, "number");
          if (result)
          {
            uint64_t v26 = v9;
            char v38 = (char)v10;
            if (*((unsigned char *)a1 + 32)) {
              LOBYTE(v27) = (_BYTE)v22;
            }
            else {
              unint64_t v27 = a1[2];
            }
            if (*((unsigned char *)a1 + 32)) {
              uint64_t v23 = a1[2];
            }
            ++a1[3];
            long long v28 = *a1;
            if (*a1 == a1[1])
            {
              uint64_t v29 = -1;
            }
            else
            {
              uint64_t v29 = *v28;
              *a1 = v28 + 1;
            }
            a1[2] = (unsigned __int8 *)v29;
            uint64_t result = sub_24C6B8B9C(a1, a2, "number");
            if (result)
            {
              if (*((unsigned char *)a1 + 32))
              {
                std::string v30 = a1[2];
              }
              else
              {
                unsigned __int8 v17 = a1[2];
                LOBYTE(v30) = v40;
              }
              ++a1[3];
              unint64_t v31 = *a1;
              if (*a1 == a1[1])
              {
                uint64_t v32 = -1;
              }
              else
              {
                uint64_t v32 = *v31;
                *a1 = v31 + 1;
              }
              a1[2] = (unsigned __int8 *)v32;
              uint64_t result = sub_24C6B8B9C(a1, a2, "number");
              if (result)
              {
                if (*((unsigned char *)a1 + 32)) {
                  LOBYTE(v33) = v39;
                }
                else {
                  uint64_t v33 = a1[2];
                }
                if (*((unsigned char *)a1 + 32)) {
                  char v14 = a1[2];
                }
                ++a1[3];
                char v34 = *a1;
                if (*a1 == a1[1])
                {
                  uint64_t v35 = -1;
                }
                else
                {
                  uint64_t v35 = *v34;
                  *a1 = v34 + 1;
                }
                a1[2] = (unsigned __int8 *)v35;
                uint64_t result = sub_24C6B8B9C(a1, a2, "number");
                if (result)
                {
                  unint64_t v36 = a1[2];
                  if (*((unsigned char *)a1 + 32)) {
                    uint64_t v37 = v26;
                  }
                  else {
                    uint64_t v37 = a1[2];
                  }
                  if (!*((unsigned char *)a1 + 32)) {
                    LOBYTE(v36) = v38;
                  }
                  unint64_t *v21 = ((unint64_t)v33 << 48) | ((void)v37 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v27 << 32) | (v23 << 24) | ((unint64_t)v30 << 16) | ((unint64_t)v14 << 8) | v36;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_24C6BC480(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t result = sub_24C6B8B9C(a1, 1, "binary");
  if (!result) {
    return result;
  }
  uint64_t v5 = a1[2];
  if ((unint64_t)(v5 - 64) >= 0x18)
  {
    switch((unint64_t)v5)
    {
      case 'X':
        ++a1[3];
        unint64_t v6 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v7 = -1;
        }
        else
        {
          uint64_t v7 = *v6;
          *a1 = v6 + 1;
        }
        a1[2] = (unsigned __int8 *)v7;
        uint64_t result = sub_24C6B8B9C(a1, 1, "number");
        if (result)
        {
          unsigned int v8 = *((unsigned __int8 *)a1 + 16);
          int v9 = a1;
          char v10 = (void *)a2;
          return sub_24C6BDA84(v9, 1, v8, v10);
        }
        return result;
      case 'Y':
        ++a1[3];
        char v15 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v16 = -1;
        }
        else
        {
          uint64_t v16 = *v15;
          *a1 = v15 + 1;
        }
        a1[2] = (unsigned __int8 *)v16;
        uint64_t result = sub_24C6B8B9C(a1, 1, "number");
        if (result)
        {
          __int16 v17 = *((unsigned __int8 *)a1 + 16);
          ++a1[3];
          unsigned __int8 v18 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v19 = -1;
          }
          else
          {
            uint64_t v19 = *v18;
            *a1 = v18 + 1;
          }
          a1[2] = (unsigned __int8 *)v19;
          uint64_t result = sub_24C6B8B9C(a1, 1, "number");
          if (result)
          {
            unsigned __int8 v20 = *((unsigned char *)a1 + 16);
            if (*((unsigned char *)a1 + 32)) {
              __int16 v21 = v17;
            }
            else {
              __int16 v21 = *((unsigned __int8 *)a1 + 16);
            }
            if (!*((unsigned char *)a1 + 32)) {
              unsigned __int8 v20 = v17;
            }
            unsigned int v8 = (unsigned __int16)(v20 | (unsigned __int16)(v21 << 8));
            int v9 = a1;
            char v10 = (void *)a2;
            return sub_24C6BDA84(v9, 1, v8, v10);
          }
        }
        return result;
      case 'Z':
        *(_DWORD *)&v39[48] = 0;
        int v14 = sub_24C6BBF84(a1, 1, (int *)&v39[48]);
        uint64_t result = 0;
        if (v14) {
          return sub_24C6BD808(a1, 1, *(unsigned int *)&v39[48], (void *)a2);
        }
        return result;
      case '[':
        *(void *)&v39[48] = 0;
        uint64_t result = sub_24C6BC13C(a1, 1, (unint64_t *)&v39[48]);
        if (result) {
          return sub_24C6BDCD8(a1, 1, *(unint64_t *)&v39[48], (void *)a2);
        }
        return result;
      case '_':
        while (1)
        {
          ++a1[3];
          uint64_t v11 = *a1;
          if (*a1 == a1[1])
          {
            a1[2] = (unsigned __int8 *)-1;
          }
          else
          {
            unsigned int v12 = *v11;
            *a1 = v11 + 1;
            a1[2] = (unsigned __int8 *)v12;
            if (v12 == 255) {
              return 1;
            }
          }
          memset(&v39[48], 0, 26);
          char v13 = sub_24C6BC480(a1, &v39[48]);
          if (v13) {
            sub_24C6BDF54(a2, *(char **)(a2 + 8), *(char **)&v39[48], *(char **)&v39[56], *(void *)&v39[56] - *(void *)&v39[48]);
          }
          if (*(void *)&v39[48])
          {
            *(void *)&v39[56] = *(void *)&v39[48];
            operator delete(*(void **)&v39[48]);
          }
          if ((v13 & 1) == 0) {
            return 0;
          }
        }
      default:
        v39[50] = 0;
        *(_WORD *)&v39[48] = 0;
        snprintf(&v39[48], 3uLL, "%.2hhX", v5);
        size_t v22 = strlen(&v39[48]);
        if (v22 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        size_t v23 = v22;
        if (v22 >= 0x17)
        {
          uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v25 = v22 | 7;
          }
          uint64_t v26 = v25 + 1;
          unint64_t v24 = operator new(v25 + 1);
          size_t v40 = v23;
          int64_t v41 = v26 | 0x8000000000000000;
          *(void *)&v39[88] = v24;
        }
        else
        {
          HIBYTE(v41) = v22;
          unint64_t v24 = &v39[88];
          if (!v22) {
            goto LABEL_48;
          }
        }
        memcpy(v24, &v39[48], v23);
LABEL_48:
        v24[v23] = 0;
        int v27 = SHIBYTE(v41);
        if (v41 >= 0) {
          size_t v28 = HIBYTE(v41);
        }
        else {
          size_t v28 = v40;
        }
        unint64_t v29 = v28 + 95;
        if (v28 + 95 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        std::string v30 = a1[5];
        unint64_t v31 = (unint64_t)a1[3];
        if (v29 <= 0x16)
        {
          qmemcpy(v39, "expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x",
            95);
          uint64_t v32 = &v39[95];
LABEL_57:
          if (v27 >= 0) {
            char v34 = &v39[88];
          }
          else {
            char v34 = *(unsigned char **)&v39[88];
          }
          memmove(v32, v34, v28);
          goto LABEL_61;
        }
        uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v33 = v29 | 7;
        }
        *(void *)&v39[8] = v28 + 95;
        *(void *)&v39[16] = (v33 + 1) | 0x8000000000000000;
        *(void *)char v39 = operator new(v33 + 1);
        qmemcpy((void *)(*(void *)v39 + 32), "x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", 63);
        uint64_t v32 = (unsigned char *)(*(void *)v39 + 95);
        qmemcpy(*(void **)v39, "expected length specification (0", 32);
        if (v28) {
          goto LABEL_57;
        }
LABEL_61:
        v32[v28] = 0;
        char v38 = 6;
        strcpy((char *)v37, "binary");
        sub_24C6B80F8(1, (uint64_t)v39, (uint64_t)v37, (std::string *)&v39[24]);
        sub_24C6B7D14(113, v31, (uint64_t)&v39[24], (uint64_t)&v39[48]);
        v30[40] = 1;
        if (v30[41])
        {
          exception = __cxa_allocate_exception(0x28uLL);
          unint64_t v36 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v39[48]);
          __cxa_throw(v36, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
        }
        *(void *)&v39[48] = &unk_26FEDDA08;
        std::runtime_error::~runtime_error((std::runtime_error *)&v39[64]);
        std::exception::~exception((std::exception *)&v39[48]);
        if ((v39[47] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v39[24]);
          if ((v38 & 0x80000000) == 0)
          {
LABEL_64:
            if ((v39[23] & 0x80000000) == 0) {
              goto LABEL_65;
            }
            goto LABEL_70;
          }
        }
        else if ((v38 & 0x80000000) == 0)
        {
          goto LABEL_64;
        }
        operator delete(v37[0]);
        if ((v39[23] & 0x80000000) == 0)
        {
LABEL_65:
          if ((v27 & 0x80000000) == 0) {
            return 0;
          }
LABEL_71:
          operator delete(*(void **)&v39[88]);
          return 0;
        }
LABEL_70:
        operator delete(*(void **)v39);
        if ((v27 & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_71;
    }
  }
  return sub_24C6BD808(a1, 1, v5 & 0x1F, (void *)a2);
}

void sub_24C6BCA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v28 & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(*(void **)(v29 - 88));
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a16);
  if ((v28 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_24C6BCB10(unsigned __int8 **a1, std::string *a2)
{
  if (!sub_24C6B8B9C(a1, 1, "string")) {
    return 0;
  }
  uint64_t v4 = a1[2];
  if ((unint64_t)(v4 - 96) >= 0x18)
  {
    switch((unint64_t)v4)
    {
      case 'x':
        ++a1[3];
        char v10 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v11 = -1;
        }
        else
        {
          uint64_t v11 = *v10;
          *a1 = v10 + 1;
        }
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_24C6B8B9C(a1, 1, "number")) {
          return 0;
        }
        unsigned int v12 = *((unsigned __int8 *)a1 + 16);
        char v13 = a1;
        int v14 = a2;
        return sub_24C6BE3CC(v13, 1, v12, v14);
      case 'y':
        ++a1[3];
        __int16 v21 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v22 = -1;
        }
        else
        {
          uint64_t v22 = *v21;
          *a1 = v21 + 1;
        }
        a1[2] = (unsigned __int8 *)v22;
        if (!sub_24C6B8B9C(a1, 1, "number")) {
          return 0;
        }
        __int16 v23 = *((unsigned __int8 *)a1 + 16);
        ++a1[3];
        unint64_t v24 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v25 = -1;
        }
        else
        {
          uint64_t v25 = *v24;
          *a1 = v24 + 1;
        }
        a1[2] = (unsigned __int8 *)v25;
        if (!sub_24C6B8B9C(a1, 1, "number")) {
          return 0;
        }
        unsigned __int8 v26 = *((unsigned char *)a1 + 16);
        if (*((unsigned char *)a1 + 32)) {
          __int16 v27 = v23;
        }
        else {
          __int16 v27 = *((unsigned __int8 *)a1 + 16);
        }
        if (!*((unsigned char *)a1 + 32)) {
          unsigned __int8 v26 = v23;
        }
        unsigned int v12 = (unsigned __int16)(v26 | (unsigned __int16)(v27 << 8));
        char v13 = a1;
        int v14 = a2;
        return sub_24C6BE3CC(v13, 1, v12, v14);
      case 'z':
        *(_DWORD *)&v45[48] = 0;
        BOOL v6 = 0;
        if (sub_24C6BBF84(a1, 1, (int *)&v45[48])) {
          return sub_24C6BE2F0(a1, 1, *(unsigned int *)&v45[48], a2);
        }
        return v6;
      case '{':
        *(void *)&v45[48] = 0;
        if (!sub_24C6BC13C(a1, 1, (unint64_t *)&v45[48])) {
          return 0;
        }
        return sub_24C6BE488(a1, 1, *(unint64_t *)&v45[48], a2);
      case '\x7F':
        do
        {
          while (2)
          {
            ++a1[3];
            uint64_t v16 = *a1;
            if (*a1 == a1[1])
            {
              a1[2] = (unsigned __int8 *)-1;
            }
            else
            {
              unsigned int v17 = *v16;
              *a1 = v16 + 1;
              a1[2] = (unsigned __int8 *)v17;
              if (v17 == 255) {
                return 1;
              }
            }
            memset(&v45[48], 0, 24);
            char v18 = sub_24C6BCB10(a1, &v45[48]);
            if (v18)
            {
              if (v45[71] >= 0) {
                uint64_t v19 = &v45[48];
              }
              else {
                uint64_t v19 = *(const std::string::value_type **)&v45[48];
              }
              if (v45[71] >= 0) {
                std::string::size_type v20 = v45[71];
              }
              else {
                std::string::size_type v20 = *(void *)&v45[56];
              }
              std::string::append(a2, v19, v20);
            }
            if ((v45[71] & 0x80000000) == 0)
            {
              BOOL v6 = 0;
              if ((v18 & 1) == 0) {
                return v6;
              }
              continue;
            }
            break;
          }
          operator delete(*(void **)&v45[48]);
          BOOL v6 = 0;
        }
        while ((v18 & 1) != 0);
        return v6;
      default:
        v45[50] = 0;
        *(_WORD *)&v45[48] = 0;
        snprintf(&v45[48], 3uLL, "%.2hhX", v4);
        size_t v28 = strlen(&v45[48]);
        if (v28 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        size_t v29 = v28;
        if (v28 >= 0x17)
        {
          uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v31 = v28 | 7;
          }
          uint64_t v32 = v31 + 1;
          std::string v30 = operator new(v31 + 1);
          size_t v46 = v29;
          int64_t v47 = v32 | 0x8000000000000000;
          *(void *)&v45[88] = v30;
        }
        else
        {
          HIBYTE(v47) = v28;
          std::string v30 = &v45[88];
          if (!v28) {
            goto LABEL_61;
          }
        }
        memcpy(v30, &v45[48], v29);
LABEL_61:
        v30[v29] = 0;
        int v33 = SHIBYTE(v47);
        if (v47 >= 0) {
          size_t v34 = HIBYTE(v47);
        }
        else {
          size_t v34 = v46;
        }
        unint64_t v35 = v34 + 89;
        if (v34 + 89 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        unint64_t v36 = a1[5];
        unint64_t v37 = (unint64_t)a1[3];
        if (v35 <= 0x16)
        {
          qmemcpy(v45, "expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", 89);
          char v38 = &v45[89];
LABEL_70:
          if (v33 >= 0) {
            size_t v40 = &v45[88];
          }
          else {
            size_t v40 = *(unsigned char **)&v45[88];
          }
          memmove(v38, v40, v34);
          goto LABEL_74;
        }
        uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v39 = v35 | 7;
        }
        *(void *)&v45[8] = v34 + 89;
        *(void *)&v45[16] = (v39 + 1) | 0x8000000000000000;
        *(void *)char v45 = operator new(v39 + 1);
        qmemcpy((void *)(*(void *)v45 + 32), "x60-0x7B) or indefinite string type (0x7F); last byte: 0x", 57);
        char v38 = (unsigned char *)(*(void *)v45 + 89);
        qmemcpy(*(void **)v45, "expected length specification (0", 32);
        if (v34) {
          goto LABEL_70;
        }
LABEL_74:
        v38[v34] = 0;
        char v44 = 6;
        strcpy((char *)v43, "string");
        sub_24C6B80F8(1, (uint64_t)v45, (uint64_t)v43, (std::string *)&v45[24]);
        sub_24C6B7D14(113, v37, (uint64_t)&v45[24], (uint64_t)&v45[48]);
        v36[40] = 1;
        if (v36[41])
        {
          exception = __cxa_allocate_exception(0x28uLL);
          int v42 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v45[48]);
          __cxa_throw(v42, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
        }
        *(void *)&v45[48] = &unk_26FEDDA08;
        std::runtime_error::~runtime_error((std::runtime_error *)&v45[64]);
        std::exception::~exception((std::exception *)&v45[48]);
        if ((v45[47] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v45[24]);
          if ((v44 & 0x80000000) == 0)
          {
LABEL_77:
            if ((v45[23] & 0x80000000) == 0) {
              goto LABEL_78;
            }
            goto LABEL_82;
          }
        }
        else if ((v44 & 0x80000000) == 0)
        {
          goto LABEL_77;
        }
        operator delete(v43[0]);
        if ((v45[23] & 0x80000000) == 0)
        {
LABEL_78:
          if ((v33 & 0x80000000) == 0) {
            return 0;
          }
LABEL_83:
          operator delete(*(void **)&v45[88]);
          return 0;
        }
LABEL_82:
        operator delete(*(void **)v45);
        if ((v33 & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_83;
    }
  }
  unsigned int v5 = v4 & 0x1F;
  if ((v4 & 0x1F) != 0)
  {
    BOOL v6 = 0;
    int v7 = 0;
    while (1)
    {
      ++a1[3];
      unsigned int v8 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_24C6B8B9C(a1, 1, "string")) {
          return v6;
        }
      }
      else
      {
        int v9 = (unsigned __int8 *)*v8;
        *a1 = v8 + 1;
        a1[2] = v9;
        if (!sub_24C6B8B9C(a1, 1, "string")) {
          return v6;
        }
      }
      std::string::push_back(a2, *((unsigned char *)a1 + 16));
      BOOL v6 = ++v7 >= v5;
      if (v5 == v7) {
        return v6;
      }
    }
  }
  return 1;
}

void sub_24C6BD158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,int a29,__int16 a30,char a31,char a32)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v32 & 0x80000000) == 0) {
LABEL_11:
    }
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(*(void **)(v33 - 88));
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a16);
  if ((v32 & 0x80000000) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t sub_24C6BD218(unsigned __int8 **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t result = sub_24C6BAE30((uint64_t)a1[5], a2);
  if (!result) {
    return result;
  }
  if (v4 == -1)
  {
    while (1)
    {
      while (1)
      {
        ++a1[3];
        int v7 = *a1;
        if (*a1 != a1[1]) {
          break;
        }
        a1[2] = (unsigned __int8 *)v4;
        if ((sub_24C6B6114(a1, 0, a3) & 1) == 0) {
          return 0;
        }
      }
      unsigned int v8 = *v7;
      *a1 = v7 + 1;
      a1[2] = (unsigned __int8 *)v8;
      if (v8 == 255) {
        break;
      }
      if ((sub_24C6B6114(a1, 0, a3) & 1) == 0) {
        return 0;
      }
    }
    goto LABEL_12;
  }
  if (!v4)
  {
LABEL_12:
    *((void *)a1[5] + 2) -= 8;
    return 1;
  }
  while ((sub_24C6B6114(a1, 1, a3) & 1) != 0)
  {
    if (!--v4) {
      goto LABEL_12;
    }
  }
  return 0;
}

uint64_t sub_24C6BD304(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  if (!sub_24C6B85FC(*(void *)(a1 + 40), a2)) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  if (v4 == -1)
  {
    ++*(void *)(a1 + 24);
    unsigned int v8 = *(unsigned __int8 **)a1;
    if (*(void *)a1 != *(void *)(a1 + 8)) {
      goto LABEL_10;
    }
LABEL_15:
    *(void *)(a1 + 16) = -1;
    while (sub_24C6BCB10((unsigned __int8 **)a1, &__p))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(uint64_t ***)(*(void *)(*(void *)(v10 + 16) - 8) + 8);
      p_p = &__p;
      *(void *)(v10 + 32) = sub_24C6B9CF8(v11, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
      if (!sub_24C6B6114(a1, 1, a3)) {
        break;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        ++*(void *)(a1 + 24);
        unsigned int v8 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8)) {
          goto LABEL_15;
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        ++*(void *)(a1 + 24);
        unsigned int v8 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8)) {
          goto LABEL_15;
        }
      }
LABEL_10:
      uint64_t v9 = *v8;
      *(void *)a1 = v8 + 1;
      *(void *)(a1 + 16) = v9;
      if (v9 == 255) {
        goto LABEL_4;
      }
    }
LABEL_26:
    uint64_t v6 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
    goto LABEL_5;
  }
  if (v4)
  {
    while (1)
    {
      ++*(void *)(a1 + 24);
      unsigned int v12 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v13 = -1;
      }
      else
      {
        uint64_t v13 = *v12;
        *(void *)a1 = v12 + 1;
      }
      *(void *)(a1 + 16) = v13;
      if (!sub_24C6BCB10((unsigned __int8 **)a1, &__p)) {
        goto LABEL_26;
      }
      uint64_t v14 = *(void *)(a1 + 40);
      char v15 = *(uint64_t ***)(*(void *)(*(void *)(v14 + 16) - 8) + 8);
      p_p = &__p;
      *(void *)(v14 + 32) = sub_24C6B9CF8(v15, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
      if (!sub_24C6B6114(a1, 1, a3)) {
        goto LABEL_26;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        if (!--v4) {
          break;
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        if (!--v4) {
          break;
        }
      }
    }
  }
LABEL_4:
  *(void *)(*(void *)(a1 + 40) + 16) -= 8;
  uint64_t v6 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_24C6BD54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_24C6BD56C(_DWORD **a1)
{
  int v1 = (**a1 >> 10) & 0x1F;
  unsigned int v2 = **a1 & 0x3FF;
  if (v1 == 31)
  {
    double result = NAN;
    if (!v2) {
      return INFINITY;
    }
  }
  else if (v1)
  {
    return ldexp((double)(v2 | 0x400), v1 - 25);
  }
  else
  {
    return ldexp((double)v2, -24);
  }
  return result;
}

uint64_t sub_24C6BD5C0(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 6;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_24C6B5428(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        unsigned int v8 = sub_24C6BD6D8((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 6;
        *(void *)(v6 + 8) = v7;
        unsigned int v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      char v15 = a1[4];
      int v16 = *v15;
      unsigned __int8 *v15 = 6;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_24C6B5428(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_24C6BD6D8(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_24C667470();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_24C66DB48();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 6;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      char v15 = *((unsigned char *)v3 - 16);
      v3 -= 2;
      *(v11 - 16) = v15;
      v11 -= 16;
      *((void *)v11 + 1) = v3[1];
      *(unsigned char *)uint64_t v3 = 0;
      v3[1] = 0;
    }
    while (v3 != v4);
    uint64_t v3 = (uint64_t *)*a1;
    int v16 = (uint64_t *)a1[1];
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (v16 == v3)
    {
      uint64_t v3 = v16;
      if (!v16) {
        return v14;
      }
      goto LABEL_15;
    }
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_24C6B5428(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_15:
  }
    operator delete(v3);
  return v14;
}

BOOL sub_24C6BD808(void *a1, uint64_t a2, unsigned int a3, void *a4)
{
  if (a3)
  {
    unsigned int v5 = a3;
    BOOL v8 = 0;
    int v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        uint64_t v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        else
        {
          unsigned int v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        char v12 = *((unsigned char *)a1 + 16);
        uint64_t v14 = (unsigned char *)a4[1];
        unint64_t v13 = a4[2];
        if ((unint64_t)v14 >= v13) {
          break;
        }
        unsigned char *v14 = v12;
        a4[1] = v14 + 1;
        BOOL v8 = ++v9 >= v5;
        if (v9 == v5) {
          return v8;
        }
      }
      char v15 = (unsigned char *)*a4;
      unint64_t v16 = (unint64_t)&v14[-*a4];
      unint64_t v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0) {
        sub_24C667470();
      }
      uint64_t v18 = a2;
      unint64_t v19 = v13 - (void)v15;
      if (2 * v19 > v17) {
        unint64_t v17 = 2 * v19;
      }
      size_t v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20) {
        break;
      }
      __int16 v21 = 0;
      uint64_t v22 = &v14[-*a4];
      *(unsigned char *)unint64_t v16 = v12;
      uint64_t v23 = v16 + 1;
      if (v14 != v15) {
        goto LABEL_17;
      }
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14) {
        operator delete(v14);
      }
      a2 = v18;
      unsigned int v5 = a3;
      a4[1] = v23;
      BOOL v8 = ++v9 >= a3;
      if (v9 == a3) {
        return v8;
      }
    }
    __int16 v21 = (char *)operator new(v20);
    uint64_t v22 = &v21[v16];
    v21[v16] = v12;
    uint64_t v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15) {
      goto LABEL_33;
    }
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        unint64_t v24 = 0;
        goto LABEL_25;
      }
      unint64_t v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v25 = &v21[v16 - 16];
      unsigned __int8 v26 = (long long *)(v14 - 16);
      unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)uint64_t v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24) {
        goto LABEL_32;
      }
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        size_t v29 = &v21[&v14[-v24] - v15 - 8];
        std::string v30 = (uint64_t *)&v14[-v24 - 8];
        unint64_t v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v32 = *v30--;
          *(void *)size_t v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    uint64_t v33 = v22 - 1;
    do
    {
      char v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    uint64_t v14 = (unsigned char *)*a4;
    uint64_t v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

uint64_t sub_24C6BDA84(void *a1, int a2, unsigned int a3, void *a4)
{
  if (a3)
  {
    unsigned int v5 = a3;
    int v6 = a2;
    int v8 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        int v9 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          uint64_t v10 = -1;
        }
        else
        {
          uint64_t v10 = *v9;
          *a1 = v9 + 1;
        }
        a1[2] = v10;
        uint64_t v11 = sub_24C6B8B9C(a1, v6, "binary");
        if (!v11) {
          return v11;
        }
        char v12 = *((unsigned char *)a1 + 16);
        uint64_t v14 = (unsigned char *)a4[1];
        unint64_t v13 = a4[2];
        if ((unint64_t)v14 >= v13) {
          break;
        }
        unsigned char *v14 = v12;
        a4[1] = v14 + 1;
        if (++v8 >= v5) {
          return v11;
        }
      }
      char v15 = (unsigned char *)*a4;
      unint64_t v16 = (unint64_t)&v14[-*a4];
      unint64_t v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0) {
        sub_24C667470();
      }
      unint64_t v18 = v13 - (void)v15;
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      size_t v19 = v18 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v19) {
        break;
      }
      size_t v20 = 0;
      __int16 v21 = &v14[-*a4];
      *(unsigned char *)unint64_t v16 = v12;
      uint64_t v22 = v16 + 1;
      if (v14 != v15) {
        goto LABEL_18;
      }
LABEL_34:
      *a4 = v21;
      a4[1] = v22;
      a4[2] = &v20[v19];
      if (v14) {
        operator delete(v14);
      }
      int v6 = a2;
      unsigned int v5 = a3;
      a4[1] = v22;
      if (++v8 >= a3) {
        return v11;
      }
    }
    size_t v20 = (char *)operator new(v19);
    __int16 v21 = &v20[v16];
    v20[v16] = v12;
    uint64_t v22 = (uint64_t)&v20[v16 + 1];
    if (v14 == v15) {
      goto LABEL_34;
    }
LABEL_18:
    if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
    {
      if (v16 < 0x20)
      {
        unint64_t v23 = 0;
        goto LABEL_26;
      }
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v24 = &v20[v16 - 16];
      uint64_t v25 = (long long *)(v14 - 16);
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v25;
        *((_OWORD *)v24 - 1) = *(v25 - 1);
        *(_OWORD *)unint64_t v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_33;
      }
      if ((v16 & 0x18) != 0)
      {
LABEL_26:
        v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
        long long v28 = &v20[&v14[-v23] - v15 - 8];
        size_t v29 = (uint64_t *)&v14[-v23 - 8];
        unint64_t v30 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v31 = *v29--;
          *(void *)long long v28 = v31;
          v28 -= 8;
          v30 += 8;
        }
        while (v30);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v21 -= v23;
      v14 -= v23;
    }
LABEL_31:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v14;
      *v32-- = v33;
    }
    while (v14 != v15);
LABEL_33:
    uint64_t v14 = (unsigned char *)*a4;
    __int16 v21 = v20;
    goto LABEL_34;
  }
  return 1;
}

BOOL sub_24C6BDCD8(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    unint64_t v5 = a3;
    BOOL v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      while (1)
      {
        ++a1[3];
        uint64_t v10 = (unsigned __int8 *)*a1;
        if (*a1 == a1[1])
        {
          a1[2] = -1;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        else
        {
          unsigned int v11 = *v10;
          *a1 = v10 + 1;
          a1[2] = v11;
          if (!sub_24C6B8B9C(a1, a2, "binary")) {
            return v8;
          }
        }
        char v12 = *((unsigned char *)a1 + 16);
        uint64_t v14 = (unsigned char *)a4[1];
        unint64_t v13 = a4[2];
        if ((unint64_t)v14 >= v13) {
          break;
        }
        unsigned char *v14 = v12;
        a4[1] = v14 + 1;
        BOOL v8 = ++v9 >= v5;
        if (v9 == v5) {
          return v8;
        }
      }
      char v15 = (unsigned char *)*a4;
      unint64_t v16 = (unint64_t)&v14[-*a4];
      unint64_t v17 = v16 + 1;
      if ((uint64_t)(v16 + 1) < 0) {
        sub_24C667470();
      }
      uint64_t v18 = a2;
      unint64_t v19 = v13 - (void)v15;
      if (2 * v19 > v17) {
        unint64_t v17 = 2 * v19;
      }
      size_t v20 = v19 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v17;
      if (v20) {
        break;
      }
      __int16 v21 = 0;
      uint64_t v22 = &v14[-*a4];
      *(unsigned char *)unint64_t v16 = v12;
      uint64_t v23 = v16 + 1;
      if (v14 != v15) {
        goto LABEL_17;
      }
LABEL_33:
      *a4 = v22;
      a4[1] = v23;
      a4[2] = &v21[v20];
      if (v14) {
        operator delete(v14);
      }
      a2 = v18;
      unint64_t v5 = a3;
      a4[1] = v23;
      BOOL v8 = ++v9 >= a3;
      if (v9 == a3) {
        return v8;
      }
    }
    __int16 v21 = (char *)operator new(v20);
    uint64_t v22 = &v21[v16];
    v21[v16] = v12;
    uint64_t v23 = (uint64_t)&v21[v16 + 1];
    if (v14 == v15) {
      goto LABEL_33;
    }
LABEL_17:
    if (v16 >= 8 && (unint64_t)(v15 - v21) >= 0x20)
    {
      if (v16 < 0x20)
      {
        unint64_t v24 = 0;
        goto LABEL_25;
      }
      unint64_t v24 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v25 = &v21[v16 - 16];
      unint64_t v26 = (long long *)(v14 - 16);
      unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v28 = *v26;
        *((_OWORD *)v25 - 1) = *(v26 - 1);
        *(_OWORD *)uint64_t v25 = v28;
        v25 -= 32;
        v26 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v16 == v24) {
        goto LABEL_32;
      }
      if ((v16 & 0x18) != 0)
      {
LABEL_25:
        v22 -= v16 & 0xFFFFFFFFFFFFFFF8;
        size_t v29 = &v21[&v14[-v24] - v15 - 8];
        unint64_t v30 = (uint64_t *)&v14[-v24 - 8];
        unint64_t v31 = v24 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v32 = *v30--;
          *(void *)size_t v29 = v32;
          v29 -= 8;
          v31 += 8;
        }
        while (v31);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v22 -= v24;
      v14 -= v24;
    }
LABEL_30:
    char v33 = v22 - 1;
    do
    {
      char v34 = *--v14;
      *v33-- = v34;
    }
    while (v14 != v15);
LABEL_32:
    uint64_t v14 = (unsigned char *)*a4;
    uint64_t v22 = v21;
    goto LABEL_33;
  }
  return 1;
}

char *sub_24C6BDF54(uint64_t a1, char *__dst, char *__src, char *a4, unint64_t a5)
{
  unint64_t v5 = __dst;
  if ((uint64_t)a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    unsigned int v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_24C667470();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      unint64_t v16 = operator new(v15);
      unint64_t v17 = &v13[(void)v16];
      uint64_t v18 = &v13[(void)v16 + a5];
      unint64_t v19 = &v13[(void)v16];
      size_t v20 = __src;
      if (a5 < 8) {
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v17 = (char *)(__dst - v11);
      uint64_t v18 = &v13[a5];
      unint64_t v19 = (char *)(__dst - v11);
      size_t v20 = __src;
      if (a5 < 8) {
        goto LABEL_43;
      }
    }
    unint64_t v19 = v17;
    size_t v20 = __src;
    if ((char *)(&v5[(void)v16] - &__src[(void)v11]) >= (char *)0x20)
    {
      if (a5 >= 0x20)
      {
        uint64_t v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        unint64_t v36 = (long long *)(__src + 16);
        unint64_t v37 = (char *)v16 + (void)v13 + 16;
        unint64_t v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *unint64_t v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_44:
          char v45 = *(char **)a1;
          if (*(char **)a1 == v5)
          {
            double v48 = v17;
            uint64_t v55 = (char *)v16 + v15;
            size_t v56 = v10 - v5;
            if (v10 == v5) {
              goto LABEL_53;
            }
          }
          else
          {
            int64_t v46 = v5 - v45;
            int64_t v47 = v5;
            double v48 = v17;
            if ((unint64_t)(v5 - v45) < 0x20) {
              goto LABEL_62;
            }
            int64_t v47 = v5;
            double v48 = v17;
            if ((unint64_t)(v11 - (unsigned char *)v16) < 0x20) {
              goto LABEL_62;
            }
            int64_t v47 = &v5[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            double v48 = &v17[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            uint64_t v49 = v5 - 16;
            unint64_t v50 = (char *)v16 + v5 - 16 - v11;
            unint64_t v51 = v46 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v52 = *(_OWORD *)v49;
              *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
              *(_OWORD *)unint64_t v50 = v52;
              v50 -= 32;
              v49 -= 32;
              v51 -= 32;
            }
            while (v51);
            if (v46 != (v46 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_62:
              do
              {
                char v53 = *--v47;
                *--double v48 = v53;
              }
              while (v47 != v45);
            }
            char v54 = *(char **)(a1 + 8);
            uint64_t v55 = (char *)v16 + v15;
            size_t v56 = v54 - v5;
            if (v54 == v5) {
              goto LABEL_53;
            }
          }
          memmove(v18, v5, v56);
LABEL_53:
          std::string v57 = *(char **)a1;
          *(void *)a1 = v48;
          *(void *)(a1 + 8) = &v18[v56];
          *(void *)(a1 + 16) = v55;
          if (v57) {
            operator delete(v57);
          }
          return v17;
        }
        if ((a5 & 0x18) == 0)
        {
          size_t v20 = &__src[v29];
          unint64_t v19 = &v17[v29];
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      unint64_t v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      size_t v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      size_t v40 = &__src[v29];
      int64_t v41 = (char *)v16 + &v5[v29] - v11;
      unint64_t v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v43 = *(void *)v40;
        v40 += 8;
        *(void *)int64_t v41 = v43;
        v41 += 8;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5) {
        goto LABEL_44;
      }
    }
    do
    {
LABEL_43:
      char v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_44;
  }
  uint64_t v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    uint64_t v22 = &__src[a5];
    unint64_t v24 = *(char **)(a1 + 8);
    uint64_t v25 = &__dst[a5];
    unint64_t v26 = &v10[-a5];
    unint64_t v27 = v24;
    if ((unint64_t)v10 < a5) {
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  uint64_t v22 = &__src[v21];
  int64_t v23 = a4 - &__src[v21];
  if (a4 != &__src[v21]) {
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  }
  unint64_t v24 = &v10[v23];
  *(void *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    uint64_t v25 = &v5[a5];
    unint64_t v26 = &v24[-a5];
    unint64_t v27 = &v10[v23];
    if (&v24[-a5] >= v10) {
      goto LABEL_30;
    }
LABEL_19:
    unint64_t v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      unint64_t v27 = v24;
      if (a5 >= 0x20)
      {
        unint64_t v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v31 = v24 + 16;
        uint64_t v32 = (long long *)(v26 + 16);
        unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          _OWORD *v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        unint64_t v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unint64_t v27 = v24;
    }
    do
    {
      char v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(void *)(a1 + 8) = v27;
    if (v24 != v25) {
      memmove(v25, v5, v24 - v25);
    }
    if (v22 != __src) {
      memmove(v5, __src, v22 - __src);
    }
  }
  return v5;
}

BOOL sub_24C6BE2F0(unsigned __int8 **a1, int a2, unsigned int a3, std::string *a4)
{
  if (a3)
  {
    BOOL v8 = 0;
    int v9 = 0;
    while (1)
    {
      ++a1[3];
      uint64_t v10 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_24C6B8B9C(a1, a2, "string")) {
          return v8;
        }
      }
      else
      {
        unsigned int v11 = *v10;
        *a1 = v10 + 1;
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_24C6B8B9C(a1, a2, "string")) {
          return v8;
        }
      }
      std::string::push_back(a4, *((unsigned char *)a1 + 16));
      BOOL v8 = ++v9 >= a3;
      if (a3 == v9) {
        return v8;
      }
    }
  }
  return 1;
}

uint64_t sub_24C6BE3CC(unsigned __int8 **a1, int a2, unsigned int a3, std::string *a4)
{
  if (!a3) {
    return 1;
  }
  for (unsigned int i = 0; i < a3; ++i)
  {
    ++a1[3];
    int v9 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v10 = -1;
    }
    else
    {
      uint64_t v10 = *v9;
      *a1 = v9 + 1;
    }
    a1[2] = (unsigned __int8 *)v10;
    uint64_t v11 = sub_24C6B8B9C(a1, a2, "string");
    if (!v11) {
      break;
    }
    std::string::push_back(a4, *((unsigned char *)a1 + 16));
  }
  return v11;
}

BOOL sub_24C6BE488(unsigned __int8 **a1, int a2, unint64_t a3, std::string *a4)
{
  if (a3)
  {
    BOOL v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      ++a1[3];
      uint64_t v10 = *a1;
      if (*a1 == a1[1])
      {
        a1[2] = (unsigned __int8 *)-1;
        if (!sub_24C6B8B9C(a1, a2, "string")) {
          return v8;
        }
      }
      else
      {
        unsigned int v11 = *v10;
        *a1 = v10 + 1;
        a1[2] = (unsigned __int8 *)v11;
        if (!sub_24C6B8B9C(a1, a2, "string")) {
          return v8;
        }
      }
      std::string::push_back(a4, *((unsigned char *)a1 + 16));
      BOOL v8 = ++v9 >= a3;
      if (a3 == v9) {
        return v8;
      }
    }
  }
  return 1;
}

BOOL sub_24C6BE564(uint64_t a1, unint64_t a2)
{
  if (sub_24C6B85FC(*(void *)(a1 + 40), a2))
  {
    memset(&__p, 0, sizeof(__p));
    if (a2)
    {
      BOOL v4 = 0;
      uint64_t v5 = 0;
      while (1)
      {
        ++*(void *)(a1 + 24);
        int v6 = *(unsigned __int8 **)a1;
        if (*(void *)a1 == *(void *)(a1 + 8))
        {
          uint64_t v7 = -1;
        }
        else
        {
          uint64_t v7 = *v6;
          *(void *)a1 = v6 + 1;
        }
        *(void *)(a1 + 16) = v7;
        if (!sub_24C6BE750((unsigned __int8 **)a1, &__p)) {
          break;
        }
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(uint64_t ***)(*(void *)(*(void *)(v8 + 16) - 8) + 8);
        p_p = &__p;
        *(void *)(v8 + 32) = sub_24C6B9CF8(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
        if (!sub_24C6B7158(a1)) {
          break;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
          BOOL v4 = ++v5 >= a2;
          if (a2 == v5) {
            goto LABEL_13;
          }
        }
        else
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          BOOL v4 = ++v5 >= a2;
          if (a2 == v5) {
            goto LABEL_13;
          }
        }
      }
    }
    else
    {
LABEL_13:
      *(void *)(*(void *)(a1 + 40) + 16) -= 8;
      BOOL v4 = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

void sub_24C6BE6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6BE6E4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t result = sub_24C6BAE30(*(void *)(a1 + 40), a2);
  if (result)
  {
    if (v2)
    {
      while ((sub_24C6B7158(a1) & 1) != 0)
      {
        if (!--v2) {
          goto LABEL_5;
        }
      }
      return 0;
    }
    else
    {
LABEL_5:
      *(void *)(*(void *)(a1 + 40) + 16) -= 8;
      return 1;
    }
  }
  return result;
}

uint64_t sub_24C6BE750(unsigned __int8 **a1, std::string *a2)
{
  if (!sub_24C6B8B9C(a1, 2, "string")) {
    return 0;
  }
  BOOL v4 = a1[2];
  if ((unint64_t)(v4 - 160) < 0x20)
  {
    unsigned int v5 = v4 & 0x1F;
    if ((v4 & 0x1F) != 0)
    {
      BOOL v6 = 0;
      int v7 = 0;
      while (1)
      {
        ++a1[3];
        uint64_t v8 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)-1;
          if (!sub_24C6B8B9C(a1, 2, "string")) {
            return v6;
          }
        }
        else
        {
          uint64_t v9 = (unsigned __int8 *)*v8;
          *a1 = v8 + 1;
          a1[2] = v9;
          if (!sub_24C6B8B9C(a1, 2, "string")) {
            return v6;
          }
        }
        std::string::push_back(a2, *((unsigned char *)a1 + 16));
        BOOL v6 = ++v7 >= v5;
        if (v5 == v7) {
          return v6;
        }
      }
    }
    return 1;
  }
  if (v4 == (unsigned __int8 *)217)
  {
    ++a1[3];
    uint64_t v21 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v22 = -1;
    }
    else
    {
      uint64_t v22 = *v21;
      *a1 = v21 + 1;
    }
    a1[2] = (unsigned __int8 *)v22;
    if (!sub_24C6B8B9C(a1, 2, "number")) {
      return 0;
    }
    unsigned int v18 = *((unsigned __int8 *)a1 + 16);
    unint64_t v19 = a1;
    size_t v20 = a2;
  }
  else
  {
    if (v4 != (unsigned __int8 *)218)
    {
      if (v4 == (unsigned __int8 *)219)
      {
        *(_DWORD *)&v40[48] = 0;
        BOOL v6 = 0;
        if (sub_24C6BBF84(a1, 2, (int *)&v40[48])) {
          return sub_24C6BE2F0(a1, 2, *(unsigned int *)&v40[48], a2);
        }
        return v6;
      }
      v40[50] = 0;
      *(_WORD *)&v40[48] = 0;
      snprintf(&v40[48], 3uLL, "%.2hhX", v4);
      size_t v23 = strlen(&v40[48]);
      if (v23 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      size_t v24 = v23;
      if (v23 >= 0x17)
      {
        uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v26 = v23 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (void **)operator new(v26 + 1);
        size_t v43 = v24;
        int64_t v44 = v27 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v44) = v23;
        p_dst = (void **)&__dst;
        if (!v23)
        {
LABEL_46:
          *((unsigned char *)p_dst + v24) = 0;
          int v28 = SHIBYTE(v44);
          if (v44 >= 0) {
            size_t v29 = HIBYTE(v44);
          }
          else {
            size_t v29 = v43;
          }
          unint64_t v30 = v29 + 67;
          if (v29 + 67 > 0x7FFFFFFFFFFFFFF7) {
            sub_24C6673C8();
          }
          unint64_t v31 = a1[5];
          unint64_t v32 = (unint64_t)a1[3];
          if (v30 > 0x16)
          {
            uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17) {
              uint64_t v34 = v30 | 7;
            }
            *(void *)&v40[8] = v29 + 67;
            *(void *)&v40[16] = (v34 + 1) | 0x8000000000000000;
            *(void *)size_t v40 = operator new(v34 + 1);
            qmemcpy(*(void **)v40, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", 67);
            unint64_t v33 = (unsigned char *)(*(void *)v40 + 67);
            if (!v29)
            {
LABEL_59:
              v33[v29] = 0;
              char v39 = 6;
              strcpy((char *)v38, "string");
              sub_24C6B80F8(2, (uint64_t)v40, (uint64_t)v38, (std::string *)&v40[24]);
              sub_24C6B7D14(113, v32, (uint64_t)&v40[24], (uint64_t)&v40[48]);
              v31[40] = 1;
              if (v31[41])
              {
                exception = __cxa_allocate_exception(0x28uLL);
                unint64_t v37 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v40[48]);
                __cxa_throw(v37, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
              }
              *(void *)&v40[48] = &unk_26FEDDA08;
              std::runtime_error::~runtime_error((std::runtime_error *)&v40[64]);
              std::exception::~exception((std::exception *)&v40[48]);
              if ((v40[47] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v40[24]);
                if ((v39 & 0x80000000) == 0)
                {
LABEL_62:
                  if ((v40[23] & 0x80000000) == 0) {
                    goto LABEL_63;
                  }
                  goto LABEL_67;
                }
              }
              else if ((v39 & 0x80000000) == 0)
              {
                goto LABEL_62;
              }
              operator delete(v38[0]);
              if ((v40[23] & 0x80000000) == 0)
              {
LABEL_63:
                if ((v28 & 0x80000000) == 0) {
                  return 0;
                }
LABEL_68:
                operator delete(__dst);
                return 0;
              }
LABEL_67:
              operator delete(*(void **)v40);
              if ((v28 & 0x80000000) == 0) {
                return 0;
              }
              goto LABEL_68;
            }
          }
          else
          {
            qmemcpy(v40, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", sizeof(v40));
            unint64_t v33 = v41;
          }
          if (v28 >= 0) {
            char v35 = (void **)&__dst;
          }
          else {
            char v35 = __dst;
          }
          memmove(v33, v35, v29);
          goto LABEL_59;
        }
      }
      memcpy(p_dst, &v40[48], v24);
      goto LABEL_46;
    }
    ++a1[3];
    unsigned int v11 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *v11;
      *a1 = v11 + 1;
    }
    a1[2] = (unsigned __int8 *)v12;
    if (!sub_24C6B8B9C(a1, 2, "number")) {
      return 0;
    }
    __int16 v13 = *((unsigned __int8 *)a1 + 16);
    ++a1[3];
    unint64_t v14 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v15 = -1;
    }
    else
    {
      uint64_t v15 = *v14;
      *a1 = v14 + 1;
    }
    a1[2] = (unsigned __int8 *)v15;
    if (!sub_24C6B8B9C(a1, 2, "number")) {
      return 0;
    }
    unsigned __int8 v16 = *((unsigned char *)a1 + 16);
    if (*((unsigned char *)a1 + 32)) {
      __int16 v17 = v13;
    }
    else {
      __int16 v17 = *((unsigned __int8 *)a1 + 16);
    }
    if (!*((unsigned char *)a1 + 32)) {
      unsigned __int8 v16 = v13;
    }
    unsigned int v18 = (unsigned __int16)(v16 | (unsigned __int16)(v17 << 8));
    unint64_t v19 = a1;
    size_t v20 = a2;
  }
  return sub_24C6BE3CC(v19, 2, v18, v20);
}

void sub_24C6BECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (v28 < 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (v28 < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

uint64_t sub_24C6BED34(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch((unint64_t)a1[2])
  {
    case 0xC4uLL:
      ++a1[3];
      unsigned int v5 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v6 = -1;
      }
      else
      {
        uint64_t v6 = *v5;
        *a1 = v5 + 1;
      }
      a1[2] = (unsigned __int8 *)v6;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      unsigned int v7 = *((unsigned __int8 *)a1 + 16);
      uint64_t v8 = a1;
      uint64_t v9 = (void *)a2;
      return sub_24C6BDA84(v8, 2, v7, v9);
    case 0xC5uLL:
      ++a1[3];
      unsigned int v11 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v12 = -1;
      }
      else
      {
        uint64_t v12 = *v11;
        *a1 = v11 + 1;
      }
      a1[2] = (unsigned __int8 *)v12;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      __int16 v13 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      unint64_t v14 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v15 = -1;
      }
      else
      {
        uint64_t v15 = *v14;
        *a1 = v14 + 1;
      }
      a1[2] = (unsigned __int8 *)v15;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      unsigned __int8 v16 = *((unsigned char *)a1 + 16);
      if (*((unsigned char *)a1 + 32)) {
        __int16 v17 = v13;
      }
      else {
        __int16 v17 = *((unsigned __int8 *)a1 + 16);
      }
      if (!*((unsigned char *)a1 + 32)) {
        unsigned __int8 v16 = v13;
      }
      unsigned int v7 = (unsigned __int16)(v16 | (unsigned __int16)(v17 << 8));
      uint64_t v8 = a1;
      uint64_t v9 = (void *)a2;
      return sub_24C6BDA84(v8, 2, v7, v9);
    case 0xC6uLL:
      unsigned int v48 = 0;
      uint64_t v2 = 0;
      if (sub_24C6BBF84(a1, 2, (int *)&v48)) {
        return sub_24C6BD808(a1, 2, v48, (void *)a2);
      }
      return v2;
    case 0xC7uLL:
      ++a1[3];
      unsigned int v18 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v19 = -1;
      }
      else
      {
        uint64_t v19 = *v18;
        *a1 = v18 + 1;
      }
      a1[2] = (unsigned __int8 *)v19;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      unsigned __int8 v20 = *((unsigned char *)a1 + 16);
      ++a1[3];
      uint64_t v21 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v22 = -1;
      }
      else
      {
        uint64_t v22 = *v21;
        *a1 = v21 + 1;
      }
      a1[2] = (unsigned __int8 *)v22;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      size_t v23 = a1[2];
      if (!sub_24C6BDA84(a1, 2, v20, (void *)a2)) {
        return 0;
      }
      goto LABEL_47;
    case 0xC8uLL:
      ++a1[3];
      size_t v24 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v25 = -1;
      }
      else
      {
        uint64_t v25 = *v24;
        *a1 = v24 + 1;
      }
      a1[2] = (unsigned __int8 *)v25;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      __int16 v26 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      uint64_t v27 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v28 = -1;
      }
      else
      {
        uint64_t v28 = *v27;
        *a1 = v27 + 1;
      }
      a1[2] = (unsigned __int8 *)v28;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      if (*((unsigned char *)a1 + 32)) {
        __int16 v29 = v26;
      }
      else {
        __int16 v29 = *((unsigned __int8 *)a1 + 16);
      }
      if (*((unsigned char *)a1 + 32)) {
        LOBYTE(v26) = *((unsigned char *)a1 + 16);
      }
      ++a1[3];
      unint64_t v30 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v31 = -1;
      }
      else
      {
        uint64_t v31 = *v30;
        *a1 = v30 + 1;
      }
      a1[2] = (unsigned __int8 *)v31;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      unsigned __int16 v32 = v26 | (unsigned __int16)(v29 << 8);
      size_t v23 = a1[2];
      if (!sub_24C6BDA84(a1, 2, v32, (void *)a2)) {
        return 0;
      }
LABEL_47:
      *(unsigned char *)(a2 + 24) = (_BYTE)v23;
      goto LABEL_80;
    case 0xC9uLL:
      unsigned int v47 = 0;
      uint64_t v2 = 0;
      if (!sub_24C6BBF84(a1, 2, (int *)&v47)) {
        return v2;
      }
      ++a1[3];
      unint64_t v33 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v34 = -1;
      }
      else
      {
        uint64_t v34 = *v33;
        *a1 = v33 + 1;
      }
      a1[2] = (unsigned __int8 *)v34;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      char v35 = a1[2];
      if (!sub_24C6BD808(a1, 2, v47, (void *)a2)) {
        return 0;
      }
LABEL_79:
      *(unsigned char *)(a2 + 24) = (_BYTE)v35;
LABEL_80:
      *(unsigned char *)(a2 + 25) = 1;
      return 1;
    case 0xD4uLL:
      ++a1[3];
      unint64_t v36 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v37 = -1;
      }
      else
      {
        uint64_t v37 = *v36;
        *a1 = v36 + 1;
      }
      a1[2] = (unsigned __int8 *)v37;
      if (!sub_24C6B8B9C(a1, 2, "number")) {
        return 0;
      }
      unint64_t v38 = a1[2];
      if (!sub_24C6BB154(a1, 2, 1, (void *)a2)) {
        return 0;
      }
      *(unsigned char *)(a2 + 24) = (_BYTE)v38;
      goto LABEL_80;
    case 0xD5uLL:
      ++a1[3];
      char v39 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v40 = -1;
      }
      else
      {
        uint64_t v40 = *v39;
        *a1 = v39 + 1;
      }
      a1[2] = (unsigned __int8 *)v40;
      if (sub_24C6B8B9C(a1, 2, "number"))
      {
        char v35 = a1[2];
        if (sub_24C6BB154(a1, 2, 2, (void *)a2)) {
          goto LABEL_79;
        }
      }
      return 0;
    case 0xD6uLL:
      ++a1[3];
      int64_t v41 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v42 = -1;
      }
      else
      {
        uint64_t v42 = *v41;
        *a1 = v41 + 1;
      }
      a1[2] = (unsigned __int8 *)v42;
      if (sub_24C6B8B9C(a1, 2, "number"))
      {
        char v35 = a1[2];
        if (sub_24C6BB154(a1, 2, 4, (void *)a2)) {
          goto LABEL_79;
        }
      }
      return 0;
    case 0xD7uLL:
      ++a1[3];
      size_t v43 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v44 = -1;
      }
      else
      {
        uint64_t v44 = *v43;
        *a1 = v43 + 1;
      }
      a1[2] = (unsigned __int8 *)v44;
      if (sub_24C6B8B9C(a1, 2, "number"))
      {
        char v35 = a1[2];
        if (sub_24C6BB154(a1, 2, 8, (void *)a2)) {
          goto LABEL_79;
        }
      }
      return 0;
    case 0xD8uLL:
      ++a1[3];
      char v45 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v46 = -1;
      }
      else
      {
        uint64_t v46 = *v45;
        *a1 = v45 + 1;
      }
      a1[2] = (unsigned __int8 *)v46;
      if (sub_24C6B8B9C(a1, 2, "number"))
      {
        char v35 = a1[2];
        if (sub_24C6BB154(a1, 2, 16, (void *)a2)) {
          goto LABEL_79;
        }
      }
      return 0;
    default:
      return v2;
  }
}

uint64_t sub_24C6BF3EC(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case -1:
      return sub_24C6B8B9C((void *)a1, 3, "value");
    case 67:
      ++*(void *)(a1 + 24);
      uint64_t v19 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v20 = -1;
      }
      else
      {
        uint64_t v20 = *v19;
        *(void *)a1 = v19 + 1;
      }
      *(void *)(a1 + 16) = v20;
      if (!sub_24C6B8B9C((void *)a1, 3, "char")) {
        return 0;
      }
      unint64_t v21 = *(void *)(a1 + 16);
      if (v21 < 0x80)
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
        LOWORD(__p.__r_.__value_.__l.__data_) = v21;
        sub_24C6BAA30(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return 1;
      }
      sub_24C6B7C34(a1, &__dst);
      uint64_t v44 = *(void *)(a1 + 40);
      unint64_t v45 = *(void *)(a1 + 24);
      std::operator+<char>();
      sub_24C6698FC(v48, "char");
      sub_24C6B80F8(3, (uint64_t)v50, (uint64_t)v48, &v52);
      sub_24C6B7D14(113, v45, (uint64_t)&v52, (uint64_t)&__p);
      uint64_t v9 = sub_24C6B7BD4(v44, v45, (uint64_t)&__dst, (uint64_t)&__p);
      sub_24C6B83F0((std::runtime_error *)&__p);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((v49 & 0x80000000) == 0)
        {
LABEL_99:
          if ((SHIBYTE(v51) & 0x80000000) == 0) {
            goto LABEL_100;
          }
          goto LABEL_104;
        }
      }
      else if ((v49 & 0x80000000) == 0)
      {
        goto LABEL_99;
      }
      operator delete(v48[0]);
      if ((SHIBYTE(v51) & 0x80000000) == 0)
      {
LABEL_100:
        if ((SHIBYTE(v56) & 0x80000000) == 0) {
          return v9;
        }
LABEL_105:
        operator delete(__dst);
        return v9;
      }
LABEL_104:
      operator delete(v50[0]);
      if ((SHIBYTE(v56) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_105;
    case 68:
      std::string __dst = 0;
      uint64_t v9 = sub_24C6BC13C((unsigned __int8 **)a1, 3, (unint64_t *)&__dst);
      if (!v9) {
        return v9;
      }
      uint64_t v10 = *(unsigned __int8 ***)(a1 + 40);
      double v11 = *(double *)&__dst;
      goto LABEL_14;
    case 70:
      size_t v24 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_24C6BB7F8(v24, (unsigned __int8 *)&__p);
      return 1;
    case 72:
      return sub_24C6BFEF0(a1);
    case 73:
      ++*(void *)(a1 + 24);
      uint64_t v12 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v13 = -1;
      }
      else
      {
        uint64_t v13 = *v12;
        *(void *)a1 = v12 + 1;
      }
      *(void *)(a1 + 16) = v13;
      if (!sub_24C6B8B9C((void *)a1, 3, "number")) {
        return 0;
      }
      __int16 v14 = *(unsigned __int8 *)(a1 + 16);
      ++*(void *)(a1 + 24);
      uint64_t v15 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v16 = -1;
      }
      else
      {
        uint64_t v16 = *v15;
        *(void *)a1 = v15 + 1;
      }
      *(void *)(a1 + 16) = v16;
      if (!sub_24C6B8B9C((void *)a1, 3, "number")) {
        return 0;
      }
      unsigned __int8 v17 = *(unsigned char *)(a1 + 16);
      if (*(unsigned char *)(a1 + 32)) {
        __int16 v18 = v14;
      }
      else {
        __int16 v18 = *(unsigned __int8 *)(a1 + 16);
      }
      if (!*(unsigned char *)(a1 + 32)) {
        unsigned __int8 v17 = v14;
      }
      unsigned int v7 = *(unsigned __int8 ***)(a1 + 40);
      std::string::size_type v6 = (__int16)(v17 | (unsigned __int16)(v18 << 8));
      goto LABEL_27;
    case 76:
      std::string __dst = 0;
      uint64_t v9 = sub_24C6BC13C((unsigned __int8 **)a1, 3, (unint64_t *)&__dst);
      if (!v9) {
        return v9;
      }
      uint64_t v22 = *(unsigned __int8 ***)(a1 + 40);
      std::string::size_type v23 = (std::string::size_type)__dst;
      goto LABEL_46;
    case 83:
      memset(&__p, 0, sizeof(__p));
      uint64_t v9 = sub_24C6C0670((unsigned __int8 **)a1, &__p, 1);
      if (v9) {
        sub_24C6BAA30(*(unsigned __int8 ***)(a1 + 40), (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return v9;
    case 84:
      uint64_t v28 = *(unsigned __int8 ***)(a1 + 40);
      uint64_t v9 = 1;
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_24C6BB7F8(v28, (unsigned __int8 *)&__p);
      return v9;
    case 85:
      ++*(void *)(a1 + 24);
      uint64_t v25 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v26 = -1;
      }
      else
      {
        uint64_t v26 = *v25;
        *(void *)a1 = v25 + 1;
      }
      *(void *)(a1 + 16) = v26;
      if (!sub_24C6B8B9C((void *)a1, 3, "number")) {
        return 0;
      }
      uint64_t v27 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = *(unsigned __int8 *)(a1 + 16);
      sub_24C6BD5C0(v27, (uint64_t *)&__p);
      return 1;
    case 90:
      uint64_t v8 = *(unsigned __int8 ***)(a1 + 40);
      __p.__r_.__value_.__r.__words[0] = 0;
      sub_24C6BBA40(v8);
      return 1;
    case 91:
      return sub_24C6C0EE8((unsigned __int8 **)a1);
    case 100:
      LODWORD(__dst) = 0;
      uint64_t v9 = sub_24C6BBF84((unsigned __int8 **)a1, 3, (int *)&__dst);
      if (!v9) {
        return v9;
      }
      uint64_t v10 = *(unsigned __int8 ***)(a1 + 40);
      double v11 = *(float *)&__dst;
LABEL_14:
      *(double *)&__p.__r_.__value_.__l.__data_ = v11;
      sub_24C6BA7E8(v10, (uint64_t *)&__p);
      return v9;
    case 105:
      ++*(void *)(a1 + 24);
      BOOL v4 = *(unsigned __int8 **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        uint64_t v5 = -1;
      }
      else
      {
        uint64_t v5 = *v4;
        *(void *)a1 = v4 + 1;
      }
      *(void *)(a1 + 16) = v5;
      if (!sub_24C6B8B9C((void *)a1, 3, "number")) {
        return 0;
      }
      std::string::size_type v6 = *(char *)(a1 + 16);
      unsigned int v7 = *(unsigned __int8 ***)(a1 + 40);
LABEL_27:
      __p.__r_.__value_.__r.__words[0] = v6;
      sub_24C6BBC60(v7, (uint64_t *)&__p);
      return 1;
    case 108:
      LODWORD(__dst) = 0;
      uint64_t v9 = sub_24C6BBF84((unsigned __int8 **)a1, 3, (int *)&__dst);
      if (!v9) {
        return v9;
      }
      uint64_t v22 = *(unsigned __int8 ***)(a1 + 40);
      std::string::size_type v23 = (int)__dst;
LABEL_46:
      __p.__r_.__value_.__r.__words[0] = v23;
      sub_24C6BBC60(v22, (uint64_t *)&__p);
      return v9;
    case 123:
      return sub_24C6C106C(a1);
    default:
      __p.__r_.__value_.__s.__data_[2] = 0;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      snprintf((char *)&__p, 3uLL, "%.2hhX", *(unsigned __int8 *)(a1 + 16));
      size_t v29 = strlen((const char *)&__p);
      if (v29 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      size_t v30 = v29;
      if (v29 >= 0x17)
      {
        uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v32 = v29 | 7;
        }
        uint64_t v33 = v32 + 1;
        p_dst = (void **)operator new(v32 + 1);
        size_t v55 = v30;
        int64_t v56 = v33 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v56) = v29;
        p_dst = (void **)&__dst;
        if (!v29) {
          goto LABEL_67;
        }
      }
      memcpy(p_dst, &__p, v30);
LABEL_67:
      *((unsigned char *)p_dst + v30) = 0;
      int v34 = SHIBYTE(v56);
      if (v56 >= 0) {
        size_t v35 = HIBYTE(v56);
      }
      else {
        size_t v35 = v55;
      }
      unint64_t v36 = v35 + 16;
      if (v35 + 16 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      uint64_t v37 = *(void *)(a1 + 40);
      unint64_t v38 = *(void *)(a1 + 24);
      if (v36 >= 0x17)
      {
        uint64_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v40 = v36 | 7;
        }
        uint64_t v41 = v40 + 1;
        uint64_t v42 = (unint64_t *)operator new(v40 + 1);
        v50[1] = (void *)(v35 + 16);
        unint64_t v51 = v41 | 0x8000000000000000;
        v50[0] = v42;
        *(_OWORD *)uint64_t v42 = *(_OWORD *)"invalid byte: 0x";
        char v39 = v42 + 2;
      }
      else
      {
        char v39 = &v51;
        unint64_t v51 = 0;
        HIBYTE(v51) = v35 + 16;
        *(_OWORD *)unint64_t v50 = *(_OWORD *)"invalid byte: 0x";
        if (!v35) {
          goto LABEL_81;
        }
      }
      if (v34 >= 0) {
        size_t v43 = (void **)&__dst;
      }
      else {
        size_t v43 = __dst;
      }
      memmove(v39, v43, v35);
LABEL_81:
      *((unsigned char *)v39 + v35) = 0;
      char v49 = 5;
      strcpy((char *)v48, "value");
      sub_24C6B80F8(3, (uint64_t)v50, (uint64_t)v48, &v52);
      sub_24C6B7D14(112, v38, (uint64_t)&v52, (uint64_t)&__p);
      *(unsigned char *)(v37 + 40) = 1;
      if (*(unsigned char *)(v37 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        unsigned int v47 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&__p);
        __cxa_throw(v47, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FEDDA08;
      std::runtime_error::~runtime_error((std::runtime_error *)&__p.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((v49 & 0x80000000) == 0)
        {
LABEL_84:
          if ((SHIBYTE(v51) & 0x80000000) == 0) {
            goto LABEL_85;
          }
          goto LABEL_90;
        }
      }
      else if ((v49 & 0x80000000) == 0)
      {
        goto LABEL_84;
      }
      operator delete(v48[0]);
      if ((SHIBYTE(v51) & 0x80000000) == 0)
      {
LABEL_85:
        if ((v34 & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_91;
      }
LABEL_90:
      operator delete(v50[0]);
      if ((v34 & 0x80000000) == 0) {
        return 0;
      }
LABEL_91:
      operator delete(__dst);
      return 0;
  }
}

void sub_24C6BFBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,int a29,__int16 a30,char a31,char a32)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v32 - 65) & 0x80000000) == 0) {
LABEL_11:
    }
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(*(void **)(v32 - 88));
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a16);
  if ((*(char *)(v32 - 65) & 0x80000000) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t sub_24C6BFEF0(uint64_t a1)
{
  unint64_t v69 = 0;
  if (!sub_24C6C13FC((unsigned __int8 **)a1, &v69)) {
    return 0;
  }
  unint64_t v66 = 0;
  long long v67 = 0;
  long long v68 = 0;
  if (!v69)
  {
    uint64_t v2 = 0;
    uint64_t v27 = 0;
LABEL_45:
    v52[0] = v27;
    v52[1] = v2;
    char v53 = 0;
    int v54 = -1;
    char v55 = 0;
    long long v56 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v58 = 0u;
    *(_OWORD *)__int16 v59 = 0u;
    uint64_t v60 = 0;
    size_t v61 = "";
    unsigned __int8 v63 = 0;
    uint64_t v64 = 0;
    int64_t v62 = 0;
    uint64_t v28 = localeconv();
    if (v28->decimal_point) {
      int v29 = *v28->decimal_point;
    }
    else {
      int v29 = 46;
    }
    int v65 = v29;
    int v30 = sub_24C6C19C0((uint64_t)v52);
    sub_24C6C1E74((uint64_t)v52, &v51);
    if (sub_24C6C19C0((uint64_t)v52) == 15)
    {
      switch(v30)
      {
        case 5:
          uint64_t v33 = *(unsigned __int8 ***)(a1 + 40);
          v49.__vftable = v63;
          sub_24C6BD5C0(v33, (uint64_t *)&v49);
          goto LABEL_55;
        case 7:
          uint64_t v32 = *(unsigned __int8 ***)(a1 + 40);
          v49.__vftable = v64;
          sub_24C6BA7E8(v32, (uint64_t *)&v49);
          goto LABEL_55;
        case 6:
          uint64_t v31 = *(unsigned __int8 ***)(a1 + 40);
          v49.__vftable = v62;
          sub_24C6BBC60(v31, (uint64_t *)&v49);
LABEL_55:
          uint64_t v34 = 1;
          goto LABEL_62;
      }
      uint64_t v35 = *(void *)(a1 + 40);
      unint64_t v36 = *(void *)(a1 + 24);
      sub_24C6C1E74((uint64_t)v52, &v46);
      uint64_t v37 = std::string::insert(&v46, 0, "invalid number text: ", 0x15uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      HIBYTE(v45[2]) = 21;
      strcpy((char *)v45, "high-precision number");
      sub_24C6B80F8(3, (uint64_t)&v47, (uint64_t)v45, &v48);
      sub_24C6B7D14(115, v36, (uint64_t)&v48, (uint64_t)&v49);
      *(unsigned char *)(v35 + 40) = 1;
      if (*(unsigned char *)(v35 + 41))
      {
        exception = __cxa_allocate_exception(0x28uLL);
        uint64_t v44 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v49);
        __cxa_throw(v44, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
      }
      v49.__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
      std::runtime_error::~runtime_error(&v50);
      std::exception::~exception(&v49);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v48.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v45[2]) & 0x80000000) == 0)
        {
LABEL_59:
          if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_74;
        }
      }
      else if ((SHIBYTE(v45[2]) & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(v45[0]);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_61:
          uint64_t v34 = 0;
          goto LABEL_62;
        }
LABEL_75:
        operator delete(v46.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
LABEL_74:
      operator delete(v47.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_75;
    }
    uint64_t v41 = *(void *)(a1 + 40);
    unint64_t v42 = *(void *)(a1 + 24);
    sub_24C6C1E74((uint64_t)v52, &v46);
    sub_24C66A45C("invalid number text: ", &v46, &v47);
    sub_24C6698FC(v45, "high-precision number");
    sub_24C6B80F8(3, (uint64_t)&v47, (uint64_t)v45, &v48);
    sub_24C6B7D14(115, v42, (uint64_t)&v48, (uint64_t)&v49);
    uint64_t v34 = sub_24C6B7BD4(v41, v42, (uint64_t)&v51, (uint64_t)&v49);
    sub_24C6B83F0(&v49);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v48.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v45[2]) & 0x80000000) == 0)
      {
LABEL_81:
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_82;
        }
        goto LABEL_86;
      }
    }
    else if ((SHIBYTE(v45[2]) & 0x80000000) == 0)
    {
      goto LABEL_81;
    }
    operator delete(v45[0]);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
LABEL_87:
      operator delete(v46.__r_.__value_.__l.__data_);
LABEL_62:
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v51.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v60) & 0x80000000) == 0)
        {
LABEL_64:
          char v39 = __p[1];
          if (!__p[1]) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
      }
      else if ((SHIBYTE(v60) & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(v59[0]);
      char v39 = __p[1];
      if (!__p[1])
      {
LABEL_66:
        if (v27) {
          goto LABEL_67;
        }
        return v34;
      }
LABEL_65:
      *(void *)&long long v58 = v39;
      operator delete(v39);
      goto LABEL_66;
    }
LABEL_86:
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_87;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  while (1)
  {
    ++*(void *)(a1 + 24);
    BOOL v4 = *(unsigned __int8 **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8))
    {
      uint64_t v5 = -1;
    }
    else
    {
      uint64_t v5 = *v4;
      *(void *)a1 = v4 + 1;
    }
    *(void *)(a1 + 16) = v5;
    if ((sub_24C6B8B9C((void *)a1, 3, "number") & 1) == 0) {
      break;
    }
    char v6 = *(unsigned char *)(a1 + 16);
    if (v2 < v68)
    {
      *v2++ = v6;
      long long v67 = v2;
      if (++v3 >= v69) {
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v7 = v66;
      unint64_t v8 = (unint64_t)&v2[-v66];
      uint64_t v9 = (uint64_t)&v2[-v66 + 1];
      if (v9 < 0) {
        sub_24C667470();
      }
      unint64_t v10 = (unint64_t)&v68[-v66];
      if (2 * (uint64_t)&v68[-v66] > (unint64_t)v9) {
        uint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v11 = v9;
      }
      if (v11)
      {
        int64_t v12 = (int64_t)operator new(v11);
        uint64_t v13 = (char *)(v12 + v8);
        *(unsigned char *)(v12 + v8) = v6;
        uint64_t v14 = v12 + v8 + 1;
        if (v2 != (char *)v7) {
          goto LABEL_17;
        }
      }
      else
      {
        int64_t v12 = 0;
        uint64_t v13 = &v2[-v66];
        *(unsigned char *)unint64_t v8 = v6;
        uint64_t v14 = v8 + 1;
        if (v2 != (char *)v7)
        {
LABEL_17:
          if (v8 < 8 || v12 + v8 + v7 - (void)v2 > v12 + v8 - 1 || v7 > (unint64_t)(v2 - 1) || v7 - v12 < 0x20)
          {
            uint64_t v15 = v2;
          }
          else if (v8 >= 0x20)
          {
            unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v19 = (_OWORD *)(v12 + v8 - 16);
            uint64_t v20 = (long long *)(v2 - 16);
            unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v22 = *v20;
              *(v19 - 1) = *(v20 - 1);
              _OWORD *v19 = v22;
              v19 -= 2;
              v20 -= 2;
              v21 -= 32;
            }
            while (v21);
            if (v8 == v18) {
              goto LABEL_21;
            }
            if ((v8 & 0x18) != 0) {
              goto LABEL_37;
            }
            v13 -= v18;
            uint64_t v15 = &v2[-v18];
          }
          else
          {
            unint64_t v18 = 0;
LABEL_37:
            uint64_t v15 = &v2[-(v8 & 0xFFFFFFFFFFFFFFF8)];
            v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
            std::string::size_type v23 = &v2[-v18 - v7 - 8 + v12];
            size_t v24 = (uint64_t *)&v2[-v18 - 8];
            unint64_t v25 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v26 = *v24--;
              *(void *)std::string::size_type v23 = v26;
              v23 -= 8;
              v25 += 8;
            }
            while (v25);
            if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_21:
              uint64_t v2 = (char *)v66;
              unint64_t v66 = v12;
              long long v67 = (unsigned char *)v14;
              long long v68 = (char *)(v12 + v11);
              if (!v2) {
                goto LABEL_26;
              }
LABEL_25:
              operator delete(v2);
              goto LABEL_26;
            }
          }
          uint64_t v16 = v13 - 1;
          do
          {
            char v17 = *--v15;
            *v16-- = v17;
          }
          while (v15 != (char *)v7);
          goto LABEL_21;
        }
      }
      unint64_t v66 = (unint64_t)v13;
      long long v67 = (unsigned char *)v14;
      long long v68 = (char *)(v12 + v11);
      if (v2) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v2 = (char *)v14;
      long long v67 = (unsigned char *)v14;
      if (++v3 >= v69)
      {
LABEL_43:
        uint64_t v27 = (unsigned char *)v66;
        goto LABEL_45;
      }
    }
  }
  uint64_t v34 = 0;
  uint64_t v27 = (unsigned char *)v66;
  if (!v66) {
    return v34;
  }
LABEL_67:
  long long v67 = v27;
  operator delete(v27);
  return v34;
}

void sub_24C6C0534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::runtime_error a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  sub_24C6B83F0(&a34);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    if (a26 < 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(a9);
  if (a26 < 0)
  {
LABEL_4:
    operator delete(a21);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a43 & 0x80000000) == 0)
    {
LABEL_12:
      sub_24C6C1F68((uint64_t)&a44);
      std::string v46 = *(void **)(v44 - 120);
      if (v46)
      {
        *(void *)(v44 - 112) = v46;
        operator delete(v46);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a38);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a15);
  if ((a43 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

BOOL sub_24C6C0670(unsigned __int8 **a1, std::string *a2, int a3)
{
  if (a3)
  {
    ++a1[3];
    uint64_t v5 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v6 = -1;
    }
    else
    {
      uint64_t v6 = *v5;
      *a1 = v5 + 1;
    }
    a1[2] = (unsigned __int8 *)v6;
  }
  if (sub_24C6B8B9C(a1, 3, "value"))
  {
    unint64_t v7 = a1[2];
    switch((unint64_t)v7)
    {
      case 'I':
        ++a1[3];
        unint64_t v8 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v9 = -1;
        }
        else
        {
          uint64_t v9 = *v8;
          *a1 = v8 + 1;
        }
        a1[2] = (unsigned __int8 *)v9;
        if (!sub_24C6B8B9C(a1, 3, "number")) {
          break;
        }
        __int16 v10 = *((unsigned __int8 *)a1 + 16);
        ++a1[3];
        size_t v11 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v12 = -1;
        }
        else
        {
          uint64_t v12 = *v11;
          *a1 = v11 + 1;
        }
        a1[2] = (unsigned __int8 *)v12;
        if (!sub_24C6B8B9C(a1, 3, "number")) {
          break;
        }
        unsigned __int8 v13 = *((unsigned char *)a1 + 16);
        if (*((unsigned char *)a1 + 32)) {
          __int16 v14 = v10;
        }
        else {
          __int16 v14 = *((unsigned __int8 *)a1 + 16);
        }
        if (!*((unsigned char *)a1 + 32)) {
          unsigned __int8 v13 = v10;
        }
        int v15 = (__int16)(v13 | (unsigned __int16)(v14 << 8));
        if (v15 < 1) {
          return 1;
        }
        LOWORD(v16) = 0;
        do
        {
          ++a1[3];
          char v17 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v18 = -1;
          }
          else
          {
            uint64_t v18 = *v17;
            *a1 = v17 + 1;
          }
          a1[2] = (unsigned __int8 *)v18;
          int v19 = sub_24C6B8B9C(a1, 3, "string");
          BOOL v20 = v19;
          if (!v19) {
            break;
          }
          std::string::push_back(a2, *((unsigned char *)a1 + 16));
          int v16 = (__int16)(v16 + 1);
        }
        while (v16 < v15);
        return v20;
      case 'L':
        *(void *)&v61[48] = 0;
        if (!sub_24C6BC13C(a1, 3, (unint64_t *)&v61[48])) {
          break;
        }
        uint64_t v31 = *(void *)&v61[48];
        if (*(uint64_t *)&v61[48] < 1) {
          return 1;
        }
        BOOL v20 = 0;
        uint64_t v32 = 0;
        while (2)
        {
          ++a1[3];
          uint64_t v33 = *a1;
          if (*a1 != a1[1])
          {
            uint64_t v34 = (unsigned __int8 *)*v33;
            *a1 = v33 + 1;
            a1[2] = v34;
            if (!sub_24C6B8B9C(a1, 3, "string")) {
              return v20;
            }
LABEL_46:
            std::string::push_back(a2, *((unsigned char *)a1 + 16));
            BOOL v20 = ++v32 >= v31;
            if (v31 == v32) {
              return v20;
            }
            continue;
          }
          break;
        }
        a1[2] = (unsigned __int8 *)-1;
        if (sub_24C6B8B9C(a1, 3, "string")) {
          goto LABEL_46;
        }
        return v20;
      case 'U':
        ++a1[3];
        size_t v24 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v25 = -1;
        }
        else
        {
          uint64_t v25 = *v24;
          *a1 = v24 + 1;
        }
        a1[2] = (unsigned __int8 *)v25;
        if (!sub_24C6B8B9C(a1, 3, "number")) {
          break;
        }
        unsigned int v26 = *((unsigned __int8 *)a1 + 16);
        if (!*((unsigned char *)a1 + 16)) {
          return 1;
        }
        unsigned int v27 = 0;
        do
        {
          ++a1[3];
          uint64_t v28 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v29 = -1;
          }
          else
          {
            uint64_t v29 = *v28;
            *a1 = v28 + 1;
          }
          a1[2] = (unsigned __int8 *)v29;
          int v30 = sub_24C6B8B9C(a1, 3, "string");
          BOOL v20 = v30;
          if (!v30) {
            break;
          }
          std::string::push_back(a2, *((unsigned char *)a1 + 16));
          ++v27;
        }
        while (v27 < v26);
        return v20;
      case 'i':
        ++a1[3];
        uint64_t v35 = *a1;
        if (*a1 == a1[1])
        {
          uint64_t v36 = -1;
        }
        else
        {
          uint64_t v36 = *v35;
          *a1 = v35 + 1;
        }
        a1[2] = (unsigned __int8 *)v36;
        if (!sub_24C6B8B9C(a1, 3, "number")) {
          break;
        }
        int v37 = *((char *)a1 + 16);
        if (v37 < 1) {
          return 1;
        }
        LOBYTE(v38) = 0;
        do
        {
          ++a1[3];
          char v39 = *a1;
          if (*a1 == a1[1])
          {
            uint64_t v40 = -1;
          }
          else
          {
            uint64_t v40 = *v39;
            *a1 = v39 + 1;
          }
          a1[2] = (unsigned __int8 *)v40;
          int v41 = sub_24C6B8B9C(a1, 3, "string");
          BOOL v20 = v41;
          if (!v41) {
            break;
          }
          std::string::push_back(a2, *((unsigned char *)a1 + 16));
          int v38 = (char)(v38 + 1);
        }
        while (v38 < v37);
        return v20;
      case 'l':
        *(_DWORD *)&v61[48] = 0;
        BOOL v20 = 0;
        if (!sub_24C6BBF84(a1, 3, (int *)&v61[48])) {
          return v20;
        }
        int v42 = *(_DWORD *)&v61[48];
        if (*(int *)&v61[48] >= 1)
        {
          BOOL v20 = 0;
          int v43 = 0;
          while (1)
          {
            ++a1[3];
            uint64_t v44 = *a1;
            if (*a1 == a1[1])
            {
              a1[2] = (unsigned __int8 *)-1;
              if (!sub_24C6B8B9C(a1, 3, "string")) {
                return v20;
              }
            }
            else
            {
              unint64_t v45 = (unsigned __int8 *)*v44;
              *a1 = v44 + 1;
              a1[2] = v45;
              if (!sub_24C6B8B9C(a1, 3, "string")) {
                return v20;
              }
            }
            std::string::push_back(a2, *((unsigned char *)a1 + 16));
            BOOL v20 = ++v43 >= v42;
            if (v42 == v43) {
              return v20;
            }
          }
        }
        return 1;
      default:
        v61[50] = 0;
        *(_WORD *)&v61[48] = 0;
        snprintf(&v61[48], 3uLL, "%.2hhX", v7);
        size_t v21 = strlen(&v61[48]);
        if (v21 > 0x7FFFFFFFFFFFFFF7) {
          sub_24C6673C8();
        }
        size_t v22 = v21;
        if (v21 >= 0x17)
        {
          uint64_t v46 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v46 = v21 | 7;
          }
          uint64_t v47 = v46 + 1;
          p_dst = (void **)operator new(v46 + 1);
          size_t v64 = v22;
          int64_t v65 = v47 | 0x8000000000000000;
          std::string __dst = p_dst;
        }
        else
        {
          HIBYTE(v65) = v21;
          p_dst = (void **)&__dst;
          if (!v21)
          {
LABEL_75:
            *((unsigned char *)p_dst + v22) = 0;
            int v48 = SHIBYTE(v65);
            if (v65 >= 0) {
              size_t v49 = HIBYTE(v65);
            }
            else {
              size_t v49 = v64;
            }
            unint64_t v50 = v49 + 65;
            if (v49 + 65 > 0x7FFFFFFFFFFFFFF7) {
              sub_24C6673C8();
            }
            std::string v51 = a1[5];
            unint64_t v52 = (unint64_t)a1[3];
            if (v50 > 0x16)
            {
              uint64_t v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17) {
                uint64_t v54 = v50 | 7;
              }
              *(void *)&v61[8] = v49 + 65;
              *(void *)&v61[16] = (v54 + 1) | 0x8000000000000000;
              *(void *)size_t v61 = operator new(v54 + 1);
              qmemcpy(*(void **)v61, "expected length type specification (U, i, I, l, L); last byte: 0x", 65);
              char v53 = (unsigned char *)(*(void *)v61 + 65);
              if (!v49)
              {
LABEL_88:
                v53[v49] = 0;
                char v60 = 6;
                strcpy((char *)v59, "string");
                sub_24C6B80F8(3, (uint64_t)v61, (uint64_t)v59, (std::string *)&v61[24]);
                sub_24C6B7D14(113, v52, (uint64_t)&v61[24], (uint64_t)&v61[48]);
                v51[40] = 1;
                if (v51[41])
                {
                  exception = __cxa_allocate_exception(0x28uLL);
                  long long v58 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v61[48]);
                  __cxa_throw(v58, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
                }
                *(void *)&v61[48] = &unk_26FEDDA08;
                std::runtime_error::~runtime_error((std::runtime_error *)&v61[64]);
                std::exception::~exception((std::exception *)&v61[48]);
                if ((v61[47] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v61[24]);
                  if ((v60 & 0x80000000) == 0)
                  {
LABEL_91:
                    if ((v61[23] & 0x80000000) == 0) {
                      goto LABEL_92;
                    }
                    goto LABEL_97;
                  }
                }
                else if ((v60 & 0x80000000) == 0)
                {
                  goto LABEL_91;
                }
                operator delete(v59[0]);
                if ((v61[23] & 0x80000000) == 0)
                {
LABEL_92:
                  if ((v48 & 0x80000000) == 0) {
                    break;
                  }
LABEL_98:
                  operator delete(__dst);
                  break;
                }
LABEL_97:
                operator delete(*(void **)v61);
                if ((v48 & 0x80000000) == 0) {
                  break;
                }
                goto LABEL_98;
              }
            }
            else
            {
              qmemcpy(v61, "expected length type specification (U, i, I, l, L); last byte: 0x", sizeof(v61));
              char v53 = v62;
            }
            if (v48 >= 0) {
              char v55 = (void **)&__dst;
            }
            else {
              char v55 = __dst;
            }
            memmove(v53, v55, v49);
            goto LABEL_88;
          }
        }
        memcpy(p_dst, &v61[48], v22);
        goto LABEL_75;
    }
  }
  return 0;
}

void sub_24C6C0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (v28 < 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (v28 < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

uint64_t sub_24C6C0EE8(unsigned __int8 **a1)
{
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t result = sub_24C6C4388((uint64_t)a1, &v15);
  if (result)
  {
    uint64_t v3 = (uint64_t)a1[5];
    if (v15 == -1)
    {
      uint64_t result = sub_24C6BAE30(v3, 0xFFFFFFFFFFFFFFFFLL);
      if (!result) {
        return result;
      }
      uint64_t v9 = (uint64_t)a1[2];
LABEL_18:
      while (v9 != 93)
      {
        uint64_t result = sub_24C6BF3EC(a1);
        if (!result) {
          return result;
        }
        size_t v11 = *a1;
        __int16 v10 = a1[1];
        uint64_t v12 = (uint64_t)(a1[3] + 1);
        while (1)
        {
          a1[3] = (unsigned __int8 *)v12;
          if (v11 == v10) {
            break;
          }
          unsigned int v13 = *v11++;
          uint64_t v9 = v13;
          *a1 = v11;
          a1[2] = (unsigned __int8 *)v13;
          ++v12;
          if (v13 != 78) {
            goto LABEL_18;
          }
        }
        uint64_t v9 = -1;
        a1[2] = (unsigned __int8 *)-1;
      }
      goto LABEL_29;
    }
    uint64_t result = sub_24C6BAE30(v3, v15);
    if (!result) {
      return result;
    }
    if (v16 == 78) {
      goto LABEL_29;
    }
    if (!v16)
    {
      if (v15)
      {
        uint64_t v4 = 0;
        while (2)
        {
          uint64_t v6 = *a1;
          uint64_t v5 = a1[1];
          uint64_t v7 = (uint64_t)(a1[3] + 1);
          while (1)
          {
            a1[3] = (unsigned __int8 *)v7;
            if (v6 == v5) {
              break;
            }
            unsigned int v8 = *v6++;
            *a1 = v6;
            a1[2] = (unsigned __int8 *)v8;
            ++v7;
            if (v8 != 78)
            {
              if ((sub_24C6BF3EC(a1) & 1) == 0) {
                return 0;
              }
              goto LABEL_12;
            }
          }
          a1[2] = (unsigned __int8 *)-1;
          if ((sub_24C6BF3EC(a1) & 1) == 0) {
            return 0;
          }
LABEL_12:
          if (++v4 < v15) {
            continue;
          }
          break;
        }
      }
      goto LABEL_29;
    }
    if (!v15)
    {
LABEL_29:
      *((void *)a1[5] + 2) -= 8;
      return 1;
    }
    uint64_t v14 = 0;
    while ((sub_24C6BF3EC(a1) & 1) != 0)
    {
      if (++v14 >= v15) {
        goto LABEL_29;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_24C6C106C(uint64_t a1)
{
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  if (!sub_24C6C4388(a1, &v27)) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v27 != -1)
  {
    if (sub_24C6B85FC(v2, v27))
    {
      if (v28)
      {
        if (!v27) {
          goto LABEL_43;
        }
        uint64_t v3 = 0;
        while (sub_24C6C0670((unsigned __int8 **)a1, &__p, 1))
        {
          uint64_t v4 = *(void *)(a1 + 40);
          uint64_t v5 = *(uint64_t ***)(*(void *)(*(void *)(v4 + 16) - 8) + 8);
          p_p = &__p;
          *(void *)(v4 + 32) = sub_24C6B9CF8(v5, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
          if (!sub_24C6BF3EC(a1)) {
            break;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
            if (++v3 >= v27) {
              goto LABEL_43;
            }
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
            if (++v3 >= v27) {
              goto LABEL_43;
            }
          }
        }
      }
      else
      {
        if (!v27) {
          goto LABEL_43;
        }
        uint64_t v17 = 0;
        while (sub_24C6C0670((unsigned __int8 **)a1, &__p, 1))
        {
          uint64_t v18 = *(void *)(a1 + 40);
          int v19 = *(uint64_t ***)(*(void *)(*(void *)(v18 + 16) - 8) + 8);
          p_p = &__p;
          *(void *)(v18 + 32) = sub_24C6B9CF8(v19, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
          size_t v21 = *(unsigned __int8 **)a1;
          BOOL v20 = *(unsigned __int8 **)(a1 + 8);
          uint64_t v22 = *(void *)(a1 + 24) + 1;
          while (1)
          {
            *(void *)(a1 + 24) = v22;
            if (v21 == v20) {
              break;
            }
            unsigned int v23 = *v21++;
            *(void *)a1 = v21;
            *(void *)(a1 + 16) = v23;
            ++v22;
            if (v23 != 78) {
              goto LABEL_38;
            }
          }
          *(void *)(a1 + 16) = -1;
LABEL_38:
          if (!sub_24C6BF3EC(a1)) {
            break;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
            if (++v17 >= v27) {
              goto LABEL_43;
            }
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
            if (++v17 >= v27) {
              goto LABEL_43;
            }
          }
        }
      }
    }
    goto LABEL_46;
  }
  if (!sub_24C6B85FC(v2, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_46;
  }
  if (*(void *)(a1 + 16) == 125) {
    goto LABEL_43;
  }
LABEL_17:
  while (2)
  {
    if (!sub_24C6C0670((unsigned __int8 **)a1, &__p, 0)) {
      goto LABEL_46;
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(uint64_t ***)(*(void *)(*(void *)(v6 + 16) - 8) + 8);
    p_p = &__p;
    *(void *)(v6 + 32) = sub_24C6B9CF8(v7, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_24C72FF38, (long long **)&p_p)+ 7;
    uint64_t v9 = *(unsigned __int8 **)a1;
    unsigned int v8 = *(unsigned __int8 **)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 24) + 1;
    while (1)
    {
      *(void *)(a1 + 24) = v10;
      if (v9 == v8) {
        break;
      }
      unsigned int v11 = *v9++;
      *(void *)a1 = v9;
      *(void *)(a1 + 16) = v11;
      ++v10;
      if (v11 != 78) {
        goto LABEL_21;
      }
    }
    *(void *)(a1 + 16) = -1;
LABEL_21:
    if (!sub_24C6BF3EC(a1))
    {
LABEL_46:
      uint64_t v24 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_44;
      }
      return v24;
    }
    unsigned int v13 = *(unsigned __int8 **)a1;
    uint64_t v12 = *(unsigned __int8 **)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 24) + 1;
    do
    {
      *(void *)(a1 + 24) = v14;
      if (v13 == v12)
      {
        uint64_t v15 = -1;
        *(void *)(a1 + 16) = -1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_16:
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        if (*(void *)(a1 + 16) == 125) {
          goto LABEL_43;
        }
        goto LABEL_17;
      }
      unsigned int v16 = *v13++;
      uint64_t v15 = v16;
      *(void *)a1 = v13;
      *(void *)(a1 + 16) = v16;
      ++v14;
    }
    while (v16 == 78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_16;
    }
LABEL_26:
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    if (v15 != 125) {
      continue;
    }
    break;
  }
LABEL_43:
  *(void *)(*(void *)(a1 + 40) + 16) -= 8;
  uint64_t v24 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_44:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v24;
}

void sub_24C6C13D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6C13FC(unsigned __int8 **a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (uint64_t)(a1[3] + 1);
  do
  {
    a1[3] = (unsigned __int8 *)v6;
    if (v4 == v5)
    {
      LOBYTE(v7) = -1;
      a1[2] = (unsigned __int8 *)-1;
LABEL_31:
      v36[50] = 0;
      *(_WORD *)&v36[48] = 0;
      snprintf(&v36[48], 3uLL, "%.2hhX", v7);
      size_t v19 = strlen(&v36[48]);
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        sub_24C6673C8();
      }
      size_t v20 = v19;
      if (v19 >= 0x17)
      {
        uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v22 = v19 | 7;
        }
        uint64_t v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        size_t v39 = v20;
        int64_t v40 = v23 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v40) = v19;
        p_dst = (void **)&__dst;
        if (!v19)
        {
LABEL_39:
          *((unsigned char *)p_dst + v20) = 0;
          int v24 = SHIBYTE(v40);
          if (v40 >= 0) {
            size_t v25 = HIBYTE(v40);
          }
          else {
            size_t v25 = v39;
          }
          unint64_t v26 = v25 + 75;
          if (v25 + 75 > 0x7FFFFFFFFFFFFFF7) {
            sub_24C6673C8();
          }
          unint64_t v27 = a1[5];
          unint64_t v28 = (unint64_t)a1[3];
          if (v26 > 0x16)
          {
            uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17) {
              uint64_t v30 = v26 | 7;
            }
            *(void *)&v36[8] = v25 + 75;
            *(void *)&v36[16] = (v30 + 1) | 0x8000000000000000;
            *(void *)uint64_t v36 = operator new(v30 + 1);
            qmemcpy(*(void **)v36, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x", 75);
            uint64_t v29 = (unsigned char *)(*(void *)v36 + 75);
            if (!v25)
            {
LABEL_52:
              v29[v25] = 0;
              char v35 = 4;
              strcpy((char *)v34, "size");
              sub_24C6B80F8(3, (uint64_t)v36, (uint64_t)v34, (std::string *)&v36[24]);
              sub_24C6B7D14(113, v28, (uint64_t)&v36[24], (uint64_t)&v36[48]);
              v27[40] = 1;
              if (v27[41])
              {
                exception = __cxa_allocate_exception(0x28uLL);
                uint64_t v33 = (void *)sub_24C6C469C((uint64_t)exception, (uint64_t)&v36[48]);
                __cxa_throw(v33, (struct type_info *)&unk_26FEDD6D0, (void (*)(void *))sub_24C6B83F0);
              }
              *(void *)&v36[48] = &unk_26FEDDA08;
              std::runtime_error::~runtime_error((std::runtime_error *)&v36[64]);
              std::exception::~exception((std::exception *)&v36[48]);
              if ((v36[47] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v36[24]);
                if ((v35 & 0x80000000) == 0)
                {
LABEL_55:
                  if ((v36[23] & 0x80000000) == 0) {
                    goto LABEL_56;
                  }
                  goto LABEL_61;
                }
              }
              else if ((v35 & 0x80000000) == 0)
              {
                goto LABEL_55;
              }
              operator delete(v34[0]);
              if ((v36[23] & 0x80000000) == 0)
              {
LABEL_56:
                if ((v24 & 0x80000000) == 0) {
                  return 0;
                }
LABEL_62:
                operator delete(__dst);
                return 0;
              }
LABEL_61:
              operator delete(*(void **)v36);
              if ((v24 & 0x80000000) == 0) {
                return 0;
              }
              goto LABEL_62;
            }
          }
          else
          {
            qmemcpy(v36, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x", sizeof(v36));
            uint64_t v29 = v37;
          }
          if (v24 >= 0) {
            uint64_t v31 = (void **)&__dst;
          }
          else {
            uint64_t v31 = __dst;
          }
          memmove(v29, v31, v25);
          goto LABEL_52;
        }
      }
      memcpy(p_dst, &v36[48], v20);
      goto LABEL_39;
    }
    unsigned int v8 = *v4++;
    unsigned int v7 = v8;
    *a1 = v4;
    a1[2] = (unsigned __int8 *)v8;
    ++v6;
  }
  while (v8 == 78);
  switch(v7)
  {
    case 'I':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        uint64_t v9 = -1;
      }
      else
      {
        uint64_t v9 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v9;
      uint64_t result = sub_24C6B8B9C(a1, 3, "number");
      if (!result) {
        return result;
      }
      __int16 v11 = *((unsigned __int8 *)a1 + 16);
      ++a1[3];
      uint64_t v12 = *a1;
      if (*a1 == a1[1])
      {
        uint64_t v13 = -1;
      }
      else
      {
        uint64_t v13 = *v12;
        *a1 = v12 + 1;
      }
      a1[2] = (unsigned __int8 *)v13;
      uint64_t result = sub_24C6B8B9C(a1, 3, "number");
      if (!result) {
        return result;
      }
      unsigned __int8 v14 = *((unsigned char *)a1 + 16);
      if (*((unsigned char *)a1 + 32)) {
        __int16 v15 = v11;
      }
      else {
        __int16 v15 = *((unsigned __int8 *)a1 + 16);
      }
      if (!*((unsigned char *)a1 + 32)) {
        unsigned __int8 v14 = v11;
      }
      uint64_t v16 = (__int16)(v14 | (unsigned __int16)(v15 << 8));
      break;
    case 'L':
      *(void *)&v36[48] = 0;
      uint64_t result = sub_24C6BC13C(a1, 3, (unint64_t *)&v36[48]);
      if (result) {
        *a2 = *(void *)&v36[48];
      }
      return result;
    case 'U':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        uint64_t v18 = -1;
      }
      else
      {
        uint64_t v18 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v18;
      uint64_t result = sub_24C6B8B9C(a1, 3, "number");
      if (!result) {
        return result;
      }
      uint64_t v16 = *((unsigned __int8 *)a1 + 16);
      break;
    case 'i':
      a1[3] = (unsigned __int8 *)v6;
      if (v4 == v5)
      {
        uint64_t v17 = -1;
      }
      else
      {
        uint64_t v17 = *v4;
        *a1 = v4 + 1;
      }
      a1[2] = (unsigned __int8 *)v17;
      uint64_t result = sub_24C6B8B9C(a1, 3, "number");
      if (!result) {
        return result;
      }
      uint64_t v16 = *((char *)a1 + 16);
      break;
    case 'l':
      *(_DWORD *)&v36[48] = 0;
      uint64_t result = sub_24C6BBF84(a1, 3, (int *)&v36[48]);
      if (result) {
        *a2 = *(int *)&v36[48];
      }
      return result;
    default:
      goto LABEL_31;
  }
  *a2 = v16;
  return 1;
}

void sub_24C6C18A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((v28 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_24C6C19C0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  if (sub_24C6C3F84(a1) == 239)
  {
    if (sub_24C6C3F84(a1) == 187 && sub_24C6C3F84(a1) == 191) {
      goto LABEL_12;
    }
    uint64_t v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_6:
    *(void *)(a1 + 104) = v2;
    return 14;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 24) = 1;
    --*(void *)(a1 + 32);
    if (v4 || (uint64_t v3 = (void *)(a1 + 48), (v4 = *(void *)(a1 + 48)) != 0)) {
      void *v3 = v4 - 1;
    }
    if (*(_DWORD *)(a1 + 20) != -1) {
      --*(void *)(a1 + 64);
    }
LABEL_12:
    while (1)
    {
      sub_24C6C1FB8(a1);
      if (!*(unsigned char *)(a1 + 16) || *(_DWORD *)(a1 + 20) != 47) {
        break;
      }
      if (!sub_24C6C2290(a1)) {
        return 14;
      }
    }
    uint64_t result = 8;
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0xFFFFFFFF:
      case 0:
        uint64_t result = 15;
        break;
      case 0x22:
        uint64_t result = sub_24C6C23B4(a1);
        break;
      case 0x2C:
        uint64_t result = 13;
        break;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        uint64_t result = sub_24C6C388C(a1);
        break;
      case 0x3A:
        uint64_t result = 12;
        break;
      case 0x5B:
        return result;
      case 0x5D:
        uint64_t result = 10;
        break;
      case 0x66:
        if (sub_24C6C3F84(a1) != 97
          || sub_24C6C3F84(a1) != 108
          || sub_24C6C3F84(a1) != 115
          || sub_24C6C3F84(a1) != 101)
        {
          goto LABEL_42;
        }
        uint64_t result = 2;
        break;
      case 0x6E:
        if (sub_24C6C3F84(a1) != 117
          || sub_24C6C3F84(a1) != 108
          || sub_24C6C3F84(a1) != 108)
        {
          goto LABEL_42;
        }
        uint64_t result = 3;
        break;
      case 0x74:
        if (sub_24C6C3F84(a1) != 114
          || sub_24C6C3F84(a1) != 117
          || sub_24C6C3F84(a1) != 101)
        {
          goto LABEL_42;
        }
        uint64_t result = 1;
        break;
      case 0x7B:
        uint64_t result = 9;
        break;
      case 0x7D:
        uint64_t result = 11;
        break;
      default:
LABEL_42:
        uint64_t v2 = "invalid literal";
        goto LABEL_6;
    }
  }
  return result;
}

void sub_24C6C1E74(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 56);
  for (unsigned int i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v8 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::size_type v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_24C6C1F48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6C1F68(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    uint64_t v2 = *(void **)(a1 + 56);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C6C1FB8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 56);
  int64x2_t v3 = vdupq_n_s64(1uLL);
  int64x2_t v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1) {
        return;
      }
LABEL_8:
      uint64_t v9 = *(unsigned char **)(a1 + 64);
      unint64_t v8 = *(void *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *uint64_t v9 = v5;
        *(void *)(a1 + 64) = v9 + 1;
        unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17) {
          return;
        }
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            uint64_t v4 = *(void *)(a1 + 48) + 1;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      __int16 v11 = (unsigned char *)*v2;
      unint64_t v12 = (unint64_t)&v9[-*v2];
      unint64_t v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0) {
        sub_24C667470();
      }
      unint64_t v14 = v8 - (void)v11;
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)operator new(v15);
        uint64_t v17 = &v16[v12];
        v16[v12] = v5;
        uint64_t v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = &v9[-*v2];
        *(unsigned char *)unint64_t v12 = v5;
        uint64_t v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(void *)(a1 + 56) = v17;
          *(void *)(a1 + 64) = v18;
          *(void *)(a1 + 72) = &v16[v15];
          if (v9) {
            operator delete(v9);
          }
          int64x2_t v3 = v30;
          *(void *)(a1 + 64) = v18;
          unsigned int v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          unint64_t v19 = 0;
          goto LABEL_29;
        }
        unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        size_t v20 = &v16[v12 - 16];
        size_t v21 = (long long *)(v9 - 16);
        unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)size_t v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19) {
          goto LABEL_36;
        }
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          int v24 = &v16[&v9[-v19] - v11 - 8];
          size_t v25 = (uint64_t *)&v9[-v19 - 8];
          unint64_t v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *v25--;
            *(void *)int v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      int v28 = v17 - 1;
      do
      {
        char v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      uint64_t v9 = (unsigned char *)*v2;
      uint64_t v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  std::string::size_type v6 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    int v7 = *v6;
    LOBYTE(v5) = *v6;
    *(void *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_24C6C2290(uint64_t a1)
{
  int v2 = sub_24C6C3F84(a1);
  if (v2 == 42)
  {
    int v5 = (uint64_t *)(a1 + 48);
    do
    {
      while (1)
      {
        int v6 = sub_24C6C3F84(a1);
        if (v6 != 42) {
          break;
        }
        if (sub_24C6C3F84(a1) == 47) {
          return 1;
        }
        *(unsigned char *)(a1 + 24) = 1;
        uint64_t v7 = *(void *)(a1 + 40);
        --*(void *)(a1 + 32);
        unint64_t v8 = (void *)(a1 + 40);
        if (v7 || (uint64_t v7 = *v5, v8 = (void *)(a1 + 48), *v5)) {
          *unint64_t v8 = v7 - 1;
        }
        if (*(_DWORD *)(a1 + 20) != -1) {
          --*(void *)(a1 + 64);
        }
      }
    }
    while ((v6 + 1) >= 2);
    uint64_t result = 0;
    *(void *)(a1 + 104) = "invalid comment; missing closing '*/'";
  }
  else if (v2 == 47)
  {
    do
    {
      do
        unsigned int v3 = sub_24C6C3F84(a1) + 1;
      while (v3 >= 0xF);
    }
    while (((0x4803u >> v3) & 1) == 0);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 104) = "invalid comment; expecting '/' or '*' after '/'";
  }
  return result;
}

uint64_t sub_24C6C23B4(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  int v2 = (void *)(a1 + 56);
  unsigned int v3 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v3;
  int v4 = *(_DWORD *)(a1 + 20);
  unint64_t v5 = *(void *)(a1 + 72);
  if ((unint64_t)v3 >= v5)
  {
    unint64_t v7 = v5 - (void)v3;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = operator new(v9);
    unsigned char *v10 = v4;
    int v6 = v10 + 1;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10 + 1;
    *(void *)(a1 + 72) = &v10[v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    unsigned char *v3 = v4;
    int v6 = v3 + 1;
  }
  __int16 v11 = (void **)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  int64x2_t v141 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v141);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v15 = *(_DWORD *)(a1 + 20);
      if (v15 == -1) {
        goto LABEL_253;
      }
    }
    else
    {
      uint64_t v16 = *(unsigned char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_253:
        int64_t v40 = "invalid string: missing closing quote";
        goto LABEL_251;
      }
      int v17 = *v16;
      LOBYTE(v15) = *v16;
      *(void *)a1 = v16 + 1;
      *(_DWORD *)(a1 + 20) = v17;
      if (v17 == -1) {
        goto LABEL_253;
      }
    }
    unint64_t v19 = *(unsigned char **)(a1 + 64);
    unint64_t v18 = *(void *)(a1 + 72);
    if ((unint64_t)v19 >= v18)
    {
      size_t v21 = (unsigned char *)*v2;
      unint64_t v22 = (unint64_t)&v19[-*v2];
      unint64_t v23 = v22 + 1;
      if ((uint64_t)(v22 + 1) < 0) {
        goto LABEL_286;
      }
      unint64_t v24 = v18 - (void)v21;
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v25 = v23;
      }
      if (v25)
      {
        unint64_t v26 = (char *)operator new(v25);
        uint64_t v27 = &v26[v22];
        v26[v22] = v15;
        uint64_t v20 = (uint64_t)&v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_49:
          *(void *)(a1 + 56) = v27;
          *(void *)(a1 + 64) = v20;
          *(void *)(a1 + 72) = &v26[v25];
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = &v19[-*v2];
        *(unsigned char *)unint64_t v22 = v15;
        uint64_t v20 = v22 + 1;
        if (v19 == v21) {
          goto LABEL_49;
        }
      }
      if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
      {
        if (v22 < 0x20)
        {
          unint64_t v28 = 0;
          goto LABEL_41;
        }
        unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFE0;
        char v29 = &v26[v22 - 16];
        int64x2_t v30 = (long long *)(v19 - 16);
        unint64_t v31 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)char v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v22 == v28) {
          goto LABEL_48;
        }
        if ((v22 & 0x18) != 0)
        {
LABEL_41:
          v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v33 = &v26[&v19[-v28] - v21 - 8];
          uint64_t v34 = (uint64_t *)&v19[-v28 - 8];
          unint64_t v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v36 = *v34--;
            *(void *)uint64_t v33 = v36;
            v33 -= 8;
            v35 += 8;
          }
          while (v35);
          v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
        v27 -= v28;
        v19 -= v28;
      }
LABEL_46:
      int v37 = v27 - 1;
      do
      {
        char v38 = *--v19;
        *v37-- = v38;
      }
      while (v19 != v21);
LABEL_48:
      unint64_t v19 = (unsigned char *)*v2;
      uint64_t v27 = v26;
      goto LABEL_49;
    }
    unsigned char *v19 = v15;
    uint64_t v20 = (uint64_t)(v19 + 1);
LABEL_51:
    *(void *)(a1 + 64) = v20;
    int v39 = *(_DWORD *)(a1 + 20);
    if (v39 == 10)
    {
      uint64_t v138 = *(void *)(a1 + 48) + 1;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = v138;
      int64_t v40 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_251;
    }
    int64_t v40 = "invalid string: missing closing quote";
    switch(v39)
    {
      case -1:
        goto LABEL_251;
      case 0:
        int64_t v40 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_251;
      case 1:
        int64_t v40 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_251;
      case 2:
        int64_t v40 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_251;
      case 3:
        int64_t v40 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_251;
      case 4:
        int64_t v40 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_251;
      case 5:
        int64_t v40 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_251;
      case 6:
        int64_t v40 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_251;
      case 7:
        int64_t v40 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_251;
      case 8:
        int64_t v40 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_251;
      case 9:
        int64_t v40 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_251;
      case 11:
        int64_t v40 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_251;
      case 12:
        int64_t v40 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_251;
      case 13:
        int64_t v40 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_251;
      case 14:
        int64_t v40 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_251;
      case 15:
        int64_t v40 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_251;
      case 16:
        int64_t v40 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_251;
      case 17:
        int64_t v40 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_251;
      case 18:
        int64_t v40 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_251;
      case 19:
        int64_t v40 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_251;
      case 20:
        int64_t v40 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_251;
      case 21:
        int64_t v40 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_251;
      case 22:
        int64_t v40 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_251;
      case 23:
        int64_t v40 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_251;
      case 24:
        int64_t v40 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_251;
      case 25:
        int64_t v40 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_251;
      case 26:
        int64_t v40 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_251;
      case 27:
        int64_t v40 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_251;
      case 28:
        int64_t v40 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_251;
      case 29:
        int64_t v40 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_251;
      case 30:
        int64_t v40 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_251;
      case 31:
        int64_t v40 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_251;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_217;
      case 34:
        return 4;
      case 92:
        int v80 = sub_24C6C3F84(a1);
        int64_t v40 = "invalid string: forbidden character after backslash";
        switch(v80)
        {
          case '""':
            std::string::push_back((std::string *)(a1 + 80), 34);
            continue;
          case '/':
            std::string::push_back((std::string *)(a1 + 80), 47);
            continue;
          case '\\':
            std::string::push_back((std::string *)(a1 + 80), 92);
            continue;
          case 'b':
            std::string::push_back((std::string *)(a1 + 80), 8);
            continue;
          case 'f':
            std::string::push_back((std::string *)(a1 + 80), 12);
            continue;
          case 'n':
            std::string::push_back((std::string *)(a1 + 80), 10);
            continue;
          case 'r':
            std::string::push_back((std::string *)(a1 + 80), 13);
            continue;
          case 't':
            std::string::push_back((std::string *)(a1 + 80), 9);
            continue;
          case 'u':
            unsigned int v91 = sub_24C6C41D8(a1);
            if (v91 == -1) {
              goto LABEL_287;
            }
            unsigned int v92 = v91;
            if ((v91 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_24C6C3F84(a1) != 92 || sub_24C6C3F84(a1) != 117)
              {
LABEL_288:
                int64_t v40 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                goto LABEL_251;
              }
              unsigned int v93 = sub_24C6C41D8(a1);
              if (v93 == -1)
              {
LABEL_287:
                int64_t v40 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_251;
              }
              if (v93 >> 10 != 55) {
                goto LABEL_288;
              }
              unsigned int v92 = v93 + (v92 << 10) - 56613888;
LABEL_147:
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 18) | 0xF0);
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 12) & 0x3F | 0x80);
              goto LABEL_148;
            }
            if ((v91 & 0xFFFFFC00) == 0xDC00)
            {
              int64_t v40 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_251;
            }
            if ((int)v91 <= 127)
            {
              std::string::value_type v79 = v91;
LABEL_111:
              std::string::push_back((std::string *)(a1 + 80), v79);
              continue;
            }
            if (v91 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v91 >> 6) | 0xC0);
              std::string::value_type v79 = v92 & 0x3F | 0x80;
              goto LABEL_111;
            }
            if (HIWORD(v91)) {
              goto LABEL_147;
            }
            std::string::push_back((std::string *)(a1 + 80), (v91 >> 12) | 0xE0);
LABEL_148:
            std::string::push_back((std::string *)(a1 + 80), (v92 >> 6) & 0x3F | 0x80);
            std::string::push_back((std::string *)(a1 + 80), v92 & 0x3F | 0x80);
            break;
          default:
            goto LABEL_251;
        }
        continue;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v41 = *(_DWORD *)(a1 + 20);
          if (v41 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          int v43 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          int v44 = *v43;
          LOBYTE(v41) = *v43;
          *(void *)a1 = v43 + 1;
          *(_DWORD *)(a1 + 20) = v44;
          if (v44 == -1) {
            goto LABEL_250;
          }
        }
        uint64_t v46 = *(unsigned char **)(a1 + 64);
        unint64_t v45 = *(void *)(a1 + 72);
        if ((unint64_t)v46 < v45)
        {
          *uint64_t v46 = v41;
          uint64_t v47 = (uint64_t)(v46 + 1);
          goto LABEL_132;
        }
        int v48 = (unsigned char *)*v2;
        unint64_t v49 = (unint64_t)&v46[-*v2];
        unint64_t v50 = v49 + 1;
        if ((uint64_t)(v49 + 1) < 0) {
          goto LABEL_286;
        }
        unint64_t v51 = v45 - (void)v48;
        if (2 * v51 > v50) {
          unint64_t v50 = 2 * v51;
        }
        if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v52 = v50;
        }
        if (v52)
        {
          char v53 = (char *)operator new(v52);
          uint64_t v54 = &v53[v49];
          v53[v49] = v41;
          uint64_t v47 = (uint64_t)&v53[v49 + 1];
          if (v46 == v48) {
            goto LABEL_130;
          }
        }
        else
        {
          char v53 = 0;
          uint64_t v54 = &v46[-*v2];
          *(unsigned char *)unint64_t v49 = v41;
          uint64_t v47 = v49 + 1;
          if (v46 == v48) {
            goto LABEL_130;
          }
        }
        if (v49 < 8 || (unint64_t)(v48 - v53) < 0x20) {
          goto LABEL_127;
        }
        if (v49 >= 0x20)
        {
          unint64_t v55 = v49 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v70 = &v53[v49 - 16];
          uint64_t v71 = (long long *)(v46 - 16);
          unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)uint64_t v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 32;
          }
          while (v72);
          if (v49 == v55) {
            goto LABEL_129;
          }
          if ((v49 & 0x18) == 0)
          {
            v54 -= v55;
            v46 -= v55;
LABEL_127:
            uint64_t v89 = v54 - 1;
            do
            {
              char v90 = *--v46;
              *v89-- = v90;
            }
            while (v46 != v48);
            goto LABEL_129;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v74 = &v53[&v46[-v55] - v48 - 8];
        float v75 = (uint64_t *)&v46[-v55 - 8];
        unint64_t v76 = v55 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v77 = *v75--;
          *(void *)uint64_t v74 = v77;
          v74 -= 8;
          v76 += 8;
        }
        while (v76);
        v46 -= v49 & 0xFFFFFFFFFFFFFFF8;
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_127;
        }
LABEL_129:
        uint64_t v46 = (unsigned char *)*v2;
        uint64_t v54 = v53;
LABEL_130:
        *(void *)(a1 + 56) = v54;
        *(void *)(a1 + 64) = v47;
        *(void *)(a1 + 72) = &v53[v52];
        if (v46) {
          operator delete(v46);
        }
LABEL_132:
        *(void *)(a1 + 64) = v47;
        int v39 = *(_DWORD *)(a1 + 20);
        if (v39 == 10) {
          goto LABEL_249;
        }
        goto LABEL_216;
      case 224:
        std::string::push_back((std::string *)(a1 + 80), -32);
        sub_24C6C3F84(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFE0) {
          goto LABEL_250;
        }
        goto LABEL_109;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v42 = *(_DWORD *)(a1 + 20);
          if (v42 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          long long v56 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          int v57 = *v56;
          LOBYTE(v42) = *v56;
          *(void *)a1 = v56 + 1;
          *(_DWORD *)(a1 + 20) = v57;
          if (v57 == -1) {
            goto LABEL_250;
          }
        }
        __int16 v59 = *(unsigned char **)(a1 + 64);
        unint64_t v58 = *(void *)(a1 + 72);
        if ((unint64_t)v59 < v58)
        {
          *__int16 v59 = v42;
          uint64_t v60 = (uint64_t)(v59 + 1);
          goto LABEL_156;
        }
        size_t v61 = (unsigned char *)*v2;
        unint64_t v62 = (unint64_t)&v59[-*v2];
        unint64_t v63 = v62 + 1;
        if ((uint64_t)(v62 + 1) < 0) {
          goto LABEL_286;
        }
        unint64_t v64 = v58 - (void)v61;
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v65 = v63;
        }
        if (v65)
        {
          unint64_t v66 = (char *)operator new(v65);
          long long v67 = &v66[v62];
          v66[v62] = v42;
          uint64_t v60 = (uint64_t)&v66[v62 + 1];
          if (v59 == v61) {
            goto LABEL_154;
          }
        }
        else
        {
          unint64_t v66 = 0;
          long long v67 = &v59[-*v2];
          *(unsigned char *)unint64_t v62 = v42;
          uint64_t v60 = v62 + 1;
          if (v59 == v61) {
            goto LABEL_154;
          }
        }
        if (v62 < 8 || (unint64_t)(v61 - v66) < 0x20) {
          goto LABEL_151;
        }
        if (v62 >= 0x20)
        {
          unint64_t v69 = v62 & 0xFFFFFFFFFFFFFFE0;
          id v81 = &v66[v62 - 16];
          uint64_t v82 = (long long *)(v59 - 16);
          unint64_t v83 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)id v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 32;
          }
          while (v83);
          if (v62 == v69) {
            goto LABEL_153;
          }
          if ((v62 & 0x18) == 0)
          {
            v67 -= v69;
            v59 -= v69;
LABEL_151:
            long long v94 = v67 - 1;
            do
            {
              char v95 = *--v59;
              *v94-- = v95;
            }
            while (v59 != v61);
            goto LABEL_153;
          }
        }
        else
        {
          unint64_t v69 = 0;
        }
        v67 -= v62 & 0xFFFFFFFFFFFFFFF8;
        long long v85 = &v66[&v59[-v69] - v61 - 8];
        long long v86 = (uint64_t *)&v59[-v69 - 8];
        unint64_t v87 = v69 - (v62 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v88 = *v86--;
          *(void *)long long v85 = v88;
          v85 -= 8;
          v87 += 8;
        }
        while (v87);
        v59 -= v62 & 0xFFFFFFFFFFFFFFF8;
        if (v62 != (v62 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_151;
        }
LABEL_153:
        __int16 v59 = (unsigned char *)*v2;
        long long v67 = v66;
LABEL_154:
        *(void *)(a1 + 56) = v67;
        *(void *)(a1 + 64) = v60;
        *(void *)(a1 + 72) = &v66[v65];
        if (v59) {
          operator delete(v59);
        }
LABEL_156:
        *(void *)(a1 + 64) = v60;
        int v96 = *(_DWORD *)(a1 + 20);
        if (v96 == 10) {
          goto LABEL_249;
        }
        if ((v96 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        int v97 = *(char *)(a1 + 103);
        if ((v97 & 0x80000000) == 0)
        {
          if (*(unsigned char *)(a1 + 103) != 22)
          {
            size_t v98 = *(unsigned __int8 *)(a1 + 103);
            *(unsigned char *)(a1 + 103) = (v97 + 1) & 0x7F;
            unint64_t v103 = (char *)(a1 + 80);
            goto LABEL_180;
          }
          size_t v98 = 22;
          uint64_t v99 = (void *)(a1 + 80);
LABEL_164:
          if (v98 + 1 > 2 * v98) {
            unint64_t v102 = v98 + 1;
          }
          else {
            unint64_t v102 = 2 * v98;
          }
          if (v102 < 0x17)
          {
            size_t v101 = 23;
            goto LABEL_169;
          }
          uint64_t v104 = (v102 & 0x7FFFFFFFFFFFFFF8) + 8;
          uint64_t v105 = v102 | 7;
          if (v105 == 23) {
            uint64_t v105 = v104;
          }
          size_t v101 = v105 + 1;
          unint64_t v103 = (char *)operator new(v105 + 1);
          if (v98)
          {
LABEL_175:
            memmove(v103, v99, v98);
            if (v98 != 22) {
              goto LABEL_176;
            }
LABEL_177:
            *(void *)(a1 + 80) = v103;
            *(void *)(a1 + 96) = v101 | 0x8000000000000000;
            goto LABEL_179;
          }
LABEL_176:
          operator delete(v99);
          goto LABEL_177;
        }
        uint64_t v100 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        size_t v98 = v100 - 1;
        if (*(void *)(a1 + 88) == v100 - 1)
        {
          if (v100 == 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_290;
          }
          uint64_t v99 = *v11;
          size_t v101 = 0x7FFFFFFFFFFFFFF7;
          if (v98 < 0x3FFFFFFFFFFFFFF3) {
            goto LABEL_164;
          }
LABEL_169:
          unint64_t v103 = (char *)operator new(v101);
          if (v98) {
            goto LABEL_175;
          }
          goto LABEL_176;
        }
        unint64_t v103 = (char *)*v11;
        size_t v98 = *(void *)(a1 + 88);
LABEL_179:
        *(void *)(a1 + 88) = v98 + 1;
LABEL_180:
        unint64_t v106 = &v103[v98];
        *unint64_t v106 = v96;
        v106[1] = 0;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          int v107 = *(_DWORD *)(a1 + 20);
          if (v107 == -1) {
            goto LABEL_250;
          }
        }
        else
        {
          int64_t v108 = *(unsigned char **)a1;
          if (*(void *)a1 == *(void *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          int v109 = *v108;
          LOBYTE(v107) = *v108;
          *(void *)a1 = v108 + 1;
          *(_DWORD *)(a1 + 20) = v109;
          if (v109 == -1) {
            goto LABEL_250;
          }
        }
        uint64_t v111 = *(unsigned char **)(a1 + 64);
        unint64_t v110 = *(void *)(a1 + 72);
        if ((unint64_t)v111 < v110)
        {
          unsigned char *v111 = v107;
          uint64_t v112 = (uint64_t)(v111 + 1);
          goto LABEL_215;
        }
        unint64_t v113 = (unsigned char *)*v2;
        unint64_t v114 = (unint64_t)&v111[-*v2];
        unint64_t v115 = v114 + 1;
        if ((uint64_t)(v114 + 1) < 0) {
LABEL_286:
        }
          sub_24C667470();
        unint64_t v116 = v110 - (void)v113;
        if (2 * v116 > v115) {
          unint64_t v115 = 2 * v116;
        }
        if (v116 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v117 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v117 = v115;
        }
        if (v117)
        {
          long long v118 = (char *)operator new(v117);
          long long v119 = &v118[v114];
          v118[v114] = v107;
          uint64_t v112 = (uint64_t)&v118[v114 + 1];
          if (v111 == v113) {
            goto LABEL_213;
          }
        }
        else
        {
          long long v118 = 0;
          long long v119 = &v111[-*v2];
          *(unsigned char *)unint64_t v114 = v107;
          uint64_t v112 = v114 + 1;
          if (v111 == v113) {
            goto LABEL_213;
          }
        }
        if (v114 < 8 || (unint64_t)(v113 - v118) < 0x20) {
          goto LABEL_210;
        }
        if (v114 >= 0x20)
        {
          unint64_t v120 = v114 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v121 = &v118[v114 - 16];
          unint64_t v122 = (long long *)(v111 - 16);
          unint64_t v123 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v124 = *v122;
            *((_OWORD *)v121 - 1) = *(v122 - 1);
            *(_OWORD *)uint64_t v121 = v124;
            v121 -= 32;
            v122 -= 2;
            v123 -= 32;
          }
          while (v123);
          if (v114 == v120) {
            goto LABEL_212;
          }
          if ((v114 & 0x18) == 0)
          {
            v119 -= v120;
            v111 -= v120;
LABEL_210:
            float v129 = v119 - 1;
            do
            {
              char v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v113);
            goto LABEL_212;
          }
        }
        else
        {
          unint64_t v120 = 0;
        }
        v119 -= v114 & 0xFFFFFFFFFFFFFFF8;
        char v125 = &v118[&v111[-v120] - v113 - 8];
        int v126 = (uint64_t *)&v111[-v120 - 8];
        unint64_t v127 = v120 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v128 = *v126--;
          *(void *)char v125 = v128;
          v125 -= 8;
          v127 += 8;
        }
        while (v127);
        v111 -= v114 & 0xFFFFFFFFFFFFFFF8;
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_210;
        }
LABEL_212:
        uint64_t v111 = (unsigned char *)*v2;
        long long v119 = v118;
LABEL_213:
        *(void *)(a1 + 56) = v119;
        *(void *)(a1 + 64) = v112;
        *(void *)(a1 + 72) = &v118[v117];
        if (v111) {
          operator delete(v111);
        }
LABEL_215:
        *(void *)(a1 + 64) = v112;
        int v39 = *(_DWORD *)(a1 + 20);
        if (v39 != 10)
        {
LABEL_216:
          if ((v39 - 192) < 0xFFFFFFC0) {
            goto LABEL_250;
          }
LABEL_217:
          int v131 = *(char *)(a1 + 103);
          if ((v131 & 0x80000000) == 0)
          {
            if (*(unsigned char *)(a1 + 103) != 22)
            {
              size_t v12 = *(unsigned __int8 *)(a1 + 103);
              *(unsigned char *)(a1 + 103) = (v131 + 1) & 0x7F;
              unint64_t v13 = (char *)(a1 + 80);
              goto LABEL_15;
            }
            size_t v12 = 22;
            uint64_t v132 = (void *)(a1 + 80);
LABEL_223:
            if (v12 + 1 > 2 * v12) {
              unint64_t v135 = v12 + 1;
            }
            else {
              unint64_t v135 = 2 * v12;
            }
            uint64_t v136 = (v135 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17) {
              uint64_t v136 = v135 | 7;
            }
            if (v135 >= 0x17) {
              size_t v134 = v136 + 1;
            }
            else {
              size_t v134 = 23;
            }
LABEL_231:
            long long v137 = (char *)operator new(v134);
            unint64_t v13 = v137;
            if (!v12 || (memmove(v137, v132, v12), v12 != 22)) {
              operator delete(v132);
            }
            *(void *)(a1 + 80) = v13;
            *(void *)(a1 + 96) = v134 | 0x8000000000000000;
            goto LABEL_236;
          }
          uint64_t v133 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
          size_t v12 = v133 - 1;
          if (*(void *)(a1 + 88) == v133 - 1)
          {
            if (v133 == 0x7FFFFFFFFFFFFFF8) {
LABEL_290:
            }
              sub_24C6673C8();
            uint64_t v132 = *v11;
            size_t v134 = 0x7FFFFFFFFFFFFFF7;
            if (v12 >= 0x3FFFFFFFFFFFFFF3) {
              goto LABEL_231;
            }
            goto LABEL_223;
          }
          unint64_t v13 = (char *)*v11;
          size_t v12 = *(void *)(a1 + 88);
LABEL_236:
          *(void *)(a1 + 88) = v12 + 1;
LABEL_15:
          unint64_t v14 = &v13[v12];
          char *v14 = v39;
          v14[1] = 0;
          continue;
        }
LABEL_249:
        uint64_t v139 = *(void *)(a1 + 48) + 1;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = v139;
LABEL_250:
        int64_t v40 = "invalid string: ill-formed UTF-8 byte";
LABEL_251:
        *(void *)(a1 + 104) = v40;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 80), -19);
        sub_24C6C3F84(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 160) < 0xFFFFFFE0) {
          goto LABEL_250;
        }
        goto LABEL_109;
      case 240:
        std::string::push_back((std::string *)(a1 + 80), -16);
        sub_24C6C3F84(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFD0) {
          goto LABEL_250;
        }
        goto LABEL_108;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 80), v39);
        sub_24C6C3F84(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        goto LABEL_108;
      case 244:
        std::string::push_back((std::string *)(a1 + 80), -12);
        sub_24C6C3F84(a1);
        int v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 144) < 0xFFFFFFF0) {
          goto LABEL_250;
        }
LABEL_108:
        std::string::push_back((std::string *)(a1 + 80), v68);
        sub_24C6C3F84(a1);
        int v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
LABEL_109:
        std::string::push_back((std::string *)(a1 + 80), v78);
        sub_24C6C3F84(a1);
        if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0) {
          goto LABEL_250;
        }
        std::string::value_type v79 = *(_DWORD *)(a1 + 20);
        goto LABEL_111;
      default:
        goto LABEL_250;
    }
  }
}

uint64_t sub_24C6C388C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  unsigned int v3 = (void *)(a1 + 56);
  int v2 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  int v4 = *(_DWORD *)(a1 + 20);
  unint64_t v5 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v5)
  {
    unint64_t v7 = v5 - (void)v2;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = operator new(v9);
    unsigned char *v10 = v4;
    int v6 = v10 + 1;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10 + 1;
    *(void *)(a1 + 72) = &v10[v9];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    unsigned char *v2 = v4;
    int v6 = v2 + 1;
  }
  __int16 v11 = (const char *)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  int v12 = *(_DWORD *)(a1 + 20);
  int v13 = 5;
  if ((v12 - 49) >= 9)
  {
    if (v12 != 48)
    {
      if (v12 == 45) {
        std::string::push_back((std::string *)(a1 + 80), 45);
      }
      int v50 = sub_24C6C3F84(a1);
      if ((v50 - 49) < 9)
      {
        int v12 = *(_DWORD *)(a1 + 20);
        int v14 = 6;
        goto LABEL_15;
      }
      if (v50 != 48)
      {
        size_t v52 = "invalid number; expected digit after '-'";
        goto LABEL_129;
      }
      int v12 = *(_DWORD *)(a1 + 20);
      int v13 = 6;
    }
    std::string::push_back((std::string *)(a1 + 80), v12);
    int v53 = sub_24C6C3F84(a1);
    if (v53 == 46)
    {
LABEL_80:
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 136));
      if (sub_24C6C3F84(a1) - 48 > 9)
      {
        size_t v52 = "invalid number; expected digit after '.'";
        goto LABEL_129;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
        int v49 = sub_24C6C3F84(a1);
      }
      while ((v49 - 48) < 0xA);
      if (v49 != 101 && v49 != 69)
      {
LABEL_104:
        int v13 = 7;
        goto LABEL_105;
      }
    }
    else if (v53 != 69 && v53 != 101)
    {
      goto LABEL_105;
    }
    int v42 = *(_DWORD *)(a1 + 20);
LABEL_101:
    std::string::push_back((std::string *)(a1 + 80), v42);
    int v54 = sub_24C6C3F84(a1);
    if ((v54 - 48) < 0xA) {
      goto LABEL_102;
    }
    if (v54 == 45 || v54 == 43)
    {
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
      if (sub_24C6C3F84(a1) - 48 < 0xA)
      {
LABEL_102:
        std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
        if (sub_24C6C3F84(a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 20));
          while (sub_24C6C3F84(a1) - 48 < 0xA);
        }
        goto LABEL_104;
      }
      size_t v52 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      size_t v52 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_129:
    *(void *)(a1 + 104) = v52;
    return 14;
  }
  int v14 = 5;
LABEL_15:
  int v62 = v14;
  std::string::push_back((std::string *)(a1 + 80), v12);
  int64x2_t v63 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v63);
    if (*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 0;
      int v18 = *(_DWORD *)(a1 + 20);
      if (v18 == -1) {
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v19 = *(unsigned char **)a1;
      if (*(void *)a1 == *(void *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_76:
        int v13 = v62;
        goto LABEL_105;
      }
      int v20 = *v19;
      LOBYTE(v18) = *v19;
      *(void *)a1 = v19 + 1;
      *(_DWORD *)(a1 + 20) = v20;
      if (v20 == -1) {
        goto LABEL_76;
      }
    }
    unint64_t v22 = *(unsigned char **)(a1 + 64);
    unint64_t v21 = *(void *)(a1 + 72);
    if ((unint64_t)v22 < v21)
    {
      *unint64_t v22 = v18;
      uint64_t v23 = (uint64_t)(v22 + 1);
      goto LABEL_53;
    }
    unint64_t v24 = (unsigned char *)*v3;
    unint64_t v25 = (unint64_t)&v22[-*v3];
    unint64_t v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0) {
      sub_24C667470();
    }
    unint64_t v27 = v21 - (void)v24;
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v28 = v26;
    }
    if (!v28)
    {
      char v29 = 0;
      int64x2_t v30 = &v22[-*v3];
      *(unsigned char *)unint64_t v25 = v18;
      uint64_t v23 = v25 + 1;
      if (v22 == v24) {
        goto LABEL_51;
      }
LABEL_35:
      if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
      {
        if (v25 < 0x20)
        {
          unint64_t v31 = 0;
          goto LABEL_43;
        }
        unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFE0;
        long long v32 = &v29[v25 - 16];
        uint64_t v33 = (long long *)(v22 - 16);
        unint64_t v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)long long v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 32;
        }
        while (v34);
        if (v25 == v31) {
          goto LABEL_50;
        }
        if ((v25 & 0x18) != 0)
        {
LABEL_43:
          v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v36 = &v29[&v22[-v31] - v24 - 8];
          int v37 = (uint64_t *)&v22[-v31 - 8];
          unint64_t v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v39 = *v37--;
            *(void *)uint64_t v36 = v39;
            v36 -= 8;
            v38 += 8;
          }
          while (v38);
          v22 -= v25 & 0xFFFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
          goto LABEL_48;
        }
        v30 -= v31;
        v22 -= v31;
      }
LABEL_48:
      int64_t v40 = v30 - 1;
      do
      {
        char v41 = *--v22;
        *v40-- = v41;
      }
      while (v22 != v24);
LABEL_50:
      unint64_t v22 = (unsigned char *)*v3;
      int64x2_t v30 = v29;
      goto LABEL_51;
    }
    char v29 = (char *)operator new(v28);
    int64x2_t v30 = &v29[v25];
    v29[v25] = v18;
    uint64_t v23 = (uint64_t)&v29[v25 + 1];
    if (v22 != v24) {
      goto LABEL_35;
    }
LABEL_51:
    *(void *)(a1 + 56) = v30;
    *(void *)(a1 + 64) = v23;
    *(void *)(a1 + 72) = &v29[v28];
    if (v22) {
      operator delete(v22);
    }
LABEL_53:
    *(void *)(a1 + 64) = v23;
    int v42 = *(_DWORD *)(a1 + 20);
    if ((v42 - 48) >= 0xA) {
      break;
    }
    int v43 = *(char *)(a1 + 103);
    if (v43 < 0)
    {
      uint64_t v45 = *(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
      size_t v15 = v45 - 1;
      if (*(void *)(a1 + 88) != v45 - 1)
      {
        uint64_t v16 = *(char **)v11;
        size_t v15 = *(void *)(a1 + 88);
        goto LABEL_73;
      }
      if (v45 == 0x7FFFFFFFFFFFFFF8) {
        sub_24C6673C8();
      }
      int v44 = *(char **)v11;
      if (v15 > 0x3FFFFFFFFFFFFFF2)
      {
        size_t v48 = 0x7FFFFFFFFFFFFFF7;
        uint64_t v16 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
        goto LABEL_69;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 103) != 22)
      {
        size_t v15 = *(unsigned __int8 *)(a1 + 103);
        *(unsigned char *)(a1 + 103) = (v43 + 1) & 0x7F;
        uint64_t v16 = (char *)(a1 + 80);
        goto LABEL_17;
      }
      int v44 = (char *)(a1 + 80);
      size_t v15 = 22;
    }
    if (v15 + 1 > 2 * v15) {
      unint64_t v46 = v15 + 1;
    }
    else {
      unint64_t v46 = 2 * v15;
    }
    uint64_t v47 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v47 = v46 | 7;
    }
    if (v46 >= 0x17) {
      size_t v48 = v47 + 1;
    }
    else {
      size_t v48 = 23;
    }
    uint64_t v16 = (char *)operator new(v48);
    if (!v15)
    {
LABEL_70:
      operator delete(v44);
      goto LABEL_71;
    }
LABEL_69:
    memmove(v16, v44, v15);
    if (v15 != 22) {
      goto LABEL_70;
    }
LABEL_71:
    *(void *)(a1 + 80) = v16;
    *(void *)(a1 + 96) = v48 | 0x8000000000000000;
LABEL_73:
    *(void *)(a1 + 88) = v15 + 1;
LABEL_17:
    int v17 = &v16[v15];
    char *v17 = v42;
    v17[1] = 0;
  }
  if (v42 > 68)
  {
    int v13 = v62;
    if (v42 != 69 && v42 != 101) {
      goto LABEL_105;
    }
    goto LABEL_101;
  }
  int v13 = v62;
  if (v42 == 10)
  {
    uint64_t v51 = *(void *)(a1 + 48) + 1;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = v51;
  }
  else if (v42 == 46)
  {
    goto LABEL_80;
  }
LABEL_105:
  unint64_t v55 = (void *)(a1 + 40);
  uint64_t v56 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 24) = 1;
  --*(void *)(a1 + 32);
  if (v56 || (unint64_t v55 = (void *)(a1 + 48), (v56 = *(void *)(a1 + 48)) != 0)) {
    *unint64_t v55 = v56 - 1;
  }
  if (*(_DWORD *)(a1 + 20) != -1) {
    --*(void *)(a1 + 64);
  }
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    uint64_t v60 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      uint64_t v60 = *(const char **)v11;
    }
    uint64_t v61 = strtoll(v60, &__endptr, 10);
    if (*__error()) {
      goto LABEL_119;
    }
    *(void *)(a1 + 112) = v61;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      int v57 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        int v57 = *(const char **)v11;
      }
      unint64_t v58 = strtoull(v57, &__endptr, 10);
      if (!*__error())
      {
        *(void *)(a1 + 120) = v58;
        return 5;
      }
    }
LABEL_119:
    if (*(char *)(a1 + 103) < 0) {
      __int16 v11 = *(const char **)v11;
    }
    *(double *)(a1 + 128) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_24C6C3F84(uint64_t a1)
{
  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    int v2 = *(_DWORD *)(a1 + 20);
    if (v2 != -1) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(unsigned char **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
    return 0xFFFFFFFFLL;
  }
  int v17 = *v16;
  LOBYTE(v2) = *v16;
  *(void *)a1 = v16 + 1;
  *(_DWORD *)(a1 + 20) = v17;
  if (v17 == -1) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  int v4 = *(unsigned char **)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  if ((unint64_t)v4 < v3)
  {
    unsigned char *v4 = v2;
    uint64_t v5 = (uint64_t)(v4 + 1);
    goto LABEL_36;
  }
  int v6 = (unsigned char **)(a1 + 56);
  unint64_t v7 = *(unsigned char **)(a1 + 56);
  unint64_t v8 = v4 - v7;
  uint64_t v9 = v4 - v7 + 1;
  if (v9 < 0) {
    sub_24C667470();
  }
  unint64_t v10 = v3 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    int v13 = &v12[v8];
    int v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v5 = (uint64_t)&v12[v8 + 1];
    if (v4 != v7)
    {
LABEL_13:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_32;
      }
      if (v8 >= 0x20)
      {
        unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v19 = (long long *)(v4 - 16);
        int v20 = &v12[v4 - 16 - v7];
        unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *int v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v8 == v15)
        {
LABEL_34:
          int v4 = *v6;
          *(void *)(a1 + 56) = v12;
          *(void *)(a1 + 64) = v5;
          *(void *)(a1 + 72) = v14;
          if (!v4) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v4 -= v15;
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v23 = &v4[-v15 - 8];
      unint64_t v24 = &v12[v23 - v7];
      unint64_t v25 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v26 = *(void *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
LABEL_32:
      unint64_t v27 = v13 - 1;
      do
      {
        char v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != v7);
      goto LABEL_34;
    }
  }
  else
  {
    int v12 = 0;
    int v13 = (char *)(v4 - v7);
    int v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v5 = v8 + 1;
    if (v4 != v7) {
      goto LABEL_13;
    }
  }
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v14;
  if (v4) {
LABEL_35:
  }
    operator delete(v4);
LABEL_36:
  *(void *)(a1 + 64) = v5;
  uint64_t result = *(unsigned int *)(a1 + 20);
  if (result == 10)
  {
    uint64_t v29 = *(void *)(a1 + 48) + 1;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = v29;
  }
  return result;
}

uint64_t sub_24C6C41D8(uint64_t a1)
{
  sub_24C6C3F84(a1);
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_24C6C3F84(a1);
    int v4 = *(_DWORD *)(a1 + 20);
    int v5 = v4 - 48;
    if ((v4 - 48) < 0xA) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    int v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2 - 87;
  sub_24C6C3F84(a1);
  int v4 = *(_DWORD *)(a1 + 20);
  int v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_24C6C3F84(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) < 0xA) {
      goto LABEL_6;
    }
LABEL_12:
    if ((v6 - 65) < 6)
    {
      int v7 = v6 - 55;
      sub_24C6C3F84(a1);
      int v8 = *(_DWORD *)(a1 + 20);
      int v9 = v8 - 48;
      if ((v8 - 48) < 0xA) {
        return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
      }
      goto LABEL_20;
    }
    if ((v6 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v7 = v6 - 87;
    sub_24C6C3F84(a1);
    int v8 = *(_DWORD *)(a1 + 20);
    int v9 = v8 - 48;
    if ((v8 - 48) >= 0xA) {
      goto LABEL_20;
    }
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v5 = v4 - 87;
    sub_24C6C3F84(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = v4 - 55;
    sub_24C6C3F84(a1);
    int v6 = *(_DWORD *)(a1 + 20);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
LABEL_6:
  sub_24C6C3F84(a1);
  int v8 = *(_DWORD *)(a1 + 20);
  int v9 = v8 - 48;
  if ((v8 - 48) < 0xA) {
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
LABEL_20:
  if ((v8 - 65) < 6)
  {
    int v9 = v8 - 55;
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  if ((v8 - 97) <= 5)
  {
    int v9 = v8 - 87;
    return (v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_24C6C4388(uint64_t a1, void *a2)
{
  *(_OWORD *)a2 = xmmword_24C7303B0;
  int v4 = *(unsigned __int8 **)a1;
  int v5 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 24) + 1;
  do
  {
    *(void *)(a1 + 24) = v6;
    if (v4 == v5)
    {
      *(void *)(a1 + 16) = -1;
      return 1;
    }
    unsigned int v8 = *v4++;
    unsigned int v7 = v8;
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v8;
    ++v6;
  }
  while (v8 == 78);
  if (v7 == 35)
  {
LABEL_14:
    return sub_24C6C13FC((unsigned __int8 **)a1, a2);
  }
  if (v7 != 36) {
    return 1;
  }
  *(void *)(a1 + 24) = v6;
  if (v4 == v5)
  {
    uint64_t v9 = -1;
  }
  else
  {
    uint64_t v9 = *v4;
    *(void *)a1 = v4 + 1;
  }
  *(void *)(a1 + 16) = v9;
  a2[1] = v9;
  if (!sub_24C6B8B9C((void *)a1, 3, "type")) {
    return 0;
  }
  size_t v11 = *(unsigned __int8 **)a1;
  unint64_t v10 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24) + 1;
  while (1)
  {
    *(void *)(a1 + 24) = v12;
    if (v11 == v10) {
      break;
    }
    unsigned int v14 = *v11++;
    unsigned int v13 = v14;
    *(void *)a1 = v11;
    *(void *)(a1 + 16) = v14;
    if (v14 == 35) {
      goto LABEL_14;
    }
    ++v12;
    if (v13 != 78) {
      goto LABEL_21;
    }
  }
  *(void *)(a1 + 16) = -1;
LABEL_21:
  if (!sub_24C6B8B9C((void *)a1, 3, "value")) {
    return 0;
  }
  sub_24C6B7C34(a1, v25);
  uint64_t v17 = *(void *)(a1 + 40);
  unint64_t v18 = *(void *)(a1 + 24);
  std::operator+<char>();
  sub_24C6698FC(v19, "size");
  sub_24C6B80F8(3, (uint64_t)&v21, (uint64_t)v19, &__p);
  sub_24C6B7D14(112, v18, (uint64_t)&__p, (uint64_t)v24);
  uint64_t v16 = sub_24C6B7BD4(v17, v18, (uint64_t)v25, (uint64_t)v24);
  sub_24C6B83F0(v24);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_30:
    operator delete(v19[0]);
    if (v22 < 0) {
      goto LABEL_31;
    }
LABEL_25:
    if (v26 < 0) {
      goto LABEL_32;
    }
    return v16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v20 < 0) {
    goto LABEL_30;
  }
LABEL_24:
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_31:
  operator delete(v21);
  if ((v26 & 0x80000000) == 0) {
    return v16;
  }
LABEL_32:
  operator delete(v25[0]);
  return v16;
}

void sub_24C6C45F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28)
{
  sub_24C6B83F0(&a28);
  if (a27 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v28 - 33) < 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if (*(char *)(v28 - 33) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v28 - 56));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_24C6C467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x24C6C4664);
  }
  JUMPOUT(0x24C6C4638);
}

void sub_24C6C468C()
{
  if (*(char *)(v0 - 33) < 0) {
    JUMPOUT(0x24C6C4640);
  }
  JUMPOUT(0x24C6C4674);
}

uint64_t sub_24C6C469C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDDA08;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x2532F84C0](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_26FEDD9B8;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void sub_24C6C4718(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6C4780(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      unsigned int v14 = (const void ***)*((void *)a2 + 1);
      int v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = v4 + 1;
      uint64_t v17 = *v14;
      unint64_t v15 = v14 + 1;
      uint64_t v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_24C6C49D4((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          unint64_t v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              unint64_t v19 = (const void ***)v18;
              unint64_t v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              unint64_t v19 = (const void ***)v16[2];
              BOOL v20 = *v19 == v16;
              uint64_t v16 = (const void **)v19;
            }
            while (!v20);
          }
          uint64_t v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      unint64_t v21 = (uint64_t *)*((void *)a2 + 1);
      int v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = 0;
      sub_24C6C4EAC(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      int v5 = (long long *)*((void *)a2 + 1);
      uint64_t v6 = operator new(0x18uLL);
      int v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_24C66E0A8(v6, *(void **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        *((void *)v6 + 2) = *((void *)v5 + 2);
        *uint64_t v6 = v7;
      }
      goto LABEL_21;
    case 4:
      int v4 = (void *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      int v4 = (void *)*((void *)a2 + 1);
      goto LABEL_21;
    case 8:
      uint64_t v8 = *((void *)a2 + 1);
      int v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = 0;
      unint64_t v10 = *(const void **)v8;
      uint64_t v9 = *(void *)(v8 + 8);
      size_t v11 = v9 - *(void *)v8;
      if (v9 != *(void *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0) {
          sub_24C667470();
        }
        uint64_t v12 = (char *)operator new(v9 - *(void *)v8);
        void *v4 = v12;
        unsigned int v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_24C6C4948(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6C495C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6C4970(_Unwind_Exception *a1)
{
  int v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6C49D4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = sub_24C6C4B00(a1, a2, &v15, &v14, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t *)operator new(0x48uLL);
    long long v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_24C66E0A8((unsigned char *)v9 + 32, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(void *)(a4 + 16);
    }
    sub_24C6C4780(v7 + 7, a4 + 24);
    unint64_t v10 = v15;
    *long long v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *uint64_t v8 = (uint64_t)v7;
    size_t v11 = (uint64_t *)**a1;
    uint64_t v12 = v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = (uint64_t *)*v8;
    }
    sub_24C681E28(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_24C6C4AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6B9E8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6C4ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  sub_24C6B9E8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6C4B00(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_23;
  }
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a2 + 55);
  if (v13 >= 0) {
    unsigned int v14 = a2 + 4;
  }
  else {
    unsigned int v14 = (const void *)a2[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v15 = a2[5];
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15) {
      goto LABEL_19;
    }
LABEL_23:
    unint64_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      unint64_t v21 = a2;
    }
    else
    {
      if (v19)
      {
        BOOL v20 = (uint64_t *)*a2;
        do
        {
          unint64_t v21 = v20;
          BOOL v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        char v22 = a2;
        do
        {
          unint64_t v21 = (uint64_t *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          char v22 = v21;
        }
        while (v23);
      }
      int v24 = *((char *)v21 + 55);
      if (v24 >= 0) {
        unint64_t v25 = v21 + 4;
      }
      else {
        unint64_t v25 = (const void *)v21[4];
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        size_t v26 = v21[5];
      }
      int v27 = *((char *)a5 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a5;
      }
      else {
        uint64_t v28 = *a5;
      }
      if (v27 >= 0) {
        size_t v29 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v29 = (size_t)a5[1];
      }
      if (v29 >= v26) {
        size_t v30 = v26;
      }
      else {
        size_t v30 = v29;
      }
      int v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v26 >= v29)
      {
LABEL_48:
        long long v32 = *v8;
        if (!*v8)
        {
          uint64_t v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          uint64_t v33 = (uint64_t **)v32;
          uint64_t v36 = (const void *)v32[4];
          unint64_t v34 = v32 + 4;
          long long v35 = v36;
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            unint64_t v38 = v34;
          }
          else {
            unint64_t v38 = v35;
          }
          if (v37 >= 0) {
            size_t v39 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v39 = v34[1];
          }
          if (v39 >= v29) {
            size_t v40 = v29;
          }
          else {
            size_t v40 = v39;
          }
          int v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            int v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            uint64_t v8 = v33 + 1;
            long long v32 = v33[1];
            if (!v32) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v29 >= v39) {
              goto LABEL_64;
            }
LABEL_50:
            long long v32 = *v33;
            uint64_t v8 = v33;
            if (!*v33) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  int v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  uint64_t v43 = a2[1];
  if (v43)
  {
    int v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      int v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    uint64_t v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      BOOL v23 = *a4 == v45;
      uint64_t v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    int v46 = *((char *)a4 + 55);
    if (v46 >= 0) {
      uint64_t v47 = (uint64_t *)(a4 + 4);
    }
    else {
      uint64_t v47 = a4[4];
    }
    if (v46 >= 0) {
      size_t v48 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v48 = (size_t)a4[5];
    }
    if (v48 >= v12) {
      size_t v49 = v12;
    }
    else {
      size_t v49 = v48;
    }
    int v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        uint64_t v51 = *v8;
        if (*v8)
        {
          size_t v52 = a3;
          while (1)
          {
            int v53 = (uint64_t **)v51;
            uint64_t v56 = (const void *)v51[4];
            int v54 = v51 + 4;
            unint64_t v55 = v56;
            int v57 = *((char *)v54 + 23);
            if (v57 >= 0) {
              unint64_t v58 = v54;
            }
            else {
              unint64_t v58 = v55;
            }
            if (v57 >= 0) {
              size_t v59 = *((unsigned __int8 *)v54 + 23);
            }
            else {
              size_t v59 = v54[1];
            }
            if (v59 >= v12) {
              size_t v60 = v12;
            }
            else {
              size_t v60 = v59;
            }
            int v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0) {
                goto LABEL_97;
              }
LABEL_111:
              int v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_123;
                }
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              uint64_t v8 = v53 + 1;
              uint64_t v51 = v53[1];
              if (!v51) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v12 >= v59) {
                goto LABEL_111;
              }
LABEL_97:
              uint64_t v51 = *v53;
              uint64_t v8 = v53;
              if (!*v53) {
                goto LABEL_123;
              }
            }
          }
        }
        int v53 = v8;
        size_t v52 = a3;
LABEL_123:
        *size_t v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void *sub_24C6C4EAC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >> 60) {
      sub_24C667470();
    }
    uint64_t result = operator new(16 * a4);
    void *v5 = result;
    v5[1] = result;
    void v5[2] = &result[2 * a4];
    for (unsigned int i = result; a2 != a3; i += 2)
    {
      sub_24C6C4780(result, a2);
      a2 += 16;
      uint64_t result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_24C6C4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_24C6C4F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_24C6C5050((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_24C6C4FB0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_24C6C4FB0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = (uint64_t *)**result;
    if (v3)
    {
      int v4 = (uint64_t *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 1;
        do
        {
          long long v7 = v6 - 1;
          sub_24C6B5428(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_24C6C5050(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(uint64_t ***)(a1 + 16);
    int v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      int v4 = v2 - 1;
      do
      {
        int v5 = v4 - 1;
        sub_24C6B5428(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

unsigned char *sub_24C6C50B8(unsigned char *result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      int v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      void *v3 = v3 + 1;
      void *v2 = v3;
      uint64_t result = v2;
      break;
    case 2:
      int v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = 0;
      void *v2 = v4;
      uint64_t result = v2;
      break;
    case 3:
      int v5 = operator new(0x18uLL);
      v5[23] = 0;
      unsigned char *v5 = 0;
      void *v2 = v5;
      uint64_t result = v2;
      break;
    case 4:
      void *result = 0;
      break;
    case 8:
      uint64_t v6 = operator new(0x20uLL);
      v6[1] = 0;
      _OWORD v6[2] = 0;
      *uint64_t v6 = 0;
      *((_WORD *)v6 + 12) = 0;
      void *v2 = v6;
      uint64_t result = v2;
      break;
    default:
      *(void *)uint64_t result = 0;
      break;
  }
  return result;
}

void sub_24C6C51E0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_24C6B9378((const void **)__p, a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    long long v7 = (const std::string::value_type *)a2;
  }
  else {
    long long v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)size_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_26FEDDA08;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_26FEDD990;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_24C6C532C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *sub_24C6C537C(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_2652E8108[v1];
  }
}

void sub_24C6C53A4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t **sub_24C6C53F8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v7 = a1 + 1;
  int v6 = a1[1];
  if (!v6)
  {
    uint64_t v11 = a1 + 1;
    goto LABEL_29;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v8 >= 0) {
    long long v10 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    long long v10 = a2[1];
  }
  do
  {
    while (1)
    {
      uint64_t v11 = (uint64_t **)v6;
      uint64_t v14 = v6[4];
      uint64_t v12 = v6 + 4;
      char v13 = (void *)v14;
      int v15 = *((char *)v12 + 23);
      int64_t v16 = v15 >= 0 ? v12 : v13;
      int v17 = v15 >= 0 ? (const void *)*((unsigned __int8 *)v12 + 23) : (const void *)v12[1];
      size_t v18 = (size_t)(v17 >= v10 ? v10 : v17);
      int v19 = memcmp(v9, v16, v18);
      if (v19) {
        break;
      }
      if (v10 >= v17) {
        goto LABEL_22;
      }
LABEL_8:
      int v6 = *v11;
      long long v7 = v11;
      if (!*v11) {
        goto LABEL_29;
      }
    }
    if (v19 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    int v20 = memcmp(v16, v9, v18);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0) {
        return v11;
      }
    }
    else if (v17 >= v10)
    {
      return v11;
    }
    int v6 = v11[1];
  }
  while (v6);
  long long v7 = v11 + 1;
LABEL_29:
  unint64_t v21 = (uint64_t *)v11;
  uint64_t v11 = (uint64_t **)operator new(0x48uLL);
  char v22 = *a4;
  BOOL v23 = (uint64_t *)*((void *)*a4 + 2);
  *((_OWORD *)v11 + 2) = **a4;
  v11[6] = v23;
  *char v22 = 0;
  v22[1] = 0;
  std::runtime_error v22[2] = 0;
  *((unsigned char *)v11 + 56) = 0;
  v11[8] = 0;
  *uint64_t v11 = 0;
  v11[1] = 0;
  v11[2] = v21;
  *long long v7 = (uint64_t *)v11;
  int v24 = (uint64_t *)**a1;
  unint64_t v25 = (uint64_t *)v11;
  if (v24)
  {
    *a1 = v24;
    unint64_t v25 = *v7;
  }
  sub_24C681E28(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_24C6C5568(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26FEDDA08;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

double sub_24C6C55D0(uint64_t a1, void *a2)
{
  switch(*(unsigned char *)a1)
  {
    case 4:
      *a2 = *(unsigned __int8 *)(a1 + 8);
      break;
    case 5:
    case 6:
      *a2 = *(void *)(a1 + 8);
      break;
    case 7:
      double result = *(double *)(a1 + 8);
      *a2 = (unint64_t)result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      int v5 = (char *)sub_24C6C537C((char *)a1);
      sub_24C6698FC(&v6, v5);
      sub_24C66A45C("type must be number, but is ", &v6, &v7);
      sub_24C6C51E0(302, (uint64_t)&v7, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_26FEDD6B8, (void (*)(void *))sub_24C6C53A4);
  }
  return result;
}

void sub_24C6C56E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v21)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_24C6C5910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C5D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C65E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Unwind_Resume(a1);
}

void sub_24C6C67B8(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 40) + 32))(__p);
  sub_24C67C4BC(a1, v4, (uint64_t)__p);
  *a1 = &unk_26FEDD1C0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24C6C68C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6C68D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_24C6C699C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C6DB0(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C66DB7C((uint64_t)va);

  if (a2 == 1)
  {
    std::string v7 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v7, v3);
    __cxa_end_catch();
    JUMPOUT(0x24C6C6D94);
  }
  _Unwind_Resume(a1);
}

void sub_24C6C6E40()
{
}

void sub_24C6C6FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x2532F8960](v20, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_24C6C78C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_24C6717DC((uint64_t)&a31);
  sub_24C66EA3C(&a36);
  sub_24C66EA3C(&a43);
  sub_24C6717DC((uint64_t)&a50);
  sub_24C6717DC((uint64_t)&a55);

  _Unwind_Resume(a1);
}

id sub_24C6C7AC8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_17;
  }
  id v5 = v3;
  long long v10 = (const char *)objc_msgSend_UTF8String(v5, v6, v7, v8, v9);
  size_t v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_24C6673C8();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    size_t v47 = v12;
    unint64_t v48 = v15 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v48) = v11;
  p_dst = (void **)&__dst;
  if (v11) {
LABEL_9:
  }
    memmove(p_dst, v10, v12);
  *((unsigned char *)p_dst + v12) = 0;
  int64_t v16 = sub_24C66F168(a1, (uint64_t)&__dst);
  int v17 = v16;
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if (v16) {
      goto LABEL_12;
    }
LABEL_17:
    int v27 = 0;
    goto LABEL_25;
  }
  operator delete(__dst);
  if (!v17) {
    goto LABEL_17;
  }
LABEL_12:
  id v18 = v5;
  BOOL v23 = (const char *)objc_msgSend_UTF8String(v18, v19, v20, v21, v22);
  size_t v24 = strlen(v23);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_24C6673C8();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v28 = v24 | 7;
    }
    uint64_t v29 = v28 + 1;
    size_t v26 = (void **)operator new(v28 + 1);
    size_t v47 = v25;
    unint64_t v48 = v29 | 0x8000000000000000;
    std::string __dst = v26;
  }
  else
  {
    HIBYTE(v48) = v24;
    size_t v26 = (void **)&__dst;
    if (!v24) {
      goto LABEL_22;
    }
  }
  memmove(v26, v23, v25);
LABEL_22:
  *((unsigned char *)v26 + v25) = 0;
  size_t v30 = sub_24C66F168(a1, (uint64_t)&__dst);
  if (!v30) {
    sub_24C66DE30("unordered_map::at: key not found");
  }
  uint64_t v34 = v30[10];
  long long v35 = *(_OWORD *)(v34 + 40);
  long long v36 = *(_OWORD *)(v34 + 24);
  v44[0] = *(_OWORD *)(v34 + 8);
  v44[1] = v36;
  void v44[2] = v35;
  long long v37 = *(_OWORD *)(v34 + 88);
  long long v38 = *(_OWORD *)(v34 + 104);
  long long v39 = *(_OWORD *)(v34 + 72);
  v44[3] = *(_OWORD *)(v34 + 56);
  v44[4] = v39;
  long long v40 = *(_OWORD *)(v34 + 120);
  long long v41 = *(_OWORD *)(v34 + 136);
  long long v42 = *(_OWORD *)(v34 + 152);
  uint64_t v45 = *(void *)(v34 + 168);
  v44[8] = v41;
  v44[9] = v42;
  v44[6] = v38;
  v44[7] = v40;
  v44[5] = v37;
  int v27 = objc_msgSend_fromEspressoBuffer_(CSUEspressoBuffer, v31, (uint64_t)v44, v32, v33);
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
LABEL_25:

  return v27;
}

void sub_24C6C7D18(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 81) < 0)
  {
    operator delete(*(void **)(v2 - 104));

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_24C6C7FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6C8078(uint64_t a1, const char **a2, uint64_t a3)
{
  id v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD950;
  *(_DWORD *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  char v13 = *(unsigned char **)(a3 + 16);
  size_t v12 = *(unsigned char **)(a3 + 24);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_24C667470();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v15;
    int64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 48) = v16;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  *(void *)(a1 + 64) = *(void *)(a3 + 40);
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C6C81C0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6C81E4(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  int v6 = *(_DWORD *)(a3 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD950;
  *(_DWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = *(unsigned char **)(a3 + 16);
  size_t v7 = *(unsigned char **)(a3 + 24);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_24C667470();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v10;
    int v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 56) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 48) = v11;
  }
  uint64_t v12 = *(void *)(a3 + 48);
  *(void *)(a1 + 64) = *(void *)(a3 + 40);
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_24C6C82C4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_24C6C84C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6C86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if ((sub_24C72A794(&a9, (void **)&a18, (void *)(v30 - 56)) & 1) == 0) {
    operator delete(*(void **)(v30 - 56));
  }

  if (a2 == 1)
  {
    uint64_t v33 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v33, v29);
    __cxa_end_catch();
    JUMPOUT(0x24C6C86D8);
  }
  _Unwind_Resume(a1);
}

void sub_24C6C8BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24C66EA3C(&a12);
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v15 = __cxa_begin_catch(a1);
    sub_24C676DA0((uint64_t)v15, v12);
    __cxa_end_catch();
    JUMPOUT(0x24C6C8870);
  }
  _Unwind_Resume(a1);
}

void sub_24C6C94D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  __cxa_free_exception(v42);
  if (v43)
  {
    operator delete(v43);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C6C9C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C66EA3C(&a15);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  sub_24C66EA3C(&a25);

  _Unwind_Resume(a1);
}

uint64_t sub_24C6C9D10(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer instance is nil.");
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given CSUBuffer is not an instance of CSUEspressoBuffer.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = objc_msgSend_espressoBuffer(v1, v2, v3, v4, v5);

  return v6;
}

void sub_24C6C9DC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_24C6C9DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6C9DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(v3 + 168);
  if (v4 == 65568 || v4 == 131104)
  {
    uint64_t v6 = 4;
  }
  else
  {
    if (v4 != 262152)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
LABEL_13:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v6 = 1;
  }
  size_t v7 = (const void **)(v3 + 8);
  size_t v8 = *(void *)(v3 + 160) * *(void *)(v3 + 120) * v6;
  long long v9 = *(_OWORD *)(v3 + 120);
  long long v10 = *(_OWORD *)(v3 + 136);
  long long v11 = *(_OWORD *)(v3 + 152);
  uint64_t v20 = *(void *)(v3 + 168);
  long long v12 = *(_OWORD *)(v3 + 8);
  long long v13 = *(_OWORD *)(v3 + 40);
  v19[1] = *(_OWORD *)(v3 + 24);
  void v19[2] = v13;
  v19[0] = v12;
  long long v14 = *(_OWORD *)(v3 + 56);
  long long v15 = *(_OWORD *)(v3 + 72);
  long long v16 = *(_OWORD *)(v3 + 104);
  v19[5] = *(_OWORD *)(v3 + 88);
  v19[6] = v16;
  v19[3] = v14;
  v19[4] = v15;
  v19[8] = v10;
  v19[9] = v11;
  v19[7] = v9;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v8 + 4095) & 0xFFFFFFFFFFFFF000, 0x1E091250uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_13;
  }
  *(void *)&v19[0] = memptr;
  memcpy(memptr, *v7, v8);
  LOWORD(memptr) = 257;
  return sub_24C66FCBC(a2, (uint64_t)v19, &memptr);
}

void sub_24C6C9F54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6C9F68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6CA4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_24C66EA3C(&a15);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  sub_24C66EA3C(&a25);

  _Unwind_Resume(a1);
}

void sub_24C6CA898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_24C6717DC((uint64_t)&a19);

  _Unwind_Resume(a1);
}

void sub_24C6CAA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CAA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CAA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CB738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v40 = *(void *)(v38 - 192);
  if (!v40) {
    goto LABEL_13;
  }
  uint64_t v41 = *(void *)(v38 - 184);
  long long v42 = *(void **)(v38 - 192);
  if (v41 == v40) {
    goto LABEL_12;
  }
  while (1)
  {
    int v44 = *(std::__shared_weak_count **)(v41 - 8);
    if (v44)
    {
      if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    uint64_t v43 = *(void **)(v41 - 40);
    if (v43) {
      goto LABEL_5;
    }
LABEL_6:
    v41 -= 48;
    if (v41 == v40)
    {
      long long v42 = *(void **)(v38 - 192);
LABEL_12:
      *(void *)(v38 - 184) = v40;
      operator delete(v42);
LABEL_13:
      sub_24C66FC40((uint64_t)&a18);
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  uint64_t v43 = *(void **)(v41 - 40);
  if (!v43) {
    goto LABEL_6;
  }
LABEL_5:
  *(void *)(v41 - 32) = v43;
  operator delete(v43);
  goto LABEL_6;
}

void sub_24C6CB944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(char *)(v34 - 169) < 0) {
    operator delete(*(void **)(v34 - 192));
  }
  sub_24C66FC40((uint64_t)&a34);
  if (SHIBYTE(a27) < 0) {
    operator delete(a25);
  }

  sub_24C69B248((void **)&a20);
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_24C6CC818(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_24C6CC82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    operator delete(a49);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_24C6CCB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CCB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char **sub_24C6CCE58(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v10 = (char *)operator new(8uLL);
  *(void *)long long v10 = a2;
  a1[1] = v10 + 8;
  a1[2] = v10 + 8;
  *a1 = v10;
  long long v11 = (char *)operator new(0x10uLL);
  long long v12 = v11 + 16;
  *(void *)long long v11 = *(void *)v10;
  *((void *)v11 + 1) = a3;
  *a1 = v11;
  a1[1] = v11 + 16;
  a1[2] = v11 + 16;
  operator delete(v10);
  unint64_t v13 = (unint64_t)a1[2];
  a1[1] = v11 + 16;
  if ((unint64_t)(v11 + 16) < v13)
  {
    *((void *)v11 + 2) = a4;
    long long v14 = v11 + 24;
    goto LABEL_21;
  }
  long long v15 = *a1;
  uint64_t v16 = (v12 - *a1) >> 3;
  unint64_t v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61) {
    goto LABEL_43;
  }
  uint64_t v18 = v13 - (void)v15;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_44;
    }
    uint64_t v20 = (char *)operator new(8 * v19);
    uint64_t v21 = &v20[8 * v16];
    unint64_t v13 = (unint64_t)&v20[8 * v19];
    *(void *)uint64_t v21 = a4;
    long long v14 = v21 + 8;
    if (v12 == v15) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  uint64_t v20 = 0;
  uint64_t v21 = (char *)(8 * v16);
  unint64_t v13 = 0;
  *(void *)(8 * v16) = a4;
  long long v14 = (char *)(8 * v16 + 8);
  if (v12 != v15)
  {
LABEL_14:
    unint64_t v22 = v11 - v15 + 8;
    if (v22 < 0x18) {
      goto LABEL_47;
    }
    uint64_t v23 = (v22 >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v24;
    v21 -= v24;
    size_t v25 = &v20[8 * v16 - 16];
    uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v11;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v11 - 1);
      *(_OWORD *)size_t v25 = v27;
      v25 -= 32;
      v11 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        uint64_t v28 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v21 - 1) = v28;
        v21 -= 8;
      }
      while (v12 != v15);
    }
  }
LABEL_19:
  *a1 = v21;
  a1[1] = v14;
  a1[2] = (char *)v13;
  if (v15)
  {
    operator delete(v15);
    unint64_t v13 = (unint64_t)a1[2];
  }
LABEL_21:
  a1[1] = v14;
  if ((unint64_t)v14 < v13)
  {
    *(void *)long long v14 = a5;
    uint64_t v29 = (uint64_t)(v14 + 8);
    goto LABEL_42;
  }
  uint64_t v30 = *a1;
  uint64_t v31 = (v14 - *a1) >> 3;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61) {
LABEL_43:
  }
    sub_24C667470();
  uint64_t v33 = v13 - (void)v30;
  if (v33 >> 2 > v32) {
    unint64_t v32 = v33 >> 2;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (!v34)
  {
    long long v35 = 0;
    long long v36 = (char *)(8 * v31);
    long long v37 = 0;
    *(void *)(8 * v31) = a5;
    uint64_t v29 = 8 * v31 + 8;
    int64_t v38 = v14 - v30;
    if (v14 == v30) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
  if (v34 >> 61) {
LABEL_44:
  }
    sub_24C66DB48();
  long long v35 = (char *)operator new(8 * v34);
  long long v36 = &v35[8 * v31];
  long long v37 = &v35[8 * v34];
  *(void *)long long v36 = a5;
  uint64_t v29 = (uint64_t)(v36 + 8);
  int64_t v38 = v14 - v30;
  if (v14 == v30) {
    goto LABEL_40;
  }
LABEL_34:
  unint64_t v39 = v38 - 8;
  if (v39 < 0x18)
  {
    uint64_t v40 = v14;
    do
    {
LABEL_39:
      uint64_t v47 = *((void *)v40 - 1);
      v40 -= 8;
      *((void *)v36 - 1) = v47;
      v36 -= 8;
    }
    while (v40 != v30);
    goto LABEL_40;
  }
  uint64_t v41 = (v39 >> 3) + 1;
  uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v40 = &v14[-v42];
  v36 -= v42;
  uint64_t v43 = &v35[8 * v31 - 16];
  int v44 = v14 - 16;
  uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v46 = *(_OWORD *)v44;
    *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
    *(_OWORD *)uint64_t v43 = v46;
    v43 -= 32;
    v44 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_39;
  }
LABEL_40:
  *a1 = v36;
  a1[1] = (char *)v29;
  a1[2] = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_42:
  a1[1] = (char *)v29;
  return a1;
}

void sub_24C6CD140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6CD15C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a4)
  {
    objc_msgSend_nextTokensForInputs_AndforMaskPosition_(a4, (const char *)a2, a3, a5, a5);
    size_t v7 = v38;
    int64_t v8 = v40 - v38;
    if (v40 == v38)
    {
      long long v9 = 0;
      long long v37 = 0;
      long long v36 = 0;
    }
    else
    {
      if (v8 < 0) {
        sub_24C667470();
      }
      long long v9 = (char *)operator new(v40 - v38);
      long long v10 = &v9[4 * (v8 >> 2)];
      memcpy(v9, v38, v8);
      long long v37 = 0;
      long long v36 = 0;
      int64_t v11 = 4 * (v8 >> 2);
      if (v10 != v9)
      {
        if (v11 < 0) {
          sub_24C667470();
        }
        long long v12 = (char *)operator new(v10 - v9);
        unint64_t v13 = &v12[4 * (v11 >> 2)];
        long long v36 = v12;
        memcpy(v12, v9, v11);
        long long v37 = v13;
      }
    }
  }
  else
  {
    size_t v7 = 0;
    long long v9 = 0;
    int64_t v38 = 0;
    long long v37 = 0;
    long long v36 = 0;
  }
  if (v9)
  {
    operator delete(v9);
    size_t v7 = v38;
  }
  if (v7) {
    operator delete(v7);
  }
  unint64_t v39 = 0;
  int64_t v14 = v37 - v36;
  if (v37 == v36)
  {
    uint64_t v16 = 0;
    long long v15 = 0;
    unint64_t v17 = *(void **)(a2 + 104);
    uint64_t v18 = (void *)(a2 + 112);
    if (v17 == (void *)(a2 + 112)) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  if (v14 < 0) {
    sub_24C667470();
  }
  long long v15 = (float *)operator new(v37 - v36);
  uint64_t v16 = &v15[v14 >> 2];
  unint64_t v39 = v15;
  memcpy(v15, v36, v14);
  unint64_t v17 = *(void **)(a2 + 104);
  uint64_t v18 = (void *)(a2 + 112);
  if (v17 != (void *)(a2 + 112))
  {
    do
    {
LABEL_21:
      v15[*((unsigned int *)v17 + 7)] = 0.00000011921;
      unint64_t v19 = (void *)v17[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          unint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v17[2];
          BOOL v21 = *v20 == (void)v17;
          unint64_t v17 = v20;
        }
        while (!v21);
      }
      unint64_t v17 = v20;
    }
    while (v20 != v18);
  }
LABEL_27:
  if (v15 == v16)
  {
    uint64_t v28 = 0;
    std::string __p = 0;
    long long v35 = 0;
  }
  else
  {
    unint64_t v22 = (char *)v16 - (char *)v15 - 4;
    uint64_t v23 = v15;
    if (v22 < 4) {
      goto LABEL_54;
    }
    uint64_t v24 = (v22 >> 2) + 1;
    uint64_t v23 = &v15[v24 & 0x7FFFFFFFFFFFFFFELL];
    uint64_t v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v26 = v15;
    do
    {
      LODWORD(v32) = *(void *)v26;
      float v33 = logf(COERCE_FLOAT(HIDWORD(*(void *)v26)));
      *(float *)&uint64_t v27 = logf(v32);
      *((float *)&v27 + 1) = v33;
      *(void *)uint64_t v26 = v27;
      v26 += 2;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_54:
      do
      {
        *uint64_t v23 = logf(*v23);
        ++v23;
      }
      while (v23 != v16);
    }
    if ((char *)v16 - (char *)v15 < 0) {
      sub_24C667470();
    }
    uint64_t v28 = (char *)operator new((char *)v16 - (char *)v15);
    std::string __p = v28;
    memcpy(v28, v15, (char *)v16 - (char *)v15);
    long long v35 = &v28[4 * (v16 - v15)];
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64_t v29 = v35 - v28;
  if (v35 != v28)
  {
    if (v29 < 0) {
      sub_24C667470();
    }
    uint64_t v30 = (char *)operator new(v35 - v28);
    *(void *)a1 = v30;
    uint64_t v31 = &v30[4 * (v29 >> 2)];
    *(void *)(a1 + 16) = v31;
    memcpy(v30, v28, v29);
    *(void *)(a1 + 8) = v31;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  if (__p) {
    operator delete(__p);
  }
  if (v39) {
    operator delete(v39);
  }
  if (v36) {
    operator delete(v36);
  }
}

void sub_24C6CD5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  long long v15 = va_arg(va1, void *);
  uint64_t v16 = va_arg(va1, void);
  long long v10 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v10;
    operator delete(v10);
  }
  sub_24C66FC40((uint64_t)va);
  if (v8)
  {
    long long v15 = v8;
    operator delete(v8);
  }
  if (v7) {
    operator delete(v7);
  }
  sub_24C69D148((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_24C6CD664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(void *)(v25 - 120) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(v25 - 104);
  if (v28)
  {
    *(void *)(v25 - 96) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6CD6C8(uint64_t result)
{
  return result;
}

void sub_24C6CDCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CDFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CE658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6CF038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,char *a34,uint64_t a35,char a36,char *a37,uint64_t a38,char a39,char *a40,uint64_t a41,void *a42)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((a32 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a27);
LABEL_7:
  sub_24C6D6244((uint64_t)&a33, a34);
  sub_24C6D6244((uint64_t)&a36, a37);
  sub_24C6D6244((uint64_t)&a39, a40);
  sub_24C6699B0(&a42);
  sub_24C66FC40(v42 - 152);
  if (*(char *)(v42 - 113) < 0) {
    operator delete(*(void **)(v42 - 136));
  }

  _Unwind_Resume(a1);
}

void sub_24C6D233C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,_Unwind_Exception *exception_object,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_24C6717DC((uint64_t)&a23);
  size_t v60 = *(void **)(v58 - 144);
  if (v60)
  {
    *(void *)(v58 - 136) = v60;
    operator delete(v60);
  }
  operator delete(__p);
  if (exception_object) {
    operator delete(exception_object);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
    int v61 = a40;
    if (!a40)
    {
LABEL_7:
      sub_24C6699B0(&a43);
      int v62 = a46;
      if (!a46) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
  }
  else
  {
    int v61 = a40;
    if (!a40) {
      goto LABEL_7;
    }
  }
  a41 = (uint64_t)v61;
  operator delete(v61);
  sub_24C6699B0(&a43);
  int v62 = a46;
  if (!a46)
  {
LABEL_8:
    int64x2_t v63 = a49;
    if (!a49) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
LABEL_12:
  a47 = (uint64_t)v62;
  operator delete(v62);
  int64x2_t v63 = a49;
  if (!a49) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_13:
  a50 = (uint64_t)v63;
  operator delete(v63);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6D2714(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_24C6D2768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int blob_shape = espresso_network_query_blob_shape();
  char v9 = 21;
  strcpy(__p, "Could not query blob!");
  sub_24C6D5D24(&blob_shape, (uint64_t *)__p);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  espresso_buffer_pack_tensor_shape();
  v11[0] = a5;
  int v12 = 65568;
  *(_WORD *)std::string __p = 1;
  return sub_24C66FCBC(a1, (uint64_t)v11, __p);
}

void sub_24C6D286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D3288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  operator delete(v38);
  if (v37) {
    operator delete(v37);
  }
  operator delete(v36);
  if (a35) {
    operator delete(a35);
  }
  sub_24C6717DC(v39 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D3E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_24C6D2714((uint64_t)va);
  sub_24C6D3F18(v17 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D3EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_24C66EA3C(&a15);
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_24C6D2714((uint64_t)&a28);
  sub_24C6D3F18(v28 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6D3F18(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      uint64_t v6 = (void *)*((void *)v2 + 5);
      if (v6)
      {
        *((void *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_24C6D41E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D4254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    long long v20 = xmmword_24C72F5D0;
    qmemcpy(v19, "ut client bufferBinding output c", sizeof(v19));
    do
    {
      uint64_t v4 = *(void *)(v2 + 80);
      long long v5 = *(_OWORD *)(v4 + 40);
      long long v6 = *(_OWORD *)(v4 + 24);
      long long v24 = *(_OWORD *)(v4 + 8);
      long long v25 = v6;
      long long v26 = v5;
      long long v7 = *(_OWORD *)(v4 + 88);
      long long v8 = *(_OWORD *)(v4 + 104);
      long long v9 = *(_OWORD *)(v4 + 72);
      long long v27 = *(_OWORD *)(v4 + 56);
      long long v28 = v9;
      long long v10 = *(_OWORD *)(v4 + 120);
      long long v11 = *(_OWORD *)(v4 + 136);
      long long v12 = *(_OWORD *)(v4 + 152);
      uint64_t v34 = *(void *)(v4 + 168);
      long long v32 = v11;
      long long v33 = v12;
      long long v30 = v8;
      long long v31 = v10;
      long long v29 = v7;
      int v23 = espresso_network_bind_buffer();
      uint64_t v13 = operator new(0x20uLL);
      std::string __p = v13;
      long long v22 = v20;
      *uint64_t v13 = v19[1];
      *(_OWORD *)((char *)v13 + 12) = v19[0];
      *((unsigned char *)v13 + 28) = 0;
      sub_24C6D5D24(&v23, (uint64_t *)&__p);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
      std::string __p = (void *)(v2 + 16);
      uint64_t v14 = sub_24C6707E0(v3 + 192, v2 + 16, (uint64_t)&unk_24C72FF38, (long long **)&__p);
      long long v15 = v14;
      *((_DWORD *)v14 + 12) = *(_DWORD *)(v2 + 48);
      if ((uint64_t *)v2 != v14) {
        sub_24C670F38(v14 + 7, *(char **)(v2 + 56), *(char **)(v2 + 64), (uint64_t)(*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3);
      }
      uint64_t v17 = *(void *)(v2 + 80);
      uint64_t v16 = *(void *)(v2 + 88);
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (std::__shared_weak_count *)v15[11];
      v15[10] = v17;
      v15[11] = v16;
      if (v18)
      {
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      uint64_t v2 = *(void *)v2;
    }
    while (v2);
  }
}

void sub_24C6D4444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D4F4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_24C6D3F18(v2 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D4F6C(_Unwind_Exception *a1)
{
  sub_24C6D3F18(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D4F80(_Unwind_Exception *a1)
{
  sub_24C6D3F18(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((a36 & 0x80000000) == 0)
  {
    sub_24C6D3F18(v36 - 144);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_24C6D3F18(v36 - 144);
  _Unwind_Resume(a1);
}

void sub_24C6D5184(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D523C(_Unwind_Exception *a1)
{
  sub_24C6D6244(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C6D52F0(_Unwind_Exception *a1)
{
  sub_24C6D6244(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C6D53A4(_Unwind_Exception *a1)
{
  sub_24C6D6244(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_24C6D5430(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D54C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D5550(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D55E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6D5670(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24C6D58A8(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C66DB48();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  long long v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  uint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_24C66E0A8(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    long long v10 = v16;
    long long v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)long long v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    long long v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_24C6D5A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C671B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6D5A80(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    long long v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_24C667470();
  }
  long long v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  long long v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_24C6D5B50(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_24C6D5B74(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      unint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_24C667470();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_24C66DB48();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    uint64_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      BOOL v21 = &v13[4 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

int *sub_24C6D5D24(int *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v2 = result;
    sub_24C671080((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_24C66A5A0(" [espresso error: ", &v9, &v10);
    std::to_string(&v8, *v2);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &v8;
    }
    else {
      uint64_t v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v8.__r_.__value_.__l.__size_;
    }
    unint64_t v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_24C66A5A0("]", &v11, &v12);
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_26FEDD810;
    __cxa_throw(exception, (struct type_info *)&unk_26FEDD5E8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_24C6D5E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if (a21 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if (a21 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_24C6D5F34(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    std::string v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_24C667470();
  }
  std::string v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  std::string v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_24C6D6004(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_24C6D6028(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    while (1)
    {
      uint64_t v3 = (void *)*v2;
      v2[5] = &unk_26FEDD950;
      long long v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v5 = (void *)v2[7];
      if (v5) {
        goto LABEL_7;
      }
LABEL_8:
      if (*((char *)v2 + 39) < 0) {
        operator delete((void *)v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (void *)v2[7];
    if (!v5) {
      goto LABEL_8;
    }
LABEL_7:
    v2[8] = v5;
    operator delete(v5);
    goto LABEL_8;
  }
}

uint64_t *sub_24C6D6108(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = sub_24C6C4B00(a1, a2, &v14, &v13, a3);
  if (*v6) {
    return (uint64_t *)*v6;
  }
  std::string v8 = v6;
  std::string v9 = (uint64_t *)operator new(0x50uLL);
  sub_24C6D5A80(v9 + 4, a4);
  std::string v10 = v14;
  *std::string v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *std::string v8 = (uint64_t)v9;
  std::string v11 = (uint64_t *)**a1;
  std::string v12 = v9;
  if (v11)
  {
    *a1 = v11;
    std::string v12 = (uint64_t *)*v8;
  }
  sub_24C681E28(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_24C6D61D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6D61E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(void *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_24C6D6244(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_24C6D6244(a1, *(void *)a2);
    sub_24C6D6244(a1, *((void *)a2 + 1));
    long long v4 = (void *)*((void *)a2 + 7);
    if (v4)
    {
      *((void *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v5 = a2;
    }
    else
    {
      unint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

uint64_t *sub_24C6D62D8(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = sub_24C6C4B00(a1, a2, &v14, &v13, a3);
  if (*v6) {
    return (uint64_t *)*v6;
  }
  std::string v8 = v6;
  std::string v9 = (uint64_t *)operator new(0x50uLL);
  sub_24C6D63B4(v9 + 4, a4);
  std::string v10 = v14;
  *std::string v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *std::string v8 = (uint64_t)v9;
  std::string v11 = (uint64_t *)**a1;
  std::string v12 = v9;
  if (v11)
  {
    *a1 = v11;
    std::string v12 = (uint64_t *)*v8;
  }
  sub_24C681E28(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_24C6D63A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6D63B4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    std::string v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_24C667470();
  }
  std::string v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  std::string v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_24C6D6484(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_24C7299BC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_24C6D64A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C6D64C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6D651C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_24C6D6544(void *a1, const char **a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  *a1 = &unk_26FEDD7D0;
  std::string v11 = operator new(0x128uLL);
  v11[1] = 0;
  v11[2] = 0;
  *std::string v11 = &unk_26FEDDA58;
  a1[1] = sub_24C67354C((uint64_t)(v11 + 3), &__dst, a3);
  a1[2] = v11;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_24C6D666C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_24C6D669C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      std::string v11 = (uint64_t **)v6;
      unint64_t v14 = (const void *)v6[4];
      std::string v12 = v6 + 4;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        size_t v6 = v11[1];
        if (!v6)
        {
          size_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        size_t v6 = *v11;
        size_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  std::string v11 = a1 + 1;
LABEL_29:
  BOOL v21 = operator new(0x50uLL);
  long long v22 = v21 + 4;
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v22, *(void **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)long long v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  void *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *size_t v7 = v21;
  int v25 = (uint64_t *)**a1;
  long long v26 = v21;
  if (v25)
  {
    *a1 = v25;
    long long v26 = *v7;
  }
  sub_24C681E28(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_24C6D681C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_24C6D6830(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      std::string v11 = (uint64_t **)v6;
      unint64_t v14 = (const void *)v6[4];
      std::string v12 = v6 + 4;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        size_t v6 = v11[1];
        if (!v6)
        {
          size_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        size_t v6 = *v11;
        size_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  std::string v11 = a1 + 1;
LABEL_29:
  BOOL v21 = operator new(0x50uLL);
  long long v22 = v21 + 4;
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v22, *(void **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)long long v22 = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  v21[9] = 0;
  void *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *size_t v7 = v21;
  int v25 = (uint64_t *)**a1;
  long long v26 = v21;
  if (v25)
  {
    *a1 = v25;
    long long v26 = *v7;
  }
  sub_24C681E28(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_24C6D69B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_24C6D69C4(uint64_t **a1, long long *a2, long long *a3)
{
  long long v4 = a2;
  unint64_t v5 = a1;
  if (a1[2])
  {
    size_t v6 = *a1;
    size_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1]) {
      uint64_t v8 = v6[1];
    }
    else {
      uint64_t v8 = (uint64_t)v6;
    }
    uint64_t v27 = (uint64_t)a1;
    uint64_t v29 = v8;
    if (!v8)
    {
      long long v22 = 0;
      goto LABEL_53;
    }
    uint64_t v9 = *(char **)(v8 + 16);
    if (v9)
    {
      size_t v10 = *(char **)v9;
      if (*(void *)v9 == v8)
      {
        *(void *)uint64_t v9 = 0;
        while (1)
        {
          long long v26 = (char *)*((void *)v9 + 1);
          if (!v26) {
            break;
          }
          do
          {
            uint64_t v9 = v26;
            long long v26 = *(char **)v26;
          }
          while (v26);
        }
      }
      else
      {
        for (*((void *)v9 + 1) = 0; v10; size_t v10 = (char *)*((void *)v9 + 1))
        {
          do
          {
            uint64_t v9 = v10;
            size_t v10 = *(char **)v10;
          }
          while (v10);
        }
      }
    }
    uint64_t v28 = (uint64_t)v9;
    if (a2 == a3)
    {
      BOOL v21 = a1;
      sub_24C6D6244((uint64_t)a1, (char *)v8);
      if (!v9) {
        goto LABEL_54;
      }
      goto LABEL_50;
    }
    std::string v11 = a2;
    while (1)
    {
      if ((long long *)v8 != v11)
      {
        std::string v12 = (void **)(v8 + 32);
        char v13 = *((unsigned char *)v11 + 55);
        if (*(char *)(v8 + 55) < 0)
        {
          if (v13 >= 0) {
            int v15 = v11 + 2;
          }
          else {
            int v15 = (void *)*((void *)v11 + 4);
          }
          if (v13 >= 0) {
            size_t v16 = *((unsigned __int8 *)v11 + 55);
          }
          else {
            size_t v16 = *((void *)v11 + 5);
          }
          sub_24C67E33C(v12, v15, v16);
        }
        else if ((*((unsigned char *)v11 + 55) & 0x80) != 0)
        {
          sub_24C67E274(v12, *((void **)v11 + 4), *((void *)v11 + 5));
        }
        else
        {
          long long v14 = v11[2];
          *(void *)(v8 + 48) = *((void *)v11 + 6);
          *(_OWORD *)std::string v12 = v14;
        }
        sub_24C670F38((void *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), (uint64_t)(*((void *)v11 + 8) - *((void *)v11 + 7)) >> 3);
        uint64_t v8 = v29;
      }
      sub_24C6D6C80(v5, v8);
      uint64_t v8 = v28;
      uint64_t v29 = v28;
      if (v28)
      {
        uint64_t v9 = *(char **)(v28 + 16);
        if (v9)
        {
          size_t v17 = *(char **)v9;
          if (*(void *)v9 == v28)
          {
            *(void *)uint64_t v9 = 0;
            while (1)
            {
              int v20 = (char *)*((void *)v9 + 1);
              if (!v20) {
                break;
              }
              do
              {
                uint64_t v9 = v20;
                int v20 = *(char **)v20;
              }
              while (v20);
            }
          }
          else
          {
            for (*((void *)v9 + 1) = 0; v17; size_t v17 = (char *)*((void *)v9 + 1))
            {
              do
              {
                uint64_t v9 = v17;
                size_t v17 = *(char **)v17;
              }
              while (v17);
            }
          }
        }
        uint64_t v28 = (uint64_t)v9;
        size_t v18 = (long long *)*((void *)v11 + 1);
        if (v18)
        {
          do
          {
LABEL_35:
            long long v4 = v18;
            size_t v18 = *(long long **)v18;
          }
          while (v18);
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v9 = 0;
        size_t v18 = (long long *)*((void *)v11 + 1);
        if (v18) {
          goto LABEL_35;
        }
      }
      do
      {
        long long v4 = (long long *)*((void *)v11 + 2);
        BOOL v19 = *(void *)v4 == (void)v11;
        std::string v11 = v4;
      }
      while (!v19);
LABEL_39:
      if (v8)
      {
        std::string v11 = v4;
        if (v4 != a3) {
          continue;
        }
      }
      BOOL v21 = (uint64_t **)v27;
      sub_24C6D6244(v27, (char *)v8);
      if (!v9) {
        break;
      }
LABEL_50:
      for (unsigned int i = (char *)*((void *)v9 + 2); i; unsigned int i = (char *)*((void *)i + 2))
        uint64_t v9 = i;
      a1 = v21;
      long long v22 = v9;
LABEL_53:
      sub_24C6D6244((uint64_t)a1, v22);
      break;
    }
  }
LABEL_54:
  if (v4 != a3)
  {
    do
    {
      sub_24C6D6DDC(v5, v4 + 2);
      long long v24 = (long long *)*((void *)v4 + 1);
      if (v24)
      {
        do
        {
          int v25 = v24;
          long long v24 = *(long long **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          int v25 = (long long *)*((void *)v4 + 2);
          BOOL v19 = *(void *)v25 == (void)v4;
          long long v4 = v25;
        }
        while (!v19);
      }
      long long v4 = v25;
    }
    while (v25 != a3);
  }
}

void sub_24C6D6C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D6D84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6D6C80(uint64_t **a1, uint64_t a2)
{
  unint64_t v5 = a1 + 1;
  long long v4 = a1[1];
  if (v4)
  {
    int v6 = *(char *)(a2 + 55);
    if (v6 >= 0) {
      size_t v7 = (const void *)(a2 + 32);
    }
    else {
      size_t v7 = *(const void **)(a2 + 32);
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      size_t v8 = *(void *)(a2 + 40);
    }
    while (1)
    {
      unint64_t v5 = (uint64_t **)v4;
      std::string v12 = (const void *)v4[4];
      size_t v10 = v4 + 4;
      std::string v11 = v12;
      int v13 = *((char *)v10 + 23);
      if (v13 >= 0) {
        long long v14 = v10;
      }
      else {
        long long v14 = v11;
      }
      if (v13 >= 0) {
        size_t v15 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        size_t v15 = v10[1];
      }
      if (v15 >= v8) {
        size_t v16 = v8;
      }
      else {
        size_t v16 = v15;
      }
      int v17 = memcmp(v7, v14, v16);
      if (v17)
      {
        if (v17 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        long long v4 = v5[1];
        if (!v4)
        {
          uint64_t v9 = v5 + 1;
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >= v15) {
          goto LABEL_22;
        }
LABEL_8:
        long long v4 = *v5;
        uint64_t v9 = v5;
        if (!*v5) {
          goto LABEL_25;
        }
      }
    }
  }
  uint64_t v9 = a1 + 1;
LABEL_25:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v5;
  *uint64_t v9 = (uint64_t *)a2;
  size_t v18 = (uint64_t *)**a1;
  BOOL v19 = (uint64_t *)a2;
  if (v18)
  {
    *a1 = v18;
    BOOL v19 = *v9;
  }
  sub_24C681E28(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return a2;
}

uint64_t sub_24C6D6D84(uint64_t a1)
{
  sub_24C6D6244(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_24C6D6244(*(void *)a1, (char *)v2);
  }
  return a1;
}

void *sub_24C6D6DDC(uint64_t **a1, long long *a2)
{
  long long v4 = a1 + 1;
  unint64_t v5 = operator new(0x50uLL);
  long long v22 = v5;
  int v6 = sub_24C6D63B4(v5 + 4, a2);
  size_t v7 = (void *)*v4;
  size_t v8 = v4;
  if (*v4)
  {
    int v9 = *((char *)v5 + 55);
    if (v9 >= 0) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = (const void *)v5[4];
    }
    if (v9 >= 0) {
      size_t v11 = *((unsigned __int8 *)v5 + 55);
    }
    else {
      size_t v11 = v5[5];
    }
    while (1)
    {
      long long v4 = v7;
      long long v14 = (const void *)v7[4];
      std::string v12 = v7 + 4;
      int v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v11) {
        size_t v18 = v11;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        size_t v7 = (void *)v4[1];
        if (!v7)
        {
          size_t v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        size_t v7 = (void *)*v4;
        size_t v8 = v4;
        if (!*v4) {
          break;
        }
      }
    }
  }
  void *v5 = 0;
  v5[1] = 0;
  void v5[2] = v4;
  *size_t v8 = v5;
  int v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    unint64_t v5 = (void *)*v8;
  }
  sub_24C681E28(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_24C6D6EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D61E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6D6F10(uint64_t **a1, long long *a2, long long *a3)
{
  long long v4 = a2;
  unint64_t v5 = a1;
  if (a1[2])
  {
    int v6 = *a1;
    size_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1]) {
      uint64_t v8 = v6[1];
    }
    else {
      uint64_t v8 = (uint64_t)v6;
    }
    uint64_t v27 = (uint64_t)a1;
    uint64_t v29 = v8;
    if (!v8)
    {
      long long v22 = 0;
      goto LABEL_53;
    }
    int v9 = *(char **)(v8 + 16);
    if (v9)
    {
      size_t v10 = *(char **)v9;
      if (*(void *)v9 == v8)
      {
        *(void *)int v9 = 0;
        while (1)
        {
          long long v26 = (char *)*((void *)v9 + 1);
          if (!v26) {
            break;
          }
          do
          {
            int v9 = v26;
            long long v26 = *(char **)v26;
          }
          while (v26);
        }
      }
      else
      {
        for (*((void *)v9 + 1) = 0; v10; size_t v10 = (char *)*((void *)v9 + 1))
        {
          do
          {
            int v9 = v10;
            size_t v10 = *(char **)v10;
          }
          while (v10);
        }
      }
    }
    uint64_t v28 = (uint64_t)v9;
    if (a2 == a3)
    {
      BOOL v21 = a1;
      sub_24C6D6244((uint64_t)a1, (char *)v8);
      if (!v9) {
        goto LABEL_54;
      }
      goto LABEL_50;
    }
    size_t v11 = a2;
    while (1)
    {
      if ((long long *)v8 != v11)
      {
        std::string v12 = (void **)(v8 + 32);
        char v13 = *((unsigned char *)v11 + 55);
        if (*(char *)(v8 + 55) < 0)
        {
          if (v13 >= 0) {
            int v15 = v11 + 2;
          }
          else {
            int v15 = (void *)*((void *)v11 + 4);
          }
          if (v13 >= 0) {
            size_t v16 = *((unsigned __int8 *)v11 + 55);
          }
          else {
            size_t v16 = *((void *)v11 + 5);
          }
          sub_24C67E33C(v12, v15, v16);
        }
        else if ((*((unsigned char *)v11 + 55) & 0x80) != 0)
        {
          sub_24C67E274(v12, *((void **)v11 + 4), *((void *)v11 + 5));
        }
        else
        {
          long long v14 = v11[2];
          *(void *)(v8 + 48) = *((void *)v11 + 6);
          *(_OWORD *)std::string v12 = v14;
        }
        sub_24C69DCB4((void *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), (uint64_t)(*((void *)v11 + 8) - *((void *)v11 + 7)) >> 2);
        uint64_t v8 = v29;
      }
      sub_24C6D6C80(v5, v8);
      uint64_t v8 = v28;
      uint64_t v29 = v28;
      if (v28)
      {
        int v9 = *(char **)(v28 + 16);
        if (v9)
        {
          size_t v17 = *(char **)v9;
          if (*(void *)v9 == v28)
          {
            *(void *)int v9 = 0;
            while (1)
            {
              int v20 = (char *)*((void *)v9 + 1);
              if (!v20) {
                break;
              }
              do
              {
                int v9 = v20;
                int v20 = *(char **)v20;
              }
              while (v20);
            }
          }
          else
          {
            for (*((void *)v9 + 1) = 0; v17; size_t v17 = (char *)*((void *)v9 + 1))
            {
              do
              {
                int v9 = v17;
                size_t v17 = *(char **)v17;
              }
              while (v17);
            }
          }
        }
        uint64_t v28 = (uint64_t)v9;
        size_t v18 = (long long *)*((void *)v11 + 1);
        if (v18)
        {
          do
          {
LABEL_35:
            long long v4 = v18;
            size_t v18 = *(long long **)v18;
          }
          while (v18);
          goto LABEL_39;
        }
      }
      else
      {
        int v9 = 0;
        size_t v18 = (long long *)*((void *)v11 + 1);
        if (v18) {
          goto LABEL_35;
        }
      }
      do
      {
        long long v4 = (long long *)*((void *)v11 + 2);
        BOOL v19 = *(void *)v4 == (void)v11;
        size_t v11 = v4;
      }
      while (!v19);
LABEL_39:
      if (v8)
      {
        size_t v11 = v4;
        if (v4 != a3) {
          continue;
        }
      }
      BOOL v21 = (uint64_t **)v27;
      sub_24C6D6244(v27, (char *)v8);
      if (!v9) {
        break;
      }
LABEL_50:
      for (unsigned int i = (char *)*((void *)v9 + 2); i; unsigned int i = (char *)*((void *)i + 2))
        int v9 = i;
      a1 = v21;
      long long v22 = v9;
LABEL_53:
      sub_24C6D6244((uint64_t)a1, v22);
      break;
    }
  }
LABEL_54:
  if (v4 != a3)
  {
    do
    {
      sub_24C6D71CC(v5, v4 + 2);
      long long v24 = (long long *)*((void *)v4 + 1);
      if (v24)
      {
        do
        {
          int v25 = v24;
          long long v24 = *(long long **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          int v25 = (long long *)*((void *)v4 + 2);
          BOOL v19 = *(void *)v25 == (void)v4;
          long long v4 = v25;
        }
        while (!v19);
      }
      long long v4 = v25;
    }
    while (v25 != a3);
  }
}

void sub_24C6D71B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D6D84((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6D71CC(uint64_t **a1, long long *a2)
{
  long long v4 = a1 + 1;
  unint64_t v5 = operator new(0x50uLL);
  long long v22 = v5;
  int v6 = sub_24C6D5A80(v5 + 4, a2);
  size_t v7 = (void *)*v4;
  uint64_t v8 = v4;
  if (*v4)
  {
    int v9 = *((char *)v5 + 55);
    if (v9 >= 0) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = (const void *)v5[4];
    }
    if (v9 >= 0) {
      size_t v11 = *((unsigned __int8 *)v5 + 55);
    }
    else {
      size_t v11 = v5[5];
    }
    while (1)
    {
      long long v4 = v7;
      long long v14 = (const void *)v7[4];
      std::string v12 = v7 + 4;
      char v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v11) {
        size_t v18 = v11;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        size_t v7 = (void *)v4[1];
        if (!v7)
        {
          uint64_t v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        size_t v7 = (void *)*v4;
        uint64_t v8 = v4;
        if (!*v4) {
          break;
        }
      }
    }
  }
  void *v5 = 0;
  v5[1] = 0;
  void v5[2] = v4;
  *uint64_t v8 = v5;
  int v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    unint64_t v5 = (void *)*v8;
  }
  sub_24C681E28(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_24C6D72EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D61E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6D7300(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        v13[0] = (void **)(v8 + 2);
        v13[1] = (void **)(v8 + 5);
        sub_24C6D7600(v13, a2 + 2);
        int v9 = (void *)*v8;
        sub_24C6D74A4(a1, (uint64_t)v8);
        a2 = (void *)*a2;
        uint64_t v8 = v9;
        if (!v9) {
          goto LABEL_9;
        }
      }
      while (1)
      {
        size_t v10 = (void *)*v8;
        v8[5] = &unk_26FEDD950;
        size_t v11 = (std::__shared_weak_count *)v8[11];
        if (v11)
        {
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        std::string v12 = (void *)v8[7];
        if (v12) {
          goto LABEL_16;
        }
LABEL_17:
        if (*((char *)v8 + 39) < 0) {
          operator delete((void *)v8[2]);
        }
        operator delete(v8);
        uint64_t v8 = v10;
        if (!v10) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      std::string v12 = (void *)v8[7];
      if (!v12) {
        goto LABEL_17;
      }
LABEL_16:
      v8[8] = v12;
      operator delete(v12);
      goto LABEL_17;
    }
  }
LABEL_9:
  while (a2 != a3)
  {
    sub_24C6D7DC0(a1, (long long *)a2 + 1);
    a2 = (void *)*a2;
  }
}

void sub_24C6D7474(void *a1)
{
  __cxa_begin_catch(a1);
  sub_24C6D6028(v2, v1);
  __cxa_rethrow();
}

void sub_24C6D7490(_Unwind_Exception *a1)
{
}

uint64_t sub_24C6D74A4(void *a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    size_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    size_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  size_t v10 = sub_24C6D7754((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  uint64_t *v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

void ***sub_24C6D7600(void ***a1, size_t *a2)
{
  int v2 = a2;
  long long v4 = *a1;
  if (v4 == (void **)a2) {
    goto LABEL_10;
  }
  if (*((char *)v4 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      size_t v7 = v2[1];
    }
    sub_24C67E33C(v4, a2, v7);
LABEL_10:
    unint64_t v6 = a1[1];
    *((_DWORD *)v6 + 2) = *((_DWORD *)v2 + 8);
    if (v6 == (void **)(v2 + 3)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
  {
    long long v5 = *(_OWORD *)a2;
    v4[2] = (void *)a2[2];
    *(_OWORD *)long long v4 = v5;
    unint64_t v6 = a1[1];
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 8);
    if (v6 == (void **)(a2 + 3)) {
      goto LABEL_12;
    }
LABEL_11:
    sub_24C670F38(v6 + 2, (char *)v2[5], (char *)v2[6], (uint64_t)(v2[6] - v2[5]) >> 3);
    goto LABEL_12;
  }
  sub_24C67E274(v4, (void *)*a2, a2[1]);
  unint64_t v6 = a1[1];
  *((_DWORD *)v6 + 2) = *((_DWORD *)v2 + 8);
  if (v6 != (void **)(v2 + 3)) {
    goto LABEL_11;
  }
LABEL_12:
  size_t v9 = v2[8];
  size_t v8 = v2[9];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v10 = (std::__shared_weak_count *)v6[6];
  v6[5] = (void *)v9;
  v6[6] = (void *)v8;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

uint64_t *sub_24C6D7754(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_15;
    }
    if (prime < v6)
    {
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          uint64_t v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2) {
            size_t v16 = v18;
          }
          if (prime <= v16) {
            size_t prime = v16;
          }
          if (prime >= v6) {
            goto LABEL_28;
          }
LABEL_15:
          sub_24C6D7AB0(a1, prime);
          goto LABEL_28;
        }
      }
      size_t v19 = std::__next_prime(v16);
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
        goto LABEL_15;
      }
    }
LABEL_28:
    unint64_t v6 = *(void *)(a1 + 8);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  BOOL v21 = *(uint64_t **)(*(void *)a1 + 8 * v11);
  if (!v21) {
    return 0;
  }
  char v22 = a3[23];
  if (v22 >= 0) {
    uint64_t v23 = a3[23];
  }
  else {
    uint64_t v23 = *((void *)a3 + 1);
  }
  if (v22 < 0) {
    a3 = *(unsigned char **)a3;
  }
  if (v10 >= 2)
  {
    int v43 = 0;
    do
    {
      uint64_t v28 = v21;
      BOOL v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      unint64_t v46 = v21[1];
      unint64_t v47 = v46;
      if (v46 >= v6) {
        unint64_t v47 = v46 % v6;
      }
      if (v47 != v11) {
        break;
      }
      if (v46 == a2
        && ((uint64_t v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (uint64_t v49 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v49 = v21[3]),
            v49 == v23))
      {
        int v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          BOOL v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v51 = v48 - 1;
          size_t v52 = a3;
          do
          {
            int v54 = *(unsigned __int8 *)v50;
            int v50 = (const void **)((char *)v50 + 1);
            int v53 = v54;
            int v56 = *v52++;
            int v55 = v56;
            BOOL v39 = v51-- != 0;
            char v57 = v39;
            BOOL v41 = v53 == v55;
            BOOL v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          BOOL v44 = 1;
        }
      }
      else
      {
        BOOL v44 = 0;
      }
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    int v24 = 0;
    unint64_t v25 = v6 - 1;
    do
    {
      uint64_t v28 = v21;
      BOOL v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      uint64_t v29 = v21[1];
      if ((v29 & v25) != v11) {
        break;
      }
      if (v29 == a2
        && ((uint64_t v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (uint64_t v31 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v31 = v21[3]),
            v31 == v23))
      {
        long long v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          BOOL v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v33 = v30 - 1;
          int v34 = a3;
          do
          {
            int v36 = *(unsigned __int8 *)v32;
            long long v32 = (const void **)((char *)v32 + 1);
            int v35 = v36;
            int v38 = *v34++;
            int v37 = v38;
            BOOL v39 = v33-- != 0;
            char v40 = v39;
            BOOL v41 = v35 == v37;
            BOOL v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          BOOL v26 = 1;
        }
      }
      else
      {
        BOOL v26 = 0;
      }
      char v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

void sub_24C6D7AB0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_24C66DB48();
    }
    long long v4 = operator new(8 * a2);
    long long v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    float v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      BOOL v12 = *v7;
      if (*v7)
      {
        unint64_t v35 = v9.u32[0];
        do
        {
          unint64_t v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            float v7 = (uint64_t **)v12;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              unint64_t v14 = (uint64_t *)*v12;
              unint64_t v36 = v8;
              if (*v12)
              {
                size_t v15 = v12[3];
                if (*((char *)v12 + 39) >= 0) {
                  uint64_t v16 = *((unsigned __int8 *)v12 + 39);
                }
                else {
                  uint64_t v16 = v12[3];
                }
                if ((*((unsigned char *)v12 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v12 + 39))
                  {
                    uint8x8_t v17 = (uint64_t *)*v12;
                    uint64_t v18 = v12;
LABEL_32:
                    unint64_t v14 = v17;
                    uint64_t v19 = *((unsigned __int8 *)v17 + 39);
                    int v20 = (char)v19;
                    if ((v19 & 0x80u) != 0) {
                      uint64_t v19 = v14[3];
                    }
                    if (v16 == v19)
                    {
                      if (v20 >= 0) {
                        BOOL v21 = (unsigned __int8 *)(v14 + 2);
                      }
                      else {
                        BOOL v21 = (unsigned __int8 *)v14[2];
                      }
                      char v22 = (unsigned __int8 *)(v12 + 2);
                      uint64_t v23 = *((unsigned __int8 *)v12 + 39);
                      while (*v22 == *v21)
                      {
                        ++v22;
                        ++v21;
                        if (!--v23)
                        {
                          uint8x8_t v17 = (uint64_t *)*v14;
                          uint64_t v18 = v14;
                          unint64_t v14 = 0;
                          if (v17) {
                            goto LABEL_32;
                          }
                          goto LABEL_58;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v33 = *((unsigned __int8 *)v14 + 39);
                    if ((v33 & 0x80u) != 0) {
                      uint64_t v33 = v14[3];
                    }
                    uint64_t v18 = v12;
                    if (v33 == *((unsigned __int8 *)v12 + 39))
                    {
                      do
                      {
                        uint64_t v18 = v14;
                        unint64_t v14 = (uint64_t *)*v14;
                        if (!v14) {
                          break;
                        }
                        uint64_t v34 = *((unsigned __int8 *)v14 + 39);
                        if ((v34 & 0x80u) != 0) {
                          uint64_t v34 = v14[3];
                        }
                      }
                      while (v16 == v34);
                    }
                  }
                  goto LABEL_58;
                }
                BOOL v24 = *((char *)v14 + 39) < 0;
                uint64_t v25 = *((unsigned __int8 *)v14 + 39);
                if ((v25 & 0x80u) != 0) {
                  uint64_t v25 = v14[3];
                }
                if (v16 == v25)
                {
                  BOOL v26 = (const void *)v12[2];
                  uint64_t v18 = v12;
                  while (1)
                  {
                    char v27 = v14;
                    uint64_t v30 = (const void *)v14[2];
                    uint64_t v28 = v14 + 2;
                    uint64_t v29 = v30;
                    if (v24) {
                      uint64_t v31 = v29;
                    }
                    else {
                      uint64_t v31 = v28;
                    }
                    if (memcmp(v26, v31, v15))
                    {
                      unint64_t v14 = v27;
                      goto LABEL_58;
                    }
                    unint64_t v14 = (uint64_t *)*v27;
                    if (!*v27) {
                      break;
                    }
                    BOOL v24 = *((char *)v14 + 39) < 0;
                    uint64_t v32 = *((unsigned __int8 *)v14 + 39);
                    if ((v32 & 0x80u) != 0) {
                      uint64_t v32 = v14[3];
                    }
                    uint64_t v18 = v27;
                    if (v16 != v32) {
                      goto LABEL_58;
                    }
                  }
                  uint64_t v18 = v27;
                  goto LABEL_58;
                }
              }
              uint64_t v18 = v12;
LABEL_58:
              *float v7 = v14;
              uint64_t *v18 = **(void **)(*(void *)a1 + 8 * v13);
              **(void **)(*(void *)a1 + 8 * v13) = v12;
              unint64_t v8 = v36;
              unint64_t v10 = v35;
              goto LABEL_18;
            }
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            float v7 = (uint64_t **)v12;
            unint64_t v8 = v13;
          }
LABEL_18:
          BOOL v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_24C6D7DC0(void *a1, long long *a2)
{
  long long v4 = (char *)operator new(0x60uLL);
  *(void *)long long v4 = 0;
  *((void *)v4 + 1) = 0;
  long long v5 = sub_24C6716AC((void *)v4 + 2, a2);
  int v6 = v4[39];
  if (v6 >= 0) {
    float v7 = v5;
  }
  else {
    float v7 = (uint64_t *)*((void *)v4 + 2);
  }
  if (v6 >= 0) {
    unint64_t v8 = v4[39];
  }
  else {
    unint64_t v8 = *((void *)v4 + 3);
  }
  *((void *)v4 + 1) = sub_24C66F398((uint64_t)&v10, v7, v8);
  return sub_24C6D74A4(a1, (uint64_t)v4);
}

void sub_24C6D7E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6D7E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_24C6D7E88(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_24C66F398((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  BOOL v26 = (void *)(a1 + 16);
  size_t v15 = (unsigned __int8 *)operator new(0x60uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)size_t v15 = 0;
  *((void *)v15 + 1) = v11;
  char v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)char v27 = 0;
  *((void *)v15 + 5) = &unk_26FEDD950;
  *((_DWORD *)v15 + 12) = 4;
  *((void *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)size_t v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)size_t v15 = *v26;
  void *v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C6D82D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C6D82EC(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        v13[0] = (void **)(v8 + 2);
        v13[1] = (void **)(v8 + 5);
        sub_24C6D7600(v13, a2 + 2);
        unint64_t v9 = (void *)*v8;
        sub_24C6D8490(a1, (uint64_t)v8);
        a2 = (void *)*a2;
        unint64_t v8 = v9;
        if (!v9) {
          goto LABEL_9;
        }
      }
      while (1)
      {
        unint64_t v10 = (void *)*v8;
        v8[5] = &unk_26FEDD950;
        unint64_t v11 = (std::__shared_weak_count *)v8[11];
        if (v11)
        {
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        unint64_t v12 = (void *)v8[7];
        if (v12) {
          goto LABEL_16;
        }
LABEL_17:
        if (*((char *)v8 + 39) < 0) {
          operator delete((void *)v8[2]);
        }
        operator delete(v8);
        unint64_t v8 = v10;
        if (!v10) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      unint64_t v12 = (void *)v8[7];
      if (!v12) {
        goto LABEL_17;
      }
LABEL_16:
      v8[8] = v12;
      operator delete(v12);
      goto LABEL_17;
    }
  }
LABEL_9:
  while (a2 != a3)
  {
    sub_24C6D85EC(a1, (long long *)a2 + 1);
    a2 = (void *)*a2;
  }
}

void sub_24C6D8460(void *a1)
{
  __cxa_begin_catch(a1);
  sub_24C6D6028(v2, v1);
  __cxa_rethrow();
}

void sub_24C6D847C(_Unwind_Exception *a1)
{
}

uint64_t sub_24C6D8490(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    float v7 = (uint64_t *)(a2 + 16);
  }
  else {
    float v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  unint64_t v10 = sub_24C6D7754((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  uint64_t *v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t sub_24C6D85EC(void *a1, long long *a2)
{
  unint64_t v4 = (char *)operator new(0x60uLL);
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  unint64_t v5 = sub_24C6730E8((void *)v4 + 2, a2);
  int v6 = v4[39];
  if (v6 >= 0) {
    float v7 = v5;
  }
  else {
    float v7 = (uint64_t *)*((void *)v4 + 2);
  }
  if (v6 >= 0) {
    unint64_t v8 = v4[39];
  }
  else {
    unint64_t v8 = *((void *)v4 + 3);
  }
  *((void *)v4 + 1) = sub_24C66F398((uint64_t)&v10, v7, v8);
  return sub_24C6D8490(a1, (uint64_t)v4);
}

void sub_24C6D8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6D869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6D86B4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_24C670C90(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_24C6D87F8(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_24C6D87D0(_Unwind_Exception *a1)
{
  sub_24C6D3F18(v1);
  _Unwind_Resume(a1);
}

void sub_24C6D87E4(_Unwind_Exception *a1)
{
  sub_24C6D3F18(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6D87F8(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_24C66F398((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint8x8_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x40uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v25 = 0;
  v25[1] = v10;
  sub_24C6D5A80(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v28 = *(void **)(*(void *)a1 + 8 * v10);
        float v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      long long v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      float v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *float v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  long long v28 = *(void **)(*(void *)a1 + 8 * v3);
  float v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *float v29 = *v28;
  void *v28 = v41[0];
LABEL_89:
  unint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24C6D8C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D8C4C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6D8C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D8C4C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6D8C4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(void *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_24C6D8CAC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_24C66F398((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  float v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)float v26 = 0;
  *((void *)v26 + 1) = v11;
  float v27 = v26 + 16;
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)float v27 = v29;
  }
  *((void *)v26 + 5) = &unk_26FEDD950;
  *((_DWORD *)v26 + 12) = 4;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((void *)v26 + 11) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  char v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C6D9128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_24C6D9140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C670E40((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6D915C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_24C66F398((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  float v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  float v27 = v26 + 2;
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_24C66E0A8(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)float v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_24C670C90(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  char v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_24C6D95A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D8C4C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6D95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6D8C4C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C6D95D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C6D95F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDBC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C6D9648(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v4 = *(char **)v2;
      int8x8_t v5 = (void *)*((void *)v2 + 5);
      if (v5)
      {
        *((void *)v2 + 6) = v5;
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3)
  {
    operator delete(v3);
  }
}

void sub_24C6D977C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6D98C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6D9E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C6DA394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C6DA8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_24C6DAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_24C6DB2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24C6DB4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DB574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DB5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DB888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      if (v25) {
        CFRelease(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void sub_24C6DB9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DBC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_24C6DBC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DBEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
  {
    operator delete(__p);
    if ((a17 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_24C6DC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DC90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DCA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DCBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DCEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (v21) {
    operator delete(v21);
  }
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_24C6DD39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    sub_24C66EA3C(&a17);
    _Unwind_Resume(a1);
  }
  sub_24C66EA3C(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6DD6F0(_Unwind_Exception *a1, int a2)
{
  sub_24C66DB7C((uint64_t)&v9);

  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  BOOL v6 = __cxa_begin_catch(a1);
  uint64_t v7 = sub_24C676DA0((uint64_t)v6, v2);
  __cxa_end_catch();
  return v7;
}

void sub_24C6DD774()
{
}

void sub_24C6DD91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x2532F8960](v20, 0x10B3C405D9687DFLL);
  _Unwind_Resume(a1);
}

void sub_24C6DDFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  sub_24C6717DC((uint64_t)&a29);
  sub_24C6717DC((uint64_t)&a37);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
    char v57 = *(void **)(v55 - 256);
    if (!v57) {
      goto LABEL_7;
    }
  }
  else
  {
    char v57 = *(void **)(v55 - 256);
    if (!v57)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  *(void *)(v55 - 248) = v57;
  operator delete(v57);
  goto LABEL_7;
}

void sub_24C6DE43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DE450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DE460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DE474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24C6DE48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_24C6DE540(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24C6DE558()
{
  uint64_t v1 = *(void *)v0;
  sub_24C6DE540(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

uint64_t sub_24C6DE598()
{
  return sub_24C72A978();
}

uint64_t sub_24C6DE5B0()
{
  return sub_24C72A988();
}

uint64_t sub_24C6DE5C8()
{
  return sub_24C72A968();
}

uint64_t sub_24C6DE5F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CSUModelCatalogVisualGenerationBaseLock_modelLock;
  swift_beginAccess();
  return sub_24C6DE644(v3, a1);
}

uint64_t sub_24C6DE644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24C6DE6AC(&qword_2697ED220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24C6DE6AC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24C6DE6F0(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CSUModelCatalogVisualGenerationBaseLock_modelLock;
  swift_beginAccess();
  sub_24C6DE74C(a1, v3);
  return swift_endAccess();
}

uint64_t sub_24C6DE74C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24C6DE6AC(&qword_2697ED220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_24C6DE7B4())()
{
  return j_j__swift_endAccess;
}

id sub_24C6DE810()
{
  uint64_t v1 = &v0[OBJC_IVAR___CSUModelCatalogVisualGenerationBaseLock_logger];
  uint64_t v2 = v0;
  v26[1] = v1;
  sub_24C72AAC8();
  float v31 = v2;
  uint64_t v3 = (uint64_t)&v2[OBJC_IVAR___CSUModelCatalogVisualGenerationBaseLock_modelLock];
  uint64_t v4 = sub_24C72AAA8();
  uint64_t v5 = *(void *)(v4 - 8);
  BOOL v6 = *(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v30 = v4;
  long long v28 = v6;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v3, 1, 1);
  sub_24C72A9E8();
  long long v29 = v26;
  uint64_t v7 = *(void *)(*(void *)(sub_24C6DE6AC(&qword_2697ED220) - 8) + 64);
  ((void (*)(void))MEMORY[0x270FA5388])();
  unint64_t v27 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v8 = (char *)v26 - v27;
  sub_24C6DE6AC(&qword_2697ED228);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_24C730600;
  uint64_t v11 = v34;
  uint64_t v10 = v35;
  unint64_t v12 = sub_24C6DEB80(v33, v34);
  *(void *)(v9 + 56) = v11;
  *(void *)(v9 + 64) = *(void *)(v10 + 8);
  uint8x8_t v13 = sub_24C6DEBC4((uint64_t *)(v9 + 32));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v13, v12, v11);
  sub_24C72AA98();
  uint64_t v14 = v30;
  unint64_t v15 = v27;
  v28(v8, 0, 1, v30);
  swift_beginAccess();
  sub_24C6DE74C((uint64_t)v8, v3);
  uint64_t v16 = swift_endAccess();
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = (char *)v26 - v15;
  sub_24C6DE644(v3, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v14) == 1)
  {
    sub_24C6DEC28((uint64_t)v17);
    unint64_t v18 = sub_24C72AAB8();
    os_log_type_t v19 = sub_24C72AB28();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = v31;
    if (v20)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_24C664000, v18, v19, "Could not aquire lock for model catalog resource!", v22, 2u);
      MEMORY[0x2532F9480](v22, -1, -1);
    }
  }
  else
  {
    uint64_t v21 = v31;

    sub_24C6DEC28((uint64_t)v17);
  }
  uint64_t v23 = (objc_class *)type metadata accessor for CSUModelCatalogVisualGenerationBaseLock(0);
  v32.receiver = v21;
  v32.super_class = v23;
  id v24 = objc_msgSendSuper2(&v32, sel_init);
  sub_24C6E085C(v33);
  return v24;
}

void *sub_24C6DEB80(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t *sub_24C6DEBC4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24C6DEC28(uint64_t a1)
{
  uint64_t v2 = sub_24C6DE6AC(&qword_2697ED220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CSUModelCatalogVisualGenerationBaseLock(uint64_t a1)
{
  return sub_24C6DFD20(a1, (uint64_t *)&unk_2697ED3E0);
}

id sub_24C6DECCC()
{
  return sub_24C6DFC3C(type metadata accessor for CSUModelCatalogVisualGenerationBaseLock);
}

uint64_t sub_24C6DED64()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CSUModelCatalogVisualGenerationBase_assetVersionNumber);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_24C6DEDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___CSUModelCatalogVisualGenerationBase_assetVersionNumber);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24C6DEE1C())()
{
  return j__swift_endAccess;
}

id sub_24C6DEE7C()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id sub_24C6DEEB0()
{
  id v1 = v0;
  sub_24C72AAC8();
  uint64_t v2 = &v1[OBJC_IVAR___CSUModelCatalogVisualGenerationBase_assetVersionNumber];
  *(void *)uint64_t v2 = 7104878;
  *((void *)v2 + 1) = 0xE300000000000000;

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for CSUModelCatalogVisualGenerationBase(0);
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t sub_24C6DF000@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  if (MEMORY[0x263F55FC8]) {
    BOOL v4 = MEMORY[0x263F55FD8] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || MEMORY[0x263F55FD0] == 0)
  {
    sub_24C6DFD58();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD000000000000032;
    *(void *)(v21 + 8) = 0x800000024C745060;
    *(unsigned char *)(v21 + 16) = 1;
    return swift_willThrow();
  }
  BOOL v6 = v2;
  unint64_t v76 = a2;
  sub_24C72A9E8();
  uint64_t v8 = sub_24C72AAA8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_24C6DE6AC(&qword_2697ED220);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  unint64_t v15 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *a1) + 0x60))(v13);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_24C6DEC28((uint64_t)v15);
    uint64_t v16 = sub_24C72AAB8();
    os_log_type_t v17 = sub_24C72AB28();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl(&dword_24C664000, v16, v17, "Tried to obtain an asset with a missing lock!", v18, 2u);
      MEMORY[0x2532F9480](v18, -1, -1);
    }

    sub_24C6DFD58();
    os_log_type_t v19 = (void (**)(void, void))swift_allocError();
    *(void *)uint64_t v20 = 0xD00000000000002DLL;
    *(void *)(v20 + 8) = 0x800000024C7450A0;
    *(unsigned char *)(v20 + 16) = 0;
    unint64_t v72 = v19;
    swift_willThrow();
  }
  else
  {
    uint64_t v71 = v6;
    float v75 = v65;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v23 = v8;
    uint64_t v24 = sub_24C6DE6AC(&qword_2697ED238);
    uint64_t v74 = v65;
    unint64_t v72 = *(void (***)(void, void))(v24 - 8);
    MEMORY[0x270FA5388](v24);
    float v26 = &v65[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
    sub_24C6DEB80(v79, v80);
    unint64_t v73 = (unint64_t)v26;
    sub_24C72AA68();
    if (!v3)
    {
      uint64_t v69 = v23;
      uint64_t v70 = v11;
      uint64_t v67 = v9;
      uint64_t v39 = sub_24C72AA38();
      uint64_t v40 = *(void *)(v39 - 8);
      MEMORY[0x270FA5388](v39);
      unint64_t v42 = &v65[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
      uint64_t v68 = v24;
      sub_24C72A9F8();
      uint64_t v43 = sub_24C72AA28();
      uint64_t v45 = v44;
      (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v42, v39);
      char v46 = v71;
      unint64_t v47 = (void *)MEMORY[0x263F8EED0];
      (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v71) + 0x68))(v43, v45);
      uint64_t v48 = v46;
      uint64_t v49 = sub_24C72AAB8();
      os_log_type_t v50 = sub_24C72AB28();
      int v51 = v50;
      if (os_log_type_enabled(v49, v50))
      {
        int v66 = v51;
        size_t v52 = v47;
        int v53 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v77 = v54;
        *(_DWORD *)int v53 = 136315138;
        uint64_t v55 = (*(uint64_t (**)(void))((*v52 & *v48) + 0x60))();
        uint64_t v81 = sub_24C6DFDAC(v55, v56, &v77);
        sub_24C72AB48();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24C664000, v49, (os_log_type_t)v66, "Model Catalog version for text and token encoders is %s", v53, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2532F9480](v54, -1, -1);
        MEMORY[0x2532F9480](v53, -1, -1);
      }
      else
      {
      }
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      uint64_t v59 = sub_24C72A9D8();
      uint64_t v60 = *(void *)(v59 - 8);
      MEMORY[0x270FA5388](v59);
      int v62 = &v65[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
      unint64_t v63 = v73;
      uint64_t v64 = sub_24C72AA08();
      MEMORY[0x2532F8060](v64);
      (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v62, v59);
      v72[1](v63, v57);
      (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v70, v69);
      return sub_24C6E085C(v79);
    }
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v23);
    unint64_t v72 = v3;
  }
  float v75 = (unsigned char *)sub_24C72AA88();
  unint64_t v76 = v65;
  uint64_t v74 = (unsigned char *)*((void *)v75 - 1);
  uint64_t v27 = *((void *)v74 + 8);
  MEMORY[0x270FA5388](v75);
  unint64_t v73 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v28 = &v65[-v73];
  sub_24C6DEB80(v79, v80);
  uint64_t v29 = sub_24C72AA58();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  objc_super v32 = &v65[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24C72AA78();
  sub_24C72AA48();
  (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v32, v29);
  uint64_t v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  sub_24C72AB68();
  swift_bridgeObjectRelease();
  uint64_t v77 = 0xD00000000000001ALL;
  unint64_t v78 = 0x800000024C7450D0;
  sub_24C6DEB80(v79, v80);
  sub_24C72AA18();
  sub_24C72AB08();
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_24C72AB08();
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = v74;
  uint64_t v35 = v75;
  (*((void (**)(unsigned char *, unsigned char *, unsigned char *))v74 + 2))(&v65[-v73], v28, v75);
  sub_24C72AAF8();
  sub_24C72AB08();
  swift_bridgeObjectRelease();
  uint64_t v36 = v77;
  unint64_t v37 = v78;
  sub_24C6DFD58();
  swift_allocError();
  *(void *)uint64_t v38 = v36;
  *(void *)(v38 + 8) = v37;
  *(unsigned char *)(v38 + 16) = 1;
  swift_willThrow();

  (*((void (**)(unsigned char *, unsigned char *))v34 + 1))(v28, v35);
  return sub_24C6E085C(v79);
}

uint64_t sub_24C6DFB58()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

id sub_24C6DFC24()
{
  return sub_24C6DFC3C(type metadata accessor for CSUModelCatalogVisualGenerationBase);
}

id sub_24C6DFC3C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for CSUModelCatalogVisualGenerationBase(uint64_t a1)
{
  return sub_24C6DFD20(a1, (uint64_t *)&unk_2697ED3F0);
}

uint64_t sub_24C6DFD20(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24C6DFD58()
{
  unint64_t result = qword_2697ED230;
  if (!qword_2697ED230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697ED230);
  }
  return result;
}

uint64_t sub_24C6DFDAC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_24C6DFE80(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_24C6E08AC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_24C6E08AC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_24C6E085C(v12);
  return v7;
}

uint64_t sub_24C6DFE80(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_24C72AB58();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_24C6E003C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_24C72AB88();
  if (!v8)
  {
    sub_24C72AB98();
    __break(1u);
LABEL_17:
    uint64_t result = sub_24C72ABA8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_24C6E003C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_24C6E00D4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_24C6E02B4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_24C6E02B4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24C6E00D4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_24C6E024C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_24C72AB78();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_24C72AB98();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_24C72AB18();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_24C72ABA8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_24C72AB98();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_24C6E024C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_24C6DE6AC(&qword_2697ED248);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24C6E02B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_24C6DE6AC(&qword_2697ED248);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_24C72ABA8();
  __break(1u);
  return result;
}

uint64_t destroy for ModelCatalogError(uint64_t a1)
{
  return sub_24C6E041C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_24C6E041C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s22CoreSceneUnderstanding17ModelCatalogErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24C6DE540(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ModelCatalogError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24C6DE540(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24C6E041C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for ModelCatalogError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ModelCatalogError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24C6E041C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelCatalogError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelCatalogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24C6E05C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_24C6E05CC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ModelCatalogError()
{
  return &type metadata for ModelCatalogError;
}

uint64_t sub_24C6E05E4()
{
  return type metadata accessor for CSUModelCatalogVisualGenerationBaseLock(0);
}

void sub_24C6E05EC()
{
  sub_24C72AAD8();
  if (v0 <= 0x3F)
  {
    sub_24C6E06D0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_24C6E06B8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CSUModelCatalogVisualGenerationBaseLock);
}

void sub_24C6E06D0()
{
  if (!qword_2697ED240)
  {
    sub_24C72AAA8();
    unint64_t v0 = sub_24C72AB38();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2697ED240);
    }
  }
}

uint64_t sub_24C6E0728()
{
  return type metadata accessor for CSUModelCatalogVisualGenerationBase(0);
}

uint64_t sub_24C6E0730()
{
  uint64_t result = sub_24C72AAD8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24C6E07C8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CSUModelCatalogVisualGenerationBase);
}

uint64_t sub_24C6E07E0()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t sub_24C6E0828()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t sub_24C6E085C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return MEMORY[0x270FA0520](*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_24C6E08AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_24C6E0914(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26FEDD398;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2532F8930](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_24C6E0978(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_26FEDC558;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD398;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_24C670E40(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = &unk_26FEDD398;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_24C670E40(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_24C714634((void *)(a1 + 96));
  sub_24C6E0AB8(a1, a3, a4, &v9);
  sub_24C71485C(v7, &v9);
  sub_24C71463C(&v9);
  return a1;
}

void sub_24C6E0A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C71463C((uint64_t *)va);
  sub_24C71463C(v5);
  sub_24C6E0914(v4);
  sub_24C6E0914(v3);
  uint64_t v7 = *v2;
  void *v2 = 0;
  if (v7) {
    sub_24C6E4A54((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sub_24C6E0AB8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8 = a2;
  unint64_t v9 = a3;
  uint64_t result = sub_24C6E1160(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_24C71463C(a4);
    uint64_t result = sub_24C7129C0(&v8, 4uLL, a4);
    if (!*a4)
    {
      sub_24C71463C(a4);
      uint64_t result = sub_24C6E1160(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_24C71463C(a4);
        uint64_t result = sub_24C7129C0(&v8, 4uLL, a4);
        if (!*a4)
        {
          sub_24C71463C(a4);
          int v7 = 0;
          uint64_t result = sub_24C6E135C(v8, v9, &v7, a4);
          if (!*a4)
          {
            sub_24C71463C(a4);
            uint64_t result = sub_24C7129C0(&v8, 4uLL, a4);
            if (!*a4)
            {
              sub_24C71463C(a4);
              sub_24C6E1558();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_24C6E1120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C6E1660((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6E1160@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    unsigned __int8 v6 = (void *)sub_24C6E3D44((uint64_t)v8);
    sub_24C689D44(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_24C689D44(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v8, (uint64_t)") [", 3);
    sub_24C689D44(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_24C689D44(v8, (uint64_t)"] ", 2);
    sub_24C6E15D0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2532F88A0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_24C714634(a4);
  }
}

void sub_24C6E1344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_24C6E135C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    unsigned __int8 v6 = (void *)sub_24C6E3D44((uint64_t)v8);
    sub_24C689D44(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_24C689D44(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v8, (uint64_t)") [", 3);
    sub_24C689D44(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_24C689D44(v8, (uint64_t)"] ", 2);
    sub_24C6E15D0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2532F88A0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_24C714634(a4);
  }
}

void sub_24C6E1540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6E1558()
{
}

void sub_24C6E15AC(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_24C6E15D0(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sub_24C7147A0(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_24C6E1644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6E1660(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 8 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](a1 + 120);
  return a1;
}

void *sub_24C6E1768(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1
    || (uint64_t result = __dynamic_cast(v1, (const struct __class_type_info *)&unk_26FEDBD30, (const struct __class_type_info *)&unk_26FEDBC80, 16)) == 0)
  {
    char v7 = 1;
    uint64_t v3 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_24C689D44(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = sub_24C689D44(v4, (uint64_t)") [", 3);
    unsigned __int8 v6 = sub_24C689D44(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_24C689D44(v6, (uint64_t)"] ", 2);
    sub_24C6E3EDC(&v7);
    return 0;
  }
  return result;
}

void sub_24C6E184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_24C6E1860(void *a1)
{
  *a1 = &unk_26FEDC558;
  sub_24C71463C(a1 + 12);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = &unk_26FEDD398;
  uint64_t v2 = a1[10];
  if (v2)
  {
    MEMORY[0x2532F8930](v2, 0x1000C8052888210);
    a1[10] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = &unk_26FEDD398;
  uint64_t v3 = a1[6];
  if (v3)
  {
    MEMORY[0x2532F8930](v3, 0x1000C8052888210);
    a1[6] = 0;
  }
  int v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4) {
    sub_24C6E4A54((uint64_t)(a1 + 2), v4);
  }
  return a1;
}

const char *sub_24C6E1948(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  else {
    return "<unk>";
  }
}

const char *sub_24C6E19CC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  }
  else {
    return "<s>";
  }
}

const char *sub_24C6E1A50(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  }
  else {
    return "</s>";
  }
}

const char *sub_24C6E1AD4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  }
  else {
    return "<pad>";
  }
}

uint64_t sub_24C6E1B58(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  sub_24C6E1BDC(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    sub_24C6E1BDC(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t sub_24C6E1BDC(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_24C6E1C8C@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_24C712578() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_24C689D44(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    int v4 = sub_24C689D44(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_24C689D44(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    sub_24C689D44(v7, (uint64_t)"Not implemented.", 16);
    sub_24C6E3EDC(&v9);
  }
  return sub_24C7147A0(a1, 12, "Not implemented.", 16);
}

void sub_24C6E1D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_24C6E1D78@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_24C712578() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_24C689D44(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    int v4 = sub_24C689D44(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_24C689D44(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    sub_24C689D44(v7, (uint64_t)"Not implemented.", 16);
    sub_24C6E3EDC(&v9);
  }
  return sub_24C7147A0(a1, 12, "Not implemented.", 16);
}

void sub_24C6E1E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_24C6E1E64(uint64_t a1)
{
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  os_log_type_t v50 = &v51;
  unint64_t v47 = &v48;
  uint64_t v48 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  sub_24C6E4AD0(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_24C7147A0(&v53, 13, "unk is not defined.", 19);
      sub_24C71485C((uint64_t *)(a1 + 96), &v53);
    }
    else
    {
      uint64_t v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        uint64_t v25 = &unk_2697ED4C0;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            sub_24C6E5064((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sub_24C6E2734(a1 + 24, &v50, (uint64_t)&v53),
              sub_24C71485C((uint64_t *)(a1 + 96), &v53),
              sub_24C71463C((uint64_t *)&v53),
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
              uint64_t v26 = v53,
              sub_24C71463C((uint64_t *)&v53),
              !v26))
        {
          if (!v49
            || (sub_24C6E2734(a1 + 56, &v47, (uint64_t)&v53),
                sub_24C71485C((uint64_t *)(a1 + 96), &v53),
                sub_24C71463C((uint64_t *)&v53),
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
                uint64_t v27 = v53,
                sub_24C71463C((uint64_t *)&v53),
                !v27))
          {
            sub_24C6E2C18();
          }
        }
        goto LABEL_69;
      }
      sub_24C71485C((uint64_t *)(a1 + 96), &v53);
    }
LABEL_68:
    sub_24C71463C((uint64_t *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_24C6E3FB8(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sub_24C7147A0(&v53, 13, "piece must not be empty.", 24);
        sub_24C71485C((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    uint64_t v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    sub_24C6E4D88(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      sub_24C6E4FE0(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      uint64_t v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        uint64_t v20 = &unk_2697ED4C0;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          unint64_t v37 = (const char *)&v53;
        }
        else {
          unint64_t v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sub_24C7147A0(&v42, 13, v37, v40);
        sub_24C71485C((uint64_t *)(a1 + 96), &v42);
        sub_24C71463C(&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        uint64_t v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        uint64_t v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sub_24C6E25E4(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        uint64_t v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          unint64_t v37 = (const char *)&v53;
        }
        else {
          unint64_t v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_24C7147A0(&v53, 13, "unk is already defined.", 23);
        sub_24C71485C((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  uint64_t v30 = &v53;
  sub_24C6E4F58((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    uint64_t v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      uint64_t v31 = (const void *)v28;
    }
    else {
      uint64_t v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    objc_super v32 = (const char *)&v53;
  }
  else {
    objc_super v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sub_24C7147A0(&v41, 13, v32, v33);
  sub_24C71485C((uint64_t *)(a1 + 96), &v41);
  sub_24C71463C((uint64_t *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    uint64_t v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  sub_24C6822A0((uint64_t)&v45, v46[0]);
  sub_24C6822A0((uint64_t)&v47, v48);
  sub_24C6822A0((uint64_t)&v50, v51);
}

void sub_24C6E24CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sub_24C71463C(&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_24C6822A0((uint64_t)&a19, a20);
  sub_24C6822A0((uint64_t)&a22, a23);
  sub_24C6822A0((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6E25E4(void *__src, size_t __len)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2697ED280, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2697ED280))
  {
    sub_24C6E352C();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  int v4 = (void *)qword_2697ED288;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = sub_24C6E5194(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_24C6E2704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_24C6E2734@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    long long v36 = 0;
    std::string __p = 0;
    objc_super v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_24C667470();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)sub_24C6E4BEC((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        uint64_t v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          uint64_t v13 = (char *)v34;
        }
        uint64_t v34 = v12;
        uint64_t v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v35 = v5;
        size_t v7 = v6 + 8;
      }
      uint64_t v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_24C667470();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)sub_24C6E5298((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          uint64_t v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        std::string __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)objc_super v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      objc_super v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        sub_24C6E3614(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }
  return sub_24C7147A0(a3, 13, "no pieces are loaded.", 21);
}

void sub_24C6E2BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6E2C18()
{
}

void sub_24C6E2C6C(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_24C6E2C90(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sub_24C6E9CF4(*(void *)(a1 + 16), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_24C71295C(a2);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sub_24C71295C(a2);
  uint64_t v26 = a1 + 64;
  uint64_t v24 = *(void *)(a1 + 64);
  int v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_24C6E2F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6E2FD0(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    uint64_t v43 = __s1;
    while (1)
    {
      int v44 = asc_24C74573E[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_24C667470();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)sub_24C6E515C((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            *int64_t v54 = v43;
            v54[1] = 0;
            unint64_t v56 = (char *)*a5;
            uint64_t v55 = (char *)a5[1];
            uint64_t v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              uint64_t v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            unsigned char *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = sub_24C6E515C((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    void *v10 = v6;
    v10[1] = 0;
    uint64_t v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_24C74573E[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_24C667470();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_24C6E515C((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          void *v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          uint64_t v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_24C667470();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v34 = (char *)sub_24C6E515C((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          char *v36 = v6;
          v36[1] = 0;
          uint64_t v38 = (char *)*a5;
          unint64_t v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a5;
          }
          uint64_t v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *uint64_t v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_24C6E3418(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6E344C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = a1;
  return sub_24C6E347C("<0x%02X>", &v3, a2);
}

uint64_t sub_24C6E347C@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_24C6E3510(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6E352C()
{
}

void sub_24C6E35F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6E3614(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  uint64_t v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  sub_24C6E52D0(&v6, v12);
}

void sub_24C6E3728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6E3740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24C714858(a2, a1 + 96);
}

uint64_t sub_24C6E374C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_24C6E3754@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_24C712578();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_24C689D44(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)") ", 2);
    int v6 = sub_24C689D44(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_24C689D44(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_24C689D44(v7, (uint64_t)") ", 2);
    sub_24C689D44(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_24C6E3EDC(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_24C6E381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_24C6E3830@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_24C712578();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_24C689D44(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)") ", 2);
    int v6 = sub_24C689D44(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_24C689D44(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_24C689D44(v7, (uint64_t)") ", 2);
    sub_24C689D44(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_24C6E3EDC(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_24C6E38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_24C6E390C(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((int)sub_24C712578() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v2 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_24C689D44(v2, (uint64_t)"(", 1);
    unsigned __int8 v3 = (void *)std::ostream::operator<<();
    int v4 = sub_24C689D44(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)"LOG(", 4);
    int v6 = sub_24C689D44(v5, (uint64_t)"ERROR", 5);
    long long v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    sub_24C689D44(v7, (uint64_t)"Not implemented.", 16);
    sub_24C6E3EDC(&__p);
  }
  std::string __p = 0;
  long long v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_24C6E46B8((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_24C6E3A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  sub_24C6E4924(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_24C6E3A9C()
{
  if ((int)sub_24C712578() <= 2)
  {
    char v7 = 0;
    unint64_t v0 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_24C689D44(v0, (uint64_t)"(", 1);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_24C689D44(v1, (uint64_t)") ", 2);
    unsigned __int8 v3 = sub_24C689D44(v2, (uint64_t)"LOG(", 4);
    int v4 = sub_24C689D44(v3, (uint64_t)"ERROR", 5);
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)") ", 2);
    sub_24C689D44(v5, (uint64_t)"Not implemented.", 16);
    sub_24C6E3EDC(&v7);
  }
  return 0.0;
}

void sub_24C6E3B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_24C6E3B70()
{
  return 0;
}

uint64_t sub_24C6E3B78()
{
  return 0;
}

uint64_t sub_24C6E3B80()
{
  return 0;
}

uint64_t sub_24C6E3B88()
{
  return 0;
}

uint64_t sub_24C6E3B90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t sub_24C6E3BB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_24C6E3BE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_24C6E3C10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_24C6E3C38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

uint64_t sub_24C6E3C60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))();
}

uint64_t sub_24C6E3C88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_24C6E3CB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))();
}

uint64_t sub_24C6E3CD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sub_24C6E3D08(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_24C6E3D44(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_24C6E3EB4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_24C6E3EDC(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    sub_24C7144E4();
  }
  return a1;
}

void sub_24C6E3F9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_24C6E3FB8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = sub_24C716A4C(v8, "CHECK failed: (index) >= (0): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_24C716A4C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_24C6E4078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6E4098(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_24C6E4324(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_24C6E4364(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 4sub_24C670E40(&a9, 0) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_24C6E440C(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *std::string::size_type v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_24C6E4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_24C6E4658(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_24C6E4324(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_24C66F398((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_24C6E4364(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_24C6E440C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_24C6E44FC(a1, prime);
    }
  }
}

void sub_24C6E44FC(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_24C66DB48();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_24C6E4658(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_24C6E46B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_24C6E4780((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_24C6E489C((uint64_t)v8);
  return v4;
}

void sub_24C6E476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_24C6E4780(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_24C6E4800(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24C6E47E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24C6E4800(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_24C667470();
  }
  uint64_t result = (char *)sub_24C6E4854((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_24C6E4854(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_24C66DB48();
  }
  return operator new(24 * a2);
}

uint64_t sub_24C6E489C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6E48D4(a1);
  }
  return a1;
}

void sub_24C6E48D4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_24C6E4924(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_24C6E4978((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_24C6E4978(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_24C6E49D0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26FEDD398;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2532F8930](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x2532F8960);
}

void sub_24C6E4A54(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x2532F8960);
  }
}

void *sub_24C6E4AD0(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6E4BA4(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_24C6E4C24(&v13, a2);
        }
        else {
          sub_24C6E4CD8((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_24C6E4BA4(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_24C667470();
  }
  uint64_t result = sub_24C6E4BEC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_24C6E4BEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_24C66DB48();
  }
  return operator new(8 * a2);
}

void *sub_24C6E4C24(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_24C6E4CD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_24C6E4D88(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_24C6E4E14((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_24C6E4EB4(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_24C6E4E14(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_24C6E4F0C(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_24C6E4F0C(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_24C6E4EB4(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_24C681E28(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_24C6E4F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t sub_24C6E4F58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_24C6E4FE0(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_24C6E4E14((uint64_t)a1, &v9, a2);
  size_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    size_t v7 = (uint64_t **)v5;
    size_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_24C6E4EB4(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_24C6E5064@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_24C6E515C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_24C66DB48();
  }
  return operator new(16 * a2);
}

unsigned __int8 *sub_24C6E5194(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_24C6E4324((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_24C6E4364(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_24C6E5298(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_24C66DB48();
  }
  return operator new(4 * a2);
}

void sub_24C6E52D0(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    sub_24C6E5890(a1, a2, (uint64_t *)v2);
  }
  sub_24C6E5CD8((uint64_t)a1, a2);
}

void sub_24C6E53B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_24C6E53C4(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2532F8930](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_24C6E5410(uint64_t *a1)
{
  sub_24C6E545C((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_24C6E545C(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_24C6E54BC(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_24C6E54BC(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_24C6E55FC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x2532F8960);
}

const char *sub_24C6E5634(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_24C6E564C(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2532F8930](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_24C6E5698(uint64_t *a1)
{
  sub_24C6E56E4(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_24C6E56E4(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_24C6E5754((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_24C6E5754(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_24C6E5890(void (**a1)(unint64_t, uint64_t), unint64_t *a2, uint64_t *a3)
{
  sub_24C6E6740(a3);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      sub_24C6E6814(a3, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  sub_24C6E6C54((uint64_t)a3, 0);
  uint64_t v13 = *a3;
  char v14 = *(unsigned char *)(*a3 + 8);
  int v15 = *(_DWORD *)*a3;
  if (v14) {
    int v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  *(_DWORD *)a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(unsigned char *)a3[6] = v14;
  sub_24C6E6520(a3);
  sub_24C6E5FBC(a3 + 15);
  sub_24C6E5FBC(a3 + 18);
  sub_24C6E5FBC(a3 + 21);
  sub_24C6E70AC();
}

void sub_24C6E59B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_24C6E5754(a1 + 8, v4);
  }
  operator new[]();
}

void sub_24C6E5CD8(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_24C6E5754(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *sub_24C6E5F80(uint64_t *a1)
{
  sub_24C6E5FBC(a1);
  return sub_24C6E61A4(a1);
}

uint64_t sub_24C6E5FBC(uint64_t *a1)
{
  sub_24C6E6008((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_24C6E6008(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_24C6E6068(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_24C6E6068(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_24C6E61A4(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2532F8930](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_24C6E61F0(uint64_t *a1)
{
  sub_24C6E624C(a1);
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2532F8930](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_24C6E61A4(a1);
}

uint64_t sub_24C6E624C(uint64_t *a1)
{
  sub_24C6E5FBC(a1);
  uint64_t result = a1[3];
  if (result)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_24C6E6290(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2532F8930](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_24C6E62DC(uint64_t *a1)
{
  sub_24C6E6328(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_24C6E6328(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_24C6E6398((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_24C6E6398(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_24C6E64D4(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2532F8930](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_24C6E6520(uint64_t *a1)
{
  sub_24C6E656C(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2532F8930](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *sub_24C6E656C(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    sub_24C6E65F0((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void sub_24C6E65F0(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *sub_24C6E6740(uint64_t *a1)
{
  int v7 = 0;
  sub_24C6E6A84(a1 + 15, 0x400uLL, &v7);
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --a1[22];
  }
  else
  {
    sub_24C6E6B0C(a1);
  }
  sub_24C6E6B64(a1 + 9);
  sub_24C6E6BB4(a1 + 3);
  uint64_t v4 = a1[7];
  if (v4 == a1[8]) {
    sub_24C6E54BC((uint64_t)(a1 + 6), v4 + 1);
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(unsigned char *)(*a1 + 8) = -1;
  int v6 = 0;
  return sub_24C6E6C00(a1 + 18, &v6);
}

void *sub_24C6E6814(void *result, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &unk_26FEDD3B8;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_26FEDBFD0, (void (*)(void *))std::exception::~exception);
  }
  int v5 = a4;
  int v7 = result;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *result;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(unsigned char *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return result;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 1sub_24C670E40(&a9, 0) = 1;
  uint64_t result = (void *)sub_24C6E6C54((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = *(unsigned char *)(a2 + v8);
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        sub_24C6E6B0C(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      long long v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      int *v19 = v21;
      uint64_t result = sub_24C6E6C00(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_24C6E6A84(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    sub_24C6E6068((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *sub_24C6E6B0C(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_24C6E65F0((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *sub_24C6E6B64(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_24C6E6C00(result, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

void *sub_24C6E6BB4(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_24C6E6398((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *sub_24C6E6C00(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_24C6E6068((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_24C6E6C54(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(result + 120);
    int v5 = (void *)(result + 24);
    int v6 = (void *)(result + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        sub_24C6E5FBC(v35);
        int v38 = 0;
        sub_24C6E6A84(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      uint64_t result = sub_24C6E6F40((uint64_t *)v2, v4, &v37);
      if (result)
      {
        unsigned int v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        sub_24C6E6B64((void *)(v2 + 72));
        uint64_t result = (uint64_t)sub_24C6E6BB4((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          sub_24C6E54BC(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          uint64_t result = (uint64_t)sub_24C6E6C00((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v27 + 12 * v28;
      int v31 = *(unsigned __int8 *)(v30 + 8);
      int v32 = *(_DWORD *)v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_24C6E6F40(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = a1[15];
  unint64_t v14 = a1[16];
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    uint64_t v20 = a1[3];
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void sub_24C6E70AC()
{
}

unsigned int *sub_24C6E71F0(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_26FEDD3B8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_26FEDBFD0, (void (*)(void *))std::exception::~exception);
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  uint64_t *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_24C6E7278(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int v8 = a2 + 9;
  unint64_t v9 = *(unsigned int *)(a2[3] + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * (sub_24C6E78B4(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (BOOL v15 = (v13 ^ a4) == 0) : (BOOL v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[6] + v10))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_24C6E71F0((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)sub_24C6E7604(a1, (uint64_t)a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)sub_24C6E78B4(v8, v10);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(a2[6] + v10)) {
        uint64_t result = (unsigned int *)sub_24C6E7278(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v1sub_24C670E40(&a9, 0) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_24C6E73F0(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_24C6E56E4((void *)(a1 + 8), (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*(void *)(a1 + 16) <= v7)
        {
          sub_24C6E73F0(a1);
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13) {
            *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    sub_24C6E56E4(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v2sub_24C670E40(&a9, 0) = v3 + 255;
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v2sub_24C670E40(&a9, 0) = *(_DWORD *)(v17 + v22);
  LOWORD(v2sub_24C670E40(&a9, 0) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_24C6E7604(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)(a1 + 40);
  sub_24C6E545C(a1 + 40, 0);
  unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*(void *)(a2 + 48) + v10);
      sub_24C6E7918(v8, &v35);
      int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 72);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(unsigned __int8 **)(a1 + 40);
    int v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *(void *)(a1 + 48);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_24C6E71F0((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(void *)(a1 + 48))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*(void *)(a1 + 40) + v24);
      if (*(void *)(a1 + 16) <= v26) {
        sub_24C6E73F0(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == v26)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 32);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(a2 + 48) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_24C6E78B4(void *a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *sub_24C6E7918(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_24C6E54BC((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

uint64_t *sub_24C6E796C(uint64_t *a1)
{
  sub_24C6E6520(a1);
  sub_24C6E62DC(a1 + 3);
  sub_24C6E5410(a1 + 6);
  sub_24C6E624C(a1 + 9);
  sub_24C6E5FBC(a1 + 15);
  sub_24C6E5FBC(a1 + 18);
  sub_24C6E5FBC(a1 + 21);
  a1[24] = 0;
  sub_24C6E5F80(a1 + 21);
  sub_24C6E5F80(a1 + 18);
  sub_24C6E61A4(a1 + 15);
  sub_24C6E61F0(a1 + 9);
  sub_24C6E53C4(a1 + 6);
  sub_24C6E6290(a1 + 3);
  return sub_24C6E64D4(a1);
}

uint64_t sub_24C6E7A3C(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = sub_24C6E7BA4(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          sub_24C6E7A3C(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_24C6E7BA4(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  sub_24C6E545C(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &unk_26FEDD3B8;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_26FEDBFD0, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_24C6E7918(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_24C6E71F0((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        sub_24C6E73F0(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_24C6E7F4C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_24C6E5698((uint64_t *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x2532F8930](v3, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_24C6E5410((uint64_t *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x2532F8930](v4, 0x1000C8052888210);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_24C6E53C4((uint64_t *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x2532F8930](v5, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_24C6E564C(v2);
  return a1;
}

void *sub_24C6E8008(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6E8080(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24C6E8064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24C6E8080(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_24C667470();
  }
  uint64_t result = (char *)sub_24C6E515C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_24C6E80C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26FEDC410;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 4sub_24C670E40(&a9, 0) = 0;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 245);
  sub_24C714634((void *)(a1 + 56));
  unint64_t v5 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_24C6E81A8((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_24C6E815C(_Unwind_Exception *a1)
{
  sub_24C71463C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6E81A8(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sub_24C6E8628(a2, a3, v6, &v5, &v4);
    sub_24C71485C(v3 + 7, &v4);
    uint64_t result = sub_24C71463C(&v4);
    if (!v3[7]) {
      operator new();
    }
  }
  return result;
}

void sub_24C6E8308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C71463C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6E8324(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDC410;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 4sub_24C670E40(&a9, 0) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  sub_24C714634((void *)(a1 + 56));
  unint64_t v4 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_24C6E81A8((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_24C6E83B8(_Unwind_Exception *a1)
{
  sub_24C71463C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6E8408(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *a1 = (uint64_t)&unk_26FEDC410;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = 0;
  unint64_t v7 = a1 + 7;
  sub_24C714634(a1 + 7);
  int v11 = 0;
  sub_24C6E135C(a3, a4, &v11, &v10);
  sub_24C71485C(v7, &v10);
  sub_24C71463C(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sub_24C71463C(&v10);
  if (!v8)
  {
    *((unsigned char *)a1 + 48) = v11 != 0;
    sub_24C6E81A8(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_24C6E8510(_Unwind_Exception *a1)
{
  sub_24C71463C(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_24C6E8578(void *a1)
{
  *a1 = &unk_26FEDC410;
  sub_24C71463C(a1 + 7);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_24C6E85F0(void *a1)
{
  sub_24C6E8578(a1);
  JUMPOUT(0x2532F8960);
}

void *sub_24C6E8628@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sub_24C714634(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sub_24C7147A0(a5, 13, v10, v11);
}

void *sub_24C6E8690@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6 = a3;
  long long v84 = (void **)a5;
  long long v85 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sub_24C714634(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)a1 + 24))(a1);
  if (*a6) {
    return result;
  }
  sub_24C71463C(a6);
  int v83 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sub_24C6E8FA8(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32) {
        goto LABEL_13;
      }
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    uint64_t v11 = a6;
    return sub_24C714634(v11);
  }
LABEL_13:
  uint64_t v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_24C6E9190(v84, 3 * v6);
  uint64_t v81 = "▁";
  std::string::size_type v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_24C6E9238((uint64_t)v80);
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sub_24C6E8FA8(a1, a2, v6, (uint64_t)&v74);
    int v13 = v74;
    uint64_t v14 = v75;
    if (v12)
    {
      if (!v75) {
        goto LABEL_66;
      }
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14) {
          goto LABEL_66;
        }
      }
    }
    else if (!v75)
    {
      int v12 = 0;
      goto LABEL_66;
    }
    unint64_t v72 = a2;
    unint64_t v73 = v6;
    uint64_t v15 = 0;
    do
    {
      int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (std::string::size_type i = 0; i < v82; ++i)
          {
            unint64_t v19 = v84;
            uint64_t v20 = v83;
            uint64_t v21 = (char *)v84[1];
            int v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              int v24 = (char *)*v84;
              uint64_t v25 = (v21 - (unsigned char *)*v84) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v27 = v22 - v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unsigned int v29 = (char *)sub_24C6E4BEC((uint64_t)(v84 + 2), v28);
                int v24 = (char *)*v19;
                uint64_t v21 = (char *)v19[1];
              }
              else
              {
                unsigned int v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v20;
              uint64_t v23 = v30 + 8;
              while (v21 != v24)
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              unsigned int *v19 = v30;
              v19[1] = v23;
              _OWORD v19[2] = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v83;
              uint64_t v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        unsigned int v32 = v84;
        uint64_t v33 = v83;
        int v34 = (char *)v84[1];
        char v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          uint64_t v37 = (char *)*v84;
          uint64_t v38 = (v34 - (unsigned char *)*v84) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
LABEL_116:
          }
            sub_24C667470();
          uint64_t v40 = v35 - v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_24C6E4BEC((uint64_t)(v84 + 2), v41);
            uint64_t v37 = (char *)*v32;
            int v34 = (char *)v32[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = &v42[8 * v38];
          *(void *)uint64_t v43 = v33;
          int v36 = v43 + 8;
          while (v34 != v37)
          {
            uint64_t v44 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          char *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)int v34 = v83;
          int v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    int v12 = v13[v14 - 1] == 32;
    a2 = v72;
    unint64_t v6 = v73;
LABEL_66:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v45) {
      size_t v46 = v82;
    }
    else {
      size_t v46 = 1;
    }
    if (v45) {
      int v47 = v81;
    }
    else {
      int v47 = " ";
    }
    while (1)
    {
      uint64_t v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        std::string::size_type size = v85->__r_.__value_.__l.__size_;
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v50 = v85;
        std::string::size_type size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46) {
          goto LABEL_81;
        }
      }
      BOOL v52 = size >= v46;
      std::string::size_type v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46)) {
        break;
      }
LABEL_81:
      if ((v49 & 0x80) != 0) {
        std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
      }
      if (v49 - v46 < 0)
      {
        LODWORD(v74) = 13;
        size_t v65 = (void *)sub_24C6E3D44((uint64_t)&v75);
        sub_24C689D44(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_24C689D44(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&v75, (uint64_t)") [", 3);
        sub_24C689D44(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_24C689D44(&v75, (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)&v74, v71);
        goto LABEL_112;
      }
      int v83 = *((void *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_24C6E946C((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_24C6E9238((uint64_t)v80);
  }
  int64_t v54 = v84;
  uint64_t v55 = v83;
  unint64_t v56 = (char *)v84[1];
  uint64_t v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    uint64_t v59 = (char *)*v84;
    uint64_t v60 = (v56 - (unsigned char *)*v84) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v62 = v57 - v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      uint64_t v64 = (char *)sub_24C6E4BEC((uint64_t)(v84 + 2), v63);
      uint64_t v59 = (char *)*v54;
      unint64_t v56 = (char *)v54[1];
    }
    else
    {
      uint64_t v64 = 0;
    }
    int v66 = &v64[8 * v60];
    uint64_t v67 = &v64[8 * v63];
    *(void *)int v66 = v55;
    uint64_t v58 = v66 + 8;
    while (v56 != v59)
    {
      uint64_t v68 = *((void *)v56 - 1);
      v56 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    *int64_t v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)unint64_t v56 = v83;
    uint64_t v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v69 = v85->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v84[1] - (unsigned char *)*v84) >> 3 == v69 + 1)
  {
    uint64_t v11 = (void *)v71;
    return sub_24C714634(v11);
  }
  LODWORD(v74) = 13;
  uint64_t v70 = (void *)sub_24C6E3D44((uint64_t)&v75);
  sub_24C689D44(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_24C689D44(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_24C689D44(&v75, (uint64_t)") [", 3);
  sub_24C689D44(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_24C689D44(&v75, (uint64_t)"] ", 2);
  sub_24C6E15D0((unsigned int *)&v74, v71);
LABEL_112:
  uint64_t v75 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v75 + *(void *)(v75 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v76 = MEMORY[0x263F8C318] + 16;
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2532F88A0](&v79);
}

void sub_24C6E8F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_24C6E1660((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_24C6E8FA8@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[63] = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v6 = a2;
    size_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, uint64_t result = sub_24C6E9560(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      unint64_t v9 = (int)result;
      if (a3 < (int)result) {
        unint64_t v9 = a3;
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8);
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)(v10 + 16);
      uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        uint64_t v15 = v6[v11];
        uint64_t v16 = v14 ^ v15;
        unsigned int v17 = v13[v16];
        if ((v17 & 0x800000FF) != v15) {
          break;
        }
        uint64_t v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            unint64_t v18 = &v27[2 * v12 - 1];
            *(_DWORD *)unint64_t v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12) {
        goto LABEL_24;
      }
      unint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = v27;
      int v22 = v27;
      do
      {
        unint64_t v24 = *v22;
        v22 += 2;
        unint64_t v23 = v24;
        if (!v19 || v23 > v19)
        {
          int v20 = *((_DWORD *)v21 - 2);
          unint64_t v19 = v23;
        }
        uint64_t v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        unint64_t v6 = (char *)(*(void *)(v7 + 16) + v20);
        uint64_t result = strlen(v6);
      }
      else
      {
LABEL_24:
        uint64_t v26 = 0;
        BOOL v25 = sub_24C712588((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25) {
          LODWORD(v19) = v26;
        }
        else {
          LODWORD(v19) = 1;
        }
        if (v25) {
          uint64_t result = (int)v26;
        }
        else {
          uint64_t result = 3;
        }
        if (!v25) {
          unint64_t v6 = (char *)&unk_24C730794;
        }
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_24C6E9190(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_24C667470();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_24C6E4BEC(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_24C6E9238(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        size_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_24C6E4BEC(v5 + 16, v14);
            uint64_t v10 = *(void **)v5;
            size_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          unint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *size_t v7 = v6;
          unint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    int v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        sub_24C667470();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)sub_24C6E4BEC(v18 + 16, v27);
        unint64_t v23 = *(void **)v18;
        int v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      unsigned int v29 = &v28[8 * v24];
      uint64_t v30 = &v28[8 * v27];
      *(void *)unsigned int v29 = v19;
      int v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v20 = v19;
      int v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void sub_24C6E946C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_24C6E9DDC((char **)a1, a2 - v2);
  }
}

void sub_24C6E949C(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  nullsub_24(&v2);
  sub_24C71463C(&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_24C6E9524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_24C71463C(&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C6E9560(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  v23[127] = *MEMORY[0x263EF8340];
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_24C74573E[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sub_24C6E9730(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  _DWORD *v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
}

void sub_24C6E9828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C6E9864(void *result, void *a2)
{
  void *result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    int v22 = 0;
    sub_24C6E9B48(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_24C667470();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)sub_24C6E4BEC((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          uint64_t v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          int v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_24C6E9AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  uint64_t *v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6E9B48(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_24C667470();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_24C6E4BEC(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_24C6E9BF4(void *result, uint64_t a2, uint64_t a3)
{
  void *result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_24C6E9CD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_24C6E9EF8(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C6E9CF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_24C6E9D30(a2, *(void **)(*(void *)a1 + 16), 4 * *(void *)(*(void *)a1 + 8));
  }
  else {
    return sub_24C6698FC(a2, "");
  }
}

uint64_t sub_24C6E9D1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_24C670E40(&a9, 0) = a2;
  return result;
}

uint64_t sub_24C6E9D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24C714858(a2, a1 + 56);
}

void *sub_24C6E9D30(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void sub_24C6E9DDC(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  size_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_24C667470();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_24C6E4BEC(v4, v13);
      size_t v8 = *a1;
      size_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_24C6E9EF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_24C6E9F1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v3 = *(_DWORD **)(a1 + 80);
  }
  else {
    uint64_t v3 = &unk_2697ED4C0;
  }
  switch(v3[68])
  {
    case 1:
      sub_24C6EA088();
    case 2:
      sub_24C6EA100();
    case 3:
      sub_24C6EA178();
    case 4:
      sub_24C6EA1F0();
    default:
      uint64_t result = sub_24C712578();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        int64_t v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
        sub_24C689D44(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        size_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
        size_t v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
        sub_24C689D44(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        uint64_t result = (uint64_t)sub_24C6E3EDC(&v11);
      }
      *a2 = 0;
      return result;
  }
}

void sub_24C6EA064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6E3EDC(va);
  _Unwind_Resume(a1);
}

void sub_24C6EA088()
{
}

void sub_24C6EA0DC(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_24C6EA100()
{
}

void sub_24C6EA154(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_24C6EA178()
{
}

void sub_24C6EA1CC(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_24C6EA1F0()
{
}

void sub_24C6EA244(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6EA268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v14[1] = a2;
  _OWORD v14[2] = a3;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    sub_24C6EA46C();
  }
  if (!v6) {
    sub_24C6EA3EC();
  }
  uint64_t result = sub_24C712578();
  if ((int)result <= 2)
  {
    LOBYTE(v14[0]) = 0;
    size_t v8 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
    sub_24C689D44(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    uint64_t v11 = sub_24C689D44(v10, (uint64_t)"LOG(", 4);
    uint64_t v12 = sub_24C689D44(v11, (uint64_t)"ERROR", 5);
    unint64_t v13 = sub_24C689D44(v12, (uint64_t)") ", 2);
    sub_24C689D44(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    uint64_t result = (uint64_t)sub_24C6E3EDC(v14);
  }
  *a4 = 0;
  return result;
}

void sub_24C6EA3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6E3EDC(va);
  _Unwind_Resume(a1);
}

void sub_24C6EA3EC()
{
}

void sub_24C6EA448(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_24C6EA46C()
{
}

void sub_24C6EA4C8(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void *sub_24C6EA4EC(void *a1)
{
  *a1 = &unk_26FEDCC60;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_24C6F9D44(v2);
  }
  return a1;
}

void sub_24C6EA538(void *a1)
{
  *a1 = &unk_26FEDCC60;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_24C6F9D44(v1);
  }
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6EA5A4(void *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    sub_24C6F9E98(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v3;
    if (v4)
    {
      sub_24C6F9D44(v4);
      if (*((void *)&v5 + 1)) {
        sub_24C6F9D44(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = a1[2];
    a1[1] = result;
  }
  return result;
}

void *sub_24C6EA60C(void *a1)
{
  *a1 = &unk_26FEDCCC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_24C6F9D44(v2);
  }
  return a1;
}

void sub_24C6EA658(void *a1)
{
  *a1 = &unk_26FEDCCC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_24C6F9D44(v1);
  }
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6EA6C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    sub_24C6F9FC4(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      sub_24C6F9D44(v4);
      if (*((void *)&v5 + 1)) {
        sub_24C6F9D44(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void *sub_24C6EA728@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)sub_24C722B9C(v2, (uint64_t)a2);
  }
  else {
    return sub_24C6698FC(a2, "");
  }
}

double sub_24C6EA744(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDC960;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_24C670E40(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_24C6EA784(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDC960;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_24C6EA8E8(uint64_t a1)
{
  sub_24C6EA784(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6EA920()
{
  v3[19] = *MEMORY[0x263EF8340];
  sub_24C6EAAAC(v1);
  if ((v2[*(void *)(v1[0] - 24) + 16] & 5) == 0) {
    std::istream::read();
  }
  v1[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2532F8600](v2);
  std::istream::~istream();
  MEMORY[0x2532F88A0](v3);
  return 0;
}

void sub_24C6EAA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6B51B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6EAAAC(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x2532F85F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_24C6EAC38(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2532F88A0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6EAC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_24C6EA920()) {
    sub_24C6EADE8();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);
  return v6(a1, a2, a3);
}

void sub_24C6EADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_24C6EADE8()
{
}

void sub_24C6EAE30(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6EAE54@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_24C7119AC();
  }
  return sub_24C7147A0(a2, 5, "model file path should not be empty.", 36);
}

void sub_24C6EB1D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6EB250(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v11);
  if (v11)
  {
    char v10 = 1;
    uint64_t v1 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_24C689D44(v2, (uint64_t)") [", 3);
    uint64_t v4 = sub_24C689D44(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = sub_24C689D44(v4, (uint64_t)"] ", 2);
    sub_24C714970((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_24C689D44(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_24C6E3EDC(&v10);
  }
  return sub_24C71463C(&v11);
}

void sub_24C6EB360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_24C6E3EDC((unsigned char *)(v15 - 25));
  sub_24C71463C((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sub_24C6EB398()
{
}

void sub_24C6EB464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_24C6EB490()
{
}

void sub_24C6EB6EC(_Unwind_Exception *a1)
{
  sub_24C6FA0F0((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_24C6EB730(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &unk_2697ED650;
  }
  if (v5[80])
  {
    if ((int)sub_24C712578() <= 0)
    {
      LOBYTE(v23) = 0;
      uint64_t v6 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_24C689D44(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_24C689D44(v7, (uint64_t)") ", 2);
      uint64_t v9 = sub_24C689D44(v8, (uint64_t)"LOG(", 4);
      char v10 = sub_24C689D44(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = sub_24C689D44(v10, (uint64_t)") ", 2);
      sub_24C689D44(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_24C6E3EDC(&v23);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_24C7100EC((uint64_t)v14);
      *(void *)(v4 + 8sub_24C6FA0F0(&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_24C7101BC((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  sub_24C6E9F1C(v18 - 16, &v23);
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  sub_24C6EC17C();
}

void sub_24C6EC0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_24C6EC17C()
{
}

void sub_24C6EC1D8(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_24C6EC1FC()
{
}

void sub_24C6EC250(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_24C6EC274(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  size_t v12 = strlen(a3);
  sub_24C6FA140(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6EC34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6EC380(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_24C6EC388(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  v46[19] = *MEMORY[0x263EF8340];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_24C71463C(a5);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2697ED2A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_2697ED2A0))
      {
        long long v42 = xmmword_2652E8248;
        *(_OWORD *)std::string __p = unk_2652E8258;
        long long v44 = xmmword_2652E8268;
        uint64_t v45 = 3;
        long long v38 = xmmword_2652E8208;
        long long v39 = unk_2652E8218;
        long long v40 = xmmword_2652E8228;
        long long v41 = *(_OWORD *)&off_2652E8238;
        sub_24C6FC6F4((uint64_t)&unk_2697ED2B0, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))sub_24C6F647C, &unk_2697ED2B0, &dword_24C664000);
        __cxa_guard_release(&qword_2697ED2A0);
      }
      sub_24C6F94D0((char **)&v36, a2, a3, ":", 1, 0);
      char v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sub_24C714634(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = sub_24C6FA904((uint64_t)&unk_2697ED2B0, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_2697ED2B8) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_24C667470();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)sub_24C6E5298((uint64_t)(a4 + 2), v21);
              uint64_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sub_24C6E19CC(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v26, v27);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v28))
            {
              LODWORD(v38) = 13;
              sub_24C6E3D44((uint64_t)&v38 + 8);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_24C689D44((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sub_24C6E19CC(a1[1]);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)v32, v33);
              sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            unsigned int v29 = sub_24C6E1A50(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v29, v30);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v31))
            {
              LODWORD(v38) = 13;
              sub_24C6E3D44((uint64_t)&v38 + 8);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_24C689D44((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sub_24C6E1A50(a1[1]);
              sub_24C689D44((void *)&v38 + 1, (uint64_t)v34, v35);
              sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
              *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
              *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            char v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        sub_24C6E3D44((uint64_t)&v38 + 8);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44((void *)&v38 + 1, (uint64_t)") [", 3);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"] ", 2);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"option \"", 8);
        sub_24C689D44((void *)&v38 + 1, *v10, v10[1]);
        sub_24C689D44((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a5);
        *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
        *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                              + 24);
        *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2532F88A0](v46);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sub_24C714634(a5);
  }
}

void sub_24C6ECBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_24C6ECC54(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void *sub_24C6ECC5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_24C71463C(a2);
        double result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
        if (!*a2)
        {
          uint64_t v6 = sub_24C71463C(a2);
          return sub_24C714634(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)sub_24C6E3D44((uint64_t)v10);
    sub_24C689D44(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v10, (uint64_t)") [", 3);
    sub_24C689D44(v10, (uint64_t)"normalizer_", 11);
    sub_24C689D44(v10, (uint64_t)"] ", 2);
    sub_24C689D44(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_24C6E15D0(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_24C6E3D44((uint64_t)v10);
    sub_24C689D44(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v10, (uint64_t)") [", 3);
    sub_24C689D44(v10, (uint64_t)"model_", 6);
    sub_24C689D44(v10, (uint64_t)"] ", 2);
    sub_24C689D44(v10, (uint64_t)"Model is not initialized.", 25);
    sub_24C6E15D0(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2532F88A0](&v12);
}

void sub_24C6ECF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6ECF94(void *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*a3) {
    return;
  }
  sub_24C71463C(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
    || (uint64_t v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_26FEDBD30, (const struct __class_type_info *)&unk_26FEDBC80, 16)) == 0)
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)sub_24C6E3D44((uint64_t)v24);
    sub_24C689D44(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v24, (uint64_t)") [", 3);
    sub_24C689D44(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_24C689D44(v24, (uint64_t)"] ", 2);
    sub_24C689D44(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_24C6E15D0(&v23, (uint64_t)a3);
LABEL_27:
    v24[0] = *(void **)MEMORY[0x263F8C2C8];
    *(void **)((char *)v24 + *(v24[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    v24[1] = (void *)(MEMORY[0x263F8C318] + 16);
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](&v26);
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &unk_2697ED4C0;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)sub_24C6E3D44((uint64_t)v24);
    sub_24C689D44(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v24, (uint64_t)") [", 3);
    sub_24C689D44(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_24C689D44(v24, (uint64_t)"] ", 2);
    sub_24C689D44(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_24C6E15D0(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  sub_24C6FA64C((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_24C6F93F0((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == sub_24C6FA904((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_24C74573E[(unint64_t)*v18 >> 4]))
        {
          if (!sub_24C70838C(5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sub_24C70838C(1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6sub_24C6FA0F0(&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sub_24C714634(a3);
  sub_24C6822A0((uint64_t)&v23, v24[0]);
}

void sub_24C6ED3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sub_24C6ED438@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!*a2)
  {
    sub_24C71463C(a2);
    uint64_t v5 = (const void *)a1[4];
    if (v5
      && (uint64_t v6 = (int *)__dynamic_cast(v5, (const struct __class_type_info *)&unk_26FEDBD30, (const struct __class_type_info *)&unk_26FEDBC80, 16)) != 0)
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_24C70838C(1)) {
              sub_24C6FCBC0();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6sub_24C6FA0F0(&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_24C714634(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)sub_24C6E3D44((uint64_t)v14);
      sub_24C689D44(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v14, (uint64_t)") [", 3);
      sub_24C689D44(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_24C689D44(v14, (uint64_t)"] ", 2);
      sub_24C689D44(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_24C6E15D0(&v13, (uint64_t)a2);
      v14[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v14[1] = MEMORY[0x263F8C318] + 16;
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x2532F88A0](&v16);
    }
  }
  return result;
}

void sub_24C6ED700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6ED718()
{
}

void sub_24C6EDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  sub_24C6F9840((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  sub_24C6F9840((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_24C6EDDF0(const char *a1, uint64_t a2, uint64_t a3)
{
  sub_24C6FA994((uint64_t)v11);
  size_t v5 = strlen(a1);
  uint64_t v6 = sub_24C689D44(v12, (uint64_t)a1, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x2532F8670](v11, a3);
    BOOL v7 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2532F88A0](&v14);
  return v7;
}

void sub_24C6EDFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FAC6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6EDFDC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = sub_24C6F98E4(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      uint64_t v10 = (void *)(*result + v6);
      void *v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

uint64_t sub_24C6EE080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_24C71463C(a5);
    if (a4)
    {
      sub_24C6F9894(a4);
      sub_24C706024(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_24C71463C(a5);
        if (v19) {
          uint64_t v11 = v19 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v18)
        {
          unint64_t v12 = a4[1];
          uint64_t v13 = 8 * v18;
          do
          {
            uint64_t v14 = (long long *)(*(void *)(*(void *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              unint64_t v12 = sub_24C6FAE04(a4, v14);
            }
            else
            {
              sub_24C6FADA4(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_24C714634(a5);
      }
      return sub_24C70614C(&v16);
    }
    else
    {
      unsigned int v16 = 13;
      char v15 = (void *)sub_24C6E3D44((uint64_t)v17);
      sub_24C689D44(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v17, (uint64_t)") [", 3);
      sub_24C689D44(v17, (uint64_t)"pieces", 6);
      sub_24C689D44(v17, (uint64_t)"] ", 2);
      sub_24C689D44(v17, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v17[1] = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v22);
    }
  }
  return result;
}

void sub_24C6EE358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6EE384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_24C71463C(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_24C706024(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_24C71463C(a5);
        if (v29) {
          uint64_t v11 = v29 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v28)
        {
          unint64_t v12 = a4 + 2;
          uint64_t v13 = a4[1];
          uint64_t v14 = v11 + 8 * v28;
          do
          {
            int v15 = *(_DWORD *)(*(void *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v17 = *a4;
              uint64_t v18 = (v13 - *a4) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                sub_24C667470();
              }
              uint64_t v20 = *v12 - (void)v17;
              if (v20 >> 1 > v19) {
                unint64_t v19 = v20 >> 1;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                uint64_t v22 = (char *)sub_24C6E5298((uint64_t)(a4 + 2), v21);
                uint64_t v17 = *a4;
                uint64_t v13 = a4[1];
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v23 = &v22[4 * v18];
              *(_DWORD *)unsigned int v23 = v15;
              unsigned int v16 = v23 + 4;
              while (v13 != v17)
              {
                int v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = v15;
              unsigned int v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            uint64_t v13 = v16;
          }
          while (v11 != v14);
        }
        sub_24C714634(a5);
      }
      return sub_24C70614C(&v26);
    }
    else
    {
      unsigned int v26 = 13;
      char v25 = (void *)sub_24C6E3D44((uint64_t)v27);
      sub_24C689D44(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v27, (uint64_t)") [", 3);
      sub_24C689D44(v27, (uint64_t)"ids", 3);
      sub_24C689D44(v27, (uint64_t)"] ", 2);
      sub_24C689D44(v27, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v27[1] = MEMORY[0x263F8C318] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v32);
    }
  }
  return result;
}

void sub_24C6EE6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C6EE724(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_24C6EDFDC(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24C6EE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6EE7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_24C71463C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_24C706024(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_24C71463C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_24C714634(a4);
      }
      return sub_24C70614C(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_24C6E3D44((uint64_t)v11);
      sub_24C689D44(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v11, (uint64_t)") [", 3);
      sub_24C689D44(v11, (uint64_t)"detokenized", 11);
      sub_24C689D44(v11, (uint64_t)"] ", 2);
      sub_24C689D44(v11, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v11[1] = MEMORY[0x263F8C318] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v13);
    }
  }
  return result;
}

void sub_24C6EEA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6EEA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_24C71463C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_24C706024(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_24C71463C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_24C714634(a4);
      }
      return sub_24C70614C(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_24C6E3D44((uint64_t)v11);
      sub_24C689D44(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v11, (uint64_t)") [", 3);
      sub_24C689D44(v11, (uint64_t)"detokenized", 11);
      sub_24C689D44(v11, (uint64_t)"] ", 2);
      sub_24C689D44(v11, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v11[1] = MEMORY[0x263F8C318] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v13);
    }
  }
  return result;
}

void sub_24C6EED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6EED50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_24C71463C(a6);
    if (a5)
    {
      uint64_t v13 = *a5;
      uint64_t v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        char v31 = v14;
        sub_24C6F9840(&v31);
      }
      a5[1] = v13;
      sub_24C706BE0(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_24C71463C(a6);
        if (v34) {
          int v15 = (uint64_t *)(v34 + 8);
        }
        else {
          int v15 = 0;
        }
        if (v33)
        {
          unsigned int v16 = &v15[v33];
          do
          {
            uint64_t v17 = *v15;
            uint64_t v28 = 0;
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v18 = *(void *)(v17 + 64);
            if (v18) {
              uint64_t v19 = v18 + 8;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(int *)(v17 + 56);
            if (v20)
            {
              unint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                unint64_t v23 = *(void *)(*(void *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  unint64_t v21 = sub_24C6FAE04(&v28, (long long *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_24C66E0A8((unsigned char *)v21, *(void **)v23, *(void *)(v23 + 8));
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)v23;
                    *(void *)(v21 + 16) = *(void *)(v23 + 16);
                    *(_OWORD *)unint64_t v21 = v24;
                  }
                  v21 += 24;
                }
                unint64_t v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            unint64_t v25 = a5[1];
            if (v25 >= a5[2])
            {
              uint64_t v26 = sub_24C6FAF88(a5, &v28);
            }
            else
            {
              sub_24C6FAF28((uint64_t)a5, &v28);
              uint64_t v26 = v25 + 24;
            }
            a5[1] = v26;
            long long v38 = (void **)&v28;
            sub_24C6F9840(&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_24C714634(a6);
      }
      return sub_24C706C9C(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      size_t v27 = (void *)sub_24C6E3D44((uint64_t)v32);
      sub_24C689D44(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v32, (uint64_t)") [", 3);
      sub_24C689D44(v32, (uint64_t)"pieces", 6);
      sub_24C689D44(v32, (uint64_t)"] ", 2);
      sub_24C689D44(v32, (uint64_t)"output container is null", 24);
      sub_24C6E15D0((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v32[1] = MEMORY[0x263F8C318] + 16;
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v37);
    }
  }
  return result;
}

void sub_24C6EF0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_24C6E1660((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6EF144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_24C71463C(a6);
    if (a5)
    {
      sub_24C6F9C78(a5);
      sub_24C706BE0(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_24C71463C(a6);
        if (v40) {
          uint64_t v13 = (uint64_t *)(v40 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        if (v39)
        {
          int v33 = &v13[v39];
          do
          {
            uint64_t v14 = *v13;
            std::string __p = 0;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v15 = *(void *)(v14 + 64);
            if (v15) {
              uint64_t v16 = v15 + 8;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(int *)(v14 + 56);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v16 + 8 * v17;
              do
              {
                int v20 = *(_DWORD *)(*(void *)v16 + 64);
                if (v18 >= v36)
                {
                  uint64_t v22 = (char *)__p;
                  uint64_t v23 = (v18 - (unsigned char *)__p) >> 2;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62) {
                    sub_24C667470();
                  }
                  uint64_t v25 = v36 - (unsigned char *)__p;
                  if ((v36 - (unsigned char *)__p) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    size_t v27 = (char *)sub_24C6E5298((uint64_t)&v36, v26);
                    uint64_t v22 = (char *)__p;
                    uint64_t v18 = v35;
                  }
                  else
                  {
                    size_t v27 = 0;
                  }
                  uint64_t v28 = &v27[4 * v23];
                  *(_DWORD *)uint64_t v28 = v20;
                  unint64_t v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    int v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  std::string __p = v28;
                  uint64_t v35 = v21;
                  char v36 = &v27[4 * v26];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v18 = v20;
                  unint64_t v21 = v18 + 4;
                }
                uint64_t v35 = v21;
                v16 += 8;
                uint64_t v18 = v21;
              }
              while (v16 != v19);
            }
            unint64_t v30 = a5[1];
            if (v30 >= a5[2])
            {
              uint64_t v31 = sub_24C6FB328(a5, (uint64_t)&__p);
            }
            else
            {
              sub_24C6FB2D4((uint64_t)a5, (uint64_t)&__p);
              uint64_t v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              uint64_t v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_24C714634(a6);
      }
      return sub_24C706C9C(&v37);
    }
    else
    {
      unsigned int v37 = 13;
      uint64_t v32 = (void *)sub_24C6E3D44((uint64_t)v38);
      sub_24C689D44(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v38, (uint64_t)") [", 3);
      sub_24C689D44(v38, (uint64_t)"ids", 3);
      sub_24C689D44(v38, (uint64_t)"] ", 2);
      sub_24C689D44(v38, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v38[1] = MEMORY[0x263F8C318] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v43);
    }
  }
  return result;
}

void sub_24C6EF53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_24C6EF584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_24C71463C(a6);
    if (a5)
    {
      sub_24C6F9894(a5);
      sub_24C706024(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_24C71463C(a6);
        if (v23) {
          uint64_t v15 = v23 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v22)
        {
          unint64_t v16 = a5[1];
          uint64_t v17 = 8 * v22;
          do
          {
            uint64_t v18 = (long long *)(*(void *)(*(void *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              unint64_t v16 = sub_24C6FAE04(a5, v18);
            }
            else
            {
              sub_24C6FADA4(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_24C714634(a6);
      }
      return sub_24C70614C(&v20);
    }
    else
    {
      unsigned int v20 = 13;
      uint64_t v19 = (void *)sub_24C6E3D44((uint64_t)v21);
      sub_24C689D44(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v21, (uint64_t)") [", 3);
      sub_24C689D44(v21, (uint64_t)"pieces", 6);
      sub_24C689D44(v21, (uint64_t)"] ", 2);
      sub_24C689D44(v21, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v21[1] = MEMORY[0x263F8C318] + 16;
      if (v25 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v26);
    }
  }
  return result;
}

void sub_24C6EF87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6EF8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_24C71463C(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_24C706024(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_24C71463C(a6);
        if (v33) {
          uint64_t v15 = v33 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v32)
        {
          unint64_t v16 = a5 + 2;
          uint64_t v17 = a5[1];
          uint64_t v18 = v15 + 8 * v32;
          do
          {
            int v19 = *(_DWORD *)(*(void *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              unint64_t v21 = *a5;
              uint64_t v22 = (v17 - *a5) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_24C667470();
              }
              uint64_t v24 = *v16 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                uint64_t v26 = (char *)sub_24C6E5298((uint64_t)(a5 + 2), v25);
                unint64_t v21 = *a5;
                uint64_t v17 = a5[1];
              }
              else
              {
                uint64_t v26 = 0;
              }
              size_t v27 = &v26[4 * v22];
              *(_DWORD *)size_t v27 = v19;
              unsigned int v20 = v27 + 4;
              while (v17 != v21)
              {
                int v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v19;
              unsigned int v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            uint64_t v17 = v20;
          }
          while (v15 != v18);
        }
        sub_24C714634(a6);
      }
      return sub_24C70614C(&v30);
    }
    else
    {
      unsigned int v30 = 13;
      int v29 = (void *)sub_24C6E3D44((uint64_t)v31);
      sub_24C689D44(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v31, (uint64_t)") [", 3);
      sub_24C689D44(v31, (uint64_t)"ids", 3);
      sub_24C689D44(v31, (uint64_t)"] ", 2);
      sub_24C689D44(v31, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v31[1] = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v36);
    }
  }
  return result;
}

void sub_24C6EFC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6EFC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_24C71463C(a8);
    if (a7)
    {
      uint64_t v19 = *a7;
      unsigned int v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        int v39 = v20;
        sub_24C6F9840(&v39);
      }
      a7[1] = v19;
      sub_24C706BE0(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_24C71463C(a8);
        unint64_t v21 = (void **)*a7;
        uint64_t v22 = (void **)a7[1];
        while (v22 != v21)
        {
          v22 -= 4;
          uint64_t v36 = v22;
          sub_24C6F9840(&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_24C6F00D8(a7, v41);
        if (v42) {
          uint64_t v24 = (uint64_t *)(v42 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
        if (v41)
        {
          unint64_t v25 = &v24[v41];
          do
          {
            uint64_t v26 = *v24;
            uint64_t v36 = 0;
            std::string __dst = 0;
            unint64_t v38 = 0;
            sub_24C6F016C((uint64_t *)&v36, *(int *)(v26 + 56));
            uint64_t v27 = *(void *)(v26 + 64);
            if (v27) {
              uint64_t v28 = v27 + 8;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(int *)(v26 + 56);
            if (v29)
            {
              unint64_t v30 = (unint64_t)__dst;
              uint64_t v31 = 8 * v29;
              do
              {
                unint64_t v32 = *(void *)(*(void *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  unint64_t v30 = sub_24C6FAE04((uint64_t *)&v36, (long long *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_24C66E0A8((unsigned char *)v30, *(void **)v32, *(void *)(v32 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v32;
                    *(void *)(v30 + 16) = *(void *)(v32 + 16);
                    *(_OWORD *)unint64_t v30 = v33;
                  }
                  v30 += 24;
                }
                std::string __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            unint64_t v34 = a7[1];
            if (v34 >= a7[2])
            {
              uint64_t v35 = sub_24C6FB9C8(a7, (uint64_t *)&v36, v46);
            }
            else
            {
              sub_24C6FB954((uint64_t)a7, (uint64_t *)&v36, (float *)v46);
              uint64_t v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_24C6F9840(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_24C714634(a8);
      }
      return sub_24C706C9C(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      unint64_t v23 = (void *)sub_24C6E3D44((uint64_t)v40);
      sub_24C689D44(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v40, (uint64_t)") [", 3);
      sub_24C689D44(v40, (uint64_t)"pieces", 6);
      sub_24C689D44(v40, (uint64_t)"] ", 2);
      sub_24C689D44(v40, (uint64_t)"output container is null", 24);
      sub_24C6E15D0((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v40 + *(void *)(v40[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v40[1] = MEMORY[0x263F8C318] + 16;
      if (v44 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v45);
    }
  }
  return result;
}

void sub_24C6F0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_24C6E1660((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_24C6F00D8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_24C667470();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_24C6FB764((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_24C6FB6EC(a1, v7);
    return sub_24C6FB8CC(v7);
  }
  return result;
}

void sub_24C6F0158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FB8CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6F016C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_24C667470();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_24C6E4854(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_24C6FA424(a1, v7);
    return sub_24C6FA5BC((uint64_t)v7);
  }
  return result;
}

void sub_24C6F020C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FA5BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6F0220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_24C71463C(a8);
    if (a7)
    {
      sub_24C6E4978(a7);
      sub_24C706BE0(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        int v39 = a8;
        sub_24C71463C(a8);
        sub_24C6E4978(a7);
        sub_24C6F06D0(a7, v47);
        if (v48) {
          uint64_t v19 = (uint64_t *)(v48 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (v47)
        {
          uint64_t v40 = &v19[v47];
          do
          {
            uint64_t v20 = *v19;
            std::string __p = 0;
            uint64_t v43 = 0;
            char v44 = 0;
            sub_24C6F0764(&__p, *(int *)(v20 + 56));
            uint64_t v21 = *(void *)(v20 + 64);
            if (v21) {
              uint64_t v22 = v21 + 8;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(int *)(v20 + 56);
            if (v23)
            {
              uint64_t v24 = v22 + 8 * v23;
              unint64_t v25 = v43;
              do
              {
                int v26 = *(_DWORD *)(*(void *)v22 + 64);
                if (v25 >= v44)
                {
                  uint64_t v28 = (char *)__p;
                  uint64_t v29 = (v25 - (unsigned char *)__p) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    sub_24C667470();
                  }
                  uint64_t v31 = v44 - (unsigned char *)__p;
                  if ((v44 - (unsigned char *)__p) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    long long v33 = (char *)sub_24C6E5298((uint64_t)&v44, v32);
                    uint64_t v28 = (char *)__p;
                    unint64_t v25 = v43;
                  }
                  else
                  {
                    long long v33 = 0;
                  }
                  unint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)unint64_t v34 = v26;
                  uint64_t v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    int v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  std::string __p = v34;
                  uint64_t v43 = v27;
                  char v44 = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v25 = v26;
                  uint64_t v27 = v25 + 4;
                }
                uint64_t v43 = v27;
                v22 += 8;
                unint64_t v25 = v27;
              }
              while (v22 != v24);
            }
            int v41 = *(_DWORD *)(v20 + 80);
            unint64_t v36 = a7[1];
            if (v36 >= a7[2])
            {
              uint64_t v37 = sub_24C6FBD78(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_24C6FBD10((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              uint64_t v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              uint64_t v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_24C714634(v39);
      }
      return sub_24C706C9C(&v45);
    }
    else
    {
      unsigned int v45 = 13;
      unint64_t v38 = (void *)sub_24C6E3D44((uint64_t)v46);
      sub_24C689D44(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v46, (uint64_t)") [", 3);
      sub_24C689D44(v46, (uint64_t)"ids", 3);
      sub_24C689D44(v46, (uint64_t)"] ", 2);
      sub_24C689D44(v46, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v46[1] = MEMORY[0x263F8C318] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v51);
    }
  }
  return result;
}

void sub_24C6F0684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_24C6F06D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_24C667470();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_24C6FB764(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_24C6FBAD8(a1, v7);
    return sub_24C6FBC7C((uint64_t)v7);
  }
  return result;
}

void sub_24C6F0750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6F0764(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_24C667470();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_24C6E5298(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_24C6F080C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    uint64_t v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = a7 + 48;
    while (1)
    {
      size_t v14 = *(void *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        int v97 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C689D44(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      uint64_t v15 = *(unsigned __int8 **)v10;
      uint64_t v16 = *(unsigned int *)(v10 + 16);
      int v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_24C6E9D30(__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            int64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              int64_t v54 = (void *)*v54;
            }
            sub_24C71586C((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4sub_24C6FA0F0(&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            int *v17 = v19 + 1;
            uint64_t v20 = sub_24C7073E8(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        sub_24C729108(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        size_t v98 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v99 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v100 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        size_t v101 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        unint64_t v102 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
        sub_24C689D44(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&__p[1], (uint64_t)") [", 3);
        sub_24C689D44(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
        sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned __int8 v31 = *v15++;
            unsigned __int8 v30 = v31;
            unint64_t v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_24C729108(v112, v34 + 1);
                unint64_t v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              int *v32 = v34 + 1;
              uint64_t v35 = sub_24C7073E8(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sub_24C6E344C(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v41 = &__dst;
            }
            else {
              int v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_24C6E9D30(__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            char v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              char v44 = (void *)*v44;
            }
            sub_24C71586C((uint64_t *)(v35 + 48), (long long *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4sub_24C6FA0F0(&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4sub_24C6FA0F0(&a9, 0) = v45 | 6;
              sub_24C6E9D30(__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = (void *)*v47;
              }
              sub_24C71586C((uint64_t *)(v35 + 56), (long long *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4sub_24C6FA0F0(&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              uint64_t v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = sub_24C6F9DB8(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          uint64_t v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            uint64_t v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            uint64_t v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            uint64_t v74 = (const std::string::value_type *)v72;
          }
          else {
            uint64_t v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          uint64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          uint64_t v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          uint64_t v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            uint64_t v79 = (void *)*v79;
          }
          sub_24C71586C(v104, (long long *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            sub_24C6673C8();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            std::string::size_type v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            std::string::size_type v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            unint64_t v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            unint64_t v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          uint64_t v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          uint64_t v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          unsigned int v92 = (void *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v11 = a5;
          if (v91) {
            unsigned int v92 = (void *)*v92;
          }
          sub_24C71586C((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_24C729108(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = sub_24C7073E8(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_24C6E9D30(__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      int v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        int v66 = (void *)*v66;
      }
      sub_24C71586C((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4sub_24C6FA0F0(&a9, 0) = v67 | 6;
      sub_24C6E9D30(__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      std::string::size_type v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        std::string::size_type v69 = (void *)*v69;
      }
      sub_24C71586C((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4sub_24C6FA0F0(&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      uint64_t v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 24;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sub_24C6F1680(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_24C71463C(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_24C6E9D30(__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      char v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        char v95 = (void *)*v95;
      }
      sub_24C71586C((uint64_t *)(a7 + 72), (long long *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sub_24C714634(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  int v96 = (void *)sub_24C6E3D44((uint64_t)&__p[1]);
  sub_24C689D44(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_24C689D44(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_24C689D44(&__p[1], (uint64_t)") [", 3);
  sub_24C689D44(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_24C689D44(&__p[1], (uint64_t)"] ", 2);
  sub_24C689D44(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_24C6E15D0((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p[1] + *((void *)__p[1] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v117 = MEMORY[0x263F8C318] + 16;
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2532F88A0](&v120);
}

void sub_24C6F15D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C6F1680@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  int64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sub_24C6FC6B0(*(void *)(v15 - 8), v16);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_24C729108(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          int *v18 = v20 + 1;
          uint64_t v32 = sub_24C7073E8(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_24C716A34((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            unint64_t v38 = sub_24C716A4C(__p, "CHECK failed: (index) < (current_size_): ");
            sub_24C716B88((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_24C716B90((uint64_t)__p);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sub_24C6E19CC(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sub_24C6E19CC(a1[1]);
          sub_24C6E19CC(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_24C6E9D30(__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = (void *)*v46;
          }
          sub_24C71586C((uint64_t *)(v39 + 48), (long long *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_24C729108(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          *uint64_t v22 = v24 + 1;
          uint64_t v25 = sub_24C7073E8(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sub_24C6E1A50(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sub_24C6E1A50(a1[1]);
          sub_24C6E1A50(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_24C6E9D30(__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = (void *)*v55;
          }
          sub_24C71586C((uint64_t *)(v25 + 48), (long long *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sub_24C714634(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = sub_24C6F9DB8(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sub_24C6E1948(a1[1]);
                sub_24C6E1948(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_24C6E9D30(__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned __int8 v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned __int8 v31 = (void *)*v31;
                }
                sub_24C71586C((uint64_t *)(v27 + 48), (long long *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sub_24C7147A0(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_24C714634(a4);
}

void sub_24C6F1B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_24C6F1B98(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (!*a5)
  {
    sub_24C71463C(a5);
    if (a4)
    {
      sub_24C7061C4(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_24C71463C(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (v19 >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sub_24C6F080C(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          unint64_t v11 = sub_24C71463C(a5);
          sub_24C714634(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)sub_24C6E3D44((uint64_t)&v18);
      sub_24C689D44(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(&v18, (uint64_t)") [", 3);
      sub_24C689D44(&v18, (uint64_t)"spt", 3);
      sub_24C689D44(&v18, (uint64_t)"] ", 2);
      sub_24C689D44(&v18, (uint64_t)"output proto is null", 20);
      sub_24C6E15D0((unsigned int *)&v17, (uint64_t)a5);
      uint64_t v18 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v19 = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2532F88A0](&v22);
    }
  }
}

void sub_24C6F1ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F1F30(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a5) {
    return;
  }
  sub_24C71463C(a5);
  if (a4)
  {
    sub_24C706CD8(a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_24C71463C(a5);
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_24C729108(a4 + 16, v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              int *v12 = v14 + 1;
              uint64_t v15 = sub_24C7074B8(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8sub_24C6FA0F0(&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sub_24C6F080C(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5) {
              goto LABEL_29;
            }
            sub_24C71463C(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_24C714634(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_24C6E3D44((uint64_t)&v30);
        sub_24C689D44(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&v30, (uint64_t)") [", 3);
        sub_24C689D44(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_24C689D44(&v30, (uint64_t)"] ", 2);
        sub_24C689D44(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_24C6E15D0((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2532F88A0](v34);
LABEL_29:
        size_t v29 = (void **)&v21;
        sub_24C6E4924(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_24C6E3D44((uint64_t)&v30);
        sub_24C689D44(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(&v30, (uint64_t)") [", 3);
        sub_24C689D44(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_24C689D44(&v30, (uint64_t)"] ", 2);
        sub_24C689D44(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_24C6E15D0((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2532F88A0](v34);
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)sub_24C6E3D44((uint64_t)&v30);
    sub_24C689D44(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(&v30, (uint64_t)") [", 3);
    sub_24C689D44(&v30, (uint64_t)"nbest_spt", 9);
    sub_24C689D44(&v30, (uint64_t)"] ", 2);
    sub_24C689D44(&v30, (uint64_t)"output proto is null", 20);
    sub_24C6E15D0((unsigned int *)&v29, (uint64_t)a5);
    uint64_t v30 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v31 = MEMORY[0x263F8C318] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](v34);
  }
}

void sub_24C6F2674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_24C6E4924((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F2704(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a6) {
    return;
  }
  sub_24C71463C(a6);
  if (a5)
  {
    sub_24C7061C4(a5);
    if (a4 < 513)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::string __p = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          char v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
        return;
      }
      sub_24C71463C(a6);
      char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_24C6E3D44((uint64_t)v39);
            sub_24C689D44(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_24C689D44(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_24C689D44(v39, (uint64_t)") [", 3);
            sub_24C689D44(v39, (uint64_t)"!nbests.empty()", 15);
            sub_24C689D44(v39, (uint64_t)"] ", 2);
            sub_24C689D44(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a6);
            sub_24C6E1660((uint64_t)&v38);
            unint64_t v38 = &v30;
            sub_24C6E4924((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_24C6FBE7C(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            uint64_t v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = (v31 - v30) >> 5;
            }
            uint64_t v21 = (float *)(v30 + 24);
            do
            {
              float v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          uint64_t v23 = sub_24C7126D0();
          sub_24C6FBF00((uint64_t)v29, (float *)v38, v39[0]);
          uint64_t v24 = HIBYTE(v37);
          uint64_t v25 = v36;
          int v26 = sub_24C6FC264((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v25;
          }
          sub_24C6F080C(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          uint64_t v28 = *a6;
          if (!*a6) {
            sub_24C71463C(a6);
          }
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          unint64_t v38 = &v30;
          sub_24C6E4924((void ***)&v38);
          if (v28) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v38);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_24C6E3D44((uint64_t)v39);
          sub_24C689D44(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_24C689D44(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_24C689D44(v39, (uint64_t)") [", 3);
          sub_24C689D44(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_24C689D44(v39, (uint64_t)"] ", 2);
          sub_24C689D44(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a6);
          sub_24C6E1660((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      sub_24C6F080C(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_24C71463C(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_24C714634(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    uint64_t v15 = (void *)sub_24C6E3D44((uint64_t)v39);
    sub_24C689D44(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v39, (uint64_t)") [", 3);
    sub_24C689D44(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_24C689D44(v39, (uint64_t)"] ", 2);
    sub_24C689D44(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    int v14 = (void *)sub_24C6E3D44((uint64_t)v39);
    sub_24C689D44(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v39, (uint64_t)") [", 3);
    sub_24C689D44(v39, (uint64_t)"spt", 3);
    sub_24C689D44(v39, (uint64_t)"] ", 2);
    sub_24C689D44(v39, (uint64_t)"output proto is null", 20);
    sub_24C6E15D0((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x263F8C2C8];
  *(float **)((char *)v39 + *((void *)v39[0] - 3)) = *(float **)(MEMORY[0x263F8C2C8] + 24);
  v39[1] = (float *)(MEMORY[0x263F8C318] + 16);
  if (v40 < 0) {
    operator delete(v39[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](&v41);
}

void sub_24C6F2EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_24C6E4924((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F2FD0(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_24C71463C(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_24C729108(a4 + 16, v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            int *v14 = v16 + 1;
            uint64_t v17 = sub_24C7074B8(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8sub_24C6FA0F0(&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sub_24C6F080C((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5) {
            goto LABEL_23;
          }
          sub_24C71463C(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_24C714634(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_24C6E3D44((uint64_t)&v32);
      sub_24C689D44(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(&v32, (uint64_t)") [", 3);
      sub_24C689D44(&v32, (uint64_t)"!results.empty()", 16);
      sub_24C689D44(&v32, (uint64_t)"] ", 2);
      sub_24C689D44(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_24C6E15D0((unsigned int *)&v31, (uint64_t)a5);
      uint64_t v32 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v33 = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2532F88A0](v36);
LABEL_23:
      uint64_t v31 = (void **)&v23;
      sub_24C6E4924(&v31);
    }
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    float v22 = (void *)sub_24C6E3D44((uint64_t)&v32);
    sub_24C689D44(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(&v32, (uint64_t)") [", 3);
    sub_24C689D44(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_24C689D44(&v32, (uint64_t)"] ", 2);
    sub_24C689D44(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_24C6E15D0((unsigned int *)&v31, (uint64_t)a5);
    uint64_t v32 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v33 = MEMORY[0x263F8C318] + 16;
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](v36);
  }
}

void sub_24C6F3564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_24C6E4924((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F35DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_24C71463C(a5);
      if (v20 >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (v20 >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sub_24C714634(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)sub_24C6E3D44((uint64_t)&v19);
    sub_24C689D44(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(&v19, (uint64_t)") [", 3);
    sub_24C689D44(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_24C689D44(&v19, (uint64_t)"] ", 2);
    sub_24C689D44(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_24C6E15D0((unsigned int *)&v18, (uint64_t)a5);
    uint64_t v19 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v20 = MEMORY[0x263F8C318] + 16;
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](&v23);
  }
}

void sub_24C6F38B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F38F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_24C6EDFDC(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_24C6F3984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F39A0(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v68 = a3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a4) {
    return;
  }
  sub_24C71463C(a4);
  if (v4)
  {
    sub_24C7061C4(v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8)) {
      uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
      uint64_t v9 = (char *)&unk_24C7307FD;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        uint64_t v14 = v68;
        uint64_t v15 = *(int **)(v68 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v68 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_24C729108(v68 + 48, v17 + 1);
            uint64_t v15 = *(int **)(v68 + 64);
            int v17 = *v15;
          }
          int *v15 = v17 + 1;
          uint64_t v18 = sub_24C7073E8(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = (void *)*v22;
        }
        uint64_t v23 = sub_24C715890((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x2532F8570](v23, v12, v13);
        int v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          uint64_t v4 = v68;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_24C6F1680(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4) {
      return;
    }
    sub_24C71463C(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    v60[1] = &v61;
    uint64_t v61 = sub_24C715890((uint64_t *)(v4 + 72), (uint64_t)v26);
    uint64_t v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = sub_24C6F90E8(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, void))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64))) {
          break;
        }
        ++v30;
LABEL_68:
        uint64_t v4 = v68;
        int v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sub_24C6F4340((uint64_t)v59, v29, v30, a4);
      if (*a4) {
        goto LABEL_95;
      }
      sub_24C71463C(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_24C6698FC(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if (v63 >= 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if (v63 >= 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sub_24C6F48D8(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((uint64_t v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                uint64_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              int v70 = v52 + 4;
              uint64_t v71 = v52 + 4;
              *uint64_t v52 = &unk_24C730892;
              v52[1] = 3;
              void v52[2] = " ";
              v52[3] = 1;
              std::string::size_type v69 = v52;
              sub_24C6F995C(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              long long v62 = __dst;
              uint64_t v63 = v73;
              unint64_t v73 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v69)
              {
                int v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_24C6698FC(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              sub_24C6673C8();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v73 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            uint64_t v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sub_24C6F4340((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_24C71463C(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sub_24C714634(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)sub_24C6E3D44((uint64_t)&v62 + 8);
    sub_24C689D44(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44((void *)&v62 + 1, (uint64_t)") [", 3);
    sub_24C689D44((void *)&v62 + 1, (uint64_t)"spt", 3);
    sub_24C689D44((void *)&v62 + 1, (uint64_t)"] ", 2);
    sub_24C689D44((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_24C6E15D0((unsigned int *)&v62, (uint64_t)a4);
    *((void *)&v62 + 1) = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v62 + *(void *)(*((void *)&v62 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v63 = MEMORY[0x263F8C318] + 16;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](&v67);
  }
}

void sub_24C6F42E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F4340(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a2 >= a3)
  {
    sub_24C714634(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    int v8 = a2;
    do
    {
      uint64_t v9 = sub_24C6F90E8(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sub_24C6E25E4(v12, v11);
      if (v13 < 0)
      {
        unsigned int v33 = 13;
        sub_24C6E3D44((uint64_t)v34);
        sub_24C689D44(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_24C689D44(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_24C689D44(v34, (uint64_t)") [", 3);
        sub_24C689D44(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_24C689D44(v34, (uint64_t)"] ", 2);
        sub_24C6E15D0(&v33, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    char v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v37.__r_.__value_.__r.__words[1];
    }
    if (v14 >= 1)
    {
      int v15 = 0;
      while (1)
      {
        unint64_t v32 = 0;
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        if (size < v15) {
          sub_24C66DE30("string_view::substr");
        }
        unint64_t v17 = v15;
        uint64_t v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v37;
        }
        if (sub_24C712588((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533) {
          break;
        }
        int v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            unsigned int v33 = 13;
            sub_24C6E3D44((uint64_t)v34);
            sub_24C689D44(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_24C689D44(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_24C689D44(v34, (uint64_t)") [", 3);
            sub_24C689D44(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_24C689D44(v34, (uint64_t)"] ", 2);
            sub_24C6E15D0(&v33, (uint64_t)v31);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_24C6F48D8(*(void ***)(a1 + 8), v19, &unk_24C73088E, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        int v15 = v17 + v22;
        if (v15 >= v14) {
          goto LABEL_49;
        }
      }
      int v19 = v17 + a2;
LABEL_23:
      std::string::size_type v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v37.__r_.__value_.__l.__size_;
      }
      unint64_t v21 = v20 - v17;
      if (v20 < v17) {
        sub_24C66DE30("string_view::substr");
      }
      unint64_t v22 = v32;
      uint64_t v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v21 >= v32) {
        unint64_t v24 = v32;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v32)
      {
        unint64_t v25 = 0;
        int v26 = (char *)v23 + v17;
        int v27 = v19;
        do
        {
          unint64_t v28 = v22 - 1;
          if (v25 == v28) {
            int v29 = v26;
          }
          else {
            int v29 = "";
          }
          if (v25 == v28) {
            size_t v30 = v24;
          }
          else {
            size_t v30 = 0;
          }
          sub_24C6F48D8(*(void ***)(a1 + 8), v27 + v25++, v29, v30);
          unint64_t v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    int v15 = 0;
LABEL_49:
    if (v15 + a2 == a3)
    {
      sub_24C714634(v31);
      goto LABEL_55;
    }
    unsigned int v33 = 13;
    sub_24C6E3D44((uint64_t)v34);
    sub_24C689D44(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v34, (uint64_t)") [", 3);
    sub_24C689D44(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_24C689D44(v34, (uint64_t)"] ", 2);
    sub_24C6E15D0(&v33, (uint64_t)v31);
LABEL_52:
    v34[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v34[1] = MEMORY[0x263F8C318] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](&v36);
LABEL_55:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_24C6F4870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_24C6F48D8(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_24C6F9DB8(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2sub_24C6FA0F0(&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = (void *)*v13;
  }
  sub_24C71586C((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4sub_24C6FA0F0(&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4sub_24C6FA0F0(&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_24C6F4A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F4A50(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  sub_24C6F016C(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      int v11 = *v9;
      int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      int v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v14 = (unsigned char *)sub_24C6FC504(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_24C6FC614((int)&v21, v20, (uint64_t)&__p);
        uint64_t v14 = v13 + 24;
      }
      unint64_t v20 = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    sub_24C6F4C6C("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_24C7147A0(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_24C6F9840((void ***)&__p);
}

void sub_24C6F4C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_24C6F9840((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_24C6F4C6C(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  sub_24C6FC3BC();
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6F4D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6F4D44(void **a1)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  uint64_t v2 = v14;
  sub_24C71463C(&v14);
  if (!v2) {
    return (*(uint64_t (**)(void *))(*a1[1] + 128))(a1[1]);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v13 = 0;
    uint64_t v3 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::string::size_type v5 = sub_24C689D44(v4, (uint64_t)") ", 2);
    uint64_t v6 = sub_24C689D44(v5, (uint64_t)"LOG(", 4);
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)"ERROR", 5);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v14, a1);
    uint64_t v9 = sub_24C714944(&v14);
    size_t v10 = strlen(v9);
    int v11 = sub_24C689D44(v8, (uint64_t)v9, v10);
    sub_24C689D44(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v14);
    sub_24C6E3EDC(&v13);
  }
  return 0;
}

void sub_24C6F4ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F4EF4(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  uint64_t v6 = v18;
  sub_24C71463C(&v18);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v17 = 0;
    uint64_t v7 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v7, (uint64_t)"(", 1);
    unsigned __int8 v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)") ", 2);
    size_t v10 = sub_24C689D44(v9, (uint64_t)"LOG(", 4);
    int v11 = sub_24C689D44(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = sub_24C689D44(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
    char v13 = sub_24C714944(&v18);
    size_t v14 = strlen(v13);
    uint64_t v15 = sub_24C689D44(v12, (uint64_t)v13, v14);
    sub_24C689D44(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v18);
    sub_24C6E3EDC(&v17);
  }
  return 0;
}

void sub_24C6F5094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sub_24C6F50BC(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_24C71463C(&v17);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v16 = 0;
    std::string::size_type v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    int v11 = sub_24C714944(&v17);
    size_t v12 = strlen(v11);
    char v13 = sub_24C689D44(v10, (uint64_t)v11, v12);
    size_t v14 = sub_24C689D44(v13, (uint64_t)"\nReturns default value ", 23);
    sub_24C689D44(v14, (uint64_t)"", 0);
    sub_24C71463C(&v17);
    sub_24C6E3EDC(&v16);
  }
  return "";
}

void sub_24C6F5264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sub_24C6F528C(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_24C71463C(&v17);
  if (!v4) {
    return (*(float (**)(void *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  float v5 = 0.0;
  if ((int)sub_24C712578() <= 2)
  {
    char v16 = 0;
    uint64_t v6 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)") ", 2);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"LOG(", 4);
    size_t v10 = sub_24C689D44(v9, (uint64_t)"ERROR", 5);
    int v11 = sub_24C689D44(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    size_t v12 = sub_24C714944(&v17);
    size_t v13 = strlen(v12);
    size_t v14 = sub_24C689D44(v11, (uint64_t)v12, v13);
    sub_24C689D44(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v17);
    sub_24C6E3EDC(&v16);
  }
  return v5;
}

void sub_24C6F5434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F545C(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_24C71463C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v15 = 0;
    float v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_24C714944(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_24C689D44(v10, (uint64_t)v11, v12);
    sub_24C689D44(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v16);
    sub_24C6E3EDC(&v15);
  }
  return 0;
}

void sub_24C6F55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F561C(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_24C71463C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v15 = 0;
    float v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_24C714944(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_24C689D44(v10, (uint64_t)v11, v12);
    sub_24C689D44(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v16);
    sub_24C6E3EDC(&v15);
  }
  return 0;
}

void sub_24C6F57B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F57DC(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_24C71463C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v15 = 0;
    float v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_24C714944(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_24C689D44(v10, (uint64_t)v11, v12);
    sub_24C689D44(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v16);
    sub_24C6E3EDC(&v15);
  }
  return 0;
}

void sub_24C6F5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F599C(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_24C71463C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  }
  if ((int)sub_24C712578() <= 2)
  {
    char v15 = 0;
    float v5 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_24C689D44(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_24C689D44(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_24C689D44(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_24C689D44(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_24C689D44(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_24C714944(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_24C689D44(v10, (uint64_t)v11, v12);
    sub_24C689D44(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_24C71463C(&v16);
    sub_24C6E3EDC(&v15);
  }
  return 0;
}

void sub_24C6F5B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_24C6F5B5C(uint64_t *a1)
{
  uint64_t v2 = sub_24C6E1948(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24C6F5C1C(uint64_t *a1)
{
  uint64_t v2 = sub_24C6E19CC(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24C6F5CDC(uint64_t *a1)
{
  uint64_t v2 = sub_24C6E1A50(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24C6F5D9C(uint64_t *a1)
{
  uint64_t v2 = sub_24C6E1AD4(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_24C6F5E5C@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_24C71463C(a3);
    if (a2)
    {
      sub_24C6F9894(a2);
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_24C6E3D44((uint64_t)v10);
      sub_24C689D44(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v10, (uint64_t)") [", 3);
      sub_24C689D44(v10, (uint64_t)"pieces", 6);
      sub_24C689D44(v10, (uint64_t)"] ", 2);
      sub_24C689D44(v10, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v12);
    }
  }
  return result;
}

void sub_24C6F60DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6F60F4@<X0>(void **a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_24C71463C(a3);
    if (a2)
    {
      a2[1] = *a2;
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_24C6E3D44((uint64_t)v10);
      sub_24C689D44(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_24C689D44(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(v10, (uint64_t)") [", 3);
      sub_24C689D44(v10, (uint64_t)"ids", 3);
      sub_24C689D44(v10, (uint64_t)"] ", 2);
      sub_24C689D44(v10, (uint64_t)"output container is null", 24);
      sub_24C6E15D0(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2532F88A0](&v12);
    }
  }
  return result;
}

void sub_24C6F6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C6F638C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_24C6F6404(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t sub_24C6F647C(uint64_t a1)
{
  return a1;
}

void *sub_24C6F64A8@<X0>(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  size_t v13 = a1;
  unint64_t v14 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v9) = 13;
    uint64_t v6 = (void *)sub_24C6E3D44((uint64_t)v10);
    sub_24C689D44(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v10, (uint64_t)") [", 3);
    sub_24C689D44(v10, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_24C689D44(v10, (uint64_t)"] ", 2);
    sub_24C6E15D0((unsigned int *)&v9, (uint64_t)a3);
  }
  else if (*a1)
  {
    LODWORD(v9) = 13;
    float v5 = (void *)sub_24C6E3D44((uint64_t)v10);
    sub_24C689D44(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v10, (uint64_t)") [", 3);
    sub_24C689D44(v10, (uint64_t)"header->sentinel == 0", 21);
    sub_24C689D44(v10, (uint64_t)"] ", 2);
    sub_24C689D44(v10, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_24C6E15D0((unsigned int *)&v9, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sub_24C7129C0(&v13, 0x14uLL, a3);
    if (*a3) {
      return result;
    }
    sub_24C71463C(a3);
    if (v14 >= a1[1]) {
      operator new();
    }
    LODWORD(v9) = 13;
    unsigned __int8 v8 = (void *)sub_24C6E3D44((uint64_t)v10);
    sub_24C689D44(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_24C689D44(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v10, (uint64_t)") [", 3);
    sub_24C689D44(v10, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_24C689D44(v10, (uint64_t)"] ", 2);
    sub_24C6E15D0((unsigned int *)&v9, (uint64_t)a3);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2532F88A0](&v12);
}

void sub_24C6F7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C6E1660((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6F707C()
{
}

void sub_24C6F70D8(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6F70FC(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  MEMORY[0x2532F8570](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
  return v4(a1, v2, v3);
}

void sub_24C6F7184()
{
}

void sub_24C6F72AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F72C8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sub_24C6FC88C(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_24C66E0A8(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::__fs::filesystem::path *)a2;
    }
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)sub_24C6E3D44((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_24C689D44(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      size_t v13 = (unsigned char *)a2;
    }
    else {
      size_t v13 = *(unsigned char **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    sub_24C6FCA5C(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_24C6E15D0((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2532F88A0](v29);
    return;
  }
  sub_24C6FC8D4((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_24C6FC998((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_24C66E0A8(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v31;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = __p;
  }
  else {
    unint64_t v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_24C6E3D44((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v31;
    }
    else {
      uint64_t v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__pn_.__r_.__value_.__l.__size_;
    }
    sub_24C6FCA5C(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sub_24C6E15D0((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_24C66E0A8(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      unint64_t v22 = (void *)sub_24C6E3D44((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_24C689D44(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v32.st_size;
      *(void *)(a1 + 16) = v32.st_size;
      unint64_t v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_24C714634(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      uint64_t v23 = (void *)sub_24C6E3D44((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_24C689D44(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_24C6E3D44((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_24C689D44(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    unint64_t v25 = (unsigned char *)a2;
  }
  else {
    unint64_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  sub_24C6FCA5C(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_24C6E15D0((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_24C6F7BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F7C90()
{
}

void sub_24C6F7DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F7DD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F7E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F9840((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F7E50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F7EB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F7ED0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F7F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F9BB0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F7F4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F7FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F9C24((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F7FC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F802C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F9840((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F8044@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F80A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F80C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F8128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F9CD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F8140@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F81A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6E4924((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F81BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F8220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F823C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F82A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F82BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v3);
  return sub_24C71463C(&v3);
}

void sub_24C6F8320(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_24C6F833C(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sub_24C71463C(&v3);
  return v1;
}

void sub_24C6F83A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = &unk_26FEDCC60;
  uint64_t v12 = 0;
  size_t v13 = 0;
  char v11 = sub_24C706188();
  uint64_t v8 = sub_24C6EA5A4(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  sub_24C722B9C((uint64_t)v11, a4);
  sub_24C71463C(&v9);
  int v10 = &unk_26FEDCC60;
  if (v13) {
    sub_24C6F9D44(v13);
  }
}

void sub_24C6F8478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_24C6F9D44(a14);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F84A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = &unk_26FEDCC60;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = sub_24C706188();
  uint64_t v12 = sub_24C6EA5A4(&v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sub_24C722B9C((uint64_t)v15, a5);
  sub_24C71463C(&v13);
  uint64_t v14 = &unk_26FEDCC60;
  if (v17) {
    sub_24C6F9D44(v17);
  }
}

void sub_24C6F8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_24C6F9D44(a14);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F85C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = &unk_26FEDCCC0;
  uint64_t v10 = sub_24C6EA6C4((uint64_t)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sub_24C6EA728((uint64_t)v12, a5);
  sub_24C71463C(&v11);
  v12[0] = &unk_26FEDCCC0;
  if (v13) {
    sub_24C6F9D44(v13);
  }
}

void sub_24C6F8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_24C6F9D44(a12);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F86C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = &unk_26FEDCCC0;
  uint64_t v16 = sub_24C6EA6C4((uint64_t)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_24C6EA728((uint64_t)v18, a7);
  sub_24C71463C(&v17);
  v18[0] = &unk_26FEDCCC0;
  if (v19) {
    sub_24C6F9D44(v19);
  }
}

void sub_24C6F87CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_24C6F9D44(a12);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F87F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26FEDCC60;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_24C706188();
  uint64_t v6 = sub_24C6EA5A4(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  sub_24C722B9C((uint64_t)v9, a3);
  sub_24C71463C(&v7);
  uint64_t v8 = &unk_26FEDCC60;
  if (v11) {
    sub_24C6F9D44(v11);
  }
}

void sub_24C6F88C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_24C6F9D44(a14);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F88F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26FEDCC60;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_24C706188();
  uint64_t v6 = sub_24C6EA5A4(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  sub_24C722B9C((uint64_t)v9, a3);
  sub_24C71463C(&v7);
  uint64_t v8 = &unk_26FEDCC60;
  if (v11) {
    sub_24C6F9D44(v11);
  }
}

void sub_24C6F89C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_24C6F9D44(a14);
  }
  _Unwind_Resume(a1);
}

void sub_24C6F89F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26FEDCC60;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_24C706188();
  uint64_t v6 = sub_24C6EA5A4(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  sub_24C722B9C((uint64_t)v9, a3);
  sub_24C71463C(&v7);
  uint64_t v8 = &unk_26FEDCC60;
  if (v11) {
    sub_24C6F9D44(v11);
  }
}

void sub_24C6F8AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_24C6F9D44(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6F8AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = &unk_26FEDCC60;
  uint64_t v8 = sub_24C706188();
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = v8;
  uint64_t v9 = sub_24C6EA5A4(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v11, a1, a2, a3, v9);
  return sub_24C71463C(&v11);
}

void sub_24C6F8BA4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F8BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  *a5 = &unk_26FEDCC60;
  uint64_t v12 = sub_24C706188();
  a5[2] = 0;
  a5[3] = 0;
  a5[1] = v12;
  uint64_t v13 = sub_24C6EA5A4(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v15, a1, a2, a3, a4, v13, a6);
  return sub_24C71463C(&v15);
}

void sub_24C6F8C90(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F8CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = &unk_26FEDCCC0;
  uint64_t v9 = sub_24C6EA6C4((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_24C71463C(&v11);
}

void sub_24C6F8D64(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F8D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  a7[1] = 0;
  a7[2] = 0;
  *a7 = &unk_26FEDCCC0;
  uint64_t v15 = sub_24C6EA6C4((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_24C71463C(&v17);
}

void sub_24C6F8E68(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F8E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26FEDCC60;
  uint64_t v6 = sub_24C706188();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_24C6EA5A4(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v9, a1, a2, v7);
  return sub_24C71463C(&v9);
}

void sub_24C6F8F34(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F8F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26FEDCC60;
  uint64_t v6 = sub_24C706188();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_24C6EA5A4(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v9, a1, a2, v7);
  return sub_24C71463C(&v9);
}

void sub_24C6F9000(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_24C6F901C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26FEDCC60;
  uint64_t v6 = sub_24C706188();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_24C6EA5A4(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v9, a1, a2, v7);
  return sub_24C71463C(&v9);
}

void sub_24C6F90CC(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_24C6F9D44(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6F90E8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_24C716A4C(v8, "CHECK failed: (index) >= (0): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_24C716A4C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_24C6F91A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_24C6F91C8(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_24C667470();
  }
  uint64_t result = (char *)sub_24C6E5298((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_24C6F920C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    uint64_t v4 = sub_24C716A4C(v8, "CHECK failed: (index) >= (0): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_24C716A4C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_24C6F92CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6F92EC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2532F88A0](a1 + 112);
  return a1;
}

uint64_t sub_24C6F93F0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_24C716A4C(v8, "CHECK failed: (index) >= (0): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    float v5 = sub_24C716A4C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_24C6F94B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_24C6F94D0(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        uint64_t v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          unint64_t v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            unint64_t v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              uint64_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  sub_24C667470();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  int v29 = (char *)sub_24C6E515C((uint64_t)v15, v28);
                }
                else {
                  int v29 = 0;
                }
                std::__fs::filesystem::path v30 = &v29[16 * v25];
                *(void *)std::__fs::filesystem::path v30 = v16;
                *((void *)v30 + 1) = v24;
                stat v32 = *a1;
                std::__fs::filesystem::path v31 = a1[1];
                unsigned int v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  std::__fs::filesystem::path v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                *uint64_t v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    uint64_t v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        sub_24C667470();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_24C6E515C((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      uint64_t v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      uint64_t v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_24C6F9778(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_24C6F979C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6E4800(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24C6F982C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_24C6F9840(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_24C6F9894((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_24C6F9894(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_24C6F98E4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6E8080(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_24C6F9940(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6F995C(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = sub_24C6F9AF4((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = sub_24C6F9AF4((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6F9AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6F9AF4(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void sub_24C6F9BB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_24C6F9840(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_24C6F9C24(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_24C6F9C78((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_24C6F9C78(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_24C6F9CD0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_24C6F9840(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_24C6F9D44(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_24C6F9DB8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_24C716A4C(v8, "CHECK failed: (index) >= (0): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = sub_24C716A4C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_24C6F9E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6F9E98@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_24C6F9EE4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_24C6F9ED0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6F9EE4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26FEDD488;
  sub_24C706024(a1 + 3, 0);
  return a1;
}

void sub_24C6F9F30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_24C6F9F44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C6F9F64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6F9FB8(uint64_t a1)
{
  return sub_24C70614C(a1 + 24);
}

void *sub_24C6F9FC4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_24C6FA010(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_24C6F9FFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_24C6FA010(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26FEDD4C0;
  sub_24C706BE0(a1 + 3, 0);
  return a1;
}

void sub_24C6FA05C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_24C6FA070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_24C6FA090(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FEDD4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6FA0E4(uint64_t a1)
{
  return sub_24C706C9C(a1 + 24);
}

uint64_t sub_24C6FA0F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_24C70ECDC();
    JUMPOUT(0x2532F8960);
  }
  return result;
}

void sub_24C6FA140(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  sub_24C6FA244(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6FA210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FA244(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  size_t v8 = strlen(a3);
  sub_24C6FA338(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6FA304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FA338(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  sub_24C6E9D30(&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  sub_24C6E9D30(__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_24C6FA3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6FA424(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C6FA49C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C6FA49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_24C6FA53C((uint64_t)v12);
  return a6;
}

uint64_t sub_24C6FA53C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FA574(a1);
  }
  return a1;
}

void sub_24C6FA574(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_24C6FA5BC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24C6FA5F4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_24C6FA64C(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_24C6FA6D0((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_24C6FA6B8(_Unwind_Exception *a1)
{
  sub_24C6822A0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_24C6FA6D0(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = sub_24C6FA758(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_24C6E4EB4(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_24C6FA758(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_24C6E4F0C((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_24C6E4F0C((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_24C6E4F0C((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_24C6E4F0C((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_24C6E4E14((uint64_t)a1, a3, a5);
}

void *sub_24C6FA904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_24C6E4F0C(v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_24C6E4F0C(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_24C6FA994(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_24C6FA0F0(&a9, 0) = 24;
  return a1;
}

void sub_24C6FAC44(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2532F88A0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FAC6C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2532F88A0](a1 + 128);
  return a1;
}

void *sub_24C6FADA4(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_24C66E0A8((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_24C6FADFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FAE04(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_24C6E4854(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  BOOL v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_24C66E0A8(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_24C6FA424(a1, v15);
  uint64_t v13 = a1[1];
  sub_24C6FA5BC((uint64_t)v15);
  return v13;
}

void sub_24C6FAF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FA5BC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_24C6FAF28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_24C671B74((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_24C6FAF80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FAF88(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_24C6E4854(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_24C671B74(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  sub_24C6FB0AC(a1, v14);
  uint64_t v12 = a1[1];
  sub_24C6FB24C(v14);
  return v12;
}

void sub_24C6FB098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FB24C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FB0AC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C6FB124((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C6FB124(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C6FB1C8((uint64_t)v11);
  return v9;
}

uint64_t sub_24C6FB1C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FB200(a1);
  }
  return a1;
}

void sub_24C6FB200(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_24C6F9840(&v3);
    v1 += 3;
  }
}

void **sub_24C6FB24C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_24C6FB280(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_24C6F9840(&v5);
  }
}

void *sub_24C6FB2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_24C6FB440(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_24C6FB320(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FB328(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_24C6E4854(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_24C6FB440(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_24C6FB4BC(a1, v14);
  uint64_t v12 = a1[1];
  sub_24C6FB658((uint64_t)v14);
  return v12;
}

void sub_24C6FB42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FB658((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6FB440(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_24C6F91C8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24C6FB4A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6FB4BC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C6FB534((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C6FB534(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C6FB5D8((uint64_t)v11);
  return v9;
}

uint64_t sub_24C6FB5D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FB610(a1);
  }
  return a1;
}

void sub_24C6FB610(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_24C6FB658(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24C6FB690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_24C6FB6EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C6FB79C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_24C6FB764(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_24C66DB48();
  }
  return operator new(32 * a2);
}

uint64_t sub_24C6FB79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C6FB848((uint64_t)v11);
  return v9;
}

uint64_t sub_24C6FB848(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FB880(a1);
  }
  return a1;
}

void sub_24C6FB880(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_24C6F9840(&v3);
    v1 += 4;
  }
}

void **sub_24C6FB8CC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_24C6FB900(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_24C6F9840(&v5);
  }
}

float sub_24C6FB954(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_24C671B74((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_24C6FB9C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FB9C8(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_24C6FB764(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_24C671B74(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_24C6FB6EC(a1, v16);
  uint64_t v14 = a1[1];
  sub_24C6FB8CC(v16);
  return v14;
}

void sub_24C6FBAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FB8CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FBAD8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C6FBB50((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C6FBB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C6FBBFC((uint64_t)v11);
  return v9;
}

uint64_t sub_24C6FBBFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FBC34(a1);
  }
  return a1;
}

void sub_24C6FBC34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_24C6FBC7C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_24C6FBCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_24C6FBD10(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_24C6FB440((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_24C6FBD70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FBD78(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_24C6FB764(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_24C6FB440(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_24C6FBAD8(a1, v16);
  uint64_t v14 = a1[1];
  sub_24C6FBC7C((uint64_t)v16);
  return v14;
}

void sub_24C6FBE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C6FBE7C(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6F91C8(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24C6FBEE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6FBF00(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_24C6FC068((char *)a1, a2, a3, a3 - a2);
  sub_24C6FBF5C((double **)a1);
  return a1;
}

void sub_24C6FBF40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FBF5C(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_24C6FC124((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      sub_24C6FC1EC(&v16, v4 - 1);
      uint64_t v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        double *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      long long v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_24C6FC068(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_24C6FC0E0(result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24C6FC0C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_24C6FC0E0(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_24C667470();
  }
  float result = (char *)sub_24C6E4BEC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_24C6FC124(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)sub_24C6E4BEC(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *sub_24C6FC1EC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6FC0E0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24C6FC248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_24C6FC264(uint64_t a1, uint64_t a2, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  unsigned int v7 = sub_24C6FC31C(a2);
  unsigned int v8 = sub_24C6FC31C(a2);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_24C6FC31C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_24C6FC3BC()
{
  sub_24C6E3D44((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2532F88A0](&v3);
}

void sub_24C6FC4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6F92EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FC504(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_24C667470();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_24C6E4854((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  double v13 = &v7[24 * v6];
  sub_24C6FC614(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 24;
  sub_24C6FA424(a1, &v10);
  uint64_t v8 = a1[1];
  sub_24C6FA5BC((uint64_t)&v10);
  return v8;
}

void sub_24C6FC600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FA5BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C6FC614(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    void *v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t sub_24C6FC6B0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v4) {
      double v5 = (void *)*v5;
    }
    if (v3 == v5) {
      return (uint64_t)sub_24C705D68(a1, a2);
    }
    else {
      return sub_24C7220D4(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_24C6FC6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_24C6FC778((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_24C6FC760(_Unwind_Exception *a1)
{
  sub_24C6822A0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_24C6FC778(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_24C6FA758(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_24C6E4EB4(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_24C6FC80C(void *a1)
{
  sub_24C6FC844(a1);
  JUMPOUT(0x2532F8960);
}

void *sub_24C6FC844(void *a1)
{
  *a1 = &unk_26FEDCE50;
  sub_24C6FC88C((uint64_t)a1);
  return a1;
}

void *sub_24C6FC88C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double sub_24C6FC8D4@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double sub_24C6FC998@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_24C6673C8();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *sub_24C6FCA5C(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1sub_24C6FA0F0(&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = sub_24C689D44(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_24C6FCB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_24C6FCB60(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = (std::string *)((char *)v3 - 1);
  do
  {
    int v5 = v4->__r_.__value_.__s.__data_[1];
    uint64_t v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  sub_24C67E484(this, v3, v4);
  return this;
}

void sub_24C6FCBA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FCBC0()
{
}

uint64_t sub_24C6FCBEC(uint64_t a1)
{
  *(void *)a1 = &unk_26FEDD0B0;
  sub_24C703868((void *)(a1 + 96));
  uint64_t v4 = (void **)(a1 + 72);
  sub_24C6F9C24(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_24C6F9C24(&v4);
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C6FCC70(uint64_t a1)
{
  sub_24C6FCBEC(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C6FCCA8(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_24C6FCE2C(void *a1)
{
  sub_24C6F9C78(a1 + 6);
  sub_24C6F9C78(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_24C6FCE84((uint64_t)(a1 + 12));
}

void sub_24C6FCE84(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
}

void sub_24C6FCF00(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_24C6FCE2C((void *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (char **)(a1 + 24);
  sub_24C6E9B48((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_24C74573E[(unint64_t)*a2 >> 4]) {
        int v9 = asc_24C74573E[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)sub_24C6E4BEC(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        long long v17 = *(char **)(a1 + 24);
        uint64_t v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          uint64_t v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      sub_24C667470();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_24C6E4BEC(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unint64_t v20 = v26 + 8;
    int v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    unint64_t v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  sub_24C6FD340((uint64_t *)(a1 + 48), v32 + 1);
  sub_24C6FD340((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    sub_24C6E9B48((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    sub_24C6E9B48((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sub_24C6FCCA8((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  void v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  uint64_t v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)sub_24C6E4BEC((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    uint64_t v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    unsigned __int8 *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    void *v36 = v34;
    uint64_t v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sub_24C6FCCA8((void *)(a1 + 96));
  uint64_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)sub_24C6E4BEC((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    uint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      uint64_t v63 = (char *)*v51;
    }
    *uint64_t v51 = v61;
    *uint64_t v52 = v55;
    v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *size_t v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void sub_24C6FD340(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_24C7038F8(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_24C6FD3E8(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_24C6FCCA8((void *)(a1 + 96));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 2sub_24C6FA0F0(&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*(void *)(a1 + 48) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  uint64_t v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_24C6E4BEC((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    *uint64_t v23 = v7;
    long long v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    unsigned char *v12 = v23;
    *unint64_t v13 = v17;
    char *v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t *v14 = v6;
    long long v17 = v14 + 1;
  }
  *unint64_t v13 = v17;
  unint64_t v28 = (void **)(*(void *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  int v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)sub_24C6E4BEC((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    uint64_t *v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    char *v28 = v38;
    *int v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    uint64_t *v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  *int v29 = v32;
  return v7;
}

void sub_24C6FD610(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = a1[6];
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_24C667470();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)sub_24C6E4BEC((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            int v29 = &v28[8 * v25];
            *(void *)int v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_24C7029B4((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(a1[9] + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4sub_24C6FA0F0(&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    uint64_t v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4sub_24C6FA0F0(&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sub_24C712578() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    sub_24C689D44(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_24C689D44(v40, (uint64_t)") ", 2);
    uint64_t v42 = sub_24C689D44(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = sub_24C689D44(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = sub_24C689D44(v43, (uint64_t)") ", 2);
    sub_24C689D44(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_24C6E3EDC(&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_24C6FD90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FD940(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6 = ((a1[4] - a1[3]) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = a1[16] + a1[17] * a1[18];
  int v29 = 0;
  uint64_t v25 = a2;
  sub_24C6FBE7C(a2, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = a1[6];
  unint64_t v26 = a1;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = v26[9] + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_24C6FDAC8(void *a1, float a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_24C6FBE7C(v29, v6, __p);
  sub_24C6FD940(a1, (uint64_t *)__p, a2);
  uint64_t v7 = 0;
  uint64_t v27 = a1[6];
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  unint64_t v26 = a1;
  do
  {
    unint64_t v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(v26[9] + 24 * v7);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      float v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_24C6FDC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FDC88(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_24C6FD610(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(void *)int v157 = a4;
      v157[8] = 0;
      long long v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_24C703BB4((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(void *)&long long v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_24C712578() <= 1)
    {
      LOBYTE(v171) = 0;
      uint64_t v9 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      sub_24C689D44(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = sub_24C689D44(v10, (uint64_t)") ", 2);
      uint64_t v12 = sub_24C689D44(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = sub_24C689D44(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = sub_24C689D44(v13, (uint64_t)") ", 2);
      sub_24C689D44(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_24C6E3EDC(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  long long v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &unk_26FEDCF60;
  uint64_t v174 = 512;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v15 = sub_24C6FEE74(&v171);
  uint64_t v167 = v15;
  int v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2sub_24C6FA0F0(&a9, 0) = 0;
  unint64_t v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)int v157 = 0;
  sub_24C6FBE7C(__p, v17, v157);
  if (a3)
  {
    sub_24C6FD940(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v157;
    std::string __p[2] = *(void **)&v157[16];
    uint64_t v18 = sub_24C7126D0();
    unsigned int v19 = sub_24C6FC31C(v18);
    float v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    float v21 = -logf(-v20);
  }
  else
  {
    sub_24C6FD610(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    float v21 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_24C6FEFE4((uint64_t *)&v168, &v167);
  int v146 = 0;
  char v147 = 0;
  if (10 * (int)a2 >= 512) {
    int v22 = 512;
  }
  else {
    int v22 = 10 * a2;
  }
  if (v22 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  int v148 = v23;
  while (1)
  {
    long long v24 = v168;
    if ((void)v168 == *((void *)&v168 + 1)) {
      break;
    }
    unsigned int v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((void *)&v168 + 1) - v168) >= 9)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(*((void *)&v168 + 1) - v168) >> 3;
      uint64_t v28 = (void *)v168;
      do
      {
        int v29 = v28;
        v28 += v26 + 1;
        uint64_t v30 = 2 * v26;
        uint64_t v26 = (2 * v26) | 1;
        uint64_t v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          uint64_t v26 = v31;
        }
        *int v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (void *)(*((void *)&v24 + 1) - 8))
      {
        void *v28 = v25;
      }
      else
      {
        void *v28 = **((void **)&v24 + 1);
        **((void **)&v24 + 1) = v25;
        sub_24C703CE0(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((void *)&v168 + 1) -= 8;
    uint64_t v32 = *v25;
    uint64_t v33 = (void **)a1[9];
    if (*v25 == **v33)
    {
      sub_24C6FF0F8(a4, ((a4[1] - *a4) >> 5) + 1);
      for (uint64_t i = (void *)v25[1]; i[1]; uint64_t i = (void *)i[1])
      {
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void **)(v35 - 24);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v39 = *(void *)(v35 - 32);
          uint64_t v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_24C667470();
          }
          uint64_t v41 = v37 - v39;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)sub_24C6E4BEC(v35 - 16, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = *i;
          BOOL v38 = v45 + 8;
          size_t v47 = *(char **)(v35 - 32);
          uint64_t v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            uint64_t v46 = *(char **)(v35 - 32);
          }
          *(void *)(v35 - 32) = v45;
          *(void *)(v35 - 24) = v38;
          *(void *)(v35 - 16) = &v44[8 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          void *v36 = *i;
          BOOL v38 = v36 + 1;
        }
        *(void *)(v35 - 24) = v38;
      }
      uint64_t v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)int v157 = 0;
      sub_24C6FBE7C(v164, v50, v157);
      *(_DWORD *)int v157 = 0;
      sub_24C6FBE7C(v163, v50, v157);
      *(void *)int v157 = 0;
      sub_24C703FC0(&v161, v50, v157);
      int v51 = *(_DWORD *)(v32 + 16);
      uint64_t v52 = a1[9];
      if (a3)
      {
        uint64_t v53 = *(void *)(v52 + 24 * v51);
        float v54 = -100000000.0;
        if (*(void *)(v52 + 24 * v51 + 8) != v53)
        {
          unint64_t v55 = 0;
          float v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          float v54 = -100000000.0;
          do
          {
            float v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(void *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            uint64_t v58 = sub_24C7126D0();
            unsigned int v59 = sub_24C6FC31C(v58);
            float v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            float v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54) {
              float v54 = v61;
            }
            ++v55;
            int v62 = *(_DWORD *)(v32 + 16);
            uint64_t v52 = a1[9];
            uint64_t v53 = *(void *)(v52 + 24 * v62);
          }
          while (v55 < (*(void *)(v52 + 24 * v62 + 8) - v53) >> 3);
          int v51 = *(_DWORD *)(v32 + 16);
        }
        uint64_t v63 = (double *)v161;
        if (v162 != v161)
        {
          float v64 = *((float *)v25 + 4);
          uint64_t v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (unsigned char *)v161) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v162 - (unsigned char *)v161) >> 3;
          }
          do
          {
            float v66 = *v65++;
            float v67 = expf(v66 - v54);
            float v68 = (float)(v64 - v66) + log1pf(-v67);
            float v69 = v64 - fmaxf(v68, 0.0);
            float v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v71 = *(void *)(v52 + 24 * v51);
      if (*(void *)(v52 + 24 * v51 + 8) != v71)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v73 = *(void *)(v71 + 8 * v72);
          uint64_t v74 = sub_24C6FEE74(&v171);
          *(void *)int v157 = v74;
          *(void *)uint64_t v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 2sub_24C6FA0F0(&a9, 0) = *((_DWORD *)v164[0] + v72);
            float v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 2sub_24C6FA0F0(&a9, 0) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            float v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(void *)(v74 + 8) = v25;
          sub_24C6FEFE4((uint64_t *)&v168, v157);
          ++v72;
          uint64_t v71 = *(void *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(void *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_24C712578() <= 1)
        {
          v157[0] = 0;
          uint64_t v76 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          sub_24C689D44(v76, (uint64_t)"(", 1);
          long long v77 = (void *)std::ostream::operator<<();
          uint64_t v78 = sub_24C689D44(v77, (uint64_t)") ", 2);
          uint64_t v79 = sub_24C689D44(v78, (uint64_t)"LOG(", 4);
          size_t v80 = sub_24C689D44(v79, (uint64_t)"WARNING", 7);
          uint64_t v81 = sub_24C689D44(v80, (uint64_t)") ", 2);
          sub_24C689D44(v81, (uint64_t)"Allocator size exceeds ", 23);
          std::string::size_type v82 = (void *)std::ostream::operator<<();
          sub_24C689D44(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_24C6E3EDC(v157);
        }
        char v147 = 1;
      }
      uint64_t v83 = *((void *)&v168 + 1);
      uint64_t v84 = (void *)v168;
      if (*((void *)&v168 + 1) - (void)v168 >= 0x13879uLL)
      {
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        memset(&v157[8], 0, 40);
        *(void *)int v157 = &unk_26FEDCF60;
        uint64_t v158 = 512;
        *(_OWORD *)int v154 = 0u;
        long long v155 = 0u;
        float v156 = 1.0;
        ++v146;
        if ((int)sub_24C712578() <= 1)
        {
          LOBYTE(v17sub_24C6FA0F0(&a9, 0) = 0;
          unint64_t v85 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          sub_24C689D44(v85, (uint64_t)"(", 1);
          int v86 = (void *)std::ostream::operator<<();
          unint64_t v87 = sub_24C689D44(v86, (uint64_t)") ", 2);
          std::string::size_type v88 = sub_24C689D44(v87, (uint64_t)"LOG(", 4);
          uint64_t v89 = sub_24C689D44(v88, (uint64_t)"WARNING", 7);
          long long v90 = sub_24C689D44(v89, (uint64_t)") ", 2);
          sub_24C689D44(v90, (uint64_t)"Too big agenda size ", 20);
          uint64_t v91 = (void *)std::ostream::operator<<();
          sub_24C689D44(v91, (uint64_t)". Shrinking (round ", 19);
          unsigned int v92 = (void *)std::ostream::operator<<();
          sub_24C689D44(v92, (uint64_t)") down to ", 10);
          unsigned int v93 = (void *)std::ostream::operator<<();
          sub_24C689D44(v93, (uint64_t)".", 1);
          sub_24C6E3EDC(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          int v94 = 0;
          while (1)
          {
            long long v149 = (void *)v168;
            uint64_t v150 = v83;
            unint64_t v95 = *(void *)v168;
            uint64_t v153 = 0;
            uint64_t v170 = 0;
            if (!v95) {
              goto LABEL_181;
            }
            int v96 = &v170;
            unint64_t v97 = (unint64_t)v154[1];
            do
            {
              unint64_t v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              unint64_t v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              unint64_t v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  unint64_t v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97) {
                    unint64_t v102 = v100 % v97;
                  }
                }
                else
                {
                  unint64_t v102 = v100 & (v97 - 1);
                }
                uint64_t v103 = (void *)*((void *)v154[0] + v102);
                if (v103)
                {
                  for (j = (void *)*v103; j; j = (void *)*j)
                  {
                    unint64_t v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *int v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97) {
                          v105 %= v97;
                        }
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v106 = sub_24C6FEE74(v157);
              long long v107 = *(_OWORD *)v95;
              *(void *)(v106 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              *int v96 = v106;
              unint64_t v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  uint64_t v5 = v100;
                  if ((void *)v100 >= v154[1]) {
                    uint64_t v5 = v100 % (unint64_t)v154[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                int v109 = (void *)*((void *)v154[0] + v5);
                if (v109)
                {
                  for (k = (void *)*v109; k; k = (void *)*k)
                  {
                    unint64_t v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1]) {
                          v111 %= (unint64_t)v154[1];
                        }
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v112 = operator new(0x20uLL);
              *uint64_t v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              float v113 = (float)(unint64_t)(*((void *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                BOOL v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3) {
                  BOOL v114 = 0;
                }
                unint64_t v115 = (2 * v97) | !v114;
                unint64_t v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116) {
                  int8x8_t prime = (int8x8_t)v116;
                }
                else {
                  int8x8_t prime = (int8x8_t)v115;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v97 = (unint64_t)v154[1];
                }
                if (*(void *)&prime <= v97)
                {
                  if (*(void *)&prime < v97)
                  {
                    unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      unint64_t v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2) {
                        unint64_t v124 = v126;
                      }
                    }
                    if (*(void *)&prime <= v124) {
                      int8x8_t prime = (int8x8_t)v124;
                    }
                    if (*(void *)&prime >= v97)
                    {
                      unint64_t v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      uint64_t v132 = v154[0];
                      v154[0] = 0;
                      if (v132) {
                        operator delete(v132);
                      }
                      unint64_t v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    sub_24C66DB48();
                  }
                  long long v118 = operator new(8 * *(void *)&prime);
                  char v119 = v154[0];
                  v154[0] = v118;
                  if (v119) {
                    operator delete(v119);
                  }
                  uint64_t v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((void *)v154[0] + v120++) = 0;
                  while (*(void *)&prime != v120);
                  uint64_t v121 = (void **)v155;
                  if ((void)v155)
                  {
                    unint64_t v122 = *(void *)(v155 + 8);
                    uint8x8_t v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(void *)&prime) {
                        v122 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v122 &= *(void *)&prime - 1;
                    }
                    *((void *)v154[0] + v122) = &v155;
                    for (m = *v121; m; unint64_t v122 = v128)
                    {
                      unint64_t v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(void *)&prime) {
                          v128 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v128 &= *(void *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((void *)v154[0] + v128))
                        {
                          *((void *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *uint64_t v121 = (void *)*m;
                        void *m = **((void **)v154[0] + v128);
                        **((void **)v154[0] + v128) = m;
                        m = v121;
                      }
                      unint64_t v128 = v122;
LABEL_151:
                      uint64_t v121 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97) {
                    uint64_t v5 = v100 % v97;
                  }
                  else {
                    uint64_t v5 = v100;
                  }
                }
                else
                {
                  uint64_t v5 = (v97 - 1) & v100;
                }
              }
              float v129 = v154[0];
              char v130 = (void *)*((void *)v154[0] + v5);
              if (v130)
              {
                *uint64_t v112 = *v130;
LABEL_168:
                void *v130 = v112;
                goto LABEL_169;
              }
              *uint64_t v112 = v155;
              *(void *)&long long v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                unint64_t v131 = *(void *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97) {
                    v131 %= v97;
                  }
                }
                else
                {
                  v131 &= v97 - 1;
                }
                char v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v155 + 1);
LABEL_170:
              unint64_t v95 = *(void *)(v95 + 8);
              int v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            uint64_t v153 = v170;
            sub_24C6FEFE4((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              uint64_t v133 = 0;
              uint64_t v134 = (v150 - (uint64_t)v149) >> 3;
              uint64_t v135 = *v149;
              uint64_t v136 = v149;
              do
              {
                long long v137 = v136;
                v136 += v133 + 1;
                uint64_t v138 = 2 * v133;
                uint64_t v133 = (2 * v133) | 1;
                uint64_t v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  uint64_t v133 = v139;
                }
                void *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              uint64_t v140 = (void *)(v150 - 8);
              if (v136 == (void *)(v150 - 8))
              {
                void *v136 = v135;
              }
              else
              {
                void *v136 = *v140;
                *uint64_t v140 = v135;
                sub_24C703CE0((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            uint64_t v83 = *((void *)&v168 + 1) - 8;
            *((void *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              uint64_t v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((void *)&v168 + 1) = v84;
          operator delete(v84);
        }
        long long v168 = v159;
        uint64_t v169 = v160;
        long long v141 = v172;
        long long v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        uint64_t v142 = *(void *)&v157[24];
        uint64_t v143 = v174;
        *(void *)&v157[24] = v173[0];
        long long v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        uint64_t v174 = v158;
        uint64_t v158 = v143;
        sub_24C6A3918((uint64_t)v154);
        sub_24C6FF194(v157);
      }
      if (v161)
      {
        id v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v168) {
    operator delete((void *)v168);
  }
  sub_24C6FF194(&v171);
}

void sub_24C6FED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_24C6A3918((uint64_t)&a21);
  sub_24C6FF194(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  unsigned int v59 = a57;
  sub_24C6E4924((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  sub_24C6FF194((void *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_24C6FEE74(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_24C6FEFE4(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_24C667470();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_24C66DB48();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;
  return sub_24C703CE0(v15, v6, v16);
}

void sub_24C6FF0F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_24C703D3C(a1, v5);
  }
}

void *sub_24C6FF194(void *a1)
{
  *a1 = &unk_26FEDCF60;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x2532F8930](*v2, 0x1020C8062D53EE8);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C6FF224(void *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_24C6FBE7C(__p, v6, v48);
    sub_24C6FD940(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v48;
    int v51 = v49;
    uint64_t v46 = sub_24C7126D0();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    uint64_t v49 = 0;
    int v7 = ((a1[4] - a1[3]) >> 3) - 1;
    uint64_t v8 = **(void **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      uint64_t v10 = (float *)v48[0];
      v48[1] = v48[0];
      unint64_t v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          float v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(void *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            uint64_t v16 = (float *)v48[0];
            uint64_t v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              sub_24C667470();
            }
            uint64_t v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              float v21 = (char *)sub_24C6E5298((uint64_t)&v49, v20);
              uint64_t v16 = (float *)v48[0];
              uint64_t v10 = (float *)v48[1];
            }
            else
            {
              float v21 = 0;
            }
            int v22 = (float *)&v21[4 * v17];
            *int v22 = v15;
            int v23 = v22 + 1;
            while (v10 != v16)
            {
              int v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            uint64_t v49 = (float *)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
            uint64_t v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        uint64_t v14 = (float *)v48[0];
      }
      sub_24C6FBF00((uint64_t)v47, v14, v10);
      unsigned int v25 = *(_DWORD *)(v8 + 16);
      uint64_t v26 = a1[9];
      uint64_t v8 = *(void *)(*(void *)(v26 + 24 * v25) + 8 * (int)sub_24C6FC264((uint64_t)v47, v46, (double **)v47));
      uint64_t v27 = **(void **)a1[9];
      if (v8 != v27)
      {
        float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        int v29 = a2[1];
        unint64_t v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = ((char *)v29 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_24C667470();
          }
          uint64_t v32 = v28 - (void)*a2;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_24C6E4BEC((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = &v35[8 * v31];
          *(void *)unint64_t v36 = v8;
          uint64_t v30 = v36 + 8;
          BOOL v38 = (char *)*a2;
          unint64_t v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              uint64_t v39 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *int v29 = v8;
          uint64_t v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    unint64_t v41 = (unint64_t)*a2;
    uint64_t v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      uint64_t v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        unint64_t v43 = v41 + 8;
        do
        {
          uint64_t v44 = *(void *)(v43 - 8);
          *(void *)(v43 - 8) = *(void *)v42;
          *(void *)uint64_t v42 = v44;
          v42 -= 8;
          BOOL v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_24C6FF5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FF648(uint64_t a1, void *a2)
{
  float v4 = *(float *)(a1 + 104);
  uint64_t v5 = ((a2[4] - a2[3]) >> 3) - 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  sub_24C6E8008(&__p, *(int *)(a1 + 92) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    uint64_t v10 = *(unsigned char **)(a2[3] + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = *(_DWORD **)(a1 + 40);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            unint64_t v20 = &v11[16 * v16];
            *(_DWORD *)unint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              unsigned int v25 = &v11[16 * v16];
              *(_DWORD *)unsigned int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      uint64_t v26 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      sub_24C689D44(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      unint64_t v28 = sub_24C689D44(v27, (uint64_t)") [", 3);
      int v29 = sub_24C689D44(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_24C689D44(v29, (uint64_t)"] ", 2);
      sub_24C6E3EDC(&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sub_24C6FD3E8((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(a2[3] + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sub_24C6FD3E8((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v35)) {
          double v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        }
        else {
          double v38 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
}

void sub_24C6FFA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FFA50(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_24C71463C((uint64_t *)&__p);
  if (v12)
  {
    sub_24C714858(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_24C6FFC68(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = a5[1];
          if (v18 >= a5[2])
          {
            uint64_t v19 = sub_24C6FC504(a5, (uint64_t)v20);
          }
          else
          {
            sub_24C6FC614(a5 + 16, (unsigned char *)a5[1], (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_24C714858(a6, a1 + 96);
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_24C6FFC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FFC68(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  sub_24C6E8008(a6, a5);
  unint64_t v12 = sub_24C702A30(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_24C702D38((uint64_t)a6, v12);
}

void sub_24C6FFCE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C6FFD04(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_24C71463C((uint64_t *)&__p);
  if (v12)
  {
    sub_24C714858(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_24C6FFC68(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          unint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *(_DWORD **)a5;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_24C667470();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              unsigned int v25 = (char *)sub_24C6E5298(a5 + 16, v24);
              unint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              unsigned int v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            _DWORD *v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_24C714858(a6, a1 + 96);
    if (__p)
    {
      int v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_24C6FFF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C6FFF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24C7000C8(a1);
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26FEDCFC0;
  *(void *)(v4 + 8) = a2 + 16;
  sub_24C6E1E64(v4);
  unint64_t v5 = 0;
  *(void *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104)) {
        float v6 = *(float *)(a1 + 104);
      }
      *(float *)(a1 + 104) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7) {
        float v7 = *(float *)(a1 + 108);
      }
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_24C7000A8(_Unwind_Exception *a1)
{
  sub_24C6E1860(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C7000C8(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26FEDC558;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26FEDD398;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &unk_26FEDD398;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_24C6FA0F0(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_24C714634((void *)(a1 + 96));
  return a1;
}

void sub_24C70016C(_Unwind_Exception *a1)
{
  sub_24C6E0914(v3);
  sub_24C6E0914(v2);
  unint64_t v5 = *v1;
  void *v1 = 0;
  if (v5) {
    sub_24C6E4A54((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_24C7001A0(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sub_24C6E0978(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = &unk_26FEDCFC0;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sub_24C714858(&v17, v10 + 96);
  uint64_t v14 = v17;
  sub_24C71463C(&v17);
  if (!v14)
  {
    sub_24C70031C(a3, a4, v11, &v17);
    sub_24C71485C(v13, &v17);
    sub_24C71463C(&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sub_24C71463C(&v17);
    if (!v15)
    {
      sub_24C70031C(a3 + 1, a4 - 4, v12, &v17);
      sub_24C71485C(v13, &v17);
      sub_24C71463C(&v17);
    }
  }
  return a1;
}

void sub_24C7002E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C71463C((uint64_t *)va);
  sub_24C6E1860(v2);
  _Unwind_Resume(a1);
}

void *sub_24C70031C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)sub_24C6E3D44((uint64_t)v8);
    sub_24C689D44(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_24C689D44(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_24C689D44(v8, (uint64_t)") [", 3);
    sub_24C689D44(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_24C689D44(v8, (uint64_t)"] ", 2);
    sub_24C6E15D0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2532F88A0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_24C714634(a4);
  }
}

void sub_24C700500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_24C700520(void *a1)
{
  sub_24C6E1860(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C700558(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[28])
  {
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_24C71463C((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_24C71463C((uint64_t *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    unsigned int v25 = &unk_26FEDD0B0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_26FEDCF80;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sub_24C6FCF00((uint64_t)&v25, a2, a3);
    sub_24C6FF648((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_24C6FD610(&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_24C667470();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)sub_24C6E4854((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          unint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          uint64_t v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unint64_t v24 = v8;
      operator delete(v8);
    }
    sub_24C6FCBEC((uint64_t)&v25);
  }
  else
  {
    sub_24C700868((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_24C700820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_24C6FCBEC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_24C700868(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sub_24C71463C((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_24C71463C((uint64_t *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (a3 << 32) + 0x100000000;
  uint64_t v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_24C667470();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      void v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    int v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    float v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_24C74573E[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_24C74573E[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unint64_t v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              int *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          int *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    *uint64_t v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        sub_24C66DE30("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_24C667470();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        unint64_t v50 = (char *)sub_24C6E4854((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        uint64_t v46 = (char **)v65;
        float v54 = (char *)*v65;
        uint64_t v53 = (char *)v65[1];
        unint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          uint64_t v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        *uint64_t v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        uint64_t v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (uint64_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        *uint64_t v57 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_24C700DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C700DE8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_24C71463C((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_24C6E4780((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_24C6E46B8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_24C71463C((uint64_t *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = &unk_26FEDD0B0;
    memset(&__p[1], 0, 88);
    __p[12] = &unk_26FEDCF80;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sub_24C6FCF00((uint64_t)__p, a2, a3);
    sub_24C6FF648(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sub_24C6FDC88(__p, v13, 0, (uint64_t *)&v38, 0.0);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_24C667470();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)sub_24C6E4854((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = sub_24C7040B8(v34, (long long **)&v35, v30);
      }
      else
      {
        sub_24C704044((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    sub_24C6E4924((void ***)&v35);
    sub_24C6FCBEC((uint64_t)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_24C6E46B8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_24C701250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_24C6E4924((void ***)&a12);
  sub_24C6FCBEC((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C701320@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&v28);
  if (v28)
  {
    uint64_t result = sub_24C71463C((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t result = sub_24C71463C((uint64_t *)&v28);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v28 = &unk_26FEDD0B0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  float v35 = &unk_26FEDCF80;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = 1024;
  sub_24C6FCF00((uint64_t)&v28, a2, a3);
  sub_24C6FF648(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_24C6FF224(&v28, (void **)&v26, a5);
  uint64_t v11 = v26;
  int v12 = v27;
  if (v26 != v27)
  {
    uint64_t v13 = 0;
    int v14 = a4 + 2;
    do
    {
      uint64_t v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_24C667470();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_24C6E4854((uint64_t)(a4 + 2), v18);
        unint64_t v21 = &v19[24 * v16];
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        unint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        uint64_t v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        uint64_t v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    uint64_t v11 = v26;
  }
  if (v11)
  {
    unsigned int v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_24C6FCBEC((uint64_t)&v28);
}

void sub_24C7015AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_24C7015F0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v122);
  if (v122)
  {
    sub_24C71463C((uint64_t *)&v122);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sub_24C71463C((uint64_t *)&v122);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v103 = a7;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0;
  unint64_t v122 = (void **)&unk_26FEDD0B0;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  float v129 = &unk_26FEDCF80;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 1024;
  sub_24C6FCF00((uint64_t)&v122, a2, a3);
  sub_24C6FF648(a1, &v122);
  sub_24C6FD940(&v122, (uint64_t *)v121, a8);
  float v16 = *((float *)v121[0]
        + *(unsigned int *)(**(void **)(*((void *)&v125 + 1)
                                        + 24
                                        * ((((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) & ~((int)(((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_24C712578() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v34 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
        sub_24C689D44(v34, (uint64_t)"(", 1);
        float v35 = (void *)std::ostream::operator<<();
        long long v36 = sub_24C689D44(v35, (uint64_t)") ", 2);
        long long v37 = sub_24C689D44(v36, (uint64_t)"LOG(", 4);
        uint64_t v38 = sub_24C689D44(v37, (uint64_t)"ERROR", 5);
        uint64_t v39 = sub_24C689D44(v38, (uint64_t)") ", 2);
        sub_24C689D44(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_24C6E3EDC(__p);
      }
      uint64_t v40 = a7;
      goto LABEL_114;
    }
    int v104 = a6;
    uint64_t v107 = a3;
    unint64_t v105 = a2;
    long long v118 = 0;
    char v119 = 0;
    uint64_t v120 = 0;
    sub_24C6FD610(&v122, (uint64_t)__p);
    unint64_t v17 = (uint64_t *)__p[0];
    unint64_t v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v19 = v119;
      do
      {
        uint64_t v20 = *v17;
        if (v19 >= (long long *)v120)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v118) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_24C667470();
          }
          if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_24C6E4854((uint64_t)&v120, v23);
          int v26 = &v24[24 * v21];
          *(_OWORD *)int v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v28 = v118;
          unsigned int v27 = v119;
          long long v29 = (long long *)v26;
          if (v119 != v118)
          {
            do
            {
              long long v30 = *(long long *)((char *)v27 - 24);
              *((void *)v29 - 1) = *((void *)v27 - 1);
              *(long long *)((char *)v29 - 24) = v30;
              long long v29 = (long long *)((char *)v29 - 24);
              unsigned int v27 = (long long *)((char *)v27 - 24);
            }
            while (v27 != v28);
            unsigned int v27 = v118;
          }
          uint64_t v19 = (long long *)(v26 + 24);
          long long v118 = v29;
          char v119 = (long long *)(v26 + 24);
          uint64_t v120 = &v24[24 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          long long *v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        char v119 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    double v116 = 0.0;
    long long v31 = v135;
    if ((unint64_t)v135 >= v136)
    {
      uint64_t v33 = sub_24C704324(&v134, &v118, &v116);
    }
    else
    {
      *(void *)uint64_t v135 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_24C6E4780(v31, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
      float v32 = v116;
      *((float *)v31 + 6) = v32;
      uint64_t v33 = (uint64_t)(v31 + 32);
    }
    a2 = v105;
    a3 = v107;
    a6 = v104;
    uint64_t v135 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v118)
    {
      char v119 = v118;
      operator delete(v118);
    }
  }
  if (a5)
  {
    sub_24C6FDC88(&v122, a4 + 1, 1, (uint64_t *)&v118, a8);
    if (a6)
    {
      sub_24C704438(&v116, ((char *)v119 - (char *)v118) >> 5);
      long long v42 = v118;
      long long v41 = v119;
      if (v119 != v118)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (&v42[v43] != (long long *)(*(void *)&v116 + v44))
          {
            sub_24C7044DC((char *)(*(void *)&v116 + v44), *(char **)&v42[v43], *((void *)&v42[v43] + 1), (uint64_t)(*((void *)&v42[v43] + 1) - *(void *)&v42[v43]) >> 3);
            long long v42 = v118;
            long long v41 = v119;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sub_24C6FD610(&v122, (uint64_t)__p);
      uint64_t v46 = sub_24C7045E8(*(uint64_t *)&v116, *(uint64_t *)&v117, (uint64_t)__p);
      uint64_t v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(void *)&v116) >> 3));
      if (v47 == ((char *)v119 - (char *)v118) >> 5)
      {
        unint64_t v49 = v119 - 2;
        unint64_t v48 = (void *)*((void *)v119 - 4);
        if (v48)
        {
          *((void *)v119 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        sub_24C704658((__n128 *)&v118[2 * v47 + 2], (__n128 *)v119, (uint64_t)&v118[2 * v47]);
        unint64_t v49 = v69;
        float v70 = v119;
        if (v119 != v69)
        {
          uint64_t v71 = v119;
          do
          {
            uint64_t v73 = (void *)*((void *)v71 - 4);
            v71 -= 2;
            unint64_t v72 = v73;
            if (v73)
            {
              *((void *)v70 - 3) = v72;
              operator delete(v72);
            }
            float v70 = v71;
          }
          while (v71 != v49);
        }
      }
      char v119 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v116;
      sub_24C6F9C24((void ***)__p);
    }
    uint64_t v74 = (void *)*((void *)v119 - 4);
    int v109 = v119 - 2;
    float v75 = *((float *)v119 - 2);
    if (v74)
    {
      *((void *)v119 - 3) = v74;
      operator delete(v74);
    }
    char v119 = v109;
    for (uint64_t i = v118; i != v109; i += 2)
    {
      memset(__p, 0, 24);
      long long v77 = *(uint64_t **)i;
      uint64_t v78 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        float v80 = 0.0;
      }
      else
      {
        uint64_t v79 = 0;
        float v80 = 0.0;
        do
        {
          uint64_t v81 = *v77;
          float v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            unint64_t v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_24C667470();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84) {
              unint64_t v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v85 = v84;
            }
            int v86 = (char *)sub_24C6E4854((uint64_t)&__p[2], v85);
            std::string::size_type v88 = &v86[24 * v83];
            *(_OWORD *)std::string::size_type v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            long long v90 = (char *)__p[0];
            uint64_t v89 = (char *)__p[1];
            uint64_t v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v92 = *(_OWORD *)(v89 - 24);
                *((void *)v91 - 1) = *((void *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              uint64_t v89 = (char *)__p[0];
            }
            uint64_t v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            std::string __p[2] = &v86[24 * v87];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          float v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&double v116 = v80 - v16;
      unsigned int v93 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v94 = sub_24C704718(&v134, (long long **)__p, &v116);
      }
      else
      {
        *(void *)uint64_t v135 = 0;
        *((void *)v93 + 1) = 0;
        *((void *)v93 + 2) = 0;
        sub_24C6E4780(v93, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v116);
        uint64_t v94 = (uint64_t)(v93 + 32);
      }
      uint64_t v135 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v95 = v134;
    for (j = v135; (char *)v95 != j; v95 += 32)
    {
      float v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        double v98 = v97 - v75;
        long double v99 = exp(v98);
        if (v98 <= -10.0)
        {
          double v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          long double v100 = expm1(-v99);
          double v101 = log(-v100);
        }
        float v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v118;
    sub_24C6E4924((void ***)__p);
    uint64_t v51 = v134;
    unint64_t v50 = v135;
  }
  else
  {
    uint64_t v51 = v134;
    unint64_t v50 = v135;
    if (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5))
    {
      uint64_t v108 = a3;
      uint64_t v106 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &unk_26FEDD0B0;
        __p[12] = &unk_26FEDCF80;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        uint64_t v115 = 1024;
        sub_24C6FCF00((uint64_t)__p, a2, a3);
        sub_24C6FF648(a1, __p);
        long long v118 = 0;
        char v119 = 0;
        uint64_t v120 = 0;
        sub_24C6FF224(__p, (void **)&v116, a8);
        double v53 = v116;
        double v52 = v117;
        float v54 = 0.0;
        if (*(void *)&v116 != *(void *)&v117)
        {
          unint64_t v55 = v119;
          do
          {
            uint64_t v56 = **(void **)&v53;
            if (v55 >= (long long *)v120)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v118) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_24C667470();
              }
              if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              int v60 = (char *)sub_24C6E4854((uint64_t)&v120, v59);
              int v62 = &v60[24 * v57];
              *(_OWORD *)int v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              float v64 = v118;
              unint64_t v63 = v119;
              uint64_t v65 = (long long *)v62;
              if (v119 != v118)
              {
                do
                {
                  long long v66 = *(long long *)((char *)v63 - 24);
                  *((void *)v65 - 1) = *((void *)v63 - 1);
                  *(long long *)((char *)v65 - 24) = v66;
                  uint64_t v65 = (long long *)((char *)v65 - 24);
                  unint64_t v63 = (long long *)((char *)v63 - 24);
                }
                while (v63 != v64);
                unint64_t v63 = v118;
              }
              unint64_t v55 = (long long *)(v62 + 24);
              long long v118 = v65;
              char v119 = (long long *)(v62 + 24);
              uint64_t v120 = &v60[24 * v61];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *unint64_t v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              unint64_t v55 = (long long *)((char *)v55 + 24);
            }
            char v119 = v55;
            float v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(void *)&v53 += 8;
          }
          while (*(void *)&v53 != *(void *)&v52);
        }
        float v110 = v54 - v16;
        long long v67 = v135;
        if ((unint64_t)v135 >= v136)
        {
          uint64_t v68 = sub_24C704718(&v134, &v118, &v110);
        }
        else
        {
          *(void *)uint64_t v135 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = 0;
          sub_24C6E4780(v67, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
          *((float *)v67 + 6) = v110;
          uint64_t v68 = (uint64_t)(v67 + 32);
        }
        a2 = v106;
        a3 = v108;
        uint64_t v135 = (char *)v68;
        if (v116 != 0.0)
        {
          double v117 = v116;
          operator delete(*(void **)&v116);
        }
        if (v118)
        {
          char v119 = v118;
          operator delete(v118);
        }
        sub_24C6FCBEC((uint64_t)__p);
        uint64_t v51 = v134;
        unint64_t v50 = v135;
      }
      while (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5));
    }
  }
  *uint64_t v103 = v51;
  v103[1] = (uint64_t)v50;
  v103[2] = v136;
  uint64_t v40 = &v134;
LABEL_114:
  uint64_t *v40 = 0;
  v40[1] = 0;
  void v40[2] = 0;
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  sub_24C6FCBEC((uint64_t)&v122);
  unint64_t v122 = (void **)&v134;
  sub_24C6E4924(&v122);
}

void sub_24C7020F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  sub_24C6F9C24((void ***)&__p);
  std::string __p = &a40;
  sub_24C6E4924((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sub_24C6FCBEC((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_24C6E4924(&a46);
  _Unwind_Resume(a1);
}

float sub_24C702264(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = &unk_26FEDD0B0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = &unk_26FEDCF80;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sub_24C6FCF00((uint64_t)&v8, a2, a3);
  sub_24C6FF648(a1, &v8);
  float v6 = sub_24C6FDAC8(&v8, a4);
  sub_24C6FCBEC((uint64_t)&v8);
  return v6;
}

void sub_24C702324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FCBEC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_24C702338(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  sub_24C6F94D0((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  sub_24C7037B4(&__p, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  long long v11 = __p;
  long long v12 = v46;
  if (__p == v46)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  sub_24C6F94D0((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  sub_24C7037B4(&v40, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  if (v40 != v41)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v40;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v40)
  {
LABEL_24:
    long long v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  float v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_24C712578() <= 1)
  {
    LOBYTE(v43) = 0;
    unsigned int v27 = sub_24C689D44(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    sub_24C689D44(v27, (uint64_t)"(", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    long long v29 = sub_24C689D44(v28, (uint64_t)") ", 2);
    long long v30 = sub_24C689D44(v29, (uint64_t)"LOG(", 4);
    long long v31 = sub_24C689D44(v30, (uint64_t)"WARNING", 7);
    float v32 = sub_24C689D44(v31, (uint64_t)") ", 2);
    uint64_t v33 = sub_24C689D44(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    uint64_t v34 = sub_24C689D44(v33, a2, a3);
    sub_24C689D44(v34, (uint64_t)", Score: ", 9);
    float v35 = (void *)std::ostream::operator<<();
    long long v36 = sub_24C689D44(v35, (uint64_t)". Right: ", 9);
    long long v37 = sub_24C689D44(v36, a4, a5);
    sub_24C689D44(v37, (uint64_t)", Score: ", 9);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_24C689D44(v38, (uint64_t)".", 1);
    sub_24C6E3EDC(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_24C7027A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C7027FC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_24C6E2C90(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_24C70293C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C702994()
{
  return 1;
}

uint64_t sub_24C70299C()
{
  return 1;
}

uint64_t sub_24C7029A4()
{
  return 1;
}

uint64_t sub_24C7029AC()
{
  return 1;
}

void *sub_24C7029B4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_24C6FC0E0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24C702A14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_24C702A30(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  sub_24C702D68(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            sub_24C702D68(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  sub_24C70359C(v43);
  return v24;
}

void sub_24C702D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_24C70359C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24C702D38(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_24C703694((void **)a1, a2 - v2);
  }
}

__n128 sub_24C702D68(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_24C702E18(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *size_t v8 = result;
  ++a1[5];
  return result;
}

void sub_24C702E18(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_24C6E4BEC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_24C703130(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_24C703248((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_24C6E4BEC((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_24C6E4BEC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_24C703368(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_24C703480((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24C7030E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_24C703130(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_24C6E4BEC(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_24C703248(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_24C6E4BEC(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_24C703368(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_24C6E4BEC(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_24C703480(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_24C6E4BEC(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_24C70359C(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_24C703644((uint64_t)a1);
}

uint64_t sub_24C703644(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_24C703694(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_24C667470();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_24C6E515C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_24C7037B4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_24C6E8080(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24C703814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C703830(void *a1)
{
  sub_24C703868(a1);
  JUMPOUT(0x2532F8960);
}

void *sub_24C703868(void *a1)
{
  *a1 = &unk_26FEDCF80;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x2532F8930](*v2, 0x1070C8005A2B047);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_24C7038F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_24C667470();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_24C6E4854(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_24C703A60(a1, &v15);
    sub_24C6FB658((uint64_t)&v15);
  }
}

void sub_24C703A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FB658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C703A60(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C703AD8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C703AD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C703B7C((uint64_t)v11);
  return v9;
}

uint64_t sub_24C703B7C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FB610(a1);
  }
  return a1;
}

uint64_t sub_24C703BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_24C7029B4((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_24C703C70((uint64_t)v8);
  return v4;
}

void sub_24C703C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_24C703C70(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6E48D4(a1);
  }
  return a1;
}

void sub_24C703CA8(void *a1)
{
  sub_24C6FF194(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C703CE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        *uint64_t v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      void *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_24C703D3C(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_24C667470();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v19[4] = result;
    if (v12) {
      long long v13 = (char *)sub_24C6FB764(result, v12);
    }
    else {
      long long v13 = 0;
    }
    unint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    _OWORD v19[2] = v18;
    sub_24C703E64(a1, v19);
    return sub_24C6FBC7C((uint64_t)v19);
  }
  return result;
}

void sub_24C703E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C703E64(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C703EDC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C703EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C703F88((uint64_t)v11);
  return v9;
}

uint64_t sub_24C703F88(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FBC34(a1);
  }
  return a1;
}

void *sub_24C703FC0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6FC0E0(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24C704028(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_24C704044(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_24C6E4780((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_24C7040B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_24C7040B8(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_24C6FB764(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_24C6E4780(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_24C7041C8(a1, v16);
  uint64_t v14 = a1[1];
  sub_24C6FBC7C((uint64_t)v16);
  return v14;
}

void sub_24C7041B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C7041C8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_24C704240((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24C704240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_24C7042EC((uint64_t)v11);
  return v9;
}

uint64_t sub_24C7042EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_24C6FBC34(a1);
  }
  return a1;
}

uint64_t sub_24C704324(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_24C6FB764(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_24C6E4780(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_24C7041C8(a1, v17);
  uint64_t v15 = a1[1];
  sub_24C6FBC7C((uint64_t)v17);
  return v15;
}

void sub_24C704424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_24C704438(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_24C6E4800(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24C7044C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_24C7044DC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_24C667470();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_24C6FC0E0(v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

uint64_t sub_24C7045E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *sub_24C704658(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    sub_24C7046C4(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_24C7046C4(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_24C704718(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_24C667470();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_24C6FB764(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  size_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_24C6E4780(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_24C7041C8(a1, v16);
  uint64_t v14 = a1[1];
  sub_24C6FBC7C((uint64_t)v16);
  return v14;
}

void sub_24C704814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24C6FBC7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C704828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_24C7000C8(a1);
  void *v4 = &unk_26FEDD0D0;
  v4[1] = a2 + 16;
  sub_24C6E1E64((uint64_t)v4);
  return a1;
}

void sub_24C704878(_Unwind_Exception *a1)
{
  sub_24C6E1860(v1);
  _Unwind_Resume(a1);
}

void sub_24C704894(void *a1)
{
  sub_24C6E1860(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C7048CC(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_24C71463C(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_24C71463C(&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sub_24C6E9560(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_24C667470();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)sub_24C6E4854((uint64_t)(a4 + 2), v17);
      uint64_t v20 = &v18[24 * v14];
      *(void *)uint64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      uint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_24C704AC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24C704AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_24C7000C8(a1);
  void *v4 = &unk_26FEDCE70;
  v4[1] = a2 + 16;
  sub_24C6E1E64((uint64_t)v4);
  return a1;
}

void sub_24C704B34(_Unwind_Exception *a1)
{
  sub_24C6E1860(v1);
  _Unwind_Resume(a1);
}

void sub_24C704B50(void *a1)
{
  sub_24C6E1860(a1);
  JUMPOUT(0x2532F8960);
}

void sub_24C704B88(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sub_24C71463C((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_24C71463C((uint64_t *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_24C6E2FD0(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_24C667470();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)sub_24C6E4854((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_24C704DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_24C704DD0()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_24C706B5C((uint64_t)&unk_2697ED7D8, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED7D8);
}

void sub_24C704E40()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_24C705F70((uint64_t)&unk_2697ED718, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED718);
}

void sub_24C704EB0()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_24C704F20((uint64_t)&unk_2697ED770, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED770);
}

uint64_t sub_24C704F20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDCCE0;
  *(void *)(a1 + 8) = a2;
  sub_24C717054(a1 + 16, a2);
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  if (atomic_load_explicit(dword_26BADA840, memory_order_acquire)) {
    sub_24C722260(dword_26BADA840);
  }
  *(void *)(a1 + 48) = &qword_2697ED438;
  *(void *)(a1 + 56) = &qword_2697ED438;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_24C704FA4(_Unwind_Exception *a1)
{
  sub_24C717134(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C704FB8(uint64_t a1)
{
  return a1;
}

uint64_t *sub_24C704FF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_24C716A34((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = sub_24C716A4C(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_24C716B88((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v13);
  }
LABEL_4:
  __n128 result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2697ED438)
  {
    uint64_t v6 = sub_24C7076A8(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    __n128 result = (uint64_t *)MEMORY[0x2532F8960](v7, 0x1012C40EC159624);
  }
  int v9 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_2697ED438)
  {
    uint64_t v10 = sub_24C7076A8(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x2532F8960](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_24C705104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C70511C(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      JUMPOUT(0x2532F8960);
    }
  }
  return result;
}

void sub_24C705198(uint64_t a1)
{
  sub_24C704FB8(a1);
  JUMPOUT(0x2532F8960);
}

unsigned __int8 *sub_24C7051D0(uint64_t a1)
{
  __n128 result = sub_24C71AEDC((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_24C7052A0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if ((sub_24C70777C((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v36 + 1);
      unsigned int v9 = **(unsigned char **)v36;
      if ((char)**(unsigned char **)v36 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v27 = sub_24C723D18(*(uint64_t *)v36, v10 - 128);
          *(void *)uint64_t v36 = v27;
          if (!v27) {
            goto LABEL_56;
          }
          uint64_t v8 = (char *)v27;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        uint64_t v8 = (char *)(*(void *)v36 + 2);
      }
      *(void *)uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          unint64_t v14 = v8 + 1;
          int v15 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *v14;
          int v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            uint64_t v30 = sub_24C723C68((uint64_t)v8, v15);
            *(void *)uint64_t v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v14 = v8 + 2;
LABEL_17:
            *(void *)uint64_t v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v17 = *(void *)(a1 + 8);
          char v12 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          unint64_t v18 = (std::string *)sub_24C715890(v13, (uint64_t)v12);
          uint64_t v19 = (void *)sub_24C723DCC(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = v8 + 1;
          int v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v32 = sub_24C723C68((uint64_t)v8, v21);
            *(void *)uint64_t v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = v8 + 1;
          int v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          int v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v34 = sub_24C723C68((uint64_t)v8, v24);
            *(void *)uint64_t v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
              uint64_t v8 = *(char **)v36;
            }
            uint64_t v19 = sub_24C724288(v9, v29, v8, a3);
          }
          else
          {
            uint64_t v19 = sub_24C71C7AC((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_2697ED770, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(void *)uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(void *)uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (sub_24C70777C((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v36;
}

char *sub_24C7055E4(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_24C715FA8((uint64_t)a3, v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    char *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = sub_24C70589C(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = sub_24C70589C(a3, 3, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_24C715FA8((uint64_t)a3, v4);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  char *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_24C715FA8((uint64_t)a3, v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  char *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = sub_24C71D5A4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    int v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    int v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v19) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_24C7160BC((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_24C70589C(unint64_t *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = a4 + 2;
        do
        {
          *(v11 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = a4 + 2;
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = a4 + 1;
    }
    *unsigned int v11 = v4;
    unsigned int v15 = v11 + 1;
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return &v15[v4];
  }
LABEL_24:
  return sub_24C716304(a1, a2, (void **)a3, a4);
}

uint64_t sub_24C7059C8(uint64_t a1)
{
  uint64_t result = sub_24C7202D8(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_24C705B3C(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26FEDBFE8, (const struct __class_type_info *)&unk_26FEDBE48, 0))sub_24C7080C0(); {
  sub_24C705BC4(a1, (uint64_t)lpsrc);
  }
}

void sub_24C705BC4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_24C716A34((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = sub_24C716A4C(v21, "CHECK failed: (&from) != (this): ");
    sub_24C716B88((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v21);
  }
  sub_24C71AF7C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      sub_24C715858((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_24C715858((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_24C705D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C705D60(uint64_t a1)
{
  return sub_24C71C40C(a1 + 16);
}

uint64_t *sub_24C705D68(uint64_t a1, uint64_t a2)
{
  sub_24C71C1F4(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_24C7078BC((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = sub_24C7078BC((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_24C6FA0F0(&a9, 0) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_24C6FA0F0(&a9, 0) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_2697ED438 || *(uint64_t **)(a2 + 48) != &qword_2697ED438)
  {
    unsigned int v17 = sub_24C715890((uint64_t *)(a1 + 48), v16);
    uint64_t v18 = sub_24C715890((uint64_t *)(a2 + 48), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 56);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_2697ED438 || *(uint64_t **)(a2 + 56) != &qword_2697ED438)
  {
    unint64_t v23 = sub_24C715890(result, (uint64_t)v9);
    uint64_t result = sub_24C715890((uint64_t *)(a2 + 56), (uint64_t)v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

void *sub_24C705F60@<X0>(void *a1@<X8>)
{
  return sub_24C6698FC(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_24C705F70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDC728;
  *(void *)(a1 + 8) = a2;
  sub_24C717054(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_26BADA858, memory_order_acquire)) {
    sub_24C722260(dword_26BADA858);
  }
  *(void *)(a1 + 72) = &qword_2697ED438;
  *(_DWORD *)(a1 + 8sub_24C6FA0F0(&a9, 0) = 0;
  return a1;
}

void sub_24C706008(_Unwind_Exception *a1)
{
  sub_24C707AF8(v2);
  sub_24C717134(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C706028(uint64_t a1)
{
  return a1;
}

uint64_t sub_24C70606C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_24C716A34((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = sub_24C716A4C(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_24C716B88((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_24C716B90((uint64_t)v10);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 72);
  uint64_t v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_2697ED438)
  {
    uint64_t v7 = sub_24C7076A8(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x2532F8960](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_24C706134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C706150(uint64_t a1)
{
  sub_24C706028(a1);
  JUMPOUT(0x2532F8960);
}

void *sub_24C706188()
{
  if (atomic_load_explicit(dword_26BADA858, memory_order_acquire)) {
    sub_24C722260(dword_26BADA858);
  }
  return &unk_2697ED718;
}

unsigned __int8 *sub_24C7061C4(uint64_t a1)
{
  sub_24C71AEDC((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_24C707998((unsigned __int8 *)(a1 + 48));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 8sub_24C6FA0F0(&a9, 0) = 0;
  *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_24C706258(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v29 = a2;
  int v5 = 0;
  if ((sub_24C70777C((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v29 + 1);
      unsigned int v9 = **(unsigned char **)v29;
      if (((char)**(unsigned char **)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v26 = sub_24C723D18(*(uint64_t *)v29, v10 - 128);
      *(void *)uint64_t v29 = v26;
      if (!v26) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v26;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 8sub_24C6FA0F0(&a9, 0) = *(_DWORD *)v8;
          *(void *)uint64_t v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = v8 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            *(void *)uint64_t v29 = v15 + 1;
            unsigned int v17 = *(int **)(a1 + 64);
            if (!v17) {
              break;
            }
            uint64_t v18 = *(int *)(a1 + 56);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_24C729108(a1 + 48, v19 + 1);
                unsigned int v17 = *(int **)(a1 + 64);
                int v19 = *v17;
              }
              int *v17 = v19 + 1;
              uint64_t v20 = sub_24C7073E8(*(void *)(a1 + 48));
              uint64_t v21 = *(void *)(a1 + 64);
              uint64_t v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              uint64_t v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = (char *)sub_24C706510(a3, v20, v16);
            *(void *)uint64_t v29 = v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v29;
          }
          uint64_t v14 = sub_24C724288(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = sub_24C71C7AC((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_2697ED718, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      long long v25 = (std::string *)sub_24C715890((uint64_t *)(a1 + 72), (uint64_t)v24);
      uint64_t v14 = (void *)sub_24C723DCC(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(void *)uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(void *)uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (sub_24C70777C((uint64_t)a3, (char **)v29, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v29 + 2);
LABEL_7:
    *(void *)uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v29;
}

uint64_t sub_24C706510(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_24C723D5C((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_24C707BE8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_24C7052A0(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_24C7065D8(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_24C70589C(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_24C715FA8((uint64_t)a3, v4);
      }
      uint64_t v9 = sub_24C6F90E8(a1 + 48, i);
      char *v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      uint64_t v4 = sub_24C7055E4(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_24C715FA8((uint64_t)a3, v4);
    }
    int v15 = *(_DWORD *)(a1 + 80);
    char *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  uint64_t v16 = sub_24C71D5A4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  unsigned int v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v16) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_24C7160BC((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_24C7067CC(uint64_t a1)
{
  uint64_t v2 = sub_24C7202D8(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_24C7059C8(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_24C7068D8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26FEDBFE8, (const struct __class_type_info *)&unk_26FEDBD78, 0))sub_24C7080C0(); {
  sub_24C706960(a1, (uint64_t)lpsrc);
  }
}

void sub_24C706960(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_24C716A34((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = sub_24C716A4C(v18, "CHECK failed: (&from) != (this): ");
    sub_24C716B88((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v18);
  }
  sub_24C71AF7C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_24C707CA4(a1 + 48, a2 + 48);
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_24C715858((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0) {
      *(_DWORD *)(a1 + 8sub_24C6FA0F0(&a9, 0) = *(_DWORD *)(a2 + 80);
    }
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_24C706A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C706AA8(uint64_t a1)
{
  uint64_t result = sub_24C71C40C(a1 + 16);
  if (result)
  {
    return sub_24C706AF4(a1 + 48);
  }
  return result;
}

BOOL sub_24C706AF4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_24C6F90E8(a1, v2);
  }
  while ((sub_24C71C40C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_24C706B4C@<X0>(void *a1@<X8>)
{
  return sub_24C6698FC(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_24C706B5C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDC8E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  if (atomic_load_explicit(dword_26BADA780, memory_order_acquire)) {
    sub_24C722260(dword_26BADA780);
  }
  return a1;
}

void sub_24C706BCC(_Unwind_Exception *a1)
{
  sub_24C707E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C706BE4(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_24C716A34((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = sub_24C716A4C(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_24C716B88((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v8);
  }
LABEL_4:
  sub_24C70511C(v3);
  sub_24C707E54((uint64_t *)(a1 + 16));
  return a1;
}

void sub_24C706C7C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  sub_24C669A24(a1);
}

void sub_24C706CA0(uint64_t a1)
{
  sub_24C706BE4(a1);
  JUMPOUT(0x2532F8960);
}

unsigned __int8 *sub_24C706CD8(uint64_t a1)
{
  uint64_t result = sub_24C707A48((unsigned __int8 *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_24C706D2C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v22 = a2;
  if ((sub_24C70777C((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v22 + 1;
      unsigned int v7 = *v22;
      if ((*v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      int v19 = (char *)sub_24C723D18((uint64_t)v22, v8 - 128);
      uint64_t v22 = v19;
      if (!v19) {
        return 0;
      }
      unint64_t v6 = v19;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v22 = v11 + 1;
          int v13 = *(int **)(a1 + 32);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 24);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_24C729108(a1 + 16, v15 + 1);
              int v13 = *(int **)(a1 + 32);
              int v15 = *v13;
            }
            *int v13 = v15 + 1;
            uint64_t v16 = sub_24C7074B8(*(void *)(a1 + 16));
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          uint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_24:
          unint64_t v11 = (char *)sub_24C706F0C(a3, v16, v12);
          uint64_t v22 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        int v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
        unint64_t v6 = v22;
      }
      uint64_t v22 = (char *)sub_24C724288(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (sub_24C70777C((uint64_t)a3, &v22, a3[11].i32[1])) {
        return v22;
      }
    }
    unint64_t v6 = v22 + 2;
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_24C706F0C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_24C723D5C((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_24C707BE8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_24C706258(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_24C706FD4(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        long long __dst = sub_24C715FA8((uint64_t)a3, __dst);
      }
      uint64_t v8 = sub_24C6F920C(a1 + 16, i);
      *long long __dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          unsigned int v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        unsigned int v10 = __dst + 2;
      }
      long long __dst = sub_24C7065D8(v8, v10, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_24C7160BC((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_24C707150(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_24C7067CC(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 4sub_24C6FA0F0(&a9, 0) = v2;
  return v2;
}

void sub_24C7071FC(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26FEDBFE8, (const struct __class_type_info *)&unk_26FEDBDD0, 0))sub_24C7080C0(); {
  sub_24C707284(a1, (uint64_t)lpsrc);
  }
}

void sub_24C707284(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_24C716A34((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    unint64_t v4 = sub_24C716A4C(v14, "CHECK failed: (&from) != (this): ");
    sub_24C716B88((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v14);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)sub_24C7078BC((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_24C707F10(a1 + 16, a2 + 16);
}

void sub_24C707350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_24C707368(uint64_t a1)
{
  return sub_24C707370(a1 + 16);
}

BOOL sub_24C707370(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_24C6F920C(a1, v2);
    if (!sub_24C71C40C(v5 + 16)) {
      break;
    }
  }
  while (sub_24C706AF4(v5 + 48));
  return v3 < 1;
}

void *sub_24C7073D8@<X0>(void *a1@<X8>)
{
  return sub_24C6698FC(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_24C7073E8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26FEDBE48, 80);
  }
  uint64_t v2 = sub_24C7153A0(a1, 80);
  sub_24C704F20(v2, a1);
  return v2;
}

void sub_24C707494(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_24C7074B8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26FEDBD78, 88);
  }
  uint64_t v2 = sub_24C7153A0(a1, 88);
  sub_24C705F70(v2, a1);
  return v2;
}

void sub_24C707564(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_24C707588(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26FEDBDD0, 48);
  }
  uint64_t v2 = sub_24C7153A0(a1, 48);
  sub_24C706B5C(v2, a1);
  return v2;
}

void sub_24C707634(_Unwind_Exception *a1)
{
  MEMORY[0x2532F8960](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_24C707658()
{
  return sub_24C7073E8(0);
}

uint64_t sub_24C707660(uint64_t a1, uint64_t a2)
{
  return sub_24C7073E8(a2);
}

uint64_t sub_24C707668(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_24C707670()
{
  return 0;
}

uint64_t sub_24C707678()
{
  return sub_24C7074B8(0);
}

uint64_t sub_24C707680(uint64_t a1, uint64_t a2)
{
  return sub_24C7074B8(a2);
}

uint64_t sub_24C707688(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_24C707690()
{
  return sub_24C707588(0);
}

uint64_t sub_24C707698(uint64_t a1, uint64_t a2)
{
  return sub_24C707588(a2);
}

uint64_t sub_24C7076A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_24C7076A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_24C716A34((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = sub_24C716A4C(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_24C716B88((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v6);
    uint64_t result = *a1;
  }
  if (!result)
  {
    sub_24C716A34((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    BOOL v4 = sub_24C716A4C(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_24C716B88((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_24C70775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_24C70777C(uint64_t a1, char **a2, int a3)
{
  unint64_t v6 = *a2;
  if (!*a2)
  {
    sub_24C716A34((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = sub_24C716A4C(v13, "CHECK failed: *ptr: ");
    sub_24C716B88((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v13);
    unint64_t v6 = *a2;
  }
  if ((unint64_t)v6 < *(void *)a1) {
    return 0;
  }
  signed int v9 = v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_24C716A34((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    int v10 = sub_24C716A4C(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_24C716B88((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(void *)(a1 + 16)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = sub_24C723400(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_24C70789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_24C7078BC(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v2 + 32) + 32) + 40))(*(void *)(*(void *)(v2 + 32) + 32), &unk_26FEDC100, 32);
  }
  unint64_t v3 = sub_24C7150A4((void *)v2, 0x20uLL, (uint64_t)sub_24C707984);
  *(_OWORD *)unint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(void *)unint64_t v3 = v2;
  return v3 + 8;
}

void sub_24C707984(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned __int8 *sub_24C707998(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_24C716A34((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_24C716A4C(v7, "CHECK failed: (n) >= (0): ");
    sub_24C716B88((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_24C716B90((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_24C7051D0(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_24C707A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_24C707A48(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_24C716A34((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_24C716A4C(v7, "CHECK failed: (n) >= (0): ");
    sub_24C716B88((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_24C716B90((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_24C7061C4(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_24C707AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C707AF8(uint64_t *a1)
{
  sub_24C707B34(a1);
  return sub_24C707BB4(a1);
}

void sub_24C707B34(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_24C704FB8(*v3);
          MEMORY[0x2532F8960](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_24C707BB4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_24C714D88(v2);
  }
  return a1;
}

uint64_t sub_24C707BE8(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 >= 0x7FFFFFF0)
  {
    sub_24C716A34((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = sub_24C716A4C(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_24C716B88((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v11);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = a2 - v7 + a3;
  *(void *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_24C707C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C707CA4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_24C716A34((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_24C716A4C(v11, "CHECK failed: (&other) != (this): ");
    sub_24C716B88((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_24C72911C((uint64_t *)a1, v5);
    sub_24C707D94((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_24C707D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C707D94(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_24C707E44(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_24C7073E8(v18);
      sub_24C707E44(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_24C707E44(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_24C707E54(uint64_t *a1)
{
  sub_24C707E90(a1);
  return sub_24C707BB4(a1);
}

void sub_24C707E90(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_24C706028(*v3);
          MEMORY[0x2532F8960](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_24C707F10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_24C716A34((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_24C716A4C(v11, "CHECK failed: (&other) != (this): ");
    sub_24C716B88((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_24C72911C((uint64_t *)a1, v5);
    sub_24C708000((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_24C707FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C708000(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_24C7080B0(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_24C7074B8(v18);
      sub_24C7080B0(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_24C7080B0(uint64_t a1, uint64_t a2)
{
}

void sub_24C7080C0()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_24C7080EC()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70EAA0((uint64_t)&unk_2697ED450, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED450);
}

void sub_24C70815C()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70E110(qword_2697ED6D0, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)qword_2697ED6D0);
}

void sub_24C7081CC()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70C244((uint64_t)&unk_2697ED650, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED650);
}

void sub_24C70823C()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70D85C((uint64_t)&unk_2697ED608, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED608);
}

void sub_24C7082AC()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70D05C(qword_2697ED6A8, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)qword_2697ED6A8);
}

void sub_24C70831C()
{
  sub_24C7166C8(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_24C70839C((uint64_t)&unk_2697ED4C0, 0);
  sub_24C722C0C((uint64_t)sub_24C721FF0, (uint64_t)&unk_2697ED4C0);
}

BOOL sub_24C70838C(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_24C70839C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26FEDC458;
  *(void *)(a1 + 8) = a2;
  sub_24C717054(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  *(void *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_24C6FA0F0(&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_24C6FA0F0(&a9, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(dword_26BADA878, memory_order_acquire)) {
    sub_24C722260(dword_26BADA878);
  }
  *(void *)(a1 + 152) = &qword_2697ED438;
  *(void *)(a1 + 16sub_24C6FA0F0(&a9, 0) = &qword_2697ED438;
  *(void *)(a1 + 168) = &qword_2697ED438;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = &qword_2697ED438;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_24C6FA0F0(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28sub_24C6FA0F0(&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_24C730BE0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(void *)(a1 + 32sub_24C6FA0F0(&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_24C7084D8(_Unwind_Exception *a1)
{
  sub_24C729104(v3);
  sub_24C729104(v5);
  sub_24C729104(v4);
  sub_24C729104(v2);
  sub_24C717134(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24C70850C(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_24C708568(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_24C716A34((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = sub_24C716A4C(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_24C716B88((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_24C716B90((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_2697ED438)
  {
    uint64_t v5 = sub_24C7076A8(a1 + 19);
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x2532F8960](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_2697ED438)
  {
    uint64_t v7 = sub_24C7076A8(a1 + 20);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x2532F8960](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_2697ED438)
  {
    uint64_t v9 = sub_24C7076A8(a1 + 21);
    uint64_t v10 = v9;
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x2532F8960](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    uint64_t v11 = sub_24C7076A8(a1 + 22);
    uint64_t v12 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x2532F8960](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    uint64_t v13 = sub_24C7076A8(a1 + 23);
    uint64_t v14 = v13;
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x2532F8960](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    uint64_t v15 = sub_24C7076A8(a1 + 24);
    uint64_t v16 = v15;
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x2532F8960](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    uint64_t v17 = sub_24C7076A8(a1 + 25);
    uint64_t v18 = v17;
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x2532F8960](v18, 0x1012C40EC159624);
  }
  uint64_t result = a1 + 26;
  if (a1[26])
  {
    uint64_t v20 = sub_24C7076A8(result);
    uint64_t v21 = v20;
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    uint64_t result = (uint64_t *)MEMORY[0x2532F8960](v21, 0x1012C40EC159624);
  }
  uint64_t v23 = (uint64_t *)a1[27];
  uint64_t v22 = a1 + 27;
  if (v23 != &qword_2697ED438)
  {
    uint64_t v24 = sub_24C7076A8(v22);
    uint64_t v25 = v24;
    if (*(char *)(v24 + 23) < 0) {
      operator delete(*(void **)v24);
    }
    return (uint64_t *)MEMORY[0x2532F8960](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_24C708824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_24C716B90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24C708840(uint64_t *a1)
{
  sub_24C70850C(a1);
  JUMPOUT(0x2532F8960);
}

uint64_t sub_24C708878(uint64_t a1)
{
  sub_24C71AEDC((unsigned __int8 *)(a1 + 16));
  sub_24C710FA8(a1 + 56);
  sub_24C710FA8(a1 + 80);
  sub_24C710FA8(a1 + 104);
  uint64_t result = sub_24C710FA8(a1 + 128);
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3) {
    goto LABEL_10;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v6 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v3 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v5 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t result = (uint64_t)sub_24C715B84((std::string *)(a1 + 176), &off_2697ECEE8);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = (uint64_t)sub_24C715B84((std::string *)(a1 + 184), &off_2697ECF28);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = (uint64_t)sub_24C715B84((std::string *)(a1 + 192), &off_2697ECF50);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    uint64_t result = (uint64_t)sub_24C715B84((std::string *)(a1 + 200), &off_2697ECF70);
    if ((v3 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v3 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t result = (uint64_t)sub_24C715B84((std::string *)(a1 + 208), &off_2697ECF08);
  if ((v3 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v7 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(void *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 271) = 0;
    *(void *)(a1 + 255) = 0;
    *(void *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(void *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(void *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_24C730BE0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(void *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(void *)(a1 + 4sub_24C6FA0F0(&a9, 0) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(unsigned char **)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_24C708B40(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)char v188 = a2;
  char v5 = sub_24C70777C((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  uint64_t result = *(char **)v188;
  if (v5) {
    return result;
  }
  v187 = (unint64_t *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a1 + 128);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  unint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    uint64_t v11 = result + 1;
    unsigned int v12 = *result;
    if ((*result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      uint64_t v11 = result + 2;
LABEL_7:
      *(void *)char v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (char *)sub_24C723D18((uint64_t)result, v13 - 128);
    *(void *)char v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (2)
        {
          uint64_t v14 = result + 1;
          *(void *)char v188 = result + 1;
          uint64_t v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_24C729108(a1 + 56, v17 + 1);
            uint64_t v15 = *(int **)(a1 + 72);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *(int *)(a1 + 64);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            uint64_t v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *(_DWORD *)(a1 + 68)) {
            goto LABEL_16;
          }
LABEL_17:
          int *v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
            (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v19 + 32) + 32) + 40))(*(void *)(*(void *)(v19 + 32) + 32), &unk_26FEDC168, 24);
          }
          uint64_t v18 = (std::string *)sub_24C7150A4((void *)v19, 0x18uLL, (uint64_t)sub_24C710EB4);
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = v18;
          uint64_t v14 = *(char **)v188;
LABEL_22:
          uint64_t result = (char *)sub_24C723DCC(v18, v14, (uint64_t)a3);
          *(void *)char v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        char v26 = v11 + 1;
        unint64_t v27 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, (v29 - 128));
          *(void *)char v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          char v26 = v11 + 2;
LABEL_36:
          *(void *)char v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v186 = (std::string *)sub_24C7078BC(v187);
          }
          sub_24C723BBC(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        int v31 = v11 + 1;
        LODWORD(v3sub_24C6FA0F0(&a9, 0) = *v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *v31;
        uint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v30);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = v11 + 2;
LABEL_43:
          *(void *)char v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (1)
        {
          int v33 = result + 1;
          *(void *)char v188 = result + 1;
          uint64_t v34 = *(int **)(a1 + 96);
          if (!v34) {
            break;
          }
          uint64_t v35 = *(int *)(a1 + 88);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              sub_24C729108(a1 + 80, v36 + 1);
              uint64_t v34 = *(int **)(a1 + 96);
              int v36 = *v34;
            }
            int *v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v38 + 32) + 32) + 40))(*(void *)(*(void *)(v38 + 32) + 32), &unk_26FEDC168, 24);
            }
            int v37 = (std::string *)sub_24C7150A4((void *)v38, 0x18uLL, (uint64_t)sub_24C710EB4);
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *(void *)(a1 + 96);
            uint64_t v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = *(char **)v188;
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (char *)sub_24C723DCC(v37, v33, (uint64_t)a3);
          *(void *)char v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200u;
        uint64_t v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *v42;
        uint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v41);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = v11 + 2;
LABEL_65:
          *(void *)char v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v44 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 28sub_24C6FA0F0(&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x800u;
        uint64_t v47 = v11 + 1;
        uint64_t v48 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v48);
          *(void *)char v188 = result;
          *(void *)(a1 + 232) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = v11 + 2;
LABEL_76:
          *(void *)char v188 = v47;
          *(void *)(a1 + 232) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400u;
        uint64_t v51 = v11 + 1;
        LODWORD(v5sub_24C6FA0F0(&a9, 0) = *v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *v51;
        uint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v50);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = v11 + 2;
LABEL_81:
          *(void *)char v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        long long v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *v54;
        uint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v53);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 24sub_24C6FA0F0(&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = v11 + 2;
LABEL_86:
          *(void *)char v188 = v54;
          *(_DWORD *)(a1 + 24sub_24C6FA0F0(&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        unint64_t v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *v57;
        uint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v56);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v57 = v11 + 2;
LABEL_91:
          *(void *)char v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        uint64_t v61 = v11 + 1;
        LODWORD(v6sub_24C6FA0F0(&a9, 0) = *v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *v61;
        uint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v60);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = v11 + 2;
LABEL_98:
          *(void *)char v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        float v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *v64;
        uint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v63);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v64 = v11 + 2;
LABEL_103:
          *(void *)char v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        long long v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *v67;
        uint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v66);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 30sub_24C6FA0F0(&a9, 0) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = v11 + 2;
LABEL_108:
          *(void *)char v188 = v67;
          *(_DWORD *)(a1 + 30sub_24C6FA0F0(&a9, 0) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        float v69 = v11 + 1;
        uint64_t v70 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *v69;
        uint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v70);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v69 = v11 + 2;
LABEL_113:
          *(void *)char v188 = v69;
          *(unsigned char *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        uint64_t v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *v73;
        uint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v72);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = v11 + 2;
LABEL_118:
          *(void *)char v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        float v75 = v11 + 1;
        uint64_t v76 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *v75;
        uint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v76);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v75 = v11 + 2;
LABEL_123:
          *(void *)char v188 = v75;
          *(unsigned char *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        uint64_t v78 = v11 + 1;
        uint64_t v79 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *v78;
        uint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v79);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 311) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = v11 + 2;
LABEL_128:
          *(void *)char v188 = v78;
          *(unsigned char *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        uint64_t v81 = v11 + 1;
        uint64_t v82 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *v81;
        uint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v82);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 31sub_24C6FA0F0(&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v81 = v11 + 2;
LABEL_133:
          *(void *)char v188 = v81;
          *(unsigned char *)(a1 + 31sub_24C6FA0F0(&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        unint64_t v84 = v11 + 1;
        uint64_t v85 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *v84;
        uint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v85);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = v11 + 2;
LABEL_138:
          *(void *)char v188 = v84;
          *(unsigned char *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        uint64_t v87 = v11 + 1;
        uint64_t v88 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *v87;
        uint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v88);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = v11 + 2;
LABEL_143:
          *(void *)char v188 = v87;
          *(unsigned char *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        long long v90 = v11 + 1;
        uint64_t v91 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *v90;
        uint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v91);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 246) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = v11 + 2;
LABEL_148:
          *(void *)char v188 = v90;
          *(unsigned char *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        while (1)
        {
          unsigned int v93 = result + 2;
          *(void *)char v188 = result + 2;
          uint64_t v94 = *(int **)(a1 + 120);
          if (!v94) {
            break;
          }
          uint64_t v95 = *(int *)(a1 + 112);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_156:
              sub_24C729108(a1 + 104, v96 + 1);
              uint64_t v94 = *(int **)(a1 + 120);
              int v96 = *v94;
            }
            int *v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v98 + 32) + 32) + 40))(*(void *)(*(void *)(v98 + 32) + 32), &unk_26FEDC168, 24);
            }
            float v97 = (std::string *)sub_24C7150A4((void *)v98, 0x18uLL, (uint64_t)sub_24C710EB4);
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *(void *)(a1 + 120);
            uint64_t v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            unsigned int v93 = *(char **)v188;
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          float v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (char *)sub_24C723DCC(v97, v93, (uint64_t)a3);
          *(void *)char v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        int v109 = v11 + 1;
        uint64_t v110 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *v109;
        uint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v110);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v109 = v11 + 2;
LABEL_187:
          *(void *)char v188 = v109;
          *(unsigned char *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        long long v112 = v11 + 1;
        uint64_t v113 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *v112;
        uint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v113);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v112 = v11 + 2;
LABEL_192:
          *(void *)char v188 = v112;
          *(unsigned char *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        uint64_t v115 = v11 + 1;
        uint64_t v116 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *v115;
        uint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v116);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = v11 + 2;
LABEL_197:
          *(void *)char v188 = v115;
          *(unsigned char *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        long long v118 = v11 + 1;
        uint64_t v119 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *v118;
        uint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v119);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v118 = v11 + 2;
LABEL_202:
          *(void *)char v188 = v118;
          *(unsigned char *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v121 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        long long v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *v123;
        uint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v122);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v123 = v11 + 2;
LABEL_211:
          *(void *)char v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x40u;
        long long v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *v126;
        uint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v125);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = v11 + 2;
LABEL_216:
          *(void *)char v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        float v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *v129;
        uint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v128);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 32sub_24C6FA0F0(&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v129 = v11 + 2;
LABEL_221:
          *(void *)char v188 = v129;
          *(_DWORD *)(a1 + 32sub_24C6FA0F0(&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x100u;
        uint64_t v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *v132;
        uint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v131);
          *(void *)char v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v132 = v11 + 2;
LABEL_226:
          *(void *)char v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v153 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_2697ECEE8;
        long long v137 = (uint64_t *)(a1 + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v134 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_2697ECF28;
        long long v137 = (uint64_t *)(a1 + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v138 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_2697ECF50;
        long long v137 = (uint64_t *)(a1 + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v139 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_2697ECF70;
        long long v137 = (uint64_t *)(a1 + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80u;
        uint64_t v140 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_2697ECF08;
        long long v137 = (uint64_t *)(a1 + 208);
LABEL_270:
        long long v152 = (std::string *)sub_24C7159CC(v137, v136, (uint64_t)v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        long long v141 = v11 + 1;
        uint64_t v142 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *v141;
        uint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v142);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 25sub_24C6FA0F0(&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v141 = v11 + 2;
LABEL_247:
          *(void *)char v188 = v141;
          *(unsigned char *)(a1 + 25sub_24C6FA0F0(&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        long long v144 = v11 + 1;
        uint64_t v145 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *v144;
        uint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v145);
          *(void *)char v188 = result;
          *(unsigned char *)(a1 + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v144 = v11 + 2;
LABEL_252:
          *(void *)char v188 = v144;
          *(unsigned char *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_255:
        *(void *)char v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        int v148 = v11 + 1;
        uint64_t v149 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *v148;
        uint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (char *)sub_24C723CD0((uint64_t)v11, v149);
          *(void *)char v188 = result;
          *(void *)(a1 + 264) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = v11 + 2;
LABEL_260:
          *(void *)char v188 = v148;
          *(void *)(a1 + 264) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100u;
        uint64_t v151 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 216);
LABEL_265:
        long long v152 = (std::string *)sub_24C715890(v25, (uint64_t)v24);
LABEL_271:
        uint64_t result = (char *)sub_24C723DCC(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            float v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            float v156 = (std::string *)sub_24C7078BC(v187);
            uint64_t v11 = *(char **)v188;
          }
          uint64_t result = (char *)sub_24C724288(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (char *)sub_24C71C7AC((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_2697ED4C0, v187, a3);
        }
LABEL_272:
        *(void *)char v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = sub_24C70777C((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        uint64_t result = *(char **)v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    double v101 = result + 2;
    *(void *)char v188 = result + 2;
    float v102 = *(int **)(a1 + 144);
    if (!v102) {
      break;
    }
    uint64_t v103 = *(int *)(a1 + 136);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_173:
        sub_24C729108(a1 + 128, v104 + 1);
        float v102 = *(int **)(a1 + 144);
        int v104 = *v102;
      }
      int *v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v106 + 32) + 32) + 40))(*(void *)(*(void *)(v106 + 32) + 32), &unk_26FEDC168, 24);
      }
      unint64_t v105 = (std::string *)sub_24C7150A4((void *)v106, 0x18uLL, (uint64_t)sub_24C710EB4);
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *(void *)(a1 + 144);
      uint64_t v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      double v101 = *(char **)v188;
      goto LABEL_179;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    unint64_t v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (char *)sub_24C723DCC(v105, v101, (uint64_t)a3);
    *(void *)char v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_173;
}

char *sub_24C70A1B8(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = sub_24C71106C(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_24C716518(a3, 1, v8, a2);
    }
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    a2 = sub_24C70589C((unint64_t *)a3, 2, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = sub_24C71106C(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v24 = (const void *)v22;
        }
        else {
          uint64_t v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_24C716518(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = sub_24C70589C((unint64_t *)a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  int v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v34 = *(void *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  int v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*(unsigned char *)(a1 + 44))
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v59 = *(unsigned char *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v65 = *(unsigned char *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  char v66 = *(unsigned char *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v67 = *(unsigned char *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v69 = *(unsigned char *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  char v70 = *(unsigned char *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v71 = *(unsigned char *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = sub_24C71106C(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          uint64_t v76 = (const void *)v74;
        }
        else {
          uint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_24C716518(a3, 30, v74, a2);
    }
  }
  int v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = sub_24C71106C(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          uint64_t v81 = (const void *)v79;
        }
        else {
          uint64_t v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_24C716518(a3, 31, v79, a2);
    }
  }
  int v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v83 = *(unsigned char *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v84 = *(unsigned char *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    char v86 = *(unsigned char *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  char v87 = *(unsigned char *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_24C70589C((unint64_t *)a3, 36, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_24C715FA8((uint64_t)a3, a2);
    }
    unint64_t v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_24C70589C((unint64_t *)a3, 44, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_24C70589C((unint64_t *)a3, 45, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_24C70589C((unint64_t *)a3, 46, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_24C70589C((unint64_t *)a3, 47, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_24C70589C((unint64_t *)a3, 48, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  char v110 = *(unsigned char *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  char v111 = *(unsigned char *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  int v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_24C715FA8((uint64_t)a3, a2);
  }
  unint64_t v113 = *(void *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = sub_24C70589C((unint64_t *)a3, 53, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = sub_24C71D5A4(a1 + 16, 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *(void *)(a1 + 8);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    long long v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    long long v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_24C7160BC(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_24C70B380(uint64_t a1)
{
  uint64_t v2 = sub_24C7202D8(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = sub_24C71106C(a1 + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_24C71106C(a1 + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = sub_24C71106C(a1 + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 136);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = sub_24C71106C(a1 + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *(_DWORD *)(a1 + 224);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*(void *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *(_DWORD *)(a1 + 228);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *(_DWORD *)(a1 + 240);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *(_DWORD *)(a1 + 252);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*(void *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *(_DWORD *)(a1 + 272);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *(_DWORD *)(a1 + 276);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *(_DWORD *)(a1 + 284);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *(_DWORD *)(a1 + 296);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *(_DWORD *)(a1 + 292);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *(_DWORD *)(a1 + 300);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *(_DWORD *)(a1 + 304);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *(_DWORD *)(a1 + 316);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *(_DWORD *)(a1 + 320);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *(_DWORD *)(a1 + 324);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *(void *)(a1 + 8);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}