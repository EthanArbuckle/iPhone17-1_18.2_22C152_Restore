void sub_100090E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100090E84(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    v21 = (uint64_t (**)())a3;
    v22 = "aggPeriod";
    sub_10000D0B8((uint64_t)&v21, v13);
    xpc_type_t type = xpc_get_type(v13[0]);
    if (type != (xpc_type_t)&_xpc_type_null)
    {
      v21 = 0;
      v22 = 0;
      uint64_t v23 = 0;
      applesauce::xpc::dyn_cast_or_default();
      if (SHIBYTE(v23) < 0) {
        operator delete(v21);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v16;
      uint64_t v19 = v17;
    }
    xpc_release(v13[0]);
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v16, 0, 0, 0, 2);
    uint64_t v9 = *(void *)(a1 + 96);
    unsigned int v10 = sub_100023B14(__p);
    v21 = off_100156938;
    v22 = (const char *)&v16;
    v24 = &v21;
    (*(void (**)(uint64_t, BOOL, unint64_t, uint64_t (***)()))(*(void *)v9 + 32))(v9, type == (xpc_type_t)&_xpc_type_null, v10 | (unint64_t)&_mh_execute_header, &v21);
    sub_10006DCDC(&v21);
    sub_100007460((uint64_t)&v16, -1, 0x20u, 0, 0, &v21);
    if (v23 >= 0) {
      v11 = (const char *)&v21;
    }
    else {
      v11 = (const char *)v21;
    }
    xpc_object_t v14 = xpc_string_create(v11);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    v13[0] = &object;
    v13[1] = "log-dump";
    sub_100003760((uint64_t)v13, &v14, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
    if (SHIBYTE(v23) < 0) {
      operator delete(v21);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    sub_100016EAC((uint64_t)&v16);
    sub_100016B28((uint64_t **)&v16 + 1, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100700();
  }
  xpc_release(v7);
}

void sub_100091180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,xpc_object_t a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100091244(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v50 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v50 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v50 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v50;
  if (xpc_get_type(v50) == (xpc_type_t)&_xpc_type_dictionary)
  {
    (*(void (**)(void))(**(void **)(a1 + 144) + 56))(*(void *)(a1 + 144));
    memset(v49, 170, 24);
    uint64_t v8 = sub_10001200C((uint64_t)&v51, 0, 0, 0, 2);
    sub_100011C74(v8, v49);
    sub_100016EAC((uint64_t)&v51);
    sub_100016B28(&v52, v51);
    v48 = 0;
    v46 = "%Y-%m-%dT%TZ";
    v47 = 0;
    uint64_t v9 = *(void *)(a1 + 192);
    unsigned int v10 = operator new(0x28uLL);
    *unsigned int v10 = off_1001569B8;
    v10[1] = &v48;
    v10[2] = &v47;
    v10[3] = v49;
    v10[4] = &v46;
    v54 = v10;
    (*(void (**)(uint64_t, void ***))(*(void *)v9 + 96))(v9, &v51);
    sub_10009939C(&v51);
    unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
    v45 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v44, 0, 0, 0, 1);
    v42[0] = 6;
    v43 = v48;
    sub_100016EAC((uint64_t)v42);
    sub_100016EAC((uint64_t)v42);
    v11 = sub_10000D104((unsigned __int8 *)&v44, "totalEvents");
    sub_100016EAC((uint64_t)v42);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)v11 = v42[0];
    v42[0] = v12;
    v13 = (uint64_t *)v11[1];
    v11[1] = (uint64_t)v43;
    v43 = v13;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v42);
    sub_100016B28(&v43, v42[0]);
    v40[0] = 6;
    v41 = v47;
    sub_100016EAC((uint64_t)v40);
    sub_100016EAC((uint64_t)v40);
    xpc_object_t v14 = sub_10000D104((unsigned __int8 *)&v44, "totalBudgetUsed");
    sub_100016EAC((uint64_t)v40);
    unsigned __int8 v15 = *(unsigned char *)v14;
    *(unsigned char *)xpc_object_t v14 = v40[0];
    v40[0] = v15;
    long long v16 = (uint64_t *)v14[1];
    v14[1] = (uint64_t)v41;
    v41 = v16;
    sub_100016EAC((uint64_t)v14);
    sub_100016EAC((uint64_t)v40);
    sub_100016B28(&v41, v40[0]);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = sub_100031FD8(*(void *)(a1 + 80));
    sub_10001C968(v17, (uint64_t)v46);
    sub_10001C898((uint64_t)v38, (uint64_t)&v51);
    v18 = sub_10000D104((unsigned __int8 *)&v44, "startTime");
    sub_100016EAC((uint64_t)v38);
    char v19 = *(unsigned char *)v18;
    *(unsigned char *)v18 = v38[0];
    v38[0] = v19;
    v20 = (uint64_t *)v18[1];
    v18[1] = (uint64_t)v39;
    v39 = v20;
    sub_100016EAC((uint64_t)v18);
    sub_100016EAC((uint64_t)v38);
    sub_100016B28(&v39, v38[0]);
    if (v53 < 0) {
      operator delete(v51);
    }
    v21.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10001C968(v21.__d_.__rep_, (uint64_t)v46);
    sub_10001C898((uint64_t)v36, (uint64_t)&v51);
    v22 = sub_10000D104((unsigned __int8 *)&v44, "currentTime");
    sub_100016EAC((uint64_t)v36);
    char v23 = *(unsigned char *)v22;
    *(unsigned char *)v22 = v36[0];
    v36[0] = v23;
    v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v37;
    v37 = v24;
    sub_100016EAC((uint64_t)v22);
    sub_100016EAC((uint64_t)v36);
    sub_100016B28(&v37, v36[0]);
    if (v53 < 0) {
      operator delete(v51);
    }
    v34[0] = 2;
    v25 = (uint64_t *)operator new(0x18uLL);
    *(_OWORD *)v25 = v49[0];
    v25[2] = *(void *)&v49[1];
    memset(v49, 0, 24);
    v35 = v25;
    sub_100016EAC((uint64_t)v34);
    sub_100016EAC((uint64_t)v34);
    v26 = sub_10000D104((unsigned __int8 *)&v44, "counts");
    sub_100016EAC((uint64_t)v34);
    unsigned __int8 v27 = *(unsigned char *)v26;
    *(unsigned char *)v26 = v34[0];
    v34[0] = v27;
    v28 = (uint64_t *)v26[1];
    v26[1] = (uint64_t)v35;
    v35 = v28;
    sub_100016EAC((uint64_t)v26);
    sub_100016EAC((uint64_t)v34);
    sub_100016B28(&v35, v34[0]);
    sub_100007460((uint64_t)&v44, -1, 0x20u, 0, 0, &v51);
    if (v53 >= 0) {
      v29 = (const char *)&v51;
    }
    else {
      v29 = (const char *)v51;
    }
    xpc_object_t v32 = xpc_string_create(v29);
    if (!v32) {
      xpc_object_t v32 = xpc_null_create();
    }
    v31[0] = &v50;
    v31[1] = "log-transform-counts";
    sub_100003760((uint64_t)v31, &v32, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v32);
    xpc_object_t v32 = 0;
    if (v53 < 0) {
      operator delete(v51);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v50);
    sub_100016EAC((uint64_t)&v44);
    sub_100016B28(&v45, v44);
    v51 = (void **)v49;
    sub_100016F68(&v51);
    xpc_object_t v7 = v50;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100760();
  }
  xpc_release(v7);
}

void sub_1000917E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000918E4(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  xpc_type_t type = xpc_get_type(object);
  uint64_t v9 = qword_10015EF40;
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ClientManager] MANAGE: list configs for debug purpose", buf, 2u);
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    long long v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000CB3BC(*(void *)(a1 + 128), &v15);
    sub_100007460((uint64_t)&v15, -1, 0x20u, 0, 0, buf);
    if (v19 >= 0) {
      unsigned int v10 = buf;
    }
    else {
      unsigned int v10 = *(uint8_t **)buf;
    }
    xpc_object_t v13 = xpc_string_create((const char *)v10);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v12[0] = &object;
    v12[1] = "config-list";
    sub_100003760((uint64_t)v12, &v13, &v14);
    xpc_release(v14);
    xpc_object_t v14 = 0;
    xpc_release(v13);
    xpc_object_t v13 = 0;
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    sub_100016EAC((uint64_t)&v15);
    sub_100016B28(&v16, v15);
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_1001007C0();
  }
  xpc_release(v7);
}

void sub_100091AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100091B60(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_type_t type = xpc_get_type(object);
  uint64_t v8 = qword_10015EF40;
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[ClientManager] MANAGE: get config-info for debug purpose", buf, 2u);
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000CB4D8(*(void *)(a1 + 128), &v16);
    if ((_BYTE)v16)
    {
      sub_100007460((uint64_t)&v16, -1, 0x20u, 0, 0, buf);
      if (v21 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(uint8_t **)buf;
      }
      xpc_object_t v14 = xpc_string_create((const char *)v9);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      v13[0] = &object;
      v13[1] = "config-info";
      sub_100003760((uint64_t)v13, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_release(v14);
      xpc_object_t v14 = 0;
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      xpc_object_t v11 = xpc_string_create("No active config");
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      *(void *)buf = &object;
      v20 = "error";
      sub_100003760((uint64_t)buf, &v11, &v12);
      xpc_release(v12);
      xpc_object_t v12 = 0;
      xpc_release(v11);
      xpc_object_t v11 = 0;
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    sub_100016EAC((uint64_t)&v16);
    sub_100016B28(&v17, v16);
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100820();
  }
  xpc_release(object);
}

void sub_100091DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100091E40(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t xdict = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t xdict = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  (*(void (**)(void))(**(void **)(a1 + 144) + 56))(*(void *)(a1 + 144));
  xpc_object_t v8 = xpc_BOOL_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = &xdict;
  v7[1] = "commit";
  sub_100003760((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_connection_send_message(remote_connection, xdict);
  xpc_release(xdict);
}

void sub_100091F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100091FC8(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(reply);
  }
  else {
    xpc_null_create();
  }
  xpc_release(reply);
  sub_100041538(*(void *)(a1 + 144));
  sub_1000CB8F4(*(void *)(a1 + 128));
  xpc_object_t v5 = dispatch_group_create();
  xpc_object_t v6 = dispatch_group_create();
  xpc_object_t v7 = v6;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    operator new();
  }
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  operator new();
}

void sub_100092434(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000924C4(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  sub_1000CB714(*(void *)(a1 + 128), 1);
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(reply);
  }
  else {
    xpc_null_create();
  }
  xpc_release(reply);
  dispatch_object_t v16 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void *)(a1 + 160);
  sub_100015438(__p, "api");
  xpc_object_t v7 = *a3;
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000C3374(&object, &v12);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v6 + 16))(&v16, v6, __p, &v12);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  xpc_release(object);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_null_create();
  }
  xpc_null_create();
  xpc_object_t v8 = dispatch_group_create();
  uint64_t v9 = v8;
  unsigned int v10 = v16;
  if (v16)
  {
    dispatch_retain(v16);
    dispatch_group_enter(v10);
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    xpc_null_create();
    xpc_null_create();
    operator new();
  }
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  xpc_null_create();
  xpc_null_create();
  operator new();
}

void sub_1000927F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000928B0(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  sub_1000CB714(*(void *)(a1 + 128), 0);
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(reply);
  }
  else {
    xpc_null_create();
  }
  xpc_release(reply);
  dispatch_object_t v16 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void *)(a1 + 160);
  sub_100015438(__p, "api");
  xpc_object_t v7 = *a3;
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_1000C3374(&object, &v12);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v6 + 16))(&v16, v6, __p, &v12);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  xpc_release(object);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_null_create();
  }
  xpc_null_create();
  xpc_object_t v8 = dispatch_group_create();
  uint64_t v9 = v8;
  unsigned int v10 = v16;
  if (v16)
  {
    dispatch_retain(v16);
    dispatch_group_enter(v10);
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    xpc_null_create();
    xpc_null_create();
    operator new();
  }
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  xpc_null_create();
  xpc_null_create();
  operator new();
}

void sub_100092BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100092C9C(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v7 = sub_100098290(a1 + 26, a2);
    if (v7)
    {
      xpc_object_t v50 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(void *)buf = a3;
      *(void *)&uint8_t buf[8] = "events";
      sub_100093338((uint64_t)buf, &v50);
      *(void *)buf = v50;
      if (v50) {
        xpc_retain(v50);
      }
      else {
        *(void *)buf = xpc_null_create();
      }
      sub_1000975EC(&v48, (void **)buf, 0);
      xpc_release(*(xpc_object_t *)buf);
      sub_1000933C8(&v50, &v46);
      uint64_t v8 = v49;
      if (v49 != v47 || (uint64_t v9 = v48, v48 != v46))
      {
        xpc_object_t v37 = v6;
        v39 = (uint64_t *)(v7 + 3);
        while (1)
        {
          v45[0] = &v48;
          v45[1] = v8;
          memset(__p, 170, sizeof(__p));
          sub_1000934BC((uint64_t)v45, &object);
          memset(buf, 0, sizeof(buf));
          applesauce::xpc::dyn_cast_or_default();
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          xpc_release((xpc_object_t)object);
          unsigned int v10 = v7[8];
          xpc_object_t v11 = v7[9];
          if (v10 == v11)
          {
LABEL_52:
            v26 = qword_10015EF40;
            if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEBUG))
            {
              if (SHIBYTE(__p[2]) >= 0) {
                v34 = __p;
              }
              else {
                v34 = (void **)__p[0];
              }
              uint64_t v35 = *v39;
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v34;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v35;
              _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[EventStreamingObserver] creating observer for event '%s' for client id %llu", buf, 0x16u);
            }
            *(void *)&long long object = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&object + 1) = 0xAAAAAAAAAAAAAAAALL;
            sub_10000FB4C(buf, a1 + 1);
            unsigned __int8 v27 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              uint64_t v28 = *(void *)buf;
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
              sub_1000147D8(v27);
              uint64_t v41 = 0;
              v42 = 0;
              v29 = std::__shared_weak_count::lock(v27);
              v30 = v29;
              if (v29)
              {
                uint64_t v31 = v28 + 40;
                if (!v28) {
                  uint64_t v31 = 0;
                }
                atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                uint64_t v31 = 0;
              }
              xpc_object_t v32 = v42;
              uint64_t v41 = v31;
              v42 = v30;
              if (v32) {
                std::__shared_weak_count::__release_weak(v32);
              }
              std::__shared_weak_count::__release_weak(v27);
              if (v30) {
                sub_1000147D8(v30);
              }
            }
            else
            {
              uint64_t v41 = 0;
              v42 = 0;
            }
            sub_100046BF8(&v41, (long long *)__p, v39, &object);
            if (v42) {
              std::__shared_weak_count::__release_weak(v42);
            }
            uint64_t v33 = a1[8];
            long long v40 = object;
            if (*((void *)&object + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&object + 1) + 16), 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, long long *, void **, void))(*(void *)v33 + 16))(v33, &v40, __p, 0);
            if (*((void *)&v40 + 1)) {
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
            }
            sub_100093504((uint64_t *)v7 + 8, &object);
            if (*((void *)&object + 1)) {
              sub_1000147D8(*((std::__shared_weak_count **)&object + 1));
            }
            goto LABEL_72;
          }
          char v12 = 0;
          do
          {
            uint64_t v14 = *v10;
            xpc_object_t v13 = (std::__shared_weak_count *)v10[1];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v15 = (unsigned __int8 *)sub_100047040(v14);
            uint64_t v16 = v15[23];
            if ((v16 & 0x80u) == 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = (void *)v15[23];
            }
            else {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = (void *)*((void *)v15 + 1);
            }
            v18 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              v18 = __p[1];
            }
            if (v17 != v18) {
              goto LABEL_37;
            }
            if (SHIBYTE(__p[2]) >= 0) {
              char v19 = __p;
            }
            else {
              char v19 = (void **)__p[0];
            }
            if ((v16 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v15, v19, *((void *)v15 + 1))) {
                goto LABEL_37;
              }
            }
            else if (v15[23])
            {
              while (*v15 == *(unsigned __int8 *)v19)
              {
                ++v15;
                char v19 = (void **)((char *)v19 + 1);
                if (!--v16) {
                  goto LABEL_44;
                }
              }
LABEL_37:
              char v20 = 0;
              if (!v13) {
                goto LABEL_39;
              }
LABEL_38:
              sub_1000147D8(v13);
              goto LABEL_39;
            }
LABEL_44:
            v22 = qword_10015EF40;
            if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v23 = sub_100047040(v14);
              if (*(char *)(v23 + 23) >= 0) {
                uint64_t v24 = v23;
              }
              else {
                uint64_t v24 = *(void *)v23;
              }
              uint64_t v25 = *v39;
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v24;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v25;
              _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[EventStreamingObserver] skipping existing observer for event '%s' for client id %llu", buf, 0x16u);
            }
            char v20 = 1;
            char v12 = 1;
            if (v13) {
              goto LABEL_38;
            }
LABEL_39:
            v10 += 2;
            if (v10 == v11) {
              char v21 = 1;
            }
            else {
              char v21 = v20;
            }
          }
          while ((v21 & 1) == 0);
          if ((v12 & 1) == 0) {
            goto LABEL_52;
          }
LABEL_72:
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v8 = v49 + 1;
          uint64_t v49 = v8;
          if (v8 == v47)
          {
            uint64_t v9 = v48;
            if (v48 == v46)
            {
              xpc_object_t v6 = v37;
              break;
            }
          }
        }
      }
      xpc_release(v9);
      xpc_release(v48);
      xpc_release(v50);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v6);
    goto LABEL_83;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
    sub_100100880();
  }
LABEL_83:
  xpc_release(v6);
}

void sub_100093210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,xpc_object_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,xpc_object_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100093338(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v4);
    goto LABEL_7;
  }
LABEL_5:
  *a2 = xpc_null_create();
LABEL_7:
  xpc_release(v4);
}

void sub_1000933C8(xpc_object_t *a1@<X0>, void **a2@<X8>)
{
  xpc_object_t v4 = *a1;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (xpc_get_type(*a1) == (xpc_type_t)&_xpc_type_array) {
    count = (void *)xpc_array_get_count(*a1);
  }
  else {
    count = 0;
  }
  sub_1000975EC(a2, &object, count);
  xpc_release(object);
}

void sub_10009348C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

xpc_object_t sub_1000934BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_array_get_value(**(xpc_object_t **)a1, *(void *)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void **sub_100093504(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  xpc_object_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  xpc_object_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000171B0((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_100099F40(a1, v18);
    uint64_t v9 = (void *)a1[1];
    xpc_object_t result = sub_100014B08(v18);
  }
  else
  {
    *xpc_object_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100093638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_10009364C(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
      sub_100100AD4();
    }
    goto LABEL_38;
  }
  __s = (char *)0xAAAAAAAAAAAAAAAALL;
  __s = (char *)xpc_dictionary_get_string(*a3, "string-config");
  if (__s)
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAA00;
    v30 = 0;
    sub_100016EAC((uint64_t)&v29);
    sub_100016EAC((uint64_t)&v29);
    v34[3] = 0;
    sub_10000DD74((const char **)&__s, (uint64_t)v34, 1, &v27);
    sub_100016EAC((uint64_t)&v27);
    char v6 = v29;
    LOBYTE(v29) = v27;
    LOBYTE(v27) = v6;
    xpc_object_t v7 = v30;
    v30 = v28;
    uint64_t v28 = v7;
    sub_100016EAC((uint64_t)&v29);
    sub_100016EAC((uint64_t)&v27);
    sub_100016B28(&v28, v27);
    sub_10000DE9C(v34);
    if (v29 == 1)
    {
      sub_10005A7F4(&buf);
      BOOL v8 = sub_10009EC58((char *)&buf, (uint64_t)&v29);
      BOOL v9 = v8;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
        if (v9) {
          goto LABEL_14;
        }
      }
      else if (v8)
      {
LABEL_14:
        xpc_object_t v25 = xpc_BOOL_create(1);
        if (!v25) {
          xpc_object_t v25 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"set-tasking-old";
        sub_100003760((uint64_t)&buf, &v25, &v26);
        xpc_release(v26);
        xpc_object_t v26 = 0;
        xpc_release(v25);
        xpc_object_t v25 = 0;
        uint64_t v10 = qword_10015EF40;
        if (!os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_37;
        }
        size_t v11 = strlen(__s);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
        uint64_t v12 = "[ClientManager] set-dev tasking saved new dev config (%zd bytes)";
        unint64_t v13 = v10;
        uint32_t v14 = 12;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&buf, v14);
LABEL_37:
        remote_connection = xpc_dictionary_get_remote_connection(*a3);
        xpc_connection_send_message(remote_connection, object);
        sub_100016EAC((uint64_t)&v29);
        sub_100016B28(&v30, v29);
        goto LABEL_38;
      }
      xpc_object_t v23 = xpc_string_create("failed to write dev config");
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"error";
      sub_100003760((uint64_t)&buf, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v23 = 0;
      if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
        sub_100100940();
      }
      goto LABEL_37;
    }
    sub_10005A7F4(&buf);
    BOOL v15 = sub_10009EA9C((const char *)&buf);
    BOOL v16 = v15;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v16) {
        goto LABEL_22;
      }
    }
    else if (v15)
    {
LABEL_22:
      xpc_object_t v21 = xpc_BOOL_create(1);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"set-tasking-old";
      sub_100003760((uint64_t)&buf, &v21, &v22);
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      uint64_t v17 = qword_10015EF40;
      if (!os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v12 = "[ClientManager] set-dev tasking removed tasked config (if it existed)";
      unint64_t v13 = v17;
      uint32_t v14 = 2;
      goto LABEL_26;
    }
    xpc_object_t v19 = xpc_string_create("failed to remove dev config");
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)"error";
    sub_100003760((uint64_t)&buf, &v19, &v20);
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
      sub_1001009A0();
    }
    goto LABEL_37;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
    sub_1001008E0();
  }
LABEL_38:
  xpc_release(object);
}

void sub_100093AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100093BE0(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t xdict = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t xdict = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  *(void *)&long long buf = a3;
  *((void *)&buf + 1) = "tasking-id";
  sub_10000D0B8((uint64_t)&buf, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    long long buf = 0uLL;
    uint64_t v19 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)buf);
    }
    *(_OWORD *)__p = v12;
    uint64_t v16 = v13;
  }
  xpc_release(object);
  xpc_object_t v7 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = __p;
    if (v16 < 0) {
      BOOL v8 = (void **)__p[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[ClientManager] === Tasking notification recieved with taskingId: %{public}s! Locating and storing (but not activating) new configurations", (uint8_t *)&buf, 0xCu);
  }
  sub_1000CB8F4(*(void *)(a1 + 128));
  if (xpc_get_type(xdict) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v10 = xpc_BOOL_create(1);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    *(void *)&long long buf = &xdict;
    *((void *)&buf + 1) = "tasking-notify";
    sub_100003760((uint64_t)&buf, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(v10);
    xpc_object_t v10 = 0;
    remote_connection = xpc_dictionary_get_remote_connection(xdict);
    xpc_connection_send_message(remote_connection, xdict);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(xdict);
}

void sub_100093E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100093E9C(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v20 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v5 = reply;
    xpc_object_t v20 = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v20 = v5;
    if (!v5)
    {
LABEL_5:
      xpc_object_t v20 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v5) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v5);
LABEL_7:
  xpc_release(v5);
  if (xpc_get_type(v20) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v19[0] = a3;
    v19[1] = "mmap-config";
    v18[0] = a3;
    v18[1] = "mmap-config-size";
    if (xpc_dictionary_get_value(*a3, "mmap-config"))
    {
      v17[0] = 0xAAAAAAAAAAAAAAAALL;
      v17[1] = 0xAAAAAAAAAAAAAAAALL;
      sub_10000D0B8((uint64_t)v18, &v11);
      xpc_object_t v7 = (std::__shared_weak_count *)applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v11, 0, v6);
      sub_10000D0B8((uint64_t)v19, &object);
      uint64_t v16 = v7;
      sub_100065BE8((uint64_t)&object, v17);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v11);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      uint64_t v16 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      sub_1000F02F8(v17, &object);
      if (object)
      {
        if (sub_1000F0B8C((uint64_t)object))
        {
          xpc_object_t v13 = xpc_BOOL_create(1);
          if (!v13) {
            xpc_object_t v13 = xpc_null_create();
          }
          xpc_object_t v11 = &v20;
          long long v12 = "set-tasking";
          sub_100003760((uint64_t)&v11, &v13, &v14);
          xpc_release(v14);
          xpc_object_t v14 = 0;
          xpc_release(v13);
          xpc_object_t v13 = 0;
        }
        else
        {
          xpc_object_t v9 = xpc_string_create("failed to write ndjson config");
          if (!v9) {
            xpc_object_t v9 = xpc_null_create();
          }
          xpc_object_t v11 = &v20;
          long long v12 = "error";
          sub_100003760((uint64_t)&v11, &v9, &v10);
          xpc_release(v10);
          xpc_object_t v10 = 0;
          xpc_release(v9);
          xpc_object_t v9 = 0;
          if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
            sub_100100BF4();
          }
        }
        remote_connection = xpc_dictionary_get_remote_connection(*a3);
        xpc_connection_send_message(remote_connection, v20);
      }
      else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
      {
        sub_100100B94();
      }
      if (v16) {
        sub_1000147D8(v16);
      }
      sub_100065AE8(v17);
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
    {
      sub_100100B34();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100C54();
  }
  xpc_release(v20);
}

void sub_100094188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100094230(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    char v6 = xpc_dictionary_get_BOOL(*a3, "should-clear-config-after-reboot");
    sub_1000B310C(v6);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100CB4();
  }
  xpc_release(v5);
}

void sub_100094324(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_10009433C(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v7 = reply;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
      sub_100100D14();
    }
    goto LABEL_71;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v37 = 0;
  v38 = a3;
  v39 = "state-name";
  sub_10000D0B8((uint64_t)&v38, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    v38 = 0;
    v39 = 0;
    uint64_t v40 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v40) < 0) {
      operator delete(v38);
    }
    *(_OWORD *)__p = v34;
    uint64_t v37 = v35;
  }
  xpc_release(object);
  long long v34 = 0xAAAAAAAAAAAAAA00;
  sub_100016EAC((uint64_t)&v34);
  sub_100016EAC((uint64_t)&v34);
  v38 = a3;
  v39 = "state";
  sub_10000D0B8((uint64_t)&v38, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000C3374(&object, &v32);
    sub_100016EAC((uint64_t)&v32);
    char v8 = v34;
    LOBYTE(v34) = v32;
    LOBYTE(v32) = v8;
    xpc_object_t v9 = (uint64_t *)*((void *)&v34 + 1);
    *((void *)&v34 + 1) = v33;
    uint64_t v33 = v9;
    sub_100016EAC((uint64_t)&v34);
    sub_100016EAC((uint64_t)&v32);
    sub_100016B28(&v33, v32);
  }
  xpc_release(object);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00;
  uint64_t v31 = 0;
  sub_100016EAC((uint64_t)&object);
  sub_100016EAC((uint64_t)&object);
  v38 = a3;
  v39 = "state-parameters";
  sub_10000D0B8((uint64_t)&v38, &v29);
  if (xpc_get_type(v29) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000C3374(&v29, &v27);
    sub_100016EAC((uint64_t)&v27);
    char v10 = (char)object;
    LOBYTE(object) = v27;
    LOBYTE(v27) = v10;
    xpc_object_t v11 = v31;
    uint64_t v31 = v28;
    uint64_t v28 = v11;
    sub_100016EAC((uint64_t)&object);
    sub_100016EAC((uint64_t)&v27);
    sub_100016B28(&v28, v27);
  }
  xpc_release(v29);
  if (v37 < 0)
  {
    long long v12 = __p[1];
    if (__p[1] == (void *)8)
    {
      if (*(void *)__p[0] == 0x6E6F697461636F6CLL || *(void *)__p[0] == 0x656475746974616CLL) {
        goto LABEL_64;
      }
      long long v12 = __p[1];
    }
    if (v12 == (void *)9)
    {
      if (*(void *)__p[0] == 0x64757469676E6F6CLL && *((unsigned char *)__p[0] + 8) == 101) {
        goto LABEL_64;
      }
      long long v12 = __p[1];
    }
    if (v12 == (void *)6)
    {
      if (*(_DWORD *)__p[0] == 1802658157 && *((_WORD *)__p[0] + 2) == 29797) {
        goto LABEL_64;
      }
      long long v12 = __p[1];
    }
    if (v12 != (void *)17) {
      goto LABEL_68;
    }
    BOOL v15 = (void **)__p[0];
LABEL_45:
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = *((unsigned __int8 *)v15 + 16);
    if (v16 != (void *)0x6E456C616E676973 || v17 != (void *)0x6E656D6E6F726976 || v18 != 116) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  if (HIBYTE(v37) > 8u)
  {
    if (HIBYTE(v37) == 9)
    {
      if (__p[0] != (void *)0x64757469676E6F6CLL || LOBYTE(__p[1]) != 101) {
        goto LABEL_68;
      }
      goto LABEL_64;
    }
    if (HIBYTE(v37) != 17) {
      goto LABEL_68;
    }
    BOOL v15 = __p;
    goto LABEL_45;
  }
  if (HIBYTE(v37) == 6)
  {
    if (LODWORD(__p[0]) != 1802658157 || WORD2(__p[0]) != 29797) {
      goto LABEL_68;
    }
  }
  else if (HIBYTE(v37) != 8 || __p[0] != (void *)0x656475746974616CLL && __p[0] != (void *)0x6E6F697461636F6CLL)
  {
    goto LABEL_68;
  }
LABEL_64:
  xpc_object_t v23 = sub_100015438(&v38, "com.apple.private.CoreAnalytics.QueryLocation.allow");
  char v24 = sub_100090BE4((uint64_t)v23, a2, a3, (uint64_t *)&v38);
  char v25 = v24;
  if (SHIBYTE(v40) < 0)
  {
    operator delete(v38);
    if ((v25 & 1) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v24)
  {
LABEL_68:
    (*(void (**)(void, void **, xpc_object_t *, long long *, uint64_t, void))(**(void **)(a1 + 112) + 24))(*(void *)(a1 + 112), __p, &object, &v34, -1, 0);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v7);
  }
LABEL_69:
  sub_100016EAC((uint64_t)&object);
  sub_100016B28(&v31, object);
  sub_100016EAC((uint64_t)&v34);
  sub_100016B28((uint64_t **)&v34 + 1, v34);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
LABEL_71:
  xpc_release(v7);
}

void sub_10009489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v25 - 73) < 0) {
    operator delete(*(void **)(v25 - 96));
  }
  sub_100028D64((uint64_t **)&object);
  sub_100028D64(&a16);
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void sub_100094990(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v7 = reply;
    xpc_object_t v52 = reply;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v52 = v7;
    if (!v7)
    {
LABEL_5:
      xpc_object_t v52 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v7);
LABEL_7:
  xpc_release(v7);
  xpc_object_t v8 = v52;
  if (xpc_get_type(v52) != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
      sub_100100D74();
    }
    goto LABEL_90;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v51 = 0;
  char v53 = a3;
  v54 = "state-name";
  sub_10000D0B8((uint64_t)&v53, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    char v53 = 0;
    v54 = 0;
    uint64_t v55 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v55) < 0) {
      operator delete(v53);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v48;
    uint64_t v51 = v49;
  }
  xpc_release(object);
  long long v48 = 0xAAAAAAAAAAAAAA00;
  sub_100016EAC((uint64_t)&v48);
  sub_100016EAC((uint64_t)&v48);
  char v53 = a3;
  v54 = "state-parameters";
  sub_10000D0B8((uint64_t)&v53, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000C3374(&object, &v46);
    sub_100016EAC((uint64_t)&v46);
    char v9 = v48;
    LOBYTE(v48) = v46;
    LOBYTE(v46) = v9;
    char v10 = (uint64_t *)*((void *)&v48 + 1);
    *((void *)&v48 + 1) = v47;
    uint64_t v47 = v10;
    sub_100016EAC((uint64_t)&v48);
    sub_100016EAC((uint64_t)&v46);
    sub_100016B28(&v47, v46);
  }
  xpc_release(object);
  if (v51 < 0)
  {
    xpc_object_t v11 = __p[1];
    if (__p[1] == (void *)8)
    {
      if (*(void *)__p[0] == 0x6E6F697461636F6CLL || *(void *)__p[0] == 0x656475746974616CLL) {
        goto LABEL_65;
      }
      xpc_object_t v11 = __p[1];
    }
    if (v11 == (void *)9)
    {
      if (*(void *)__p[0] == 0x64757469676E6F6CLL && *((unsigned char *)__p[0] + 8) == 101) {
        goto LABEL_65;
      }
      xpc_object_t v11 = __p[1];
    }
    if (v11 == (void *)6)
    {
      if (*(_DWORD *)__p[0] == 1802658157 && *((_WORD *)__p[0] + 2) == 29797) {
        goto LABEL_65;
      }
      xpc_object_t v11 = __p[1];
    }
    if (v11 != (void *)17) {
      goto LABEL_69;
    }
    xpc_object_t v14 = (void **)__p[0];
    goto LABEL_46;
  }
  if (HIBYTE(v51) > 8u)
  {
    if (HIBYTE(v51) == 9)
    {
      if (__p[0] == (void *)0x64757469676E6F6CLL && LOBYTE(__p[1]) == 101) {
        goto LABEL_65;
      }
LABEL_69:
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00;
      v45 = 0;
      sub_100016EAC((uint64_t)&object);
      sub_100016EAC((uint64_t)&object);
      if (SHIBYTE(v51) < 0)
      {
        if (__p[1] != (void *)3) {
          goto LABEL_78;
        }
        uint64_t v25 = (void **)__p[0];
      }
      else
      {
        if (SHIBYTE(v51) != 3) {
          goto LABEL_78;
        }
        uint64_t v25 = __p;
      }
      int v26 = *(unsigned __int16 *)v25;
      int v27 = *((unsigned __int8 *)v25 + 2);
      if (v26 == 27745 && v27 == 108)
      {
        (*(void (**)(xpc_object_t **__return_ptr))(**(void **)(a1 + 112) + 48))(&v53);
        uint64_t v33 = (char *)v53;
        long long v34 = v54;
        if (v53 != (xpc_object_t *)v54)
        {
          do
          {
            uint64_t v35 = *(void *)(a1 + 112);
            v40[0] = 0;
            uint64_t v41 = 0;
            sub_100016EAC((uint64_t)v40);
            sub_100016EAC((uint64_t)v40);
            (*(void (**)(xpc_object_t ***__return_ptr, uint64_t, char *, char *))(*(void *)v35 + 16))(&v42, v35, v33, v40);
            sub_1000210E0((uint64_t)&object, (uint64_t)&v42);
            sub_100016EAC((uint64_t)&v42);
            sub_100016B28((uint64_t **)&v43, v42);
            sub_100016EAC((uint64_t)v40);
            sub_100016B28(&v41, v40[0]);
            v33 += 24;
          }
          while (v33 != v34);
        }
        v42 = &v53;
        sub_10002A71C((void ***)&v42);
        goto LABEL_79;
      }
LABEL_78:
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 112) + 16))(&v38);
      sub_100016EAC((uint64_t)&v38);
      char v29 = (char)object;
      LOBYTE(object) = v38;
      LOBYTE(v38) = v29;
      v30 = v45;
      v45 = v39;
      v39 = v30;
      sub_100016EAC((uint64_t)&object);
      sub_100016EAC((uint64_t)&v38);
      sub_100016B28(&v39, v38);
LABEL_79:
      sub_100007460((uint64_t)&object, -1, 0x20u, 0, 0, &v53);
      if (v55 >= 0) {
        uint64_t v31 = (const char *)&v53;
      }
      else {
        uint64_t v31 = (const char *)v53;
      }
      xpc_object_t v36 = xpc_string_create(v31);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      v42 = (xpc_object_t **)&v52;
      v43 = "query-state";
      sub_100003760((uint64_t)&v42, &v36, &v37);
      xpc_release(v37);
      xpc_object_t v37 = 0;
      xpc_release(v36);
      xpc_object_t v36 = 0;
      if (SHIBYTE(v55) < 0) {
        operator delete(v53);
      }
      remote_connection = xpc_dictionary_get_remote_connection(*a3);
      xpc_connection_send_message(remote_connection, v52);
      sub_100016EAC((uint64_t)&object);
      sub_100016B28(&v45, object);
      goto LABEL_87;
    }
    if (HIBYTE(v51) != 17) {
      goto LABEL_69;
    }
    xpc_object_t v14 = __p;
LABEL_46:
    BOOL v15 = *v14;
    uint64_t v16 = v14[1];
    int v17 = *((unsigned __int8 *)v14 + 16);
    if (v15 == (void *)0x6E456C616E676973 && v16 == (void *)0x6E656D6E6F726976 && v17 == 116) {
      goto LABEL_65;
    }
    goto LABEL_69;
  }
  if (HIBYTE(v51) == 6)
  {
    if (LODWORD(__p[0]) == 1802658157 && WORD2(__p[0]) == 29797) {
      goto LABEL_65;
    }
    goto LABEL_69;
  }
  if (HIBYTE(v51) != 8 || __p[0] != (void *)0x656475746974616CLL && __p[0] != (void *)0x6E6F697461636F6CLL) {
    goto LABEL_69;
  }
LABEL_65:
  xpc_object_t v22 = sub_100015438(&v53, "com.apple.private.CoreAnalytics.QueryLocation.allow");
  char v23 = sub_100090BE4((uint64_t)v22, a2, a3, (uint64_t *)&v53);
  char v24 = v23;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(v53);
    if (v24) {
      goto LABEL_69;
    }
  }
  else if (v23)
  {
    goto LABEL_69;
  }
LABEL_87:
  sub_100016EAC((uint64_t)&v48);
  sub_100016B28((uint64_t **)&v48 + 1, v48);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v8 = v52;
LABEL_90:
  xpc_release(v8);
}

void sub_100095090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100028D64((uint64_t **)&object);
  sub_100028D64(&a22);
  if (a30 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v30 - 120));
  _Unwind_Resume(a1);
}

void sub_1000951B8(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v19 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v19 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v19 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v19;
  if (xpc_get_type(v19) == (xpc_type_t)&_xpc_type_dictionary)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    int v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v17, 0, 0, 0, 2);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 112) + 48))(__p);
    xpc_object_t v8 = (char *)__p[0];
    char v9 = (char *)__p[1];
    while (v8 != v9)
    {
      sub_100095478((uint64_t)&v17, (uint64_t)v8);
      v8 += 24;
    }
    v12[0] = __p;
    sub_10002A71C(v12);
    sub_100007460((uint64_t)&v17, -1, 0x20u, 0, 0, __p);
    if (v16 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    xpc_object_t v13 = xpc_string_create((const char *)v10);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v12[0] = &v19;
    v12[1] = (void **)"query-list";
    sub_100003760((uint64_t)v12, &v13, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v13);
    xpc_object_t v13 = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v19);
    sub_100016EAC((uint64_t)&v17);
    sub_100016B28(&v18, v17);
    xpc_object_t v7 = v19;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100DD4();
  }
  xpc_release(v7);
}

void sub_1000953F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

uint64_t sub_100095478(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      char v10 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v13, v10);
      xpc_object_t v11 = std::string::insert(&v13, 0, "cannot use emplace_back() with ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
      long long v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(311, (uint64_t)&v14, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    xpc_object_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *xpc_object_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    sub_100016EAC(a1);
  }
  xpc_object_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_10009A0B4(v5, a2);
  }
  else
  {
    sub_1000168C0(v5[1], a2);
    uint64_t v7 = v6 + 16;
    v5[1] = v6 + 16;
  }
  v5[1] = v7;
  return v7 - 16;
}

void sub_1000955D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void sub_100095644(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v14 = 0;
    __p = a3;
    char v16 = "state-name";
    sub_10000D0B8((uint64_t)&__p, &object);
    if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
    {
      __p = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      applesauce::xpc::dyn_cast_or_default();
      if (SHIBYTE(v17) < 0) {
        operator delete(__p);
      }
      *(_OWORD *)std::string v13 = v10;
      uint64_t v14 = v11;
    }
    xpc_release(object);
    if (v14 >= 0) {
      uint64_t v7 = (void *)HIBYTE(v14);
    }
    else {
      uint64_t v7 = v13[1];
    }
    uint64_t v8 = **(void **)(a1 + 112);
    if (v7) {
      (*(void (**)(void))(v8 + 40))();
    }
    else {
      (*(void (**)(void))(v8 + 32))();
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v6);
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100E34();
  }
  xpc_release(v6);
}

void sub_100095848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v25);
  _Unwind_Resume(a1);
}

void sub_1000958D4(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v17 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v17 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v17 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  memset(v16, 170, sizeof(v16));
  sub_100040F60(*(void *)(a1 + 144), v16);
  unint64_t v14 = 0xAAAAAAAAAAAAAA02;
  __p[0] = (void *)v16[0];
  v9[0] = v16[1];
  std::string::size_type v15 = sub_10009A1D0((uint64_t *)__p, v9);
  sub_100016EAC((uint64_t)&v14);
  sub_100016EAC((uint64_t)&v14);
  sub_100007460((uint64_t)&v14, -1, 0x20u, 0, 0, __p);
  if (v11 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  xpc_object_t v12 = xpc_string_create((const char *)v7);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  v9[0] = (uint64_t)&v17;
  v9[1] = (uint64_t)"transforms-in-cache";
  sub_100003760((uint64_t)v9, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  remote_connection = xpc_dictionary_get_remote_connection(*a3);
  xpc_connection_send_message(remote_connection, v17);
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
  __p[0] = v16;
  sub_10002A71C((void ***)__p);
  xpc_release(v17);
}

void sub_100095AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100095B24(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v4 = sub_100098290((void *)(a1 + 208), a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    if (!*((unsigned char *)v4 + 56))
    {
      v7[0] = a3;
      v7[1] = "process";
      sub_10000D0B8((uint64_t)v7, &object);
      applesauce::xpc::dyn_cast_or_default((uint64_t *)__p, (applesauce::xpc *)&object, (const object *)"<unknown>", v6);
      sub_100095C28((uint64_t)(v5 + 4), (long long *)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(object);
    }
  }
}

void sub_100095BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100095C28(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_100095CA4(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_connection_send_message(*a2, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100E94();
  }
  xpc_release(v5);
}

void sub_100095D7C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_100095D98(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    std::string v13 = a3;
    unint64_t v14 = "name";
    memset(__p, 170, sizeof(__p));
    sub_10000D0B8((uint64_t)&v13, v10);
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    xpc_release(v10[0]);
    sub_100041314(*(void *)(a1 + 144), (uint64_t)__p, &v13);
    sub_100007460((uint64_t)&v13, -1, 0x20u, 0, 0, v17);
    if (v18 >= 0) {
      uint64_t v8 = (const char *)v17;
    }
    else {
      uint64_t v8 = (const char *)v17[0];
    }
    xpc_object_t v11 = xpc_string_create(v8);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    v10[0] = &object;
    v10[1] = "transform-info";
    sub_100003760((uint64_t)v10, &v11, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_release(v11);
    xpc_object_t v11 = 0;
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    sub_100016EAC((uint64_t)&v13);
    sub_100016B28((uint64_t **)&v14, v13);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100EF4();
  }
  xpc_release(v7);
}

void sub_100095FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100096078(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_10000D0B8((uint64_t)v12, &v13);
    p_xpc_object_t object = 0;
    xpc_object_t v17 = 0;
    uint64_t v18 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 176) + 128))(*(void *)(a1 + 176), __p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "event-used";
    sub_100003760((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(v10);
    xpc_object_t v10 = 0;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100F54();
  }
  xpc_release(v7);
}

void sub_10009626C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100096308(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_10000D0B8((uint64_t)v12, &v13);
    p_xpc_object_t object = 0;
    xpc_object_t v17 = 0;
    uint64_t v18 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = sub_100041158(*(void *)(a1 + 144), (uint64_t)__p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "transform-persist";
    sub_100003760((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(v10);
    xpc_object_t v10 = 0;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100100FB4();
  }
  xpc_release(v7);
}

void sub_1000964DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100096578(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v5 = reply;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    sub_1000C3374(&object, &v9);
    sub_1000B2E78((uint64_t)&v9);
    sub_100016EAC((uint64_t)&v9);
    sub_100016B28(&v10, v9);
    xpc_release(object);
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100101014();
  }
  xpc_release(v5);
}

void sub_1000966CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10)
{
}

void sub_100096738(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t object = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t object = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t object = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    memset(__p, 170, sizeof(__p));
    v12[0] = a3;
    v12[1] = "name";
    sub_10000D0B8((uint64_t)v12, &v13);
    p_xpc_object_t object = 0;
    xpc_object_t v17 = 0;
    uint64_t v18 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v18) < 0) {
      operator delete(p_object);
    }
    xpc_release(v13);
    char v8 = sub_100041058(*(void *)(a1 + 144), (uint64_t)__p);
    xpc_object_t v10 = xpc_BOOL_create(v8);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    p_xpc_object_t object = &object;
    xpc_object_t v17 = "transform-evict";
    sub_100003760((uint64_t)&p_object, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(v10);
    xpc_object_t v10 = 0;
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, object);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = object;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100101074();
  }
  xpc_release(v7);
}

void sub_10009690C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000969A8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  for (i = *(uint64_t ***)(a1 + 224); i; i = (uint64_t **)*i)
  {
    if (i[3] == *a2)
    {
      xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      sub_100002AEC(&message);
      xpc_object_t v12 = xpc_string_create("message-emit");
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      __p[0] = &message;
      __p[1] = "notification";
      sub_100003760((uint64_t)__p, &v12, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v12);
      xpc_object_t v12 = 0;
      sub_100007460(a3, -1, 0x20u, 0, 0, __p);
      if (v9 >= 0) {
        xpc_object_t v6 = __p;
      }
      else {
        xpc_object_t v6 = (void **)__p[0];
      }
      xpc_object_t v10 = xpc_string_create((const char *)v6);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      v7[0] = &message;
      v7[1] = "message";
      sub_100003760((uint64_t)v7, &v10, &v11);
      xpc_release(v11);
      xpc_object_t v11 = 0;
      xpc_release(v10);
      xpc_object_t v10 = 0;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      xpc_connection_send_message((xpc_connection_t)i[2], message);
      xpc_release(message);
    }
  }
}

void sub_100096B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100096B94(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if (reply)
  {
    xpc_object_t v6 = reply;
    xpc_object_t v23 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v23 = v6;
    if (!v6)
    {
LABEL_5:
      xpc_object_t v23 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_5;
  }
  xpc_retain(v6);
LABEL_7:
  xpc_release(v6);
  xpc_object_t v7 = v23;
  if (xpc_get_type(v23) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v16 = 0;
    xpc_object_t v17 = &v16;
    uint64_t v18 = 0x3802000000;
    xpc_object_t v19 = sub_100096E90;
    xpc_object_t v20 = sub_100096EE8;
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v21, 0, 0, 0, 2);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 0x40000000;
    v15[2] = sub_100096F28;
    v15[3] = &unk_100156788;
    v15[4] = &v16;
    v15[5] = a1;
    sub_1000688E8(v15);
    sub_100007460((uint64_t)(v17 + 5), -1, 0x20u, 0, 0, __p);
    if (v12 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    xpc_object_t v13 = xpc_string_create((const char *)v8);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    v10[0] = &v23;
    v10[1] = "appusage";
    sub_100003760((uint64_t)v10, &v13, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v13);
    xpc_object_t v13 = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    remote_connection = xpc_dictionary_get_remote_connection(*a3);
    xpc_connection_send_message(remote_connection, v23);
    _Block_object_dispose(&v16, 8);
    sub_100016EAC((uint64_t)&v21);
    sub_100016B28(&v22, v21);
    xpc_object_t v7 = v23;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_1001010D4();
  }
  xpc_release(v7);
}

void sub_100096E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

uint64_t sub_100096E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_100016EAC(a2 + 40);
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;

  return sub_100016EAC(v3);
}

void sub_100096EE8(uint64_t a1)
{
  sub_100016EAC(a1 + 40);
  int v2 = *(unsigned __int8 *)(a1 + 40);

  sub_100016B28((uint64_t **)(a1 + 48), v2);
}

void sub_100096F28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  sub_10008B874(*(void *)(*(void *)(a1 + 32) + 8) + 40, a2);
  uint64_t v4 = *(void *)(v3 + 48);
  sub_100015438(__p, "com.apple.coreanalytics.appUsage");
  sub_10008D90C((long long *)__p, a2, &v7);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v7);
  if (v8) {
    sub_1000147D8(v8);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100096FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000147D8(a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100097034(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  if ((reply || (xpc_object_t reply = xpc_null_create()) != 0) && xpc_get_type(reply) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(reply);
    xpc_object_t v6 = reply;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_release(reply);
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    dispatch_object_t v17 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v7 = *(void *)(a1 + 160);
    sub_100015438(__p, "api");
    xpc_object_t v8 = *a3;
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    sub_1000C3374(&object, &v13);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)v7 + 16))(&v17, v7, __p, &v13);
    sub_100016EAC((uint64_t)&v13);
    sub_100016B28(&v14, v13);
    xpc_release(object);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (*a3)
    {
      xpc_retain(*a3);
      if (v6)
      {
LABEL_16:
        xpc_retain(v6);
        goto LABEL_19;
      }
    }
    else
    {
      xpc_null_create();
      if (v6) {
        goto LABEL_16;
      }
    }
    xpc_null_create();
LABEL_19:
    char v9 = dispatch_group_create();
    xpc_object_t v10 = v9;
    xpc_object_t v11 = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v11);
      if (v10)
      {
        dispatch_retain(v10);
        dispatch_group_enter(v10);
      }
      xpc_null_create();
      xpc_null_create();
      operator new();
    }
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v10);
    }
    xpc_null_create();
    xpc_null_create();
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
    sub_100101134();
  }
  xpc_release(v6);
}

void sub_1000973A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100097470(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  for (i = *(void **)(a1 + 224); i; i = (void *)*i)
  {
    uint64_t v4 = (uint64_t *)i[8];
    xpc_object_t v5 = (uint64_t *)i[9];
    while (v4 != v5)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v8 = (const void **)sub_100047040(v6);
      sub_10009A6B4((uint64_t **)a2, v8, (uint64_t)v8);
      if (v7) {
        sub_1000147D8(v7);
      }
      v4 += 2;
    }
  }
}

void sub_100097504(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_10009850C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10009752C(void *a1)
{
  sub_100097638(a1);

  operator delete();
}

void *sub_100097564(uint64_t a1)
{
  return sub_100097638((void *)(a1 - 32));
}

void sub_10009756C(uint64_t a1)
{
  sub_100097638((void *)(a1 - 32));

  operator delete();
}

void *sub_1000975A8(uint64_t a1)
{
  return sub_100097638((void *)(a1 - 40));
}

void sub_1000975B0(uint64_t a1)
{
  sub_100097638((void *)(a1 - 40));

  operator delete();
}

void **sub_1000975EC(void **a1, void **a2, void *a3)
{
  xpc_object_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *a1 = xpc_null_create();
  }
  a1[1] = a3;
  return a1;
}

void *sub_100097638(void *a1)
{
  *a1 = off_1001566D0;
  a1[4] = off_100156728;
  a1[5] = off_100156768;
  int v2 = (std::__shared_weak_count *)a1[34];
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_100097758(a1 + 32, 0);
  sub_1000977A4((uint64_t)(a1 + 26));
  uint64_t v3 = (std::__shared_weak_count *)a1[25];
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[23];
  if (v4) {
    sub_1000147D8(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)a1[21];
  if (v5) {
    sub_1000147D8(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[19];
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[17];
  if (v7) {
    sub_1000147D8(v7);
  }
  xpc_object_t v8 = (std::__shared_weak_count *)a1[15];
  if (v8) {
    sub_1000147D8(v8);
  }
  char v9 = (std::__shared_weak_count *)a1[13];
  if (v9) {
    sub_1000147D8(v9);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)a1[11];
  if (v10) {
    sub_1000147D8(v10);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)a1[9];
  if (v11) {
    sub_1000147D8(v11);
  }
  char v12 = (std::__shared_weak_count *)a1[7];
  if (v12) {
    sub_1000147D8(v12);
  }
  sub_10004085C((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_100097758(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100089BF4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1000977A4(uint64_t a1)
{
  sub_1000977E0(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000977E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100097824((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_100097824(uint64_t a1)
{
  int v2 = (void **)(a1 + 48);
  sub_100014738(&v2);
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
}

void sub_1000978AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000978B8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100097938(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100097A10);
  __cxa_rethrow();
}

void sub_100097960(_Unwind_Exception *a1)
{
}

void sub_100097978(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000979B0(uint64_t a1)
{
}

uint64_t sub_1000979CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100097A10(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100097C34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  string = xpc_dictionary_get_string(**(xpc_object_t **)v1, "com.apple.message.domain");
  uint64_t v4 = (char *)string;
  if (string && ((v5 = *(uint64_t **)(v2 + 264)) == 0 || (size_t v6 = strlen(string), (sub_10006A698(v5, v4, v6) & 1) != 0)))
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    char v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100056E34(**(void ***)v1, (uint64_t)&v11);
    memset(__p, 170, 24);
    sub_100007460((uint64_t)&v11, -1, 0x20u, 0, 0, __p);
    if (os_log_type_enabled((os_log_t)qword_10015EF38, OS_LOG_TYPE_DEBUG)) {
      sub_1001011FC();
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(v2 + 48);
    if (v7)
    {
      sub_100015438(__p, v4);
      sub_10008D90C((long long *)__p, (uint64_t)&v11, &v9);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v9);
      if (v10) {
        sub_1000147D8(v10);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR))
    {
      sub_100101194();
    }
    sub_100016EAC((uint64_t)&v11);
    sub_100016B28(&v12, v11);
  }
  else
  {
    xpc_object_t v8 = qword_10015EF28;
    if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[MT Shim] Dropping %{public}s as it isn't used in any transform (not in the config or budgeted?)", (uint8_t *)__p, 0xCu);
    }
  }
}

void sub_100097E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t a17, void *__p, int a19, __int16 a20,uint64_t a21,char a22,char a23,uint64_t a24)
{
  if (a11) {
    sub_1000147D8(a11);
  }
  if (SHIBYTE(a21) < 0) {
    operator delete(__p);
  }
  sub_100016EAC((uint64_t)&a16);
  sub_100016B28((uint64_t **)&a17, a16);
  _Unwind_Resume(a1);
}

void sub_100097FB8(char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)*a1;
  uint64_t v3 = *(uint64_t **)(v2 + 264);
  if (v3 && (size_t v4 = strlen(v1 + 16), (sub_10006A698(v3, v1 + 16, v4) & 1) != 0))
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    char v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100056B4C((uint64_t)(v1 + 8), &v11);
    uint64_t v5 = *(void *)(v2 + 48);
    if (v5) {
      BOOL v6 = v11 == 1;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t v7 = qword_10015EF38;
      if (os_log_type_enabled((os_log_t)qword_10015EF38, OS_LOG_TYPE_DEBUG))
      {
        sub_100007460((uint64_t)&v11, -1, 0x20u, 0, 1, __p);
        if (v10 >= 0) {
          xpc_object_t v8 = __p;
        }
        else {
          xpc_object_t v8 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)unint64_t v14 = v1 + 16;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v5 = *(void *)(v2 + 48);
      }
      sub_100015438(__p, v1 + 16);
      sub_10008D90C((long long *)__p, (uint64_t)&v11, buf);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 16))(v5, buf);
      if (*(void *)&v14[4]) {
        sub_1000147D8(*(std::__shared_weak_count **)&v14[4]);
      }
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR))
    {
      sub_100101308();
    }
    sub_100016EAC((uint64_t)&v11);
    sub_100016B28(&v12, v11);
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEBUG))
  {
    sub_100101290();
  }
  operator delete();
}

void sub_10009820C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

uint64_t **sub_100098290(void *a1, xpc_object_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ ((unint64_t)*a2 >> 32));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (((unint64_t)*a2 >> 32) ^ (v4 >> 47) ^ v4)) >> 47));
    if (v5 >= *(void *)&v2) {
      unint64_t v8 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (i = *v9; i; i = (uint64_t **)*i)
  {
    unint64_t v11 = (unint64_t)i[1];
    if (v11 == v5)
    {
      if (xpc_equal(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
      }
      else
      {
        v11 &= *(void *)&v2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return i;
}

void sub_1000983B8(uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 40);
  int8x8_t v2 = *v1;
  uint64_t v3 = *v1 + 26;
  unint64_t v4 = sub_100098290(v3, v1[1]);
  if (v4)
  {
    unint64_t v5 = v4;
    uint8x8_t v6 = v4[8];
    for (i = v4[9]; v6 != i; v6 += 2)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = (std::__shared_weak_count *)v6[1];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v10 = v2[8];
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        xpc_object_t v10 = v2[8];
      }
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      uint64_t v11 = sub_100047040(v8);
      (*(void (**)(xpc_object_t, uint64_t *, uint64_t))(*(void *)v10 + 24))(v10, &v12, v11);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v9) {
        sub_1000147D8(v9);
      }
    }
    sub_100046A6C(v3, v5, (uint64_t)v14);
    sub_100027DA4((uint64_t)v14, 0);
  }
}

void sub_1000984E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v10) {
    sub_1000147D8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009850C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10009850C(a1, *(void *)a2);
    sub_10009850C(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *sub_100098570(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 176))
  {
    sub_100097758((uint64_t *)(v2 + 256), 0);
    sub_100097470(v2, (uint64_t)__p);
    sub_100089AA4();
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR)) {
    sub_1001013D0();
  }
  sub_100097758((uint64_t *)(v2 + 256), 0);
  sub_100042CF8(&v5);
  return sub_100024E7C((uint64_t *)&v4);
}

void sub_100098808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100042CF8(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100098898(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1000969A8(*(void *)v1, (uint64_t **)(v1 + 8), v1 + 16);
  sub_100098928(&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_10009890C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100098928((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100098928(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(v1 + 32);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *(NSObject **)(v1 + 32);
      if (v3) {
        dispatch_release(v3);
      }
    }
    sub_100016EAC(v1 + 16);
    sub_100016B28((uint64_t **)(v1 + 24), *(unsigned __int8 *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_1000989A0()
{
}

void *sub_1000989B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100156938;
  result[1] = v3;
  return result;
}

uint64_t sub_1000989FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100156938;
  a2[1] = v2;
  return result;
}

void sub_100098A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_10006CD84(a2, (uint64_t)v3);
  sub_100098B20(v2, (uint64_t)v3);
  sub_100016EAC((uint64_t)v3);
  sub_100016B28(&v4, v3[0]);
}

void sub_100098AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_100016EAC((uint64_t)&a10);
  sub_100016B28((uint64_t **)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100098AD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100098B14()
{
}

uint64_t sub_100098B20(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v10 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v13, v10);
      uint64_t v11 = std::string::insert(&v13, 0, "cannot use emplace_back() with ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
      long long v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(311, (uint64_t)&v14, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    sub_100016EAC(a1);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_100071148(v5, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = *(unsigned char *)a2;
    *(void *)(v6 + 8) = *(void *)(a2 + 8);
    sub_100016EAC(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC(v6);
    uint64_t v7 = v6 + 16;
  }
  v5[1] = v7;
  return v7 - 16;
}

void sub_100098C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_100098CF8()
{
}

__n128 sub_100098D0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1001569B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100098D60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001569B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100098D98(void **a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a6)
{
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  *a1[1] += v10;
  *a1[2] += v9;
  uint64_t v11 = a1[3];
  sub_10004595C((uint64_t)v41, "uuid");
  v42 = v41;
  char v43 = 1;
  uint64_t v45 = sub_1000168C0((uint64_t)v44, a3);
  char v46 = 1;
  sub_10001200C((uint64_t)v47, (uint64_t)v41, 2, 1, 2);
  long long v48 = v47;
  char v49 = 1;
  sub_100063038((uint64_t)v35, "events");
  xpc_object_t v36 = v35;
  char v37 = 1;
  v38[0] = 6;
  v39[0] = v10;
  sub_100016EAC((uint64_t)v38);
  sub_100016EAC((uint64_t)v38);
  v39[1] = v38;
  char v40 = 1;
  sub_10001200C((uint64_t)v50, (uint64_t)v35, 2, 1, 2);
  v50[2] = v50;
  char v51 = 1;
  sub_100069C10((uint64_t)v29, "budgetUsed");
  uint64_t v30 = v29;
  char v31 = 1;
  v32[0] = 6;
  v33[0] = v9;
  sub_100016EAC((uint64_t)v32);
  sub_100016EAC((uint64_t)v32);
  v33[1] = v32;
  char v34 = 1;
  sub_10001200C((uint64_t)v52, (uint64_t)v29, 2, 1, 2);
  v52[2] = v52;
  char v53 = 1;
  sub_10001DD00((uint64_t)v23, "createdAt");
  char v24 = v23;
  char v25 = 1;
  sub_10001C968(*a6, *a1[4]);
  uint64_t v27 = sub_10001C898((uint64_t)v26, (uint64_t)&__p);
  char v28 = 1;
  sub_10001200C((uint64_t)v54, (uint64_t)v23, 2, 1, 2);
  uint64_t v55 = v54;
  char v56 = 1;
  sub_10001200C((uint64_t)v21, (uint64_t)v47, 4, 1, 2);
  unint64_t v12 = v11[1];
  if (v12 >= v11[2])
  {
    uint64_t v13 = sub_100019524(v11, (uint64_t)v21);
  }
  else
  {
    *(unsigned char *)unint64_t v12 = v21[0];
    *(void *)(v12 + 8) = v22;
    sub_100016EAC((uint64_t)v21);
    v21[0] = 0;
    int v22 = 0;
    sub_100016EAC(v12);
    uint64_t v13 = v12 + 16;
  }
  v11[1] = v13;
  sub_100016EAC((uint64_t)v21);
  sub_100016B28(&v22, v21[0]);
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    sub_100016EAC((uint64_t)&v54[i]);
    sub_100016B28((uint64_t **)&v54[i + 8], v54[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)&v26[j]);
    sub_100016B28((uint64_t **)&v26[j + 8], v26[j]);
  }
  if (v20 < 0) {
    operator delete(__p);
  }
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    sub_100016EAC((uint64_t)&v32[k * 8]);
    sub_100016B28((uint64_t **)&v33[k], v32[k * 8]);
  }
  for (uint64_t m = 0; m != -8; m -= 4)
  {
    sub_100016EAC((uint64_t)&v38[m * 8]);
    sub_100016B28((uint64_t **)&v39[m], v38[m * 8]);
  }
  for (uint64_t n = 0; n != -64; n -= 32)
  {
    sub_100016EAC((uint64_t)&v44[n]);
    sub_100016B28((uint64_t **)&v44[n + 8], v44[n]);
  }
}

void sub_100099154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_100016EAC((uint64_t)&a15);
  sub_100016B28((uint64_t **)(v41 + 8), a15);
  uint64_t v44 = 0;
  uint64_t v45 = v42 - 216;
  do
  {
    sub_100016EAC(v45 + v44 + 96);
    sub_100016B28((uint64_t **)(v45 + v44 + 104), *(unsigned __int8 *)(v45 + v44 + 96));
    v44 -= 32;
  }
  while (v44 != -128);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)&a21 + i);
    sub_100016B28((uint64_t **)((char *)&a22 + i), *((unsigned __int8 *)&a21 + i));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)&a29 + j);
    sub_100016B28((uint64_t **)((char *)&a30 + j), *((unsigned __int8 *)&a29 + j));
  }
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    sub_100016EAC((uint64_t)&a37 + k);
    sub_100016B28((uint64_t **)((char *)&a38 + k), *((unsigned __int8 *)&a37 + k));
  }
  for (uint64_t m = 0; m != -64; m -= 32)
  {
    sub_100016EAC((uint64_t)(&a41 + m + 32));
    sub_100016B28((uint64_t **)(&a41 + m + 40), *(&a41 + m + 32));
  }
  _Unwind_Resume(a1);
}

void sub_10009930C()
{
}

void sub_100099318()
{
}

void sub_100099328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unsigned __int8 a38,uint64_t *a39)
{
}

void sub_100099348()
{
}

uint64_t sub_100099350(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100099390()
{
}

void *sub_10009939C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

dispatch_group_t **sub_100099420(dispatch_group_t **result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    if (*v1)
    {
      dispatch_group_leave(*v1);
      if (*v1) {
        dispatch_release(*v1);
      }
    }
    operator delete();
  }
  return result;
}

void sub_100099480(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000CB998(*(void **)(*(void *)(a1 + 8) + 128), &object);
}

void sub_10009950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100099420(&a10);
  _Unwind_Resume(a1);
}

void sub_100099534(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000CB998(*(void **)(*(void *)(a1 + 8) + 128), &object);
}

void sub_1000995C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100099420(&a10);
  _Unwind_Resume(a1);
}

void sub_1000995E8(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000CB28C(*(void **)(*(void *)(a1 + 8) + 128), &object);
}

void sub_100099674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100099420(&a10);
  _Unwind_Resume(a1);
}

void sub_10009969C(uint64_t a1)
{
  uint64_t v1 = a1;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_1000CB28C(*(void **)(*(void *)(a1 + 8) + 128), &object);
}

void sub_100099728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t *a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100099420(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100099750(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1000997D0(uint64_t a1)
{
  uint64_t v4 = a1;
  if (xpc_get_type(*(xpc_object_t *)(a1 + 16)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 16));
    xpc_connection_send_message(remote_connection, *(xpc_object_t *)(a1 + 16));
  }
  return sub_100099750(&v4);
}

void sub_100099858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10009986C(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1000998EC(uint64_t a1)
{
  uint64_t v4 = a1;
  if (xpc_get_type(*(xpc_object_t *)(a1 + 16)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 16));
    xpc_connection_send_message(remote_connection, *(xpc_object_t *)(a1 + 16));
  }
  return sub_10009986C(&v4);
}

void sub_100099974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100099988(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100099A08(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100099A80(a1 + 8);
  return sub_100099988(&v2);
}

void sub_100099A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100099A80(uint64_t a1)
{
  uint64_t v1 = (xpc_object_t *)(a1 + 8);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 8)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v4 = xpc_BOOL_create(1);
    if (!v4) {
      xpc_object_t v4 = xpc_null_create();
    }
    v3[0] = v1;
    v3[1] = "disable-sampling";
    sub_100003760((uint64_t)v3, &v4, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v4);
    xpc_object_t v4 = 0;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*v1);
    xpc_connection_send_message(remote_connection, *v1);
  }
}

void sub_100099B48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100099B6C(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100099BEC(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100099A80(a1 + 8);
  return sub_100099B6C(&v2);
}

void sub_100099C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100099C64(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100099CE4(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100099D5C(a1 + 8);
  return sub_100099C64(&v2);
}

void sub_100099D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100099D5C(uint64_t a1)
{
  uint64_t v1 = (xpc_object_t *)(a1 + 8);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 8)) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v4 = xpc_BOOL_create(1);
    if (!v4) {
      xpc_object_t v4 = xpc_null_create();
    }
    v3[0] = v1;
    v3[1] = "reenable-sampling";
    sub_100003760((uint64_t)v3, &v4, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v4);
    xpc_object_t v4 = 0;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*v1);
    xpc_connection_send_message(remote_connection, *v1);
  }
}

void sub_100099E24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100099E48(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100099EC8(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_100099D5C(a1 + 8);
  return sub_100099E48(&v2);
}

void sub_100099F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100099F40(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100099FB8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100099FB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_10009A07C((uint64_t)v14);
  return v10;
}

uint64_t sub_10009A07C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054214(a1);
  }
  return a1;
}

uint64_t sub_10009A0B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  dispatch_object_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[16 * v4];
  char v16 = &v10[16 * v9];
  sub_1000168C0((uint64_t)v14, a2);
  unint64_t v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_10009A1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10009A1D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = 0;
  sub_10009A248(v4, v5, v6, v7);
  return v4;
}

void sub_10009A234(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10009A248(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100018368(result, a4);
    uint64_t result = (void *)sub_10009A300((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10009A2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_100016F68((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10009A300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  void v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1000168C0(v4, v6);
      v6 += 24;
      uint64_t v4 = v9 + 16;
      v9 += 16;
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  sub_100018480((uint64_t)v10);
  return v4;
}

void sub_10009A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100018480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10009A3D4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10009A454(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_10009A4CC((xpc_object_t *)(a1 + 8));
  return sub_10009A3D4(&v2);
}

void sub_10009A4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10009A4CC(xpc_object_t *a1)
{
  uint64_t v2 = a1 + 1;
  if (xpc_get_type(a1[1]) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v5 = xpc_BOOL_create(1);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    v4[0] = v2;
    v4[1] = "rollover";
    sub_100003760((uint64_t)v4, &v5, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
    xpc_object_t v5 = 0;
    remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*a1);
    xpc_connection_send_message(remote_connection, a1[1]);
  }
}

void sub_10009A598(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10009A5BC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    if (*(void *)v1)
    {
      dispatch_group_leave(*(dispatch_group_t *)v1);
      if (*(void *)v1) {
        dispatch_release(*(dispatch_object_t *)v1);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10009A63C(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_10009A4CC((xpc_object_t *)(a1 + 8));
  return sub_10009A5BC(&v2);
}

void sub_10009A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10009A6B4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = (uint64_t **)sub_10001855C((uint64_t)a1, &v7, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    memset(v8, 170, sizeof(v8));
    sub_10009A76C((uint64_t)a1, a3, v8);
    sub_1000187B0(a1, v7, v5, v8[0]);
    return v8[0];
  }
  return result;
}

void *sub_10009A76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  uint64_t v6 = (char *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100017424(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10009A800(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10009A81C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10009A81C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10009A87C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10009A898()
{
}

void sub_10009A94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_1001014F0(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10009A990(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100156A48;
  a1[3] = sub_10005CF30();
  a1[7] = 0;
  return a1;
}

void sub_10009A9E0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  nullsub_13(v1);
  _Unwind_Resume(a1);
}

void sub_10009AA00(uint64_t a1@<X8>)
{
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  v64 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B2A98((uint64_t)"cadence", &v63);
  if (v63 != 1)
  {
LABEL_102:
    *(_OWORD *)(a1 + 105) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    goto LABEL_144;
  }
  v70 = "bootToken";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v2;
  long long v72 = v2;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v3 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_6:
    if (*v3 - 5 < 3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = (unsigned __int8 *)sub_1000155C8();
  if (v3) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v3 = 0;
LABEL_8:
  v70 = "lastSubmission";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v4;
  long long v72 = v4;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v5 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_12:
    if (*v5 - 5 < 3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v5 = (unsigned __int8 *)sub_1000155C8();
  if (v5) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v5 = 0;
LABEL_14:
  v62 = v5;
  v70 = "nextSubmission";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v6;
  long long v72 = v6;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v7 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_18:
    if (*v7 - 5 < 3) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v7 = (unsigned __int8 *)sub_1000155C8();
  if (v7) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v7 = 0;
LABEL_20:
  v61 = v7;
  v70 = "rolloverContainsPartialData";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v8;
  long long v72 = v8;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v9 = (unsigned __int8 *)sub_1000155C8();
    if (!v9)
    {
      v60 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v9 = sub_100013AAC((unsigned __int8 **)buf);
  }
  int v11 = *v9;
  uint64_t v10 = v9 + 8;
  if (v11 == 4) {
    long long v12 = v10;
  }
  else {
    long long v12 = 0;
  }
  v60 = v12;
LABEL_28:
  v70 = "osVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v13;
  long long v72 = v13;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v14 = sub_1000155C8();
    if (!v14) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v14 == 3)
  {
    unint64_t v15 = *(long long **)(v14 + 8);
    goto LABEL_35;
  }
LABEL_34:
  unint64_t v15 = 0;
LABEL_35:
  v70 = "lastOSVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v16;
  long long v72 = v16;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v17 = sub_1000155C8();
    if (!v17) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v17 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v17 == 3)
  {
    uint64_t v18 = *(long long **)(v17 + 8);
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v18 = 0;
LABEL_42:
  v70 = "osProductNameWithVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v19;
  long long v72 = v19;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v20 = sub_1000155C8();
    if (!v20) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v20 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v20 == 3)
  {
    unint64_t v21 = *(long long **)(v20 + 8);
    goto LABEL_49;
  }
LABEL_48:
  unint64_t v21 = 0;
LABEL_49:
  v70 = "lastOSProductNameWithVersion";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v22;
  long long v72 = v22;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v23 = sub_1000155C8();
    if (!v23) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v23 == 3)
  {
    v59 = *(long long **)(v23 + 8);
    goto LABEL_56;
  }
LABEL_55:
  v59 = 0;
LABEL_56:
  v70 = "lastOSChangeDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v24;
  long long v72 = v24;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    char v25 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_60:
    if (*v25 - 5 < 3) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  char v25 = (unsigned __int8 *)sub_1000155C8();
  if (v25) {
    goto LABEL_60;
  }
LABEL_61:
  char v25 = 0;
LABEL_62:
  v70 = "lastDailyDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v26;
  long long v72 = v26;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v27 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_66:
    if (*v27 - 5 < 3) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  uint64_t v27 = (unsigned __int8 *)sub_1000155C8();
  if (v27) {
    goto LABEL_66;
  }
LABEL_67:
  uint64_t v27 = 0;
LABEL_68:
  v70 = "last91stDaySeen";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v28;
  long long v72 = v28;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (!sub_100013964((unsigned __int8 **)buf, &v65))
  {
    char v29 = sub_100013AAC((unsigned __int8 **)buf);
LABEL_72:
    if (*v29 - 5 < 3) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  char v29 = (unsigned __int8 *)sub_1000155C8();
  if (v29) {
    goto LABEL_72;
  }
LABEL_73:
  char v29 = 0;
LABEL_74:
  v70 = "Daily";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v30;
  long long v72 = v30;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  v58 = v27;
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v31 = sub_1000155C8();
    if (!v31) {
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v31 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v31 == 3)
  {
    uint64_t v32 = *(long long **)(v31 + 8);
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v32 = 0;
LABEL_81:
  v70 = "90Day";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v33;
  long long v72 = v33;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    uint64_t v34 = sub_1000155C8();
    uint64_t v35 = v25;
    if (!v34)
    {
      xpc_object_t v36 = v21;
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v34 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
    uint64_t v35 = v25;
  }
  xpc_object_t v36 = v21;
  if (*(unsigned char *)v34 == 3)
  {
    char v37 = v18;
    uint64_t v38 = *(long long **)(v34 + 8);
    goto LABEL_88;
  }
LABEL_87:
  char v37 = v18;
  uint64_t v38 = 0;
LABEL_88:
  v70 = "pastDueLegacy";
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v39;
  long long v72 = v39;
  sub_1000135DC((uint64_t)&v63, &v70, (uint64_t)buf);
  v65 = (unsigned __int8 *)&v63;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0x8000000000000000;
  sub_100013648(&v65);
  if (sub_100013964((unsigned __int8 **)buf, &v65))
  {
    char v40 = (unsigned __int8 *)sub_1000155C8();
    if (!v40) {
      goto LABEL_93;
    }
  }
  else
  {
    char v40 = sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*v40 - 5 >= 3) {
LABEL_93:
  }
    char v40 = 0;
  if (!v3 || !v62 || !v61 || !v15)
  {
    uint64_t v42 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "[CadenceManager] Retrieved cadence but did not match schema. Treating as no-data.", buf, 2u);
    }
    goto LABEL_102;
  }
  *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v3, (uint64_t *)buf);
  *(void *)a1 = *(void *)buf;
  if (*((char *)v15 + 23) < 0)
  {
    sub_100017424((unsigned char *)(a1 + 8), *(void **)v15, *((void *)v15 + 1));
  }
  else
  {
    long long v41 = *v15;
    *(void *)(a1 + 24) = *((void *)v15 + 2);
    *(_OWORD *)(a1 + 8) = v41;
  }
  char v43 = (unsigned char *)(a1 + 32);
  if (v37)
  {
    if (*((char *)v37 + 23) < 0)
    {
      sub_100017424(v43, *(void **)v37, *((void *)v37 + 1));
    }
    else
    {
      long long v44 = *v37;
      *(void *)(a1 + 48) = *((void *)v37 + 2);
      *(_OWORD *)char v43 = v44;
    }
  }
  else
  {
    sub_100015438(v43, "");
  }
  if (v36)
  {
    uint64_t v45 = v36;
    int v46 = *((char *)v36 + 23);
    uint64_t v47 = v35;
    if (v46 < 0)
    {
      sub_100017424((unsigned char *)(a1 + 56), *(void **)v45, *((void *)v45 + 1));
    }
    else
    {
      long long v48 = *v45;
      *(void *)(a1 + 72) = *((void *)v45 + 2);
      *(_OWORD *)(a1 + 56) = v48;
    }
  }
  else
  {
    sub_100015438((void *)(a1 + 56), "");
    uint64_t v47 = v35;
  }
  if (v59)
  {
    if (*((char *)v59 + 23) < 0)
    {
      sub_100017424((unsigned char *)(a1 + 80), *(void **)v59, *((void *)v59 + 1));
    }
    else
    {
      long long v49 = *v59;
      *(void *)(a1 + 96) = *((void *)v59 + 2);
      *(_OWORD *)(a1 + 80) = v49;
    }
  }
  else
  {
    sub_100015438((void *)(a1 + 80), "");
  }
  *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v62, (uint64_t *)buf);
  *(std::chrono::system_clock::time_point *)(a1 + 104) = std::chrono::system_clock::from_time_t(*(time_t *)buf);
  *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v61, (uint64_t *)buf);
  *(std::chrono::system_clock::time_point *)(a1 + 112) = std::chrono::system_clock::from_time_t(*(time_t *)buf);
  BOOL v50 = (char)v60;
  if (v60) {
    BOOL v50 = *v60 != 0;
  }
  *(unsigned char *)(a1 + 120) = v50;
  if (v32)
  {
    if (*((char *)v32 + 23) < 0)
    {
      sub_100017424((unsigned char *)(a1 + 128), *(void **)v32, *((void *)v32 + 1));
    }
    else
    {
      long long v51 = *v32;
      *(void *)(a1 + 144) = *((void *)v32 + 2);
      *(_OWORD *)(a1 + 128) = v51;
    }
  }
  else
  {
    sub_100015438((void *)(a1 + 128), "");
  }
  if (v38)
  {
    xpc_object_t v52 = v58;
    if (*((char *)v38 + 23) < 0)
    {
      sub_100017424((unsigned char *)(a1 + 152), *(void **)v38, *((void *)v38 + 1));
    }
    else
    {
      long long v53 = *v38;
      *(void *)(a1 + 168) = *((void *)v38 + 2);
      *(_OWORD *)(a1 + 152) = v53;
    }
  }
  else
  {
    sub_100015438((void *)(a1 + 152), "");
    xpc_object_t v52 = v58;
  }
  if (v29)
  {
    *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(v29, (uint64_t *)buf);
    uint64_t v54 = *(void *)buf;
  }
  else
  {
    uint64_t v54 = 0;
  }
  *(void *)(a1 + 176) = v54;
  if (v52)
  {
    *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(v52, (uint64_t *)buf);
    uint64_t v55 = *(void *)buf;
  }
  else
  {
    uint64_t v55 = 0;
  }
  *(void *)(a1 + 184) = v55;
  if (v47)
  {
    *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(v47, (uint64_t *)buf);
    uint64_t v56 = *(void *)buf;
  }
  else
  {
    uint64_t v56 = 0;
  }
  *(void *)(a1 + 192) = v56;
  if (v40)
  {
    *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(v40, (uint64_t *)buf);
    uint64_t v57 = *(void *)buf;
  }
  else
  {
    uint64_t v57 = 0;
  }
  *(void *)(a1 + 200) = v57;
LABEL_144:
  sub_100016EAC((uint64_t)&v63);
  sub_100016B28(&v64, v63);
}

void sub_10009B548(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (v9[151] < 0) {
    operator delete(*v10);
  }
  if (v9[103] < 0) {
    operator delete(*v12);
  }
  if (v9[79] < 0) {
    operator delete(*v11);
  }
  if (v9[55] < 0) {
    operator delete(*a3);
  }
  if (v9[31] < 0) {
    operator delete(*a4);
  }
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_10009B63C(uint64_t a1, uint64_t a2)
{
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  v85 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v84, 0, 0, 0, 1);
  v82[0] = 5;
  uint64_t v83 = 1;
  sub_100016EAC((uint64_t)v82);
  sub_100016EAC((uint64_t)v82);
  uint64_t v3 = sub_10000D104((unsigned __int8 *)&v84, "version");
  sub_100016EAC((uint64_t)v82);
  unsigned __int8 v4 = *(unsigned char *)v3;
  *(unsigned char *)uint64_t v3 = v82[0];
  v82[0] = v4;
  uint64_t v5 = (uint64_t *)v3[1];
  v3[1] = v83;
  uint64_t v83 = (uint64_t)v5;
  sub_100016EAC((uint64_t)v3);
  sub_100016EAC((uint64_t)v82);
  sub_100016B28((uint64_t **)&v83, v82[0]);
  long long v6 = *(uint64_t **)a2;
  v80[0] = 5;
  v81 = v6;
  sub_100016EAC((uint64_t)v80);
  sub_100016EAC((uint64_t)v80);
  uint64_t v7 = sub_10000D104((unsigned __int8 *)&v84, "bootToken");
  sub_100016EAC((uint64_t)v80);
  unsigned __int8 v8 = *(unsigned char *)v7;
  *(unsigned char *)uint64_t v7 = v80[0];
  v80[0] = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v81;
  v81 = v9;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v80);
  sub_100016B28(&v81, v80[0]);
  sub_1000168C0((uint64_t)v78, a2 + 8);
  uint64_t v10 = sub_10000D104((unsigned __int8 *)&v84, "osVersion");
  sub_100016EAC((uint64_t)v78);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)uint64_t v10 = v78[0];
  v78[0] = v11;
  long long v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v79;
  v79 = v12;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v78);
  sub_100016B28(&v79, v78[0]);
  sub_1000168C0((uint64_t)v76, a2 + 32);
  long long v13 = sub_10000D104((unsigned __int8 *)&v84, "lastOSVersion");
  sub_100016EAC((uint64_t)v76);
  char v14 = *(unsigned char *)v13;
  *(unsigned char *)long long v13 = v76[0];
  v76[0] = v14;
  unint64_t v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v77;
  v77 = v15;
  sub_100016EAC((uint64_t)v13);
  sub_100016EAC((uint64_t)v76);
  sub_100016B28(&v77, v76[0]);
  sub_1000168C0((uint64_t)v74, a2 + 56);
  long long v16 = sub_10000D104((unsigned __int8 *)&v84, "osProductNameWithVersion");
  sub_100016EAC((uint64_t)v74);
  char v17 = *(unsigned char *)v16;
  *(unsigned char *)long long v16 = v74[0];
  v74[0] = v17;
  uint64_t v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v75;
  v75 = v18;
  sub_100016EAC((uint64_t)v16);
  sub_100016EAC((uint64_t)v74);
  sub_100016B28(&v75, v74[0]);
  sub_1000168C0((uint64_t)v72, a2 + 80);
  long long v19 = sub_10000D104((unsigned __int8 *)&v84, "lastOSProductNameWithVersion");
  sub_100016EAC((uint64_t)v72);
  char v20 = *(unsigned char *)v19;
  *(unsigned char *)long long v19 = v72[0];
  v72[0] = v20;
  unint64_t v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v73;
  unint64_t v73 = v21;
  sub_100016EAC((uint64_t)v19);
  sub_100016EAC((uint64_t)v72);
  sub_100016B28(&v73, v72[0]);
  v70[0] = 5;
  v71 = (uint64_t *)std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a2 + 104));
  sub_100016EAC((uint64_t)v70);
  sub_100016EAC((uint64_t)v70);
  long long v22 = sub_10000D104((unsigned __int8 *)&v84, "lastSubmission");
  sub_100016EAC((uint64_t)v70);
  unsigned __int8 v23 = *(unsigned char *)v22;
  *(unsigned char *)long long v22 = v70[0];
  v70[0] = v23;
  long long v24 = (uint64_t *)v22[1];
  v22[1] = (uint64_t)v71;
  v71 = v24;
  sub_100016EAC((uint64_t)v22);
  sub_100016EAC((uint64_t)v70);
  sub_100016B28(&v71, v70[0]);
  v68[0] = 5;
  unint64_t v69 = (uint64_t *)std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a2 + 112));
  sub_100016EAC((uint64_t)v68);
  sub_100016EAC((uint64_t)v68);
  char v25 = sub_10000D104((unsigned __int8 *)&v84, "nextSubmission");
  sub_100016EAC((uint64_t)v68);
  unsigned __int8 v26 = *(unsigned char *)v25;
  *(unsigned char *)char v25 = v68[0];
  v68[0] = v26;
  uint64_t v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v69;
  unint64_t v69 = v27;
  sub_100016EAC((uint64_t)v25);
  sub_100016EAC((uint64_t)v68);
  sub_100016B28(&v69, v68[0]);
  long long v28 = (uint64_t *)*(unsigned __int8 *)(a2 + 120);
  v66[0] = 4;
  uint64_t v67 = v28;
  sub_100016EAC((uint64_t)v66);
  sub_100016EAC((uint64_t)v66);
  char v29 = sub_10000D104((unsigned __int8 *)&v84, "rolloverContainsPartialData");
  sub_100016EAC((uint64_t)v66);
  unsigned __int8 v30 = *(unsigned char *)v29;
  *(unsigned char *)char v29 = v66[0];
  v66[0] = v30;
  uint64_t v31 = (uint64_t *)v29[1];
  v29[1] = (uint64_t)v67;
  uint64_t v67 = v31;
  sub_100016EAC((uint64_t)v29);
  sub_100016EAC((uint64_t)v66);
  sub_100016B28(&v67, v66[0]);
  sub_1000168C0((uint64_t)v64, a2 + 128);
  uint64_t v32 = sub_10000D104((unsigned __int8 *)&v84, "Daily");
  sub_100016EAC((uint64_t)v64);
  char v33 = *(unsigned char *)v32;
  *(unsigned char *)uint64_t v32 = v64[0];
  v64[0] = v33;
  uint64_t v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v65;
  v65 = v34;
  sub_100016EAC((uint64_t)v32);
  sub_100016EAC((uint64_t)v64);
  sub_100016B28(&v65, v64[0]);
  sub_1000168C0((uint64_t)v62, a2 + 152);
  uint64_t v35 = sub_10000D104((unsigned __int8 *)&v84, "90Day");
  sub_100016EAC((uint64_t)v62);
  char v36 = *(unsigned char *)v35;
  *(unsigned char *)uint64_t v35 = v62[0];
  v62[0] = v36;
  char v37 = (uint64_t *)v35[1];
  v35[1] = (uint64_t)v63;
  unint64_t v63 = v37;
  sub_100016EAC((uint64_t)v35);
  sub_100016EAC((uint64_t)v62);
  sub_100016B28(&v63, v62[0]);
  uint64_t v38 = *(uint64_t **)(a2 + 184);
  v60[0] = 5;
  v61 = v38;
  sub_100016EAC((uint64_t)v60);
  sub_100016EAC((uint64_t)v60);
  long long v39 = sub_10000D104((unsigned __int8 *)&v84, "lastDailyDaySeen");
  sub_100016EAC((uint64_t)v60);
  unsigned __int8 v40 = *(unsigned char *)v39;
  *(unsigned char *)long long v39 = v60[0];
  v60[0] = v40;
  long long v41 = (uint64_t *)v39[1];
  v39[1] = (uint64_t)v61;
  v61 = v41;
  sub_100016EAC((uint64_t)v39);
  sub_100016EAC((uint64_t)v60);
  sub_100016B28(&v61, v60[0]);
  uint64_t v42 = *(uint64_t **)(a2 + 176);
  v58[0] = 5;
  v59 = v42;
  sub_100016EAC((uint64_t)v58);
  sub_100016EAC((uint64_t)v58);
  char v43 = sub_10000D104((unsigned __int8 *)&v84, "last91stDaySeen");
  sub_100016EAC((uint64_t)v58);
  unsigned __int8 v44 = *(unsigned char *)v43;
  *(unsigned char *)char v43 = v58[0];
  v58[0] = v44;
  uint64_t v45 = (uint64_t *)v43[1];
  v43[1] = (uint64_t)v59;
  v59 = v45;
  sub_100016EAC((uint64_t)v43);
  sub_100016EAC((uint64_t)v58);
  sub_100016B28(&v59, v58[0]);
  int v46 = *(uint64_t **)(a2 + 192);
  v56[0] = 5;
  uint64_t v57 = v46;
  sub_100016EAC((uint64_t)v56);
  sub_100016EAC((uint64_t)v56);
  uint64_t v47 = sub_10000D104((unsigned __int8 *)&v84, "lastOSChangeDaySeen");
  sub_100016EAC((uint64_t)v56);
  unsigned __int8 v48 = *(unsigned char *)v47;
  *(unsigned char *)uint64_t v47 = v56[0];
  v56[0] = v48;
  long long v49 = (uint64_t *)v47[1];
  v47[1] = (uint64_t)v57;
  uint64_t v57 = v49;
  sub_100016EAC((uint64_t)v47);
  sub_100016EAC((uint64_t)v56);
  sub_100016B28(&v57, v56[0]);
  BOOL v50 = *(uint64_t **)(a2 + 200);
  v54[0] = 5;
  uint64_t v55 = v50;
  sub_100016EAC((uint64_t)v54);
  sub_100016EAC((uint64_t)v54);
  long long v51 = sub_10000D104((unsigned __int8 *)&v84, "pastDueLegacy");
  sub_100016EAC((uint64_t)v54);
  unsigned __int8 v52 = *(unsigned char *)v51;
  *(unsigned char *)long long v51 = v54[0];
  v54[0] = v52;
  long long v53 = (uint64_t *)v51[1];
  v51[1] = (uint64_t)v55;
  uint64_t v55 = v53;
  sub_100016EAC((uint64_t)v51);
  sub_100016EAC((uint64_t)v54);
  sub_100016B28(&v55, v54[0]);
  sub_1000B2C84((uint64_t)"cadence", (uint64_t)&v84);
  sub_100016EAC((uint64_t)&v84);
  sub_100016B28(&v85, v84);
}

void sub_10009BDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_10009BEB0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

std::chrono::system_clock::time_point sub_10009BEBC()
{
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (result.__d_.__rep_ % 86400000000 > 0) {
    return (std::chrono::system_clock::time_point)(result.__d_.__rep_
  }
                                                 + 86400000000
                                                 - result.__d_.__rep_ % 86400000000);
  return result;
}

void sub_10009BF10(uint64_t a1, uint64_t a2)
{
  sub_10009C9B0((void *)(a1 + 32), a2);
  sub_10000FB4C(&handler, (void *)(a1 + 8));
  unsigned __int8 v4 = handler;
  uint64_t v3 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
    sub_1000147D8(v3);
  }
  uint64_t v5 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEBUG)) {
    sub_100101528(v5);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  void v10[2] = sub_10009C27C;
  void v10[3] = &unk_100156A88;
  v10[4] = v4;
  char v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  handler = _NSConcreteStackBlock;
  uint64_t v13 = 0x40000000;
  char v14 = sub_10009C588;
  unint64_t v15 = &unk_100156B68;
  char v17 = "com.apple.CoreAnalytics.2Hours";
  uint64_t v18 = 7200;
  long long v16 = v10;
  xpc_activity_register("com.apple.CoreAnalytics.2Hours", XPC_ACTIVITY_CHECK_IN, &handler);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  v8[2] = sub_10009C3AC;
  v8[3] = &unk_100156AB8;
  v8[4] = v4;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  handler = _NSConcreteStackBlock;
  uint64_t v13 = 0x40000000;
  char v14 = sub_10009C588;
  unint64_t v15 = &unk_100156B68;
  char v17 = "com.apple.CoreAnalytics.6Hours";
  uint64_t v18 = 21600;
  long long v16 = v8;
  xpc_activity_register("com.apple.CoreAnalytics.6Hours", XPC_ACTIVITY_CHECK_IN, &handler);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1174405120;
  v6[2] = sub_10009C430;
  v6[3] = &unk_100156AE8;
  v6[4] = v4;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  handler = _NSConcreteStackBlock;
  uint64_t v13 = 0x40000000;
  char v14 = sub_10009C588;
  unint64_t v15 = &unk_100156B68;
  char v17 = "com.apple.CoreAnalytics.Daily";
  uint64_t v18 = 86400;
  long long v16 = v6;
  xpc_activity_register("com.apple.CoreAnalytics.Daily", XPC_ACTIVITY_CHECK_IN, &handler);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10009C218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009C27C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned __int8 v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(void *)(v5 + 56)) {
        sub_10009C300(v5 + 32, 0);
      }
      sub_1000147D8(v4);
    }
  }
}

void sub_10009C2EC(_Unwind_Exception *a1)
{
  sub_1000147D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C300(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10009C380(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10009C39C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10009C3AC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(void *)(v5 + 56)) {
        sub_10009C300(v5 + 32, 1);
      }
      sub_1000147D8(v4);
    }
  }
}

void sub_10009C41C(_Unwind_Exception *a1)
{
  sub_1000147D8(v1);
  _Unwind_Resume(a1);
}

void sub_10009C430(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(void *)(v5 + 56)) {
        sub_10009C300(v5 + 32, 2);
      }
      sub_1000147D8(v4);
    }
  }
}

void sub_10009C4A0(_Unwind_Exception *a1)
{
  sub_1000147D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C4B4(void *a1)
{
  *a1 = off_100156A48;
  sub_1000337E4(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  return nullsub_13(a1);
}

void sub_10009C514(void *a1)
{
  *a1 = off_100156A48;
  sub_1000337E4(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_13(a1);

  operator delete();
}

void sub_10009C588(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  xpc_object_t v5 = xpc_activity_copy_criteria(activity);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  if (state == 2)
  {
    uint64_t v10 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v15 = 136315138;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Cadence] *** Timer action! (%s)", (uint8_t *)&v15, 0xCu);
    }
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 32));
  }
  else if (!state)
  {
    xpc_type_t type = xpc_get_type(v5);
    uint64_t v7 = qword_10015EF18;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT);
    if (type == (xpc_type_t)&_xpc_type_null)
    {
      if (v8)
      {
        uint64_t v12 = *(void *)(a1 + 40);
        int v15 = 136315138;
        uint64_t v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Cadence] Creating new timer (%s)", (uint8_t *)&v15, 0xCu);
      }
      xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_release(v5);
      int64_t v14 = *(void *)(a1 + 48);
      xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_INTERVAL, v14);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_DELAY, v14);
      xpc_dictionary_set_int64(v13, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
      xpc_dictionary_set_string(v13, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v13, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v13);
      xpc_object_t v5 = v13;
    }
    else if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v15 = 136315138;
      uint64_t v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Cadence] Resuming timer (%s)", (uint8_t *)&v15, 0xCu);
    }
  }
  xpc_release(v5);
}

void sub_10009C824(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

uint64_t *sub_10009C868(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *std::chrono::system_clock::time_point result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_10009C904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10009C93C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10009C96C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_10009C9B0(void *a1, uint64_t a2)
{
  sub_10009CA34(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_10009CA34(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10009CBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NetworkStateRelay;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

id sub_10009CCF4(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 40);
  if (result) {
    return _objc_msgSend(result, "removeObserver:forKeyPath:");
  }
  return result;
}

void sub_10009CDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009CF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10009CF2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = [*(id *)(a1 + 32) path];
  uint64_t v3 = v2;
  if (v2 && ([v2 interface], uint64_t v4 = objc_claimAutoreleasedReturnValue(), v4, v4))
  {
    xpc_object_t v5 = [v3 interface];
    objc_msgSend(WeakRetained, "updatePrimaryNetworkInterfaceType:", objc_msgSend(v5, "type"), 1);
  }
  else
  {
    objc_msgSend(WeakRetained, "updatePrimaryNetworkInterfaceType:", 0, 0);
  }
}

void sub_10009CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009D1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009D2A0()
{
  sub_100015438(qword_10015EE50, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EE50, (void *)&_mh_execute_header);
  sub_100015438(qword_10015EE68, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EE68, (void *)&_mh_execute_header);
  sub_100015438(qword_10015EE80, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EE80, (void *)&_mh_execute_header);
}

void sub_10009D370()
{
}

void sub_10009D3D0()
{
}

void *sub_10009D3FC(void *a1, void *a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.DeviceKeyManagerQueue", 0);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v4;
  *a1 = off_100156C20;
  uint64_t v5 = a2[1];
  a1[4] = *a2;
  a1[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000B3E80((uint64_t)(a1 + 6));
  return a1;
}

void sub_10009D484(_Unwind_Exception *a1)
{
  dispatch_queue_t v4 = *(std::__shared_weak_count **)(v2 + 40);
  if (v4) {
    sub_1000147D8(v4);
  }
  sub_1000296A4(v1);
  _Unwind_Resume(a1);
}

void sub_10009D4A4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v9 = a2;
  v8[0] = a1;
  v8[1] = &v9;
  v8[2] = a3;
  long long v6 = sub_10000FD1C((id *)(a1 + 24));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10009DE08;
  void v10[3] = &unk_100151BF0;
  v10[4] = a1 + 8;
  void v10[5] = v8;
  uint64_t v11 = objc_retainBlock(v10);
  uint64_t v7 = v6;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009DEFC;
  block[3] = &unk_1001519A8;
  block[4] = a4;
  block[5] = &v11;
  dispatch_sync(v7, block);
}

void sub_10009D5F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10009D600(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  dispatch_queue_t v4 = sub_10000FD1C((id *)(a1 + 24));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10009DF90;
  v7[3] = &unk_100151BF0;
  v7[4] = a1 + 8;
  v7[5] = &v6;
  BOOL v8 = objc_retainBlock(v7);
  uint64_t v5 = v4;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009DEFC;
  block[3] = &unk_1001519A8;
  block[4] = a2;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_10009D744(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10009D750(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a3[24]
    || (*(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL,
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL,
        *(_OWORD *)c.count = v13,
        *(_OWORD *)c.hash = v13,
        sub_10009D924(a1, a2, (uint64_t)&c),
        !LOBYTE(c.hash[1])))
  {
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    md[2] = v10;
    md[3] = v10;
    md[0] = v10;
    md[1] = v10;
    *(_OWORD *)&c.wbuf[12] = v10;
    *(_OWORD *)&c.wbuf[14] = v10;
    *(_OWORD *)&c.wuint8_t buf[8] = v10;
    *(_OWORD *)&c.wbuf[10] = v10;
    *(_OWORD *)&c.wbuf[6] = v10;
    *(_OWORD *)&c.wbuf[2] = v10;
    *(_OWORD *)&c.wuint8_t buf[4] = v10;
    *(_OWORD *)&c.hash[6] = v10;
    *(_OWORD *)c.wlong long buf = v10;
    *(_OWORD *)&c.hash[2] = v10;
    *(_OWORD *)&c.hash[4] = v10;
    *(_OWORD *)c.count = v10;
    *(_OWORD *)c.hash = v10;
    CC_SHA512_Init(&c);
    if (*(char *)(a1 + 71) < 0)
    {
      uint64_t v11 = *(const void **)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
    }
    else
    {
      uint64_t v11 = (const void *)(a1 + 48);
      LODWORD(v12) = *(unsigned __int8 *)(a1 + 71);
    }
    CC_SHA512_Update(&c, v11, v12);
    if (v6[24])
    {
      if ((char)v6[23] < 0)
      {
        int v15 = v6;
        uint64_t v6 = *(unsigned char **)v6;
        uint64_t v14 = *((void *)v15 + 1);
      }
      else
      {
        LODWORD(v14) = v6[23];
      }
      CC_SHA512_Update(&c, v6, v14);
    }
    if (a2 >= 1)
    {
      uint64_t data = a4 / a2;
      CC_SHA512_Update(&c, &data, 8u);
    }
    CC_SHA512_Final((unsigned __int8 *)md, &c);
    sub_1000C2724((unsigned __int8 *)md, 20, a5);
  }
  else if (SHIBYTE(c.hash[0]) < 0)
  {
    sub_100017424(a5, (void *)c.count[0], c.count[1]);
    if (LOBYTE(c.hash[1]) && SHIBYTE(c.hash[0]) < 0) {
      operator delete((void *)c.count[0]);
    }
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)c.count;
    a5->__r_.__value_.__r.__words[2] = c.hash[0];
  }
}

void sub_10009D8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10009D924(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 90:
      if (!sub_100032924(*(void *)(a1 + 32))) {
        goto LABEL_13;
      }
      uint64_t v6 = *(void *)(a1 + 32);
      sub_100015438(__p, "90Day");
      sub_100032A6C(v6, (uint64_t)__p, &v11);
      break;
    case 1:
      if (!sub_1000327DC(*(void *)(a1 + 32))) {
        goto LABEL_13;
      }
      uint64_t v7 = *(void *)(a1 + 32);
      sub_100015438(__p, "Daily");
      sub_100032A6C(v7, (uint64_t)__p, &v11);
      break;
    case -1:
      id v8 = +[OSASystemConfiguration sharedInstance];
      id v5 = [v8 crashReporterKey];
      sub_100015438((void *)a3, (char *)[v5 UTF8String]);
      *(unsigned char *)(a3 + 24) = 1;

      return;
    default:
LABEL_13:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
      return;
  }
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  *(unsigned char *)(a3 + 24) = 1;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10009DAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009DAF8(uint64_t a1)
{
  sub_10009DB30(a1);

  operator delete();
}

uint64_t sub_10009DB30(uint64_t a1)
{
  *(void *)a1 = off_100156C20;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_1000296A4(a1 + 8);
  return a1;
}

void sub_10009DB94(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10009DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10009DC90((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10009DC90(uint64_t a1, id *a2)
{
  uint64_t v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_10009DDDC);
}

void sub_10009DCF8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10009DD30(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  uint64_t v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_10009DDDC);
}

uint64_t sub_10009DD98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10009DDDC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_10009DE08(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = sub_100031FD8(*(void *)(*(void *)v3 + 32));
  uint64_t v6 = *(long long **)(v3 + 16);
  LODWORD(v3) = **(_DWORD **)(v3 + 8);
  sub_10007FD94((uint64_t)__p, v6);
  sub_10009D750(v4, v3, __p, v5 / 86400000000, a2);
  if (v9)
  {
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10009DED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10009DEFC(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void sub_10009DF90(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  sub_100015438(__p, "");
  char v7 = 1;
  uint64_t v4 = sub_100057570();
  sub_10009D750(v3, 1, __p, v4, a2);
  if (v7)
  {
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10009E038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_10009E064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}s] PROGRESS: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10009E168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] INFO: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_10009E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v10 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v12 = a2;
    __int16 v13 = 2082;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[%{public}s] WARNING: %{public}s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_1000210E0(a1 + 8, a3);
}

uint64_t sub_10009E388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v10 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v12 = a2;
    __int16 v13 = 2082;
    uint64_t v14 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[%{public}s] ERROR: %{public}s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_1000210E0(a1 + 24, a3);
}

uint64_t sub_10009E4A8(uint64_t a1)
{
  *(void *)a1 = off_100156D20;
  sub_100016EAC(a1 + 24);
  sub_100016B28((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  sub_100016EAC(a1 + 8);
  sub_100016B28((uint64_t **)(a1 + 16), *(unsigned __int8 *)(a1 + 8));

  return nullsub_13(a1);
}

void sub_10009E51C(uint64_t a1)
{
  *(void *)a1 = off_100156D20;
  sub_100016EAC(a1 + 24);
  sub_100016B28((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  sub_100016EAC(a1 + 8);
  sub_100016B28((uint64_t **)(a1 + 16), *(unsigned __int8 *)(a1 + 8));
  nullsub_13(a1);

  operator delete();
}

uint64_t sub_10009E5A4@<X0>(const char *a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a1;
  v16[0] = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = 0xAAAAAAAAAAAAAAAALL;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  sub_100065AEC(a1, v16);
  if (v16[0] == -1)
  {
    sub_1000F5A40(v4, 0, (int *)&v17);
    if (v17 <= 1)
    {
      char v9 = "file does not exist";
    }
    else
    {
      sub_1000F5A40(v4, 0, (int *)&v17);
      if (v17 == 2) {
        char v9 = "file exists but could not be read";
      }
      else {
        char v9 = "path exists but is not a file";
      }
    }
    *a2 = v9;
    char v10 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *a2;
      if (!*a2) {
        uint64_t v12 = "unknown";
      }
      if (v4[23] >= 0) {
        __int16 v13 = (uint64_t *)v4;
      }
      else {
        __int16 v13 = *(uint64_t **)v4;
      }
      *(_DWORD *)long long buf = 136446466;
      long long v19 = v12;
      __int16 v20 = 2082;
      unint64_t v21 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[ConfigUtils] ERROR: Failed to load buffer from file: error='%{public}s', path='%{public}s'", buf, 0x16u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_10009E858(v16, a2, a3);
    unint64_t v6 = *a3;
    char v7 = qword_10015ED90;
    if (!v6 && os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *a2;
      if (!*a2) {
        uint64_t v14 = "unknown";
      }
      if (v4[23] >= 0) {
        int v15 = (uint64_t *)v4;
      }
      else {
        int v15 = *(uint64_t **)v4;
      }
      *(_DWORD *)long long buf = 136446466;
      long long v19 = v14;
      __int16 v20 = 2082;
      unint64_t v21 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[ConfigUtils] ERROR: Failed to load config: error='%{public}s', path='%{public}s'", buf, 0x16u);
      char v7 = qword_10015ED90;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v4[23] >= 0) {
        char v8 = v4;
      }
      else {
        char v8 = *(const char **)v4;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[ConfigUtils] Successfully loaded config from path='%{public}s", buf, 0xCu);
    }
  }
  return sub_100065AE8(v16);
}

void sub_10009E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *char v10 = "filesystem error";
    __cxa_end_catch();
    JUMPOUT(0x10009E6F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009E858(uint64_t *a1@<X0>, const char **a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1 == -1)
  {
    char v7 = "invalid buffer";
    goto LABEL_5;
  }
  unint64_t v6 = a1[1];
  if (v6 >= 0x40000001)
  {
    char v7 = "too large";
LABEL_5:
    *a2 = v7;
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v13 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F02F8(a1, &v12);
  if (v12)
  {
    char v8 = v13;
    *a3 = v12;
    a3[1] = (unint64_t)v8;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    __int16 v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    void v14[3] = 0;
    sub_10009F1E8(v5, v5 + v6, (uint64_t)v14, 1, &v10);
    sub_10000DE9C(v14);
    if (v10 == 1)
    {
      v14[0] = &off_1001563E0;
      sub_10005D460((uint64_t)v14, "config", (unsigned __int8 *)&v10);
      if (v10 == 1)
      {
        char v9 = operator new(0x30uLL);
        v9[1] = 0;
        uint64_t v9[2] = 0;
        *char v9 = off_100156DE8;
        *a3 = sub_1000F208C(v9 + 3, &v10);
        a3[1] = (unint64_t)v9;
      }
      else
      {
        *a2 = "legacy json config build failure";
        *a3 = 0;
        a3[1] = 0;
      }
      nullsub_13(v14);
    }
    else
    {
      *a2 = "ndjson config failed to load and config is not a legacy json";
      *a3 = 0;
      a3[1] = 0;
    }
    sub_100016EAC((uint64_t)&v10);
    sub_100016B28(&v11, v10);
    if (v13) {
      sub_1000147D8(v13);
    }
  }
}

void sub_10009EA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  char v7 = va_arg(va1, std::__shared_weak_count *);
  nullsub_13(va1);
  sub_100028D64((uint64_t **)va);
  if (v7) {
    sub_1000147D8(v7);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10009EA9C(const char *a1)
{
  sub_1000F5A40(a1, 0, (int *)v6);
  if (LODWORD(v6[0]) < 2 || (sub_1000F5A40(a1, 0, (int *)v6), LODWORD(v6[0]) != 2))
  {
    uint64_t v3 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_100101650(v3);
    }
    return 1;
  }
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  sub_1000F66C4((uint64_t)a1, v6);
  if ((v7 & 1) == 0 || v7 == 1 && !LODWORD(v6[0]))
  {
    uint64_t v2 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ConfigUtils] Remove task config from disk: success", buf, 2u);
    }
    return 1;
  }
  uint64_t v5 = qword_10015ED90;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100101598((unsigned int *)v6, v5);
    return 0;
  }
  return result;
}

void sub_10009EBFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

std::string *sub_10009EC08@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (v2)
  {
    if (v2 == 1) {
      return std::error_code::message(a2, (const std::error_code *)a1);
    }
    uint64_t v4 = (uint64_t (***)())*((void *)a1 + 1);
  }
  else
  {
    uint64_t v4 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  return (std::string *)((uint64_t (*)(uint64_t (***)(), void))(*v4)[4])(v4, *a1);
}

BOOL sub_10009EC58(char *a1, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  memset(__p, 170, sizeof(__p));
  sub_10009EF20(a1, __p);
  sub_1000F5A40((const char *)__p, 0, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) <= 1)
  {
    sub_1000F6090((uint64_t)__p, v15);
    if ((v16 & 1) != 0 && (v16 != 1 || LODWORD(v15[0])))
    {
      char v8 = qword_10015ED90;
      if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR))
      {
        int v10 = SHIBYTE(__p[2]);
        __int16 v11 = (void **)__p[0];
        sub_10009EC08((unsigned int *)v15, &buf);
        unint64_t v12 = __p;
        if (v10 < 0) {
          unint64_t v12 = v11;
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int16 v20 = 136446466;
        unint64_t v21 = v12;
        __int16 v22 = 2082;
        unsigned __int8 v23 = p_buf;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[Tasked Config] ERROR: Save task config: failed to create parent directory %{public}s (%{public}s)", v20, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_12;
    }
  }
  sub_1000F5A40((const char *)__p, 0, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) != 3)
  {
    uint64_t v7 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_1001016C0((uint64_t *)__p, v7);
    }
LABEL_12:
    BOOL v6 = 0;
    goto LABEL_13;
  }
  v20[0] = 1;
  sub_1000F66C4((uint64_t)a1, v15);
  long long v19 = 0;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = off_100156E38;
  v4[1] = a1;
  void v4[2] = a2;
  v4[3] = v20;
  long long v19 = v4;
  sub_10005A920((uint64_t)v18);
  sub_10001266C(v18);
  uint64_t v5 = qword_10015ED90;
  if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Tasked Config] Save task config: success", (uint8_t *)&buf, 2u);
  }
  BOOL v6 = v20[0] != 0;
LABEL_13:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_10009EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10009EF20@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  if (a1[23] < 0) {
    uint64_t v3 = *(char **)a1;
  }
  unint64_t v4 = sub_1000F7268(a1);

  return sub_1000500B4(a2, v3, &v3[v4], v4);
}

const char *sub_10009EF74()
{
  return "system";
}

uint64_t sub_10009EF80(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t sub_10009EF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a3 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a3 + 8);
  if (!v4)
  {
    if (!v5) {
      return 1;
    }
    uint64_t v9 = *(void *)(v5 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  if (!v5)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  BOOL v7 = v5 == v4;
  if (v6) {
    return *(void *)(v4 + 8) == v6;
  }
  else {
    return v7;
  }
}

BOOL sub_10009F044(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10009F118(a2, a3, a1);
}

void *sub_10009F058@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  uint64_t v3 = strerror(__errnum);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "Unknown error";
  }

  return sub_100015438(a2, v4);
}

const char *sub_10009F0A4(int a1, int __errnum, char *a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (a4)
  {
    uint64_t v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      BOOL v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      uint64_t v5 = &v4[v6];
    }
    *uint64_t v5 = 0;
  }
  return v4;
}

BOOL sub_10009F10C(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL sub_10009F118(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    if (*(void *)(a3 + 8) == 0xB2AB117A257EDFD2) {
      return *(_DWORD *)a1 + 1000 * (*(void *)(a1 + 8) % 0x1FFFF7uLL) == a2;
    }
    return 0;
  }
  if (!v3) {
    return !a2 && *(void *)(a3 + 8) == 0xB2AB117A257EDFD1;
  }
  if (*(_DWORD *)a1 != a2) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  BOOL v8 = v6 == a3;
  if (v7) {
    return *(void *)(a3 + 8) == v7;
  }
  else {
    return v8;
  }
}

void *sub_10009F1E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0;
  *(unsigned char *)a5 = 0;
  sub_100016EAC((uint64_t)a5);
  sub_100016EAC((uint64_t)a5);
  sub_10000DC80((uint64_t)v11, a3);
  sub_10009F304(a1, a2, (uint64_t)v11, a4, (uint64_t)v12);
  sub_10009F39C((uint64_t)v12, 1, (uint64_t)a5);
  sub_1000A0EA8((uint64_t)&v13);
  sub_10000DE9C(v12);
  return sub_10000DE9C(v11);
}

void sub_10009F2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1000A0EA8(v3 + 40);
  sub_10000DE9C((uint64_t *)va1);
  sub_10000DE9C((uint64_t *)va);
  sub_100028D64(v2);
  _Unwind_Resume(a1);
}

void *sub_10009F304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  sub_10000DB54((uint64_t)v9, a3);
  sub_10009F8D4(a5, &v8, (uint64_t)v9, a4);
  return sub_10000DE9C(v9);
}

void sub_10009F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000DE9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10009F39C(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v40 = v6;
    long long v41 = v6;
    long long v38 = v6;
    long long v39 = v6;
    long long v36 = v6;
    long long v37 = v6;
    *(_OWORD *)&unsigned char v35[16] = v6;
    *(_OWORD *)&v35[32] = v6;
    *(_OWORD *)uint64_t v35 = v6;
    sub_10000DC80((uint64_t)v34, a1);
    sub_10003BFA0((uint64_t)v35, a3, (uint64_t)v34, *(unsigned char *)(a1 + 184));
    sub_10000DE9C(v34);
    sub_1000A0EEC(a1, (uint64_t *)v35);
    sub_100016EAC(a3);
    if (a2)
    {
      int v7 = sub_10009F9E8(a1 + 40);
      *(_DWORD *)(a1 + 32) = v7;
      if (v7 != 15)
      {
        uint64_t v8 = *(void *)(a1 + 72);
        sub_1000A18A0(a1 + 40, &v33);
        long long v29 = *(_OWORD *)(a1 + 72);
        uint64_t v30 = *(void *)(a1 + 88);
        sub_100015438(v26, "value");
        sub_1000A1984(a1, 0xFu, (uint64_t)v26, &__p);
        sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
        sub_10003B420((uint64_t)v35, v8, (uint64_t)&v33, (uint64_t)&v31);
        v31.__vftable = (std::exception_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v32);
        std::exception::~exception(&v31);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
    }
    if (BYTE8(v38))
    {
      v24[0] = 9;
      uint64_t v9 = (uint64_t **)&v25;
      uint64_t v25 = 0;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      unsigned __int8 v10 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v24[0];
      v24[0] = v10;
      uint64_t v11 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v25;
      uint64_t v25 = v11;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v24);
      int v12 = v24[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        sub_10003F2CC((uint64_t)v35);
        return;
      }
      v22[0] = 0;
      uint64_t v9 = (uint64_t **)&v23;
      uint64_t v23 = 0;
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      unsigned __int8 v18 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v22[0];
      v22[0] = v18;
      uint64_t v19 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v23;
      uint64_t v23 = v19;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v22);
      int v12 = v22[0];
    }
    sub_100016B28(v9, v12);
    goto LABEL_27;
  }
  char v13 = *(unsigned char *)(a1 + 184);
  *(void *)&v35[40] = 0xAAAAAAAAAAAAAA00;
  *(void *)uint64_t v35 = a3;
  memset(&v35[8], 0, 32);
  v35[41] = v13;
  sub_1000A1DC8(a1, (uint64_t *)v35);
  sub_100016EAC(a3);
  if (a2)
  {
    int v14 = sub_10009F9E8(a1 + 40);
    *(_DWORD *)(a1 + 32) = v14;
    if (v14 != 15)
    {
      uint64_t v15 = *(void *)(a1 + 72);
      sub_1000A18A0(a1 + 40, &v33);
      long long v29 = *(_OWORD *)(a1 + 72);
      uint64_t v30 = *(void *)(a1 + 88);
      sub_100015438(v26, "value");
      sub_1000A1984(a1, 0xFu, (uint64_t)v26, &__p);
      sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
      sub_10003BE24((uint64_t)v35, v15, (uint64_t)&v33, (uint64_t)&v31);
      v31.__vftable = (std::exception_vtbl *)off_100151508;
      std::runtime_error::~runtime_error(&v32);
      std::exception::~exception(&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v35[40])
  {
    v20[0] = 9;
    unint64_t v21 = 0;
    sub_100016EAC((uint64_t)v20);
    sub_100016EAC((uint64_t)v20);
    unsigned __int8 v16 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v20[0];
    v20[0] = v16;
    unsigned int v17 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v21;
    unint64_t v21 = v17;
    sub_100016EAC(a3);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
  }
  if (*(void *)&v35[8])
  {
    *(void *)&unsigned char v35[16] = *(void *)&v35[8];
    operator delete(*(void **)&v35[8]);
  }
}

void sub_10009F7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_10003BD98(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  char v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009F8D4(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_10000DC80(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(void *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 144) = "";
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 168) = 0;
  *(void *)(v7 + 152) = 0;
  *(void *)(a1 + 176) = (int)sub_10009F98C();
  *(unsigned char *)(a1 + 184) = a4;
  *(_DWORD *)(a1 + 32) = sub_10009F9E8(v8);
  return a1;
}

void sub_10009F970(_Unwind_Exception *a1)
{
  sub_1000A0EA8(v2);
  sub_10000DE9C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F98C()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

uint64_t sub_10009F9E8(uint64_t a1)
{
  if (!*(void *)(a1 + 32) && !sub_10009FCA0((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      sub_10009FD04((unsigned __int8 **)a1);
      uint64_t v2 = *(void *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((unint64_t)(v2 - 9) >= 2 && v2 != 13)
      {
        if ((unint64_t)(v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5;
        uint64_t v7 = 2;
        return sub_10009FE6C(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 1;
        }
        return sub_10009FE6C(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      uint64_t v8 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 104) = v8;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_10009FEF0(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_1000A07CC(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL sub_10009FCA0(unsigned __int8 **a1)
{
  if (sub_10009FD04(a1) == 239)
  {
    return sub_10009FD04(a1) == 187 && sub_10009FD04(a1) == 191;
  }
  else
  {
    sub_1000A0BC0((uint64_t)a1);
    return 1;
  }
}

uint64_t sub_10009FD04(unsigned __int8 **a1)
{
  *((int64x2_t *)a1 + 2) = vaddq_s64(*((int64x2_t *)a1 + 2), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 24))
  {
    *((unsigned char *)a1 + 24) = 0;
    uint64_t v2 = (uint64_t)a1[2];
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      uint64_t v2 = -1;
    }
    else
    {
      uint64_t v2 = *v3;
      *a1 = v3 + 1;
    }
    a1[2] = (unsigned __int8 *)v2;
  }
  if (v2 == -1) {
    return -1;
  }
  uint64_t v5 = a1[8];
  unint64_t v4 = (unint64_t)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1 + 7;
    unint64_t v8 = (unint64_t)a1[7];
    uint64_t v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      sub_100028DEC();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      char v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      char v13 = 0;
    }
    int v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      char v13 = &v9[(void)v13];
    }
    else
    {
      uint64_t v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      uint64_t v5 = *v7;
    }
    a1[7] = v13;
    a1[8] = (unsigned __int8 *)v6;
    a1[9] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[8] = (unsigned __int8 *)v6;
  uint64_t result = (uint64_t)a1[2];
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[6] + 1);
    a1[5] = 0;
    a1[6] = (unsigned __int8 *)v18;
  }
  return result;
}

uint64_t sub_10009FE6C(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 16)) {
    sub_1000F93B4();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    uint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = sub_10009FD04((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *(void *)(a1 + 104) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t sub_10009FEF0(uint64_t a1)
{
  sub_1000A0C2C(a1);
  if (*(void *)(a1 + 16) != 34) {
    sub_1000F940C();
  }
  while (2)
  {
    while (2)
    {
      uint64_t v2 = sub_10009FD04((unsigned __int8 **)a1) + 1;
      uint64_t result = 4;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          std::string::value_type v5 = *(unsigned char *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          uint64_t v11 = sub_10009FD04((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v11 <= 97)
          {
            switch(v11)
            {
              case '""':
                std::string::value_type v5 = 34;
                break;
              case '/':
                std::string::value_type v5 = 47;
                break;
              case '\\':
                std::string::value_type v5 = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          long long v16 = xmmword_10011CEC0;
          uint64_t v6 = a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          unsigned __int8 v8 = &xmmword_10011CF20;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          unsigned __int8 v8 = &xmmword_10011CF40;
          goto LABEL_7;
        case 238:
          unsigned __int8 v8 = &xmmword_10011CF60;
LABEL_7:
          long long v9 = v8[1];
          long long v16 = *v8;
          long long v17 = v9;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v10 = &xmmword_10011CF80;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v10 = &xmmword_10011CFB0;
          goto LABEL_18;
        case 245:
          uint64_t v10 = &xmmword_10011CFE0;
LABEL_18:
          long long v12 = v10[1];
          long long v16 = *v10;
          long long v17 = v12;
          long long v18 = v10[2];
          uint64_t v6 = a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((sub_1000A0DF0(v6, (unint64_t *)&v16, v7) & 1) == 0) {
            return 14;
          }
          continue;
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v11)
    {
      case 'n':
        std::string::value_type v5 = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        std::string::value_type v5 = 13;
        goto LABEL_4;
      case 't':
        std::string::value_type v5 = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v13 = sub_1000A0CF0(a1);
        if (v13 == -1) {
          goto LABEL_85;
        }
        unsigned int v14 = v13;
        if ((v13 & 0xFFFFFC00) != 0xD800)
        {
          if ((v13 & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (v13 >= 0x110000) {
            sub_1000F93E0();
          }
          if (v13 > 0x7F)
          {
            if (v13 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v13 >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(v13))
            {
              std::string::push_back((std::string *)(a1 + 80), (v13 >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 80), (v14 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v14 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v14 >> 6) & 0x3F | 0x80);
LABEL_39:
            std::string::value_type v5 = v14 & 0x3F | 0x80;
            goto LABEL_4;
          }
          std::string::value_type v5 = v13;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }
        if (sub_10009FD04((unsigned __int8 **)a1) != 92 || sub_10009FD04((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v15 = sub_1000A0CF0(a1);
        if (v15 != -1)
        {
          if (v15 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v14 = v15 + (v14 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 104) = v4;
        return 14;
      default:
        if (v11 == 98)
        {
          std::string::value_type v5 = 8;
        }
        else
        {
          if (v11 != 102) {
            goto LABEL_82;
          }
          std::string::value_type v5 = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t sub_1000A07CC(uint64_t a1)
{
  sub_1000A0C2C(a1);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((unint64_t)(v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        sub_1000F9438();
      }
      uint64_t v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      uint64_t v13 = sub_10009FD04((unsigned __int8 **)a1);
      if ((unint64_t)(v13 - 49) < 9)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        unsigned int v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    uint64_t v15 = sub_10009FD04((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      std::string::value_type v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    std::string::value_type v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 136));
    if ((unint64_t)(sub_10009FD04((unsigned __int8 **)a1) - 48) > 9)
    {
      unsigned int v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    std::string::value_type v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
      uint64_t v16 = sub_10009FD04((unsigned __int8 **)a1);
    }
    while ((unint64_t)(v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_1000A0BC0(a1);
      uint64_t v25 = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    uint64_t v7 = sub_10009FD04((unsigned __int8 **)a1);
    if ((unint64_t)(v7 - 48) < 0xA)
    {
      unsigned __int8 v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      unsigned __int8 v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
      if ((unint64_t)(sub_10009FD04((unsigned __int8 **)a1) - 48) < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if ((unint64_t)(sub_10009FD04((unsigned __int8 **)a1) - 48) <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
          while ((unint64_t)(sub_10009FD04((unsigned __int8 **)a1) - 48) < 0xA);
        }
        goto LABEL_13;
      }
      unsigned int v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      unsigned int v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 104) = v14;
    return 14;
  }
  uint64_t v3 = (std::string *)(a1 + 80);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  std::string::value_type v5 = (std::string *)(a1 + 80);
  while (1)
  {
    uint64_t v6 = sub_10009FD04((unsigned __int8 **)a1);
    if ((unint64_t)(v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_1000A0BC0(a1);
  uint64_t v25 = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    unint64_t v21 = (const char **)(a1 + 80);
    __int16 v22 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      __int16 v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      unint64_t v21 = *(const char ***)(a1 + 80);
      uint64_t v24 = *(void *)(a1 + 88);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 103);
    }
    if (v25 != (char *)v21 + v24) {
      sub_1000F94BC();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v23;
      return 6;
    }
  }
  else
  {
    long long v17 = (const char **)(a1 + 80);
    long long v18 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      long long v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      long long v17 = *(const char ***)(a1 + 80);
      uint64_t v20 = *(void *)(a1 + 88);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 103);
    }
    if (v25 != (char *)v17 + v20) {
      sub_1000F9490();
    }
    if (!*__error())
    {
      *(void *)(a1 + 120) = v19;
      return 5;
    }
  }
LABEL_14:
  long long v9 = (const char **)(a1 + 80);
  uint64_t v10 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    uint64_t v10 = *v9;
  }
  *(double *)(a1 + 128) = strtod(v10, &v25);
  if (*(char *)(a1 + 103) < 0)
  {
    long long v9 = *(const char ***)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  }
  if (v25 != (char *)v9 + v11) {
    sub_1000F9464();
  }
  return 7;
}

void sub_1000A0BB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0BC0(uint64_t result)
{
  uint64_t v1 = (void *)(result + 40);
  uint64_t v2 = *(void *)(result + 40);
  *(unsigned char *)(result + 24) = 1;
  --*(void *)(result + 32);
  if (v2 || (v1 = (void *)(result + 48), (uint64_t v2 = *(void *)(result + 48)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(void *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 64);
    if (*(void *)(result + 56) == v3) {
      sub_1000F94E8();
    }
    *(void *)(result + 64) = v3 - 1;
  }
  return result;
}

void sub_1000A0C2C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    **(unsigned char **)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 103) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  char v3 = *(unsigned char *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    long long v9 = operator new(v8);
    *long long v9 = v3;
    std::string::value_type v5 = v9 + 1;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v9 + 1;
    *(void *)(a1 + 72) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = v3;
    std::string::value_type v5 = v2 + 1;
  }
  *(void *)(a1 + 64) = v5;
}

uint64_t sub_1000A0CF0(uint64_t a1)
{
  if (*(void *)(a1 + 16) != 117) {
    sub_1000F9540();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_100117A00;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    sub_10009FD04((unsigned __int8 **)a1);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((unint64_t)(v5 - 48) >= 0xA)
    {
      if ((unint64_t)(v5 - 65) >= 6)
      {
        if ((unint64_t)(v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = -87;
      }
      else
      {
        int v6 = -55;
      }
    }
    else
    {
      int v6 = -48;
    }
    uint64_t v3 = (((v6 + v5) << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    sub_1000F9514();
  }
  return v3;
}

uint64_t sub_1000A0DF0(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    sub_1000F956C();
  }
  int v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(unsigned char *)(a1 + 16));
  uint64_t v7 = &a2[a3];
  while (1)
  {
    sub_10009FD04((unsigned __int8 **)a1);
    unint64_t v8 = *(void *)(a1 + 16);
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t sub_1000A0EA8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1000A0EEC(uint64_t a1, uint64_t *a2)
{
  long long v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 120);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        sub_10003E154(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        sub_10003E7DC(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        sub_10003EB0C(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10003E494(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 168);
          sub_10003DAC0(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v39);
        sub_1000A18A0(v5, &v33);
        long long v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::exception v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v35, &v37);
        uint64_t v17 = sub_10003B420((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        sub_10003CC54(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!sub_10003C6EC(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10003C980(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        sub_1000181AC((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((sub_10003C0C4(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!sub_10003C56C(a2, v4)) {
            goto LABEL_56;
          }
          int v16 = sub_10009F9E8(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          sub_1000181AC((uint64_t)&v40, &v37);
          int v15 = sub_10009F9E8(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = sub_10003C358(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = sub_10009F9E8(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 72);
              sub_1000A18A0(v5, &v39);
              *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
              std::string::size_type v36 = *(void *)(a1 + 88);
              sub_100015438(&v33, "array");
              sub_1000A1984(a1, 0xAu, (uint64_t)&v33, &__p);
              sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
              uint64_t v23 = sub_10003B420((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!sub_10003C980(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 72);
            sub_1000A18A0(v5, &v39);
            *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
            std::string::size_type v36 = *(void *)(a1 + 88);
            sub_100015438(&v33, "object");
            sub_1000A1984(a1, 0xBu, (uint64_t)&v33, &__p);
            sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
            uint64_t v23 = sub_10003B420((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!sub_10003C358(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 72);
          sub_1000A18A0(v5, &v39);
          *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
          std::string::size_type v36 = *(void *)(a1 + 88);
          sub_100015438(&v33, "object key");
          sub_1000A1984(a1, 4u, (uint64_t)&v33, &__p);
          sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
          uint64_t v23 = sub_10003B420((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!sub_10003C56C(a2, v4)) {
          goto LABEL_56;
        }
        int v14 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_10009F9E8(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v39);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
        std::string::size_type v36 = *(void *)(a1 + 88);
        sub_100015438(&v33, "object separator");
        sub_1000A1984(a1, 0xCu, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v23 = sub_10003B420((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        sub_10003BD98(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v39);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
        std::string::size_type v36 = *(void *)(a1 + 88);
        sub_100015438(&v33, "value");
        sub_1000A1984(a1, 0, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v39);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 72);
        std::string::size_type v36 = *(void *)(a1 + 88);
        sub_100015438(&v33, "value");
        sub_1000A1984(a1, 0x10u, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_1000A171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  long long v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_1000A18A0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 56);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1000A1964(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A1984(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(a4, 170, sizeof(std::string));
  sub_100015438(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100015438(&v36, *(char **)(a1 + 144));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000A18A0(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v25 = (char *)sub_10003F2A8(v13);
  sub_100015438(&v38, v25);
  uint64_t v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    uint64_t v28 = (const std::string::value_type *)&v39;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  uint64_t v30 = (char *)sub_10003F2A8(a2);
  sub_100015438(&v38, v30);
  std::exception v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_1000A1CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A1DC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::runtime_error_vtbl *)(a1 + 120);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        sub_100026F20(a2);
        goto LABEL_17;
      case 4:
        sub_100016718(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        sub_10001AD14(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10003F458(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 168);
          sub_100019F4C(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v40);
        sub_1000A18A0(v5, &v34);
        uint64_t v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v36, &v38);
        uint64_t v18 = sub_10003BE24((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        sub_10003CC54(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!sub_100018E18(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_1000181AC((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001906C(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(sub_100016548(v16, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
          int v17 = sub_10009F9E8(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_1000181AC((uint64_t)&v41, &v38);
          int v15 = sub_10009F9E8(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = sub_10009F9E8(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 72);
              sub_1000A18A0(v5, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
              std::string::size_type v37 = *(void *)(a1 + 88);
              sub_100015438(&v34, "array");
              sub_1000A1984(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v24 = sub_10003BE24((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 72);
            sub_1000A18A0(v5, &v40);
            *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
            std::string::size_type v37 = *(void *)(a1 + 88);
            sub_100015438(&v34, "object");
            sub_1000A1984(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            uint64_t v24 = sub_10003BE24((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 72);
          sub_1000A18A0(v5, &v40);
          *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
          std::string::size_type v37 = *(void *)(a1 + 88);
          sub_100015438(&v34, "object key");
          sub_1000A1984(a1, 4u, (uint64_t)&v34, &__p);
          sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          uint64_t v24 = sub_10003BE24((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        unsigned int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(sub_100016548(v13, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
        int v14 = sub_10009F9E8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = sub_10009F9E8(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type v37 = *(void *)(a1 + 88);
        sub_100015438(&v34, "object separator");
        sub_1000A1984(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v24 = sub_10003BE24((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        sub_10003BD98(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type v37 = *(void *)(a1 + 88);
        sub_100015438(&v34, "value");
        sub_1000A1984(a1, 0, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 72);
        sub_1000A18A0(v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 72);
        std::string::size_type v37 = *(void *)(a1 + 88);
        sub_100015438(&v34, "value");
        sub_1000A1984(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_1000A2610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  long long v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_1000A2794(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100156DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000A27B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100156DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000A2808(uint64_t a1)
{
  return sub_1000F20D8(a1 + 24);
}

void sub_1000A2818()
{
}

__n128 sub_1000A282C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100156E38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000A2880(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100156E38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000A28B8(uint64_t a1)
{
  memset(v4, 170, sizeof(v4));
  sub_1000A2B90(v4);
  if (v4[16])
  {
    sub_10008AA70((uint64_t *)v4, *(void *)(a1 + 16));
  }
  else
  {
    uint64_t v2 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_100101748(a1 + 8, v2);
    }
    **(unsigned char **)(a1 + 24) = 0;
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1000A2A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v10 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_1001017D0(v10);
    }
    **(unsigned char **)(v9 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1000A2960);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2B44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000A2B84()
{
}

void (__cdecl ***sub_1000A2B90(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  int v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_1000A2D18(_Unwind_Exception *a1)
{
}

void sub_1000A2D50()
{
}

void sub_1000A2DB0()
{
}

uint64_t sub_1000A2DDC(uint64_t a1, uint64_t a2)
{
  int v4 = dispatch_queue_create("analyticsd.DaemonPerfManagerQueue", 0);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    dispatch_release(v5);
  }
  sub_100053AEC(a1 + 24, a2);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(std::chrono::system_clock::time_point *)(a1 + 112) = std::chrono::system_clock::now();
  *(_WORD *)(a1 + 120) = 1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B37CC((uint64_t)&v7);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  return a1;
}

void sub_1000A2EC8(_Unwind_Exception *a1)
{
  sub_1000A47F8(v3);
  sub_10001266C(v2);
  sub_10004085C(v1);
  _Unwind_Resume(a1);
}

void sub_1000A2EF0(void *a1@<X0>, NSObject **a2@<X8>)
{
  int v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, a1);
  operator new();
}

void sub_1000A3010(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3020(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  uint64_t v3 = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000A492C;
  v4[3] = &unk_100156F08;
  v4[4] = a1;
  v4[5] = &v3;
  uint64_t v5 = v4;
  unsigned __int8 v7 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006594;
  block[3] = &unk_100156F28;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v1, block);
  return v7;
}

uint64_t sub_1000A311C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  uint64_t v3 = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000A4938;
  v4[3] = &unk_100156F48;
  v4[4] = a1;
  v4[5] = &v3;
  uint64_t v5 = v4;
  unsigned __int8 v7 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006594;
  block[3] = &unk_100156F28;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v1, block);
  return v7;
}

BOOL sub_1000A3218(uint64_t a1)
{
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = *(void *)(a1 + 112);
  if (v2.__d_.__rep_ >= v3)
  {
    sub_1000B37CC((uint64_t)v7);
    sub_100015438(__p, "perf_check_throttle");
    *(void *)(a1 + 112) = v2.__d_.__rep_ + 1000000 * sub_1000A3328(v7, (const void **)__p, (uint64_t)&unk_10011D228);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
  }
  return v2.__d_.__rep_ < v3;
}

void sub_1000A32F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3328(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v10 = (char *)sub_100029400(a1);
    sub_100015438(v13, v10);
    int v11 = std::string::insert((std::string *)v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v11->__r_.__value_.__l + 2);
    long long v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v15, exception);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v5;
  long long v16 = v5;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_1000136C8(v13, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v13);
  if (sub_100013964((unsigned __int8 **)&v15, (unsigned __int8 **)v13)) {
    return *(void *)a3;
  }
  uint64_t v8 = sub_100013AAC((unsigned __int8 **)&v15);
  *(void *)&v13[0] = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v8, (uint64_t *)v13);
  return *(void *)&v13[0];
}

void sub_1000A348C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

__n128 sub_1000A34F4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1000A4944(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void *sub_1000A3580(void *a1)
{
  unint64_t v2 = a1[11];
  uint64_t v3 = a1[8];
  uint64_t v4 = (void *)(v3 + 8 * (v2 >> 8));
  if (a1[9] == v3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = (void *)(*v4 + 16 * v2);
    uint64_t v6 = *(void *)(v3 + (((a1[12] + v2) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 96) + v2);
    if (v5 != (void *)v6)
    {
      while (!sub_1000A4C90(*v5, v5[1]))
      {
        v5 += 2;
        if ((void *)((char *)v5 - *v4) == (void *)4096)
        {
          unint64_t v7 = (void *)v4[1];
          ++v4;
          uint64_t v5 = v7;
        }
        if (v5 == (void *)v6) {
          goto LABEL_18;
        }
      }
    }
    if (v5 != (void *)v6)
    {
      uint64_t v8 = v5;
      uint64_t v9 = v4;
      while (1)
      {
        v8 += 2;
        if ((void *)((char *)v8 - *v9) == (void *)4096)
        {
          uint64_t v10 = (void *)v9[1];
          ++v9;
          uint64_t v8 = v10;
        }
        if (v8 == (void *)v6) {
          break;
        }
        if (!sub_1000A4C90(*v8, v8[1]))
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v8;
          v5 += 2;
          if ((void *)((char *)v5 - *v4) == (void *)4096)
          {
            int v11 = (void *)v4[1];
            ++v4;
            uint64_t v5 = v11;
          }
        }
      }
      uint64_t v6 = (uint64_t)v5;
    }
  }
LABEL_18:
  unint64_t v12 = a1[11] + a1[12];
  uint64_t v13 = a1[8];
  unint64_t v14 = (char *)(v13 + 8 * (v12 >> 8));
  if (a1[9] == v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + 16 * v12;
  }

  return sub_1000A36D0(a1 + 7, (char *)v4, v6, v14, v15);
}

void *sub_1000A36D0(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(void *)a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)v9 + 16 * v7;
  }
  std::string v36 = (char **)v9;
  std::string::size_type v37 = (char *)v10;
  if (v10 == a3) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(void *)v9) >> 4);
  }
  unint64_t v12 = (char **)sub_1000A4DA4((uint64_t)&v36, v11);
  unint64_t v14 = v13;
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = (unint64_t)v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v23 = sub_1000A4DA4((uint64_t)&v35, v6);
      v24.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
      v24.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
      __n128 v38 = v24;
      __n128 v39 = v24;
      sub_1000A4ED0(v21, v22, v12, v14, v23, v25, &v38);
      uint64_t v26 = v37;
      if (v37 != (char *)v39.n128_u64[1])
      {
        uint64_t v27 = v36;
        do
        {
          v26 += 16;
          std::string::size_type v37 = v26;
          if (v26 - *v27 == 4096)
          {
            uint64_t v28 = v27[1];
            ++v27;
            uint64_t v26 = v28;
            std::string v36 = v27;
            std::string::size_type v37 = v28;
          }
        }
        while (v26 != (char *)v39.n128_u64[1]);
      }
      uint64_t v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((sub_1000A4E00((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      uint64_t v15 = (char **)sub_1000A4DA4((uint64_t)&v35, v6);
      unint64_t v17 = a1[4] + a1[5];
      uint64_t v18 = a1[1];
      long long v19 = (char **)(v18 + 8 * (v17 >> 8));
      if (a1[2] == v18) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = &(*v19)[16 * v17];
      }
      __n128 v38 = v35;
      sub_1000A50F4(v15, v16, v19, v20, (uint64_t)&v38);
      a1[5] -= v6;
      while ((sub_1000A4E60(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v30 = a1[4];
  uint64_t v31 = a1[1];
  long long v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *v32 + 16 * v30;
  }
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_1000A4DA4((uint64_t)&v38, v11);
}

BOOL sub_1000A3950(uint64_t a1)
{
  if (!*(void *)(a1 + 96))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100101840();
    return 0;
  }
  time_t v2 = sub_10005CFD4();
  int v3 = sub_1000C28AC();
  sub_1000B37CC((uint64_t)&v26);
  sub_100015438(__p, "restart_allow_scale_memory_limit");
  double v4 = sub_1000A3DE8((char *)&v26, (const void **)__p, (uint64_t)&unk_10011D230);
  if ((v29[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  double v5 = v4 * (double)v3;
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
  double v6 = sub_1000A3FB4((void *)a1);
  unint64_t v7 = qword_10015EF88;
  if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = (int *)(*(void *)(*(void *)(a1 + 64)
                           + (((unint64_t)(v8 + *(void *)(a1 + 88) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
               + 16 * (v8 + *(unsigned char *)(a1 + 88) - 1));
    int v10 = *v9;
    LODWORD(v9) = v9[1];
    *(_DWORD *)std::string __p = 67110656;
    *(_DWORD *)&__p[4] = v10;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v9;
    *(_WORD *)uint64_t v29 = 2048;
    *(void *)&v29[2] = v2;
    __int16 v30 = 2048;
    uint64_t v31 = v8;
    __int16 v32 = 2048;
    double v33 = v6;
    __int16 v34 = 1024;
    int v35 = v3;
    __int16 v36 = 2048;
    double v37 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[Daemon perf] Current: {Memory footprint: %d, Peak: %d, Process uptime: %ld, Samples in window: %lu, Memory Moving Average: %f, Jetsam Limit: %d, Restart Limit: %f}", __p, 0x3Cu);
  }
  if (*(unsigned char *)(a1 + 121))
  {
    uint64_t v11 = qword_10015EF88;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string __p = 0;
    uint64_t v13 = "[Daemon perf] No restart queued. Restart already in progress";
LABEL_14:
    unint64_t v14 = v11;
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 2;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, __p, v16);
    return 0;
  }
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v11 = qword_10015EF88;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_WORD *)std::string __p = 0;
    uint64_t v13 = "[Daemon perf] No restart queued. Restarts are suspended";
    goto LABEL_14;
  }
  if (v6 < 0.0)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1001018A0();
      return 0;
    }
    return result;
  }
  if (v3 < 0)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100101900();
      return 0;
    }
    return result;
  }
  unint64_t v17 = *(void *)(a1 + 96);
  sub_1000B37CC((uint64_t)&v26);
  sub_100015438(__p, "restart_allow_minumum_samples");
  unint64_t v18 = sub_1000A403C((char *)&v26, (const void **)__p, (uint64_t)&unk_10011D238);
  if ((v29[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
  if (v17 < v18)
  {
    uint64_t v19 = qword_10015EF88;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    uint64_t v20 = *(void *)(a1 + 96);
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = v20;
    uint64_t v13 = "[Daemon perf] No restart queued. Not enough samples to evaluate average memory: {Samples in window: %lu}";
    unint64_t v14 = v19;
    goto LABEL_27;
  }
  if (v6 > v5)
  {
    v21.__d_.__rep_ = std::chrono::system_clock::from_time_t(v2).__d_.__rep_;
    sub_1000B37CC((uint64_t)&v26);
    sub_100015438(__p, "restart_allow_after");
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v22 = 1000000 * sub_1000A3328((char *)&v26, (const void **)__p, (uint64_t)&unk_10011D240);
    if ((v29[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_100028D64(&v26);
    if (v22 < v21.__d_.__rep_) {
      return 1;
    }
    uint64_t v25 = qword_10015EF88;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = v2;
    uint64_t v13 = "[Daemon perf] No restart queued. Process hasn't been alive for long enough to attempt a retart. {Process Uptime: %ld}";
    unint64_t v14 = v25;
LABEL_27:
    os_log_type_t v15 = OS_LOG_TYPE_INFO;
    uint32_t v16 = 12;
    goto LABEL_15;
  }
  uint64_t v23 = qword_10015EF88;
  BOOL v24 = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v24)
  {
    *(_DWORD *)std::string __p = 134218240;
    *(double *)&__p[4] = v6;
    *(_WORD *)&__p[12] = 2048;
    *(double *)uint64_t v29 = v5;
    uint64_t v13 = "[Daemon perf] No restart queued. Operating below memory limit. {Average memory: %f, Restart Limit: %f}";
    unint64_t v14 = v23;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    uint32_t v16 = 22;
    goto LABEL_15;
  }
  return result;
}

void sub_1000A3DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100028D64((uint64_t **)&a9);
  _Unwind_Resume(a1);
}

double sub_1000A3DE8(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_100029400(a1);
    sub_100015438(v13, v10);
    uint64_t v11 = std::string::insert((std::string *)v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v11->__r_.__value_.__l + 2);
    long long v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v15, exception);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v5;
  long long v16 = v5;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_1000136C8(v13, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v13);
  if (sub_100013964((unsigned __int8 **)&v15, (unsigned __int8 **)v13)) {
    return *(double *)a3;
  }
  uint64_t v8 = sub_100013AAC((unsigned __int8 **)&v15);
  *(void *)&v13[0] = -1;
  sub_100026DA0(v8, (double *)v13);
  return *(double *)v13;
}

void sub_1000A3F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

double sub_1000A3FB4(void *a1)
{
  unint64_t v1 = a1[12];
  if (!v1) {
    return -1.0;
  }
  uint64_t v2 = a1[8];
  double v3 = 0.0;
  if (a1[9] != v2)
  {
    unint64_t v4 = a1[11];
    long long v5 = (char **)(v2 + 8 * (v4 >> 8));
    long long v6 = *v5;
    unint64_t v7 = &(*v5)[16 * v4];
    uint64_t v8 = *(void *)(v2 + (((v4 + v1) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v4 + v1);
    if (v7 != (char *)v8)
    {
      int v9 = 0;
      do
      {
        int v11 = *(_DWORD *)v7;
        v7 += 16;
        int v10 = v11;
        if (v7 - v6 == 4096)
        {
          long long v12 = v5[1];
          ++v5;
          long long v6 = v12;
          unint64_t v7 = v12;
        }
        v9 += v10;
      }
      while (v7 != (char *)v8);
      double v3 = (double)v9;
    }
  }
  return v3 / (double)v1;
}

uint64_t sub_1000A403C(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_100029400(a1);
    sub_100015438(v13, v10);
    int v11 = std::string::insert((std::string *)v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v11->__r_.__value_.__l + 2);
    long long v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v15, exception);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v5;
  long long v16 = v5;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_1000136C8(v13, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v13);
  if (sub_100013964((unsigned __int8 **)&v15, (unsigned __int8 **)v13)) {
    return *(void *)a3;
  }
  uint64_t v8 = sub_100013AAC((unsigned __int8 **)&v15);
  *(void *)&v13[0] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A52B0(v8, (unint64_t *)v13);
  return *(void *)&v13[0];
}

void sub_1000A41A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL sub_1000A4208(uint64_t a1)
{
  sub_1000B37CC((uint64_t)&__t);
  int rep_low = LOBYTE(__t.__d_.__rep_);
  sub_100016EAC((uint64_t)&__t);
  sub_100016B28(&v7, LOBYTE(__t.__d_.__rep_));
  if (!rep_low) {
    return 0;
  }
  if (sub_1000A3218(a1))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_100101960();
    return 0;
  }
  unint64_t v4 = sub_1000C27D0();
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v5 = std::chrono::system_clock::to_time_t(&__t);
  return sub_1000A42F0(a1, v4, v5);
}

BOOL sub_1000A42F0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  sub_1000B37CC((uint64_t)&v10);
  int v6 = v10.n128_u8[0];
  sub_100016EAC((uint64_t)&v10);
  sub_100016B28((uint64_t **)&v10.n128_u64[1], v10.n128_u8[0]);
  if (!v6) {
    return 0;
  }
  v10.n128_u64[0] = a2;
  v10.n128_u64[1] = a3;
  if (a2 == -1)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1001019CC();
      return 0;
    }
  }
  else
  {
    sub_1000A34F4((void *)(a1 + 56), &v10);
    sub_1000A3580((void *)a1);
    BOOL result = sub_1000A3950(a1);
    if (result)
    {
      uint64_t v8 = qword_10015EF88;
      if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_DEFAULT))
      {
        v10.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Daemon perf] Restart being queued. Operating above memory limit and been alive for long enough", (uint8_t *)&v10, 2u);
      }
      sub_1000A446C(a1);
      *(unsigned char *)(a1 + 121) = 1;
      uint64_t v9 = *(void *)(a1 + 48);
      if (!v9) {
        sub_100027A78();
      }
      (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
      return 1;
    }
  }
  return result;
}

BOOL sub_1000A446C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 121);
  if (*(unsigned char *)(a1 + 121))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR)) {
      sub_100101A2C();
    }
  }
  else if (!*(unsigned char *)(a1 + 120))
  {
    double v3 = qword_10015EF88;
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)time_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Daemon perf] Ability to restart suspended", v5, 2u);
    }
    *(unsigned char *)(a1 + 120) = 1;
  }
  return v1 == 0;
}

BOOL sub_1000A455C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 121);
  if (*(unsigned char *)(a1 + 121))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR)) {
      sub_100101A8C();
    }
  }
  else if (*(unsigned char *)(a1 + 120))
  {
    double v3 = qword_10015EF88;
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)time_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Daemon perf] Ability to restart resumed", v5, 2u);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  return v1 == 0;
}

void sub_1000A4648(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000A46C0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1000A4798);
  __cxa_rethrow();
}

void sub_1000A46E8(_Unwind_Exception *a1)
{
}

void sub_1000A4700(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000A4738(uint64_t a1)
{
}

uint64_t sub_1000A4754(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000A4798(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000A47F8((void *)(result + 56));
    sub_10001266C((void *)(v1 + 24));
    sub_10004085C(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_1000A47F8(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  double v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100056288((uint64_t)a1);
}

uint64_t *sub_1000A48A0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  double v3 = a1;
  unint64_t v4 = v1;
  sub_1000A4208(*v1);
  sub_100042CF8((uint64_t *)&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_1000A4910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100042CF8((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000A492C(uint64_t a1)
{
  return sub_1000A446C(**(void **)(a1 + 40));
}

BOOL sub_1000A4938(uint64_t a1)
{
  return sub_1000A455C(**(void **)(a1 + 40));
}

void sub_1000A4944(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_100019978(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      __n128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1000558FC(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100055A14((uint64_t)a1, &v54);
    unsigned __int8 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_100019978((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      unsigned __int8 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019978((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_100055B34(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100055C4C((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000A4C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
}

BOOL sub_1000A4C90(int a1, time_t __t)
{
  v2.__d_.__rep_ = std::chrono::system_clock::from_time_t(__t).__d_.__rep_;
  sub_1000B37CC((uint64_t)v8);
  sub_100015438(__p, "window_samples_expire_after");
  uint64_t v3 = sub_1000A3328(v8, (const void **)__p, (uint64_t)"\b\a");
  v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  return v2.__d_.__rep_ + 1000000 * v3 < v4.__d_.__rep_;
}

void sub_1000A4D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a15);
  _Unwind_Resume(a1);
}

void *sub_1000A4DA4(uint64_t a1, uint64_t a2)
{
  BOOL result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }
  return result;
}

uint64_t sub_1000A4E00(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_1000A4E60(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1000A4ED0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    memset(v20, 170, sizeof(v20));
    sub_1000A5038(a2, a4, a5, a6, v20);
  }
  else
  {
    uint64_t v12 = *a3;
    memset(v20, 170, sizeof(v20));
    sub_1000A5038(v12, a4, a5, a6, v20);
    uint64_t v13 = (void *)v20[1];
    BOOL v14 = (char *)v20[2];
    for (uint64_t i = a3 - 1; i != a1; --i)
    {
      uint64_t v16 = *i;
      uint64_t v17 = *i + 4096;
      memset(v20, 170, sizeof(v20));
      sub_1000A5038(v16, v17, v13, v14, v20);
      uint64_t v13 = (void *)v20[1];
      BOOL v14 = (char *)v20[2];
    }
    uint64_t v18 = *a1 + 4096;
    memset(v20, 170, sizeof(v20));
    sub_1000A5038(a2, v18, v13, v14, v20);
  }
  __n128 result = *(__n128 *)&v20[1];
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1000A5038@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 4 >= v12 >> 4) {
        uint64_t v13 = v12 >> 4;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 4;
      }
      v11 -= 16 * v13;
      a4 -= 16 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 16 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1000A50F4(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    sub_1000A51F0(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_1000A51F0(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  sub_1000A51F0(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1000A51F0@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12) {
        __srCC_SHA512_CTX c = (char *)memmove(__dst, v9, 16 * v12);
      }
      v9 += 16 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 16 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

unsigned char *sub_1000A52B0(unsigned char *result, unint64_t *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unint64_t v3 = result[8];
      break;
    case 5:
    case 6:
      unint64_t v3 = *((void *)result + 1);
      break;
    case 7:
      unint64_t v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unint64_t v5 = (char *)sub_100029400(v2);
      sub_100015438(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1000A53E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *sub_1000A5458@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) - 1;
  if (v3 > 2) {
    uint64_t v4 = "Unknown";
  }
  else {
    uint64_t v4 = off_1001570A0[v3];
  }
  return sub_100015438(a2, v4);
}

uint64_t sub_1000A54CC(uint64_t result)
{
  if (*(unsigned char *)(result + 104)) {
    *(unsigned char *)(result + 104) = 0;
  }
  if (*(unsigned char *)(result + 112)) {
    *(unsigned char *)(result + 112) = 0;
  }
  return result;
}

uint64_t sub_1000A54E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return *(unsigned int *)(a1 + 100);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000A5500(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void sub_1000A5508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string v8 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = sub_100026820(a1);
    if (*(char *)(v17 + 23) >= 0) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = *(void *)v17;
    }
    uint64_t v19 = sub_100024914(a1);
    if (*(char *)(v19 + 23) >= 0) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = *(void *)v19;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    uint64_t v23 = (void *)(*(void *)a4 + 16);
    if (*(char *)(*(void *)a4 + 39) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    *(_DWORD *)std::string buf = 136447234;
    *(void *)&uint8_t buf[4] = v18;
    __int16 v52 = 2082;
    *(void *)long long v53 = v20;
    *(_WORD *)&v53[8] = 2080;
    uint64_t v54 = v21;
    __int16 v55 = 2080;
    uint64_t v56 = v22;
    __int16 v57 = 2080;
    *(void *)v58 = v23;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[Transform] Error: Transform '%{public}s' with uuid=%{public}s error with reason='%s' and context='%s' with event='%s'", buf, 0x34u);
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100063038((uint64_t)&v44, "reason");
  unint64_t v46 = &v44;
  char v47 = 1;
  uint64_t v49 = sub_1000168C0((uint64_t)v48, a2);
  char v50 = 1;
  sub_10001200C((uint64_t)buf, (uint64_t)&v44, 2, 1, 2);
  *(void *)&v53[2] = buf;
  LOBYTE(v54) = 1;
  sub_1000459F4((uint64_t)v38, "context");
  uint64_t v39 = v38;
  char v40 = 1;
  sub_1000168C0((uint64_t)v41, a3);
  uint64_t v42 = v41;
  char v43 = 1;
  *(void *)&v58[4] = sub_10001200C((uint64_t)&v55, (uint64_t)v38, 2, 1, 2);
  char v59 = 1;
  sub_1000A7054((uint64_t)v32, "transformUuid");
  unint64_t v33 = v32;
  char v34 = 1;
  uint64_t v9 = sub_100024914(a1);
  sub_1000168C0((uint64_t)v35, v9);
  uint64_t v36 = v35;
  char v37 = 1;
  v60[2] = sub_10001200C((uint64_t)v60, (uint64_t)v32, 2, 1, 2);
  char v61 = 1;
  sub_10001DD00((uint64_t)v26, "eventName");
  uint64_t v27 = v26;
  char v28 = 1;
  sub_1000168C0((uint64_t)v29, *(void *)a4 + 16);
  long long v30 = v29;
  char v31 = 1;
  uint64_t v63 = sub_10001200C((uint64_t)v62, (uint64_t)v26, 2, 1, 2);
  char v64 = 1;
  sub_10001200C((uint64_t)&v24, (uint64_t)buf, 4, 1, 2);
  for (uint64_t i = 0; i != -128; i -= 32)
  {
    sub_100016EAC((uint64_t)&v62[i]);
    sub_100016B28((uint64_t **)&v62[i + 8], v62[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)&v29[j]);
    sub_100016B28((uint64_t **)&v29[j + 8], v29[j]);
  }
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    sub_100016EAC((uint64_t)&v35[k]);
    sub_100016B28((uint64_t **)&v35[k + 8], v35[k]);
  }
  for (uint64_t m = 0; m != -64; m -= 32)
  {
    sub_100016EAC((uint64_t)&v41[m]);
    sub_100016B28((uint64_t **)&v41[m + 8], v41[m]);
  }
  for (uint64_t n = 0; n != -64; n -= 32)
  {
    sub_100016EAC((uint64_t)&v48[n]);
    sub_100016B28((uint64_t **)&v48[n + 8], v48[n]);
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v16 = (long long *)sub_100015438(buf, "com.apple.coreanalytics.meta.TransformExpressionFailure");
  sub_10008D90C(v16, (uint64_t)&v24, &v44);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 32))(v15, &v44);
  if (v45) {
    sub_1000147D8(v45);
  }
  if ((v53[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_100016EAC((uint64_t)&v24);
  sub_100016B28(&v25, v24);
}

void sub_1000A5968(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A5974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string v8 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = sub_100026820(a1);
    if (*(char *)(v18 + 23) >= 0) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = *(void *)v18;
    }
    uint64_t v20 = sub_100024914(a1);
    if (*(char *)(v20 + 23) >= 0) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = *(void *)v20;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = *(void *)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v23 = a3;
    }
    else {
      uint64_t v23 = *(void *)a3;
    }
    unint64_t v24 = (void *)(*(void *)a4 + 16);
    if (*(char *)(*(void *)a4 + 39) < 0) {
      unint64_t v24 = (void *)*v24;
    }
    *(_DWORD *)std::string buf = 136447234;
    *(void *)&uint8_t buf[4] = v19;
    __int16 v59 = 2082;
    *(void *)v60 = v21;
    *(_WORD *)&unsigned __int8 v60[8] = 2080;
    uint64_t v61 = v22;
    __int16 v62 = 2080;
    uint64_t v63 = v23;
    __int16 v64 = 2080;
    *(void *)v65 = v24;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[Transform] FAULT: Transform '%{public}s'  with uuid=%{public}s hit unrecoverable error with reason='%s' and context='%s' with event='%s'", buf, 0x34u);
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v26 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100063038((uint64_t)&v51, "reason");
  long long v53 = &v51;
  char v54 = 1;
  uint64_t v56 = sub_1000168C0((uint64_t)v55, a2);
  char v57 = 1;
  sub_10001200C((uint64_t)buf, (uint64_t)&v51, 2, 1, 2);
  *(void *)&v60[2] = buf;
  LOBYTE(v61) = 1;
  sub_1000459F4((uint64_t)v45, "context");
  unint64_t v46 = v45;
  char v47 = 1;
  sub_1000168C0((uint64_t)v48, a3);
  uint64_t v49 = v48;
  char v50 = 1;
  *(void *)&v65[4] = sub_10001200C((uint64_t)&v62, (uint64_t)v45, 2, 1, 2);
  char v66 = 1;
  sub_1000A7054((uint64_t)v39, "transformUuid");
  char v40 = v39;
  char v41 = 1;
  uint64_t v9 = sub_100024914(a1);
  sub_1000168C0((uint64_t)v42, v9);
  char v43 = v42;
  char v44 = 1;
  v67[2] = sub_10001200C((uint64_t)v67, (uint64_t)v39, 2, 1, 2);
  char v68 = 1;
  sub_10005EA30((uint64_t)v33, "fault");
  char v34 = v33;
  char v35 = 1;
  v36[0] = 4;
  v37[0] = 1;
  sub_100016EAC((uint64_t)v36);
  sub_100016EAC((uint64_t)v36);
  v37[1] = v36;
  char v38 = 1;
  sub_10001200C((uint64_t)v69, (uint64_t)v33, 2, 1, 2);
  v69[2] = v69;
  char v70 = 1;
  sub_10001DD00((uint64_t)v27, "eventName");
  char v28 = v27;
  char v29 = 1;
  sub_1000168C0((uint64_t)v30, *(void *)a4 + 16);
  char v31 = v30;
  char v32 = 1;
  uint64_t v72 = sub_10001200C((uint64_t)v71, (uint64_t)v27, 2, 1, 2);
  char v73 = 1;
  sub_10001200C((uint64_t)&v25, (uint64_t)buf, 5, 1, 2);
  for (uint64_t i = 0; i != -160; i -= 32)
  {
    sub_100016EAC((uint64_t)&v71[i]);
    sub_100016B28((uint64_t **)&v71[i + 8], v71[i]);
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)&v30[j]);
    sub_100016B28((uint64_t **)&v30[j + 8], v30[j]);
  }
  for (uint64_t k = 0; k != -8; k -= 4)
  {
    sub_100016EAC((uint64_t)&v36[k * 8]);
    sub_100016B28((uint64_t **)&v37[k], v36[k * 8]);
  }
  for (uint64_t m = 0; m != -64; m -= 32)
  {
    sub_100016EAC((uint64_t)&v42[m]);
    sub_100016B28((uint64_t **)&v42[m + 8], v42[m]);
  }
  for (uint64_t n = 0; n != -64; n -= 32)
  {
    sub_100016EAC((uint64_t)&v48[n]);
    sub_100016B28((uint64_t **)&v48[n + 8], v48[n]);
  }
  for (iuint64_t i = 0; ii != -64; ii -= 32)
  {
    sub_100016EAC((uint64_t)&v55[ii]);
    sub_100016B28((uint64_t **)&v55[ii + 8], v55[ii]);
  }
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v17 = (long long *)sub_100015438(buf, "com.apple.coreanalytics.meta.TransformExpressionFailure");
  sub_10008D90C(v17, (uint64_t)&v25, &v51);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 32))(v16, &v51);
  if (v52) {
    sub_1000147D8(v52);
  }
  if ((v60[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_100016EAC((uint64_t)&v25);
  sub_100016B28(&v26, v25);
}

void sub_1000A5E70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A5E7C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("createMessage", "Transform.cpp", 272, "initialized()");
  }
  memset(&__p, 170, sizeof(__p));
  uint64_t v8 = sub_100026820(a1);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_100017424(&__p, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  }
  memset(&__dst, 170, sizeof(__dst));
  uint64_t v10 = sub_100024914(a1);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_100017424(&__dst, *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    __dst.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v11;
  }
  char v12 = sub_100012B9C((_DWORD *)a1);
  unint64_t v34 = 0xAAAAAAAAAAAAAA00;
  char v35 = 0;
  sub_100016EAC((uint64_t)&v34);
  sub_100016EAC((uint64_t)&v34);
  uint64_t v13 = *(unsigned __int8 **)(a1 + 32);
  int v14 = *v13;
  if (*v13)
  {
    if (v14 == 1)
    {
      if (!*(void *)(*((void *)v13 + 1) + 16)) {
        goto LABEL_22;
      }
    }
    else if (v14 == 2 && !((uint64_t)(*(void *)(*((void *)v13 + 1) + 8) - **((void **)v13 + 1)) >> 4))
    {
      goto LABEL_22;
    }
    v31[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v31 = v15;
    *(_OWORD *)&void v31[2] = v15;
    sub_1000136C8(v31, (uint64_t)v13);
    sub_100014064((unsigned __int8 **)v31);
    uint64_t v16 = sub_100013AAC((unsigned __int8 **)v31);
    sub_100016A10((uint64_t)v32, (uint64_t)v16);
    sub_100016EAC((uint64_t)v32);
    char v17 = v34;
    LOBYTE(v34) = v32[0];
    v32[0] = v17;
    uint64_t v18 = v35;
    char v35 = v33;
    unint64_t v33 = v18;
    sub_100016EAC((uint64_t)&v34);
    sub_100016EAC((uint64_t)v32);
    sub_100016B28(&v33, v32[0]);
    v31[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v31 = v19;
    *(_OWORD *)&void v31[2] = v19;
    sub_10003A370((uint64_t)&v34, "message", (uint64_t)v31);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = (unint64_t)&v34;
    v29.__r_.__value_.__r.__words[2] = 0;
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)&v29);
    if (!sub_1000205D8((unsigned __int8 **)v31, (unsigned __int8 **)&v29))
    {
      uint64_t v20 = sub_10001EE40((unsigned __int8 **)v31);
      sub_100015064((uint64_t)v20, &v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v29;
    }
    sub_10003A370((uint64_t)&v34, "uuid", (uint64_t)&v29);
    uint64_t v21 = (void *)v29.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v31[1] = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v31[3] = v30;
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = (unint64_t)&v34;
    v29.__r_.__value_.__r.__words[2] = 0;
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0x8000000000000000;
    v31[0] = v21;
    sub_1000157EC((unsigned __int8 **)&v29);
    if (!sub_1000205D8((unsigned __int8 **)v31, (unsigned __int8 **)&v29))
    {
      uint64_t v22 = sub_10001EE40((unsigned __int8 **)v31);
      sub_100015064((uint64_t)v22, &v29);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      std::string __dst = v29;
    }
  }
LABEL_22:
  sub_1000A6320(a1, (unsigned __int8 *)&v34, a3, (uint64_t)&v29);
  int v23 = *(_DWORD *)(a1 + 108);
  double v24 = *(double *)(a1 + 72);
  int v25 = *(_DWORD *)(a1 + 80);
  uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v28 = sub_1000A6688(v27, (std::string *)&v34);
  sub_1000A6808((unsigned __int8 *)&v34, (uint64_t)v38);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **))(*(void *)v26 + 16))(v31, v26, v28, v38);
  long long v41 = *(_OWORD *)v31;
  uint64_t v42 = v31[2];
  memset(v31, 0, 24);
  char v43 = 1;
  sub_1000A6F04(a4, a2, (long long *)&__p, (long long *)&__dst, (uint64_t)&v29, v23, v12, v25, v24, (void *)(a1 + 88), &v41);
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  sub_100016EAC((uint64_t)&v29);
  sub_100016B28((uint64_t **)&v29.__r_.__value_.__l.__size_, v29.__r_.__value_.__s.__data_[0]);
  sub_100016EAC((uint64_t)&v34);
  sub_100016B28(&v35, v34);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000A6314(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A6320(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a2 == 1)
  {
    *(void *)&v24[0] = "fields";
    unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v32 = v8;
    long long v33 = v8;
    sub_1000135DC((uint64_t)a2, (const std::string::value_type **)v24, (uint64_t)&v32);
    uint64_t v27 = a2;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0x8000000000000000;
    sub_100013648(&v27);
    if (sub_100013964((unsigned __int8 **)&v32, &v27))
    {
      long long v9 = (unsigned char *)sub_1000155C8();
      if (!v9) {
        goto LABEL_22;
      }
    }
    else
    {
      long long v9 = sub_100013AAC((unsigned __int8 **)&v32);
    }
    if (*v9 != 2)
    {
LABEL_22:
      *(unsigned char *)a4 = *(unsigned char *)a3;
      *(void *)(a4 + 8) = *(void *)(a3 + 8);
      sub_100016EAC(a3);
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      sub_100016EAC(a4);
      return;
    }
    *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)(a4 + 8) = 0xAAAAAAAAAAAAAAAALL;
    sub_10001200C(a4, 0, 0, 0, 1);
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v10 = (long long *)sub_100015438(&v32, "message");
    sub_10008D90C(v10, a3, &v26);
    if (SBYTE7(v33) < 0) {
      operator delete((void *)v32);
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v24[0] = v11;
    v24[1] = v11;
    sub_1000136C8(v24, (uint64_t)v9);
    sub_100014064((unsigned __int8 **)v24);
    unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[0] = v12;
    v22[1] = v12;
    sub_1000136C8(v22, (uint64_t)v9);
    sub_100013648((unsigned __int8 **)v22);
    while (1)
    {
      if (sub_100013964((unsigned __int8 **)v24, (unsigned __int8 **)v22))
      {
        if (*((void *)&v26 + 1)) {
          sub_1000147D8(*((std::__shared_weak_count **)&v26 + 1));
        }
        return;
      }
      uint64_t v13 = sub_100013AAC((unsigned __int8 **)v24);
      char v35 = "name";
      unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v32 = v14;
      long long v33 = v14;
      sub_1000135DC((uint64_t)v13, &v35, (uint64_t)&v32);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v28 = 0;
      uint64_t v27 = v13;
      unint64_t v31 = 0x8000000000000000;
      sub_100013648(&v27);
      if (sub_100013964((unsigned __int8 **)&v32, &v27))
      {
        uint64_t v15 = sub_1000155C8();
        if (!v15) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v15 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v32);
      }
      if (*(unsigned char *)v15 == 3)
      {
        uint64_t v16 = *(const void ***)(v15 + 8);
        if (v16)
        {
          sub_1000131E4(a1, (uint64_t)v13, &v26, (uint64_t)v20);
          char v17 = sub_10001DA78((unsigned __int8 *)a4, v16);
          sub_100016EAC((uint64_t)v20);
          char v18 = *(unsigned char *)v17;
          *(unsigned char *)char v17 = v20[0];
          v20[0] = v18;
          long long v19 = (uint64_t *)v17[1];
          v17[1] = (uint64_t)v21;
          uint64_t v21 = v19;
          sub_100016EAC((uint64_t)v17);
          sub_100016EAC((uint64_t)v20);
          sub_100016B28(&v21, v20[0]);
        }
      }
LABEL_21:
      sub_100013C64((unsigned __int8 **)v24);
    }
  }
  *(unsigned char *)a4 = *(unsigned char *)a3;
  *(void *)(a4 + 8) = *(void *)(a3 + 8);
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;

  sub_100016EAC(a4);
}

void sub_1000A6678(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6688(uint64_t a1, std::string *a2)
{
  memset(&v10, 170, sizeof(v10));
  sub_1000A6D24(a2, &v10);
  memset(&__p, 170, sizeof(__p));
  sub_1000A6E14(&v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != 5)
    {
      uint64_t v7 = 1;
LABEL_25:
      operator delete(p_p);
      goto LABEL_28;
    }
    if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1702257998
      || *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 4) != 114)
    {
      goto LABEL_13;
    }
    uint64_t v7 = 0xFFFFFFFFLL;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5)
    {
      uint64_t v7 = 1;
      goto LABEL_28;
    }
    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1702257998 || __p.__r_.__value_.__s.__data_[4] != 114)
    {
      p_p = &__p;
LABEL_13:
      unsigned int v5 = bswap32(p_p->__r_.__value_.__l.__data_);
      if (v5 == 959464545)
      {
        int v6 = p_p->__r_.__value_.__s.__data_[4] - 121;
      }
      else if (v5 < 0x39304461)
      {
        int v6 = -1;
      }
      else
      {
        int v6 = 1;
      }
      if (v6) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = 90;
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
    uint64_t v7 = 0xFFFFFFFFLL;
  }
LABEL_28:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1000A67E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6808(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  if (*a1 != 1) {
    goto LABEL_10;
  }
  long long v12 = "correlation_group_uuid";
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v4;
  v10[1] = v4;
  sub_1000135DC((uint64_t)a1, &v12, (uint64_t)v10);
  v9[0] = a1;
  memset(&v9[1], 0, 24);
  void v9[4] = (unsigned __int8 *)0x8000000000000000;
  sub_100013648(v9);
  if (sub_100013964((unsigned __int8 **)v10, v9))
  {
    uint64_t v5 = sub_1000155C8();
    if (!v5)
    {
LABEL_10:
      char v8 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t)sub_100013AAC((unsigned __int8 **)v10);
  }
  if (*(unsigned char *)v5 != 3) {
    goto LABEL_10;
  }
  int v6 = *(long long **)(v5 + 8);
  if (!v6) {
    goto LABEL_10;
  }
  if (*((char *)v6 + 23) < 0)
  {
    sub_100017424((unsigned char *)a2, *(void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    *(void *)(a2 + 16) = *((void *)v6 + 2);
    *(_OWORD *)a2 = v7;
  }
  char v8 = 1;
LABEL_11:
  *(unsigned char *)(a2 + 24) = v8;
}

void sub_1000A6924(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000A6930@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v4;
  v24[1] = v4;
  sub_1000136C8(v24, v3);
  sub_100014064((unsigned __int8 **)v24);
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v5;
  v22[1] = v5;
  sub_1000136C8(v22, v3);
  sub_100013648((unsigned __int8 **)v22);
  while (1)
  {
    BOOL result = sub_100013964((unsigned __int8 **)v24, (unsigned __int8 **)v22);
    if (result) {
      break;
    }
    long long v7 = sub_100013AAC((unsigned __int8 **)v24);
    uint64_t v8 = sub_100024940((uint64_t)v7, "event");
    sub_100015064(v8, &__p);
    unint64_t v10 = a2[1];
    unint64_t v9 = a2[2];
    if (v10 >= v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a2) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100028DEC();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a2) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      v26[4] = a2 + 2;
      if (v15) {
        uint64_t v16 = (char *)sub_10002AC98((uint64_t)(a2 + 2), v15);
      }
      else {
        uint64_t v16 = 0;
      }
      char v17 = &v16[24 * v12];
      v26[0] = v16;
      v26[1] = v17;
      v26[3] = &v16[24 * v15];
      long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v17 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)char v17 = v18;
      memset(&__p, 0, sizeof(__p));
      v26[2] = v17 + 24;
      sub_10002AC20(a2, v26);
      uint64_t v19 = a2[1];
      sub_10002AE30((uint64_t)v26);
      int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1] = v19;
      if (v20 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v10 = v11;
      a2[1] = v10 + 24;
    }
    sub_100013C64((unsigned __int8 **)v24);
  }
  return result;
}

void sub_1000A6B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
  {
    sub_10002AE30((uint64_t)&a25);
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000A6B60@<W0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v4;
  v15[1] = v4;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v15, a1);
  sub_100014064((unsigned __int8 **)v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v5;
  v13[1] = v5;
  sub_1000136C8(v13, a1);
  sub_100013648((unsigned __int8 **)v13);
  char v17 = (void **)a2;
  for (BOOL result = sub_100013964((unsigned __int8 **)v15, (unsigned __int8 **)v13);
        !result;
        BOOL result = sub_100013964((unsigned __int8 **)v15, (unsigned __int8 **)v13))
  {
    long long v7 = sub_100013AAC((unsigned __int8 **)v15);
    unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[0] = v8;
    v19[1] = v8;
    sub_1000239E4((uint64_t)v7, "name", (uint64_t)v19);
    memset(&v18[1], 0, 24);
    v18[0] = v7;
    v18[4] = (unsigned __int8 *)0x8000000000000000;
    sub_100013648(v18);
    if (sub_100013964((unsigned __int8 **)v19, v18))
    {
      unint64_t v9 = "<illegal-name>";
    }
    else
    {
      unint64_t v10 = sub_100063118((unsigned __int8 **)v19);
      unint64_t v9 = "<illegal-name>";
      if (*v10 == 3)
      {
        long long v11 = sub_100013AAC((unsigned __int8 **)v19);
        unint64_t v9 = (const char *)*((void *)v11 + 1);
        if (*v11 == 3) {
          uint64_t v12 = *((void *)v11 + 1);
        }
        else {
          uint64_t v12 = 0;
        }
        if (*(char *)(v12 + 23) < 0) {
          unint64_t v9 = *(const char **)v12;
        }
      }
    }
    *(void *)&v19[0] = v9;
    sub_1000A7264(&v17, v19);
    sub_100013C64((unsigned __int8 **)v15);
  }
  return result;
}

void sub_1000A6D04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000A6D24@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  if (result->__r_.__value_.__s.__data_[0] != 1) {
    goto LABEL_5;
  }
  uint64_t v3 = (uint64_t)result;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v4;
  v9[1] = v4;
  sub_1000239E4((uint64_t)result, "sink", (uint64_t)v9);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v5;
  v7[1] = v5;
  sub_1000136C8(v7, v3);
  sub_100013648((unsigned __int8 **)v7);
  BOOL result = (std::string *)sub_100013964((unsigned __int8 **)v9, (unsigned __int8 **)v7);
  if (result) {
    goto LABEL_5;
  }
  BOOL result = (std::string *)sub_100063118((unsigned __int8 **)v9);
  if (result->__r_.__value_.__s.__data_[0] == 3)
  {
    int v6 = sub_100013AAC((unsigned __int8 **)v9);
    return sub_100015064((uint64_t)v6, a2);
  }
  else
  {
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  return result;
}

std::string *sub_1000A6E14@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  memset(a2, 170, sizeof(std::string));
  BOOL result = (std::string *)sub_100015438(a2, "Daily");
  int v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 < 0)
  {
    if (a1->__r_.__value_.__l.__size_ != 5) {
      return result;
    }
    long long v7 = (int *)a1->__r_.__value_.__r.__words[0];
    if (*(_DWORD *)a1->__r_.__value_.__l.__data_ == 1631858745
      && *(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 4) == 121)
    {
      return std::string::operator=(a2, a1);
    }
  }
  else
  {
    if (v5 != 5) {
      return result;
    }
    BOOL v6 = LODWORD(a1->__r_.__value_.__l.__data_) == 1631858745 && a1->__r_.__value_.__s.__data_[4] == 121;
    long long v7 = (int *)a1;
    if (v6) {
      return std::string::operator=(a2, a1);
    }
  }
  int v9 = *v7;
  int v10 = *((unsigned __int8 *)v7 + 4);
  if (v9 == 1702257998 && v10 == 114) {
    return std::string::operator=(a2, a1);
  }
  return result;
}

void sub_1000A6EE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A6F04(uint64_t a1, int a2, long long *a3, long long *a4, uint64_t a5, int a6, char a7, int a8, double a9, void *a10, long long *a11)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100017424((unsigned char *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v18 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v18;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_100017424((unsigned char *)(a1 + 32), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v19 = *a4;
    *(void *)(a1 + 48) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v19;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)a5;
  *(void *)(a1 + 64) = *(void *)(a5 + 8);
  sub_100016EAC(a5);
  *(unsigned char *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  sub_100016EAC(a1 + 56);
  *(_DWORD *)(a1 + 72) = a8;
  *(void *)(a1 + 80) = *a10;
  sub_10007FD94(a1 + 88, a11);
  *(_DWORD *)(a1 + 120) = a6;
  *(double *)(a1 + 128) = a9;
  *(unsigned char *)(a1 + 136) = a7;
  return a1;
}

void sub_1000A7018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A7054(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000A70A0(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000A70A0(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000A70D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A70EC(unsigned __int8 *a1, unsigned int a2)
{
  v5[0] = 4;
  unint64_t v6 = a2;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  uint64_t v3 = sub_10001F600(a1, v5);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  return v3;
}

void sub_1000A7194()
{
}

void *sub_1000A71A8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_100157030;
  result[1] = v3;
  return result;
}

uint64_t sub_1000A71F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100157030;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000A7218(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000A7258()
{
}

void ***sub_1000A7264(void ***a1, void *a2)
{
  long long v4 = *a1;
  int v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_100019978(v7, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    char v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = *a2;
    int v10 = v16 + 8;
    long long v19 = (char *)*v4;
    long long v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      long long v18 = (char *)*v4;
    }
    *long long v4 = v16;
    v4[1] = v10;
    void v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int v5 = *a2;
    int v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void sub_1000A7598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A78AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A78D8(void *a1@<X8>)
{
  if (objc_opt_class()) {
    operator new();
  }
  uint64_t v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] WARNING: Failed to get CLLocationManager class", v3, 2u);
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_1000A79C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000A79D8()
{
  return objc_opt_class() != 0;
}

uint64_t sub_1000A7A00(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.LocationStateResolverQueue", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001570C8;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = off_100157110;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_1000A7AA0(uint64_t a1)
{
  *(void *)a1 = off_1001570C8;
  *(void *)(a1 + 32) = off_100157110;
  uint64_t v2 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] Destructor called", v7, 2u);
  }
  sub_1000A7BF8(a1);
  sub_1000A7C5C(a1);
  sub_1000A7CC0((id **)a1);
  sub_1000AA414((id **)(a1 + 112), 0);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3) {
    sub_1000147D8(v3);
  }
  dispatch_queue_t v4 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  int v5 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  sub_1000AA6F4(a1 + 40);
  sub_1000296A4(a1 + 8);
  return a1;
}

void sub_1000A7BEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000A7BF8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 80);
  if (*(void *)(a1 + 80))
  {
    uint64_t v2 = sub_10000FD1C((id *)(a1 + 80));
    dispatch_source_cancel(v2);

    uint64_t v3 = *v1;
    void *v1 = 0;
  }
}

void sub_1000A7C5C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 88);
  if (*(void *)(a1 + 88))
  {
    uint64_t v2 = sub_10000FD1C((id *)(a1 + 88));
    dispatch_source_cancel(v2);

    uint64_t v3 = *v1;
    void *v1 = 0;
  }
}

id **sub_1000A7CC0(id **result)
{
  uint64_t v2 = result + 14;
  uint64_t v1 = (nw_path_monitor_t *)result[14];
  if (v1)
  {
    nw_path_monitor_cancel(*v1);
    return sub_1000AA414(v2, 0);
  }
  return result;
}

uint64_t sub_1000A7D18(uint64_t a1)
{
  return sub_1000A7AA0(a1 - 32);
}

void sub_1000A7D20(uint64_t a1)
{
  sub_1000A7AA0(a1);

  operator delete();
}

void sub_1000A7D58(uint64_t a1)
{
  sub_1000A7AA0(a1 - 32);

  operator delete();
}

void sub_1000A7D94(char **a1@<X8>)
{
  sub_100015438(&v4, off_10015E938);
  sub_100015438(v5, off_10015E940);
  sub_100015438(v6, "location");
  sub_100015438(v7, "market");
  sub_100015438(v8, "locationServicesEnabled");
  sub_100015438(v9, "signalEnvironment");
  sub_100015438(v10, "locationAuthorizationStatus");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0xA8uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 168;
  uint64_t v3 = 0;
  a1[1] = sub_100037BCC((uint64_t)(a1 + 2), &v4, &v11, v2);
  do
  {
    if (SHIBYTE(v10[v3 + 2]) < 0) {
      operator delete((void *)v10[v3]);
    }
    v3 -= 3;
  }
  while (v3 != -21);
}

void sub_1000A7EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  *(void *)(v11 + 8) = v12;
  sub_10002A71C(&a9);
  uint64_t v14 = 0;
  while (1)
  {
    if (*(&a11 + v14 + 167) < 0) {
      operator delete(*(void **)(&a11 + v14 + 144));
    }
    v14 -= 24;
    if (v14 == -168) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_1000A7F6C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000A8080(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8098(uint64_t a1@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  *a3 = dispatch_group_create();
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, a2, &v25);
  if (sub_1000A832C(a1))
  {
    unint64_t v6 = sub_10000FD1C(a3);
    dispatch_group_enter(v6);

    unint64_t v7 = v25;
    sub_1000A83CC((uint64_t *)(v25 + 88), a3);
    if (*(void *)(v7 + 96) - *(void *)(v7 + 88) == 8)
    {
      unint64_t v8 = qword_10015EF78;
      if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
        sub_100101C3C(a2, v8, v9, v10, v11, v12, v13, v14);
      }
      [*(id *)v7 requestLocation];
    }
    unint64_t v15 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v16 = kCLLocationAccuracyAggressivePrecisionReduction;
      if (a2) {
        unint64_t v16 = 0xBFF0000000000000;
      }
      uint64_t v17 = (uint64_t)(*(void *)(v7 + 96) - *(void *)(v7 + 88)) >> 3;
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v28 = v16;
      __int16 v29 = 2048;
      uint64_t v30 = v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[LocationManager] Location requests in queue for accuracy %f: %lu", buf, 0x16u);
    }
  }
  else
  {
    long long v18 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100101CC0(a2, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  if (v26) {
    sub_1000147D8(v26);
  }
}

void sub_1000A8250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A825C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2) {
    int v5 = "AccuracyUnknown";
  }
  else {
    int v5 = "AccuracyDefault";
  }
  sub_100015438(__p, v5);
  unint64_t v6 = sub_1000140F0((void *)(a1 + 40), (unsigned __int8 *)__p);
  if (!v6) {
    sub_10002B738("unordered_map::at: key not found");
  }
  uint64_t v7 = *((void *)v6 + 6);
  *a3 = *((void *)v6 + 5);
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A831C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A832C(uint64_t a1)
{
  uint64_t v3 = (id *)0xAAAAAAAAAAAAAAAALL;
  long long v4 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, 0, &v3);
  unsigned int v1 = [*v3 authorizationStatus];
  if (v4) {
    sub_1000147D8(v4);
  }
  return (v1 < 5) & (0x18u >> v1);
}

void sub_1000A83C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_1000A83CC(uint64_t *a1, id *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_100019978(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v16[2] = v14 + 8;
    sub_1000AB4D8(a1, v16);
    unint64_t v8 = (void *)a1[1];
    sub_1000AB748((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = *a2;
    unint64_t v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_1000A84E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000A84F8(uint64_t a1)
{
  sub_1000A8098(a1, 0, (id *)&group);
  sub_10000FD1C((id *)(a1 + 24));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_1000A85C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000A85D0(uint64_t a1)
{
  unsigned int v2 = +[CLLocationManager locationServicesEnabled];
  uint64_t v3 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = "NO";
    if (v2) {
      uint64_t v4 = "YES";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[LocationManager] Location services enabled: %s", buf, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  sub_100015438(buf, "locationServicesEnabled");
  v8[0] = 0;
  uint64_t v9 = 0;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v8);
  v6[0] = 4;
  unint64_t v7 = v2;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)v6);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, buf, v8, v6, -1, 1);
  sub_100016EAC((uint64_t)v6);
  sub_100016B28((uint64_t **)&v7, v6[0]);
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1000A8778(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8784(uint64_t a1)
{
  unsigned int v2 = sub_1000A832C(a1);
  uint64_t v3 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = "NO";
    if (v2) {
      uint64_t v4 = "YES";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[LocationManager] Location authorized: %s", buf, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 96);
  sub_100015438(buf, "locationAuthorizationStatus");
  v8[0] = 0;
  uint64_t v9 = 0;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v8);
  v6[0] = 4;
  unint64_t v7 = v2;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)v6);
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, buf, v8, v6, -1, 1);
  sub_100016EAC((uint64_t)v6);
  sub_100016B28((uint64_t **)&v7, v6[0]);
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1000A8924(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8930(uint64_t a1@<X0>, char *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  char v9 = *a2;
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 8);
  uint64_t v11 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  int v12 = *((_DWORD *)a2 + 8);
  unint64_t v7 = v6;
  uint64_t v13 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000A8AF0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8B08(uint64_t a1@<X0>, char *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000A8B10(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000A8C80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8C98(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000A8CA0(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000A8DF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A8E0C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000A8E14(uint64_t a1)
{
  unsigned int v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] Purging all location data", buf, 2u);
  }
  sub_1000A90F4(buf);
  uint64_t v3 = *(int **)buf;
  dispatch_group_t v4 = v19;
  if (*(int **)buf != v19)
  {
    do
    {
      int v5 = *v3++;
      v11[0] = 0;
      int v12 = v5;
      sub_1000A91EC(a1, (uint64_t)v11);
    }
    while (v3 != v4);
    uint64_t v3 = *(int **)buf;
  }
  if (v3)
  {
    uint64_t v19 = v3;
    operator delete(v3);
  }
  v13[0] = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  int v17 = -1;
  sub_1000A92D0(a1, (uint64_t)v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = *(void *)(a1 + 96);
  sub_100015438(buf, "location");
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v6 + 32))(v6, buf);
  if (v20 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  sub_100015438(buf, off_10015E938);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 32))(v7, buf);
  if (v20 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  sub_100015438(buf, off_10015E940);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 32))(v8, buf);
  if (v20 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v9 = *(void *)(a1 + 96);
  sub_100015438(buf, "market");
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 32))(v9, buf);
  if (v20 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  sub_100015438(buf, "signalEnvironment");
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 32))(v10, buf);
  if (v20 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1000A90C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000A90F4@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EEB0, memory_order_acquire) & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_10015EEB0);
    uint64_t v1 = a1;
    if (v3)
    {
      int v5 = 0;
      sub_1000A9E68(qword_10015EE98, &v5, 1uLL);
      __cxa_atexit((void (*)(void *))sub_1000A929C, qword_10015EE98, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10015EEB0);
      uint64_t v1 = a1;
    }
  }
  void *v1 = 0;
  v1[1] = 0;
  void v1[2] = 0;
  return sub_1000ACE8C(v1, (const void *)qword_10015EE98[0], unk_10015EEA0, (unk_10015EEA0 - qword_10015EE98[0]) >> 2);
}

void sub_1000A91E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A91EC(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, *(_DWORD *)(a2 + 28), &v6);
  long long v3 = *(_OWORD *)(a2 + 16);
  unint64_t v5 = v6;
  dispatch_group_t v4 = (std::__shared_weak_count *)v7;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v3;
  if (v4)
  {
    sub_1000147D8(v4);
  }
}

uint64_t sub_1000A929C(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000A92D0(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, 0, &v5);
  unint64_t v3 = v5;
  *(unsigned char *)(v5 + 48) = *(unsigned char *)a2;
  std::string::operator=((std::string *)(v3 + 56), (const std::string *)(a2 + 8));
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a2 + 32);
  dispatch_group_t v4 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    sub_1000147D8(v4);
  }
}

void sub_1000A9398(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000A93A4(uint64_t a1)
{
  unsigned int v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)dispatch_group_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] Starting location services", v4, 2u);
  }
  sub_1000A9464(a1);
  sub_1000A9594(a1);
  return sub_1000A96C4(a1);
}

void sub_1000A9458(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A9464(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 80);
  if (!*(void *)(a1 + 80))
  {
    id v3 = *(id *)(a1 + 24);
    void v9[4] = a1;
    id v10 = v3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_1000A9C08;
    void v9[3] = &unk_100154A48;
    sub_1000A9AB8(&v10, 600, v9, &v11);
    id v4 = v11;
    id v11 = 0;

    unint64_t v5 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v4;

    id v6 = v11;
    id v11 = 0;

    id v7 = v10;
    id v10 = 0;

    uint64_t v8 = sub_10000FD1C(v1);
    dispatch_resume(v8);
  }
}

void sub_1000A9594(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 88);
  if (!*(void *)(a1 + 88))
  {
    id v3 = *(id *)(a1 + 24);
    void v9[4] = a1;
    id v10 = v3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_1000A9CC0;
    void v9[3] = &unk_100154A48;
    sub_1000A9AB8(&v10, 28800, v9, &v11);
    id v4 = v11;
    id v11 = 0;

    unint64_t v5 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v4;

    id v6 = v11;
    id v11 = 0;

    id v7 = v10;
    id v10 = 0;

    uint64_t v8 = sub_10000FD1C(v1);
    dispatch_resume(v8);
  }
}

uint64_t sub_1000A96C4(uint64_t result)
{
  if (!*(void *)(result + 112))
  {
    uint64_t v1 = result;
    unsigned int v2 = nw_path_monitor_create();
    update_handler[0] = _NSConcreteStackBlock;
    update_handler[1] = 3221225472;
    update_handler[2] = sub_1000AA184;
    update_handler[3] = &unk_100157138;
    update_handler[4] = v1;
    nw_path_monitor_set_update_handler(v2, update_handler);
    id v3 = sub_10000FD1C((id *)(v1 + 24));
    nw_path_monitor_set_queue(v2, v3);

    id v4 = v2;
    operator new();
  }
  return result;
}

void sub_1000A986C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A989C(id **a1)
{
  unsigned int v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] Stopping location services", (uint8_t *)&v6, 2u);
  }
  sub_1000A7BF8((uint64_t)a1);
  sub_1000A7C5C((uint64_t)a1);
  sub_1000A7CC0(a1);
  sub_1000A90F4(&v6);
  id v3 = v6;
  id v4 = v7;
  if (v6 != v7)
  {
    do
    {
      unsigned int v5 = *v3++;
      sub_1000A99A0((uint64_t)a1, v5);
    }
    while (v3 != v4);
    id v3 = v6;
  }
  if (v3)
  {
    id v7 = v3;
    operator delete(v3);
  }
}

void sub_1000A9994(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A99A0(uint64_t a1, uint64_t a2)
{
  id v4 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_100101D44(a2, v4, v5, v6, v7, v8, v9, v10);
  }
  uint64_t v16 = (id *)0xAAAAAAAAAAAAAAAALL;
  int v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, a2, &v16);
  id v11 = v16;
  [*v16 stopUpdatingLocation];
  uint64_t v13 = (id *)v11[11];
  uint64_t v14 = (id *)v11[12];
  int v12 = (id **)(v11 + 11);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = sub_10000FD1C(v13);
      dispatch_group_leave(v15);

      ++v13;
    }
    while (v13 != v14);
    uint64_t v13 = *v12;
  }
  sub_1000AB0C0((uint64_t)v12, v13);
  if (v17) {
    sub_1000147D8(v17);
  }
}

void sub_1000A9AA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000A9AB8(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, id *a4@<X8>)
{
  id v7 = a3;
  uint64_t v8 = sub_10000FD1C(a1);
  *a4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v8);

  uint64_t v9 = sub_10000FD1C(a4);
  dispatch_source_set_timer(v9, 0, 1000000000 * a2, 1000000000 * a2);

  uint64_t v10 = sub_10000FD1C(a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000AA474;
  v12[3] = &unk_1001571E0;
  id v13 = v7;
  id v11 = v7;
  dispatch_source_set_event_handler(v10, v12);
}

void sub_1000A9C08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1000A90F4(&v6);
  unsigned int v2 = v6;
  id v3 = v7;
  if (v6 != v7)
  {
    do
    {
      sub_1000A8098(v1, *v2, &v5);
      id v4 = v5;
      id v5 = 0;

      ++v2;
    }
    while (v2 != v3);
    unsigned int v2 = v6;
  }
  if (v2)
  {
    id v7 = v2;
    operator delete(v2);
  }
}

void sub_1000A9CC0(uint64_t a1)
{
}

void sub_1000A9CC8(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, a2, &v6);
  id v4 = (std::__shared_weak_count *)v7;
  long long v5 = *(_OWORD *)(v6 + 32);
  *a3 = *(_OWORD *)(v6 + 16);
  a3[1] = v5;
  if (v4)
  {
    sub_1000147D8(v4);
  }
}

void sub_1000A9D74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000A825C(a1, 0, &v7);
  unint64_t v3 = v7;
  *(unsigned char *)a2 = *(unsigned char *)(v7 + 48);
  id v4 = (unsigned char *)(a2 + 8);
  if (*(char *)(v3 + 79) < 0)
  {
    sub_100017424(v4, *(void **)(v3 + 56), *(void *)(v3 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(v3 + 56);
    *(void *)(a2 + 24) = *(void *)(v3 + 72);
    *(_OWORD *)id v4 = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 80);
  unint64_t v6 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    sub_1000147D8(v6);
  }
}

void sub_1000A9E5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_1000A9E68(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_10008AD2C(a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1000A9ED0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A9EEC(int a1@<W1>, uint64_t a2@<X8>)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (a1 == 8)
  {
    sub_100015438(__p, "MarketErrorNoneFound");
    sub_100095C28(a2, (long long *)__p);
  }
  else if (a1 == 2)
  {
    sub_100015438(__p, "MarketErrorNetwork");
    sub_100095C28(a2, (long long *)__p);
  }
  else
  {
    if (a1) {
      return;
    }
    sub_100015438(__p, "MarketErrorNoLocation");
    sub_100095C28(a2, (long long *)__p);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000A9FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v14 + 24))
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000AA01C(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v3;
  v7[1] = v3;
  unint64_t v8 = 0xAAAAAAAAFFFFFFFFLL;
  sub_100015438(v9, "MarketErrorNoLocation");
  sub_100015438(v10, "MarketErrorNoneFound");
  sub_100015438(v11, "MarketErrorNetwork");
  sub_1000ACF08((uint64_t)v7, (unsigned __int8 *)v9, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  BOOL v5 = sub_100010388(v7, a2) != 0;
  sub_10004038C((uint64_t)v7);
  return v5;
}

void sub_1000AA124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 71) < 0) {
      operator delete(*(void **)(v15 + v17 + 48));
    }
    v17 -= 24;
    if (v17 == -72) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1000AA184(uint64_t a1, void *a2)
{
  long long v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 112))
  {
    unsigned __int32 v6 = nw_path_get_status(v3) & 0xFFFFFFFD;
    int v7 = v6 == 1;
    uint64_t v8 = *(void *)(v5 + 112);
    int v9 = *(unsigned __int8 *)(v8 + 8);
    *(unsigned char *)(v8 + 8) = v7;
    if (v9 != v7)
    {
      uint64_t v10 = qword_10015EF78;
      if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
      {
        id v11 = "satisfied";
        if (v9) {
          int v12 = "satisfied";
        }
        else {
          int v12 = "unsatisfied";
        }
        if (v6 != 1) {
          id v11 = "unsatisfied";
        }
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[LocationManager::NetworkObserver] Network changed detected (prior: %{public}s, current: %{public}s)", buf, 0x16u);
      }
      if (v6 == 1 && sub_1000A832C(v5))
      {
        v17[0] = xmmword_10011D798;
        v17[1] = unk_10011D7A8;
        sub_1000A9CC8(v5, 0, v17);
        if (!LOBYTE(v17[0]))
        {
          id v13 = qword_10015EF78;
          if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[LocationManager::NetworkObserver] Network newly satisfied and no prior location available. Restarting location timers.", buf, 2u);
          }
          sub_1000A7BF8(v5);
          sub_1000A9464(v5);
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)std::string buf = v14;
        *(_OWORD *)&uint8_t buf[16] = v14;
        sub_1000A9D74(v5, (uint64_t)buf);
        if (!buf[0])
        {
          uint64_t v15 = qword_10015EF78;
          if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long v18 = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[LocationManager::NetworkObserver] Network newly satisfied and no prior market available. Restarting market timer.", v18, 2u);
          }
          sub_1000A7C5C(v5);
          sub_1000A9594(v5);
        }
        if ((buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
      }
    }
  }
  else
  {
    uint64_t v16 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[LocationManager::NetworkObserver] Network path update handler called after network observer cancelled. Returning early.", buf, 2u);
    }
  }
}

void sub_1000AA3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id **sub_1000AA414(id **result, id *a2)
{
  unsigned int v2 = *result;
  *BOOL result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

uint64_t sub_1000AA474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AA484(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000AA538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_1000AA580((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AA580(uint64_t a1, id *a2)
{
  long long v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_1000AA6C8);
}

void sub_1000AA5E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000AA620(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  unsigned int v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1000AA6C8);
}

uint64_t sub_1000AA684(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000AA6C8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1000AA6F4(uint64_t a1)
{
  sub_1000AA730(a1, *(void **)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000AA730(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      sub_1000AA774((uint64_t)(v2 + 2));
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

void sub_1000AA774(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000147D8(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_1000AA7C8(uint64_t **a1)
{
  __int16 v29 = a1;
  uint64_t v1 = **a1;
  sub_1000A90F4(&v33);
  unsigned int v2 = v33;
  long long v3 = v34;
  if (v33 != v34)
  {
    unint64_t v22 = kCLLocationAccuracyAggressivePrecisionReduction;
    uint64_t v23 = v1 + 32;
    double v4 = kCLLocationAccuracyAggressivePrecisionReduction;
    unint64_t v28 = &qword_10015EF18;
    uint64_t v5 = v1 + 40;
    long long v26 = xmmword_10011D6E0;
    long long v27 = xmmword_10011D6D0;
    long long v25 = xmmword_10011D6F0;
    memset(v24, 170, sizeof(v24));
    do
    {
      uint64_t v6 = *v2;
      int v7 = v28[12];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = v22;
        if (v6) {
          unint64_t v8 = 0xBFF0000000000000;
        }
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[LocationManager] Initializing accuracy manager with accuracy: %f", buf, 0xCu);
      }
      *(_DWORD *)&unsigned char buf[12] = HIDWORD(v27);
      long long v37 = v26;
      long long v38 = v25;
      v39[0] = *(void **)&v24[1];
      *(void *)std::string buf = 0;
      *(_DWORD *)&uint8_t buf[8] = v6;
      LOBYTE(v37) = 0;
      HIDWORD(v38) = v6;
      LOBYTE(v39[0]) = 0;
      long long v40 = 0uLL;
      v39[1] = 0;
      unint64_t v41 = 0xAAAAAAAAFFFFFFFFLL;
      long long v42 = 0u;
      long long v43 = 0u;
      int v9 = [[CALocationDelegateProxy alloc] initWithDelegate:v23 withAccuracy:v6];
      uint64_t v10 = (void *)*((void *)&v43 + 1);
      *((void *)&v43 + 1) = v9;

      id v11 = objc_alloc((Class)CLLocationManager);
      int v12 = +[NSBundle bundleWithPath:@"/System/Library/LocationBundles/WirelessDiagnostics.bundle"];
      uint64_t v13 = *((void *)&v43 + 1);
      id v14 = &_dispatch_main_q;
      id v15 = [v11 initWithEffectiveBundle:v12 delegate:v13 onQueue:&_dispatch_main_q];
      uint64_t v16 = *(void **)buf;
      *(void *)std::string buf = v15;

      if (v6) {
        double v17 = -1.0;
      }
      else {
        double v17 = v4;
      }
      [*(id *)buf setDesiredAccuracy:v17];
      [*(id *)buf setDelegate:*((void *)&v43 + 1)];
      sub_1000AABE4((uint64_t)buf, &v32);
      if (v6) {
        long long v18 = "AccuracyUnknown";
      }
      else {
        long long v18 = "AccuracyDefault";
      }
      sub_100015438(__p, v18);
      char v35 = __p;
      uint64_t v19 = sub_1000AB1A0(v5, (unsigned __int8 *)__p, (uint64_t)&unk_100117318, (long long **)&v35);
      long long v20 = v32;
      long long v32 = 0uLL;
      uint64_t v21 = (std::__shared_weak_count *)*((void *)v19 + 6);
      *(_OWORD *)(v19 + 40) = v20;
      if (v21) {
        sub_1000147D8(v21);
      }
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v32 + 1)) {
        sub_1000147D8(*((std::__shared_weak_count **)&v32 + 1));
      }

      __p[0] = &v42;
      sub_1000AB06C((void ***)__p);
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[1]);
      }

      ++v2;
    }
    while (v2 != v3);
    unsigned int v2 = v33;
  }
  if (v2)
  {
    unint64_t v34 = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1000AAB24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a35) {
    sub_1000147D8(a35);
  }

  sub_1000AB06C((void ***)&__p);
  if (a54 < 0) {
    operator delete(a49);
  }

  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  operator delete();
}

void *sub_1000AABE4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x90uLL);
  BOOL result = sub_1000AAC40(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000AAC2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000AAC40(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100157270;
  sub_1000AAD70((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000AAC88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000AAC9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100157270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000AACBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100157270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000AAD10(uint64_t a1)
{
  char v1 = -86;
  sub_1000AB118((uint64_t)&v1, a1 + 24);
}

uint64_t sub_1000AAD70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100017424((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1000AAE58((void *)(a1 + 88), *(void ***)(a2 + 88), *(void ***)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  *(void *)(a1 + 112) = *(id *)(a2 + 112);
  return a1;
}

void sub_1000AAE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000AAE58(void *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_100067310(result, a4);
    BOOL result = sub_1000AAF10((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000AAEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_1000AB06C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1000AAF10(uint64_t a1, void **a2, void **a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  id v11 = a4;
  v12[0] = a1;
  v12[1] = &v10;
  void v12[2] = &v11;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 == a3)
  {
    int v7 = a4;
  }
  else
  {
    long long v6 = a2;
    int v7 = v11;
    do
    {
      unint64_t v8 = *v6++;
      *long long v4 = v8;
      long long v4 = ++v7;
    }
    while (v6 != a3);
    id v11 = v7;
  }
  LOBYTE(v13) = 1;
  sub_1000AAFD4((uint64_t)v12);
  return v7;
}

uint64_t sub_1000AAFD4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000AB020(*(void *)a1, **(void **)(a1 + 16), **(id ***)(a1 + 16), **(void **)(a1 + 8), **(id ***)(a1 + 8));
  }
  return a1;
}

void sub_1000AB020(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, id *a5)
{
  if (a3 != a5)
  {
    long long v6 = a3;
    do
    {
      int v7 = *--v6;
      *long long v6 = 0;
    }
    while (v6 != a5);
  }
}

void sub_1000AB06C(void ***a1)
{
  uint64_t v2 = (id **)*a1;
  if (*v2)
  {
    sub_1000AB0C0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000AB0C0(uint64_t a1, id *a2)
{
  for (uint64_t i = *(id **)(a1 + 8); i != a2; *i)
  {
    uint64_t v5 = *--i;
    id *i = 0;
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1000AB118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 88);
  sub_1000AB06C(&v3);
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
}

unsigned __int8 *sub_1000AB1A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    id v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_100014470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  double v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *double v17 = 0;
  v17[1] = v9;
  long long v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)long long v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  LOBYTE(v30) = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_1000400E0(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  long long v26 = *(void **)(*(void *)a1 + 8 * v13);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  sub_1000AB480((uint64_t)v29, 0);
  return i;
}

void sub_1000AB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000AB480((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000AB480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000AA774((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1000AB4D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000AB550((uint64_t)(a1 + 2), a1[1], (void **)a1[1], *a1, (void **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000AB550(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v16[0] = a1;
  v16[1] = &v14;
  uint64_t v16[2] = &v15;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v10 = *--v9;
      *(void *)(v7 - 8) = v10;
      uint8x8_t v11 = *v9;
      *unint64_t v9 = 0;

      uint64_t v7 = *((void *)&v15 + 1) - 8;
      *((void *)&v15 + 1) -= 8;
    }
    while (v9 != a5);
    uint64_t v12 = v15;
  }
  LOBYTE(v17) = 1;
  sub_1000AB630((uint64_t)v16);
  return v12;
}

uint64_t sub_1000AB630(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000AB668((uint64_t *)a1);
  }
  return a1;
}

void sub_1000AB668(uint64_t *a1)
{
  char v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_1000AB6E0(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1000AB6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    id v6 = *i;
    id *i = 0;

    uint64_t i = (id *)(*(void *)(a2 + 32) + 8);
  }
}

uint64_t sub_1000AB748(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000AB780(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    id v6 = *(void **)(i - 8);
    uint64_t v5 = (id *)(i - 8);
    *(void *)(a1 + 16) = v5;
    *uint64_t v5 = 0;
  }
}

void sub_1000AB7DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v9 = xmmword_10011D798;
  long long v10 = unk_10011D7A8;
  sub_1000A9CC8(v1, 0, &v9);
  uint64_t v2 = qword_10015EF78;
  if ((_BYTE)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134283777;
      *(void *)&uint8_t buf[4] = *((void *)&v9 + 1);
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[LocationManager] Requesting market with location {Lat: %{private}f, Lng: %{private}f}", buf, 0x16u);
    }
    id v3 = objc_alloc_init((Class)CLGeocoder);
    id v4 = objc_alloc((Class)CLLocation);
    id v5 = [v4 initWithLatitude:*((double *)&v9 + 1) longitude:*(double *)&v10];
    id v6 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US"];
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_1000ABA60;
    uint64_t v12 = &unk_1001572B0;
    uint64_t v13 = v1;
    [v3 reverseGeocodeLocation:v5 preferredLocale:v6 completionHandler:buf];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_100101DC8(v2);
    }
    buf[0] = 0;
    uint64_t v12 = 0;
    *(_OWORD *)&uint8_t buf[8] = 0uLL;
    LODWORD(v13) = 0;
    (*(void (**)(id *__return_ptr, uint64_t, unsigned char *))(*(void *)v1 + 32))(&v8, v1, buf);
    id v7 = v8;
    id v8 = 0;

    if (SHIBYTE(v12) < 0) {
      operator delete(*(void **)&buf[8]);
    }
  }
  operator delete();
}

void sub_1000ABA10()
{
  operator delete();
}

void sub_1000ABA60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  long long v32 = v5;
  if (!v6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v10 = v5;
    id v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v52, v51, 16, v5);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)v53;
      while (2)
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          uint64_t v16 = [v15 administrativeArea];
          BOOL v17 = v16 == 0;

          if (!v17)
          {
            uint64_t v24 = [v15 administrativeArea];

            uint64_t v12 = (void *)v24;
            goto LABEL_26;
          }
          long long v18 = [v15 subAdministrativeArea];
          BOOL v19 = v18 == 0;

          if (v19)
          {
            float v21 = [v15 locality];
            if (v21) {
              BOOL v22 = v12 == 0;
            }
            else {
              BOOL v22 = 0;
            }
            int v23 = v22;

            if (v23)
            {
              uint64_t v12 = [v15 locality];
            }
          }
          else
          {
            uint64_t v20 = [v15 subAdministrativeArea];

            uint64_t v12 = (void *)v20;
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v52 objects:v51 count:16];
        if (v11) {
          continue;
        }
        break;
      }
LABEL_26:

      if (v12)
      {
        size_t v25 = qword_10015EF78;
        if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 138477827;
          id v57 = v12;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "[LocationManager] Market successfully fetched: %{private}@", buf, 0xCu);
        }
        id v26 = v12;
        sub_100015438(v33, (char *)[v26 UTF8String]);
        v38[0] = 1;
        if (SHIBYTE(v34) < 0)
        {
          sub_100017424(&v39, v33[0], (unint64_t)v33[1]);
        }
        else
        {
          long long v39 = *(_OWORD *)v33;
          uint64_t v40 = v34;
        }
        (*(void (**)(id *__return_ptr, uint64_t, char *))(*(void *)v7 + 32))(&v35, v7, v38);
        id v30 = v35;
        id v35 = 0;

        if (SHIBYTE(v40) < 0) {
          operator delete((void *)v39);
        }
        if ((SHIBYTE(v34) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        __int16 v29 = v33[0];
        goto LABEL_42;
      }
    }
    else
    {
    }
    unint64_t v27 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_100101E4C(v27);
    }
    v41[0] = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    long long v42 = 0;
    int v45 = 8;
    (*(void (**)(id *__return_ptr, uint64_t, unsigned char *))(*(void *)v7 + 32))(&v36, v7, v41);
    id v28 = v36;
    id v36 = 0;

    if ((SHIBYTE(v44) & 0x80000000) == 0)
    {
      id v26 = 0;
LABEL_43:

      goto LABEL_44;
    }
    id v26 = 0;
    __int16 v29 = v42;
LABEL_42:
    operator delete(v29);
    goto LABEL_43;
  }
  id v8 = (id)qword_10015EF78;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v6, "localizedDescription", v5);
    id v31 = objc_claimAutoreleasedReturnValue();
    *(_DWORD *)std::string buf = 136315138;
    id v57 = [v31 UTF8String];
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[LocationManager] Encountered error while querying market: %s", buf, 0xCu);
  }
  v46[0] = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::string __p = 0;
  unsigned int v50 = [v6 code];
  (*(void (**)(id *__return_ptr, uint64_t, unsigned char *))(*(void *)v7 + 32))(&v37, v7, v46);
  id v9 = v37;
  id v37 = 0;

  if (SHIBYTE(v49) < 0) {
    operator delete(__p);
  }
LABEL_44:
}

void sub_1000ABED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_1000ABF40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(void *)v1;
  v25[0] = *(unsigned char *)(v1 + 8);
  if (*(char *)(v1 + 39) < 0)
  {
    sub_100017424(&__p, *(void **)(v1 + 16), *(void *)(v1 + 24));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 16);
    uint64_t v27 = *(void *)(v1 + 32);
    long long __p = v3;
  }
  int v28 = *(_DWORD *)(v1 + 40);
  sub_1000A92D0(v2, (uint64_t)v25);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  if (!*(unsigned char *)(v1 + 8))
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v5 = *(void *)(v2 + 96);
    sub_100015438(&v29, "market");
    LOBYTE(v20) = 0;
    float v21 = 0;
    sub_100016EAC((uint64_t)&v20);
    sub_100016EAC((uint64_t)&v20);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, long long *, void **))(*(void *)v5 + 16))(&v18, v5, &v29, &v20);
    sub_100016EAC((uint64_t)&v20);
    sub_100016B28(&v21, v20);
    if (SBYTE7(v30) < 0) {
      operator delete((void *)v29);
    }
    uint64_t v16 = "market";
    unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v29 = v6;
    long long v30 = v6;
    sub_1000135DC((uint64_t)&v18, &v16, (uint64_t)&v29);
    uint64_t v20 = &v18;
    float v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v20);
    if (sub_100013964((unsigned __int8 **)&v29, (unsigned __int8 **)&v20))
    {
      uint64_t v7 = sub_1000155C8();
      if (!v7) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v29);
    }
    if (*(unsigned char *)v7 == 3)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          if (!*(void *)(v8 + 8)) {
            goto LABEL_22;
          }
        }
        else if (!*(unsigned char *)(v8 + 23))
        {
          goto LABEL_22;
        }
        if (!sub_1000AA01C(v7, (unsigned __int8 *)v8))
        {
LABEL_28:
          sub_100016EAC((uint64_t)&v18);
          sub_100016B28(&v19, v18);
          goto LABEL_29;
        }
      }
    }
LABEL_22:
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v29 = v9;
    long long v30 = v9;
    sub_1000A9EEC(*(_DWORD *)(v1 + 40), (uint64_t)&v29);
    if (BYTE8(v30))
    {
      uint64_t v10 = *(void *)(v2 + 96);
      sub_100015438(&v20, "market");
      LOBYTE(v16) = 0;
      BOOL v17 = 0;
      sub_100016EAC((uint64_t)&v16);
      sub_100016EAC((uint64_t)&v16);
      sub_1000168C0((uint64_t)v14, (uint64_t)&v29);
      (*(void (**)(uint64_t, void **, const std::string::value_type **, unsigned char *, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, &v20, &v16, v14, 86400, 1);
      sub_100016EAC((uint64_t)v14);
      sub_100016B28(&v15, v14[0]);
      sub_100016EAC((uint64_t)&v16);
      sub_100016B28(&v17, v16);
      if (SHIBYTE(v22) < 0) {
        operator delete(v20);
      }
      if (BYTE8(v30) && SBYTE7(v30) < 0) {
        operator delete((void *)v29);
      }
    }
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)(v2 + 96);
  sub_100015438(&v29, "market");
  LOBYTE(v20) = 0;
  float v21 = 0;
  sub_100016EAC((uint64_t)&v20);
  sub_100016EAC((uint64_t)&v20);
  sub_1000168C0((uint64_t)&v18, v1 + 16);
  (*(void (**)(uint64_t, long long *, void **, unint64_t *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, &v29, &v20, &v18, 86400, 1);
  sub_100016EAC((uint64_t)&v18);
  sub_100016B28(&v19, v18);
  sub_100016EAC((uint64_t)&v20);
  sub_100016B28(&v21, v20);
  if (SBYTE7(v30) < 0) {
    operator delete((void *)v29);
  }
LABEL_29:
  sub_1000AC428(&v13);
  return sub_100024E7C((uint64_t *)&v12);
}

void sub_1000AC31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t *sub_1000AC428(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 48));
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1000AC488(uint64_t *a1)
{
  uint64_t v1 = *a1;
  float v21 = a1;
  uint64_t v22 = v1;
  uint64_t v2 = *(void *)v1;
  long long v3 = *(_OWORD *)(v1 + 24);
  v30[0] = *(_OWORD *)(v1 + 8);
  v30[1] = v3;
  sub_1000A91EC(v2, (uint64_t)v30);
  uint64_t v4 = *(void *)(v2 + 96);
  if (*(unsigned char *)(v1 + 8))
  {
    sub_100015438(v44, off_10015E938);
    LOBYTE(v37) = 0;
    long long v38 = 0;
    sub_100016EAC((uint64_t)&v37);
    sub_100016EAC((uint64_t)&v37);
    uint64_t v5 = *(uint64_t **)(v1 + 16);
    v31[0] = 7;
    v32[0] = v5;
    sub_100016EAC((uint64_t)v31);
    sub_100016EAC((uint64_t)v31);
    (*(void (**)(uint64_t, void **, void **, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v44, &v37, v31, 1800, 1);
    sub_100016EAC((uint64_t)v31);
    sub_100016B28(v32, v31[0]);
    sub_100016EAC((uint64_t)&v37);
    sub_100016B28(&v38, v37);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    uint64_t v6 = *(void *)(v2 + 96);
    sub_100015438(v44, off_10015E940);
    LOBYTE(v37) = 0;
    long long v38 = 0;
    sub_100016EAC((uint64_t)&v37);
    sub_100016EAC((uint64_t)&v37);
    uint64_t v7 = *(uint64_t **)(v1 + 24);
    v31[0] = 7;
    v32[0] = v7;
    sub_100016EAC((uint64_t)v31);
    sub_100016EAC((uint64_t)v31);
    (*(void (**)(uint64_t, void **, void **, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v44, &v37, v31, 1800, 1);
    sub_100016EAC((uint64_t)v31);
    sub_100016B28(v32, v31[0]);
    sub_100016EAC((uint64_t)&v37);
    sub_100016B28(&v38, v37);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    uint64_t v8 = *(void *)(v2 + 96);
    sub_100015438(&__p, "location");
    v25[0] = 0;
    id v26 = 0;
    sub_100016EAC((uint64_t)v25);
    sub_100016EAC((uint64_t)v25);
    sub_100030238((uint64_t)&v37, &off_10015E938);
    long long v39 = &v37;
    char v40 = 1;
    uint64_t v9 = *(void *)(v1 + 16);
    v41[0] = 7;
    v42[0] = v9;
    sub_100016EAC((uint64_t)v41);
    sub_100016EAC((uint64_t)v41);
    v42[1] = v41;
    char v43 = 1;
    sub_10001200C((uint64_t)v44, (uint64_t)&v37, 2, 1, 2);
    int v45 = v44;
    char v46 = 1;
    sub_100030238((uint64_t)v31, &off_10015E940);
    v32[1] = (uint64_t *)v31;
    char v33 = 1;
    uint64_t v10 = *(void *)(v1 + 24);
    v34[0] = 7;
    v35[0] = v10;
    sub_100016EAC((uint64_t)v34);
    sub_100016EAC((uint64_t)v34);
    v35[1] = v34;
    char v36 = 1;
    sub_10001200C((uint64_t)v47, (uint64_t)v31, 2, 1, 2);
    uint64_t v48 = v47;
    char v49 = 1;
    sub_10001200C((uint64_t)v23, (uint64_t)v44, 2, 1, 2);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, &__p, v25, v23, 1800, 1);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(&v24, v23[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      sub_100016EAC((uint64_t)&v47[i]);
      sub_100016B28((uint64_t **)&v47[i + 8], v47[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      sub_100016EAC((uint64_t)&v34[j * 8]);
      sub_100016B28((uint64_t **)&v35[j], v34[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      sub_100016EAC((uint64_t)&v41[k * 8]);
      sub_100016B28((uint64_t **)&v42[k], v41[k * 8]);
    }
    sub_100016EAC((uint64_t)v25);
    sub_100016B28(&v26, v25[0]);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (!*(_DWORD *)(v1 + 36))
    {
      uint64_t v14 = *(void *)(v2 + 96);
      sub_100015438(v44, "signalEnvironment");
      v31[0] = 0;
      v32[0] = 0;
      sub_100016EAC((uint64_t)v31);
      sub_100016EAC((uint64_t)v31);
      unint64_t v15 = *(char *)(v1 + 32);
      if (v15 > 6) {
        uint64_t v16 = "UnknownEnvironment";
      }
      else {
        uint64_t v16 = off_1001572F8[v15];
      }
      sub_100015438(&v37, v16);
      sub_10001C898((uint64_t)&__p, (uint64_t)&v37);
      (*(void (**)(uint64_t, void **, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, v44, v31, &__p, 1800, 1);
      sub_100016EAC((uint64_t)&__p);
      sub_100016B28(&v28, __p);
      if (SHIBYTE(v39) < 0) {
        operator delete(v37);
      }
      sub_100016EAC((uint64_t)v31);
      sub_100016B28(v32, v31[0]);
      goto LABEL_29;
    }
  }
  else
  {
    sub_100015438(v44, off_10015E938);
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, v44);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    uint64_t v17 = *(void *)(v2 + 96);
    sub_100015438(v44, off_10015E940);
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, v44);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    uint64_t v18 = *(void *)(v2 + 96);
    sub_100015438(v44, "location");
    (*(void (**)(uint64_t, void **))(*(void *)v18 + 32))(v18, v44);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (!*(_DWORD *)(v1 + 36))
    {
      uint64_t v19 = *(void *)(v2 + 96);
      sub_100015438(v44, "signalEnvironment");
      (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, v44);
LABEL_29:
      if (SHIBYTE(v45) < 0) {
        operator delete(v44[0]);
      }
    }
  }
  sub_1000A99A0(v2, *(unsigned int *)(v1 + 36));
  sub_1000ACD2C(&v22);
  return sub_100024E7C((uint64_t *)&v21);
}

void sub_1000ACB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 113) < 0) {
    operator delete(*(void **)(v42 - 136));
  }
  sub_1000ACD2C(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000ACD2C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 40));
    operator delete();
  }
  return result;
}

uint64_t *sub_1000ACD7C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = (id **)*v1;
  sub_1000A8784(*v1);
  sub_1000A85D0((uint64_t)v2);
  if (sub_1000A832C((uint64_t)v2))
  {
    sub_1000A93A4((uint64_t)v2);
  }
  else
  {
    sub_1000A989C(v2);
    sub_1000A8E14((uint64_t)v2);
  }
  sub_1000ACE3C((uint64_t *)&v5);
  return sub_100024E7C((uint64_t *)&v4);
}

void sub_1000ACE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000ACE3C((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000ACE3C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_1000ACE8C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10008AD2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000ACEEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ACF08(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_10003FD50(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1000ACF70(_Unwind_Exception *a1)
{
  sub_10004038C(v1);
  _Unwind_Resume(a1);
}

void sub_1000ACF84(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000ACFA0(void *a1)
{
  id v1 = a1;
  if (objc_opt_class())
  {
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2020000000;
    int v46 = 0;
    uint64_t v39 = 0;
    char v40 = &v39;
    uint64_t v41 = 0x2020000000;
    int v42 = 0;
    uint64_t v2 = +[TRIAllocationStatus defaultProvider];
    uint64_t v3 = +[OSASystemConfiguration sharedInstance];
    uint64_t v4 = [v3 crashReporterKey];
    id v38 = 0;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    void v35[2] = sub_1000AD4C0;
    v35[3] = &unk_100157338;
    id v5 = v1;
    id v36 = v5;
    id v37 = &v39;
    unsigned __int8 v6 = [v2 enumerateSampledActiveExperimentsForEnvironment:0 correlationID:v4 error:&v38 block:v35];
    id v7 = v38;

    if ((v6 & 1) == 0)
    {
      size_t v8 = (id)qword_10015EF18;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = [v7 localizedDescription];
        sub_100101F28(v9, v48, v8);
      }
    }
    uint64_t v10 = +[OSASystemConfiguration sharedInstance];
    id v11 = [v10 crashReporterKey];
    id v34 = v7;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    void v31[2] = sub_1000AD7FC;
    v31[3] = &unk_100157360;
    id v12 = v5;
    id v32 = v12;
    char v33 = &v43;
    unsigned __int8 v13 = [v2 enumerateSampledActiveRolloutsForCorrelationID:v11 error:&v34 block:v31];
    id v14 = v34;

    if ((v13 & 1) == 0)
    {
      unint64_t v15 = (id)qword_10015EF18;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = [v14 localizedDescription];
        sub_100101ED0(v16, buf, v15);
      }
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAA00;
    long long v30 = 0;
    sub_100016EAC((uint64_t)&v29);
    sub_100016EAC((uint64_t)&v29);
    uint64_t v17 = (uint64_t *)*((unsigned int *)v40 + 6);
    v27[0] = 6;
    int v28 = v17;
    sub_100016EAC((uint64_t)v27);
    sub_100016EAC((uint64_t)v27);
    uint64_t v18 = sub_10000D104((unsigned __int8 *)&v29, "num_experiments");
    sub_100016EAC((uint64_t)v27);
    unsigned __int8 v19 = *(unsigned char *)v18;
    *(unsigned char *)uint64_t v18 = v27[0];
    v27[0] = v19;
    uint64_t v20 = (uint64_t *)v18[1];
    v18[1] = (uint64_t)v28;
    int v28 = v20;
    sub_100016EAC((uint64_t)v18);
    sub_100016EAC((uint64_t)v27);
    sub_100016B28(&v28, v27[0]);
    float v21 = (uint64_t *)*((unsigned int *)v44 + 6);
    v25[0] = 6;
    id v26 = v21;
    sub_100016EAC((uint64_t)v25);
    sub_100016EAC((uint64_t)v25);
    uint64_t v22 = sub_10000D104((unsigned __int8 *)&v29, "num_rollouts");
    sub_100016EAC((uint64_t)v25);
    unsigned __int8 v23 = *(unsigned char *)v22;
    *(unsigned char *)uint64_t v22 = v25[0];
    v25[0] = v23;
    unint64_t v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v26;
    id v26 = v24;
    sub_100016EAC((uint64_t)v22);
    sub_100016EAC((uint64_t)v25);
    sub_100016B28(&v26, v25[0]);
    (*((void (**)(id, const char *, unint64_t *))v12 + 2))(v12, "com.apple.com.apple.trial.identifiers-counts", &v29);
    sub_1000B3608(*((_DWORD *)v44 + 6), *((_DWORD *)v40 + 6));
    sub_100016EAC((uint64_t)&v29);
    sub_100016B28(&v30, v29);

    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v43, 8);
  }
}

void sub_1000AD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_1000AD4C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v24 = 0xAAAAAAAAAAAAAA00;
  size_t v25 = 0;
  sub_100016EAC((uint64_t)&v24);
  sub_100016EAC((uint64_t)&v24);
  id v4 = [v3 experimentId];
  float v21 = (char *)[v4 UTF8String];
  sub_100030238((uint64_t)v22, &v21);
  id v5 = sub_10000D104((unsigned __int8 *)&v24, "experimentId");
  sub_100016EAC((uint64_t)v22);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)id v5 = v22[0];
  v22[0] = v6;
  id v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v23;
  unsigned __int8 v23 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v22);
  sub_100016B28(&v23, v22[0]);

  v19[0] = 5;
  uint64_t v20 = (uint64_t *)(int)[v3 deploymentId];
  sub_100016EAC((uint64_t)v19);
  sub_100016EAC((uint64_t)v19);
  size_t v8 = sub_10000D104((unsigned __int8 *)&v24, "deploymentId");
  uint64_t v9 = &v20;
  sub_100016EAC((uint64_t)v19);
  unsigned __int8 v10 = *(unsigned char *)v8;
  *(unsigned char *)size_t v8 = v19[0];
  v19[0] = v10;
  id v11 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v20;
  uint64_t v20 = v11;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v19);
  sub_100016B28(&v20, v19[0]);
  id v12 = [v3 treatmentId];
  if (v12)
  {
    uint64_t v9 = [v3 treatmentId];
    unsigned __int8 v13 = (char *)[v9 UTF8String];
  }
  else
  {
    unsigned __int8 v13 = "<unknown>";
  }
  float v21 = v13;
  sub_100030238((uint64_t)v17, &v21);
  id v14 = sub_10000D104((unsigned __int8 *)&v24, "treatmentId");
  sub_100016EAC((uint64_t)v17);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)id v14 = v17[0];
  v17[0] = v15;
  uint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v18;
  uint64_t v18 = v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  if (v12) {

  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  sub_100016EAC((uint64_t)&v24);
  sub_100016B28(&v25, v24);
}

void sub_1000AD76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000AD7FC(uint64_t a1, void *a2)
{
  id v2 = a2;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v3 = [v2 factorPackIds];
  id v4 = [v3 allValues];

  obuint64_t j = v4;
  id v5 = [v4 countByEnumeratingWithState:&v32 objects:v31 count:16];
  if (v5)
  {
    uint64_t v20 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v20) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        unint64_t v29 = 0xAAAAAAAAAAAAAA00;
        long long v30 = 0;
        sub_100016EAC((uint64_t)&v29);
        sub_100016EAC((uint64_t)&v29);
        id v8 = [v2 rolloutId];
        id v26 = (char *)[v8 UTF8String];
        sub_100030238((uint64_t)v27, &v26);
        uint64_t v9 = sub_10000D104((unsigned __int8 *)&v29, "rolloutId");
        sub_100016EAC((uint64_t)v27);
        char v10 = *(unsigned char *)v9;
        *(unsigned char *)uint64_t v9 = v27[0];
        v27[0] = v10;
        id v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v28;
        int v28 = v11;
        sub_100016EAC((uint64_t)v9);
        sub_100016EAC((uint64_t)v27);
        sub_100016B28(&v28, v27[0]);

        signed int v12 = [v2 deploymentId];
        v24[0] = 5;
        size_t v25 = (uint64_t *)v12;
        sub_100016EAC((uint64_t)v24);
        sub_100016EAC((uint64_t)v24);
        unsigned __int8 v13 = sub_10000D104((unsigned __int8 *)&v29, "deploymentId");
        sub_100016EAC((uint64_t)v24);
        unsigned __int8 v14 = *(unsigned char *)v13;
        *(unsigned char *)unsigned __int8 v13 = v24[0];
        v24[0] = v14;
        char v15 = (uint64_t *)v13[1];
        v13[1] = (uint64_t)v25;
        size_t v25 = v15;
        sub_100016EAC((uint64_t)v13);
        sub_100016EAC((uint64_t)v24);
        sub_100016B28(&v25, v24[0]);
        id v26 = (char *)[v7 UTF8String];
        sub_100030238((uint64_t)v22, &v26);
        uint64_t v16 = sub_10000D104((unsigned __int8 *)&v29, "factorPackId");
        sub_100016EAC((uint64_t)v22);
        char v17 = *(unsigned char *)v16;
        *(unsigned char *)uint64_t v16 = v22[0];
        v22[0] = v17;
        uint64_t v18 = (uint64_t *)v16[1];
        v16[1] = (uint64_t)v23;
        unsigned __int8 v23 = v18;
        sub_100016EAC((uint64_t)v16);
        sub_100016EAC((uint64_t)v22);
        sub_100016B28(&v23, v22[0]);
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        sub_100016EAC((uint64_t)&v29);
        sub_100016B28(&v30, v29);
      }
      id v5 = [obj countByEnumeratingWithState:&v32 objects:v31 count:16];
    }
    while (v5);
  }

  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1000ADB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000ADBC8()
{
}

void sub_1000ADC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000ADCBC(uint64_t a1, uint64_t a2)
{
  id v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v5 = dispatch_queue_create("analyticsd.NetworkingStateResolverQueue", v4);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;

  *(void *)a1 = off_100157390;
  *(void *)(a1 + 32) = off_100157430;
  *(void *)(a1 + 40) = off_100157458;
  *(void *)(a1 + 48) = off_100157488;
  *(void *)(a1 + 56) = off_1001574F8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  operator new();
}

void sub_1000ADDF0(_Unwind_Exception *a1)
{
  id v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    sub_1000147D8(v4);
  }
  sub_1000296A4(v2);
  _Unwind_Resume(a1);
}

void sub_1000ADE10(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000ADF24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000ADF3C(char **a1@<X8>)
{
  if (byte_10015EECF < 0)
  {
    sub_100017424(&__dst, (void *)xmmword_10015EEB8, *((unint64_t *)&xmmword_10015EEB8 + 1));
  }
  else
  {
    long long __dst = xmmword_10015EEB8;
    uint64_t v5 = unk_10015EEC8;
  }
  if (byte_10015EEE7 < 0)
  {
    sub_100017424(&v6, (void *)xmmword_10015EED0, *((unint64_t *)&xmmword_10015EED0 + 1));
  }
  else
  {
    long long v6 = xmmword_10015EED0;
    uint64_t v7 = unk_10015EEE0;
  }
  if (byte_10015EEFF < 0)
  {
    sub_100017424(&v8, (void *)xmmword_10015EEE8, *((unint64_t *)&xmmword_10015EEE8 + 1));
  }
  else
  {
    long long v8 = xmmword_10015EEE8;
    uint64_t v9 = unk_10015EEF8;
  }
  if (byte_10015EF17 < 0)
  {
    sub_100017424(&v10, (void *)xmmword_10015EF00, *((unint64_t *)&xmmword_10015EF00 + 1));
  }
  else
  {
    long long v10 = xmmword_10015EF00;
    uint64_t v11 = unk_10015EF10;
  }
  sub_100015438(v12, "cellularRAT");
  sub_100015438(v13, "cellularSignalBars");
  sub_100015438(v14, "cellularLQM");
  sub_100015438(v15, "cellularHighThroughput");
  sub_100015438(v16, "subscriberCarrierName");
  sub_100015438(v17, "subscriberCarrierBundleVersion");
  sub_100015438(v18, "subscriberCarrierCountry");
  sub_100015438(v19, "servingCarrierName");
  sub_100015438(v20, "isDualSim");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x138uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 312;
  a1[1] = sub_100037BCC((uint64_t)(a1 + 2), &__dst, &v21, v2);
  uint64_t v3 = 312;
  do
  {
    if (*((char *)&__dst + v3 - 1) < 0) {
      operator delete(*(void **)((char *)&__dst + v3 - 24));
    }
    v3 -= 24;
  }
  while (v3);
}

void sub_1000AE1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1000AE244(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v7[3] = a1;
  sub_10007FD94((uint64_t)&__p, a2);
  dispatch_group_t group = v6;
  if (group) {
    dispatch_group_enter(group);
  }
  v7[0] = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v7, (void *)(a1 + 8));
  operator new();
}

void sub_1000AE414(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AE444(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AE44C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000AE5B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AE5D0(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000AE5DC(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AE7BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AE7D4(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AE7DC(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AE9BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AE9D4(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AE9DC(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AEBBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AEBD4(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AEBDC(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000AED48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AED60(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000AED6C(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AEF4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AEF64(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AEF6C(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AF14C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AF164(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AF16C(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AF34C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AF364(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AF36C(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AF54C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AF564(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AF56C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000AF6D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AF6F0(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000AF6FC(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
  dispatch_group_t v6 = dispatch_group_create();
  *a3 = v6;
  void v8[3] = a1;
  LOBYTE(__p) = 0;
  char v11 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v11 = 1;
  }
  uint64_t v7 = v6;
  signed int v12 = v7;
  if (v7) {
    dispatch_group_enter(v7);
  }
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v8, (void *)(a1 + 8));
  operator new();
}

void sub_1000AF8DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AF8F4(uint64_t a1@<X0>, long long *a2@<X1>, dispatch_group_t *a3@<X8>)
{
}

void sub_1000AF8FC(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000AFA68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AFA80(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void sub_1000AFA8C(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
  dispatch_group_t v4 = dispatch_group_create();
  *a2 = v4;
  uint64_t v5 = v4;
  if (v5) {
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000AFBF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000AFC10(uint64_t a1@<X0>, dispatch_group_t *a2@<X8>)
{
}

void *sub_1000AFC1C(void *a1)
{
  *a1 = off_100157390;
  a1[4] = off_100157430;
  a1[5] = off_100157458;
  a1[6] = off_100157488;
  a1[7] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[10];
  uint64_t v2 = a1 + 10;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[9];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1000AFD00(void *a1)
{
  *a1 = off_100157390;
  a1[4] = off_100157430;
  a1[5] = off_100157458;
  a1[6] = off_100157488;
  a1[7] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[10];
  uint64_t v2 = a1 + 10;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[9];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 + 1));

  operator delete();
}

uint64_t sub_1000AFE04(void *a1)
{
  *(a1 - 4) = off_100157390;
  *a1 = off_100157430;
  a1[1] = off_100157458;
  a1[2] = off_100157488;
  a1[3] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[6];
  uint64_t v2 = a1 + 6;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    sub_1000147D8(v5);
  }

  return sub_1000296A4((uint64_t)(a1 - 3));
}

void sub_1000AFEF0(void *a1)
{
  *(a1 - 4) = off_100157390;
  *a1 = off_100157430;
  a1[1] = off_100157458;
  a1[2] = off_100157488;
  a1[3] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[6];
  uint64_t v2 = a1 + 6;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 - 3));

  operator delete();
}

uint64_t sub_1000AFFF4(void *a1)
{
  *(a1 - 5) = off_100157390;
  *(a1 - 1) = off_100157430;
  *a1 = off_100157458;
  a1[1] = off_100157488;
  a1[2] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[5];
  uint64_t v2 = a1 + 5;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_1000147D8(v5);
  }

  return sub_1000296A4((uint64_t)(a1 - 4));
}

void sub_1000B00E0(void *a1)
{
  *(a1 - 5) = off_100157390;
  *(a1 - 1) = off_100157430;
  *a1 = off_100157458;
  a1[1] = off_100157488;
  a1[2] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[5];
  uint64_t v2 = a1 + 5;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 - 4));

  operator delete();
}

uint64_t sub_1000B01E4(void *a1)
{
  *(a1 - 6) = off_100157390;
  *(a1 - 2) = off_100157430;
  *(a1 - 1) = off_100157458;
  *a1 = off_100157488;
  a1[1] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[4];
  uint64_t v2 = a1 + 4;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    sub_1000147D8(v5);
  }

  return sub_1000296A4((uint64_t)(a1 - 5));
}

void sub_1000B02D0(void *a1)
{
  *(a1 - 6) = off_100157390;
  *(a1 - 2) = off_100157430;
  *(a1 - 1) = off_100157458;
  *a1 = off_100157488;
  a1[1] = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[4];
  uint64_t v2 = a1 + 4;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 - 5));

  operator delete();
}

uint64_t sub_1000B03D4(void *a1)
{
  *(a1 - 7) = off_100157390;
  *(a1 - 3) = off_100157430;
  *(a1 - 2) = off_100157458;
  *(a1 - 1) = off_100157488;
  *a1 = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[3];
  uint64_t v2 = a1 + 3;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1000147D8(v5);
  }

  return sub_1000296A4((uint64_t)(a1 - 6));
}

void sub_1000B04C0(void *a1)
{
  *(a1 - 7) = off_100157390;
  *(a1 - 3) = off_100157430;
  *(a1 - 2) = off_100157458;
  *(a1 - 1) = off_100157488;
  *a1 = off_1001574F8;
  dispatch_group_t v4 = (id *)a1[3];
  uint64_t v2 = a1 + 3;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1000B05C4((uint64_t)v2, v3);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 - 6));

  operator delete();
}

void sub_1000B05C4(uint64_t a1, id *a2)
{
  if (a2)
  {

    operator delete();
  }
}

void sub_1000B0630(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000B06E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_1000B072C((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B072C(uint64_t a1, id *a2)
{
  uint64_t v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_1000B0874);
}

void sub_1000B0794(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000B07CC(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  uint64_t v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1000B0874);
}

uint64_t sub_1000B0830(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000B0874(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1000B08A0(uint64_t **a1)
{
  char v15 = a1;
  uint64_t v1 = **a1;
  uint64_t v2 = *(void **)(v1 + 80);
  if (!v2[1])
  {
    uint64_t v3 = -[WiFiStateRelay initWithMonitoring:]([WiFiStateRelay alloc], "initWithMonitoring:", v1 + 40, v15);
    uint64_t v4 = *(void *)(v1 + 80);
    uint64_t v5 = *(void **)(v4 + 8);
    *(void *)(v4 + 8) = v3;

    uint64_t v2 = *(void **)(v1 + 80);
  }
  if (!v2[3])
  {
    dispatch_group_t v6 = [[WirelessTrialStateRelay alloc] initWithMonitoring:v1 + 56];
    uint64_t v7 = *(void *)(v1 + 80);
    long long v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = v6;

    uint64_t v2 = *(void **)(v1 + 80);
  }
  if (!v2[2])
  {
    uint64_t v9 = [[TelephonyStateRelay alloc] initWithMonitoring:v1 + 48];
    uint64_t v10 = *(void *)(v1 + 80);
    char v11 = *(void **)(v10 + 16);
    *(void *)(v10 + 16) = v9;

    uint64_t v2 = *(void **)(v1 + 80);
  }
  if (!*v2)
  {
    signed int v12 = [[NetworkStateRelay alloc] initWithMonitoring:v1 + 32 withWiFiStateRelay:*(void *)(*(void *)(v1 + 80) + 8) withTelephonyStateRelay:*(void *)(*(void *)(v1 + 80) + 16)];
    unsigned __int8 v13 = *(void ***)(v1 + 80);
    unsigned __int8 v14 = *v13;
    uint64_t *v13 = v12;
  }
  operator delete();
}

void sub_1000B09E4()
{
}

uint64_t *sub_1000B0A10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100101F80();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    v9[0] = 0;
    uint64_t v10 = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    sub_1000168C0((uint64_t)v7, v1 + 8);
    (*(void (**)(uint64_t, long long *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, &xmmword_10015EEB8, v9, v7, -1, 1);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  else
  {
    (*(void (**)(void, long long *))(**(void **)(v2 + 64) + 32))(*(void *)(v2 + 64), &xmmword_10015EEB8);
  }
  sub_1000B0BEC(&v6);
  return sub_100024E7C((uint64_t *)&v5);
}

void sub_1000B0B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t *sub_1000B0BEC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 40));
    if (*(unsigned char *)(v1 + 32))
    {
      if (*(char *)(v1 + 31) < 0) {
        operator delete(*(void **)(v1 + 8));
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1000B0C54(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 9))
  {
    uint64_t v3 = (char *)(v1 + 8);
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100101FF0();
    }
    uint64_t v4 = *(void *)(v2 + 64);
    v11[0] = 0;
    signed int v12 = 0;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v11);
    uint64_t v5 = (uint64_t *)*v3;
    v9[0] = 5;
    uint64_t v10 = v5;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    (*(void (**)(uint64_t, long long *, unsigned char *, unsigned __int8 *, uint64_t, void))(*(void *)v4 + 24))(v4, &xmmword_10015EEE8, v11, v9, -1, 0);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
    sub_100016EAC((uint64_t)v11);
    sub_100016B28(&v12, v11[0]);
  }
  else
  {
    (*(void (**)(void, long long *))(**(void **)(v2 + 64) + 32))(*(void *)(v2 + 64), &xmmword_10015EEE8);
  }
  sub_1000B0E3C(&v8);
  return sub_100024E7C((uint64_t *)&v7);
}

void sub_1000B0DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t *sub_1000B0E3C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1000B0E8C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_10010205C();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    v9[0] = 0;
    uint64_t v10 = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    sub_1000168C0((uint64_t)v7, v1 + 8);
    (*(void (**)(uint64_t, long long *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, &xmmword_10015EED0, v9, v7, -1, 1);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  else
  {
    (*(void (**)(void, long long *))(**(void **)(v2 + 64) + 32))(*(void *)(v2 + 64), &xmmword_10015EED0);
  }
  sub_1000B0BEC(&v6);
  return sub_100024E7C((uint64_t *)&v5);
}

void sub_1000B100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t *sub_1000B1068(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1001020CC();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    v9[0] = 0;
    uint64_t v10 = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    sub_1000168C0((uint64_t)v7, v1 + 8);
    (*(void (**)(uint64_t, long long *, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v3 + 24))(v3, &xmmword_10015EF00, v9, v7, -1, 0);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  else
  {
    (*(void (**)(void, long long *))(**(void **)(v2 + 64) + 32))(*(void *)(v2 + 64), &xmmword_10015EF00);
  }
  sub_1000B0BEC(&v6);
  return sub_100024E7C((uint64_t *)&v5);
}

void sub_1000B11E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
}

uint64_t *sub_1000B1244(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_10010213C();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularRAT");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 0);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularRAT");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B13F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B1464(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 9))
  {
    uint64_t v3 = (char *)(v1 + 8);
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1001021AC();
    }
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularSignalBars");
    v12[0] = 0;
    char v13 = 0;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    uint64_t v5 = (uint64_t *)*v3;
    v10[0] = 5;
    char v11 = v5;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, void))(*(void *)v4 + 24))(v4, __p, v12, v10, -1, 0);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularSignalBars");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0E3C(&v9);
  return sub_100024E7C((uint64_t *)&v8);
}

void sub_1000B1624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B1690(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100102218();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierName");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 1);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierName");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B18B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100102288();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierBundleVersion");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 1);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierBundleVersion");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B1A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B1AD0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1001022F8();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierCountry");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 1);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "subscriberCarrierCountry");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B1CF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100102368();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "servingCarrierName");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 0);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "servingCarrierName");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B1E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B1F10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 9))
  {
    uint64_t v3 = (unsigned __int8 *)(v1 + 8);
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1001023D8();
    }
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "isDualSim");
    v12[0] = 0;
    char v13 = 0;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    uint64_t v5 = (uint64_t *)*v3;
    v10[0] = 4;
    char v11 = v5;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, __p, v12, v10, -1, 1);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    sub_100015438(__p, "isDualSim");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0E3C(&v9);
  return sub_100024E7C((uint64_t *)&v8);
}

void sub_1000B20D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B213C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_100102444();
    }
    uint64_t v3 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularInternetConnection");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_1000168C0((uint64_t)v8, v1 + 8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 1);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 64);
    sub_100015438(__p, "cellularInternetConnection");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0BEC(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B22E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_1000B235C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1001024B4();
  }
  uint64_t v3 = *(void *)(v2 + 64);
  if (*(unsigned char *)(v1 + 9))
  {
    sub_100015438(__p, "cellularLQM");
    v10[0] = 0;
    char v11 = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    uint64_t v4 = (uint64_t *)*(char *)(v1 + 8);
    v8[0] = 5;
    uint64_t v9 = v4;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, void))(*(void *)v3 + 24))(v3, __p, v10, v8, -1, 0);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
  else
  {
    sub_100015438(__p, "cellularLQM");
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0E3C(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000B2514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1000B0E3C(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000B2580(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_100102520(v1, v3);
  }
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(unsigned char *)(v1 + 9))
  {
    sub_100015438(__p, "cellularHighThroughput");
    v11[0] = 0;
    signed int v12 = 0;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v11);
    uint64_t v5 = (uint64_t *)*(unsigned __int8 *)(v1 + 8);
    v9[0] = 4;
    uint64_t v10 = v5;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, __p, v11, v9, -1, 1);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
    sub_100016EAC((uint64_t)v11);
    sub_100016B28(&v12, v11[0]);
  }
  else
  {
    sub_100015438(__p, "cellularHighThroughput");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B0E3C(&v8);
  return sub_100024E7C((uint64_t *)&v7);
}

void sub_1000B2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1000B0E3C(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

void sub_1000B27A4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xCu);
}

void sub_1000B27D0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000B27DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_1000B2804()
{
  sub_100015438(&xmmword_10015EEB8, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10015EEB8, (void *)&_mh_execute_header);
  sub_100015438(&xmmword_10015EED0, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10015EED0, (void *)&_mh_execute_header);
  sub_100015438(&xmmword_10015EEE8, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10015EEE8, (void *)&_mh_execute_header);
  sub_100015438(&xmmword_10015EF00, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10015EF00, (void *)&_mh_execute_header);
}

os_log_t sub_1000B28FC()
{
  qword_10015EF18 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "main");
  qword_10015EF20 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "rollover");
  qword_10015EF28 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "event_process");
  qword_10015EF30 = (uint64_t)os_log_create("com.apple.CoreAnalytics", "send");
  qword_10015EF38 = (uint64_t)os_log_create("com.apple.analyticsd.event", "recv");
  qword_10015EF40 = (uint64_t)os_log_create("com.apple.analyticsd", "client");
  qword_10015EF48 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xform");
  qword_10015EF50 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xform_cache");
  qword_10015EF58 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "config");
  qword_10015EF60 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "db");
  qword_10015EF70 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "sink");
  qword_10015EF78 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "query-state");
  qword_10015EF80 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "xpc");
  qword_10015EF88 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "perf");
  qword_10015EF90 = (uint64_t)os_log_create("com.apple.analyticsd.critical", "tracer");
  qword_10015EF98 = (uint64_t)os_log_create("com.apple.analyticsd", "kernellistener");
  os_log_t result = os_log_create("com.apple.CoreAnalytics.data-quality", "heartbeat-2hr");
  qword_10015EFA0 = (uint64_t)result;
  return result;
}

void sub_1000B2A98(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = a1;
  sub_1000B2B9C(&v6);
  uint64_t v5 = &v7;
  id v3 = v6;
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  uint64_t v4 = v3;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B4444;
  block[3] = &unk_1001519A8;
  block[4] = a2;
  block[5] = &v5;
  dispatch_sync(v4, block);
}

id sub_1000B2B9C@<X0>(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F018))
  {
    qword_10015F010 = 0;
    __cxa_atexit((void (*)(void *))sub_1000B2C4C, &qword_10015F010, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F018);
  }
  if (qword_10015F020 != -1) {
    dispatch_once(&qword_10015F020, &stru_1001576D8);
  }
  id result = (id)qword_10015F010;
  *a1 = result;
  return result;
}

id *sub_1000B2C4C(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  return a1;
}

void sub_1000B2C84(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  sub_1000B2B9C(&queue);
  v4[0] = a2;
  v4[1] = &v6;
  dispatch_queue_t v3 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B488C;
  block[3] = &unk_100154A48;
  block[4] = v4;
  dispatch_sync(queue, block);
}

void sub_1000B2D50(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  dword_10015EFA8 = [v1 integerForKey:@"budget"];

  if (!dword_10015EFA8)
  {
    dword_10015EFA8 = 16000;
    if (sub_100027758()) {
      dword_10015EFA8 *= 2;
    }
  }
}

void sub_1000B2DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2DCC()
{
  if (qword_10015EFC0 != -1) {
    dispatch_once(&qword_10015EFC0, &stru_100157678);
  }
  return dword_10015EFB8;
}

void sub_1000B2E10(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  dword_10015EFB8 = [v1 integerForKey:@"cache_size"];

  if (!dword_10015EFB8) {
    dword_10015EFB8 = 30;
  }
}

void sub_1000B2E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B2E78(uint64_t a1)
{
  sub_1000B2B9C(&queue);
  uint64_t v3 = a1;
  dispatch_queue_t v2 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B4B18;
  block[3] = &unk_100154A48;
  block[4] = &v3;
  dispatch_sync(queue, block);
}

void sub_1000B2F3C(void *a1@<X8>)
{
  sub_1000B2B9C(&v5);
  id v2 = v5;
  *a1 = 0xAAAAAAAAAAAAAA00;
  a1[1] = 0;
  uint64_t v3 = v2;
  sub_100016EAC((uint64_t)a1);
  sub_100016EAC((uint64_t)a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B4FE8;
  block[3] = &unk_1001519A8;
  block[4] = a1;
  void block[5] = &v4;
  dispatch_sync(v3, block);
}

BOOL sub_1000B3034()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B54D0;
  block[3] = &unk_1001519A8;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

void sub_1000B310C(char a1)
{
  char v4 = a1;
  sub_1000B2B9C(&queue);
  id v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B570C;
  block[3] = &unk_100154A48;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

BOOL sub_1000B31D4()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5784;
  block[3] = &unk_1001519A8;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

unint64_t sub_1000B32AC()
{
  return sub_1000B32B8(@"cpu_uptime");
}

unint64_t sub_1000B32B8(void *a1)
{
  id v6 = a1;
  sub_1000B2B9C(&queue);
  char v4 = &v6;
  dispatch_queue_t v1 = queue;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B4130;
  block[3] = &unk_1001519A8;
  block[4] = &v8;
  void block[5] = &v4;
  dispatch_sync(queue, block);
  unint64_t v2 = v8;

  return v2;
}

unint64_t sub_1000B33A0()
{
  return sub_1000B32B8(@"wall_uptime");
}

void sub_1000B33AC()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B57EC;
  block[3] = &unk_100154A48;
  block[4] = &v1;
  dispatch_sync(queue, block);
}

double sub_1000B3468()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  uint64_t v6 = -1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5950;
  block[3] = &unk_1001519A8;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  double v1 = *(double *)&v6;

  return v1;
}

void sub_1000B3540(double a1)
{
  double v4 = a1;
  sub_1000B2B9C(&queue);
  unint64_t v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B59B8;
  block[3] = &unk_100154A48;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

void sub_1000B3608(int a1, int a2)
{
  int v5 = a2;
  int v6 = a1;
  sub_1000B2B9C(&queue);
  v3[0] = &v6;
  v3[1] = &v5;
  dispatch_queue_t v2 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5A30;
  block[3] = &unk_100154A48;
  block[4] = v3;
  dispatch_sync(queue, block);
}

void sub_1000B36D4(void *a1@<X8>)
{
  sub_1000B2B9C(&v5);
  id v2 = v5;
  *a1 = 0xAAAAAAAAAAAAAA00;
  a1[1] = 0;
  char v3 = v2;
  sub_100016EAC((uint64_t)a1);
  sub_100016EAC((uint64_t)a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5A54;
  block[3] = &unk_1001519A8;
  block[4] = a1;
  void block[5] = &v4;
  dispatch_sync(v3, block);
}

uint64_t sub_1000B37CC@<X0>(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EFD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EFD8))
  {
    byte_10015EFC8 = 0;
    qword_10015EFD0 = 0;
    sub_100016EAC((uint64_t)&byte_10015EFC8);
    sub_100016EAC((uint64_t)&byte_10015EFC8);
    __cxa_atexit((void (*)(void *))sub_100028D64, &byte_10015EFC8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EFD8);
  }
  if (qword_10015EFE0 != -1) {
    dispatch_once(&qword_10015EFE0, &stru_100157698);
  }

  return sub_100016A10(a1, (uint64_t)&byte_10015EFC8);
}

void sub_1000B38A0(id a1)
{
  dispatch_queue_t v1 = +[NSUserDefaults standardUserDefaults];
  id v2 = [v1 stringForKey:@"daemon_perf_params"];

  if (v2)
  {
    if ([v2 length])
    {
      sub_100015438(__p, (char *)[v2 UTF8String]);
      uint64_t v14 = 0;
      sub_10000D450((uint64_t)__p, (uint64_t)buf, 1, &v8);
      sub_10000DE9C(buf);
      sub_100016EAC((uint64_t)&v8);
      char v3 = byte_10015EFC8;
      byte_10015EFC8 = v8;
      LOBYTE(v8) = v3;
      char v4 = (uint64_t *)qword_10015EFD0;
      qword_10015EFD0 = (uint64_t)v9;
      uint64_t v9 = v4;
      sub_100016EAC((uint64_t)&byte_10015EFC8);
      sub_100016EAC((uint64_t)&v8);
      sub_100016B28(&v9, v8);
      if (v11 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  id v5 = qword_10015EF88;
  if (byte_10015EFC8)
  {
    int v6 = (id)qword_10015EF88;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      sub_100007460((uint64_t)&byte_10015EFC8, -1, 0x20u, 0, 1, buf);
      if (v13 >= 0) {
        uint64_t v7 = buf;
      }
      else {
        uint64_t v7 = *(uint8_t **)buf;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[DaemonState] Reporting specified daemon perf params parameters: %s", __p, 0xCu);
      if (v13 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[DaemonState] Demon perf checks are disabled. Please update the daemon perf params in defaults if you wish to turn on perf checks.", buf, 2u);
  }
}

void sub_1000B3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v20 = v19;

  _Unwind_Resume(a1);
}

BOOL sub_1000B3B4C()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5CCC;
  block[3] = &unk_1001519A8;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

BOOL sub_1000B3C24()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  char v6 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5DB4;
  block[3] = &unk_1001519A8;
  block[4] = &v6;
  void block[5] = &v3;
  dispatch_sync(queue, block);
  BOOL v1 = v6 != 0;

  return v1;
}

void sub_1000B3CFC(char a1)
{
  char v4 = a1;
  sub_1000B2B9C(&queue);
  id v2 = &v4;
  dispatch_queue_t v1 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5E48;
  block[3] = &unk_100154A48;
  block[4] = &v2;
  dispatch_sync(queue, block);
}

void sub_1000B3DC4()
{
  sub_1000B2B9C(&queue);
  dispatch_queue_t v0 = queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5EC0;
  block[3] = &unk_100154A48;
  block[4] = &v1;
  dispatch_sync(queue, block);
}

void sub_1000B3E80(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F000))
  {
    xmmword_10015EFE8 = 0uLL;
    unk_10015EFF8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10015EFE8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F000);
  }
  if (qword_10015F008 != -1) {
    dispatch_once(&qword_10015F008, &stru_1001576B8);
  }
  if (byte_10015EFFF < 0)
  {
    long long v2 = xmmword_10015EFE8;
    sub_100017424((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10015EFE8;
    *(void *)(a1 + 16) = unk_10015EFF8;
  }
}

void sub_1000B3F74(id a1)
{
  char v1 = +[NSUserDefaults standardUserDefaults];
  long long v2 = [v1 stringForKey:@"nonce"];

  if (!v2)
  {
    char v3 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[DeviceKeyManager] WARNING: Device nonce not present; generating and storing new nonce",
        v7,
        2u);
    }
    char v4 = +[NSUUID UUID];
    long long v2 = [v4 UUIDString];

    id v5 = +[NSUserDefaults standardUserDefaults];
    [v5 setObject:v2 forKey:@"nonce"];
  }
  id v6 = v2;
  std::string::assign((std::string *)&xmmword_10015EFE8, (const std::string::value_type *)[v6 UTF8String]);
}

void sub_1000B40B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B40F0(id a1)
{
  qword_10015F010 = (uint64_t)dispatch_queue_create("analyticsd.DaemonState", 0);

  _objc_release_x1();
}

void sub_1000B4130(uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 40);
  uint64_t v8 = -1;
  char v3 = +[NSUserDefaults standardUserDefaults];
  char v4 = [v3 stringForKey:**v2];

  if (v4)
  {
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v24 = v5;
    long long v25 = v5;
    long long v22 = v5;
    long long v23 = v5;
    long long v20 = v5;
    long long v21 = v5;
    long long v18 = v5;
    long long v19 = v5;
    long long v16 = v5;
    long long v17 = v5;
    *(_OWORD *)uint64_t v14 = v5;
    long long v15 = v5;
    long long v12 = v5;
    long long v13 = v5;
    long long v10 = v5;
    long long v11 = v5;
    long long v9 = v5;
    sub_100015438(&__p, (char *)[v4 UTF8String]);
    sub_100009574((void (__cdecl ***)(std::istringstream *__hidden))&v9, &__p, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::istream::operator>>();
    if (SBYTE7(v15) < 0) {
      operator delete(v14[0]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    std::ios::~ios();
    uint64_t v6 = v8;
  }
  else
  {
    uint64_t v6 = -1;
  }

  **(void **)(a1 + 32) = v6;
}

void sub_1000B4338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_1001025B4();

  _Unwind_Resume(a1);
}

void sub_1000B4444(uint64_t a1)
{
  long long v2 = *(uint64_t ***)(a1 + 40);
  char v3 = +[NSUserDefaults standardUserDefaults];
  char v4 = +[NSString stringWithUTF8String:**v2];
  long long v5 = [v3 stringForKey:v4];

  if (v5 && [v5 length])
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    long long v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    id v6 = v5;
    long long v19 = (const char *)[v6 UTF8String];
    uint64_t v24 = 0;
    sub_1000B4764(&v19, (uint64_t)buf, 1, &v17);
    sub_10000DE9C(buf);
    int v7 = v17;
    uint64_t v8 = (id)qword_10015EF18;
    long long v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_1001025F4(**v2, buf, (uint64_t)[v6 length], v9);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = **v2;
      id v16 = [v6 length];
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v21 = v15;
      __int16 v22 = 2048;
      id v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[DaemonState] WARNING: %s parameters exist (%lu bytes) but was not parsed", buf, 0x16u);
    }
  }
  else
  {
    long long v10 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = **v2;
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[DaemonState] No information for key %s", buf, 0xCu);
    }
    LOBYTE(v17) = 0;
    long long v18 = 0;
    sub_100016EAC((uint64_t)&v17);
    sub_100016EAC((uint64_t)&v17);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v17);
  char v13 = *(unsigned char *)v12;
  *(unsigned char *)uint64_t v12 = v17;
  LOBYTE(v17) = v13;
  uint64_t v14 = *(uint64_t **)(v12 + 8);
  *(void *)(v12 + 8) = v18;
  long long v18 = v14;
  sub_100016EAC(v12);
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
}

void sub_1000B46C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);

  sub_100016EAC((uint64_t)va);
  sub_100016B28((uint64_t **)va1, v5);

  _Unwind_Resume(a1);
}

void *sub_1000B4764@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  uint64_t v8 = *a1;
  size_t v9 = strlen(v8);
  sub_10000DC80((uint64_t)v11, a2);
  sub_10000E49C((uint64_t)v8, (uint64_t)&v8[v9], (uint64_t)v11, a3, (uint64_t)v12);
  sub_10000DF64((uint64_t)v12, 1, (uint64_t)a4);
  sub_10000DF20((uint64_t)&v13);
  sub_10000DE9C(v12);
  return sub_10000DE9C(v11);
}

void sub_1000B4850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10000DF20(v14 + 40);
  sub_10000DE9C(&a13);
  sub_10000DE9C(&a9);
  sub_100028D64(v13);
  _Unwind_Resume(a1);
}

void sub_1000B488C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = +[NSUserDefaults standardUserDefaults];
  sub_100007460(*(void *)v1, -1, 0x20u, 0, 0, __p);
  if (v7 >= 0) {
    char v3 = __p;
  }
  else {
    char v3 = (void **)__p[0];
  }
  char v4 = +[NSString stringWithUTF8String:v3];
  uint64_t v5 = +[NSString stringWithUTF8String:**(void **)(v1 + 8)];
  [v2 setObject:v4 forKey:v5];

  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B4990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long __p, int a17, __int16 a18, __int16 a19, void **a20)
{
  if (SHIBYTE(a19) < 0) {
    operator delete((void *)__p);
  }

  if (a2 == 1)
  {
    id v26 = __cxa_begin_catch(a1);
    uint64_t v27 = (id)qword_10015EF18;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
      uint64_t v29 = **(void **)(v23 + 8);
      sub_100007460(*(void *)v23, -1, 0x20u, 0, 1, &a10);
      if (a15 >= 0) {
        long long v30 = (void **)&a10;
      }
      else {
        long long v30 = a10;
      }
      LODWORD(__p) = 136315650;
      *(void *)((char *)&__p + 4) = v28;
      WORD6(__p) = 2082;
      *(void *)((char *)&__p + 14) = v29;
      a19 = 2082;
      a20 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[DaemonState] ERROR: Exception (json: %s) setting parameters %{public}s for key '%{public}s'", (uint8_t *)&__p, 0x20u);
      if (a15 < 0) {
        operator delete(a10);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1000B495CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1000B4B18(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = "user-interface-language";
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v23 = v3;
  sub_1000135DC(v2, &v25, (uint64_t)__p);
  long long buf = (unint64_t)v2;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0x8000000000000000;
  if (!v2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100013648((unsigned __int8 **)&buf);
  if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    char v4 = (unsigned char *)sub_1000155C8();
    if (!v4) {
      goto LABEL_13;
    }
  }
  else
  {
    char v4 = sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*v4 == 3)
  {
    uint64_t v5 = +[NSUserDefaults standardUserDefaults];
    sub_100015064((uint64_t)v4, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      id v6 = __p;
    }
    else {
      id v6 = (void **)__p[0];
    }
    char v7 = +[NSString stringWithUTF8String:v6];
    [v5 setObject:v7 forKey:@"user-interface-language"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_13:
  uint64_t v8 = *v1;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = "preferred-user-interface-language";
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v9;
  long long v23 = v9;
  sub_1000135DC(v8, &v25, (uint64_t)__p);
  long long buf = (unint64_t)v8;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0x8000000000000000;
  if (!v8) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100013648((unsigned __int8 **)&buf);
  if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    long long v10 = (unsigned char *)sub_1000155C8();
    if (!v10) {
      goto LABEL_25;
    }
  }
  else
  {
    long long v10 = sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*v10 == 3)
  {
    uint64_t v11 = +[NSUserDefaults standardUserDefaults];
    sub_100015064((uint64_t)v10, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    uint64_t v13 = +[NSString stringWithUTF8String:v12];
    [v11 setObject:v13 forKey:@"preferred-user-interface-language"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_25:
  uint64_t v14 = *v1;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = "user-set-region-format";
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v15;
  long long v23 = v15;
  sub_1000135DC(v14, &v25, (uint64_t)__p);
  long long buf = (unint64_t)v14;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0x8000000000000000;
  if (!v14) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  sub_100013648((unsigned __int8 **)&buf);
  if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    id v16 = (unsigned char *)sub_1000155C8();
    if (!v16) {
      goto LABEL_37;
    }
  }
  else
  {
    id v16 = sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*v16 == 3)
  {
    unint64_t v17 = +[NSUserDefaults standardUserDefaults];
    sub_100015064((uint64_t)v16, (std::string *)__p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      long long v18 = __p;
    }
    else {
      long long v18 = (void **)__p[0];
    }
    long long v19 = +[NSString stringWithUTF8String:v18];
    [v17 setObject:v19 forKey:@"user-set-region-format"];

    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_37:
  long long v20 = (id)qword_10015EF18;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    sub_100007460(*v1, -1, 0x20u, 0, 1, __p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[DaemonState] set local info: %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1000B4F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000B4FD0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B4FE8(uint64_t a1)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAA00;
  unint64_t v24 = 0;
  sub_100016EAC((uint64_t)&v23);
  sub_100016EAC((uint64_t)&v23);
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  long long v3 = [v2 valueForKey:@"user-interface-language"];

  if (v3) {
    sub_100015438(__p, (char *)[v3 UTF8String]);
  }
  else {
    sub_100015438(__p, "<unknown>");
  }
  sub_10001C898((uint64_t)v31, (uint64_t)__p);
  char v4 = sub_10000D104((unsigned __int8 *)&v23, "user-interface-language");
  sub_100016EAC((uint64_t)v31);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)char v4 = v31[0];
  v31[0] = v5;
  id v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v32;
  uint64_t v32 = v6;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v31);
  sub_100016B28(&v32, v31[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  char v7 = +[NSUserDefaults standardUserDefaults];
  uint64_t v8 = [v7 valueForKey:@"preferred-user-interface-language"];

  long long v9 = v8;
  if (v8) {
    sub_100015438(__p, (char *)[v8 UTF8String]);
  }
  else {
    sub_100015438(__p, "<unknown>");
  }
  sub_10001C898((uint64_t)v27, (uint64_t)__p);
  long long v10 = sub_10000D104((unsigned __int8 *)&v23, "preferred-user-interface-language");
  sub_100016EAC((uint64_t)v27);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)long long v10 = v27[0];
  v27[0] = v11;
  uint64_t v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v28;
  uint64_t v28 = v12;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v27);
  sub_100016B28(&v28, v27[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = +[NSUserDefaults standardUserDefaults];
  uint64_t v14 = [v13 valueForKey:@"user-set-region-format"];

  if (v14) {
    sub_100015438(__p, (char *)[v14 UTF8String]);
  }
  else {
    sub_100015438(__p, "<unknown>");
  }
  sub_10001C898((uint64_t)v25, (uint64_t)__p);
  long long v15 = sub_10000D104((unsigned __int8 *)&v23, "user-set-region-format");
  sub_100016EAC((uint64_t)v25);
  char v16 = *(unsigned char *)v15;
  *(unsigned char *)long long v15 = v25[0];
  v25[0] = v16;
  unint64_t v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v26;
  id v26 = v17;
  sub_100016EAC((uint64_t)v15);
  sub_100016EAC((uint64_t)v25);
  sub_100016B28(&v26, v25[0]);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  long long v18 = (id)qword_10015EF18;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    sub_100007460((uint64_t)&v23, -1, 0x20u, 0, 1, __p);
    if (v30 >= 0) {
      long long v19 = __p;
    }
    else {
      long long v19 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v34 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[DaemonState] fetched local info: %s", buf, 0xCu);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v20 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v23);
  char v21 = *(unsigned char *)v20;
  *(unsigned char *)uint64_t v20 = v23;
  LOBYTE(v23) = v21;
  __int16 v22 = *(uint64_t **)(v20 + 8);
  *(void *)(v20 + 8) = v24;
  unint64_t v24 = v22;
  sub_100016EAC(v20);
  sub_100016EAC((uint64_t)&v23);
  sub_100016B28(&v24, v23);
}

void sub_1000B53E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_100016EAC((uint64_t)&a10);
  sub_100016B28(v22, a10);
  _Unwind_Resume(a1);
}

void sub_1000B54D0(uint64_t a1)
{
  uint64_t v2 = +[NSSet setWithObjects:@"greymatter", 0];
  long long v3 = +[AnalyticsXPCSubscriptionManager AnalyticsQueryValuesWrapperWithArguments:v2];
  char v4 = xpc_dictionary_get_dictionary(v3, (const char *)[@"greymatter" UTF8String]);
  char v5 = v4;
  if (!v4 || xpc_get_type(v4) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = qword_10015EF70;
    if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_ERROR)) {
      sub_10010264C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    LOBYTE(v14) = 0;
    goto LABEL_6;
  }
  memset(__p, 170, sizeof(__p));
  string = (char *)xpc_dictionary_get_string(v5, "availability");
  sub_100015438(__p, string);
  char v16 = HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1] == (void *)9)
    {
      unint64_t v17 = (void **)__p[0];
      goto LABEL_12;
    }
  }
  else if (SHIBYTE(__p[2]) == 9)
  {
    unint64_t v17 = __p;
LABEL_12:
    long long v18 = *v17;
    int v19 = *((unsigned __int8 *)v17 + 8);
    BOOL v14 = v18 == (void *)0x6C62616C69617661 && v19 == 101;
    goto LABEL_19;
  }
  BOOL v14 = 0;
LABEL_19:
  char v21 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    BOOL v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[DaemonState] fetched gm availability info: %{BOOL}d", buf, 8u);
    char v16 = HIBYTE(__p[2]);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
LABEL_6:

  **(unsigned char **)(a1 + 32) = v14;
}

void sub_1000B56D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B570C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 ***)(a1 + 32);
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 setBool:**v1 forKey:@"reset_dev_config"];
}

void sub_1000B5770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B5784(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v3 = [v2 BOOLForKey:@"reset_dev_config"];

  **(unsigned char **)(a1 + 32) = v3;
}

void sub_1000B57DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B57EC()
{
  __darwin_time_t v0 = sub_10005D148();
  if (v0 < 0)
  {
    char v4 = qword_10015EF88;
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR)) {
      sub_100102714(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  else
  {
    __darwin_time_t v1 = v0;
    id v2 = +[NSUserDefaults standardUserDefaults];
    unsigned __int8 v3 = +[NSString stringWithFormat:@"%ld", v1];
    [v2 setObject:v3 forKey:@"cpu_uptime"];
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = sub_10005D0AC();
  if (v12 < 0)
  {
    char v16 = qword_10015EF88;
    if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_ERROR)) {
      sub_1001026B0(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = v12;
    BOOL v14 = +[NSUserDefaults standardUserDefaults];
    long long v15 = +[NSString stringWithFormat:@"%ld", v13];
    [v14 setObject:v15 forKey:@"wall_uptime"];
  }
}

void sub_1000B5928(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000B5950(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 doubleForKey:@"app_usage_last_sync"];
  uint64_t v4 = v3;

  **(void **)(a1 + 32) = v4;
}

void sub_1000B59A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B59B8(uint64_t a1)
{
  __darwin_time_t v1 = *(double ***)(a1 + 32);
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 setDouble:@"app_usage_last_sync" forKey:**v1];
}

void sub_1000B5A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5A30(uint64_t result)
{
  __darwin_time_t v1 = *(int ***)(result + 32);
  uint64_t v3 = *v1;
  id v2 = v1[1];
  dword_10015F028 = *v3;
  dword_10015F02C = *v2;
  return result;
}

void sub_1000B5A54(uint64_t a1)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  BOOL v14 = 0;
  sub_100016EAC((uint64_t)&v13);
  sub_100016EAC((uint64_t)&v13);
  if (dword_10015F028 >= 3)
  {
    if (dword_10015F028 >= 0xB) {
      id v2 = "10+";
    }
    else {
      id v2 = "3-10";
    }
  }
  else
  {
    id v2 = off_1001576F8[dword_10015F028];
  }
  char v16 = v2;
  sub_100030238((uint64_t)v18, &v16);
  uint64_t v3 = sub_10000D104((unsigned __int8 *)&v13, "trialRollouts");
  sub_100016EAC((uint64_t)v18);
  char v4 = *(unsigned char *)v3;
  *(unsigned char *)uint64_t v3 = v18[0];
  v18[0] = v4;
  uint64_t v5 = (uint64_t *)v3[1];
  v3[1] = (uint64_t)v19;
  uint64_t v19 = v5;
  sub_100016EAC((uint64_t)v3);
  sub_100016EAC((uint64_t)v18);
  sub_100016B28(&v19, v18[0]);
  if (dword_10015F02C >= 3)
  {
    if (dword_10015F02C >= 0xB) {
      uint64_t v6 = "10+";
    }
    else {
      uint64_t v6 = "3-10";
    }
  }
  else
  {
    uint64_t v6 = off_1001576F8[dword_10015F02C];
  }
  long long v15 = v6;
  sub_100030238((uint64_t)&v16, &v15);
  uint64_t v7 = sub_10000D104((unsigned __int8 *)&v13, "trialExperiments");
  sub_100016EAC((uint64_t)&v16);
  char v8 = *(unsigned char *)v7;
  *(unsigned char *)uint64_t v7 = (_BYTE)v16;
  LOBYTE(v16) = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v17;
  uint64_t v17 = v9;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)&v16);
  sub_100016B28(&v17, v16);
  uint64_t v10 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v13);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)uint64_t v10 = v13;
  LOBYTE(v13) = v11;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = *(uint64_t **)(v10 + 8);
  *(void *)(v10 + 8) = v14;
  BOOL v14 = v12;
  sub_100016EAC(v10);
  sub_100016EAC((uint64_t)&v13);
  sub_100016B28(&v14, v13);
}

void sub_1000B5C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t *a13)
{
  sub_100016EAC((uint64_t)&a12);
  sub_100016B28(&a13, a12);
  sub_100016EAC((uint64_t)&a9);
  sub_100016B28(v13, a9);
  _Unwind_Resume(a1);
}

void sub_1000B5CCC(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v3 = [v2 BOOLForKey:@"activateSamplingOverride"];

  char v4 = +[NSUserDefaults standardUserDefaults];
  id v5 = [v4 integerForKey:@"samplingPercentage"];

  uint64_t v6 = +[NSUserDefaults standardUserDefaults];
  [v6 removeObjectForKey:@"activateSamplingOverride"];

  uint64_t v7 = +[NSUserDefaults standardUserDefaults];
  [v7 removeObjectForKey:@"samplingPercentage"];

  if (v5 == (id)100) {
    unsigned __int8 v8 = v3;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  **(unsigned char **)(a1 + 32) = v8;
}

void sub_1000B5D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5DB4(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v3 = [v2 objectForKey:@"current_disable_sampling_override"];

  if (v3) {
    unsigned __int8 v4 = [v3 BOOLValue];
  }
  else {
    unsigned __int8 v4 = 0;
  }

  **(unsigned char **)(a1 + 32) = v4;
}

void sub_1000B5E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5E48(uint64_t a1)
{
  __darwin_time_t v1 = *(unsigned __int8 ***)(a1 + 32);
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 setBool:**v1 forKey:@"staged_disable_sampling_override"];
}

void sub_1000B5EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B5EC0()
{
  __darwin_time_t v0 = +[NSUserDefaults standardUserDefaults];
  id v4 = [v0 objectForKey:@"staged_disable_sampling_override"];

  __darwin_time_t v1 = +[NSUserDefaults standardUserDefaults];
  [v1 removeObjectForKey:@"staged_disable_sampling_override"];

  id v2 = v4;
  if (v4)
  {
    if ([v4 BOOLValue])
    {
      unsigned __int8 v3 = +[NSUserDefaults standardUserDefaults];
      [v3 setBool:1 forKey:@"current_disable_sampling_override"];
    }
    else
    {
      unsigned __int8 v3 = +[NSUserDefaults standardUserDefaults];
      [v3 removeObjectForKey:@"current_disable_sampling_override"];
    }

    id v2 = v4;
  }
}

void sub_1000B5F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1000B5FCC()
{
  v1[0] = off_100157720;
  v1[3] = v1;
  sub_10005A920((uint64_t)v1);
  return sub_10001266C(v1);
}

void sub_1000B6050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001266C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6064()
{
  memset(v6, 170, sizeof(v6));
  sub_10005B508(v6);
  __darwin_time_t v0 = v6[0];
  __darwin_time_t v1 = v6[1];
  if (v6[0] == v6[1])
  {
LABEL_5:
    uint64_t v2 = 0;
  }
  else
  {
    while (1)
    {
      sub_1000F5A40(v0, 0, (int *)&v7);
      if (v7 >= 2 && !sub_1000F65CC((uint64_t)v0, 0)) {
        break;
      }
      v0 += 24;
      if (v0 == v1) {
        goto LABEL_5;
      }
    }
    unsigned __int8 v3 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      if (v0[23] >= 0) {
        id v4 = v0;
      }
      else {
        id v4 = *(char **)v0;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LegacyContains] Found contents in legacy transform state directory: %{public}s", buf, 0xCu);
    }
    uint64_t v2 = 1;
  }
  *(void *)long long buf = v6;
  sub_10002A71C((void ***)buf);
  return v2;
}

void sub_1000B62A0()
{
}

void *sub_1000B62B4()
{
  id result = operator new(0x10uLL);
  *id result = off_100157720;
  return result;
}

void sub_1000B62EC(uint64_t a1, void *a2)
{
  *a2 = off_100157720;
}

void sub_1000B6314()
{
  sub_10005AA9C(&buf);
  std::string __p = buf;
  sub_1000F66C4((uint64_t)&__p, 0);
  if (v0)
  {
    __darwin_time_t v1 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[LegacyWipe] Removed legacy allowlist: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_10005ABC8(&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  sub_1000F66C4((uint64_t)&__p, 0);
  if (v3)
  {
    id v4 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      id v5 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        id v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[LegacyWipe] Removed legacy config: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_10005ACF4(&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  if (sub_1000F6820((uint64_t)&__p, 0))
  {
    uint64_t v6 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      unsigned int v7 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[LegacyWipe] Removed all in legacy journal directory: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_10005AE20(&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  if (sub_1000F6820((uint64_t)&__p, 0))
  {
    unsigned __int8 v8 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[LegacyWipe] Removed all in legacy markov path: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_10005AF4C(&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  sub_1000F66C4((uint64_t)&__p, 0);
  if (v10)
  {
    char v11 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[LegacyWipe] Removed legacy budget usage path: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_10005B078(&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  sub_1000F66C4((uint64_t)&__p, 0);
  if (v13)
  {
    BOOL v14 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[LegacyWipe] Removed legacy budget usage temp path: %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  memset(&buf, 170, sizeof(buf));
  sub_10005B1A4(&buf.__r_.__value_.__l.__data_);
  for (uint64_t i = (const std::string *)buf.__r_.__value_.__r.__words[0];
        i != (const std::string *)buf.__r_.__value_.__l.__size_;
        ++i)
  {
    std::string::operator=(&__p, i);
    if (sub_1000F6820((uint64_t)&__p, 0))
    {
      uint64_t v17 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__p;
        }
        else {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long v25 = 136446210;
        *(void *)&v25[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[LegacyWipe] Removed legacy transform state directory: %{public}s", v25, 0xCu);
      }
    }
  }
  memset(v25, 170, 24);
  sub_10005C144((char **)v25);
  for (uint64_t j = *(const std::string **)v25; j != *(const std::string **)&v25[8]; ++j)
  {
    std::string::operator=(&__p, j);
    sub_1000F66C4((uint64_t)&__p, 0);
    if (v20)
    {
      uint64_t v21 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &__p;
        }
        else {
          uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)BOOL v24 = 136446210;
        *(void *)&v24[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[LegacyWipe] Removed legacy transform staging path: %{public}s", v24, 0xCu);
      }
    }
  }
  *(void *)BOOL v24 = v25;
  sub_10002A71C((void ***)v24);
  *(void *)long long v25 = &buf;
  sub_10002A71C((void ***)v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000B6A8C()
{
}

uint64_t sub_1000B6CFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000B6D3C()
{
}

void sub_1000B6D78(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

uint64_t sub_1000B6D98(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000B6DA8(uint64_t a1, __int16 a2, __int16 a3, CFTypeRef cf)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F058))
  {
    xmmword_10015F030 = 0u;
    unk_10015F040 = 0u;
    dword_10015F050 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_1000B6FCC, &xmmword_10015F030, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F058);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F068))
  {
    qword_10015F060 = (uint64_t)dispatch_queue_create("com.apple.CoreAnalytics::Tracer", 0);
    __cxa_guard_release(&qword_10015F068);
  }
  CFRetain(cf);
  unsigned __int8 v8 = qword_10015F060;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000B6FD0;
  block[3] = &unk_100157790;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
  }
  LOWORD(v11) = a2;
  WORD1(v11) = a3;
  *((void *)&v11 + 1) = cf;
  if (SHIBYTE(v10) < 0)
  {
    sub_100017424(&v13, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)__p;
    uint64_t v14 = v10;
  }
  long long v15 = v11;
  dispatch_async(v8, block);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
}

void sub_1000B6FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B6FD0(uint64_t a1)
{
  uint64_t v2 = sub_100010388(&xmmword_10015F030, (unsigned __int8 *)(a1 + 32));
  if (!v2) {
    operator new();
  }
  id v4 = *(void **)(a1 + 64);
  int v3 = (CFTypeRef *)(a1 + 64);
  sub_1000B71C8(*((void *)v2 + 5), *((_WORD *)v3 - 4), *((_WORD *)v3 - 3), v4);
  CFRelease(*v3);
}

void sub_1000B7100(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1000B715C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100017424((unsigned char *)v4, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(v4 + 16) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_1000B71B4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_1000B71C8(uint64_t a1, __int16 a2, __int16 a3, void *a4)
{
  if (objc_opt_class())
  {
    id v8 = a4;
    id v9 = [v8 mutableCopy];
    uint64_t v10 = +[OSASystemConfiguration sharedInstance];
    long long v11 = [v10 crashReporterKey];
    [v9 setObject:v11 forKeyedSubscript:@"CRKey"];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000B745C;
    void v14[3] = &unk_1001577C8;
    id v15 = v9;
    uint64_t v16 = a1;
    __int16 v17 = a2;
    __int16 v18 = a3;
    id v12 = v9;
    sub_1000B7398(a1, v14);
  }
  else
  {
    long long v13 = qword_10015EF90;
    if (os_log_type_enabled((os_log_t)qword_10015EF90, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[RTCReporter] WARNING: Failed to get RTCReporting class", buf, 2u);
    }
  }
}

void sub_1000B735C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7398(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B76D0;
  block[3] = &unk_100157838;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, block);
}

id sub_1000B745C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)qword_10015EF90;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = [*(id *)(a1 + 32) description];
    sub_100102AF0(v4, v6, v3);
  }

  return [*(id *)(v2 + 16) sendMessageWithCategory:*(unsigned __int16 *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 50) payload:*(void *)(a1 + 32) error:0];
}

void sub_1000B7514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B752C(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_1001577F8;
  sub_100015438(&v15, "com.apple.CoreAnalytics::RTCReporter+");
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    id v5 = (const std::string::value_type *)a2;
  }
  else {
    id v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v6 = *((void *)a2 + 1);
  }
  id v7 = std::string::append(&v15, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v17 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 >= 0) {
    id v9 = __p;
  }
  else {
    id v9 = (void **)__p[0];
  }
  uint64_t v10 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v11 = dispatch_queue_create((const char *)v9, v10);

  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = 0;
  id v12 = (unsigned char *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v12, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)id v12 = v13;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1000B7694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1000B76D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 16))
  {
    if (!*(unsigned char *)(v2 + 48))
    {
      id v3 = (void *)qword_10015F070;
      id v24 = objc_retainBlock(*(id *)(a1 + 32));
      objc_msgSend(v3, "addObject:");

      return;
    }
LABEL_7:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    *(void *)(v2 + 56) = dispatch_time(0, 0);
    return;
  }
  if (*(unsigned char *)(v2 + 48)) {
    goto LABEL_7;
  }
  int v4 = +[NSNumber numberWithUnsignedInt:arc4random()];
  id v5 = qword_10015EF90;
  if (os_log_type_enabled((os_log_t)qword_10015EF90, OS_LOG_TYPE_DEBUG)) {
    sub_100102BB8(v2, v5);
  }
  id v6 = objc_alloc((Class)RTCReporting);
  id v7 = v4;
  uint64_t v28 = kRTCReportingSessionInfoClientType;
  uint64_t v29 = kRTCReportingSessionInfoClientVersion;
  CFStringRef v33 = (const __CFString *)&off_10015B8A8;
  long long v34 = &off_10015B8C0;
  uint64_t v30 = kRTCReportingSessionInfoBatchEvent;
  uint64_t v31 = kRTCReportingSessionInfoSessionID;
  long long v35 = &__kCFBooleanTrue;
  id v36 = v7;
  uint64_t v32 = kRTCReportingSessionInfoContainsRealtimeEvents;
  id v37 = &__kCFBooleanFalse;
  long long v8 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v28 count:5];

  uint64_t v9 = v2 + 24;
  int v10 = *(unsigned __int8 *)(v2 + 47);
  if ((*(char *)(v2 + 47) & 0x80000000) == 0)
  {
    if (v10 != 10)
    {
      dispatch_queue_t v11 = (void *)(v2 + 24);
      if (v10 != 13) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (*(void *)v9 != 0x636974796C616E61 || *(_WORD *)(v2 + 32) != 25715) {
      goto LABEL_25;
    }
LABEL_39:
    CFStringRef v13 = @"com.apple.CoreAnalytics";
    goto LABEL_26;
  }
  uint64_t v12 = *(void *)(v2 + 32);
  if (v12 == 10)
  {
    if (**(void **)v9 != 0x636974796C616E61 || *(_WORD *)(*(void *)v9 + 8) != 25715) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }
  if (v12 != 13)
  {
LABEL_25:
    CFStringRef v13 = @"unknown";
    goto LABEL_26;
  }
  dispatch_queue_t v11 = *(void **)v9;
LABEL_18:
  if (*v11 ^ 0x636974796C616E61 | *(void *)((char *)v11 + 5) ^ 0x62685F6473636974) {
    CFStringRef v13 = @"unknown";
  }
  else {
    CFStringRef v13 = @"com.apple.CA";
  }
LABEL_26:
  CFStringRef v33 = v13;
  uint64_t v28 = kRTCReportingUserInfoClientName;
  uint64_t v29 = kRTCReportingUserInfoServiceName;
  if ((v10 & 0x80u) == 0) {
    uint64_t v15 = v2 + 24;
  }
  else {
    uint64_t v15 = *(void *)v9;
  }
  uint64_t v16 = +[NSString stringWithUTF8String:v15];
  long long v34 = v16;
  int64_t v17 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v28 count:2];

  id v18 = [v6 initWithSessionInfo:v8 userInfo:v17 frameworksToCheck:0];
  objc_storeStrong((id *)(v2 + 16), v18);
  if (v18)
  {
    id v19 = objc_retainBlock(*(id *)(a1 + 32));
    uint64_t v20 = +[NSMutableArray arrayWithObject:v19];
    uint64_t v21 = (void *)qword_10015F070;
    qword_10015F070 = v20;

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000B7BBC;
    v25[3] = &unk_100157810;
    uint64_t v27 = v2;
    id v26 = v7;
    [v18 startConfigurationWithCompletionHandler:v25];
  }
  else
  {
    uint64_t v22 = qword_10015EF90;
    if (os_log_type_enabled((os_log_t)qword_10015EF90, OS_LOG_TYPE_ERROR)) {
      sub_100102B48(v22);
    }
  }
}

void sub_1000B7B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000B7BBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = qword_10015EF90;
  if (v3)
  {
    id v6 = (id)qword_10015EF90;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      unsigned int v7 = [*(id *)(a1 + 32) intValue];
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[RTCReporter] Successfully configured RTCReporting with session id: %d", buf, 8u);
    }

    long long v8 = *(NSObject **)(v4 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B7D40;
    block[3] = &unk_100154A48;
    void block[4] = v4;
    dispatch_async(v8, block);
    *(unsigned char *)(v4 + 48) = 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF90, OS_LOG_TYPE_ERROR)) {
      sub_100102C40(v5);
    }
    *(unsigned char *)(v4 + 48) = 0;
    dispatch_time_t v9 = dispatch_time(0, 0);
    sub_1000B7EF8(v4, v9);
  }
}

void sub_1000B7D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7D40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (id)qword_10015EF90;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    id v14 = [(id)qword_10015F070 count];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[RTCReporter] Processing %zu blocks from queue.", buf, 0xCu);
  }

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = (id)qword_10015F070;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v6) + 16))();
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
    }
    while (v4);
  }

  [(id)qword_10015F070 removeAllObjects];
  dispatch_time_t v7 = dispatch_time(0, 0);
  *(void *)(v1 + 56) = v7;
  sub_1000B7EF8(v1, v7);
}

void sub_1000B7ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7EF8(uint64_t a1, dispatch_time_t when)
{
  dispatch_time_t v4 = dispatch_time(when, 3000000000);
  uint64_t v5 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B7FB4;
  block[3] = &unk_1001519A8;
  void block[4] = a1;
  void block[5] = when;
  dispatch_after(v4, v5, block);
}

void sub_1000B7FB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_time_t v2 = *(void *)(v1 + 56);
  if (v2 <= *(void *)(a1 + 40))
  {
    dispatch_time_t v4 = qword_10015EF90;
    if (os_log_type_enabled((os_log_t)qword_10015EF90, OS_LOG_TYPE_DEBUG)) {
      sub_100102CB0(v1, v4);
    }
    *(unsigned char *)(v1 + 48) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    sub_1000B7EF8(v3, v2);
  }
}

uint64_t sub_1000B8040(uint64_t a1)
{
  *(void *)a1 = off_1001577F8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return a1;
}

void sub_1000B80A0(uint64_t a1)
{
  *(void *)a1 = off_1001577F8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  operator delete();
}

unsigned __int8 *sub_1000B8120(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  dispatch_time_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    id v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    id v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_100014470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
    a4 = v26;
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  memset(v27, 170, sizeof(v27));
  sub_1000B8418(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_1000400E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *uint64_t v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  sub_1000B84C4((uint64_t)v27, 0);
  return i;
}

void sub_1000B83F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000B84C4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_1000B8418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x30uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_100017424(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }
  void v8[5] = 0;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1000B84AC(_Unwind_Exception *a1)
{
  sub_1000B84C4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1000B84C4(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000B851C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1000B851C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_1000B8594(uint64_t a1)
{
  sub_1000B85D0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000B85D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1000B851C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1000B8614()
{
  int v0 = (void *)MGCopyAnswer();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = kMGQDiskUsageTotalDiskCapacity;
    uint64_t v3 = &off_10015B8D8;
    dispatch_time_t v4 = [v0 objectForKeyedSubscript:kMGQDiskUsageTotalDiskCapacity];

    if (v4)
    {
      uint64_t v3 = [v1 objectForKeyedSubscript:v2];
    }
    uint64_t v5 = sub_10002B144((uint64_t)[v3 longLongValue]);
  }
  else
  {
    uint64_t v3 = &off_10015B8D8;
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

void sub_1000B86C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B86E4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 0;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  uint64_t v2 = qword_10015EF70;
  if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_DEBUG)) {
    sub_100102DA8(v2);
  }
  +[HighEngagementResolver fetchHighEngagementCategories];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v8 = [v3 objectForKeyedSubscript:v7];
        unint64_t v13 = (char *)[v8 UTF8String];
        sub_100030238((uint64_t)v14, &v13);
        unint64_t v9 = sub_10000D104((unsigned __int8 *)a1, (char *)[v7 UTF8String]);
        sub_100016EAC((uint64_t)v14);
        char v10 = *(unsigned char *)v9;
        *(unsigned char *)unint64_t v9 = v14[0];
        v14[0] = v10;
        long long v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v15;
        uint64_t v15 = v11;
        sub_100016EAC((uint64_t)v9);
        sub_100016EAC((uint64_t)v14);
        sub_100016B28(&v15, v14[0]);
      }
      id v4 = [v3 countByEnumeratingWithState:&v17 objects:v16 count:16];
    }
    while (v4);
  }

  unint64_t v12 = qword_10015EF70;
  if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_DEBUG)) {
    sub_100102D38(v12);
  }
}

void sub_1000B88EC(_Unwind_Exception *a1)
{
  sub_100028D64(v1);
  _Unwind_Resume(a1);
}

void sub_1000B8940(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a2, 0, 0, 0, 1);
  sub_100030238((uint64_t)v142, &off_100157880);
  uint64_t v2 = sub_10000D104((unsigned __int8 *)a2, "basebandChipset");
  sub_100016EAC((uint64_t)v142);
  unsigned __int8 v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v142[0];
  v142[0] = v3;
  id v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v143;
  v143 = v4;
  sub_100016EAC((uint64_t)v2);
  sub_100016EAC((uint64_t)v142);
  sub_100016B28(&v143, v142[0]);
  sub_100030238((uint64_t)v140, &off_100157880);
  uint64_t v5 = sub_10000D104((unsigned __int8 *)a2, "basebandFirmwareVersion");
  sub_100016EAC((uint64_t)v140);
  unsigned __int8 v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v140[0];
  v140[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v141;
  v141 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v140);
  sub_100016B28(&v141, v140[0]);
  sub_100030238((uint64_t)v138, &off_100157880);
  id v8 = sub_10000D104((unsigned __int8 *)a2, "productSku");
  sub_100016EAC((uint64_t)v138);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)id v8 = v138[0];
  v138[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v139;
  v139 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v138);
  sub_100016B28(&v139, v138[0]);
  sub_100030238((uint64_t)v136, &off_100157880);
  long long v11 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierName");
  sub_100016EAC((uint64_t)v136);
  unsigned __int8 v12 = *(unsigned char *)v11;
  *(unsigned char *)long long v11 = v136[0];
  v136[0] = v12;
  unint64_t v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v137;
  v137 = v13;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v136);
  sub_100016B28(&v137, v136[0]);
  sub_100030238((uint64_t)v134, &off_100157880);
  id v14 = sub_10000D104((unsigned __int8 *)a2, "servingCarrierName");
  sub_100016EAC((uint64_t)v134);
  unsigned __int8 v15 = *(unsigned char *)v14;
  *(unsigned char *)id v14 = v134[0];
  v134[0] = v15;
  unint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v135;
  v135 = v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v134);
  sub_100016B28(&v135, v134[0]);
  v132[0] = 4;
  v133 = 0;
  sub_100016EAC((uint64_t)v132);
  sub_100016EAC((uint64_t)v132);
  long long v17 = sub_10000D104((unsigned __int8 *)a2, "isDualSim");
  sub_100016EAC((uint64_t)v132);
  unsigned __int8 v18 = *(unsigned char *)v17;
  *(unsigned char *)long long v17 = v132[0];
  v132[0] = v18;
  long long v19 = (uint64_t *)v17[1];
  v17[1] = (uint64_t)v133;
  v133 = v19;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v132);
  sub_100016B28(&v133, v132[0]);
  sub_100030238((uint64_t)v130, &off_100157880);
  long long v20 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierCountry");
  sub_100016EAC((uint64_t)v130);
  unsigned __int8 v21 = *(unsigned char *)v20;
  *(unsigned char *)long long v20 = v130[0];
  v130[0] = v21;
  size_t v22 = (uint64_t *)v20[1];
  v20[1] = (uint64_t)v131;
  v131 = v22;
  sub_100016EAC((uint64_t)v20);
  sub_100016EAC((uint64_t)v130);
  sub_100016B28(&v131, v130[0]);
  sub_100030238((uint64_t)v128, &off_100157880);
  uint64_t v23 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierBundleVersion");
  sub_100016EAC((uint64_t)v128);
  unsigned __int8 v24 = *(unsigned char *)v23;
  *(unsigned char *)uint64_t v23 = v128[0];
  v128[0] = v24;
  long long v25 = (uint64_t *)v23[1];
  v23[1] = (uint64_t)v129;
  v129 = v25;
  sub_100016EAC((uint64_t)v23);
  sub_100016EAC((uint64_t)v128);
  sub_100016B28(&v129, v128[0]);
  id v101 = (id)MGCopyAnswer();
  if (v101)
  {
    sub_100015438(__p, (char *)[v101 UTF8String]);
    sub_10001C898((uint64_t)v126, (uint64_t)__p);
    id v26 = sub_10000D104((unsigned __int8 *)a2, "basebandChipset");
    sub_100016EAC((uint64_t)v126);
    unsigned __int8 v27 = *(unsigned char *)v26;
    *(unsigned char *)id v26 = v126[0];
    v126[0] = v27;
    uint64_t v28 = (uint64_t *)v26[1];
    v26[1] = (uint64_t)v127;
    v127 = v28;
    sub_100016EAC((uint64_t)v26);
    sub_100016EAC((uint64_t)v126);
    sub_100016B28(&v127, v126[0]);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  id v102 = (id)MGCopyAnswer();
  if (v102)
  {
    sub_100015438(__p, (char *)[v102 UTF8String]);
    sub_10001C898((uint64_t)v124, (uint64_t)__p);
    uint64_t v29 = sub_10000D104((unsigned __int8 *)a2, "basebandFirmwareVersion");
    sub_100016EAC((uint64_t)v124);
    unsigned __int8 v30 = *(unsigned char *)v29;
    *(unsigned char *)uint64_t v29 = v124[0];
    v124[0] = v30;
    uint64_t v31 = (uint64_t *)v29[1];
    v29[1] = (uint64_t)v125;
    v125 = v31;
    sub_100016EAC((uint64_t)v29);
    sub_100016EAC((uint64_t)v124);
    sub_100016B28(&v125, v124[0]);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  id v103 = (id)MGCopyAnswer();
  if (v103)
  {
    sub_100015438(__p, (char *)[v103 UTF8String]);
    sub_10001C898((uint64_t)v122, (uint64_t)__p);
    uint64_t v32 = sub_10000D104((unsigned __int8 *)a2, "productSku");
    sub_100016EAC((uint64_t)v122);
    unsigned __int8 v33 = *(unsigned char *)v32;
    *(unsigned char *)uint64_t v32 = v122[0];
    v122[0] = v33;
    long long v34 = (uint64_t *)v32[1];
    v32[1] = (uint64_t)v123;
    v123 = v34;
    sub_100016EAC((uint64_t)v32);
    sub_100016EAC((uint64_t)v122);
    sub_100016B28(&v123, v122[0]);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  memset(v121, 170, sizeof(v121));
  sub_1000BAF40(__p, "homeCarrierName", &off_10015E948);
  sub_1000BAF94(v147, "homeCarrierCountry", &off_10015E950);
  sub_1000BAFE8(v148, "homeCarrierBundleVersion", &off_10015E958);
  sub_1000BAF94(v149, "servingCarrierName", &off_10015E960);
  sub_1000BB03C((uint64_t)v121, (const void **)__p, 4);
  for (uint64_t i = 0; i != -24; i -= 6)
  {
    id v36 = &__p[i];
    if (SHIBYTE(v149[i + 5]) < 0) {
      operator delete(v36[21]);
    }
    if (*((char *)v36 + 167) < 0) {
      operator delete(v36[18]);
    }
  }
  id v37 = (void *)v121[0];
  if ((void *)v121[0] != &v121[1])
  {
    while (1)
    {
      id v38 = (const std::string::value_type *)(v37 + 7);
      unint64_t v119 = 0xAAAAAAAAAAAAAAAALL;
      v120 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v39 = *a1;
      LOBYTE(__p[0]) = 0;
      __p[1] = 0;
      sub_100016EAC((uint64_t)__p);
      sub_100016EAC((uint64_t)__p);
      (*(void (**)(unint64_t *__return_ptr, uint64_t, void *, void **))(*(void *)v39 + 16))(&v119, v39, v37 + 7, __p);
      sub_100016EAC((uint64_t)__p);
      sub_100016B28((uint64_t **)&__p[1], LOBYTE(__p[0]));
      if (*((char *)v37 + 79) < 0) {
        id v38 = *(const std::string::value_type **)v38;
      }
      v144 = v38;
      unint64_t v146 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v40;
      *(_OWORD *)&__p[2] = v40;
      sub_1000135DC((uint64_t)&v119, &v144, (uint64_t)__p);
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      *((void *)&buf + 1) = 0;
      *(void *)&long long buf = &v119;
      unint64_t v153 = 0x8000000000000000;
      sub_100013648((unsigned __int8 **)&buf);
      uint64_t v41 = v37 + 4;
      if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
      {
        uint64_t v42 = sub_1000155C8();
        if (!v42) {
          break;
        }
      }
      else
      {
        uint64_t v42 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
      }
      if (*(unsigned char *)v42 != 3) {
        break;
      }
      uint64_t v43 = *(void *)(v42 + 8);
      if (!v43) {
        break;
      }
      if (*(char *)(v43 + 23) < 0)
      {
        if (!*(void *)(v43 + 8)) {
          break;
        }
      }
      else if (!*(unsigned char *)(v43 + 23))
      {
        break;
      }
      sub_1000168C0((uint64_t)v117, v43);
      uint64_t v44 = sub_10001DA78((unsigned __int8 *)a2, (const void **)v37 + 4);
      sub_100016EAC((uint64_t)v117);
      unsigned __int8 v45 = *(unsigned char *)v44;
      *(unsigned char *)uint64_t v44 = v117[0];
      v117[0] = v45;
      int v46 = (uint64_t *)v44[1];
      v44[1] = (uint64_t)v118;
      v118 = v46;
      sub_100016EAC((uint64_t)v44);
      sub_100016EAC((uint64_t)v117);
      sub_100016B28(&v118, v117[0]);
LABEL_38:
      sub_100016EAC((uint64_t)&v119);
      sub_100016B28(&v120, v119);
      uint64_t v51 = (void *)v37[1];
      if (v51)
      {
        do
        {
          long long v52 = v51;
          uint64_t v51 = (void *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          long long v52 = (void *)v37[2];
          BOOL v53 = *v52 == (void)v37;
          id v37 = v52;
        }
        while (!v53);
      }
      id v37 = v52;
      if (v52 == &v121[1]) {
        goto LABEL_52;
      }
    }
    v144 = "error";
    unint64_t v146 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v47 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v47;
    *(_OWORD *)&__p[2] = v47;
    sub_1000135DC((uint64_t)&v119, &v144, (uint64_t)__p);
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    *((void *)&buf + 1) = 0;
    *(void *)&long long buf = &v119;
    unint64_t v153 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&buf);
    if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
    {
      uint64_t v48 = sub_1000155C8();
      if (!v48) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v48 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
    }
    if (*(unsigned char *)v48 == 3)
    {
      uint64_t v49 = *(void *)(v48 + 8);
LABEL_36:
      unsigned int v50 = (id)qword_10015EF70;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)v37 + 55) < 0) {
          uint64_t v41 = (void *)*v41;
        }
        long long v54 = "";
        if (v49)
        {
          if (*(char *)(v49 + 23) < 0) {
            long long v54 = *(const char **)v49;
          }
          else {
            long long v54 = (const char *)v49;
          }
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v41;
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = (void *)v54;
        _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "[CD] GetTelephonyInfo: %s unknown: %s", (uint8_t *)__p, 0x16u);
      }

      goto LABEL_38;
    }
LABEL_35:
    uint64_t v49 = 0;
    goto LABEL_36;
  }
LABEL_52:
  id v55 = [objc_alloc((Class)CoreTelephonyClient) initWithQueue:0];
  uint64_t v56 = v55;
  if (v55)
  {
    id v116 = 0;
    id v57 = [v55 getCurrentDataSubscriptionContextSync:&v116];
    id v58 = v116;
    if (v57)
    {
      int v59 = 1;
      goto LABEL_59;
    }
  }
  else
  {
    id v58 = 0;
  }
  v60 = (id)qword_10015EF70;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
    sub_100102EC0(v60);
  }

  int v59 = 0;
  id v57 = 0;
LABEL_59:
  uint64_t v61 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierName");
  if (v56) {
    int v62 = v59;
  }
  else {
    int v62 = 0;
  }
  int v63 = sub_1000612BC((unsigned __int8 *)v61, "<unknown>");
  if (v62 == 1 && v63)
  {
    __int16 v64 = sub_100072CF0(v56, v57);
    v65 = v64;
    if (v64)
    {
      sub_100015438(__p, (char *)[v64 UTF8String]);
      sub_10001C898((uint64_t)v114, (uint64_t)__p);
      char v66 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierName");
      sub_100016EAC((uint64_t)v114);
      unsigned __int8 v67 = *(unsigned char *)v66;
      *(unsigned char *)char v66 = v114[0];
      v114[0] = v67;
      char v68 = (uint64_t *)v66[1];
      v66[1] = (uint64_t)v115;
      v115 = v68;
      sub_100016EAC((uint64_t)v66);
      sub_100016EAC((uint64_t)v114);
      sub_100016B28(&v115, v114[0]);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  unint64_t v69 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierCountry");
  if ((v62 & sub_1000612BC((unsigned __int8 *)v69, "<unknown>")) == 1)
  {
    char v70 = sub_100073120(v56, v57);
    v71 = v70;
    if (v70)
    {
      sub_100015438(__p, (char *)[v70 UTF8String]);
      sub_10001C898((uint64_t)v112, (uint64_t)__p);
      uint64_t v72 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierCountry");
      sub_100016EAC((uint64_t)v112);
      unsigned __int8 v73 = *(unsigned char *)v72;
      *(unsigned char *)uint64_t v72 = v112[0];
      v112[0] = v73;
      v74 = (uint64_t *)v72[1];
      v72[1] = (uint64_t)v113;
      v113 = v74;
      sub_100016EAC((uint64_t)v72);
      sub_100016EAC((uint64_t)v112);
      sub_100016B28(&v113, v112[0]);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  v75 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierBundleVersion");
  if ((v62 & sub_1000612BC((unsigned __int8 *)v75, "<unknown>")) == 1)
  {
    v76 = sub_100072F7C(v56, v57);
    v77 = v76;
    if (v76)
    {
      sub_100015438(__p, (char *)[v76 UTF8String]);
      sub_10001C898((uint64_t)v110, (uint64_t)__p);
      v78 = sub_10000D104((unsigned __int8 *)a2, "homeCarrierBundleVersion");
      sub_100016EAC((uint64_t)v110);
      unsigned __int8 v79 = *(unsigned char *)v78;
      *(unsigned char *)v78 = v110[0];
      v110[0] = v79;
      v80 = (uint64_t *)v78[1];
      v78[1] = (uint64_t)v111;
      v111 = v80;
      sub_100016EAC((uint64_t)v78);
      sub_100016EAC((uint64_t)v110);
      sub_100016B28(&v111, v110[0]);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  v81 = sub_10000D104((unsigned __int8 *)a2, "servingCarrierName");
  if ((v62 & sub_1000612BC((unsigned __int8 *)v81, "<unknown>")) == 1)
  {
    v82 = sub_100073240(v56, v57);
    uint64_t v83 = v82;
    if (v82)
    {
      sub_100015438(__p, (char *)[v82 UTF8String]);
      sub_10001C898((uint64_t)v108, (uint64_t)__p);
      unint64_t v84 = sub_10000D104((unsigned __int8 *)a2, "servingCarrierName");
      sub_100016EAC((uint64_t)v108);
      unsigned __int8 v85 = *(unsigned char *)v84;
      *(unsigned char *)unint64_t v84 = v108[0];
      v108[0] = v85;
      v86 = (uint64_t *)v84[1];
      v84[1] = (uint64_t)v109;
      v109 = v86;
      sub_100016EAC((uint64_t)v84);
      sub_100016EAC((uint64_t)v108);
      sub_100016B28(&v109, v108[0]);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  unint64_t v119 = 0xAAAAAAAAAAAAAAAALL;
  v120 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v87 = *a1;
  sub_100015438(__p, "isDualSim");
  LOBYTE(buf) = 0;
  *((void *)&buf + 1) = 0;
  sub_100016EAC((uint64_t)&buf);
  sub_100016EAC((uint64_t)&buf);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, void **, long long *))(*(void *)v87 + 16))(&v119, v87, __p, &buf);
  sub_100016EAC((uint64_t)&buf);
  sub_100016B28((uint64_t **)&buf + 1, buf);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v144 = "isDualSim";
  unint64_t v146 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v88 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v88;
  *(_OWORD *)&__p[2] = v88;
  sub_1000135DC((uint64_t)&v119, &v144, (uint64_t)__p);
  *(void *)&long long buf = &v119;
  *((void *)&buf + 1) = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  unint64_t v153 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&buf);
  if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    v89 = (unsigned char *)sub_1000155C8();
    if (!v89) {
      goto LABEL_91;
    }
  }
  else
  {
    v89 = sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*v89 == 4)
  {
    v90 = (uint64_t *)v89[8];
    v106[0] = 4;
    v107 = v90;
    sub_100016EAC((uint64_t)v106);
    sub_100016EAC((uint64_t)v106);
    v91 = sub_10000D104((unsigned __int8 *)a2, "isDualSim");
    sub_100016EAC((uint64_t)v106);
    unsigned __int8 v92 = *(unsigned char *)v91;
    *(unsigned char *)v91 = v106[0];
    v106[0] = v92;
    v93 = (uint64_t *)v91[1];
    v91[1] = (uint64_t)v107;
    v107 = v93;
    sub_100016EAC((uint64_t)v91);
    sub_100016EAC((uint64_t)v106);
    sub_100016B28(&v107, v106[0]);
    goto LABEL_101;
  }
LABEL_91:
  v144 = "error";
  unint64_t v146 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v94;
  *(_OWORD *)&__p[2] = v94;
  sub_1000135DC((uint64_t)&v119, &v144, (uint64_t)__p);
  *(void *)&long long buf = &v119;
  *((void *)&buf + 1) = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  unint64_t v153 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&buf);
  if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&buf))
  {
    uint64_t v95 = sub_1000155C8();
    if (!v95) {
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v95 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*(unsigned char *)v95 != 3)
  {
LABEL_97:
    v96 = 0;
    goto LABEL_98;
  }
  v96 = *(const char **)(v95 + 8);
LABEL_98:
  v97 = (id)qword_10015EF70;
  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG)) {
    sub_100102E18(v96, v97);
  }

LABEL_101:
  sub_100016EAC((uint64_t)&v119);
  sub_100016B28(&v120, v119);

  sub_1000BB358((uint64_t)v121, (void *)v121[1]);
  v98 = (id)qword_10015EF70;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a2, -1, 0x20u, 0, 1, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      v99 = __p;
    }
    else {
      v99 = (void **)__p[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v99;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "[CD] GetTelephonyInfo: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1000B9AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  sub_100028D64(&a22);
  if (a66 < 0) {
    operator delete(__p);
  }

  sub_1000BB358((uint64_t)&a35, (void *)a36);
  sub_100028D64(a18);
  _Unwind_Resume(a1);
}

void sub_1000B9E18(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a1, 0, 0, 0, 1);
  sub_100030238((uint64_t)v17, &off_100157880);
  uint64_t v2 = sub_10000D104((unsigned __int8 *)a1, "WiFiChipset");
  sub_100016EAC((uint64_t)v17);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v17[0];
  v17[0] = v3;
  id v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v18;
  unsigned __int8 v18 = v4;
  sub_100016EAC((uint64_t)v2);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  unsigned __int8 v6 = (void *)MGCopyAnswer();
  uint64_t v7 = v6;
  if (v6)
  {
    sub_100015438(__p, (char *)[v6 UTF8String]);
    sub_10001C898((uint64_t)v15, (uint64_t)__p);
    id v8 = sub_10000D104((unsigned __int8 *)a1, "WiFiChipset");
    sub_100016EAC((uint64_t)v15);
    char v9 = *(unsigned char *)v8;
    *(unsigned char *)id v8 = v15[0];
    v15[0] = v9;
    char v10 = (uint64_t *)v8[1];
    v8[1] = (uint64_t)v16;
    unint64_t v16 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v15);
    sub_100016B28(&v16, v15[0]);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  long long v11 = (id)qword_10015EF70;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a1, -1, 0x20u, 0, 1, __p);
    if (v14 >= 0) {
      unsigned __int8 v12 = __p;
    }
    else {
      unsigned __int8 v12 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[CD] GetWiFiInfo: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1000BA06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100028D64(v18);
  _Unwind_Resume(a1);
}

void sub_1000BA0DC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a2, 0, 0, 0, 1);
  sub_100030238((uint64_t)v59, &off_100157880);
  uint64_t v5 = sub_10000D104((unsigned __int8 *)a2, "market");
  sub_100016EAC((uint64_t)v59);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v59[0];
  v59[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v60;
  v60 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v59);
  sub_100016B28(&v60, v59[0]);
  if (sub_1000A79D8())
  {
    unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v56 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v8 = *a1;
    sub_100015438(buf, "locationServicesEnabled");
    LOBYTE(v61) = 0;
    int v62 = 0;
    sub_100016EAC((uint64_t)&v61);
    sub_100016EAC((uint64_t)&v61);
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v8 + 16))(&v55, v8, buf, &v61);
    sub_100016EAC((uint64_t)&v61);
    sub_100016B28(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v51 = "locationServicesEnabled";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v9;
    long long v68 = v9;
    sub_1000135DC((uint64_t)&v55, &v51, (uint64_t)buf);
    uint64_t v61 = (const std::string::value_type **)&v55;
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v61);
    if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      char v10 = (unsigned char *)sub_1000155C8();
      if (!v10)
      {
LABEL_18:
        unsigned __int8 v18 = qword_10015EF70;
        if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[CD] Market: Location services disabled", buf, 2u);
        }
        sub_1000BB44C((uint64_t)v53, "LocationServicesDisabled");
        long long v19 = sub_10000D104((unsigned __int8 *)a2, "market");
        sub_100016EAC((uint64_t)v53);
        char v20 = *(unsigned char *)v19;
        *(unsigned char *)long long v19 = v53[0];
        v53[0] = v20;
        unsigned __int8 v21 = (uint64_t *)v19[1];
        v19[1] = (uint64_t)v54;
        long long v54 = v21;
        sub_100016EAC((uint64_t)v19);
        sub_100016EAC((uint64_t)v53);
        sub_100016B28(&v54, v53[0]);
        goto LABEL_60;
      }
    }
    else
    {
      char v10 = sub_100013AAC((unsigned __int8 **)buf);
    }
    if (*v10 != 4 || !v10[8]) {
      goto LABEL_18;
    }
    uint64_t v51 = (const std::string::value_type *)0xAAAAAAAAAAAAAAAALL;
    long long v52 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v15 = *a1;
    sub_100015438(buf, "locationAuthorizationStatus");
    LOBYTE(v61) = 0;
    int v62 = 0;
    sub_100016EAC((uint64_t)&v61);
    sub_100016EAC((uint64_t)&v61);
    (*(void (**)(const std::string::value_type **__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v15 + 16))(&v51, v15, buf, &v61);
    sub_100016EAC((uint64_t)&v61);
    sub_100016B28(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    long long v47 = "locationAuthorizationStatus";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v16;
    long long v68 = v16;
    sub_1000135DC((uint64_t)&v51, &v47, (uint64_t)buf);
    uint64_t v61 = &v51;
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v61);
    if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      long long v17 = (unsigned char *)sub_1000155C8();
      if (!v17)
      {
LABEL_29:
        long long v25 = qword_10015EF70;
        if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "[CD] Market: Location not authorized", buf, 2u);
        }
        sub_1000BB4E4((uint64_t)v49, "LocationNotAuthorized");
        id v26 = sub_10000D104((unsigned __int8 *)a2, "market");
        sub_100016EAC((uint64_t)v49);
        char v27 = *(unsigned char *)v26;
        *(unsigned char *)id v26 = v49[0];
        v49[0] = v27;
        uint64_t v28 = (uint64_t *)v26[1];
        v26[1] = (uint64_t)v50;
        unsigned int v50 = v28;
        sub_100016EAC((uint64_t)v26);
        sub_100016EAC((uint64_t)v49);
        sub_100016B28(&v50, v49[0]);
        goto LABEL_59;
      }
    }
    else
    {
      long long v17 = sub_100013AAC((unsigned __int8 **)buf);
    }
    if (*v17 != 4 || !v17[8]) {
      goto LABEL_29;
    }
    long long v47 = (const std::string::value_type *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v48 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v22 = *a1;
    sub_100015438(buf, "market");
    LOBYTE(v61) = 0;
    int v62 = 0;
    sub_100016EAC((uint64_t)&v61);
    sub_100016EAC((uint64_t)&v61);
    (*(void (**)(const std::string::value_type **__return_ptr, uint64_t, uint8_t *, const std::string::value_type ***))(*(void *)v22 + 16))(&v47, v22, buf, &v61);
    sub_100016EAC((uint64_t)&v61);
    sub_100016B28(&v62, v61);
    if (SBYTE7(v68) < 0) {
      operator delete(*(void **)buf);
    }
    char v66 = "market";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v23;
    long long v68 = v23;
    sub_1000135DC((uint64_t)&v47, &v66, (uint64_t)buf);
    uint64_t v61 = &v47;
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v61);
    if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      uint64_t v24 = sub_1000155C8();
      if (!v24) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
    }
    if (*(unsigned char *)v24 == 3)
    {
      uint64_t v29 = *(void *)(v24 + 8);
      if (v29)
      {
        if (*(char *)(v29 + 23) < 0 ? *(void *)(v29 + 8) : *(unsigned __int8 *)(v29 + 23))
        {
          uint64_t v31 = qword_10015EF70;
          if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = v29;
            if (*(char *)(v29 + 23) < 0) {
              uint64_t v32 = *(void *)v29;
            }
            *(_DWORD *)long long buf = 136380675;
            *(void *)&uint8_t buf[4] = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "[CD] Market: Reporting market: %{private}s", buf, 0xCu);
          }
          sub_1000168C0((uint64_t)v43, v29);
          unsigned __int8 v33 = sub_10000D104((unsigned __int8 *)a2, "market");
          sub_100016EAC((uint64_t)v43);
          char v34 = *(unsigned char *)v33;
          *(unsigned char *)unsigned __int8 v33 = v43[0];
          v43[0] = v34;
          long long v35 = (uint64_t *)v33[1];
          v33[1] = (uint64_t)v44;
          uint64_t v44 = v35;
          sub_100016EAC((uint64_t)v33);
          sub_100016EAC((uint64_t)v43);
          sub_100016B28(&v44, v43[0]);
          goto LABEL_58;
        }
      }
    }
LABEL_44:
    char v66 = "error";
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v36;
    long long v68 = v36;
    sub_1000135DC((uint64_t)&v47, &v66, (uint64_t)buf);
    uint64_t v61 = &v47;
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v61);
    if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)&v61))
    {
      uint64_t v37 = sub_1000155C8();
      if (!v37) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v37 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
    }
    if (*(unsigned char *)v37 == 3)
    {
      id v38 = *(const char **)(v37 + 8);
LABEL_51:
      uint64_t v39 = qword_10015EF70;
      if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
      {
        if (v38)
        {
          if (v38[23] < 0) {
            id v38 = *(const char **)v38;
          }
        }
        else
        {
          id v38 = "";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[CD] Market: Market unknown: %s", buf, 0xCu);
      }
      sub_10002F72C((uint64_t)v45, "MarketNA");
      long long v40 = sub_10000D104((unsigned __int8 *)a2, "market");
      sub_100016EAC((uint64_t)v45);
      char v41 = *(unsigned char *)v40;
      *(unsigned char *)long long v40 = v45[0];
      v45[0] = v41;
      uint64_t v42 = (uint64_t *)v40[1];
      v40[1] = (uint64_t)v46;
      int v46 = v42;
      sub_100016EAC((uint64_t)v40);
      sub_100016EAC((uint64_t)v45);
      sub_100016B28(&v46, v45[0]);
LABEL_58:
      sub_100016EAC((uint64_t)&v47);
      sub_100016B28(&v48, v47);
LABEL_59:
      sub_100016EAC((uint64_t)&v51);
      sub_100016B28(&v52, v51);
LABEL_60:
      sub_100016EAC((uint64_t)&v55);
      sub_100016B28(&v56, v55);
      goto LABEL_61;
    }
LABEL_50:
    id v38 = 0;
    goto LABEL_51;
  }
  long long v11 = qword_10015EF70;
  if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[CD] Market: Location framework not supported", buf, 2u);
  }
  sub_1000BB3B4((uint64_t)v57, "LocationFrameworkNotSupported");
  unsigned __int8 v12 = sub_10000D104((unsigned __int8 *)a2, "market");
  sub_100016EAC((uint64_t)v57);
  char v13 = *(unsigned char *)v12;
  *(unsigned char *)unsigned __int8 v12 = v57[0];
  v57[0] = v13;
  char v14 = (uint64_t *)v12[1];
  v12[1] = (uint64_t)v58;
  id v58 = v14;
  sub_100016EAC((uint64_t)v12);
  sub_100016EAC((uint64_t)v57);
  sub_100016B28(&v58, v57[0]);
LABEL_61:
}

void sub_1000BAA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  sub_100028D64(&a9);
  sub_100028D64(&a13);
  sub_100028D64(&a17);
  sub_100028D64(&a21);
  sub_100028D64(v21);
  _Unwind_Resume(a1);
}

double sub_1000BAB28()
{
  uint64_t v0 = sub_10005D1F0();
  if (!v0) {
    return -1.0;
  }

  return sub_10002B168(v0);
}

void sub_1000BAB60(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a1, 0, 0, 0, 1);
  sub_100030238((uint64_t)v21, &off_100157880);
  uint64_t v2 = sub_10000D104((unsigned __int8 *)a1, "currentCountry");
  sub_100016EAC((uint64_t)v21);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v21[0];
  v21[0] = v3;
  id v4 = (uint64_t *)v2[1];
  v2[1] = (uint64_t)v22;
  uint64_t v22 = v4;
  sub_100016EAC((uint64_t)v2);
  sub_100016EAC((uint64_t)v21);
  sub_100016B28(&v22, v21[0]);
  char v6 = +[RDEstimate lastKnownEstimates];
  if ([v6 count])
  {
    uint64_t v7 = qword_10015EF70;
    if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138477827;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CD] GetCurrentCountry: lastKnownCountryEstimates returned : %{private}@", buf, 0xCu);
    }
    uint64_t v8 = [v6 objectAtIndexedSubscript:0];
    long long v9 = [v8 countryCode];

    if (v9)
    {
      char v10 = +[NSLocale systemLocale];
      long long v11 = [v10 localizedStringForCountryCode:v9];
    }
    else
    {
      long long v11 = 0;
    }
    unsigned __int8 v12 = sub_100073B6C(v11);
    char v13 = v12;
    if (v12)
    {
      sub_100015438(buf, (char *)[v12 UTF8String]);
      sub_10001C898((uint64_t)v19, (uint64_t)buf);
      char v14 = sub_10000D104((unsigned __int8 *)a1, "currentCountry");
      sub_100016EAC((uint64_t)v19);
      char v15 = *(unsigned char *)v14;
      *(unsigned char *)char v14 = v19[0];
      v19[0] = v15;
      long long v16 = (uint64_t *)v14[1];
      v14[1] = (uint64_t)v20;
      char v20 = v16;
      sub_100016EAC((uint64_t)v14);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      if (v26 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  long long v17 = (id)qword_10015EF70;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a1, -1, 0x20u, 0, 1, buf);
    if (v26 >= 0) {
      unsigned __int8 v18 = buf;
    }
    else {
      unsigned __int8 v18 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v23 = 136380675;
    uint64_t v24 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[CD] CurrentCountry: %{private}s", v23, 0xCu);
    if (v26 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1000BAE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100028D64((uint64_t **)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }

  sub_100028D64(v20);
  _Unwind_Resume(a1);
}

void *sub_1000BAF40(void *a1, char *a2, char **a3)
{
  uint64_t v5 = sub_100015438(a1, a2);
  sub_100015438(v5 + 3, *a3);
  return a1;
}

void sub_1000BAF78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000BAF94(void *a1, char *a2, char **a3)
{
  uint64_t v5 = sub_100015438(a1, a2);
  sub_100015438(v5 + 3, *a3);
  return a1;
}

void sub_1000BAFCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000BAFE8(void *a1, char *a2, char **a3)
{
  uint64_t v5 = sub_100015438(a1, a2);
  sub_100015438(v5 + 3, *a3);
  return a1;
}

void sub_1000BB020(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BB03C(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  id v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_1000BB0C0((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1000BB0A8(_Unwind_Exception *a1)
{
  sub_1000BB358(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1000BB0C0(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = (const void **)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = sub_100018A34(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v12, 170, sizeof(v12));
    sub_1000BB198((uint64_t)a1, a4, v12);
    sub_1000187B0(a1, (uint64_t)v11, v8, (uint64_t *)v12[0]);
    uint64_t v7 = v12[0];
    v12[0] = 0;
    sub_1000BB2A8((uint64_t)v12, 0);
  }
  return v7;
}

char *sub_1000BB198@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = (char *)(a1 + 8);
  memset(a3, 170, 24);
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_1000BB210(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1000BB1F8(_Unwind_Exception *a1)
{
  sub_1000BB2A8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1000BB210(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100017424(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_1000BB28C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BB2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000BB300((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1000BB300(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1000BB358(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000BB358(a1, *a2);
    sub_1000BB358(a1, a2[1]);
    sub_1000BB300((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1000BB3B4(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000BB400(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000BB400(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000BB438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB44C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000BB498(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000BB498(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000BB4D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB4E4(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000BB530(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000BB530(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000BB568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000BB57C()
{
  sub_100015438(qword_10015F078, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015F078, (void *)&_mh_execute_header);
  sub_100015438(qword_10015F090, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015F090, (void *)&_mh_execute_header);
  sub_100015438(qword_10015F0A8, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015F0A8, (void *)&_mh_execute_header);
  sub_100015438(qword_10015F0C0, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015F0C0, (void *)&_mh_execute_header);
}

uint64_t sub_1000BB674@<X0>(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_10001586C((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000157EC(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_100013718(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sub_1000BB6E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  char v14 = &v10[16 * v4];
  long long v16 = &v10[16 * v9];
  sub_100016A10((uint64_t)v14, a2);
  char v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_1000BB7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 **sub_1000BB7FC(unsigned __int8 **result)
{
  if (!*result) {
    sub_100102F30();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] -= 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = *(unsigned __int8 **)v2;
    if (*(void *)v2)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (unsigned __int8 *)*((void *)v3 + 1);
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (v5);
    }
    result[1] = v4;
  }
  else
  {
    --result[4];
  }
  return result;
}

uint64_t sub_1000BB884(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v20 = v12 - a2;
      uint64_t v21 = (uint64_t)(v12 - a2) >> 4;
      if (v21 >= a5)
      {
        uint64_t v22 = a3 + 16 * a5;
      }
      else
      {
        uint64_t v22 = a3 + 16 * v21;
        a1[1] = sub_1000183AC(v9, v22, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_10003F9CC((uint64_t)a1, v5, v12, v5 + 16 * a5);
      sub_10001236C((uint64_t)&v27, v7, v22, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      long long v27 = 0u;
      long long v28 = 0u;
      unint64_t v14 = a5 + ((uint64_t)(v12 - v13) >> 4);
      if (v14 >> 60) {
        sub_100028DEC();
      }
      uint64_t v15 = (a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      uint64_t v17 = v16 >> 3;
      if (v16 >> 3 <= v14) {
        uint64_t v17 = v14;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        long long v19 = (char *)sub_1000171B0(v9, v18);
      }
      else {
        long long v19 = 0;
      }
      uint64_t v23 = (uint64_t)&v19[16 * v15];
      *(void *)&long long v27 = v19;
      *((void *)&v27 + 1) = v23;
      *(void *)&long long v28 = v23;
      *((void *)&v28 + 1) = &v19[16 * v18];
      uint64_t v24 = 16 * a5;
      uint64_t v25 = v23 + 16 * a5;
      do
      {
        sub_100016A10(v23, v7);
        v23 += 16;
        v7 += 16;
        v24 -= 16;
      }
      while (v24);
      *(void *)&long long v28 = v25;
      uint64_t v5 = sub_10003FAB4(a1, &v27, v5);
      sub_100017390((uint64_t)&v27);
    }
  }
  return v5;
}

void sub_1000BBA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 + 8) = v12;
  _Unwind_Resume(exception_object);
}

void sub_1000BBA68(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v7 = a5;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000BC918(a1, &v7, a2, a3, &v6);
  if ((*(unsigned int (**)(void))(*(void *)v6 + 56))(v6))
  {
    *(_OWORD *)a4 = v6;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (*((void *)&v6 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

uint64_t sub_1000BBB2C()
{
  return 3;
}

uint64_t sub_1000BBB34()
{
  return 1;
}

void sub_1000BBB3C(uint64_t a1, uint64_t a2)
{
  sub_100007460(a2, -1, 0x20u, 0, 0, &__p);
  int v3 = v6;
  if ((v6 & 0x80u) != 0) {
    int v3 = v5;
  }
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80))(a1, (v3 + 1));
  if ((char)v6 < 0) {
    operator delete(__p);
  }
}

uint64_t sub_1000BBC00(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("persistToStore", "IdentityTransform.cpp", 50, "initialized()");
  }
  unsigned __int8 v8 = 0;
  sub_100015438(__p, "persisting to store");
  uint64_t v10 = 0;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = off_100157970;
  v4[1] = a1;
  void v4[2] = a2;
  v4[3] = &v8;
  uint64_t v10 = v4;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v9);
  sub_10001266C(v9);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_1000BBD18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000BBD24(void *a1, uint64_t a2, long long *a3)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("acceptEvent", "IdentityTransform.cpp", 64, "initialized()");
  }
  (*(void (**)(void *))(*a1 + 88))(a1);
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100016A10((uint64_t)&v19, *(void *)a3 + 40);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v6;
  v17[1] = v6;
  sub_1000239E4(a2, "transformation", (uint64_t)v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v7;
  v15[1] = v7;
  sub_1000136C8(v15, a2);
  sub_100013648((unsigned __int8 **)v15);
  if (!sub_100013964((unsigned __int8 **)v17, (unsigned __int8 **)v15) && *sub_100063118((unsigned __int8 **)v17) == 2)
  {
    unsigned __int8 v8 = *(void ***)(a1[5] + 24);
    uint64_t v9 = sub_100013AAC((unsigned __int8 **)v17);
    sub_1000D0908(v8, a3, v9, (uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    char v10 = v19;
    LOBYTE(v19) = v13[0];
    v13[0] = v10;
    uint64_t v11 = v20;
    uint64_t v20 = v14;
    unint64_t v14 = v11;
    sub_100016EAC((uint64_t)&v19);
    sub_100016EAC((uint64_t)v13);
    sub_100016B28(&v14, v13[0]);
  }
  sub_1000BBFD0(a1, (uint64_t *)(*(void *)a3 + 16), (uint64_t)&v19);
  sub_100016EAC((uint64_t)&v19);
  sub_100016B28(&v20, v19);
  return 1;
}

void sub_1000BBF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100015438(&a18, "IdentityTransformError");
    sub_100015438(&__p, "transformation");
    if (a2 == 2) {
      sub_1000A5508(v23, (uint64_t)&a18, (uint64_t)&__p, v24);
    }
    else {
      sub_1000A5974(v23, (uint64_t)&a18, (uint64_t)&__p, v24);
    }
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a23 < 0) {
      operator delete(a18);
    }
    __cxa_end_catch();
    JUMPOUT(0x1000BBEACLL);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000BBFD0(void *a1, uint64_t *a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    sub_100102F5C();
  }
  uint64_t v6 = a1[4];
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v7;
  v23[1] = v7;
  sub_1000136C8(v23, v6);
  sub_100014064((unsigned __int8 **)v23);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v8;
  v21[1] = v8;
  sub_1000136C8(v21, v6);
  sub_100013648((unsigned __int8 **)v21);
  for (BOOL result = sub_100013964((unsigned __int8 **)v23, (unsigned __int8 **)v21);
        !result;
        BOOL result = sub_100013964((unsigned __int8 **)v23, (unsigned __int8 **)v21))
  {
    char v10 = sub_100013AAC((unsigned __int8 **)v23);
    if ((sub_1000BC200(a1, v11, (uint64_t)v10, a3) & 1) == 0 && (sub_1000BC3D4((uint64_t)a1, v12, v13, a3) & 1) == 0)
    {
      unint64_t v14 = qword_10015EF48;
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
      {
        sub_1000A5458((uint64_t)a1, __p);
        if (v20 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        uint64_t v16 = sub_100026820((uint64_t)a1);
        if (*(char *)(v16 + 23) >= 0) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = *(void *)v16;
        }
        if (*((char *)a2 + 23) >= 0) {
          unint64_t v18 = a2;
        }
        else {
          unint64_t v18 = (uint64_t *)*a2;
        }
        *(_DWORD *)long long buf = 136446722;
        char v26 = v15;
        __int16 v27 = 2080;
        uint64_t v28 = v17;
        char v29 = 32;
        char v30 = 8;
        uint64_t v31 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}sTransform] ERROR: transform '%s' received event '%s' but was not able to handle it properly", buf, 0x20u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    sub_100013C64((unsigned __int8 **)v23);
  }
  return result;
}

uint64_t sub_1000BC200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    sub_100102F88();
  }
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v7;
  v19[1] = v7;
  sub_1000239E4(a3, "event", (uint64_t)v19);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v8;
  long long v17 = v8;
  sub_1000136C8(__p, a3);
  sub_100013648((unsigned __int8 **)__p);
  if (sub_100013964((unsigned __int8 **)v19, (unsigned __int8 **)__p)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1[5] + 8);
  if (!v9) {
    return 0;
  }
  char v10 = sub_100013AAC((unsigned __int8 **)v19);
  sub_100015064((uint64_t)v10, (std::string *)__p);
  sub_100016A10((uint64_t)v12, a4);
  sub_10008D90C((long long *)__p, (uint64_t)v12, &v14);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, &v14);
  if (v15) {
    sub_1000147D8(v15);
  }
  sub_100016EAC((uint64_t)v12);
  sub_100016B28(&v13, v12[0]);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1000BC38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1000147D8(a12);
  }
  sub_100028D64((uint64_t **)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    sub_100102FB4();
  }

  return sub_1000BBC00(a1, a4);
}

uint64_t sub_1000BC43C(void *a1, uint64_t a2, long long *a3)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("maybeHandleEvent", "IdentityTransform.cpp", 127, "initialized()");
  }
  uint64_t v6 = (unsigned __int8 *)sub_100024940(a2, "event");
  sub_1000168C0((uint64_t)v9, *(void *)a3 + 16);
  uint64_t v7 = sub_10001F600(v6, v9);
  sub_100016EAC((uint64_t)v9);
  sub_100016B28(&v10, v9[0]);
  if (v7) {
    sub_1000BBD24(a1, a2, a3);
  }
  return v7;
}

void sub_1000BC558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000BC564(void *a1, long long *a2)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  if (!sub_100012B9C(a1) && (sub_100012D20((uint64_t)a1, (unsigned char *)a1[3], a2) & 1) == 0)
  {
    uint64_t v4 = a1[3];
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18[0] = v5;
    v18[1] = v5;
    unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    sub_1000136C8(v18, v4);
    sub_100014064((unsigned __int8 **)v18);
    uint64_t v6 = a1[3];
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v7;
    v16[1] = v7;
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    sub_1000136C8(v16, v6);
    sub_100013648((unsigned __int8 **)v16);
    if (sub_100013964((unsigned __int8 **)v18, (unsigned __int8 **)v16))
    {
LABEL_6:
      uint64_t v9 = qword_10015EF48;
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEBUG))
      {
        char v10 = __p;
        sub_1000A5458((uint64_t)a1, __p);
        if (v15 < 0) {
          char v10 = (void **)__p[0];
        }
        uint64_t v11 = sub_100026820((uint64_t)a1);
        if (*(char *)(v11 + 23) >= 0) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = *(void *)v11;
        }
        uint64_t v13 = (void *)(*(void *)a2 + 16);
        if (*(char *)(*(void *)a2 + 39) < 0) {
          uint64_t v13 = (void *)*v13;
        }
        *(_DWORD *)long long buf = 136446722;
        uint64_t v21 = v10;
        __int16 v22 = 2080;
        uint64_t v23 = v12;
        __int16 v24 = 2080;
        uint64_t v25 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%{public}sTransform] WARNING: transform '%s' received event '%s' but did not handle it.", buf, 0x20u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      while (1)
      {
        long long v8 = sub_100013AAC((unsigned __int8 **)v18);
        if (sub_1000BC43C(a1, (uint64_t)v8, a2)) {
          break;
        }
        sub_100013C64((unsigned __int8 **)v18);
        if (sub_100013964((unsigned __int8 **)v18, (unsigned __int8 **)v16)) {
          goto LABEL_6;
        }
      }
    }
  }
}

void *sub_1000BC75C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  v5[0] = off_1001579F0;
  v5[1] = a2;
  v5[2] = a1;
  void v5[3] = v5;
  sub_1000BC824(a1, (uint64_t)v5);
  return sub_1000BCEC8(v5);
}

void sub_1000BC810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BCEC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000BC824(uint64_t a1, uint64_t a2)
{
  sub_100015438(__p, "retrieving events from store");
  v6[0] = off_100157A80;
  v6[1] = a1;
  void v6[2] = a2;
  void v6[3] = v6;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v6);
  sub_10001266C(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000BC8E0(uint64_t a1)
{
  sub_10002094C(a1);

  operator delete();
}

void sub_1000BC918(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  char v10 = operator new(0x90uLL);
  sub_1000BC9AC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1000106D4((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1000BC998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000BC9AC(void *a1, uint64_t a2, double *a3, void *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100157920;
  sub_1000236A4((uint64_t)(a1 + 3), a2, a4, a5, *a3);
  a1[3] = &off_100157898;
  return a1;
}

void sub_1000BCA1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000BCA30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100157920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BCA50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100157920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000BCAA4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000BCAD0()
{
}

__n128 sub_1000BCAE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100157970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000BCB38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000BCB70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_100024914(v2);
  sub_1000BBB3C(v2, *(void *)(a1 + 16));
  uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  **(unsigned char **)(a1 + 24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, uint64_t, void))(*(void *)v4 + 152))(v4, v5, v3, *(unsigned int *)(v2 + 100), *(unsigned int *)(v2 + 108), *(unsigned int *)(v2 + 80), v2 + 88, *(void *)(a1 + 16));

  sub_1000264D8(v2);
}

uint64_t sub_1000BCC44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000BCC84()
{
}

void sub_1000BCC94()
{
}

__n128 sub_1000BCCA8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1001579F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000BCCF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001579F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000BCD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  sub_1000A5E7C(v3, v5, a2, (uint64_t)v7);
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6) {
    sub_100027A78();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v7);
  if (v15 && v14 < 0) {
    operator delete(v13[3]);
  }
  sub_100016EAC((uint64_t)v12);
  sub_100016B28(v13, v12[0]);
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
}

void sub_1000BCE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
  }
  sub_100102FE0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BCE7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000BCEBC()
{
}

void *sub_1000BCEC8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000BCF50()
{
}

__n128 sub_1000BCF64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100157A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000BCFB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1000BCFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72);
  uint64_t v4 = sub_100024914(v2);
  uint64_t v5 = *(void *)(a1 + 16);
  v7[0] = off_100157AF0;
  v7[1] = v5;
  void v7[3] = v7;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 80))(v3, v4, v7);
  return sub_100071270(v7);
}

uint64_t sub_1000BD0A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000BD0E4()
{
}

void sub_1000BD0F4()
{
}

void *sub_1000BD108(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100157AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000BD150(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100157AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000BD17C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v1) {
    sub_100027A78();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1000BD1D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000BD214()
{
}

void *sub_1000BD220(void *a1, uint64_t a2)
{
  __n128 result = sub_100089038(a1, a2);
  *__n128 result = &off_100157B80;
  return result;
}

void sub_1000BD258(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

unsigned __int8 *sub_1000BD290(uint64_t a1, char *a2, uint64_t a3)
{
  sub_1000BD2E0(a1, a2, a3);

  return sub_1000BD508(a1, a2, a3);
}

unsigned __int8 *sub_1000BD2E0(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v6;
  v27[1] = v6;
  sub_1000BB674(a3, (const std::string::value_type **)off_100152188, (uint64_t)v27);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v7;
  long long v25 = v7;
  sub_10001586C(&v24, a3);
  sub_1000157EC((unsigned __int8 **)&v24);
  __n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)v27, (unsigned __int8 **)&v24);
  if ((result & 1) == 0)
  {
    __n128 result = sub_10003D074((unsigned __int8 **)v27);
    if (*result == 2)
    {
      char v9 = sub_10001EE40((unsigned __int8 **)v27);
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v24 = v10;
      long long v25 = v10;
      sub_10001586C(&v24, (uint64_t)v9);
      sub_10001D3E4((unsigned __int8 **)&v24);
      unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v22[0] = v11;
      v22[1] = v11;
      sub_10001586C(v22, (uint64_t)v9);
      sub_1000157EC((unsigned __int8 **)v22);
      for (__n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)&v24, (unsigned __int8 **)v22);
            (result & 1) == 0;
            __n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)&v24, (unsigned __int8 **)v22))
      {
        uint64_t v12 = sub_10001EE40((unsigned __int8 **)&v24);
        if (*v12 != 1) {
          goto LABEL_12;
        }
        uint64_t v13 = v12;
        unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[0] = v14;
        v20[1] = v14;
        sub_10003A370((uint64_t)v12, "type", (uint64_t)v20);
        unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[0] = v15;
        v18[1] = v15;
        sub_10001586C(v18, (uint64_t)v13);
        sub_1000157EC((unsigned __int8 **)v18);
        if (sub_1000205D8((unsigned __int8 **)v20, (unsigned __int8 **)v18)) {
          goto LABEL_12;
        }
        uint64_t v16 = sub_10001EE40((unsigned __int8 **)v20);
        if (sub_1000612BC(v16, "aggregate"))
        {
          if (!sub_1000BDA90(a1, v13)) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v17 = sub_10001EE40((unsigned __int8 **)v20);
          if (!sub_1000612BC(v17, "identity") || !sub_1000BEB9C(a1, v13)) {
            goto LABEL_12;
          }
        }
        sub_1000BF648(a1, a2, (uint64_t)v13);
LABEL_12:
        sub_100013C64((unsigned __int8 **)&v24);
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1000BD508(uint64_t a1, char *a2, uint64_t a3)
{
  if (sub_1000BD6D4(a3, "external_configurations", "externalConfigurations")) {
    sub_1000BD880(a1, a2, "Renamed 'external_configurations' to 'externalConfigurations' (no underscore)");
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v6;
  v18[1] = v6;
  sub_1000BB674(a3, (const std::string::value_type **)off_100152190, (uint64_t)v18);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v7;
  long long v16 = v7;
  sub_10001586C(&v15, a3);
  sub_1000157EC((unsigned __int8 **)&v15);
  __n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)v18, (unsigned __int8 **)&v15);
  if ((result & 1) == 0)
  {
    __n128 result = sub_10003D074((unsigned __int8 **)v18);
    if (*result == 2)
    {
      char v9 = sub_10001EE40((unsigned __int8 **)v18);
      unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v15 = v10;
      long long v16 = v10;
      sub_10001586C(&v15, (uint64_t)v9);
      sub_10001D3E4((unsigned __int8 **)&v15);
      unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[0] = v11;
      v13[1] = v11;
      sub_10001586C(v13, (uint64_t)v9);
      sub_1000157EC((unsigned __int8 **)v13);
      for (__n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)&v15, (unsigned __int8 **)v13);
            (result & 1) == 0;
            __n128 result = (unsigned __int8 *)sub_1000205D8((unsigned __int8 **)&v15, (unsigned __int8 **)v13))
      {
        uint64_t v12 = sub_10001EE40((unsigned __int8 **)&v15);
        if (*v12 == 1)
        {
          if (sub_1000BD6D4((uint64_t)v12, "enable_if", "enableIf")) {
            sub_1000BD880(a1, a2, "Renamed 'enable_if' to 'enableIf' (no underscore) in an external configuration specification");
          }
        }
        sub_100013C64((unsigned __int8 **)&v15);
      }
    }
  }
  return result;
}

uint64_t sub_1000BD6D4(uint64_t a1, const std::string::value_type *a2, const std::string::value_type *a3)
{
  unint64_t v19 = (std::string::value_type *)a3;
  unint64_t v20 = a2;
  *(void *)&v18[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v18 = v4;
  *(_OWORD *)&uint8_t v18[16] = v4;
  sub_1000BB674(a1, &v20, (uint64_t)v18);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v5;
  v16[1] = v5;
  sub_10001586C(v16, a1);
  sub_1000157EC((unsigned __int8 **)v16);
  if (sub_1000205D8((unsigned __int8 **)v18, (unsigned __int8 **)v16)
    || *(unsigned char *)a1 == 1 && sub_100063628(*(void *)(a1 + 8), (const std::string::value_type **)&v19))
  {
    return 0;
  }
  long long v7 = sub_10001EE40((unsigned __int8 **)v18);
  v14[0] = *v7;
  long long v15 = (uint64_t *)*((void *)v7 + 1);
  sub_100016EAC((uint64_t)v7);
  *long long v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100016EAC((uint64_t)v14);
  long long v8 = sub_10000D104((unsigned __int8 *)a1, v19);
  sub_100016EAC((uint64_t)v14);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)long long v8 = v14[0];
  v14[0] = v9;
  long long v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v15;
  long long v15 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v14);
  sub_100016B28(&v15, v14[0]);
  uint64_t v11 = *(void *)v18;
  long long v12 = *(_OWORD *)&v18[8];
  long long v13 = *(_OWORD *)&v18[24];
  sub_10003D1D4((unsigned __int8 *)a1, (uint64_t)&v11, (uint64_t)v16);
  return 1;
}

void sub_1000BD864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000BD880(uint64_t a1, char *a2, char *a3)
{
  unint64_t v19 = a3;
  unint64_t v20 = a2;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v17, 0, 0, 0, 1);
  sub_100030238((uint64_t)v15, &v19);
  long long v4 = sub_10000D104((unsigned __int8 *)&v17, "message");
  sub_100016EAC((uint64_t)v15);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)long long v4 = v15[0];
  v15[0] = v5;
  long long v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v16;
  long long v16 = v6;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v15);
  sub_100016B28(&v16, v15[0]);
  sub_100030238((uint64_t)v13, &v20);
  long long v7 = sub_10000D104((unsigned __int8 *)&v17, "source");
  sub_100016EAC((uint64_t)v13);
  char v8 = *(unsigned char *)v7;
  *(unsigned char *)long long v7 = v13[0];
  v13[0] = v8;
  unsigned __int8 v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v14;
  unint64_t v14 = v9;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v13);
  sub_100016B28(&v14, v13[0]);
  uint64_t v10 = *(void *)(a1 + 8);
  sub_100016A10((uint64_t)v11, (uint64_t)&v17);
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v10 + 32))(v10, "MigratingV1ConfigPass", v11);
  sub_100016EAC((uint64_t)v11);
  sub_100016B28(&v12, v11[0]);
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
}

void sub_1000BDA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1000BDA90(uint64_t a1, unsigned __int8 *a2)
{
  char v84 = -86;
  int v83 = -1431655766;
  v82[0] = sub_1000BD6D4((uint64_t)a2, "enable_if", "enableIf");
  v82[1] = sub_1000BD6D4((uint64_t)a2, "input_transformation", "input_transformation_not_supported_anymore");
  v82[2] = sub_1000BF8D8(a1, a2);
  sub_10003A370((uint64_t)a2, "inputs", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v4;
  *(_OWORD *)&v81[16] = v4;
  sub_10001586C(v81, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v81);
  if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81)) {
    goto LABEL_3;
  }
  sub_10003A370((uint64_t)a2, "event", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v5;
  *(_OWORD *)&v81[16] = v5;
  sub_10001586C(v81, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v81);
  if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
  {
    unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
    v77 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v76, 0, 0, 0, 1);
    v71 = "event";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned __int8 v85 = v7;
    *(_OWORD *)&v85[16] = v7;
    sub_1000BB674((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v81);
    if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unsigned __int8 v73 = (void *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = sub_10001EE40((unsigned __int8 **)v85);
      LOBYTE(v73) = *v8;
      v74 = (uint64_t *)*((void *)v8 + 1);
      sub_100016EAC((uint64_t)v8);
      *uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      sub_100016EAC((uint64_t)&v73);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10003D1D4(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__s.__data_[0] = (char)v73;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
      sub_100016EAC((uint64_t)&v73);
      LOBYTE(v73) = 0;
      v74 = 0;
      sub_100016EAC((uint64_t)&__p);
      uint64_t v9 = sub_10000D104((unsigned __int8 *)&v76, "event");
      sub_100016EAC((uint64_t)&__p);
      std::string::value_type v10 = *(unsigned char *)v9;
      *(unsigned char *)uint64_t v9 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v10;
      std::string::size_type v11 = v9[1];
      v9[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v11;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)&__p);
      sub_100016B28((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_100016EAC((uint64_t)&v73);
      sub_100016B28(&v74, v73);
    }
    v71 = "matching";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned __int8 v85 = v12;
    *(_OWORD *)&v85[16] = v12;
    sub_1000BB674((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v81);
    if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unsigned __int8 v73 = (void *)0xAAAAAAAAAAAAAAAALL;
      long long v13 = sub_10001EE40((unsigned __int8 **)v85);
      LOBYTE(v73) = *v13;
      v74 = (uint64_t *)*((void *)v13 + 1);
      sub_100016EAC((uint64_t)v13);
      unsigned __int8 *v13 = 0;
      *((void *)v13 + 1) = 0;
      sub_100016EAC((uint64_t)&v73);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10003D1D4(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__s.__data_[0] = (char)v73;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
      sub_100016EAC((uint64_t)&v73);
      LOBYTE(v73) = 0;
      v74 = 0;
      sub_100016EAC((uint64_t)&__p);
      unint64_t v14 = sub_10000D104((unsigned __int8 *)&v76, "matching");
      sub_100016EAC((uint64_t)&__p);
      std::string::value_type v15 = *(unsigned char *)v14;
      *(unsigned char *)unint64_t v14 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v15;
      std::string::size_type v16 = v14[1];
      v14[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v16;
      sub_100016EAC((uint64_t)v14);
      sub_100016EAC((uint64_t)&__p);
      sub_100016B28((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_100016EAC((uint64_t)&v73);
      sub_100016B28(&v74, v73);
    }
    v85[0] = v76;
    *(void *)&v85[8] = v77;
    sub_100016EAC((uint64_t)&v76);
    LOBYTE(v76) = 0;
    v77 = 0;
    sub_100016EAC((uint64_t)v85);
    *(void *)&v85[16] = v85;
    v85[24] = 1;
    sub_10001200C((uint64_t)v81, (uint64_t)v85, 1, 0, 2);
    unint64_t v17 = sub_10000D104(a2, "inputs");
    sub_100016EAC((uint64_t)v81);
    char v18 = *(unsigned char *)v17;
    *(unsigned char *)unint64_t v17 = v81[0];
    v81[0] = v18;
    uint64_t v19 = v17[1];
    v17[1] = *(void *)&v81[8];
    *(void *)&v81[8] = v19;
    sub_100016EAC((uint64_t)v17);
    sub_100016EAC((uint64_t)v81);
    sub_100016B28((uint64_t **)&v81[8], v81[0]);
    sub_100016EAC((uint64_t)v85);
    sub_100016B28((uint64_t **)&v85[8], v85[0]);
    sub_100016EAC((uint64_t)&v76);
    sub_100016B28(&v77, v76);
    char v6 = 1;
  }
  else
  {
LABEL_3:
    char v6 = 0;
  }
  LOBYTE(v83) = v6;
  sub_10003A370((uint64_t)a2, "outputs", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v20;
  *(_OWORD *)&v81[16] = v20;
  sub_10001586C(v81, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v81);
  if (sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
  {
    unint64_t v66 = 0xAAAAAAAAAAAAAA02;
    *(void *)unsigned __int8 v85 = 0;
    *(void *)v81 = 0;
    unsigned __int8 v67 = sub_10001220C((uint64_t *)v85, (uint64_t *)v81);
    sub_100016EAC((uint64_t)&v66);
    v71 = "output_event";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned __int8 v85 = v21;
    *(_OWORD *)&v85[16] = v21;
    sub_1000BB674((uint64_t)a2, &v71, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v81);
    if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v22 = sub_10001EE40((unsigned __int8 **)v85);
      LOBYTE(v76) = *v22;
      v77 = (uint64_t *)*((void *)v22 + 1);
      sub_100016EAC((uint64_t)v22);
      unsigned __int8 *v22 = 0;
      *((void *)v22 + 1) = 0;
      sub_100016EAC((uint64_t)&v76);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10003D1D4(a2, (uint64_t)v81, (uint64_t)&__p);
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      __p.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      sub_10001200C((uint64_t)&__p, 0, 0, 0, 1);
      LOBYTE(v73) = v76;
      v74 = v77;
      sub_100016EAC((uint64_t)&v76);
      LOBYTE(v76) = 0;
      v77 = 0;
      sub_100016EAC((uint64_t)&v73);
      unint64_t v23 = sub_10000D104((unsigned __int8 *)&__p, "event");
      sub_100016EAC((uint64_t)&v73);
      char v24 = *(unsigned char *)v23;
      *(unsigned char *)unint64_t v23 = (_BYTE)v73;
      LOBYTE(v73) = v24;
      long long v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v74;
      v74 = v25;
      sub_100016EAC((uint64_t)v23);
      sub_100016EAC((uint64_t)&v73);
      sub_100016B28(&v74, v73);
      sub_100098B20((uint64_t)&v66, (uint64_t)&__p);
      sub_100016EAC((uint64_t)&__p);
      sub_100016B28((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_100016EAC((uint64_t)&v76);
      sub_100016B28(&v77, v76);
    }
    char v70 = "routing";
    *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned __int8 v85 = v26;
    *(_OWORD *)&v85[16] = v26;
    sub_1000BB674((uint64_t)a2, &v70, (uint64_t)v85);
    *(_OWORD *)v81 = (unint64_t)a2;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v81);
    if (!sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81))
    {
      unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v27 = sub_10001EE40((unsigned __int8 **)v85);
      LOBYTE(v68) = *v27;
      unint64_t v69 = (uint64_t *)*((void *)v27 + 1);
      sub_100016EAC((uint64_t)v27);
      *__int16 v27 = 0;
      *((void *)v27 + 1) = 0;
      sub_100016EAC((uint64_t)&v68);
      *(void *)v81 = *(void *)v85;
      *(_OWORD *)&v81[8] = *(_OWORD *)&v85[8];
      *(_OWORD *)&v81[24] = *(_OWORD *)&v85[24];
      sub_10003D1D4(a2, (uint64_t)v81, (uint64_t)&__p);
      unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
      v77 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10001200C((uint64_t)&v76, 0, 0, 0, 1);
      sub_100015438(&v73, "name");
      sub_100024AD0("<unknown-message-name>", (char *)a2, (const void **)&v73, &__p);
      sub_10001C898((uint64_t)&v71, (uint64_t)&__p);
      unint64_t v28 = sub_10000D104((unsigned __int8 *)&v76, "message");
      sub_100016EAC((uint64_t)&v71);
      char v29 = *(unsigned char *)v28;
      *(unsigned char *)unint64_t v28 = (_BYTE)v71;
      LOBYTE(v71) = v29;
      char v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v72;
      uint64_t v72 = v30;
      sub_100016EAC((uint64_t)v28);
      sub_100016EAC((uint64_t)&v71);
      sub_100016B28(&v72, v71);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v75 < 0) {
        operator delete(v73);
      }
      __p.__r_.__value_.__s.__data_[0] = v68;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
      sub_100016EAC((uint64_t)&v68);
      LOBYTE(v68) = 0;
      unint64_t v69 = 0;
      sub_100016EAC((uint64_t)&__p);
      uint64_t v31 = sub_10000D104((unsigned __int8 *)&v76, "sink");
      sub_100016EAC((uint64_t)&__p);
      std::string::value_type v32 = *(unsigned char *)v31;
      *(unsigned char *)uint64_t v31 = __p.__r_.__value_.__s.__data_[0];
      __p.__r_.__value_.__s.__data_[0] = v32;
      std::string::size_type v33 = v31[1];
      v31[1] = __p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = v33;
      sub_100016EAC((uint64_t)v31);
      sub_100016EAC((uint64_t)&__p);
      sub_100016B28((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
      sub_100098B20((uint64_t)&v66, (uint64_t)&v76);
      sub_100016EAC((uint64_t)&v76);
      sub_100016B28(&v77, v76);
      sub_100016EAC((uint64_t)&v68);
      sub_100016B28(&v69, v68);
    }
    if (!(_BYTE)v66) {
      goto LABEL_25;
    }
    if (v66 == 1)
    {
      char v34 = v67;
      if (!v67[2])
      {
LABEL_25:
        char v35 = 0;
LABEL_28:
        sub_100016EAC((uint64_t)&v66);
        sub_100016B28(&v67, v66);
        goto LABEL_29;
      }
    }
    else if (v66 == 2)
    {
      char v34 = v67;
      if (*v67 == v67[1]) {
        goto LABEL_25;
      }
    }
    else
    {
      char v34 = v67;
    }
    v85[0] = v66;
    *(void *)&v85[8] = v34;
    sub_100016EAC((uint64_t)&v66);
    LOBYTE(v66) = 0;
    unsigned __int8 v67 = 0;
    sub_100016EAC((uint64_t)v85);
    long long v36 = sub_10000D104(a2, "outputs");
    sub_100016EAC((uint64_t)v85);
    char v37 = *(unsigned char *)v36;
    *(unsigned char *)long long v36 = v85[0];
    v85[0] = v37;
    uint64_t v38 = v36[1];
    v36[1] = *(void *)&v85[8];
    *(void *)&v85[8] = v38;
    sub_100016EAC((uint64_t)v36);
    sub_100016EAC((uint64_t)v85);
    sub_100016B28((uint64_t **)&v85[8], v85[0]);
    char v35 = 1;
    goto LABEL_28;
  }
  char v35 = 0;
LABEL_29:
  BYTE1(v83) = v35;
  *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unsigned __int8 v85 = v39;
  *(_OWORD *)&v85[16] = v39;
  sub_10003A370((uint64_t)a2, "dimensions", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v40;
  *(_OWORD *)&v81[16] = v40;
  sub_10001586C(v81, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v81);
  if (sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81) || *sub_10003D074((unsigned __int8 **)v85) != 2)
  {
    char v42 = 0;
  }
  else
  {
    char v41 = sub_10001EE40((unsigned __int8 **)v85);
    *(_OWORD *)v81 = (unint64_t)v41;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_10001D3E4((unsigned __int8 **)v81);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v41;
    __p.__r_.__value_.__r.__words[2] = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)&__p);
    char v42 = 0;
    while (!sub_1000205D8((unsigned __int8 **)v81, (unsigned __int8 **)&__p))
    {
      uint64_t v43 = sub_10001EE40((unsigned __int8 **)v81);
      uint64_t v44 = v43;
      if (*v43 == 1
        && sub_10000F860(*((void *)v43 + 1), "name")
        && (*v44 != 1
         || !sub_10000F860(*((void *)v44 + 1), "field")
         && (*v44 != 1 || !sub_10000F860(*((void *)v44 + 1), "expression"))))
      {
        unsigned __int8 v45 = sub_10000D104(v44, "name");
        sub_100016A10((uint64_t)&v73, (uint64_t)v45);
        int v46 = sub_10000D104(v44, "field");
        sub_100016EAC((uint64_t)&v73);
        char v47 = *(unsigned char *)v46;
        *(unsigned char *)int v46 = (_BYTE)v73;
        LOBYTE(v73) = v47;
        uint64_t v48 = (uint64_t *)v46[1];
        v46[1] = (uint64_t)v74;
        v74 = v48;
        sub_100016EAC((uint64_t)v46);
        sub_100016EAC((uint64_t)&v73);
        sub_100016B28(&v74, v73);
        char v42 = 1;
      }
      sub_100013C64((unsigned __int8 **)v81);
    }
  }
  BYTE2(v83) = v42;
  *(void *)&v85[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v49 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v49 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unsigned __int8 v85 = v49;
  *(_OWORD *)&v85[16] = v49;
  sub_10003A370((uint64_t)a2, "measures", (uint64_t)v85);
  *(void *)&v81[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v81 = v50;
  *(_OWORD *)&v81[16] = v50;
  sub_10001586C(v81, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v81);
  if (sub_1000205D8((unsigned __int8 **)v85, (unsigned __int8 **)v81) || *sub_10003D074((unsigned __int8 **)v85) != 2)
  {
    char v52 = 0;
  }
  else
  {
    uint64_t v51 = sub_10001EE40((unsigned __int8 **)v85);
    *(_OWORD *)v81 = (unint64_t)v51;
    *(_OWORD *)&v81[16] = 0uLL;
    *(void *)&v81[32] = 0x8000000000000000;
    sub_10001D3E4((unsigned __int8 **)v81);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v51;
    __p.__r_.__value_.__r.__words[2] = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)&__p);
    char v52 = 0;
    while (!sub_1000205D8((unsigned __int8 **)v81, (unsigned __int8 **)&__p))
    {
      BOOL v53 = sub_10001EE40((unsigned __int8 **)v81);
      uint64_t v54 = (uint64_t)v53;
      if (*v53 == 1)
      {
        if (sub_10000F860(*((void *)v53 + 1), "name")
          && (*(unsigned char *)v54 != 1
           || !sub_10000F860(*(void *)(v54 + 8), "field")
           && (*(unsigned char *)v54 != 1 || !sub_10000F860(*(void *)(v54 + 8), "expression"))))
        {
          unint64_t v55 = sub_10000D104((unsigned __int8 *)v54, "function");
          if (sub_10005E5D4((unsigned __int8 *)v55, "count"))
          {
            uint64_t v56 = sub_10000D104((unsigned __int8 *)v54, "name");
            sub_100016A10((uint64_t)&v76, (uint64_t)v56);
            id v57 = sub_10000D104((unsigned __int8 *)v54, "field");
            sub_100016EAC((uint64_t)&v76);
            char v58 = *(unsigned char *)v57;
            *(unsigned char *)id v57 = v76;
            LOBYTE(v76) = v58;
            int v59 = (uint64_t *)v57[1];
            v57[1] = (uint64_t)v77;
            v77 = v59;
            sub_100016EAC((uint64_t)v57);
            sub_100016EAC((uint64_t)&v76);
            sub_100016B28(&v77, v76);
            char v52 = 1;
          }
        }
        if (*(unsigned char *)v54 == 1)
        {
          if (sub_10000F860(*(void *)(v54 + 8), "function"))
          {
            v60 = sub_10000D104((unsigned __int8 *)v54, "function");
            if (sub_1000612BC((unsigned __int8 *)v60, "count"))
            {
              if (*(unsigned char *)v54 == 1 && sub_10000F860(*(void *)(v54 + 8), "expression"))
              {
                sub_100015438(&v73, "expression");
                sub_100060E10(v54, (const void **)&v73);
                if (v75 < 0) {
                  operator delete(v73);
                }
                char v52 = 1;
              }
            }
          }
        }
      }
      sub_100013C64((unsigned __int8 **)v81);
    }
  }
  HIBYTE(v83) = v52;
  char v61 = sub_1000BD6D4((uint64_t)a2, "routing", "routing_renamed_because_not_used");
  uint64_t v62 = 0;
  char v84 = v61;
  do
  {
    int v63 = v82[v62];
    if (v82[v62]) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = v62 == 7;
    }
    ++v62;
  }
  while (!v64);
  return v63 != 0;
}

void sub_1000BE984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned __int8 a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100016EAC((uint64_t)&a25);
  sub_100016B28(v34, a25);
  sub_100016EAC((uint64_t)&__p);
  sub_100016B28(v33, __p);
  sub_100016EAC((uint64_t)&a23);
  sub_100016B28((uint64_t **)&a24, a23);
  _Unwind_Resume(a1);
}

BOOL sub_1000BEB9C(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v51 = -21846;
  v50[0] = sub_1000BD6D4((uint64_t)a2, "enable_if", "enableIf");
  v50[1] = sub_1000BF8D8(a1, a2);
  sub_10003A370((uint64_t)a2, "inputs", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v4;
  *(_OWORD *)&v46[16] = v4;
  sub_10001586C(v46, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v46);
  if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46)) {
    goto LABEL_3;
  }
  sub_10003A370((uint64_t)a2, "event", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v5;
  *(_OWORD *)&v46[16] = v5;
  sub_10001586C(v46, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v46);
  if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
  {
    unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
    unsigned __int8 v45 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v44, 0, 0, 0, 1);
    long long v40 = "event";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v7;
    *(_OWORD *)&v52[16] = v7;
    sub_1000BB674((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v46);
    if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = sub_10001EE40((unsigned __int8 **)v52);
      LOBYTE(v48) = *v8;
      long long v49 = (uint64_t *)*((void *)v8 + 1);
      sub_100016EAC((uint64_t)v8);
      *uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      sub_100016EAC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&unsigned char v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10003D1D4(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v42) = v48;
      v43[0] = v49;
      sub_100016EAC((uint64_t)&v48);
      LOBYTE(v48) = 0;
      long long v49 = 0;
      sub_100016EAC((uint64_t)&v42);
      uint64_t v9 = sub_10000D104((unsigned __int8 *)&v44, "event");
      sub_100016EAC((uint64_t)&v42);
      char v10 = *(unsigned char *)v9;
      *(unsigned char *)uint64_t v9 = v42;
      LOBYTE(v42) = v10;
      std::string::size_type v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v43[0];
      v43[0] = v11;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)&v42);
      sub_100016B28(v43, v42);
      sub_100016EAC((uint64_t)&v48);
      sub_100016B28(&v49, v48);
    }
    long long v40 = "input_transformation";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v12;
    *(_OWORD *)&v52[16] = v12;
    sub_1000BB674((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v46);
    if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      long long v13 = sub_10001EE40((unsigned __int8 **)v52);
      LOBYTE(v48) = *v13;
      long long v49 = (uint64_t *)*((void *)v13 + 1);
      sub_100016EAC((uint64_t)v13);
      unsigned __int8 *v13 = 0;
      *((void *)v13 + 1) = 0;
      sub_100016EAC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&unsigned char v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10003D1D4(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v42) = v48;
      v43[0] = v49;
      sub_100016EAC((uint64_t)&v48);
      LOBYTE(v48) = 0;
      long long v49 = 0;
      sub_100016EAC((uint64_t)&v42);
      unint64_t v14 = sub_10000D104((unsigned __int8 *)&v44, "transformation");
      sub_100016EAC((uint64_t)&v42);
      char v15 = *(unsigned char *)v14;
      *(unsigned char *)unint64_t v14 = v42;
      LOBYTE(v42) = v15;
      std::string::size_type v16 = (uint64_t *)v14[1];
      v14[1] = (uint64_t)v43[0];
      v43[0] = v16;
      sub_100016EAC((uint64_t)v14);
      sub_100016EAC((uint64_t)&v42);
      sub_100016B28(v43, v42);
      sub_100016EAC((uint64_t)&v48);
      sub_100016B28(&v49, v48);
    }
    long long v40 = "matching";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v17;
    *(_OWORD *)&v52[16] = v17;
    sub_1000BB674((uint64_t)a2, &v40, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v46);
    if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
      char v18 = sub_10001EE40((unsigned __int8 **)v52);
      LOBYTE(v48) = *v18;
      long long v49 = (uint64_t *)*((void *)v18 + 1);
      sub_100016EAC((uint64_t)v18);
      unsigned __int8 *v18 = 0;
      *((void *)v18 + 1) = 0;
      sub_100016EAC((uint64_t)&v48);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&unsigned char v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10003D1D4(a2, (uint64_t)v46, (uint64_t)&v42);
      LOBYTE(v42) = v48;
      v43[0] = v49;
      sub_100016EAC((uint64_t)&v48);
      LOBYTE(v48) = 0;
      long long v49 = 0;
      sub_100016EAC((uint64_t)&v42);
      uint64_t v19 = sub_10000D104((unsigned __int8 *)&v44, "matching");
      sub_100016EAC((uint64_t)&v42);
      char v20 = *(unsigned char *)v19;
      *(unsigned char *)uint64_t v19 = v42;
      LOBYTE(v42) = v20;
      long long v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v43[0];
      v43[0] = v21;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)&v42);
      sub_100016B28(v43, v42);
      sub_100016EAC((uint64_t)&v48);
      sub_100016B28(&v49, v48);
    }
    v52[0] = v44;
    *(void *)&v52[8] = v45;
    sub_100016EAC((uint64_t)&v44);
    LOBYTE(v44) = 0;
    unsigned __int8 v45 = 0;
    sub_100016EAC((uint64_t)v52);
    *(void *)&v52[16] = v52;
    v52[24] = 1;
    sub_10001200C((uint64_t)v46, (uint64_t)v52, 1, 0, 2);
    __int16 v22 = sub_10000D104(a2, "inputs");
    sub_100016EAC((uint64_t)v46);
    char v23 = *(unsigned char *)v22;
    *(unsigned char *)__int16 v22 = v46[0];
    v46[0] = v23;
    uint64_t v24 = v22[1];
    v22[1] = *(void *)&v46[8];
    *(void *)&unsigned char v46[8] = v24;
    sub_100016EAC((uint64_t)v22);
    sub_100016EAC((uint64_t)v46);
    sub_100016B28((uint64_t **)&v46[8], v46[0]);
    sub_100016EAC((uint64_t)v52);
    sub_100016B28((uint64_t **)&v52[8], v52[0]);
    sub_100016EAC((uint64_t)&v44);
    sub_100016B28(&v45, v44);
    char v6 = 1;
  }
  else
  {
LABEL_3:
    char v6 = 0;
  }
  LOBYTE(v51) = v6;
  sub_10003A370((uint64_t)a2, "outputs", (uint64_t)v52);
  *(void *)&v46[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v46 = v25;
  *(_OWORD *)&v46[16] = v25;
  sub_10001586C(v46, (uint64_t)a2);
  sub_1000157EC((unsigned __int8 **)v46);
  if (sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
  {
    long long v40 = (const std::string::value_type *)0xAAAAAAAAAAAAAA02;
    *(void *)char v52 = 0;
    *(void *)int v46 = 0;
    char v41 = sub_10001220C((uint64_t *)v52, (uint64_t *)v46);
    sub_100016EAC((uint64_t)&v40);
    char v47 = "output_event";
    *(void *)&v52[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)char v52 = v26;
    *(_OWORD *)&v52[16] = v26;
    sub_1000BB674((uint64_t)a2, &v47, (uint64_t)v52);
    *(_OWORD *)int v46 = (unint64_t)a2;
    *(_OWORD *)&v46[16] = 0uLL;
    *(void *)&v46[32] = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)v46);
    if (!sub_1000205D8((unsigned __int8 **)v52, (unsigned __int8 **)v46))
    {
      unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
      __int16 v27 = sub_10001EE40((unsigned __int8 **)v52);
      LOBYTE(v44) = *v27;
      unsigned __int8 v45 = (uint64_t *)*((void *)v27 + 1);
      sub_100016EAC((uint64_t)v27);
      *__int16 v27 = 0;
      *((void *)v27 + 1) = 0;
      sub_100016EAC((uint64_t)&v44);
      *(void *)int v46 = *(void *)v52;
      *(_OWORD *)&unsigned char v46[8] = *(_OWORD *)&v52[8];
      *(_OWORD *)&v46[24] = *(_OWORD *)&v52[24];
      sub_10003D1D4(a2, (uint64_t)v46, (uint64_t)&v42);
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      v43[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10001200C((uint64_t)&v42, 0, 0, 0, 1);
      LOBYTE(v48) = v44;
      long long v49 = v45;
      sub_100016EAC((uint64_t)&v44);
      LOBYTE(v44) = 0;
      unsigned __int8 v45 = 0;
      sub_100016EAC((uint64_t)&v48);
      unint64_t v28 = sub_10000D104((unsigned __int8 *)&v42, "event");
      sub_100016EAC((uint64_t)&v48);
      char v29 = *(unsigned char *)v28;
      *(unsigned char *)unint64_t v28 = v48;
      LOBYTE(v48) = v29;
      char v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v49;
      long long v49 = v30;
      sub_100016EAC((uint64_t)v28);
      sub_100016EAC((uint64_t)&v48);
      sub_100016B28(&v49, v48);
      sub_100098B20((uint64_t)&v40, (uint64_t)&v42);
      sub_100016EAC((uint64_t)&v42);
      sub_100016B28(v43, v42);
      sub_100016EAC((uint64_t)&v44);
      sub_100016B28(&v45, v44);
    }
    if (!(_BYTE)v40) {
      goto LABEL_21;
    }
    if (v40 == 1)
    {
      uint64_t v31 = v41;
      if (!v41[2])
      {
LABEL_21:
        char v32 = 0;
LABEL_24:
        sub_100016EAC((uint64_t)&v40);
        sub_100016B28(&v41, v40);
        goto LABEL_25;
      }
    }
    else if (v40 == 2)
    {
      uint64_t v31 = v41;
      if (*v41 == v41[1]) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v31 = v41;
    }
    v52[0] = (_BYTE)v40;
    *(void *)&v52[8] = v31;
    sub_100016EAC((uint64_t)&v40);
    LOBYTE(v40) = 0;
    char v41 = 0;
    sub_100016EAC((uint64_t)v52);
    std::string::size_type v33 = sub_10000D104(a2, "outputs");
    sub_100016EAC((uint64_t)v52);
    char v34 = *(unsigned char *)v33;
    *(unsigned char *)std::string::size_type v33 = v52[0];
    v52[0] = v34;
    uint64_t v35 = v33[1];
    v33[1] = *(void *)&v52[8];
    *(void *)&v52[8] = v35;
    sub_100016EAC((uint64_t)v33);
    sub_100016EAC((uint64_t)v52);
    sub_100016B28((uint64_t **)&v52[8], v52[0]);
    char v32 = 1;
    goto LABEL_24;
  }
  char v32 = 0;
LABEL_25:
  uint64_t v36 = 0;
  HIBYTE(v51) = v32;
  do
  {
    int v37 = v50[v36];
    if (v50[v36]) {
      BOOL v38 = 1;
    }
    else {
      BOOL v38 = v36 == 3;
    }
    ++v36;
  }
  while (!v38);
  return v37 != 0;
}

void sub_1000BF510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26)
{
  sub_100016EAC((uint64_t)&a12);
  sub_100016B28(v27, a12);
  sub_100016EAC((uint64_t)&a26);
  sub_100016B28(v26, a26);
  sub_100016EAC((uint64_t)&a17);
  sub_100016B28(&a18, a17);
  _Unwind_Resume(a1);
}

void sub_1000BF648(uint64_t a1, char *a2, uint64_t a3)
{
  long long v25 = a2;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v23, 0, 0, 0, 1);
  sub_1000BFD2C((uint64_t)v21, "Transform migration! You should update the transformation definition!");
  long long v5 = sub_10000D104((unsigned __int8 *)&v23, "message");
  sub_100016EAC((uint64_t)v21);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)long long v5 = v21[0];
  v21[0] = v6;
  long long v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v22;
  __int16 v22 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v21);
  sub_100016B28(&v22, v21[0]);
  sub_100030238((uint64_t)v19, &v25);
  uint64_t v8 = sub_10000D104((unsigned __int8 *)&v23, "source");
  sub_100016EAC((uint64_t)v19);
  char v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v19[0];
  v19[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v20;
  char v20 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v19);
  sub_100016B28(&v20, v19[0]);
  sub_100016A10((uint64_t)v17, a3);
  std::string::size_type v11 = sub_10000D104((unsigned __int8 *)&v23, "newTransformSpec");
  sub_100016EAC((uint64_t)v17);
  char v12 = *(unsigned char *)v11;
  *(unsigned char *)std::string::size_type v11 = v17[0];
  v17[0] = v12;
  long long v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v18;
  char v18 = v13;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  uint64_t v14 = *(void *)(a1 + 8);
  sub_100016A10((uint64_t)v15, (uint64_t)&v23);
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v14 + 32))(v14, "MigratingV1ConfigPass", v15);
  sub_100016EAC((uint64_t)v15);
  sub_100016B28(&v16, v15[0]);
  sub_100016EAC((uint64_t)&v23);
  sub_100016B28(&v24, v23);
}

void sub_1000BF888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
}

uint64_t sub_1000BF8D8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v19[0] = v8;
      v19[1] = v8;
      sub_10001586C(v19, (uint64_t)a2);
      sub_10001D3E4((unsigned __int8 **)v19);
      unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[0] = v9;
      v13[1] = v9;
      sub_10001586C(v13, (uint64_t)a2);
      sub_1000157EC((unsigned __int8 **)v13);
      for (char i = 0; !sub_1000205D8((unsigned __int8 **)v19, (unsigned __int8 **)v13); i |= v11)
      {
        char v10 = sub_10001EE40((unsigned __int8 **)v19);
        char v11 = sub_1000BF8D8(a1, v10);
        sub_100013C64((unsigned __int8 **)v19);
      }
    }
    else if (v3 == 1)
    {
      long long v26 = a2;
      sub_100006184((uint64_t *)&v26, (uint64_t)v19);
      sub_10000626C((uint64_t *)&v26, (uint64_t)v13);
      char i = 0;
      while (!sub_1000205D8((unsigned __int8 **)v19, (unsigned __int8 **)v13))
      {
        char v6 = sub_10001EE40((unsigned __int8 **)v19);
        char v7 = sub_1000BF8D8(a1, v6);
        sub_100013C64((unsigned __int8 **)v19);
        i |= v7;
        ++v21;
      }
      if (v18 < 0) {
        operator delete(__p);
      }
      if (v16 < 0) {
        operator delete(v15);
      }
      if (v25 < 0) {
        operator delete(v24);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
    }
    else
    {
      char i = 0;
    }
    return i & 1;
  }
  if ((sub_1000BFC64((uint64_t)a2, ":get_event", ":getEventMap") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":get_event_name", ":getEventName") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":get_field", ":getEventField") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":set_field", ":setEventField") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":getField", ":getEventField") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":setField", ":setEventField") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":lower_bound", ":lowerBound") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":upper_bound", ":upperBound") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":index_of", ":indexOf") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":is_element", ":isElement") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":get_install_type", ":getInstallType") & 1) != 0
    || (sub_1000BFC64((uint64_t)a2, ":get_build_version", ":getBuildVersion") & 1) != 0)
  {
    char i = 1;
    return i & 1;
  }

  return sub_1000BFC64((uint64_t)a2, ":get_hardware_type", ":getHardwareType");
}

void sub_1000BFC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t sub_1000BFC64(uint64_t a1, char *a2, char *a3)
{
  char v10 = a3;
  uint64_t v4 = sub_1000612BC((unsigned __int8 *)a1, a2);
  if (v4)
  {
    sub_100030238((uint64_t)v8, &v10);
    sub_100016EAC((uint64_t)v8);
    unsigned __int8 v5 = *(unsigned char *)a1;
    *(unsigned char *)a1 = v8[0];
    v8[0] = v5;
    char v6 = *(uint64_t **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    long long v9 = v6;
    sub_100016EAC(a1);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
  }
  return v4;
}

uint64_t sub_1000BFD2C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000BFD78(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000BFD78(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000BFDB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000BFDC4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("loadAllStatisticsFromStore", "AggregatingTransform.cpp", 128, "initialized()");
  }
  sub_100015438(__p, "loading all statistics from store");
  v6[0] = off_100157C98;
  v6[1] = a1;
  void v6[2] = a2;
  void v6[3] = v6;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v6);
  sub_10001266C(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000BFEC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

unsigned __int8 *sub_1000BFED0@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (*(unsigned char *)a2 == 2 && *(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8) >= 0x11uLL)
  {
    char v5 = result;
    __n128 result = (unsigned __int8 *)sub_100012450(a2, 0);
    if (*result == 2)
    {
      __n128 result = (unsigned __int8 *)sub_100012450(a2, 1);
      if (*result == 2)
      {
        __n128 result = (unsigned __int8 *)sub_100012450(a2, 0);
        uint64_t v6 = *result;
        if (*result)
        {
          if (v6 == 1)
          {
            uint64_t v6 = *(void *)(*((void *)result + 1) + 16);
          }
          else if (v6 == 2)
          {
            uint64_t v6 = (uint64_t)(*(void *)(*((void *)result + 1) + 8) - **((void **)result + 1)) >> 4;
          }
          else
          {
            uint64_t v6 = 1;
          }
        }
        char v7 = (unsigned __int8 *)*((void *)v5 + 15);
        uint64_t v8 = *v7;
        if (*v7)
        {
          if (v8 == 1)
          {
            uint64_t v8 = *(void *)(*((void *)v7 + 1) + 16);
          }
          else if (v8 == 2)
          {
            uint64_t v8 = (uint64_t)(*(void *)(*((void *)v7 + 1) + 8) - **((void **)v7 + 1)) >> 4;
          }
          else
          {
            uint64_t v8 = 1;
          }
        }
        if (v6 == v8)
        {
          __n128 result = (unsigned __int8 *)sub_100012450(a2, 1);
          uint64_t v9 = *result;
          if (*result)
          {
            if (v9 == 1)
            {
              uint64_t v9 = *(void *)(*((void *)result + 1) + 16);
            }
            else if (v9 == 2)
            {
              uint64_t v9 = (uint64_t)(*(void *)(*((void *)result + 1) + 8) - **((void **)result + 1)) >> 4;
            }
            else
            {
              uint64_t v9 = 1;
            }
          }
          char v10 = (unsigned __int8 *)*((void *)v5 + 16);
          uint64_t v11 = *v10;
          if (*v10)
          {
            if (v11 == 1)
            {
              uint64_t v11 = *(void *)(*((void *)v10 + 1) + 16);
            }
            else if (v11 == 2)
            {
              uint64_t v11 = (uint64_t)(*(void *)(*((void *)v10 + 1) + 8) - **((void **)v10 + 1)) >> 4;
            }
            else
            {
              uint64_t v11 = 1;
            }
          }
          if (v9 == v11)
          {
            uint64_t v12 = sub_100012450(a2, 0);
            unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v27[0] = v13;
            v27[1] = v13;
            unint64_t v14 = (unsigned __int8 **)sub_1000136C8(v27, v12);
            sub_100014064(v14);
            uint64_t v15 = sub_100012450(a2, 0);
            unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v25[0] = v16;
            v25[1] = v16;
            sub_1000136C8(v25, v15);
            sub_100013648((unsigned __int8 **)v25);
            sub_1000C0198((uint64_t *)v27, (uint64_t)v25, (uint64_t *)a3);
            uint64_t v17 = sub_100012450(a2, 1);
            unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v23[0] = v18;
            v23[1] = v18;
            sub_1000136C8(v23, v17);
            sub_100014064((unsigned __int8 **)v23);
            uint64_t v19 = sub_100012450(a2, 1);
            unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v21[0] = v20;
            v21[1] = v20;
            sub_1000136C8(v21, v19);
            sub_100013648((unsigned __int8 **)v21);
            return (unsigned __int8 *)sub_1000C0198((uint64_t *)v23, (uint64_t)v21, (uint64_t *)(a3 + 24));
          }
        }
      }
    }
  }
  return result;
}

void sub_1000C0184(_Unwind_Exception *a1)
{
  sub_1000C0248(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C0198(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  long long v11 = *(_OWORD *)(a1 + 1);
  long long v12 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = *(unsigned __int8 **)a2;
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = v5;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = v5;
  long long v14 = v5;
  v13[0] = v5;
  uint64_t v10 = v3;
  char v7 = v4;
  sub_1000C1A0C((uint64_t)&v10, &v7, a3, (uint64_t)v13);
  return *((void *)&v14 + 1);
}

void **sub_1000C0248(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_100016F68(&v3);
  uint64_t v3 = a1;
  sub_100016F68(&v3);
  return a1;
}

uint64_t sub_1000C02BC(void *a1)
{
  (*(void (**)(void *))(*a1 + 40))(a1);
  sub_1000A54CC((uint64_t)a1);
  uint64_t v3 = (void **)a1[17];
  uint64_t v2 = (uint64_t)(a1 + 17);
  sub_10001EAF0(v2, v3);

  return sub_10001C900((uint64_t *)(v2 + 56), 0);
}

void sub_1000C032C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  memset(v12, 0, sizeof(v12));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *(void *)&long long v9 = v12;
  while (v5 != v6)
  {
    sub_100007460(v5, -1, 0x20u, 0, 1, __p);
    sub_1000C08A4((uint64_t **)&v9, (long long *)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    v5 += 16;
  }
  memset(v11, 0, sizeof(v11));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v15 = v11;
  while (v8 != v7)
  {
    sub_100007460(v8, -1, 0x20u, 0, 1, __p);
    sub_1000C08A4(&v15, (long long *)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    v8 += 16;
  }
  sub_1000C0780(" ", v12, (uint64_t)__p);
  sub_1000C0780(" ", v11, (uint64_t)&v9);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(void *)(a3 + 16) = v14;
  *(_OWORD *)(a3 + 24) = v9;
  *(void *)(a3 + 40) = v10;
  __p[0] = v11;
  sub_10002A71C((void ***)__p);
  __p[0] = v12;
  sub_10002A71C((void ***)__p);
}

void sub_1000C04AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  a9 = &a12;
  sub_10002A71C((void ***)&a9);
  a12 = &a15;
  sub_10002A71C((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1000C053C(uint64_t *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  memset(v6, 170, sizeof(v6));
  sub_1000A6B60(a1[15], (uint64_t)v6);
  memset(__p, 170, sizeof(__p));
  sub_1000A6B60(a1[16], (uint64_t)__p);
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = off_100157F18;
  v4[1] = a1;
  void v4[2] = v6;
  v4[3] = __p;
  v4[4] = a2;
  void v7[3] = v4;
  sub_1000BFDC4((uint64_t)a1, (uint64_t)v7);
  sub_1000C26A0(v7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1000C0688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C06C4(uint64_t a1)
{
  *(void *)a1 = off_100157BC0;
  sub_10001C900((uint64_t *)(a1 + 192), 0);
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v3 = (void **)(a1 + 136);
    sub_10001D120(&v3);
  }
  sub_10002094C(a1);
  operator delete();
}

uint64_t *sub_1000C0780@<X0>(char *__s@<X1>, uint64_t *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (std::string::value_type *)v5;
  }
  else {
    uint64_t v8 = *(std::string::value_type **)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (__n128 result = (uint64_t *)sub_1000C0A18((std::string *)a3, a3, v8, &v8[v9], v9);
        ;
        __n128 result = (uint64_t *)sub_1000C0A18((std::string *)a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    uint64_t v12 = v11 + v10;
    std::string::size_type v13 = strlen(__s);
    sub_1000C0D4C((std::string *)a3, v12, __s, &__s[v13], v13);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v16 = v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      long long v18 = (std::string::value_type *)v5;
    }
    else {
      long long v18 = *(std::string::value_type **)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }
  return result;
}

void sub_1000C0884(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_1000C08A4(uint64_t **a1, long long *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100028DEC();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint8_t v20[4] = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_10002AC98(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    void v20[3] = &v16[24 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    _OWORD v20[2] = v17 + 24;
    sub_10002AC20(v4, v20);
    uint64_t v11 = v4[1];
    sub_10002AE30((uint64_t)v20);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_1000C0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000C0A18(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    memset(&__p, 170, sizeof(__p));
    sub_1000C0CC4(&__p, a3, a4);
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    uint64_t v12 = sub_1000C0BA8(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }

  return sub_1000C0BA8(this, __n_add, v7, a3, a4);
}

void sub_1000C0B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C0BA8(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  unint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    unint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void sub_1000C0CC4(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_1000C0D1C(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1000C0D38(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C0D4C(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    memset(&__p, 170, sizeof(__p));
    sub_1000C0EDC(&__p, a3, a4);
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    uint64_t v12 = sub_1000C0BA8(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }

  return sub_1000C0BA8(this, __n_add, v7, a3, a4);
}

void sub_1000C0EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0EDC(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_1000C0F34(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1000C0F50(_Unwind_Exception *a1)
{
}

void sub_1000C0F64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v14 = 0.0;
  if (sub_100026CE8(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      uint64_t v4 = (uint64_t **)&v13;
      v12[0] = 7;
      double v13 = v14;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      double v9 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v13;
      double v13 = v9;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v12);
      int v7 = v12[0];
    }
    else
    {
      double v15 = NAN;
      sub_100026DA0(a1, &v15);
      double v3 = v15;
      uint64_t v4 = (uint64_t **)&v11;
      if (v14 < v15) {
        double v3 = v14;
      }
      v10[0] = 7;
      double v11 = v3;
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      double v6 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v11;
      double v11 = v6;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v10);
      int v7 = v10[0];
    }
    sub_100016B28(v4, v7);
  }
}

void sub_1000C10D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v14 = 0;
  if (sub_10001C67C(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      uint64_t v4 = (uint64_t **)&v13;
      v12[0] = 5;
      uint64_t v13 = v14;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v13;
      uint64_t v13 = v9;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v12);
      int v7 = v12[0];
    }
    else
    {
      uint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724(a1, &v15);
      uint64_t v3 = v15;
      uint64_t v4 = (uint64_t **)&v11;
      if (v14 < v15) {
        uint64_t v3 = v14;
      }
      v10[0] = 5;
      uint64_t v11 = v3;
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      uint64_t v6 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v11;
      uint64_t v11 = v6;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v10);
      int v7 = v10[0];
    }
    sub_100016B28(v4, v7);
  }
}

void sub_1000C1244(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v14 = 0.0;
  if (sub_100026CE8(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      uint64_t v4 = (uint64_t **)&v13;
      v12[0] = 7;
      double v13 = v14;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      double v9 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v13;
      double v13 = v9;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v12);
      int v7 = v12[0];
    }
    else
    {
      double v15 = NAN;
      sub_100026DA0(a1, &v15);
      double v3 = v15;
      uint64_t v4 = (uint64_t **)&v11;
      if (v15 < v14) {
        double v3 = v14;
      }
      v10[0] = 7;
      double v11 = v3;
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      double v6 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v11;
      double v11 = v6;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v10);
      int v7 = v10[0];
    }
    sub_100016B28(v4, v7);
  }
}

void sub_1000C13B4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    sub_100016A10((uint64_t)v5, a2);
    sub_100016EAC((uint64_t)v5);
    char v3 = *(unsigned char *)a1;
    *(unsigned char *)a1 = v5[0];
    v5[0] = v3;
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    double v6 = v4;
    sub_100016EAC(a1);
    sub_100016EAC((uint64_t)v5);
    sub_100016B28(&v6, v5[0]);
  }
}

void sub_1000C1464(uint64_t a1, uint64_t a2)
{
  sub_100016A10((uint64_t)v5, a2);
  sub_100016EAC((uint64_t)v5);
  char v3 = *(unsigned char *)a1;
  *(unsigned char *)a1 = v5[0];
  v5[0] = v3;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  double v6 = v4;
  sub_100016EAC(a1);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
}

void sub_1000C150C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100157C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000C152C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100157C48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000C1584()
{
}

__n128 sub_1000C1598(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100157C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000C15E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1000C1614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72);
  uint64_t v4 = sub_100024914(v2);
  uint64_t v5 = *(void *)(a1 + 16);
  v7[0] = off_100157D08;
  v7[1] = v5;
  void v7[3] = v7;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 80))(v3, v4, v7);
  return sub_100071270(v7);
}

uint64_t sub_1000C16D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000C1718()
{
}

void sub_1000C1728()
{
}

void *sub_1000C173C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100157D08;
  result[1] = v3;
  return result;
}

uint64_t sub_1000C1784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100157D08;
  a2[1] = v2;
  return result;
}

void sub_1000C17B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAA02;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned __int8 v8 = sub_10001220C(&v10, &v9);
  sub_100016EAC((uint64_t)&v7);
  sub_100098B20((uint64_t)&v7, a2);
  sub_100098B20((uint64_t)&v7, a3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v6) {
    sub_100027A78();
  }
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v6 + 48))(v6, &v7);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_1000C18AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1000C18D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000C1914()
{
}

void sub_1000C1924()
{
}

__n128 sub_1000C1938(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100157D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000C198C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000C19C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000C1A00()
{
}

__n128 sub_1000C1A0C@<Q0>(uint64_t a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v10 = a3;
  if (!sub_100013964((unsigned __int8 **)a1, a2))
  {
    do
    {
      unsigned __int8 v8 = sub_100013AAC((unsigned __int8 **)a1);
      sub_10001FCF0(&v10, (uint64_t)v8);
      sub_100013C64((unsigned __int8 **)a1);
    }
    while (!sub_100013964((unsigned __int8 **)a1, a2));
    uint64_t v4 = v10;
  }
  *(void *)a4 = *(void *)a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v4;
  return result;
}

void sub_1000C1AD8()
{
}

__n128 sub_1000C1AEC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100157E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000C1B38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000C1B64(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000C1BA4()
{
}

void sub_1000C1BB4()
{
}

void *sub_1000C1BC8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100157E98;
  result[1] = v3;
  return result;
}

uint64_t sub_1000C1C10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100157E98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000C1C38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000C1C78()
{
}

void sub_1000C1C84(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_10001EAF0(a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t sub_1000C1CC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 16 * a2;
    do
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      sub_100016EAC(v3);
      __n128 result = sub_100016EAC(v3);
      v3 += 16;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

uint64_t sub_1000C1D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_100012330((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(void *)(a4 + 16) = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    sub_100012330((void **)(a4 + 24));
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 + 24);
    *(void *)(a4 + 40) = *(void *)(v5 + 40);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    a4 += 48;
    v5 += 48;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1000C1DB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[6 * a3];
    do
    {
      *uint64_t v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      void v3[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v3[3] = 0;
      v3[4] = 0;
      v3[5] = 0;
      *(_OWORD *)(v3 + 3) = *(_OWORD *)(a2 + 24);
      v3[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v3 += 6;
      a2 += 48;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

void sub_1000C1E24(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_1000C1E9C(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1000C1E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (char i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 3;
    sub_100016F68(&v6);
    uint64_t v6 = i;
    sub_100016F68(&v6);
    char i = (void **)(*(void *)(a2 + 32) + 48);
  }
}

void sub_1000C1F40(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    do
    {
      uint64_t v6 = a3 - 6;
      uint64_t v7 = a3 - 3;
      sub_100016F68(&v7);
      uint64_t v7 = v6;
      sub_100016F68(&v7);
      a3 = v6;
    }
    while (v6 != a5);
  }
}

void sub_1000C1FCC()
{
}

__n128 sub_1000C1FE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_100157F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000C2034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000C206C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v4;
  v13[1] = v4;
  long long v12 = v4;
  sub_1000BFED0(v3, a2, (uint64_t)&v12);
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v10, 0, 0, 0, 1);
  sub_100015438(__p, "emitting single statistic");
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v6 = off_100157F98;
  *((void *)v6 + 1) = &v12;
  *((void *)v6 + 2) = &v10;
  *(_OWORD *)(v6 + 24) = v7;
  *((void *)v6 + 5) = v5;
  *((void *)v6 + 6) = v3;
  void v14[3] = (void **)v6;
  sub_1000127AC((uint64_t)v3, (uint64_t)__p, (uint64_t)v14);
  sub_10001266C(v14);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_100016EAC((uint64_t)&v10);
  sub_100016B28(&v11, v10);
  v14[0] = (void **)v13 + 1;
  sub_100016F68(v14);
  v14[0] = (void **)&v12;
  sub_100016F68(v14);
}

void sub_1000C21B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100016EAC((uint64_t)&a18);
  sub_100016B28((uint64_t **)&a19, a18);
  *(void *)(v23 - 72) = &a23;
  sub_100016F68((void ***)(v23 - 72));
  *(void *)(v23 - 72) = &a20;
  sub_100016F68((void ***)(v23 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2224(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000C2264()
{
}

void sub_1000C2274()
{
}

__n128 sub_1000C2288(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_100157F98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1000C22E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100157F98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000C2324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[1] - *v3;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if ((unint64_t)(v4 >> 4) <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v4 >> 4;
    }
    do
    {
      uint64_t v8 = **(void **)(a1 + 8) + v5;
      v26[0] = *(unsigned char *)v8;
      __int16 v27 = *(uint64_t **)(v8 + 8);
      sub_100016EAC(v8);
      *(unsigned char *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      sub_100016EAC((uint64_t)v26);
      char v9 = sub_10000D104(*(unsigned __int8 **)(a1 + 16), *(char **)(**(void **)(a1 + 24) + 8 * v6));
      sub_100016EAC((uint64_t)v26);
      char v10 = *(unsigned char *)v9;
      *(unsigned char *)char v9 = v26[0];
      v26[0] = v10;
      uint64_t v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v27;
      __int16 v27 = v11;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v26);
      sub_100016B28(&v27, v26[0]);
      ++v6;
      v5 += 16;
    }
    while (v7 != v6);
    long long v3 = *(void **)(a1 + 8);
  }
  uint64_t v12 = v3[4] - v3[3];
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = v12 >> 4;
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v15;
    }
    do
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 24) + v13;
      v24[0] = *(unsigned char *)v17;
      char v25 = *(uint64_t **)(v17 + 8);
      sub_100016EAC(v17);
      *(unsigned char *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;
      sub_100016EAC((uint64_t)v24);
      long long v18 = sub_10000D104(*(unsigned __int8 **)(a1 + 16), *(char **)(**(void **)(a1 + 32) + 8 * v14));
      sub_100016EAC((uint64_t)v24);
      char v19 = *(unsigned char *)v18;
      *(unsigned char *)long long v18 = v24[0];
      v24[0] = v19;
      long long v20 = (uint64_t *)v18[1];
      v18[1] = (uint64_t)v25;
      char v25 = v20;
      sub_100016EAC((uint64_t)v18);
      sub_100016EAC((uint64_t)v24);
      sub_100016B28(&v25, v24[0]);
      ++v14;
      v13 += 16;
    }
    while (v16 != v14);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  sub_1000A5E7C(v2, v22, *(void *)(a1 + 16), (uint64_t)v28);
  uint64_t v23 = *(void *)(v21 + 24);
  if (!v23) {
    sub_100027A78();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 48))(v23, v28);
  if (v36 && v35 < 0) {
    operator delete(v34[3]);
  }
  sub_100016EAC((uint64_t)v33);
  sub_100016B28(v34, v33[0]);
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
}

void sub_1000C25F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0) {
      operator delete(__p);
    }
  }
  sub_100102FE0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2654(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000C2694()
{
}

void *sub_1000C26A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000C2724(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, 2 * a2);
  if (a2 >= 1)
  {
    uint64_t v6 = &a1[a2];
    do
    {
      std::string::push_back(a3, a0123456789abcd[(unint64_t)*a1 >> 4]);
      std::string::push_back(a3, a0123456789abcd[*a1++ & 0xF]);
    }
    while (a1 < v6);
  }
}

void sub_1000C27B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000C27D0()
{
  int v26 = -1431655766;
  *(void *)&long long v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v0;
  long long v25 = v0;
  long long v22 = v0;
  long long v23 = v0;
  long long v20 = v0;
  long long v21 = v0;
  long long v18 = v0;
  long long v19 = v0;
  long long v16 = v0;
  long long v17 = v0;
  long long v14 = v0;
  long long v15 = v0;
  long long v12 = v0;
  long long v13 = v0;
  long long v11 = v0;
  long long v9 = v0;
  long long v10 = v0;
  long long v7 = v0;
  long long v8 = v0;
  long long v5 = v0;
  long long v6 = v0;
  *(_OWORD *)task_info_out = v0;
  long long v4 = v0;
  mach_msg_type_number_t task_info_outCnt = 93;
  if (task_info(mach_task_self_, 0x16u, task_info_out, &task_info_outCnt)) {
    return -1;
  }
  else {
    return ((*((void *)&v13 + 1) + (v13 < 0 ? 0x3FFuLL : 0)) << 22) & 0xFFFFFFFF00000000 | ((unint64_t)v12 >> 10);
  }
}

uint64_t sub_1000C28AC()
{
  return 6000;
}

void sub_1000C28B4(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0;
  *(unsigned char *)a2 = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  xpc_type_t type = xpc_get_type(*a1);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v8 = sub_10001200C((uint64_t)v65, 0, 0, 0, 1);
    sub_100016EAC(v8);
    unsigned __int8 v9 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v65[0];
    v65[0] = v9;
    long long v10 = (uint64_t *)a2[1];
    a2[1] = v66;
    unint64_t v66 = v10;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v65);
    sub_100016B28(&v66, v65[0]);
    xpc_object_t v11 = *a1;
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 0x40000000;
    applier[2] = sub_1000C3194;
    applier[3] = &unk_100158018;
    applier[4] = a2;
    xpc_dictionary_apply(v11, applier);
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    *(void *)uuid_string_t out = xpc_string_get_string_ptr(*a1);
    uint64_t v12 = sub_100030238((uint64_t)v62, (char **)out);
    sub_100016EAC(v12);
    unsigned __int8 v13 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v62[0];
    v62[0] = v13;
    long long v14 = (uint64_t *)a2[1];
    a2[1] = v63;
    int v63 = v14;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v62);
    sub_100016B28(&v63, v62[0]);
    sub_100007460((uint64_t)a2, -1, 0x20u, 0, 0, &__p);
    if ((v61 & 0x80000000) == 0) {
      return;
    }
    long long v15 = __p;
    goto LABEL_15;
  }
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(*a1);
    long long v17 = (uint64_t **)&v59;
    v58[0] = 5;
    int64_t v59 = value;
    sub_100016EAC((uint64_t)v58);
    sub_100016EAC((uint64_t)v58);
    sub_100016EAC((uint64_t)v58);
    unsigned __int8 v18 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v58[0];
    v58[0] = v18;
    int64_t v19 = a2[1];
    a2[1] = v59;
    int64_t v59 = v19;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v58);
    int v20 = v58[0];
    goto LABEL_17;
  }
  if (type != (xpc_type_t)&_xpc_type_array)
  {
    if (type != (xpc_type_t)&_xpc_type_data)
    {
      if (type == (xpc_type_t)&_xpc_type_BOOL)
      {
        BOOL v34 = xpc_BOOL_get_value(*a1);
        long long v17 = (uint64_t **)&v53;
        v52[0] = 4;
        BOOL v53 = v34;
        sub_100016EAC((uint64_t)v52);
        sub_100016EAC((uint64_t)v52);
        sub_100016EAC((uint64_t)v52);
        unsigned __int8 v35 = *(unsigned char *)a2;
        *(unsigned char *)a2 = v52[0];
        v52[0] = v35;
        uint64_t v36 = a2[1];
        a2[1] = v53;
        BOOL v53 = v36;
        sub_100016EAC((uint64_t)a2);
        sub_100016EAC((uint64_t)v52);
        int v20 = v52[0];
      }
      else
      {
        if (type != (xpc_type_t)&_xpc_type_uint64)
        {
          if (type == (xpc_type_t)&_xpc_type_null)
          {
            v48[0] = 0;
            uint64_t v49 = 0;
            sub_100016EAC((uint64_t)v48);
            sub_100016EAC((uint64_t)v48);
            sub_1000C313C((uint64_t)a2, (uint64_t)v48);
            long long v7 = (uint64_t **)v48;
          }
          else if (type == (xpc_type_t)&_xpc_type_double)
          {
            *(void *)uuid_string_t out = xpc_double_get_value(*a1);
            sub_1000C3330((uint64_t)v47, (uint64_t *)out);
            sub_1000C313C((uint64_t)a2, (uint64_t)v47);
            long long v7 = (uint64_t **)v47;
          }
          else
          {
            if (type != (xpc_type_t)&_xpc_type_uuid)
            {
              memset(out, 170, 24);
              name = (char *)xpc_type_get_name(type);
              sub_100015438(out, name);
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              unint64_t v42 = std::string::append(&v44, ") cannot be converted and is invalid");
              long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
              v45.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v43;
              v42->__r_.__value_.__l.__size_ = 0;
              v42->__r_.__value_.__r.__words[2] = 0;
              v42->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &v45);
            }
            *(void *)&out[29] = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)uuid_string_t out = v5;
            *(_OWORD *)&out[16] = v5;
            bytes = xpc_uuid_get_bytes(*a1);
            uuid_unparse_lower(bytes, out);
            sub_100089680((uint64_t)v46, out);
            sub_1000C313C((uint64_t)a2, (uint64_t)v46);
            long long v7 = (uint64_t **)v46;
          }
          sub_100028D64(v7);
          return;
        }
        uint64_t v37 = xpc_uint64_get_value(*a1);
        long long v17 = (uint64_t **)&v51;
        v50[0] = 6;
        uint64_t v51 = v37;
        sub_100016EAC((uint64_t)v50);
        sub_100016EAC((uint64_t)v50);
        sub_100016EAC((uint64_t)v50);
        unsigned __int8 v38 = *(unsigned char *)a2;
        *(unsigned char *)a2 = v50[0];
        v50[0] = v38;
        uint64_t v39 = a2[1];
        a2[1] = v51;
        uint64_t v51 = v39;
        sub_100016EAC((uint64_t)a2);
        sub_100016EAC((uint64_t)v50);
        int v20 = v50[0];
      }
LABEL_17:
      sub_100016B28(v17, v20);
      return;
    }
    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(*a1);
    size_t length = xpc_data_get_length(*a1);
    sub_1000C2724(bytes_ptr, length, (std::string *)out);
    sub_10001C898((uint64_t)v54, (uint64_t)out);
    sub_100016EAC((uint64_t)v54);
    unsigned __int8 v32 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v54[0];
    v54[0] = v32;
    std::string::size_type v33 = (uint64_t *)a2[1];
    a2[1] = v55;
    unint64_t v55 = v33;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v54);
    sub_100016B28(&v55, v54[0]);
    if ((out[23] & 0x80000000) == 0) {
      return;
    }
    long long v15 = *(void **)out;
LABEL_15:
    operator delete(v15);
    return;
  }
  memset(out, 170, 24);
  sub_10001200C((uint64_t)&v45, 0, 0, 0, 2);
  sub_100011C74((uint64_t)&v45, out);
  sub_100016EAC((uint64_t)&v45);
  sub_100016B28((uint64_t **)&v45.__r_.__value_.__l.__size_, v45.__r_.__value_.__s.__data_[0]);
  size_t count = xpc_array_get_count(*a1);
  sub_1000170F0((uint64_t *)out, count);
  if (count)
  {
    for (size_t i = 0; i != count; ++i)
    {
      xpc_object_t v23 = xpc_array_get_value(*a1, i);
      xpc_object_t v24 = v23;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      if (v23)
      {
        xpc_retain(v23);
      }
      else
      {
        xpc_object_t v24 = xpc_null_create();
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      }
      sub_1000C28B4(&v45, &v44);
      uint64_t v25 = *(void *)&out[8];
      if (*(void *)&out[8] >= *(void *)&out[16])
      {
        uint64_t v26 = sub_100071148((uint64_t *)out, (uint64_t)&v45);
      }
      else
      {
        **(unsigned char **)&out[8] = v45.__r_.__value_.__s.__data_[0];
        *(void *)(v25 + 8) = v45.__r_.__value_.__l.__size_;
        sub_100016EAC((uint64_t)&v45);
        v45.__r_.__value_.__s.__data_[0] = 0;
        v45.__r_.__value_.__l.__size_ = 0;
        sub_100016EAC(v25);
        uint64_t v26 = v25 + 16;
      }
      *(void *)&out[8] = v26;
      sub_100016EAC((uint64_t)&v45);
      sub_100016B28((uint64_t **)&v45.__r_.__value_.__l.__size_, v45.__r_.__value_.__s.__data_[0]);
      xpc_release(v24);
    }
  }
  v56[0] = 2;
  __int16 v27 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)__int16 v27 = *(_OWORD *)out;
  _OWORD v27[2] = *(void *)&out[16];
  memset(out, 0, 24);
  id v57 = v27;
  sub_100016EAC((uint64_t)v56);
  sub_100016EAC((uint64_t)v56);
  sub_100016EAC((uint64_t)v56);
  unsigned __int8 v28 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v56[0];
  v56[0] = v28;
  char v29 = (uint64_t *)a2[1];
  a2[1] = v57;
  id v57 = v29;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)v56);
  sub_100016B28(&v57, v56[0]);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)out;
  sub_100016F68((void ***)&v45);
}

void sub_1000C3024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v24 - 105) < 0) {
        operator delete(*(void **)(v24 - 128));
      }
      sub_100028D64(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_1000C313C(uint64_t a1, uint64_t a2)
{
  sub_100016EAC(a2);
  char v4 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  sub_100016EAC(a1);
  return a1;
}

uint64_t sub_1000C3194(uint64_t a1, char *a2, xpc_object_t a3)
{
  long long v15 = a2;
  sub_100030238((uint64_t)&v11, &v15);
  sub_100007460((uint64_t)&v11, -1, 0x20u, 0, 0, &__p);
  if (v14 < 0) {
    operator delete(__p);
  }
  sub_100016EAC((uint64_t)&v11);
  sub_100016B28(&v12, v11);
  xpc_object_t v11 = a3;
  if (a3)
  {
    xpc_retain(a3);
  }
  else
  {
    a3 = xpc_null_create();
    xpc_object_t v11 = a3;
  }
  sub_1000C28B4(&v9, &v11);
  uint64_t v5 = sub_10000D104(*(unsigned __int8 **)(a1 + 32), v15);
  sub_100016EAC((uint64_t)&v9);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v9;
  LOBYTE(v9) = v6;
  long long v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v10;
  long long v10 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
  xpc_release(a3);
  return 1;
}

void sub_1000C32DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C3330(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *a2;
  *(unsigned char *)a1 = 7;
  *(void *)(a1 + 8) = v3;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void sub_1000C3374(xpc_object_t *a1@<X0>, void *a2@<X8>)
{
}

void sub_1000C3398(void *a1)
{
  sub_100103114(a1, v1);
  JUMPOUT(0x1000C338CLL);
}

id AnalyticsXPCSubscriptionManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id AnalyticsXPCSubscriptionManager.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCSubscriptionManager();
  return objc_msgSendSuper2(&v2, "init");
}

id AnalyticsXPCSubscriptionManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCSubscriptionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C350C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000C35E0(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000C438C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000C438C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000C433C((uint64_t)v12);
  return v7;
}

uint64_t sub_1000C35E0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000C379C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000C379C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000C3834(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000C3A14(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000C3A14(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000C3834(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000C39AC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000C39AC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000C43E8(&qword_10015EA30);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000C3A14(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000C43E8(&qword_10015EA30);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unsigned __int8 v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1000C3B64(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000C3BDC(a1, a2, v4);
}

unint64_t sub_1000C3BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unsigned __int8 v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t _s10analyticsd31AnalyticsXPCSubscriptionManagerC26subscribeToUserDataChanges9argumentsySo5NSSetC_tFZ_0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  int64_t v7 = (char *)v47 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v47 - v8;
  type metadata accessor for AnalyticsXPCQueryClient();
  uint64_t v10 = AnalyticsXPCSubscriptionManager.__allocating_init()();
  uint64_t v57 = 0;
  uint64_t result = static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v13 = v57;
  if (!v57)
  {
    uint64_t v42 = sub_1000C44A0();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v42, v0);
    long long v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      std::string v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)std::string v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Invalid parameter type. Expected a set of strings.", v45, 2u);
      swift_slowDealloc();
      int v46 = v10;
    }
    else
    {
      int v46 = v43;
      long long v43 = v10;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v57 + 56);
  uint64_t v50 = v57 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(v57 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  BOOL v53 = (void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v54 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient_keyMapping;
  int64_t v51 = (unint64_t)(v16 + 63) >> 6;
  char v52 = (uint64_t (**)(char *, uint64_t))(v1 + 8);
  *(void *)&long long v12 = 136315138;
  long long v48 = v12;
  v47[1] = (char *)&type metadata for Any + 8;
  uint64_t v49 = v9;
  while (1)
  {
    if (v18)
    {
      uint64_t v56 = (v18 - 1) & v18;
      unint64_t v19 = __clz(__rbit64(v18)) | (v14 << 6);
      goto LABEL_23;
    }
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v20 >= v51) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v50 + 8 * v20);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v20 + 1;
      if (v20 + 1 >= v51) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v50 + 8 * v14);
      if (!v21)
      {
        int64_t v14 = v20 + 2;
        if (v20 + 2 >= v51) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v50 + 8 * v14);
        if (!v21) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v56 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_23:
    int v23 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v19);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = *(uint64_t *)((char *)&v10->isa + v54);
    uint64_t v27 = *(void *)(v26 + 16);
    swift_bridgeObjectRetain();
    if (!v27) {
      goto LABEL_28;
    }
    swift_bridgeObjectRetain();
    unint64_t v28 = sub_1000C3B64(v24, v25);
    if (v29)
    {
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 8 * v28);
      swift_bridgeObjectRelease_n();
      uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)v10->isa) + 0x80))(v30);
      xpc_type_t type = xpc_get_type(v31);
      if (type == (xpc_type_t)XPC_TYPE_DICTIONARY.getter() && xpc_dictionary_get_string(v31, "error"))
      {
        int64_t v37 = v14;
        uint64_t v38 = sub_1000C44A0();
        (*v53)(v9, v38, v0);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          char v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to subscribe to user data changes", v41, 2u);
          swift_slowDealloc();
        }

        swift_unknownObjectRelease();
        uint64_t result = (*v52)(v9, v0);
        int64_t v14 = v37;
        unint64_t v18 = v56;
      }
      else
      {
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v18 = v56;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_28:
      int64_t v55 = v14;
      uint64_t v33 = sub_1000C44A0();
      (*v53)(v7, v33, v0);
      swift_bridgeObjectRetain();
      BOOL v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = v48;
        swift_bridgeObjectRetain();
        *(void *)(v36 + 4) = sub_1000C350C(v24, v25, &v57);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unexpected argument key: %s", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy();
        uint64_t v9 = v49;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t result = (*v52)(v7, v0);
      int64_t v14 = v55;
      unint64_t v18 = v56;
    }
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v51)
  {
LABEL_34:

    return swift_release();
  }
  unint64_t v21 = *(void *)(v50 + 8 * v22);
  if (v21)
  {
    int64_t v14 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v14 >= v51) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v50 + 8 * v14);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AnalyticsXPCSubscriptionManager()
{
  return self;
}

uint64_t sub_1000C433C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000C438C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000C43E8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000C4430()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000C5664(v0, qword_10015F188);
  sub_1000C4504(v0, (uint64_t)qword_10015F188);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000C44A0()
{
  if (qword_10015F0E8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000C4504(v0, (uint64_t)qword_10015F188);
}

uint64_t sub_1000C4504(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t variable initialization expression of AnalyticsXPCQueryClient.keyMapping()
{
  sub_1000C43E8(&qword_10015E990);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10011EFB0;
  *(void *)(inited + 32) = 0x7474616D79657267;
  *(void *)(inited + 40) = 0xEA00000000007265;
  *(_OWORD *)(inited + 48) = xmmword_10011EFC0;
  *(void *)(inited + 64) = 0x800000010010FA60;
  *(void *)(inited + 72) = 1;
  return sub_1000C45BC(inited);
}

unint64_t sub_1000C45BC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000C43E8(&qword_10015EA38);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000C3B64(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id AnalyticsXPCQueryClient.init()()
{
  sub_1000C43E8(&qword_10015E990);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10011EFB0;
  uint64_t v2 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient_keyMapping;
  *(void *)(inited + 32) = 0x7474616D79657267;
  *(void *)(inited + 40) = 0xEA00000000007265;
  *(_OWORD *)(inited + 48) = xmmword_10011EFC0;
  *(void *)(inited + 64) = 0x800000010010FA60;
  *(void *)(inited + 72) = 1;
  uint64_t v3 = v0;
  *(void *)&v0[v2] = sub_1000C45BC(inited);
  *(void *)&v3[OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection] = xpc_connection_create_mach_service("com.apple.analyticsagent", 0, 0);

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AnalyticsXPCQueryClient();
  id v4 = objc_msgSendSuper2(&v6, "init");
  sub_1000C48FC();

  return v4;
}

uint64_t type metadata accessor for AnalyticsXPCQueryClient()
{
  return self;
}

id AnalyticsXPCQueryClient.__deallocating_deinit()
{
  xpc_connection_cancel(*(xpc_connection_t *)&v0[OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection]);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnalyticsXPCQueryClient();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000C48FC()
{
  if (xpc_user_sessions_enabled() && xpc_is_system_session())
  {
    xpc_user_sessions_get_foreground_uid();
    xpc_connection_set_target_user_session_uid();
  }
  uint64_t v1 = OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection;
  aBlock[4] = sub_1000C4B2C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C4E28;
  aBlock[3] = &unk_1001580B0;
  objc_super v2 = _Block_copy(aBlock);
  uint64_t v3 = (_xpc_connection_s *)swift_unknownObjectRetain();
  xpc_connection_set_event_handler(v3, v2);
  _Block_release(v2);
  swift_unknownObjectRelease();
  xpc_connection_activate(*(xpc_connection_t *)(v0 + v1));
}

void sub_1000C4B2C(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == (xpc_type_t)XPC_TYPE_ERROR.getter())
  {
    if (qword_10015F0E8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000C4504(v9, (uint64_t)qword_10015F188);
    swift_unknownObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = String.init<A>(describing:)();
      sub_1000C350C(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v8 = "XPC error: %{public}s";
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_10015F0E8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000C4504(v2, (uint64_t)qword_10015F188);
    swift_unknownObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v6 = String.init<A>(describing:)();
      sub_1000C350C(v6, v7, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v8 = "Unexpected XPC: %{public}s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v3, v4, v8, v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }

  swift_unknownObjectRelease_n();
}

uint64_t sub_1000C4E28(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

xpc_object_t sub_1000C4E88(int64_t a1)
{
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v3, "analytics_user_data", a1);
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(v1 + OBJC_IVAR____TtC10analyticsd23AnalyticsXPCQueryClient__connection), v3);
  xpc_type_t type = xpc_get_type(v4);
  uint64_t v6 = &qword_10015F000;
  if (type == (xpc_type_t)XPC_TYPE_ERROR.getter())
  {
    if (qword_10015F0E8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000C4504(v7, (uint64_t)qword_10015F188);
    swift_unknownObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      id v11 = [v4 description];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_1000C350C(v12, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received an XPC error reply: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = &qword_10015F000;
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
  xpc_type_t v15 = xpc_get_type(v4);
  if (v15 != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    if (v6[29] != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000C4504(v16, (uint64_t)qword_10015F188);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got unexpected response from analyticsagent", v19, 2u);
      swift_slowDealloc();
    }
  }
  swift_unknownObjectRelease();
  return v4;
}

xpc_object_t AnalyticsQueryValuesFor(arguments:)()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsXPCQueryClient()) init];
  xpc_object_t xdict = xpc_dictionary_create_empty();
  uint64_t v7 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  if (qword_10015F0E8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000C4504(v1, (uint64_t)qword_10015F188);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    xpc_object_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Invalid parameter type. Expected a set of strings.", v4, 2u);
    swift_slowDealloc();
  }
  else
  {
  }
  return xdict;
}

uint64_t sub_1000C564C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C565C()
{
  return swift_release();
}

uint64_t *sub_1000C5664(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_1000C56C8()
{
}

void sub_1000C5CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000C5E30(uint64_t a1, uint64_t *a2)
{
  int64_t v3 = sub_1000F2ADC(a1, (uint64_t)a2);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  int v4 = sub_1000F3140((uint64_t)a2, &v7);
  sub_1000C5F34(v4, (uint64_t)&v7, v3);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100013F48(a2 + 3, (uint64_t)&v7);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v7);
    uint64_t v6 = v5 + 16;
    a2[4] = v5 + 16;
  }
  a2[4] = v6;
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_1000C5F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  *(void *)(v2 + 32) = v4;
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000C5F34(int a1, uint64_t a2, int64_t __n)
{
  if (*(unsigned char *)a2)
  {
    if (*(unsigned char *)a2 == 3) {
      uint64_t v3 = *(std::string **)(a2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    unint64_t v4 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    if (__n < 0)
    {
      if ((v4 & 0x80) != 0)
      {
        unint64_t size = v3->__r_.__value_.__l.__size_;
        if (size <= -__n) {
          return;
        }
        uint64_t v6 = (std::string *)v3->__r_.__value_.__r.__words[0];
        std::string::size_type v5 = v3->__r_.__value_.__r.__words[0] + size + __n;
      }
      else
      {
        if (v4 <= -__n) {
          return;
        }
        std::string::size_type v5 = (std::string::size_type)v3 + v4 + __n;
        uint64_t v6 = v3;
      }
      std::string::erase(v3, 0, v5 - (void)v6);
    }
    else
    {
      if ((v4 & 0x80) != 0) {
        unint64_t v4 = v3->__r_.__value_.__l.__size_;
      }
      if (v4 > __n) {
        std::string::resize(v3, __n, 0);
      }
    }
  }
}

uint64_t sub_1000C5FC0()
{
  return 1;
}

void sub_1000C5FC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000F2ADC(a1, (uint64_t)a2);
  std::string::size_type v5 = sub_1000F2ADC(a1, (uint64_t)a2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = sub_1000F3140((uint64_t)a2, &v9);
  sub_1000C60E0(v6, (uint64_t)&v9, v5, v4);
  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100013F48(a2 + 3, (uint64_t)&v9);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v9);
    uint64_t v8 = v7 + 16;
    a2[4] = v7 + 16;
  }
  a2[4] = v8;
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000C60B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  *(void *)(v2 + 32) = v4;
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_1000C60E0(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4)
{
  if (!*(unsigned char *)a2) {
    return;
  }
  std::string::size_type v4 = a3;
  if (*(unsigned char *)a2 == 3) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((v6 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    unint64_t v6 = *(void *)(v5 + 8);
    unint64_t v7 = v6 - v4;
    if (v6 <= v4)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      return;
    }
    goto LABEL_14;
  }
  if ((v6 & 0x80) != 0) {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  std::string::size_type v4 = (v8 + a3) & ~((uint64_t)(v8 + a3) >> 63);
  if ((v6 & 0x80) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  unint64_t v7 = v6 - v4;
  if (v6 <= v4)
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    return;
  }
LABEL_14:
  unint64_t v9 = (a4 - v4 + v6) & ~((uint64_t)(a4 - v4 + v6) >> 63);
  if (a4 >= 0) {
    unint64_t v9 = a4;
  }
  if (v9 >= v7) {
    unint64_t v9 = v7;
  }
  std::string::resize((std::string *)v5, v9 + v4, 0);

  std::string::erase((std::string *)v5, 0, v4);
}

uint64_t sub_1000C61C8()
{
  return 1;
}

void sub_1000C61D0(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  __s = (void *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v19);
  uint64_t v3 = v19;
  if (!(_BYTE)v19) {
    goto LABEL_27;
  }
  if (v19 == 3) {
    std::string::size_type v4 = __s;
  }
  else {
    std::string::size_type v4 = 0;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    std::string::size_type v6 = v4[1];
    if (size <= v6)
    {
      std::string::size_type v4 = (void *)*v4;
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v3 = 0;
    goto LABEL_27;
  }
  std::string::size_type v6 = *((unsigned __int8 *)v4 + 23);
  if (size > v6) {
    goto LABEL_12;
  }
LABEL_14:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    uint64_t v8 = (char *)v4 + v6;
    if ((uint64_t)v6 >= (uint64_t)size)
    {
      int v13 = p_p->__r_.__value_.__s.__data_[0];
      unint64_t v14 = v4;
      do
      {
        std::string::size_type v15 = v6 - size;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v14, v13, v15 + 1);
        if (!v16) {
          break;
        }
        unint64_t v9 = v16;
        if (!memcmp(v16, p_p, size)) {
          goto LABEL_20;
        }
        unint64_t v14 = v9 + 1;
        std::string::size_type v6 = v8 - (v9 + 1);
      }
      while ((uint64_t)v6 >= (uint64_t)size);
    }
    unint64_t v9 = v8;
LABEL_20:
    uint64_t v3 = v9 != v8 && v9 - (char *)v4 != -1;
  }
  else
  {
    uint64_t v3 = 1;
  }
LABEL_27:
  v17[0] = 4;
  os_log_type_t v18 = (uint64_t *)v3;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v17);
  unint64_t v11 = a2[4];
  if (v11 >= a2[5])
  {
    uint64_t v12 = sub_100019524(a2 + 3, (uint64_t)v17);
  }
  else
  {
    *(unsigned char *)unint64_t v11 = v17[0];
    *(void *)(v11 + 8) = v18;
    sub_100016EAC((uint64_t)v17);
    v17[0] = 0;
    os_log_type_t v18 = 0;
    sub_100016EAC(v11);
    uint64_t v12 = v11 + 16;
  }
  a2[4] = v12;
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  sub_100016EAC((uint64_t)&v19);
  sub_100016B28((uint64_t **)&__s, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000C63F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6434()
{
  return 1;
}

void sub_1000C643C(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v11);
  unint64_t v3 = v11;
  if (!(_BYTE)v11) {
    goto LABEL_20;
  }
  if (v11 == 3) {
    std::string::size_type v4 = v12;
  }
  else {
    std::string::size_type v4 = 0;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    if (size <= v4[1])
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v4 = (uint64_t *)*v4;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v3 = 0;
    goto LABEL_20;
  }
  if (size > *((unsigned __int8 *)v4 + 23)) {
    goto LABEL_14;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_19:
  unint64_t v3 = memcmp(p_p, v4, size) == 0;
LABEL_20:
  v9[0] = 4;
  uint64_t v10 = (uint64_t *)v3;
  sub_100016EAC((uint64_t)v9);
  sub_100016EAC((uint64_t)v9);
  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100019524(a2 + 3, (uint64_t)v9);
  }
  else
  {
    *(unsigned char *)unint64_t v7 = v9[0];
    *(void *)(v7 + 8) = v10;
    sub_100016EAC((uint64_t)v9);
    v9[0] = 0;
    uint64_t v10 = 0;
    sub_100016EAC(v7);
    uint64_t v8 = v7 + 16;
  }
  a2[4] = v8;
  sub_100016EAC((uint64_t)v9);
  sub_100016B28(&v10, v9[0]);
  sub_100016EAC((uint64_t)&v11);
  sub_100016B28(&v12, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000C65FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6638()
{
  return 1;
}

void sub_1000C6640(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v12);
  unint64_t v3 = v12;
  if (!(_BYTE)v12) {
    goto LABEL_20;
  }
  if (v12 == 3) {
    std::string::size_type v4 = v13;
  }
  else {
    std::string::size_type v4 = 0;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (*((char *)v4 + 23) < 0)
  {
    std::string::size_type v6 = v4[1];
    if (size <= v6)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v4 = (uint64_t *)*v4;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v3 = 0;
    goto LABEL_20;
  }
  std::string::size_type v6 = *((unsigned __int8 *)v4 + 23);
  if (size > v6) {
    goto LABEL_14;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_19:
  unint64_t v3 = memcmp(p_p, (char *)v4 + v6 - size, size) == 0;
LABEL_20:
  v10[0] = 4;
  unint64_t v11 = (uint64_t *)v3;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v10);
  unint64_t v8 = a2[4];
  if (v8 >= a2[5])
  {
    uint64_t v9 = sub_100019524(a2 + 3, (uint64_t)v10);
  }
  else
  {
    *(unsigned char *)unint64_t v8 = v10[0];
    *(void *)(v8 + 8) = v11;
    sub_100016EAC((uint64_t)v10);
    v10[0] = 0;
    unint64_t v11 = 0;
    sub_100016EAC(v8);
    uint64_t v9 = v8 + 16;
  }
  a2[4] = v9;
  sub_100016EAC((uint64_t)v10);
  sub_100016B28(&v11, v10[0]);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000C6808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6844()
{
  return 1;
}

void sub_1000C684C(uint64_t a1, uint64_t *a2)
{
  memset(&v9, 170, sizeof(v9));
  sub_100014F90((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v7);
  if ((_BYTE)v7)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v11[6] = 0xAAAAAAAAAAAAAA00;
    uint64_t v11[3] = 0xAAAAAAAAAAAAAAAALL;
    long long v12 = v3;
    void v11[4] = 0;
    v11[5] = 0;
    v11[7] = 0;
    unsigned char v11[8] = 0;
    LOBYTE(v12) = 0;
    BYTE8(v12) = 0;
    uint64_t v13 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v11, 0, 25);
    sub_10004A29C(&v6, (uint64_t)&v9, 0);
  }
  LOBYTE(__p[0]) = 4;
  __p[1] = 0;
  sub_100016EAC((uint64_t)__p);
  sub_100016EAC((uint64_t)__p);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_100019524(a2 + 3, (uint64_t)__p);
  }
  else
  {
    *(unsigned char *)unint64_t v4 = __p[0];
    *(void **)(v4 + 8) = __p[1];
    sub_100016EAC((uint64_t)__p);
    LOBYTE(__p[0]) = 0;
    __p[1] = 0;
    sub_100016EAC(v4);
    uint64_t v5 = v4 + 16;
  }
  a2[4] = v5;
  sub_100016EAC((uint64_t)__p);
  sub_100016B28((uint64_t **)&__p[1], LOBYTE(__p[0]));
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1000C6A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6AA4()
{
  return 1;
}

void sub_1000C6AAC(uint64_t a1, uint64_t *a2)
{
  memset(&v9, 170, sizeof(v9));
  sub_100014F90((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v7);
  if ((_BYTE)v7)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v11[6] = 0xAAAAAAAAAAAAAA00;
    uint64_t v11[3] = 0xAAAAAAAAAAAAAAAALL;
    long long v12 = v3;
    void v11[4] = 0;
    v11[5] = 0;
    v11[7] = 0;
    unsigned char v11[8] = 0;
    LOBYTE(v12) = 0;
    BYTE8(v12) = 0;
    uint64_t v13 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v11, 0, 25);
    sub_10004A29C(&v6, (uint64_t)&v9, 0);
  }
  LOBYTE(v14) = 4;
  std::string::size_type v15 = 0;
  sub_100016EAC((uint64_t)&v14);
  sub_100016EAC((uint64_t)&v14);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_100019524(a2 + 3, (uint64_t)&v14);
  }
  else
  {
    *(unsigned char *)unint64_t v4 = v14;
    *(void *)(v4 + 8) = v15;
    sub_100016EAC((uint64_t)&v14);
    LOBYTE(v14) = 0;
    std::string::size_type v15 = 0;
    sub_100016EAC(v4);
    uint64_t v5 = v4 + 16;
  }
  a2[4] = v5;
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1000C6D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27)
{
  sub_100028D64((uint64_t **)(v27 - 160));
  sub_100028D64(&a18);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C6D88()
{
  return 1;
}

void sub_1000C6D90(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3140((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAA00;
  unint64_t v8 = 0;
  sub_100016EAC((uint64_t)&v7);
  sub_100016EAC((uint64_t)&v7);
  if ((_BYTE)v9)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v13[6] = 0xAAAAAAAAAAAAAA00;
    void v13[3] = 0xAAAAAAAAAAAAAAAALL;
    long long v14 = v3;
    v13[4] = 0;
    v13[5] = 0;
    v13[7] = 0;
    unsigned char v13[8] = 0;
    LOBYTE(v14) = 0;
    BYTE8(v14) = 0;
    uint64_t v15 = 0;
    long long v12 = 0u;
    memset(v13, 0, 25);
    sub_10004A29C(&v6, (uint64_t)&__p, 0);
  }
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_100019524(a2 + 3, (uint64_t)&v7);
  }
  else
  {
    *(unsigned char *)unint64_t v4 = v7;
    *(void *)(v4 + 8) = v8;
    sub_100016EAC((uint64_t)&v7);
    LOBYTE(v7) = 0;
    unint64_t v8 = 0;
    sub_100016EAC(v4);
    uint64_t v5 = v4 + 16;
  }
  a2[4] = v5;
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000C70E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t *a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100028D64(&a20);
  sub_100028D64(&a22);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7188()
{
  return 1;
}

void sub_1000C7194(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C71D0(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C720C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C7248(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C7284(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C72C0(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C72FC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C7338(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

unsigned __int8 *sub_1000C7370(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (size_t i = *v14; i; size_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_100014470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = operator new(0x30uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *uint64_t v17 = 0;
  v17[1] = v9;
  os_log_type_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)os_log_type_t v18 = 0;
  v17[5] = 0;
  LOBYTE(v30) = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_1000400E0(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v13);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  size_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  sub_1000C7650((uint64_t)v29, 0);
  return i;
}

void sub_1000C7638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000C7650((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000C7650(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000C76A8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1000C76A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_1000C7720(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    nullsub_13(result);
    operator delete();
  }
  return result;
}

void sub_1000C7770()
{
}

void sub_1000C79E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000C7A78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[7];
  long long v3 = (std::__shared_weak_count *)a2[8];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v11, 170, sizeof(v11));
  sub_100014F90((uint64_t)a2, &v11);
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  sub_10008CA70(v4, (uint64_t)&__p, (uint64_t)&v11, (uint64_t)v7);
  unint64_t v9 = 0;
  v8[0] = 2;
  uint64_t v12 = v7[1];
  unint64_t v13 = (void **)v7[0];
  unint64_t v9 = sub_10009A1D0((uint64_t *)&v13, &v12);
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v8);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)v8);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = v8[0];
    *(void *)(v5 + 8) = v9;
    sub_100016EAC((uint64_t)v8);
    v8[0] = 0;
    unint64_t v9 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
  }
  a2[4] = v6;
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  unint64_t v13 = (void **)v7;
  sub_10002A71C(&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v3) {
    sub_1000147D8(v3);
  }
}

void sub_1000C7C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_100028D64(&a13);
  *(void *)(v27 - 80) = &a10;
  sub_10002A71C((void ***)(v27 - 80));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    sub_1000147D8(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7C84()
{
  return 1;
}

void sub_1000C7C8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[7];
  long long v3 = (std::__shared_weak_count *)a2[8];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v5 = sub_10008D13C(v4, (unsigned __int8 *)&__p);
  if (v6) {
    char v7 = 5;
  }
  else {
    char v7 = 0;
  }
  if (v6) {
    unint64_t v8 = (uint64_t *)v5;
  }
  else {
    unint64_t v8 = 0;
  }
  v11[0] = v7;
  uint64_t v12 = v8;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v11);
  unint64_t v9 = a2[4];
  if (v9 >= a2[5])
  {
    uint64_t v10 = sub_100019524(a2 + 3, (uint64_t)v11);
  }
  else
  {
    *(unsigned char *)unint64_t v9 = v11[0];
    *(void *)(v9 + 8) = v12;
    sub_100016EAC((uint64_t)v11);
    v11[0] = 0;
    uint64_t v12 = 0;
    sub_100016EAC(v9);
    uint64_t v10 = v9 + 16;
  }
  a2[4] = v10;
  sub_100016EAC((uint64_t)v11);
  sub_100016B28(&v12, v11[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    sub_1000147D8(v3);
  }
}

void sub_1000C7DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100028D64((uint64_t **)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_1000147D8(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7E0C()
{
  return 1;
}

void sub_1000C7E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F2ADC(a1, (uint64_t)a2);
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000C821C((uint64_t)v18, "ChannelName");
  long long v19 = v18;
  char v20 = 1;
  uint64_t v22 = sub_1000168C0((uint64_t)v21, (uint64_t)&__p);
  char v23 = 1;
  sub_10001200C((uint64_t)v24, (uint64_t)v18, 2, 1, 2);
  size_t v25 = v24;
  char v26 = 1;
  sub_100062FA0((uint64_t)v12, "ChannelValue");
  unint64_t v13 = v12;
  char v14 = 1;
  v15[0] = 5;
  v16[0] = v3;
  sub_100016EAC((uint64_t)v15);
  sub_100016EAC((uint64_t)v15);
  v16[1] = v15;
  char v17 = 1;
  sub_10001200C((uint64_t)v27, (uint64_t)v12, 2, 1, 2);
  unint64_t v28 = v27;
  char v29 = 1;
  sub_10001200C((uint64_t)&v9, (uint64_t)v24, 2, 1, 2);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)&v27[i]);
    sub_100016B28((uint64_t **)&v27[i + 8], v27[i]);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    sub_100016EAC((uint64_t)&v15[j * 8]);
    sub_100016B28((uint64_t **)&v16[j], v15[j * 8]);
  }
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    sub_100016EAC((uint64_t)&v21[k]);
    sub_100016B28((uint64_t **)&v21[k + 8], v21[k]);
  }
  unint64_t v7 = a2[4];
  if (v7 >= a2[5])
  {
    uint64_t v8 = sub_100013F48(a2 + 3, (uint64_t)&v9);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v9);
    uint64_t v8 = v7 + 16;
    a2[4] = v7 + 16;
  }
  a2[4] = v8;
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000C8064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8160()
{
  return 1;
}

void sub_1000C816C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C81A8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C81E4(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

uint64_t sub_1000C821C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000C8268(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000C8268(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000C82A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000C82B4()
{
}

void sub_1000C8C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8E7C(uint64_t a1, uint64_t a2)
{
  return sub_100016AC4(a2 + 24, *(void *)(a2 + 24));
}

uint64_t sub_1000C8E88()
{
  return 1;
}

uint64_t sub_1000C8E90(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  unint64_t v4 = a2[5];
  uint64_t v5 = (uint64_t)(v3 - a2[3]) >> 4;
  uint64_t v7 = v5;
  if (v3 >= v4)
  {
    uint64_t result = sub_1000C9BB8(a2 + 3, &v7);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 6;
    *(void *)(v3 + 8) = v5;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000C8F38()
{
  return 1;
}

uint64_t sub_1000C8F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v2 = a2 + 24;
  if (v4 == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'drop' expected at least one item");
  }

  return sub_100016AC4(v2, v3 - 16);
}

void sub_1000C8FBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000C8FD0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_1000C9004()
{
  return 1;
}

uint64_t *sub_1000C900C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a2 + 24);
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropN' expected at least one item");
    goto LABEL_10;
  }
  unint64_t v4 = sub_1000F2ADC(a1, a2);
  if ((v4 & 0x8000000000000000) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropN' saw a negative number");
    goto LABEL_10;
  }
  unint64_t v5 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  if (v5 < v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropN' saw too few items");
LABEL_10:
  }

  return sub_1000263C0(v2, v5 - v4);
}

void sub_1000C90DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C90F8()
{
  return 1;
}

uint64_t sub_1000C9100(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v2 = a2 + 24;
  if (v3 == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropExcept1' expected at least one item");
  }

  return sub_1000C9190(v2, v3, v4 - 16);
}

void sub_1000C917C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10003D958((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    sub_100016AC4(a1, v5);
  }
  return a2;
}

uint64_t sub_1000C9218()
{
  return 1;
}

uint64_t sub_1000C9220(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 24;
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropExceptN' expected at least one item");
    goto LABEL_10;
  }
  unint64_t v4 = sub_1000F2ADC(a1, a2);
  if ((v4 & 0x8000000000000000) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropExceptN' saw a negative N");
LABEL_10:
  }
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = (*(void *)(a2 + 32) - v5) >> 4;
  BOOL v7 = v6 >= v4;
  unint64_t v8 = v6 - v4;
  if (!v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dropExceptN' saw too few items");
    goto LABEL_10;
  }

  return sub_1000C9190(v2, v5, v5 + 16 * v8);
}

void sub_1000C92F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9310()
{
  return 1;
}

uint64_t sub_1000C9318(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[4];
  uint64_t v2 = a2 + 3;
  if (a2[3] == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dup' expected at least one item");
  }
  uint64_t v5 = v3 - 16;
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000BB6E0(v2, v5);
  }
  else
  {
    sub_100016A10(v3, v5);
    uint64_t result = v3 + 16;
    a2[4] = v3 + 16;
  }
  a2[4] = result;
  return result;
}

void sub_1000C93B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C93D4()
{
  return 1;
}

uint64_t sub_1000C93DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1000F2ADC(a1, a2);
  if ((v3 & 0x8000000000000000) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dupN' saw a negative number");
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  if (v3 > (v4 - v5) >> 4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'dupN' saw too few items");
LABEL_8:
  }

  return sub_1000BB884(v6, v4, v4 - 16 * v3, v4, (uint64_t)(16 * v3) >> 4);
}

void sub_1000C9488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C94A0()
{
  return 1;
}

uint64_t sub_1000C94A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F2ADC(a1, (uint64_t)a2);
  if (v3 <= 0)
  {
    uint64_t v7 = v3;
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v9 = exception;
    if (v7) {
      sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'pick' saw a negative number");
    }
    else {
      sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'pick' saw a zero");
    }
LABEL_11:
  }
  unint64_t v4 = a2[4];
  if (v3 > (unint64_t)((uint64_t)(v4 - a2[3]) >> 4))
  {
    unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(v9, "EvaluationContext Stack empty: 'pick' saw a number larger than the stack size");
    goto LABEL_11;
  }
  uint64_t v5 = v4 - 16 * v3;
  if (v4 >= a2[5])
  {
    uint64_t result = sub_1000BB6E0(a2 + 3, v5);
  }
  else
  {
    sub_100016A10(a2[4], v5);
    uint64_t result = v4 + 16;
    a2[4] = v4 + 16;
  }
  a2[4] = result;
  return result;
}

void sub_1000C958C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C95B8()
{
  return 1;
}

uint64_t sub_1000C95C0(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[4];
  uint64_t v2 = a2 + 3;
  if (v3 - a2[3] <= 0x1F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'pick2' expected at least two items");
  }
  uint64_t v5 = v3 - 32;
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000BB6E0(v2, v5);
  }
  else
  {
    sub_100016A10(v3, v5);
    uint64_t result = v3 + 16;
    a2[4] = v3 + 16;
  }
  a2[4] = result;
  return result;
}

void sub_1000C9660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9680()
{
  return 1;
}

uint64_t sub_1000C9688(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  if ((unint64_t)(v2 - *(void *)(a2 + 24)) <= 0x1F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'swap' expected at least two items");
  }
  char v4 = *(unsigned char *)(v2 - 16);
  uint64_t v3 = v2 - 16;
  *(unsigned char *)uint64_t v3 = *(unsigned char *)(v3 - 16);
  *(unsigned char *)(v3 - 16) = v4;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = *(void *)(v3 - 8);
  *(void *)(v3 - 8) = v5;

  return sub_100016EAC(v3);
}

void sub_1000C971C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9730()
{
  return 1;
}

uint64_t sub_1000C9738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  if ((unint64_t)(v2 - *(void *)(a2 + 24)) <= 0x2F)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'rot' expected at least three items");
  }

  return sub_1000C9CDC(v2 - 48, v2 - 32, v2);
}

void sub_1000C97B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C97C8()
{
  return 1;
}

unint64_t sub_1000C97D0(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_1000F2ADC(a1, a2);
  if (!result) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'roll' saw a negative number");
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(a2 + 32);
  if (result > (v4 - *(void *)(a2 + 24)) >> 4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: 'roll' saw too few items");
LABEL_11:
  }
  unint64_t result = v4 - 16 * result;
  if (result + 16 != v4)
  {
    return sub_1000C9CDC(result, result + 16, v4);
  }
  return result;
}

void sub_1000C988C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C98A4()
{
  return 1;
}

void sub_1000C98B0(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C98EC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9928(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9964(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C99A0(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C99DC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9A18(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9A54(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9A90(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9ACC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9B08(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9B44(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000C9B80(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

uint64_t sub_1000C9BB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  os_log_type_t v18 = a1 + 2;
  uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 6;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_1000C9CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000C9CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  char v6 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7;
  sub_100016EAC(a1);
  uint64_t v8 = a1 + 16;
  for (uint64_t i = v4 + 16; i != a3; i += 16)
  {
    if (v8 == v4) {
      uint64_t v4 = i;
    }
    char v10 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = *(unsigned char *)i;
    *(unsigned char *)uint64_t i = v10;
    uint64_t v11 = *(void *)(v8 + 8);
    *(void *)(v8 + 8) = *(void *)(i + 8);
    *(void *)(i + 8) = v11;
    sub_100016EAC(v8);
    v8 += 16;
  }
  if (v8 != v4)
  {
    uint64_t v12 = v8;
    uint64_t v13 = v4;
    do
    {
      while (1)
      {
        char v14 = *(unsigned char *)v12;
        *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v14;
        uint64_t v15 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = *(void *)(v13 + 8);
        *(void *)(v13 + 8) = v15;
        sub_100016EAC(v12);
        v12 += 16;
        v13 += 16;
        if (v13 == a3) {
          break;
        }
        if (v12 == v4) {
          uint64_t v4 = v13;
        }
      }
      uint64_t v13 = v4;
    }
    while (v12 != v4);
  }
  return v8;
}

void sub_1000C9DEC()
{
}

void sub_1000CA1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000CA2B4(uint64_t a1, uint64_t *a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v14);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8((uint64_t)a2, &v12);
  sub_100011C74((uint64_t)&v12, &v10);
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  if (v10 == v11)
  {
    unint64_t v5 = v10;
  }
  else
  {
    while ((sub_10001F600(v3, (unsigned __int8 *)&v14) & 1) == 0)
    {
      v3 += 16;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }
    unint64_t v5 = v3;
    uint64_t v3 = v11;
  }
  if (v5 == v3)
  {
    LOBYTE(v8) = 0;
    uint64_t v9 = 0;
    sub_100016EAC((uint64_t)&v8);
    sub_100016EAC((uint64_t)&v8);
    unint64_t v6 = a2[4];
    if (v6 >= a2[5])
    {
LABEL_12:
      uint64_t v7 = sub_100019524(a2 + 3, (uint64_t)&v8);
      goto LABEL_13;
    }
  }
  else
  {
    LOBYTE(v8) = 5;
    uint64_t v9 = (v5 - v10) >> 4;
    sub_100016EAC((uint64_t)&v8);
    sub_100016EAC((uint64_t)&v8);
    unint64_t v6 = a2[4];
    if (v6 >= a2[5]) {
      goto LABEL_12;
    }
  }
  *(unsigned char *)unint64_t v6 = (_BYTE)v8;
  *(void *)(v6 + 8) = v9;
  sub_100016EAC((uint64_t)&v8);
  LOBYTE(v8) = 0;
  uint64_t v9 = 0;
  sub_100016EAC(v6);
  uint64_t v7 = v6 + 16;
LABEL_13:
  a2[4] = v7;
  sub_100016EAC((uint64_t)&v8);
  sub_100016B28((uint64_t **)&v9, v8);
  uint64_t v8 = &v10;
  sub_100016F68((void ***)&v8);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
}

void sub_1000CA490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t *a16)
{
  a9 = &a11;
  sub_100016F68((void ***)&a9);
  sub_100028D64(&a14);
  sub_100028D64(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA4E0()
{
  return 1;
}

void sub_1000CA4E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v14);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8((uint64_t)a2, &v12);
  sub_100011C74((uint64_t)&v12, &v10);
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  if (v10 == v11)
  {
    unint64_t v5 = v10;
  }
  else
  {
    while ((sub_10001F600(v3, (unsigned __int8 *)&v14) & 1) == 0)
    {
      v3 += 16;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        break;
      }
    }
    unint64_t v5 = v3;
    uint64_t v3 = v11;
  }
  LOBYTE(v8) = 4;
  unint64_t v9 = v5 != v3;
  sub_100016EAC((uint64_t)&v8);
  sub_100016EAC((uint64_t)&v8);
  unint64_t v6 = a2[4];
  if (v6 >= a2[5])
  {
    uint64_t v7 = sub_100019524(a2 + 3, (uint64_t)&v8);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = (_BYTE)v8;
    *(void *)(v6 + 8) = v9;
    sub_100016EAC((uint64_t)&v8);
    LOBYTE(v8) = 0;
    unint64_t v9 = 0;
    sub_100016EAC(v6);
    uint64_t v7 = v6 + 16;
  }
  a2[4] = v7;
  sub_100016EAC((uint64_t)&v8);
  sub_100016B28((uint64_t **)&v9, v8);
  uint64_t v8 = &v10;
  sub_100016F68((void ***)&v8);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
}

void sub_1000CA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t *a16)
{
  a9 = &a11;
  sub_100016F68((void ***)&a9);
  sub_100028D64(&a14);
  sub_100028D64(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA6CC()
{
  return 1;
}

void sub_1000CA6D4(uint64_t a1, uint64_t a2)
{
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v26);
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  size_t v25 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 24);
  sub_100011C74((uint64_t)&v24, &v22);
  long long v20 = 0uLL;
  unint64_t v21 = 0;
  uint64_t v5 = v22;
  for (uint64_t i = v23; v5 != i; v5 += 16)
  {
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >= *(void *)(a2 + 40))
    {
      uint64_t v8 = sub_100013F48((uint64_t *)(a2 + 24), v5);
    }
    else
    {
      sub_100016A10(*(void *)(a2 + 32), v5);
      uint64_t v8 = v7 + 16;
      *(void *)(a2 + 32) = v7 + 16;
    }
    *(void *)(a2 + 32) = v8;
    sub_100013798(*(void ***)(a2 + 48), a2, &v26);
    unsigned int v9 = sub_1000F2EC4(a1, a2);
    LOBYTE(v18) = 4;
    unint64_t v19 = v9;
    sub_100016EAC((uint64_t)&v18);
    sub_100016EAC((uint64_t)&v18);
    unsigned __int8 v28 = -86;
    sub_100072884((char *)&v18, &v28);
    int v10 = v28;
    sub_100016EAC((uint64_t)&v18);
    sub_100016B28((uint64_t **)&v19, v18);
    if (v10)
    {
      uint64_t v11 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1) >= v21)
      {
        uint64_t v12 = sub_100013F48((uint64_t *)&v20, v5);
      }
      else
      {
        sub_100016A10(*((uint64_t *)&v20 + 1), v5);
        uint64_t v12 = v11 + 16;
      }
      *((void *)&v20 + 1) = v12;
    }
  }
  if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v4 - v17)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Filter left the wrong number of items on the stack.");
  }
  LOBYTE(v18) = 2;
  uint64_t v13 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v13 = v20;
  _OWORD v13[2] = v21;
  unint64_t v21 = 0;
  unint64_t v19 = (unint64_t)v13;
  long long v20 = 0uLL;
  sub_100016EAC((uint64_t)&v18);
  sub_100016EAC((uint64_t)&v18);
  unint64_t v14 = *(void *)(a2 + 32);
  if (v14 >= *(void *)(a2 + 40))
  {
    uint64_t v15 = sub_100019524((uint64_t *)(a2 + 24), (uint64_t)&v18);
  }
  else
  {
    *(unsigned char *)unint64_t v14 = (_BYTE)v18;
    *(void *)(v14 + 8) = v19;
    sub_100016EAC((uint64_t)&v18);
    LOBYTE(v18) = 0;
    unint64_t v19 = 0;
    sub_100016EAC(v14);
    uint64_t v15 = v14 + 16;
  }
  *(void *)(a2 + 32) = v15;
  sub_100016EAC((uint64_t)&v18);
  sub_100016B28((uint64_t **)&v19, v18);
  os_log_type_t v18 = (void **)&v20;
  sub_100016F68(&v18);
  *(void *)&long long v20 = &v22;
  sub_100016F68((void ***)&v20);
  sub_100016EAC((uint64_t)&v24);
  sub_100016B28(&v25, v24);
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
}

void sub_1000CA9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v7 = va_arg(va2, void **);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, uint64_t *);
  uint64_t v17 = va_arg(va4, void);
  sub_100028D64((uint64_t **)va);
  va_copy((va_list)v4, va1);
  sub_100016F68((void ***)va);
  va_copy((va_list)v7, va2);
  sub_100016F68((void ***)va1);
  sub_100028D64((uint64_t **)va3);
  sub_100028D64((uint64_t **)va4);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAA60()
{
  return 1;
}

void sub_1000CAA68(uint64_t a1, uint64_t a2)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v23);
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v21);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_100011C74((uint64_t)&v21, &v19);
  long long v17 = 0uLL;
  unint64_t v18 = 0;
  uint64_t v5 = v19;
  for (uint64_t i = v20; v5 != i; v5 += 16)
  {
    uint64_t v15 = (void **)0xAAAAAAAAAAAAAAAALL;
    long long v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >= *(void *)(a2 + 40))
    {
      uint64_t v8 = sub_100013F48((uint64_t *)(a2 + 24), v5);
    }
    else
    {
      sub_100016A10(*(void *)(a2 + 32), v5);
      uint64_t v8 = v7 + 16;
      *(void *)(a2 + 32) = v7 + 16;
    }
    *(void *)(a2 + 32) = v8;
    sub_100013798(*(void ***)(a2 + 48), a2, &v23);
    sub_10001DC2C(a2, &v15);
    uint64_t v9 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) >= v18)
    {
      uint64_t v10 = sub_100019524((uint64_t *)&v17, (uint64_t)&v15);
    }
    else
    {
      **((unsigned char **)&v17 + 1) = (_BYTE)v15;
      *(void *)(v9 + 8) = v16;
      sub_100016EAC((uint64_t)&v15);
      LOBYTE(v15) = 0;
      long long v16 = 0;
      sub_100016EAC(v9);
      uint64_t v10 = v9 + 16;
    }
    *((void *)&v17 + 1) = v10;
    sub_100016EAC((uint64_t)&v15);
    sub_100016B28(&v16, v15);
  }
  if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v4 - v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Map left the wrong number of items on the stack.");
  }
  LOBYTE(v15) = 2;
  uint64_t v11 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)uint64_t v11 = v17;
  v11[2] = v18;
  unint64_t v18 = 0;
  long long v16 = v11;
  long long v17 = 0uLL;
  sub_100016EAC((uint64_t)&v15);
  sub_100016EAC((uint64_t)&v15);
  unint64_t v12 = *(void *)(a2 + 32);
  if (v12 >= *(void *)(a2 + 40))
  {
    uint64_t v13 = sub_100019524((uint64_t *)(a2 + 24), (uint64_t)&v15);
  }
  else
  {
    *(unsigned char *)unint64_t v12 = (_BYTE)v15;
    *(void *)(v12 + 8) = v16;
    sub_100016EAC((uint64_t)&v15);
    LOBYTE(v15) = 0;
    long long v16 = 0;
    sub_100016EAC(v12);
    uint64_t v13 = v12 + 16;
  }
  *(void *)(a2 + 32) = v13;
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
  uint64_t v15 = (void **)&v17;
  sub_100016F68(&v15);
  *(void *)&long long v17 = &v19;
  sub_100016F68((void ***)&v17);
  sub_100016EAC((uint64_t)&v21);
  sub_100016B28(&v22, v21);
  sub_100016EAC((uint64_t)&v23);
  sub_100016B28(&v24, v23);
}

void sub_1000CAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t *a20)
{
  a9 = &a11;
  sub_100016F68((void ***)&a9);
  a11 = (void **)&a15;
  sub_100016F68(&a11);
  sub_100028D64(&a18);
  sub_100028D64(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CADC8()
{
  return 1;
}

void sub_1000CADD0(uint64_t a1, uint64_t a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v15);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v13);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  sub_100011C74((uint64_t)&v13, &v11);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  if (v12 != v11 && (_BYTE)v15)
  {
    uint64_t v7 = v4 - v3;
    if (v15 == 1)
    {
      if (!v16[2]) {
        goto LABEL_13;
      }
    }
    else if (v15 == 2 && !((v16[1] - *v16) >> 4))
    {
      goto LABEL_13;
    }
    do
    {
      unint64_t v8 = *(void *)(a2 + 32);
      if (v8 >= *(void *)(a2 + 40))
      {
        uint64_t v9 = sub_100013F48((uint64_t *)(a2 + 24), v5);
      }
      else
      {
        sub_100016A10(*(void *)(a2 + 32), v5);
        uint64_t v9 = v8 + 16;
        *(void *)(a2 + 32) = v8 + 16;
      }
      *(void *)(a2 + 32) = v9;
      sub_100013798(*(void ***)(a2 + 48), a2, &v15);
      v5 += 16;
    }
    while (v5 != v6);
    if (*(void *)(a2 + 32) - *(void *)(a2 + 24) != v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Fold left the wrong number of items on the stack.");
    }
  }
LABEL_13:
  long long v17 = (void **)&v11;
  sub_100016F68(&v17);
  sub_100016EAC((uint64_t)&v13);
  sub_100016B28(&v14, v13);
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
}

void sub_1000CAF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a10;
  sub_100016F68(&a17);
  sub_100028D64(&a13);
  sub_100028D64(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAFFC()
{
  return 1;
}

void sub_1000CB008(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000CB044(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000CB080(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000CB0BC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000CB0F8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000CB130()
{
}

void *sub_1000CB1B4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = dispatch_queue_create("analyticsd.ConfigurerQueue", 0);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10)
  {
    uint64_t v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v12 = a3[1];
  a1[6] = *a3;
  a1[7] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2[1];
  a1[8] = *a2;
  a1[9] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a4[1];
  a1[10] = *a4;
  a1[11] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a5[1];
  a1[12] = *a5;
  a1[13] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1000CB28C(void *a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, a1);
  operator new();
}

void sub_1000CB3AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000CB3BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(NSObject **)(a1 + 16);
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1000CE280;
  void v5[3] = &unk_100158960;
  void v5[4] = a1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100004724;
  block[3] = &unk_100158980;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000CB4D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(NSObject **)(a1 + 16);
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1000CE840;
  void v5[3] = &unk_100158A30;
  void v5[4] = a1;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100004724;
  block[3] = &unk_100158980;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000CB5F4(void *a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  v2[0] = 0xAAAAAAAAAAAAAAAALL;
  v2[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v2, a1);
  operator new();
}

void sub_1000CB704(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000CB714(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v3 = &v4;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000CF3CC;
  block[3] = &unk_100158A50;
  void block[4] = a1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000CB7C4(void *a1@<X0>, NSObject **a2@<X8>)
{
  char v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, a1);
  operator new();
}

void sub_1000CB8E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000CB8F4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  uint64_t v2 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000CF53C;
  block[3] = &unk_100158A70;
  void block[4] = a1;
  void block[5] = &v2;
  dispatch_sync(v1, block);
}

void sub_1000CB998(void *a1@<X0>, NSObject **a2@<X8>)
{
  char v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, a1);
  operator new();
}

void sub_1000CBAB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000CBAC8(uint64_t a1)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = 0xAAAAAAAAAAAAAA00;
  long long v47 = v2;
  os_log_type_t v44 = off_100156D20;
  int v46 = 0;
  sub_100016EAC((uint64_t)&v45);
  sub_100016EAC((uint64_t)&v45);
  LOBYTE(v47) = 0;
  *((void *)&v47 + 1) = 0;
  sub_100016EAC((uint64_t)&v47);
  sub_100016EAC((uint64_t)&v47);
  sub_1000459F4((uint64_t)v48, "message");
  uint64_t v49 = v48;
  char v50 = 1;
  char v52 = (unsigned char *)sub_1000CF5E8((uint64_t)v51, "Locating configs");
  char v53 = 1;
  sub_10001200C((uint64_t)v54, (uint64_t)v48, 2, 1, 2);
  uint64_t v56 = v54;
  char v57 = 1;
  sub_10001200C((uint64_t)v42, (uint64_t)v54, 1, 1, 2);
  sub_10009E064((uint64_t)&v44, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v42);
  sub_100016EAC((uint64_t)v42);
  sub_100016B28(&v43, v42[0]);
  sub_100016EAC((uint64_t)v54);
  sub_100016B28(&v55, v54[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)&v51[i]);
    sub_100016B28((uint64_t **)&v51[i + 8], v51[i]);
  }
  memset(v41, 170, sizeof(v41));
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 48) + 16))(v41);
  uint64_t v5 = (uint64_t *)v41[0];
  char v4 = (uint64_t *)v41[1];
  if (v41[0] == v41[1])
  {
    sub_1000459F4((uint64_t)v48, "message");
    uint64_t v49 = v48;
    char v50 = 1;
    char v52 = (unsigned char *)sub_1000CF680((uint64_t)v51, "No configs visible");
    char v53 = 1;
    sub_10001200C((uint64_t)v54, (uint64_t)v48, 2, 1, 2);
    uint64_t v56 = v54;
    char v57 = 1;
    sub_10001200C((uint64_t)v39, (uint64_t)v54, 1, 1, 2);
    sub_10009E388((uint64_t)&v44, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v39);
    sub_100016EAC((uint64_t)v39);
    sub_100016B28(&v40, v39[0]);
    sub_100016EAC((uint64_t)v54);
    sub_100016B28(&v55, v54[0]);
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      sub_100016EAC((uint64_t)&v51[j]);
      sub_100016B28((uint64_t **)&v51[j + 8], v51[j]);
    }
  }
  else
  {
    do
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v38 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      sub_1000CC1B0(a1, v5, &v37);
      if (v37)
      {
        sub_1000459F4((uint64_t)v48, "message");
        uint64_t v49 = v48;
        char v50 = 1;
        std::operator+<char>();
        uint64_t v6 = std::string::append(&v30, " (");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        int v8 = *(char *)(*v5 + 55);
        if (v8 >= 0) {
          uint64_t v9 = (const std::string::value_type *)(*v5 + 32);
        }
        else {
          uint64_t v9 = *(const std::string::value_type **)(*v5 + 32);
        }
        if (v8 >= 0) {
          std::string::size_type v10 = *(unsigned __int8 *)(*v5 + 55);
        }
        else {
          std::string::size_type v10 = *(void *)(*v5 + 40);
        }
        uint64_t v11 = std::string::append(&v31, v9, v10);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        uint64_t v13 = std::string::append(&v32, ")");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        std::string::size_type v34 = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        sub_10001C898((uint64_t)v51, (uint64_t)__p);
        char v52 = v51;
        char v53 = 1;
        sub_10001200C((uint64_t)v54, (uint64_t)v48, 2, 1, 2);
        uint64_t v56 = v54;
        char v57 = 1;
        sub_10001200C((uint64_t)v35, (uint64_t)v54, 1, 1, 2);
        sub_10009E064((uint64_t)&v44, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v35);
        sub_100016EAC((uint64_t)v35);
        sub_100016B28(&v36, v35[0]);
        sub_100016EAC((uint64_t)v54);
        sub_100016B28(&v55, v54[0]);
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          sub_100016EAC((uint64_t)&v51[k]);
          sub_100016B28((uint64_t **)&v51[k + 8], v51[k]);
        }
      }
      else
      {
        sub_1000459F4((uint64_t)v48, "message");
        uint64_t v49 = v48;
        char v50 = 1;
        std::operator+<char>();
        long long v16 = std::string::append(&v30, " (");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        int v18 = *(char *)(*v5 + 55);
        if (v18 >= 0) {
          uint64_t v19 = (const std::string::value_type *)(*v5 + 32);
        }
        else {
          uint64_t v19 = *(const std::string::value_type **)(*v5 + 32);
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *(unsigned __int8 *)(*v5 + 55);
        }
        else {
          std::string::size_type v20 = *(void *)(*v5 + 40);
        }
        unint64_t v21 = std::string::append(&v31, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        unint64_t v23 = std::string::append(&v32, ")");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v34 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        sub_10001C898((uint64_t)v51, (uint64_t)__p);
        char v52 = v51;
        char v53 = 1;
        sub_10001200C((uint64_t)v54, (uint64_t)v48, 2, 1, 2);
        uint64_t v56 = v54;
        char v57 = 1;
        sub_10001200C((uint64_t)v28, (uint64_t)v54, 1, 1, 2);
        sub_10009E064((uint64_t)&v44, (uint64_t)"Configurer::StoreConfigs", (uint64_t)v28);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
        sub_100016EAC((uint64_t)v54);
        sub_100016B28(&v55, v54[0]);
        for (uint64_t m = 0; m != -64; m -= 32)
        {
          sub_100016EAC((uint64_t)&v51[m]);
          sub_100016B28((uint64_t **)&v51[m + 8], v51[m]);
        }
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v38) {
        sub_1000147D8(v38);
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
  v48[0] = (void **)v41;
  sub_100014738(v48);
  os_log_type_t v44 = off_100156D20;
  sub_100016EAC((uint64_t)&v47);
  sub_100016B28((uint64_t **)&v47 + 1, v47);
  sub_100016EAC((uint64_t)&v45);
  sub_100016B28(&v46, v45);
  return nullsub_13(&v44);
}

void sub_1000CC1A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000CC1B0(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  if (!*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  memset(v14, 170, sizeof(v14));
  sub_1000CC394(a1, a2, (uint64_t)v14);
  uint64_t v6 = v14[0];
  if (v14[0]) {
    BOOL v7 = LOBYTE(v14[2]) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_16;
  }
  int v8 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)long long buf = 136446210;
    long long v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Configurer] -- Config store does NOT already contain config '%{public}s'. Proceeding and attempting to store", buf, 0xCu);
  }
  char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 80))(*(void *)(a1 + 64), v6);
  uint64_t v11 = qword_10015EF58;
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
    {
      long long v12 = (void *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0) {
        long long v12 = (void *)*v12;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[Configurer] -- Try store config '%{public}s': success!", buf, 0xCu);
    }
LABEL_16:
    uint64_t v13 = (std::__shared_weak_count *)v14[1];
    *a3 = v6;
    a3[1] = v13;
    if (!v13) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_22;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR)) {
    sub_1000CF748();
  }
  *a3 = 0;
  a3[1] = 0;
  uint64_t v13 = (std::__shared_weak_count *)v14[1];
  if (v14[1]) {
LABEL_22:
  }
    sub_1000147D8(v13);
}

void sub_1000CC394(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return;
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_10002FB40(v5, &v14);
  uint64_t v7 = v14;
  int v8 = qword_10015EF58;
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Configurer] -- Config '%{public}s' loaded successfully!", buf, 0xCu);
      uint64_t v7 = v14;
    }
    if (sub_1000F2840(*(void *)(a1 + 64), v7))
    {
      char v10 = qword_10015EF58;
      if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = (void *)(*a2 + 8);
        if (*(char *)(*a2 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Configurer] -- Config store contains '%{public}s': success; already present",
          buf,
          0xCu);
      }
      long long v12 = v15;
      *(void *)a3 = v14;
      *(void *)(a3 + 8) = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_22;
    }
    uint64_t v13 = v15;
    *(void *)a3 = v14;
    *(void *)(a3 + 8) = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR)) {
      sub_1000CF7C0();
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
LABEL_22:
  if (v15) {
    sub_1000147D8(v15);
  }
}

uint64_t sub_1000CC574(uint64_t a1, dispatch_object_t *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v36 = 0xAAAAAAAAAAAAAA00;
  long long v37 = v4;
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)off_100156D20;
  sub_100016EAC((uint64_t)&v36);
  sub_100016EAC((uint64_t)&v36);
  LOBYTE(v37) = 0;
  *((void *)&v37 + 1) = 0;
  sub_100016EAC((uint64_t)&v37);
  sub_100016EAC((uint64_t)&v37);
  v35.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v35.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 64) + 96))(&v35);
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    sub_100007460((uint64_t)&v35, -1, 0x20u, 0, 1, &__p);
    uint64_t v6 = SHIBYTE(v40) >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)int v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Configurer] == Last config: %{public}s", buf, 0xCu);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)__p);
    }
  }
  memset(v38, 170, sizeof(v38));
  sub_1000CCE14(a1, (uint64_t)&v35.__r_.__value_.__r.__words[2], (uint64_t)v38);
  uint64_t v7 = v38[0];
  if (v38[0])
  {
    if (!LOBYTE(v38[2]))
    {
      int v8 = qword_10015EF58;
      if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(buf, v7);
        sub_100007460((uint64_t)buf, -1, 0x20u, 0, 1, &__p);
        if (SHIBYTE(v40) >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        LODWORD(v51.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Configurer] === WARNING: -- Selected config %{public}s not already contained in store. Clean install or tasking notification might not have been recieved? Storing all configs now", (uint8_t *)&v51, 0xCu);
        if (SHIBYTE(v40) < 0) {
          operator delete((void *)__p);
        }
        sub_100016EAC((uint64_t)buf);
        sub_100016B28((uint64_t **)&v46[4], buf[0]);
      }
      sub_1000CBAC8(a1);
    }
    if (sub_1000F2840(*(void *)(a1 + 64), v7))
    {
      memset(&v51, 170, sizeof(v51));
      sub_1000F269C(v7, &v51);
      memset(&__s1, 170, sizeof(__s1));
      sub_1000F2750(&v35, &__s1);
      uint64_t v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v13 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v13 = v51.__r_.__value_.__l.__size_;
      }
      if (size == v13)
      {
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v10 = &v51;
        }
        else {
          char v10 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == v10->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              char v10 = (std::string *)((char *)v10 + 1);
              if (!--v11) {
                goto LABEL_50;
              }
            }
            goto LABEL_39;
          }
LABEL_50:
          unint64_t v23 = qword_10015EF58;
          if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[Configurer] -- Built next config and the header did not change.", (uint8_t *)&__p, 2u);
          }
          goto LABEL_52;
        }
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_50;
        }
      }
LABEL_39:
      sub_1000CD898(a1, (uint64_t)v10, a2);
      sub_1000CDA38(a1, v16, a2);
      int v17 = sub_1000F2920(*(void *)(a1 + 64), v7);
      int v18 = qword_10015EF58;
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(buf, v7);
          sub_100007460((uint64_t)buf, -1, 0x20u, 0, 1, &__p);
          if (SHIBYTE(v40) >= 0) {
            std::string::size_type v20 = &__p;
          }
          else {
            std::string::size_type v20 = (long long *)__p;
          }
          *(_DWORD *)uint64_t v49 = 136446210;
          char v50 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[Configurer] Successfully activated next config %{public}s", v49, 0xCu);
          if (SHIBYTE(v40) < 0) {
            operator delete((void *)__p);
          }
          sub_100016EAC((uint64_t)buf);
          sub_100016B28((uint64_t **)&v46[4], buf[0]);
        }
        sub_1000CDB9C(a1, v19, a2);
        sub_1000CDD00(a1, v21, a2);
        uint64_t v22 = 1;
        goto LABEL_53;
      }
      if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v7 + 16))(v33, v7);
        sub_100007460((uint64_t)v33, -1, 0x20u, 0, 1, v49);
        sub_1000CF8A8();
      }
LABEL_52:
      uint64_t v22 = 0;
LABEL_53:
      unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
      std::string v32 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 64) + 96))(&v31);
      long long v24 = qword_10015EF58;
      if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
      {
        sub_100007460((uint64_t)&v31, -1, 0x20u, 0, 1, &__p);
        size_t v25 = SHIBYTE(v40) >= 0 ? &__p : (long long *)__p;
        *(_DWORD *)long long buf = 136446210;
        *(void *)int v46 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[Configurer] == Next config: %{public}s", buf, 0xCu);
        if (SHIBYTE(v40) < 0) {
          operator delete((void *)__p);
        }
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
      std::string v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_1000459F4((uint64_t)&__p, "changed");
      os_log_type_t v40 = &__p;
      char v41 = 1;
      v42[0] = 4;
      v43[0] = v22;
      sub_100016EAC((uint64_t)v42);
      sub_100016EAC((uint64_t)v42);
      v43[1] = v42;
      char v44 = 1;
      sub_10001200C((uint64_t)buf, (uint64_t)&__p, 2, 1, 2);
      long long v47 = buf;
      char v48 = 1;
      sub_10001200C((uint64_t)&v29, (uint64_t)buf, 1, 0, 1);
      sub_100016EAC((uint64_t)buf);
      sub_100016B28((uint64_t **)&v46[4], buf[0]);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        sub_100016EAC((uint64_t)&v42[i * 8]);
        sub_100016B28((uint64_t **)&v43[i], v42[i * 8]);
      }
      uint64_t v27 = *(void *)(a1 + 80);
      sub_100015438(&__p, "com.apple.coreanalytics.meta.ConfigurationComplete");
      sub_10008D90C(&__p, (uint64_t)&v29, buf);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v27 + 24))(v27, buf);
      if (*(void *)&v46[4]) {
        sub_1000147D8(*(std::__shared_weak_count **)&v46[4]);
      }
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)__p);
      }
      sub_100016EAC((uint64_t)&v29);
      sub_100016B28(&v30, v29);
      sub_100016EAC((uint64_t)&v31);
      sub_100016B28(&v32, v31);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      goto LABEL_69;
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(buf, v7);
      sub_100007460((uint64_t)buf, -1, 0x20u, 0, 1, &__p);
      sub_1000CF90C();
    }
  }
  else
  {
    uint64_t v15 = qword_10015EF58;
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR)) {
      sub_1000CF838(v15);
    }
    (*(void (**)(void))(**(void **)(a1 + 64) + 104))(*(void *)(a1 + 64));
  }
LABEL_69:
  if (v38[1]) {
    sub_1000147D8((std::__shared_weak_count *)v38[1]);
  }
  sub_100016EAC((uint64_t)&v35);
  sub_100016B28((uint64_t **)&v35.__r_.__value_.__l.__size_, v35.__r_.__value_.__s.__data_[0]);
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)off_100156D20;
  sub_100016EAC((uint64_t)&v37);
  sub_100016B28((uint64_t **)&v37 + 1, v37);
  sub_100016EAC((uint64_t)&v36);
  sub_100016B28((uint64_t **)&v36 + 1, v36);
  return nullsub_13(&v35.__r_.__value_.__r.__words[2]);
}

void sub_1000CCE08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000CCE14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000459F4((uint64_t)v68, "message");
  unint64_t v69 = v68;
  char v70 = 1;
  uint64_t v72 = (unsigned char *)sub_1000CF5E8((uint64_t)v71, "Selecting config");
  char v73 = 1;
  sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
  unint64_t v76 = v74;
  char v77 = 1;
  sub_10001200C((uint64_t)v65, (uint64_t)v74, 1, 1, 2);
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 16))(a2, "Configurer::SelectConfiguration", v65);
  sub_100016EAC((uint64_t)v65);
  sub_100016B28(&v66, v65[0]);
  sub_100016EAC((uint64_t)v74);
  sub_100016B28(&v75, v74[0]);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)&v71[i]);
    sub_100016B28((uint64_t **)&v71[i + 8], v71[i]);
  }
  memset(v64, 170, sizeof(v64));
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 48) + 16))(v64);
  uint64_t v6 = (uint64_t *)v64[0];
  long long v47 = (uint64_t *)v64[1];
  if (v64[0] == v64[1])
  {
    sub_1000459F4((uint64_t)v68, "message");
    unint64_t v69 = v68;
    char v70 = 1;
    uint64_t v72 = (unsigned char *)sub_1000CF680((uint64_t)v71, "No configs visible");
    char v73 = 1;
    sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
    unint64_t v76 = v74;
    char v77 = 1;
    sub_10001200C((uint64_t)v62, (uint64_t)v74, 1, 1, 2);
    (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 40))(a2, "Configurer::SelectConfiguration", v62);
    sub_100016EAC((uint64_t)v62);
    sub_100016B28(&v63, v62[0]);
    sub_100016EAC((uint64_t)v74);
    sub_100016B28(&v75, v74[0]);
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      sub_100016EAC((uint64_t)&v71[j]);
      sub_100016B28((uint64_t **)&v71[j + 8], v71[j]);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    char v46 = 0;
    uint64_t v49 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v7 = 0;
    do
    {
      memset(v67, 170, sizeof(v67));
      sub_1000CC394(a1, v6, (uint64_t)v67);
      uint64_t v8 = *(void *)v67;
      if (*(void *)v67)
      {
        uint64_t v9 = *(std::__shared_weak_count **)&v67[8];
        if (*(void *)&v67[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v67[8] + 8), 1uLL, memory_order_relaxed);
        }
        if (v7) {
          sub_1000147D8(v7);
        }
        char v10 = (std::__shared_weak_count *)v6[1];
        uint64_t v44 = *v6;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v49) {
          sub_1000147D8(v49);
        }
        char v46 = v67[16];
        sub_1000459F4((uint64_t)v68, "message");
        unint64_t v69 = v68;
        char v70 = 1;
        std::operator+<char>();
        uint64_t v11 = std::string::append(&v56, " (");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        int v13 = *(char *)(*v6 + 55);
        if (v13 >= 0) {
          unint64_t v14 = (const std::string::value_type *)(*v6 + 32);
        }
        else {
          unint64_t v14 = *(const std::string::value_type **)(*v6 + 32);
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(*v6 + 55);
        }
        else {
          std::string::size_type v15 = *(void *)(*v6 + 40);
        }
        uint64_t v16 = std::string::append(&v57, v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        int v18 = std::string::append(&v58, ")");
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        sub_10001C898((uint64_t)v71, (uint64_t)&__p);
        uint64_t v72 = v71;
        char v73 = 1;
        sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
        unint64_t v76 = v74;
        char v77 = 1;
        sub_10001200C((uint64_t)v60, (uint64_t)v74, 1, 1, 2);
        (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 16))(a2, "Configurer::SelectConfiguration", v60);
        uint64_t v45 = v8;
        uint64_t v7 = v9;
        uint64_t v49 = v10;
        sub_100016EAC((uint64_t)v60);
        sub_100016B28(&v61, v60[0]);
        sub_100016EAC((uint64_t)v74);
        sub_100016B28(&v75, v74[0]);
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          sub_100016EAC((uint64_t)&v71[k]);
          sub_100016B28((uint64_t **)&v71[k + 8], v71[k]);
        }
      }
      else
      {
        sub_1000459F4((uint64_t)v68, "message");
        unint64_t v69 = v68;
        char v70 = 1;
        std::operator+<char>();
        uint64_t v21 = std::string::append(&v56, " (");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        int v23 = *(char *)(*v6 + 55);
        if (v23 >= 0) {
          long long v24 = (const std::string::value_type *)(*v6 + 32);
        }
        else {
          long long v24 = *(const std::string::value_type **)(*v6 + 32);
        }
        if (v23 >= 0) {
          std::string::size_type v25 = *(unsigned __int8 *)(*v6 + 55);
        }
        else {
          std::string::size_type v25 = *(void *)(*v6 + 40);
        }
        unint64_t v26 = std::string::append(&v57, v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v28 = std::string::append(&v58, ")");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_10001C898((uint64_t)v71, (uint64_t)&__p);
        uint64_t v72 = v71;
        char v73 = 1;
        sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
        unint64_t v76 = v74;
        char v77 = 1;
        sub_10001200C((uint64_t)v54, (uint64_t)v74, 1, 1, 2);
        (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 16))(a2, "Configurer::SelectConfiguration", v54);
        sub_100016EAC((uint64_t)v54);
        sub_100016B28(&v55, v54[0]);
        sub_100016EAC((uint64_t)v74);
        sub_100016B28(&v75, v74[0]);
        for (uint64_t m = 0; m != -64; m -= 32)
        {
          sub_100016EAC((uint64_t)&v71[m]);
          sub_100016B28((uint64_t **)&v71[m + 8], v71[m]);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (*(void *)&v67[8]) {
        sub_1000147D8(*(std::__shared_weak_count **)&v67[8]);
      }
      v6 += 2;
    }
    while (v6 != v47);
    if (v45)
    {
      sub_1000459F4((uint64_t)v68, "message");
      unint64_t v69 = v68;
      char v70 = 1;
      std::operator+<char>();
      unint64_t v31 = std::string::append(&v57, " (");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = *(char *)(v44 + 55);
      if (v33 >= 0) {
        std::string::size_type v34 = (const std::string::value_type *)(v44 + 32);
      }
      else {
        std::string::size_type v34 = *(const std::string::value_type **)(v44 + 32);
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(v44 + 55);
      }
      else {
        std::string::size_type v35 = *(void *)(v44 + 40);
      }
      long long v36 = std::string::append(&v58, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&__p, ")");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      *(void *)&v67[16] = *((void *)&v38->__r_.__value_.__l + 2);
      *(_OWORD *)unsigned __int8 v67 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      uint64_t v72 = (unsigned char *)sub_10001C898((uint64_t)v71, (uint64_t)v67);
      char v73 = 1;
      sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
      unint64_t v76 = v74;
      char v77 = 1;
      sub_10001200C((uint64_t)v52, (uint64_t)v74, 1, 1, 2);
      (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 16))(a2, "Configurer::SelectConfiguration", v52);
      sub_100016EAC((uint64_t)v52);
      sub_100016B28(&v53, v52[0]);
      sub_100016EAC((uint64_t)v74);
      sub_100016B28(&v75, v74[0]);
      for (uint64_t n = 0; n != -64; n -= 32)
      {
        sub_100016EAC((uint64_t)&v71[n]);
        sub_100016B28((uint64_t **)&v71[n + 8], v71[n]);
      }
      if ((v67[23] & 0x80000000) != 0) {
        operator delete(*(void **)v67);
      }
      char v41 = v46;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_1000459F4((uint64_t)v68, "message");
      unint64_t v69 = v68;
      char v70 = 1;
      uint64_t v72 = (unsigned char *)sub_100045B24((uint64_t)v71, "No config selected?!");
      char v73 = 1;
      sub_10001200C((uint64_t)v74, (uint64_t)v68, 2, 1, 2);
      unint64_t v76 = v74;
      char v77 = 1;
      sub_10001200C((uint64_t)v50, (uint64_t)v74, 1, 1, 2);
      (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)a2 + 40))(a2, "Configurer::SelectConfiguration", v50);
      sub_100016EAC((uint64_t)v50);
      sub_100016B28(&v51, v50[0]);
      sub_100016EAC((uint64_t)v74);
      sub_100016B28(&v75, v74[0]);
      for (iuint64_t i = 0; ii != -64; ii -= 32)
      {
        sub_100016EAC((uint64_t)&v71[ii]);
        sub_100016B28((uint64_t **)&v71[ii + 8], v71[ii]);
      }
      char v41 = v46;
    }
    *(void *)a3 = v45;
    *(void *)(a3 + 8) = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a3 + 16) = v41;
    if (v49) {
      sub_1000147D8(v49);
    }
    if (v7) {
      sub_1000147D8(v7);
    }
  }
  v68[0] = (void **)v64;
  sub_100014738(v68);
}

void sub_1000CD888(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000CD898(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Configurer] === Notifying observers configuration will change", (uint8_t *)&object, 2u);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        char v10 = v9;
        uint64_t v11 = *v6;
        if (*v6)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 24))(&object);
          if (object)
          {
            sub_100053F00(a3, &object);
            if (object) {
              dispatch_release(object);
            }
          }
        }
        sub_1000147D8(v10);
      }
    }
  }
  long long v12 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Configurer] === Completed notifying observers configuration will change", (uint8_t *)&object, 2u);
  }
}

void sub_1000CDA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000147D8(v9);
  _Unwind_Resume(a1);
}

void sub_1000CDA38(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Configurer] === Notifying observers configuration conditions will change", (uint8_t *)&object, 2u);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        char v10 = v9;
        uint64_t v11 = *v6;
        if (*v6)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 32))(&object);
          if (object)
          {
            sub_100053F00(a3, &object);
            if (object) {
              dispatch_release(object);
            }
          }
        }
        sub_1000147D8(v10);
      }
    }
  }
}

void sub_1000CDB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000147D8(v9);
  _Unwind_Resume(a1);
}

void sub_1000CDB9C(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Configurer] === Notifying observers new configuration activated", (uint8_t *)&object, 2u);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        char v10 = v9;
        uint64_t v11 = *v6;
        if (*v6)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 16))(&object);
          if (object)
          {
            sub_100053F00(a3, &object);
            if (object) {
              dispatch_release(object);
            }
          }
        }
        sub_1000147D8(v10);
      }
    }
  }
}

void sub_1000CDCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000147D8(v9);
  _Unwind_Resume(a1);
}

void sub_1000CDD00(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v5 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Configurer] === Notifying observers current configuration conditions changed", (uint8_t *)&object, 2u);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  for (uint64_t i = *(uint64_t **)(a1 + 32); v6 != i; v6 += 2)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        char v10 = v9;
        uint64_t v11 = *v6;
        if (*v6)
        {
          dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v11 + 40))(&object);
          if (object)
          {
            sub_100053F00(a3, &object);
            if (object) {
              dispatch_release(object);
            }
          }
        }
        sub_1000147D8(v10);
      }
    }
  }
}

void sub_1000CDE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_1000147D8(v9);
  _Unwind_Resume(a1);
}

void sub_1000CDE64(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  BOOL v5 = sub_1000B3C24();
  sub_1000B3DC4();
  BOOL v7 = sub_1000B3C24();
  if (v5 != v7)
  {
    sub_1000CDA38(a1, v6, a3);
    if ((*(unsigned int (**)(void, BOOL))(**(void **)(a1 + 64) + 152))(*(void *)(a1 + 64), v7)) {
      sub_1000CDD00(a1, v8, a3);
    }
  }
}

void sub_1000CDEF8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000CDF70(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1000CE048);
  __cxa_rethrow();
}

void sub_1000CDF98(_Unwind_Exception *a1)
{
}

void sub_1000CDFB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000CDFE8(uint64_t a1)
{
}

uint64_t sub_1000CE004(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000CE048(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    long long v2 = *(std::__shared_weak_count **)(result + 104);
    if (v2) {
      sub_1000147D8(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 88);
    if (v3) {
      sub_1000147D8(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(v1 + 72);
    if (v4) {
      sub_1000147D8(v4);
    }
    BOOL v5 = *(std::__shared_weak_count **)(v1 + 56);
    if (v5) {
      sub_1000147D8(v5);
    }
    uint64_t v6 = (void **)(v1 + 24);
    sub_10004926C(&v6);
    sub_10004085C(v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_1000CE0FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = 0xAAAAAAAAAAAAAA00;
  long long v10 = v3;
  sub_100016EAC((uint64_t)&v9);
  sub_100016EAC((uint64_t)&v9);
  LOBYTE(v10) = 0;
  *((void *)&v10 + 1) = 0;
  sub_100016EAC((uint64_t)&v10);
  sub_100016EAC((uint64_t)&v10);
  sub_1000CDD00(v2, v4, (dispatch_object_t *)(v1 + 8));
  uint64_t v8 = off_100156D20;
  sub_100016EAC((uint64_t)&v10);
  sub_100016B28((uint64_t **)&v10 + 1, v10);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28((uint64_t **)&v9 + 1, v9);
  nullsub_13(&v8);
  sub_100042CF8(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_1000CE230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, unsigned __int8 a14)
{
  sub_100016EAC(v17);
  sub_100016B28(v16, a14);
  sub_100016EAC(v14);
  sub_100016B28(v15, a12);
  nullsub_13(&a11);
  sub_100042CF8(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

void sub_1000CE280(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  *(_OWORD *)a2 = xmmword_10011E390;
  *(unsigned char *)a2 = 2;
  v14[0] = 0;
  uint64_t v10 = 0;
  *(void *)(a2 + 8) = sub_10001220C((uint64_t *)v14, &v10);
  sub_100016EAC(a2);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(v3 + 64) + 96))(&v12);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 48) + 16))(&v10);
  uint64_t v4 = v10;
  for (uint64_t i = v11; i != v4; i -= 16)
  {
    uint64_t v7 = *(void *)(i - 16);
    uint64_t v6 = v7;
    if (v7)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
      long long v9 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v14[0] = (void **)off_1001589B0;
      v14[1] = (void **)v3;
      v14[2] = (void **)&v12;
      void v14[3] = (void **)v14;
      sub_10002FC0C(v6, (uint64_t)v14, (uint64_t)&v8);
      sub_1000301B4(v14);
      sub_100098B20(a2, (uint64_t)&v8);
      sub_100016EAC((uint64_t)&v8);
      sub_100016B28(&v9, v8);
      uint64_t v4 = v10;
    }
  }
  v14[0] = (void **)&v10;
  sub_100014738(v14);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
}

void sub_1000CE440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
}

void sub_1000CE4A8()
{
}

__n128 sub_1000CE4BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1001589B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000CE508(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001589B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1000CE538(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  int v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v22, 0, 0, 0, 1);
  unsigned int v7 = sub_1000F2840(*(void *)(v6 + 64), a2);
  v20[0] = 4;
  unint64_t v21 = v7;
  sub_100016EAC((uint64_t)v20);
  sub_100016EAC((uint64_t)v20);
  unint64_t v8 = sub_10000D104((unsigned __int8 *)&v22, "storedInDatabase");
  sub_100016EAC((uint64_t)v20);
  unsigned __int8 v9 = *(unsigned char *)v8;
  *(unsigned char *)unint64_t v8 = v20[0];
  v20[0] = v9;
  uint64_t v10 = (uint64_t *)v8[1];
  v8[1] = v21;
  unint64_t v21 = (unint64_t)v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v20);
  sub_100016B28((uint64_t **)&v21, v20[0]);
  int v11 = **(unsigned __int8 **)(a1 + 16);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 16))(&v16, a2);
    unint64_t v12 = (uint64_t *)sub_10001F600((unsigned __int8 *)&v16, *(unsigned __int8 **)(a1 + 16));
  }
  else
  {
    unint64_t v12 = 0;
  }
  v18[0] = 4;
  long long v19 = v12;
  sub_100016EAC((uint64_t)v18);
  sub_100016EAC((uint64_t)v18);
  int v13 = sub_10000D104((unsigned __int8 *)&v22, "isActive");
  sub_100016EAC((uint64_t)v18);
  unsigned __int8 v14 = *(unsigned char *)v13;
  *(unsigned char *)int v13 = v18[0];
  v18[0] = v14;
  std::string::size_type v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v19;
  long long v19 = v15;
  sub_100016EAC((uint64_t)v13);
  sub_100016EAC((uint64_t)v18);
  sub_100016B28(&v19, v18[0]);
  if (v11 == 1)
  {
    sub_100016EAC((uint64_t)&v16);
    sub_100016B28(&v17, v16);
  }
  *(unsigned char *)a3 = v22;
  *(void *)(a3 + 8) = v23;
  sub_100016EAC((uint64_t)&v22);
  LOBYTE(v22) = 0;
  int v23 = 0;
  sub_100016EAC(a3);
  sub_100016EAC((uint64_t)&v22);
  sub_100016B28(&v23, v22);
}

void sub_1000CE788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  BOOL v5 = va_arg(va1, uint64_t *);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  sub_100016EAC((uint64_t)va1);
  sub_100016B28(v2, v8);
  if (v3 == 1) {
    sub_1000CF970((uint64_t **)va);
  }
  sub_100016EAC((uint64_t)va2);
  sub_100016B28((uint64_t **)va3, v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE7F4(uint64_t a1, uint64_t a2)
{
  if (sub_10002AA08(a2, (uint64_t)&off_100158A20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000CE834()
{
  return &off_100158A20;
}

void sub_1000CE840(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(**(void **)(a1 + 40) + 64);
  if (v3)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v3 + 96))(&v21);
    *a2 = 0xAAAAAAAAAAAAAA00;
    a2[1] = 0;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)a2);
    if (v21 == 1)
    {
      sub_10004595C((uint64_t)v50, "Name");
      std::string v51 = v50;
      char v52 = 1;
      sub_10003A370((uint64_t)&v21, "name", (uint64_t)v18);
      uint64_t v4 = sub_10001EE40(v18);
      uint64_t v54 = sub_100016A10((uint64_t)v53, (uint64_t)v4);
      char v55 = 1;
      sub_10001200C((uint64_t)v56, (uint64_t)v50, 2, 1, 2);
      v57[1] = (uint64_t *)v56;
      char v58 = 1;
      sub_10001200C((uint64_t)v59, (uint64_t)v56, 1, 1, 2);
      v60 = v59;
      char v61 = 1;
      sub_10004595C((uint64_t)v41, "uuid");
      uint64_t v42 = v41;
      char v43 = 1;
      sub_10003A370((uint64_t)&v21, "uuid", (uint64_t)v17);
      BOOL v5 = sub_10001EE40(v17);
      uint64_t v45 = sub_100016A10((uint64_t)v44, (uint64_t)v5);
      char v46 = 1;
      sub_10001200C((uint64_t)v47, (uint64_t)v41, 2, 1, 2);
      v48[1] = (uint64_t *)v47;
      char v49 = 1;
      sub_10001200C((uint64_t)v62, (uint64_t)v47, 1, 1, 2);
      v62[2] = v62;
      char v63 = 1;
      sub_100069C10((uint64_t)v32, "Build Date");
      int v33 = v32;
      char v34 = 1;
      sub_10003A370((uint64_t)&v21, "builtOnDate", (uint64_t)v16);
      uint64_t v6 = sub_10001EE40(v16);
      uint64_t v36 = sub_100016A10((uint64_t)v35, (uint64_t)v6);
      char v37 = 1;
      sub_10001200C((uint64_t)v38, (uint64_t)v32, 2, 1, 2);
      v39[1] = (uint64_t *)v38;
      char v40 = 1;
      sub_10001200C((uint64_t)v64, (uint64_t)v38, 1, 1, 2);
      v64[2] = v64;
      char v65 = 1;
      sub_1000459F4((uint64_t)v23, "Version");
      long long v24 = v23;
      char v25 = 1;
      sub_10003A370((uint64_t)&v21, "version", (uint64_t)v15);
      uint64_t v7 = sub_10001EE40(v15);
      uint64_t v27 = sub_100016A10((uint64_t)v26, (uint64_t)v7);
      char v28 = 1;
      sub_10001200C((uint64_t)v29, (uint64_t)v23, 2, 1, 2);
      v30[1] = (uint64_t *)v29;
      char v31 = 1;
      sub_10001200C((uint64_t)v66, (uint64_t)v29, 1, 1, 2);
      unsigned __int8 v67 = v66;
      char v68 = 1;
      sub_10001200C((uint64_t)v19, (uint64_t)v59, 4, 1, 2);
      sub_100016EAC((uint64_t)v19);
      char v8 = *(unsigned char *)a2;
      *(unsigned char *)a2 = v19[0];
      v19[0] = v8;
      unsigned __int8 v9 = (uint64_t *)a2[1];
      a2[1] = v20;
      std::string::size_type v20 = v9;
      sub_100016EAC((uint64_t)a2);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      for (uint64_t i = 0; i != -128; i -= 32)
      {
        sub_100016EAC((uint64_t)&v66[i]);
        sub_100016B28((uint64_t **)&v66[i + 8], v66[i]);
      }
      sub_100016EAC((uint64_t)v29);
      sub_100016B28(v30, v29[0]);
      for (uint64_t j = 0; j != -64; j -= 32)
      {
        sub_100016EAC((uint64_t)&v26[j]);
        sub_100016B28((uint64_t **)&v26[j + 8], v26[j]);
      }
      sub_100016EAC((uint64_t)v38);
      sub_100016B28(v39, v38[0]);
      for (uint64_t k = 0; k != -64; k -= 32)
      {
        sub_100016EAC((uint64_t)&v35[k]);
        sub_100016B28((uint64_t **)&v35[k + 8], v35[k]);
      }
      sub_100016EAC((uint64_t)v47);
      sub_100016B28(v48, v47[0]);
      for (uint64_t m = 0; m != -64; m -= 32)
      {
        sub_100016EAC((uint64_t)&v44[m]);
        sub_100016B28((uint64_t **)&v44[m + 8], v44[m]);
      }
      sub_100016EAC((uint64_t)v56);
      sub_100016B28(v57, v56[0]);
      for (uint64_t n = 0; n != -64; n -= 32)
      {
        sub_100016EAC((uint64_t)&v53[n]);
        sub_100016B28((uint64_t **)&v53[n + 8], v53[n]);
      }
    }
    sub_100016EAC((uint64_t)&v21);
    sub_100016B28(&v22, v21);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    a2[1] = 0;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)a2);
  }
}

void sub_1000CEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32,uint64_t *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unsigned __int8 a42,uint64_t *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned __int8 a54,uint64_t *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000F9A78(v72 + 128, v73 - 216);
  sub_100016EAC((uint64_t)&a42);
  sub_100016B28(&a43, a42);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)(&a34 + i + 32));
    sub_100016B28((uint64_t **)(&a34 + i + 40), *(&a34 + i + 32));
  }
  sub_100016EAC((uint64_t)&a54);
  sub_100016B28(&a55, a54);
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)(&a46 + j + 32));
    sub_100016B28((uint64_t **)(&a46 + j + 40), *(&a46 + j + 32));
  }
  sub_100016EAC((uint64_t)&a66);
  sub_100016B28(&a67, a66);
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    sub_100016EAC((uint64_t)(&a58 + k + 32));
    sub_100016B28((uint64_t **)(&a58 + k + 40), *(&a58 + k + 32));
  }
  sub_100016EAC(v73 - 248);
  sub_100016B28((uint64_t **)(v73 - 240), *(unsigned __int8 *)(v73 - 248));
  for (uint64_t m = 0; m != -64; m -= 32)
  {
    sub_100016EAC((uint64_t)(&a70 + m + 32));
    sub_100016B28((uint64_t **)(&a70 + m + 40), *(&a70 + m + 32));
  }
  sub_100016EAC((uint64_t)v70);
  sub_100016B28(v71, *v70);
  sub_100016EAC((uint64_t)&a32);
  sub_100016B28(&a33, a32);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000CF054(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1000CF138((uint64_t *)(*(void *)v1 + 24), v1 + 8);
  sub_1000CF0E4(&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_1000CF0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000CF0E4((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000CF0E4(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

_OWORD *sub_1000CF138(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (_OWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)sub_1000171B0((uint64_t)v4, v12);
    unsigned __int8 v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    void v17[3] = &v13[16 * v15];
    *(_OWORD *)unsigned __int8 v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    _OWORD v17[2] = v14 + 16;
    sub_1000CF258(a1, v17);
    char v8 = (_OWORD *)a1[1];
    sub_100049D10(v17);
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    char v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_1000CF244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_1000CF258(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000CF2D0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000CF2D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_1000CF394((uint64_t)v14);
  return v10;
}

uint64_t sub_1000CF394(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100049CCC(a1);
  }
  return a1;
}

void sub_1000CF3CC(uint64_t a1)
{
}

void sub_1000CF3DC(uint64_t **a1)
{
  uint64_t v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = 0xAAAAAAAAAAAAAA00;
  long long v10 = v3;
  uint64_t v8 = off_100156D20;
  sub_100016EAC((uint64_t)&v9);
  sub_100016EAC((uint64_t)&v9);
  LOBYTE(v10) = 0;
  *((void *)&v10 + 1) = 0;
  sub_100016EAC((uint64_t)&v10);
  sub_100016EAC((uint64_t)&v10);
  uint64_t v4 = (dispatch_object_t *)(v1 + 1);
  sub_1000CDE64(v2, v5, (dispatch_object_t *)v1 + 1);
  uint64_t v8 = off_100156D20;
  sub_100016EAC((uint64_t)&v10);
  sub_100016B28((uint64_t **)&v10 + 1, v10);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28((uint64_t **)&v9 + 1, v9);
  nullsub_13(&v8);
  uint64_t v6 = v1[1];
  if (v6)
  {
    dispatch_group_leave(v6);
    if (*v4) {
      dispatch_release(*v4);
    }
  }
  operator delete();
}

uint64_t sub_1000CF53C(uint64_t a1)
{
  return sub_1000CBAC8(**(void **)(a1 + 40));
}

void sub_1000CF548(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = (dispatch_object_t *)(*a1 + 1);
  sub_1000CC574(**a1, v2);
  long long v3 = v1[1];
  if (v3)
  {
    dispatch_group_leave(v3);
    if (*v2) {
      dispatch_release(*v2);
    }
  }
  operator delete();
}

uint64_t sub_1000CF5E8(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000CF634(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000CF634(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000CF66C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF680(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000CF6CC(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000CF6CC(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000CF704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000CF734(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000CF748()
{
  sub_1000CF734(__stack_chk_guard);
  if (v3 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v4 = 136446210;
  uint64_t v5 = v2;
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Configurer] ERROR: -- Try store config '%{public}s': FAILED, did not store", (uint8_t *)&v4);
}

void sub_1000CF7C0()
{
  sub_1000CF734(__stack_chk_guard);
  if (v3 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v4 = 136446210;
  uint64_t v5 = v2;
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Configurer] ERROR: -- Try load config '%{public}s': FAILED, did not load", (uint8_t *)&v4);
}

void sub_1000CF838(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Configurer] ERROR: -- No config could be located; deactivating all configs from store!",
    v1,
    2u);
}

uint64_t **sub_1000CF8A8()
{
  sub_1000CF718();
  if (v7 != v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v2;
  }
  *(_DWORD *)uint64_t v3 = 136446210;
  *(void *)(v3 + 4) = v9;
  sub_100088FE4((void *)&_mh_execute_header, v4, (uint64_t)v4, "[Configurer] ERROR: -- Failed to activate selected device configuration %{public}s!", v5);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  return sub_100028D64(v0);
}

uint64_t **sub_1000CF90C()
{
  sub_1000CF718();
  if (v7 != v8) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v2;
  }
  *(_DWORD *)uint64_t v3 = 136446210;
  *(void *)(v3 + 4) = v9;
  sub_100088FE4((void *)&_mh_execute_header, v4, (uint64_t)v4, "[Configurer] ERROR: -- Selected configuration to activate %{public}s not contained in store!", v5);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  return sub_100028D64(v0);
}

void sub_1000CF970(uint64_t **a1)
{
}

void sub_1000CF9A0()
{
}

void sub_1000CFE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000CFF48(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000F2EC4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 & sub_1000F2EC4(a1, (uint64_t)a2));
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)v7);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = v7[0];
    *(void *)(v5 + 8) = v8;
    sub_100016EAC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
  }
  a2[4] = v6;
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
}

void sub_1000D0044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0058()
{
  return 1;
}

void sub_1000D0060(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000F2EC4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 | sub_1000F2EC4(a1, (uint64_t)a2));
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)v7);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = v7[0];
    *(void *)(v5 + 8) = v8;
    sub_100016EAC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
  }
  a2[4] = v6;
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
}

void sub_1000D015C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0170()
{
  return 1;
}

void sub_1000D0178(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1000F2EC4(a1, (uint64_t)a2);
  v7[0] = 4;
  char v8 = (uint64_t *)(v4 ^ sub_1000F2EC4(a1, (uint64_t)a2));
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v7);
  unint64_t v5 = a2[4];
  if (v5 >= a2[5])
  {
    uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)v7);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = v7[0];
    *(void *)(v5 + 8) = v8;
    sub_100016EAC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
  }
  a2[4] = v6;
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
}

void sub_1000D0274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0288()
{
  return 1;
}

void sub_1000D0290(uint64_t a1, uint64_t *a2)
{
  v5[0] = 4;
  uint64_t v6 = (uint64_t *)(sub_1000F2EC4(a1, (uint64_t)a2) ^ 1);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    uint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
}

void sub_1000D0378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D038C()
{
  return 1;
}

void sub_1000D0394(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v4);
  if (sub_1000F2EC4(a1, a2)) {
    sub_100013798(*(void ***)(a2 + 48), a2, &v4);
  }
  sub_100016EAC((uint64_t)&v4);
  sub_100016B28(&v5, v4);
}

void sub_1000D0434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1000D0450()
{
  return 1;
}

void sub_1000D0458(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  char v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v7);
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8(a2, &v5);
  if (sub_1000F2EC4(a1, a2)) {
    unint64_t v4 = &v5;
  }
  else {
    unint64_t v4 = &v7;
  }
  sub_100013798(*(void ***)(a2 + 48), a2, v4);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_1000D0530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D055C()
{
  return 1;
}

void sub_1000D0568(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D05A4(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D05E0(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D061C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D0658(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D0694(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void *sub_1000D06CC(void *result)
{
  *uint64_t result = off_100158C50;
  return result;
}

void sub_1000D06F4()
{
}

void sub_1000D0804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0834()
{
  return 1;
}

void sub_1000D0840(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

std::runtime_error *sub_1000D0878(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "return");
  result->__vftable = (std::runtime_error_vtbl *)&off_100158CD8;
  return result;
}

void sub_1000D08B4()
{
}

void sub_1000D0908(void **a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_100005F44(a1, a2, v4, a3, a4);
}

void sub_1000D0964(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

void sub_1000D099C()
{
  id v0 = operator new(0x28uLL);
  sub_1000D09E8(v0);
}

void sub_1000D09D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000D09E8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100158D28;
  sub_1000F2A00();
}

void sub_1000D0A34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0A48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100158D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D0A68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100158D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000D0ABC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1000147D8(v1);
  }
}

void sub_1000D0AD0()
{
}

void sub_1000D1D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000D21F8()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000D0878(exception);
}

void sub_1000D2238(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D224C()
{
  return 1;
}

void sub_1000D2254(uint64_t a1, uint64_t *a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v15);
  if (v15 - 5 >= 3)
  {
    if (v15 == 4)
    {
      unsigned __int8 v17 = -86;
      sub_100072884((char *)&v15, &v17);
      unint64_t v3 = &v14;
      v13[0] = 5;
      unsigned __int8 v14 = (uint64_t *)v17;
      sub_100016EAC((uint64_t)v13);
      sub_100016EAC((uint64_t)v13);
      sub_100016EAC((uint64_t)v13);
      unsigned __int8 v4 = v15;
      LOBYTE(v15) = v13[0];
      v13[0] = v4;
      unint64_t v5 = v16;
      uint64_t v16 = v14;
      unsigned __int8 v14 = v5;
      sub_100016EAC((uint64_t)&v15);
      sub_100016EAC((uint64_t)v13);
      int v6 = v13[0];
    }
    else
    {
      unint64_t v3 = &v12;
      v11[0] = 5;
      long long v12 = 0;
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      unsigned __int8 v7 = v15;
      LOBYTE(v15) = v11[0];
      v11[0] = v7;
      char v8 = v16;
      uint64_t v16 = v12;
      long long v12 = v8;
      sub_100016EAC((uint64_t)&v15);
      sub_100016EAC((uint64_t)v11);
      int v6 = v11[0];
    }
    sub_100016B28(v3, v6);
  }
  unint64_t v9 = a2[4];
  if (v9 >= a2[5])
  {
    uint64_t v10 = sub_100013F48(a2 + 3, (uint64_t)&v15);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v15);
    uint64_t v10 = v9 + 16;
    a2[4] = v9 + 16;
  }
  a2[4] = v10;
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
}

void sub_1000D2400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2430()
{
  return 1;
}

void sub_1000D2438(uint64_t a1, uint64_t *a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v15);
  if (v15 - 5 > 2)
  {
    if (v15 == 4) {
      goto LABEL_6;
    }
    unint64_t v3 = &v12;
    v11[0] = 4;
    long long v12 = 0;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v11);
    unsigned __int8 v7 = v15;
    LOBYTE(v15) = v11[0];
    v11[0] = v7;
    char v8 = v16;
    uint64_t v16 = v12;
    long long v12 = v8;
    sub_100016EAC((uint64_t)&v15);
    sub_100016EAC((uint64_t)v11);
    int v6 = v11[0];
  }
  else
  {
    unint64_t v3 = &v14;
    v13[0] = 4;
    unsigned __int8 v14 = (uint64_t *)sub_1000D2608((unsigned __int8 *)&v15, 0);
    sub_100016EAC((uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    unsigned __int8 v4 = v15;
    LOBYTE(v15) = v13[0];
    v13[0] = v4;
    unint64_t v5 = v16;
    uint64_t v16 = v14;
    unsigned __int8 v14 = v5;
    sub_100016EAC((uint64_t)&v15);
    sub_100016EAC((uint64_t)v13);
    int v6 = v13[0];
  }
  sub_100016B28(v3, v6);
LABEL_6:
  unint64_t v9 = a2[4];
  if (v9 >= a2[5])
  {
    uint64_t v10 = sub_100013F48(a2 + 3, (uint64_t)&v15);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v15);
    uint64_t v10 = v9 + 16;
    a2[4] = v9 + 16;
  }
  a2[4] = v10;
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
}

void sub_1000D25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2608(unsigned __int8 *a1, int a2)
{
  v4[0] = 5;
  unint64_t v5 = (uint64_t *)a2;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v4);
  LODWORD(a1) = sub_10001F600(a1, v4);
  sub_100016EAC((uint64_t)v4);
  sub_100016B28(&v5, v4[0]);
  return a1 ^ 1;
}

uint64_t sub_1000D26AC()
{
  return 1;
}

void sub_1000D26B4(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  sub_1000D2800(&v9, __p);
  sub_10001C898((uint64_t)v7, (uint64_t)__p);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v7);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v7[0];
    *(void *)(v3 + 8) = v8;
    sub_100016EAC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000D27BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a17);
  _Unwind_Resume(a1);
}

void sub_1000D2800(unsigned char *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 1:
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001200C((uint64_t)&v24, 0, 0, 0, 1);
      v20[0] = a1;
      v20[1] = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = 0x8000000000000000;
      sub_100014064((unsigned __int8 **)v20);
      int v18 = a1;
      memset(v19, 0, 24);
      void v19[3] = (uint64_t *)0x8000000000000000;
      sub_100013648(&v18);
      while (!sub_100013964((unsigned __int8 **)v20, &v18))
      {
        uint64_t v4 = sub_100013AAC((unsigned __int8 **)v20);
        sub_1000D2800(&__p, v4);
        sub_10001C898((uint64_t)v16, (uint64_t)&__p);
        unint64_t v5 = (const void **)sub_10006FFA4(v20);
        char v6 = sub_10001DA78((unsigned __int8 *)&v24, v5);
        sub_100016EAC((uint64_t)v16);
        char v7 = *(unsigned char *)v6;
        *(unsigned char *)char v6 = v16[0];
        v16[0] = v7;
        char v8 = (uint64_t *)v6[1];
        v6[1] = (uint64_t)v17;
        unsigned __int8 v17 = v8;
        sub_100016EAC((uint64_t)v6);
        sub_100016EAC((uint64_t)v16);
        sub_100016B28(&v17, v16[0]);
        if (v15 < 0) {
          operator delete(__p);
        }
        sub_100013C64((unsigned __int8 **)v20);
      }
      sub_100007460((uint64_t)&v24, -1, 0x20u, 0, 0, a2);
      sub_100016EAC((uint64_t)&v24);
      long long v12 = (uint64_t **)&v25;
      int v11 = v24;
      goto LABEL_19;
    case 2:
      std::string __p = (void *)0xAAAAAAAAAAAAAA02;
      v20[0] = 0;
      int v18 = 0;
      unsigned __int8 v14 = sub_10001220C((uint64_t *)v20, (uint64_t *)&v18);
      sub_100016EAC((uint64_t)&__p);
      v27[0] = a1;
      memset(&v27[1], 0, 24);
      v27[4] = (unsigned __int8 *)0x8000000000000000;
      sub_100014064(v27);
      v26[0] = a1;
      memset(&v26[1], 0, 24);
      v26[4] = (unsigned __int8 *)0x8000000000000000;
      sub_100013648(v26);
      while (!sub_100013964(v27, v26))
      {
        unint64_t v9 = sub_100013AAC(v27);
        sub_1000D2800(v20, v9);
        sub_10001C898((uint64_t)&v18, (uint64_t)v20);
        sub_1000210E0((uint64_t)&__p, (uint64_t)&v18);
        sub_100016EAC((uint64_t)&v18);
        sub_100016B28(v19, v18);
        if (SHIBYTE(v21) < 0) {
          operator delete(v20[0]);
        }
        sub_100013C64(v27);
      }
      sub_100007460((uint64_t)&__p, -1, 0x20u, 0, 0, a2);
      sub_100016EAC((uint64_t)&__p);
      int v11 = __p;
      long long v12 = &v14;
LABEL_19:
      sub_100016B28(v12, v11);
      return;
    case 3:
      uint64_t v10 = "string";
      goto LABEL_23;
    case 4:
      uint64_t v10 = "BOOL";
      goto LABEL_23;
    case 7:
      uint64_t v10 = "float";
      goto LABEL_23;
    default:
      if (*a1 - 5 > 2)
      {
        if (*a1) {
          uint64_t v10 = "unknown";
        }
        else {
          uint64_t v10 = "null";
        }
      }
      else
      {
        uint64_t v10 = "int";
      }
LABEL_23:
      sub_100015438(a2, v10);
      return;
  }
}

void sub_1000D2BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t *a30)
{
}

uint64_t sub_1000D2C78()
{
  return 1;
}

void sub_1000D2C80(uint64_t a1, uint64_t *a2)
{
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v38);
  unint64_t v36 = 0xAAAAAAAAAAAAAA00;
  char v37 = 0;
  sub_100016EAC((uint64_t)&v36);
  sub_100016EAC((uint64_t)&v36);
  if (v38 != 1)
  {
    sub_1000D3008((unsigned __int8 *)&v38, v26);
    sub_10001C898((uint64_t)v16, (uint64_t)v26);
    sub_100016EAC((uint64_t)v16);
    char v11 = v36;
    LOBYTE(v36) = v16[0];
    v16[0] = v11;
    long long v12 = v37;
    char v37 = v17;
    unsigned __int8 v17 = v12;
    sub_100016EAC((uint64_t)&v36);
    sub_100016EAC((uint64_t)v16);
    sub_100016B28(&v17, v16[0]);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    long long v13 = v26[0];
    goto LABEL_17;
  }
  uint64_t v3 = sub_10001200C((uint64_t)v34, 0, 0, 0, 1);
  sub_100016EAC(v3);
  char v4 = v36;
  LOBYTE(v36) = v34[0];
  v34[0] = v4;
  unint64_t v5 = v37;
  char v37 = v35;
  std::string::size_type v35 = v5;
  sub_100016EAC((uint64_t)&v36);
  sub_100016EAC((uint64_t)v34);
  sub_100016B28(&v35, v34[0]);
  int v33 = &v38;
  sub_100006184((uint64_t *)&v33, (uint64_t)v26);
  sub_10000626C((uint64_t *)&v33, (uint64_t)v22);
  while (!sub_1000205D8(v26, v22))
  {
    char v6 = sub_10001EE40(v26);
    sub_1000D3008(v6, __p);
    sub_10001C898((uint64_t)v20, (uint64_t)__p);
    char v7 = (const void **)sub_100005DA8(v26);
    char v8 = sub_10001DA78((unsigned __int8 *)&v36, v7);
    sub_100016EAC((uint64_t)v20);
    char v9 = *(unsigned char *)v8;
    *(unsigned char *)char v8 = v20[0];
    v20[0] = v9;
    uint64_t v10 = (uint64_t *)v8[1];
    v8[1] = (uint64_t)v21;
    uint64_t v21 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_100013C64(v26);
    ++v28;
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22[7]);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0)
  {
    long long v13 = (unsigned __int8 *)v29;
LABEL_17:
    operator delete(v13);
  }
LABEL_18:
  unint64_t v14 = a2[4];
  if (v14 >= a2[5])
  {
    uint64_t v15 = sub_100019524(a2 + 3, (uint64_t)&v36);
  }
  else
  {
    *(unsigned char *)unint64_t v14 = v36;
    *(void *)(v14 + 8) = v37;
    sub_100016EAC((uint64_t)&v36);
    LOBYTE(v36) = 0;
    char v37 = 0;
    sub_100016EAC(v14);
    uint64_t v15 = v14 + 16;
  }
  a2[4] = v15;
  sub_100016EAC((uint64_t)&v36);
  sub_100016B28(&v37, v36);
  sub_100016EAC((uint64_t)&v38);
  sub_100016B28(&v39, v38);
}

void sub_1000D2F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_100028D64((uint64_t **)(v38 - 88));
  sub_100028D64((uint64_t **)(v38 - 72));
  _Unwind_Resume(a1);
}

void *sub_1000D3008@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  int v4 = *a1;
  char v5 = v4 - 1;
  if (v4 - 1) < 7 && ((0x4Fu >> v5))
  {
    char v8 = off_1001595A8[v5];
  }
  else
  {
    unsigned int v6 = v4 - 5;
    if (v4) {
      char v7 = "unknown";
    }
    else {
      char v7 = "null";
    }
    if (v6 >= 3) {
      char v8 = (char *)v7;
    }
    else {
      char v8 = "int";
    }
  }
  return sub_100015438(a2, v8);
}

uint64_t sub_1000D3070()
{
  return 1;
}

void sub_1000D3078(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  char v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 6;
  unint64_t v6 = sub_100026934(&v7);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_1000D318C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D31B8()
{
  return 1;
}

void sub_1000D31C0(uint64_t a1, uint64_t *a2)
{
  sub_100027824(__p);
  sub_10001C898((uint64_t)v7, (uint64_t)__p);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v7);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v7[0];
    *(void *)(v3 + 8) = v8;
    sub_100016EAC((uint64_t)v7);
    v7[0] = 0;
    char v8 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D32D0()
{
  return 1;
}

void sub_1000D32D8(uint64_t a1, uint64_t *a2)
{
  sub_10005CA08(__p);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_1000D4C60(a2 + 3, (uint64_t)__p);
  }
  else
  {
    sub_10001C898(a2[4], (uint64_t)__p);
    uint64_t v4 = v3 + 16;
    a2[4] = v3 + 16;
  }
  a2[4] = v4;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D3378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D33AC()
{
  return 1;
}

void sub_1000D33B4(uint64_t a1, uint64_t *a2)
{
  sub_100089888(__p);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_1000D4C60(a2 + 3, (uint64_t)__p);
  }
  else
  {
    sub_10001C898(a2[4], (uint64_t)__p);
    uint64_t v4 = v3 + 16;
    a2[4] = v3 + 16;
  }
  a2[4] = v4;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D3454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D3488()
{
  return 1;
}

uint64_t sub_1000D3490(uint64_t a1, uint64_t *a2)
{
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v3.__d_.__rep_;
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &rep);
  }
  else
  {
    *(unsigned char *)unint64_t v4 = 5;
    *(std::chrono::system_clock::time_point *)(v4 + 8) = v3;
    sub_100016EAC(v4);
    sub_100016EAC(v4);
    uint64_t result = v4 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D3530()
{
  return 1;
}

uint64_t sub_1000D3538(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 1000;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 5;
    *(void *)(v3 + 8) = 1000;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D35DC()
{
  return 1;
}

uint64_t sub_1000D35E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 1000000;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 5;
    *(void *)(v3 + 8) = 1000000;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D3688()
{
  return 1;
}

uint64_t sub_1000D3690(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 60000000;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 5;
    *(void *)(v3 + 8) = 60000000;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D3734()
{
  return 1;
}

uint64_t sub_1000D373C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 3600000000;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 5;
    *(void *)(v3 + 8) = 3600000000;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D37E0()
{
  return 1;
}

uint64_t sub_1000D37E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 86400000000;
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t result = sub_1000D4D7C(a2 + 3, &v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 5;
    *(void *)(v3 + 8) = 86400000000;
    sub_100016EAC(v3);
    sub_100016EAC(v3);
    uint64_t result = v3 + 16;
  }
  a2[4] = result;
  return result;
}

uint64_t sub_1000D3890()
{
  return 1;
}

void sub_1000D3898(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000F2BF4(a1, (uint64_t)a2);
  if (v4 <= 0)
  {
    *(void *)&__t.tm_seCC_SHA512_CTX c = 0;
    unint64_t v6 = a2[4];
    if (v6 >= a2[5])
    {
      uint64_t v7 = sub_1000270EC(a2 + 3);
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      sub_100016EAC(v6);
      sub_100016EAC(v6);
      uint64_t v7 = v6 + 16;
    }
    a2[4] = v7;
  }
  else
  {
    uint64_t v5 = v4;
    *(void *)&__t.tm_seCC_SHA512_CTX c = v4;
    time_t v13 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
    memset(&__t, 0, sizeof(__t));
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
      localtime_r(&v13, &__t);
    }
    else {
      gmtime_r(&v13, &__t);
    }
    __t.tm_isdst = 0;
    __t.tm_gmtoff = sub_10005CEBC();
    memset(v15, 170, 18);
    *(void *)__s = 0xAAAAAAAAAAAAAAAALL;
    char v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    __s[strftime(__s, 0x1AuLL, v8, &__t)] = 0;
    memset(__p, 170, sizeof(__p));
    sub_100015438(__p, __s);
    (*(void (**)(uint64_t, void **, uint64_t, tm *))(*(void *)a1 + 48))(a1, __p, v5, &__t);
    unint64_t v9 = a2[4];
    if (v9 >= a2[5])
    {
      uint64_t v10 = sub_100018CFC(a2 + 3, (uint64_t)__p);
    }
    else
    {
      sub_1000168C0(a2[4], (uint64_t)__p);
      uint64_t v10 = v9 + 16;
      a2[4] = v9 + 16;
    }
    a2[4] = v10;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1000D3AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 32) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D3AD4()
{
  return 1;
}

uint64_t sub_1000D3ADC()
{
  return 1;
}

uint64_t sub_1000D3AE4()
{
  return 0;
}

std::string *sub_1000D3AF0(uint64_t a1, std::string *a2, uint64_t a3)
{
  strcpy(__str, ".000000");
  snprintf(__str, 8uLL, ".%06lld", a3 % 1000000);
  std::string::size_type v4 = std::string::find(a2, 90, 0);
  return std::string::replace(a2, v4, 1uLL, __str);
}

std::string *sub_1000D3BB8(uint64_t a1, std::string *a2, uint64_t a3)
{
  strcpy(__str, ".000000");
  snprintf(__str, 8uLL, ".%06lld", a3 % 1000000);
  return std::string::append(a2, __str);
}

const char *sub_1000D3C68()
{
  return "%Y-%m-%dT%H:%M:%SZ%z";
}

const char *sub_1000D3C74()
{
  return "%Y-%m-%dT%H:%M:%S%z";
}

const char *sub_1000D3C80()
{
  return "%Y-%m-%dT%H:%M%z";
}

const char *sub_1000D3C8C()
{
  return "%Y-%m-%d";
}

const char *sub_1000D3C98()
{
  return "%Y-%m-%dT%H:%M:%S";
}

const char *sub_1000D3CA4()
{
  return "%Y-%m-%dT%H:%M:%S";
}

const char *sub_1000D3CB0()
{
  return "%Y-%m-%dT%H:%M";
}

const char *sub_1000D3CBC()
{
  return "%Y-%m-%d";
}

void sub_1000D3CC8(uint64_t a1, uint64_t *a2)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v6);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v3;
  long long v11 = v3;
  *(_OWORD *)md = v3;
  long long v9 = v3;
  *(_OWORD *)&c.wunsigned char buf[12] = v3;
  *(_OWORD *)&c.wbuf[14] = v3;
  *(_OWORD *)&c.wuint8_t buf[8] = v3;
  *(_OWORD *)&c.wbuf[10] = v3;
  *(_OWORD *)&c.wuint8_t buf[4] = v3;
  *(_OWORD *)&c.wbuf[6] = v3;
  *(_OWORD *)c.wlong long buf = v3;
  *(_OWORD *)&c.wbuf[2] = v3;
  *(_OWORD *)&c.hash[4] = v3;
  *(_OWORD *)&c.hash[6] = v3;
  *(_OWORD *)c.hash = v3;
  *(_OWORD *)&c.hash[2] = v3;
  *(_OWORD *)c.size_t count = v3;
  CC_SHA512_Init(&c);
  sub_1000D47D0(&c, (unsigned __int8 *)&v6);
  CC_SHA512_Final(md, &c);
  sub_1000C2724(md, 64, (std::string *)&c);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_1000D4C60(a2 + 3, (uint64_t)&c);
  }
  else
  {
    sub_10001C898(a2[4], (uint64_t)&c);
    uint64_t v5 = v4 + 16;
    a2[4] = v4 + 16;
  }
  a2[4] = v5;
  if (SHIBYTE(c.hash[0]) < 0) {
    operator delete((void *)c.count[0]);
  }
  sub_100016EAC((uint64_t)&v6);
  sub_100016B28(&v7, v6);
}

void sub_1000D3DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100028D64((uint64_t **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3E30()
{
  return 1;
}

void sub_1000D3E38(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  char v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v9[2] = v3;
  void v9[3] = v3;
  v9[0] = v3;
  v9[1] = v3;
  sub_1000D3F68((unsigned __int8 *)&v7, (uint64_t)v9);
  sub_1000C2724((unsigned __int8 *)v9, 64, &__p);
  unint64_t v4 = a2[4];
  if (v4 >= a2[5])
  {
    uint64_t v5 = sub_1000D4C60(a2 + 3, (uint64_t)&__p);
  }
  else
  {
    sub_10001C898(a2[4], (uint64_t)&__p);
    uint64_t v5 = v4 + 16;
    a2[4] = v4 + 16;
  }
  a2[4] = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_1000D3F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3F68@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)&c.wunsigned char buf[12] = v4;
  *(_OWORD *)&c.wbuf[14] = v4;
  *(_OWORD *)&c.wuint8_t buf[8] = v4;
  *(_OWORD *)&c.wbuf[10] = v4;
  *(_OWORD *)&c.wuint8_t buf[4] = v4;
  *(_OWORD *)&c.wbuf[6] = v4;
  *(_OWORD *)&c.wbuf[2] = v4;
  *(_OWORD *)&c.hash[6] = v4;
  *(_OWORD *)c.wlong long buf = v4;
  *(_OWORD *)&c.hash[2] = v4;
  *(_OWORD *)&c.hash[4] = v4;
  *(_OWORD *)c.size_t count = v4;
  *(_OWORD *)c.hash = v4;
  CC_SHA512_Init(&c);
  sub_1000B3E80((uint64_t)__p);
  sub_10001C898((uint64_t)v8, (uint64_t)__p);
  sub_1000D47D0(&c, v8);
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_1000D47D0(&c, a1);
  return CC_SHA512_Final((unsigned __int8 *)a2, &c);
}

void sub_1000D405C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4090()
{
  return 1;
}

void sub_1000D4098(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[2] = v3;
  uint64_t v11[3] = v3;
  v11[0] = v3;
  v11[1] = v3;
  sub_1000D3F68((unsigned __int8 *)&v9, (uint64_t)v11);
  LODWORD(v4) = v11[0];
  double v5 = (double)v4 / 4294967300.0 * 100.0;
  double v8 = v5;
  unint64_t v6 = a2[4];
  if (v6 >= a2[5])
  {
    uint64_t v7 = sub_1000D4EA0(a2 + 3, (uint64_t *)&v8);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 7;
    *(double *)(v6 + 8) = v5;
    sub_100016EAC(v6);
    sub_100016EAC(v6);
    uint64_t v7 = v6 + 16;
  }
  a2[4] = v7;
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000D4190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D41B0()
{
  return 1;
}

void sub_1000D41BC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D41F8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4234(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4270(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D42AC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D42E8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4324(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4360(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D439C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D43D8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4414(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4450(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D448C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D44C8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4504(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4540(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D457C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D45B8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D45F4(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4630(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D466C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D46A8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D46E4(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4720(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D475C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D4798(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D47D0(CC_SHA512_CTX *a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  switch(*a2)
  {
    case 1u:
      LOBYTE(data) = 6;
      CC_SHA512_Update(a1, &data, 1u);
      uint64_t v5 = *a2;
      if (*a2)
      {
        if (v5 == 1)
        {
          uint64_t v5 = *(void *)(*((void *)a2 + 1) + 16);
        }
        else if (v5 == 2)
        {
          uint64_t v5 = (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 4;
        }
        else
        {
          uint64_t v5 = 1;
        }
      }
      *(void *)&long long data = v5;
      CC_SHA512_Update(a1, &data, 8u);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long data = v8;
      long long v21 = v8;
      sub_1000136C8(&data, (uint64_t)a2);
      sub_100014064((unsigned __int8 **)&data);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v17 = v9;
      long long v18 = v9;
      sub_1000136C8(&v17, (uint64_t)a2);
      sub_100013648((unsigned __int8 **)&v17);
      for (BOOL i = sub_100013964((unsigned __int8 **)&data, (unsigned __int8 **)&v17);
            !i;
            BOOL i = sub_100013964((unsigned __int8 **)&data, (unsigned __int8 **)&v17))
      {
        long long v11 = (const void **)sub_10006FFA4(&data);
        sub_1000D4BD4(a1, v11);
        long long v12 = sub_100013AAC((unsigned __int8 **)&data);
        sub_1000D47D0(a1, v12);
        sub_100013C64((unsigned __int8 **)&data);
      }
      break;
    case 2u:
      LOBYTE(data) = 5;
      CC_SHA512_Update(a1, &data, 1u);
      uint64_t v6 = *a2;
      if (*a2)
      {
        if (v6 == 1)
        {
          uint64_t v6 = *(void *)(*((void *)a2 + 1) + 16);
        }
        else if (v6 == 2)
        {
          uint64_t v6 = (uint64_t)(*(void *)(*((void *)a2 + 1) + 8) - **((void **)a2 + 1)) >> 4;
        }
        else
        {
          uint64_t v6 = 1;
        }
      }
      *(void *)&long long data = v6;
      CC_SHA512_Update(a1, &data, 8u);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long data = v13;
      long long v21 = v13;
      sub_1000136C8(&data, (uint64_t)a2);
      sub_100014064((unsigned __int8 **)&data);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v17 = v14;
      long long v18 = v14;
      sub_1000136C8(&v17, (uint64_t)a2);
      sub_100013648((unsigned __int8 **)&v17);
      for (BOOL j = sub_100013964((unsigned __int8 **)&data, (unsigned __int8 **)&v17);
            !j;
            BOOL j = sub_100013964((unsigned __int8 **)&data, (unsigned __int8 **)&v17))
      {
        uint64_t v16 = sub_100013AAC((unsigned __int8 **)&data);
        sub_1000D47D0(a1, v16);
        sub_100013C64((unsigned __int8 **)&data);
      }
      break;
    case 3u:
      LOBYTE(data) = 2;
      CC_SHA512_Update(a1, &data, 1u);
      sub_100015064((uint64_t)a2, (std::string *)&data);
      sub_1000D4BD4(a1, (const void **)&data);
      if (SBYTE7(v21) < 0) {
        operator delete((void *)data);
      }
      break;
    case 4u:
      LOBYTE(data) = -86;
      sub_100072884((char *)a2, &data);
      if ((_BYTE)data) {
        char v7 = 7;
      }
      else {
        char v7 = 8;
      }
      LOBYTE(data) = v7;
      CC_SHA512_Update(a1, &data, 1u);
      break;
    case 7u:
      LOBYTE(data) = 3;
      CC_SHA512_Update(a1, &data, 1u);
      *(void *)&long long data = -1;
      sub_100026DA0(a2, (double *)&data);
      CC_SHA512_Update(a1, &data, 8u);
      break;
    default:
      if ((v4 - 5) > 2)
      {
        LOBYTE(data) = v4 == 0;
        CC_SHA512_Update(a1, &data, 1u);
      }
      else
      {
        LOBYTE(data) = 4;
        CC_SHA512_Update(a1, &data, 1u);
        *(void *)&long long data = 0xAAAAAAAAAAAAAAAALL;
        sub_10001BEF8(a2, (unint64_t *)&data);
        CC_SHA512_Update(a1, &data, 8u);
      }
      break;
  }
}

void sub_1000D4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D4BD4(CC_SHA512_CTX *a1, const void **a2)
{
  long long v3 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = *a2;
  }
  if ((char)v3 < 0) {
    long long v3 = a2[1];
  }
  *(void *)leuint64_t n = v3;
  CC_SHA512_Update(a1, len, 8u);
  return CC_SHA512_Update(a1, v4, len[0]);
}

uint64_t sub_1000D4C60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[16 * v4];
  uint64_t v16 = &v10[16 * v9];
  sub_10001C898((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_1000D4D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000D4D7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  long long v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 5;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_1000D4E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000D4EA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  long long v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 7;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_1000D4FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D4FC4()
{
}

void sub_1000D57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000D59CC(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v17);
  if ((_BYTE)v17) {
    BOOL v3 = v17 == 6;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v17 == 7)
    {
      double v19 = NAN;
      sub_100026DA0((unsigned __int8 *)&v17, &v19);
      uint64_t v4 = &v16;
      v15[0] = 7;
      long long v16 = COERCE__INT64_(fabs(v19));
      sub_100016EAC((uint64_t)v15);
      sub_100016EAC((uint64_t)v15);
      sub_100016EAC((uint64_t)v15);
      unsigned __int8 v5 = v17;
      LOBYTE(v17) = v15[0];
      v15[0] = v5;
      uint64_t v6 = v18;
      long long v18 = v16;
      long long v16 = v6;
      sub_100016EAC((uint64_t)&v17);
      sub_100016EAC((uint64_t)v15);
      int v7 = v15[0];
    }
    else
    {
      double v19 = -3.72066208e-103;
      sub_10001C724((unsigned __int8 *)&v17, (uint64_t *)&v19);
      uint64_t v8 = *(void *)&v19;
      if (v19 < 0.0) {
        uint64_t v8 = -*(void *)&v19;
      }
      uint64_t v4 = &v14;
      v13[0] = 5;
      uint64_t v14 = (uint64_t *)v8;
      sub_100016EAC((uint64_t)v13);
      sub_100016EAC((uint64_t)v13);
      sub_100016EAC((uint64_t)v13);
      unsigned __int8 v9 = v17;
      LOBYTE(v17) = v13[0];
      v13[0] = v9;
      long long v10 = v18;
      long long v18 = v14;
      uint64_t v14 = v10;
      sub_100016EAC((uint64_t)&v17);
      sub_100016EAC((uint64_t)v13);
      int v7 = v13[0];
    }
    sub_100016B28(v4, v7);
  }
  unint64_t v11 = a2[4];
  if (v11 >= a2[5])
  {
    uint64_t v12 = sub_100013F48(a2 + 3, (uint64_t)&v17);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v17);
    uint64_t v12 = v11 + 16;
    a2[4] = v11 + 16;
  }
  a2[4] = v12;
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
}

void sub_1000D5B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D5BD0()
{
  return 1;
}

void sub_1000D5BD8(uint64_t a1, uint64_t *a2)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  char v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F2D28((uint64_t)a2, (uint64_t)&v30);
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  double v29 = -3.72066208e-103;
  sub_10001E6C8((uint64_t)a2, &v28);
  int v3 = v28;
  if (v28 != 7)
  {
    if (!(_BYTE)v28)
    {
      buf[0] = 0;
      int v33 = 0;
      sub_100016EAC((uint64_t)buf);
      sub_100016EAC((uint64_t)buf);
      unint64_t v4 = a2[4];
      if (v4 >= a2[5])
      {
        uint64_t v5 = sub_100019524(a2 + 3, (uint64_t)buf);
      }
      else
      {
        *(unsigned char *)unint64_t v4 = buf[0];
        *(void *)(v4 + 8) = v33;
        sub_100016EAC((uint64_t)buf);
        buf[0] = 0;
        int v33 = 0;
        sub_100016EAC(v4);
        uint64_t v5 = v4 + 16;
      }
      a2[4] = v5;
      sub_100016EAC((uint64_t)buf);
      sub_100016B28(&v33, buf[0]);
      goto LABEL_19;
    }
    if (v30 == 7)
    {
      uint64_t v6 = qword_10015ED98;
      if (os_log_type_enabled((os_log_t)qword_10015ED98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Evaluator::Truncate] Received a float modulus for an non-float number. The modulus will be cast to an int.", buf, 2u);
        int v3 = v28;
      }
    }
    if (v3 == 6)
    {
      *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10001BEF8((unsigned __int8 *)&v28, (unint64_t *)buf);
      unint64_t v12 = *(void *)buf;
      *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10001BEF8((unsigned __int8 *)&v30, (unint64_t *)buf);
      uint64_t v13 = sub_1000D6088(v12, *(unint64_t *)buf);
      uint64_t v8 = &v25;
      v24[0] = 6;
      char v25 = (uint64_t *)v13;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      unsigned __int8 v14 = v28;
      LOBYTE(v28) = v24[0];
      v24[0] = v14;
      uint64_t v15 = *(uint64_t **)&v29;
      double v29 = *(double *)&v25;
      char v25 = v15;
      sub_100016EAC((uint64_t)&v28);
      sub_100016EAC((uint64_t)v24);
      int v11 = v24[0];
      goto LABEL_15;
    }
    if (v3 != 7)
    {
      *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724((unsigned __int8 *)&v28, (uint64_t *)buf);
      int64_t v16 = *(void *)buf;
      *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724((unsigned __int8 *)&v30, (uint64_t *)buf);
      uint64_t v17 = sub_1000D6124(v16, *(unint64_t *)buf);
      uint64_t v8 = &v23;
      v22[0] = 5;
      char v23 = (uint64_t *)v17;
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      unsigned __int8 v18 = v28;
      LOBYTE(v28) = v22[0];
      v22[0] = v18;
      double v19 = *(uint64_t **)&v29;
      double v29 = *(double *)&v23;
      char v23 = v19;
      sub_100016EAC((uint64_t)&v28);
      sub_100016EAC((uint64_t)v22);
      int v11 = v22[0];
      goto LABEL_15;
    }
  }
  *(void *)long long buf = -1;
  sub_100026DA0((unsigned __int8 *)&v28, (double *)buf);
  unint64_t v7 = *(void *)buf;
  *(void *)long long buf = -1;
  sub_100026DA0((unsigned __int8 *)&v30, (double *)buf);
  uint64_t v8 = (uint64_t **)&v27;
  v26[0] = 7;
  double v27 = sub_1000D5FEC(*(double *)&v7, *(double *)buf);
  sub_100016EAC((uint64_t)v26);
  sub_100016EAC((uint64_t)v26);
  sub_100016EAC((uint64_t)v26);
  unsigned __int8 v9 = v28;
  LOBYTE(v28) = v26[0];
  v26[0] = v9;
  *(double *)&long long v10 = v29;
  double v29 = v27;
  double v27 = *(double *)&v10;
  sub_100016EAC((uint64_t)&v28);
  sub_100016EAC((uint64_t)v26);
  int v11 = v26[0];
LABEL_15:
  sub_100016B28(v8, v11);
  unint64_t v20 = a2[4];
  if (v20 >= a2[5])
  {
    uint64_t v21 = sub_100013F48(a2 + 3, (uint64_t)&v28);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v28);
    uint64_t v21 = v20 + 16;
    a2[4] = v20 + 16;
  }
  a2[4] = v21;
LABEL_19:
  sub_100016EAC((uint64_t)&v28);
  sub_100016B28((uint64_t **)&v29, v28);
  sub_100016EAC((uint64_t)&v30);
  sub_100016B28(&v31, v30);
}

void sub_1000D5F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  int v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va2);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  _Unwind_Resume(a1);
}

double sub_1000D5FEC(double a1, double a2)
{
  if (a2 < 2.22044605e-16)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "Truncation with negative modulus is not legal");
  }
  return fmin(fmax(ceil(a1 / a2) * a2, -1.79769313e308), 1.79769313e308);
}

void sub_1000D6074(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6088(unint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "Truncation with negative modulus is not legal");
  }
  uint64_t result = -1;
  if (!__CFADD__(~(0xFFFFFFFFFFFFFFFFLL / a2 * a2), a1))
  {
    uint64_t result = a1;
    if (a1 % a2) {
      return a2 + a2 * (a1 / a2);
    }
  }
  return result;
}

void sub_1000D6110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6124(int64_t a1, unint64_t a2)
{
  if ((uint64_t)a2 <= 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "Truncation with negative modulus is not legal");
  }
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(0x7FFFFFFFFFFFFFFFLL / a2 * a2) < a1) {
    return v2;
  }
  if (a1 < 0) {
    return -a1 % a2 + a1;
  }

  return sub_1000D6088(a1, a2);
}

void sub_1000D61C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D61DC()
{
  return 1;
}

void sub_1000D61E4(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = sub_1000F2ADC(a1, (uint64_t)a2);
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  double v39 = -3.72066208e-103;
  sub_10001E6C8((uint64_t)a2, &v38);
  if ((uint64_t)v3 <= 0)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Sigdig with negative amount is not legal");
  }
  if ((_BYTE)v38)
  {
    if (v38 == 6)
    {
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001BEF8((unsigned __int8 *)&v38, (unint64_t *)&v40);
      unint64_t v6 = (floor(log10((double)(unint64_t)v40)) + 1.0);
      BOOL v7 = v6 > v3;
      unint64_t v8 = v6 - v3;
      if (!v7) {
        goto LABEL_29;
      }
      unint64_t v9 = (unint64_t)__exp10((double)v8);
      if (!v9) {
        goto LABEL_29;
      }
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001BEF8((unsigned __int8 *)&v38, (unint64_t *)&v40);
      uint64_t v10 = sub_1000D6088(v40, v9);
      int v11 = &v35;
      v34[0] = 6;
      std::string::size_type v35 = (uint64_t *)v10;
      sub_100016EAC((uint64_t)v34);
      sub_100016EAC((uint64_t)v34);
      sub_100016EAC((uint64_t)v34);
      unsigned __int8 v12 = v38;
      LOBYTE(v38) = v34[0];
      v34[0] = v12;
      uint64_t v13 = *(uint64_t **)&v39;
      double v39 = *(double *)&v35;
      std::string::size_type v35 = v13;
      sub_100016EAC((uint64_t)&v38);
      sub_100016EAC((uint64_t)v34);
      int v14 = v34[0];
      goto LABEL_28;
    }
    if (v38 != 7)
    {
      if (sub_1000D667C((unsigned __int8 *)&v38, 0)) {
        goto LABEL_29;
      }
      if (sub_1000D6720((unsigned __int8 *)&v38, (uint64_t *)0x8000000000000000))
      {
        uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        sub_10001C724((unsigned __int8 *)&v38, &v40);
        uint64_t v15 = v40;
        if (v40 < 0) {
          uint64_t v15 = -v40;
        }
        unint64_t v16 = (floor(log10((double)(unint64_t)v15)) + 1.0);
        BOOL v7 = v16 > v3;
        unint64_t v17 = v16 - v3;
        if (!v7) {
          goto LABEL_29;
        }
        int64_t v18 = (unint64_t)__exp10((double)v17);
      }
      else
      {
        uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        sub_10001C724((unsigned __int8 *)&v38, &v40);
        uint64_t v23 = v40;
        if (v40 < 0) {
          uint64_t v23 = -v40;
        }
        unint64_t v24 = (floor(log10((double)v23)) + 1.0);
        BOOL v7 = v24 > v3;
        uint64_t v25 = v24 - v3;
        if (!v7) {
          goto LABEL_29;
        }
        int64_t v18 = (uint64_t)__exp10((double)v25);
      }
      if (v18 < 1) {
        goto LABEL_29;
      }
      uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724((unsigned __int8 *)&v38, &v40);
      uint64_t v26 = sub_1000D6124(v40, v18);
      int v11 = &v33;
      v32[0] = 5;
      int v33 = (uint64_t *)v26;
      sub_100016EAC((uint64_t)v32);
      sub_100016EAC((uint64_t)v32);
      sub_100016EAC((uint64_t)v32);
      unsigned __int8 v27 = v38;
      LOBYTE(v38) = v32[0];
      v32[0] = v27;
      unint64_t v28 = *(uint64_t **)&v39;
      double v39 = *(double *)&v33;
      int v33 = v28;
      sub_100016EAC((uint64_t)&v38);
      sub_100016EAC((uint64_t)v32);
      int v14 = v32[0];
      goto LABEL_28;
    }
    uint64_t v40 = -1;
    sub_100026DA0((unsigned __int8 *)&v38, (double *)&v40);
    double v4 = fabs(*(double *)&v40);
    if (v4 >= 2.22044605e-16) {
      int v5 = (int)(floor(log10(v4)) + 1.0);
    }
    else {
      int v5 = 0;
    }
    double v19 = __exp10((double)(v5 - (int)v3));
    if (v19 > 0.0)
    {
      double v20 = v19;
      uint64_t v40 = -1;
      sub_100026DA0((unsigned __int8 *)&v38, (double *)&v40);
      int v11 = (uint64_t **)&v37;
      v36[0] = 7;
      double v37 = sub_1000D5FEC(*(double *)&v40, v20);
      sub_100016EAC((uint64_t)v36);
      sub_100016EAC((uint64_t)v36);
      sub_100016EAC((uint64_t)v36);
      unsigned __int8 v21 = v38;
      LOBYTE(v38) = v36[0];
      v36[0] = v21;
      *(double *)&unint64_t v22 = v39;
      double v39 = v37;
      double v37 = *(double *)&v22;
      sub_100016EAC((uint64_t)&v38);
      sub_100016EAC((uint64_t)v36);
      int v14 = v36[0];
LABEL_28:
      sub_100016B28(v11, v14);
    }
  }
LABEL_29:
  unint64_t v29 = a2[4];
  if (v29 >= a2[5])
  {
    uint64_t v30 = sub_100013F48(a2 + 3, (uint64_t)&v38);
  }
  else
  {
    sub_100016A10(a2[4], (uint64_t)&v38);
    uint64_t v30 = v29 + 16;
    a2[4] = v29 + 16;
  }
  a2[4] = v30;
  sub_100016EAC((uint64_t)&v38);
  sub_100016B28((uint64_t **)&v39, v38);
}

void sub_1000D6628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D667C(unsigned __int8 *a1, int a2)
{
  v5[0] = 5;
  unint64_t v6 = (uint64_t *)a2;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  uint64_t v3 = sub_10001F600(a1, v5);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
  return v3;
}

uint64_t sub_1000D6720(unsigned __int8 *a1, uint64_t *a2)
{
  v5[0] = 5;
  unint64_t v6 = a2;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  uint64_t v3 = sub_10001F600(a1, v5);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
  return v3;
}

uint64_t sub_1000D67C0()
{
  return 1;
}

uint64_t sub_1000D67C8()
{
  return 1;
}

void sub_1000D67D0(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8((uint64_t)a2, &v15);
  if (!(_BYTE)v17)
  {
    LOBYTE(v22) = 0;
    *(void *)&long long v23 = 0;
    sub_100016EAC((uint64_t)&v22);
    sub_100016EAC((uint64_t)&v22);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)&v22);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v3;
  v13[1] = v3;
  uint64_t v10 = (unsigned __int8 *)&v15;
  long long v11 = 0uLL;
  *(void *)&long long v12 = 0;
  *((void *)&v12 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v10);
  BOOL v7 = (unsigned __int8 *)&v15;
  long long v8 = 0uLL;
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = 0x8000000000000000;
  sub_1000157EC(&v7);
  long long v23 = v11;
  long long v24 = v12;
  long long v20 = v8;
  long long v21 = v9;
  unint64_t v22 = v10;
  double v19 = v7;
  sub_1000D81A4((uint64_t)&v22, (uint64_t *)&v19, (double *)&v17, (uint64_t)v13);
  unint64_t v22 = (unsigned __int8 *)&v15;
  long long v23 = 0uLL;
  *(void *)&long long v24 = 0;
  *((void *)&v24 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v22);
  uint64_t v4 = sub_100020720((unsigned __int8 **)v13, (uint64_t)&v22);
  LOBYTE(v22) = 6;
  *(void *)&long long v23 = v4;
  sub_100016EAC((uint64_t)&v22);
  sub_100016EAC((uint64_t)&v22);
  unint64_t v5 = a2[4];
  if (v5 < a2[5])
  {
LABEL_5:
    *(unsigned char *)unint64_t v5 = (_BYTE)v22;
    *(void *)(v5 + 8) = v23;
    sub_100016EAC((uint64_t)&v22);
    LOBYTE(v22) = 0;
    *(void *)&long long v23 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
    goto LABEL_7;
  }
  uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)&v22);
LABEL_7:
  a2[4] = v6;
  sub_100016EAC((uint64_t)&v22);
  sub_100016B28((uint64_t **)&v23, v22);
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
}

void sub_1000D69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t *a26)
{
  sub_100028D64((uint64_t **)(v26 - 104));
  sub_100028D64(&a24);
  sub_100028D64(&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6A3C()
{
  return 1;
}

void sub_1000D6A44(uint64_t a1, uint64_t *a2)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v28);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v26);
  unint64_t v24 = 0xAAAAAAAAAAAAAA00;
  double v25 = 0.0;
  sub_100016EAC((uint64_t)&v24);
  sub_100016EAC((uint64_t)&v24);
  if ((_BYTE)v26)
  {
    if ((_BYTE)v28)
    {
      if (v26 == 7 || v28 == 7)
      {
        double v30 = NAN;
        sub_100026DA0((unsigned __int8 *)&v26, &v30);
        double v12 = v30;
        double v30 = NAN;
        sub_100026DA0((unsigned __int8 *)&v28, &v30);
        v18[0] = 7;
        double v19 = v12 + v30;
      }
      else
      {
        if (v26 == 6 && v28 == 6)
        {
          double v30 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v26, (unint64_t *)&v30);
          double v3 = v30;
          double v30 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v28, (unint64_t *)&v30);
          *(void *)&double v4 = *(void *)&v30 + *(void *)&v3;
          char v5 = 6;
        }
        else
        {
          double v30 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v26, (uint64_t *)&v30);
          double v13 = v30;
          double v30 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v28, (uint64_t *)&v30);
          *(void *)&double v4 = *(void *)&v30 + *(void *)&v13;
          char v5 = 5;
        }
        v18[0] = v5;
        double v19 = v4;
      }
      sub_100016EAC((uint64_t)v18);
      sub_100016EAC((uint64_t)v18);
      sub_100016EAC((uint64_t)v18);
      unsigned __int8 v14 = v24;
      LOBYTE(v24) = v18[0];
      v18[0] = v14;
      BOOL v7 = (uint64_t **)&v19;
      *(double *)&unint64_t v15 = v25;
      double v25 = v19;
      double v19 = *(double *)&v15;
      sub_100016EAC((uint64_t)&v24);
      sub_100016EAC((uint64_t)v18);
      int v9 = v18[0];
    }
    else
    {
      sub_100016A10((uint64_t)v20, (uint64_t)&v26);
      sub_100016EAC((uint64_t)v20);
      char v10 = v24;
      LOBYTE(v24) = v20[0];
      v20[0] = v10;
      BOOL v7 = &v21;
      long long v11 = *(uint64_t **)&v25;
      double v25 = *(double *)&v21;
      long long v21 = v11;
      sub_100016EAC((uint64_t)&v24);
      sub_100016EAC((uint64_t)v20);
      int v9 = v20[0];
    }
  }
  else
  {
    sub_100016A10((uint64_t)v22, (uint64_t)&v28);
    sub_100016EAC((uint64_t)v22);
    char v6 = v24;
    LOBYTE(v24) = v22[0];
    v22[0] = v6;
    BOOL v7 = &v23;
    long long v8 = *(uint64_t **)&v25;
    double v25 = *(double *)&v23;
    long long v23 = v8;
    sub_100016EAC((uint64_t)&v24);
    sub_100016EAC((uint64_t)v22);
    int v9 = v22[0];
  }
  sub_100016B28(v7, v9);
  unint64_t v16 = a2[4];
  if (v16 >= a2[5])
  {
    uint64_t v17 = sub_100019524(a2 + 3, (uint64_t)&v24);
  }
  else
  {
    *(unsigned char *)unint64_t v16 = v24;
    *(double *)(v16 + 8) = v25;
    sub_100016EAC((uint64_t)&v24);
    LOBYTE(v24) = 0;
    double v25 = 0.0;
    sub_100016EAC(v16);
    uint64_t v17 = v16 + 16;
  }
  a2[4] = v17;
  sub_100016EAC((uint64_t)&v24);
  sub_100016B28((uint64_t **)&v25, v24);
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
  sub_100016EAC((uint64_t)&v28);
  sub_100016B28(&v29, v28);
}

void sub_1000D6D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  long long v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6DA4()
{
  return 1;
}

void sub_1000D6DAC(uint64_t a1, uint64_t *a2)
{
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  int v33 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v32);
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  char v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v30);
  unint64_t v28 = 0xAAAAAAAAAAAAAA00;
  double v29 = 0.0;
  sub_100016EAC((uint64_t)&v28);
  sub_100016EAC((uint64_t)&v28);
  if ((_BYTE)v32)
  {
    if ((_BYTE)v30)
    {
      if (v32 == 7 || v30 == 7)
      {
        double v22 = NAN;
        sub_100026DA0((unsigned __int8 *)&v30, &v22);
        double v10 = v22;
        double v22 = NAN;
        sub_100026DA0((unsigned __int8 *)&v32, &v22);
        v20[0] = 7;
        double v21 = v10 - v22;
      }
      else
      {
        if (v32 == 6 && v30 == 6)
        {
          double v22 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v30, (unint64_t *)&v22);
          double v3 = v22;
          double v22 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v32, (unint64_t *)&v22);
          *(void *)&double v4 = *(void *)&v3 - *(void *)&v22;
          char v5 = 6;
        }
        else
        {
          double v22 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v30, (uint64_t *)&v22);
          double v11 = v22;
          double v22 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v32, (uint64_t *)&v22);
          *(void *)&double v4 = *(void *)&v11 - *(void *)&v22;
          char v5 = 5;
        }
        v20[0] = v5;
        double v21 = v4;
      }
      sub_100016EAC((uint64_t)v20);
      sub_100016EAC((uint64_t)v20);
      sub_100016EAC((uint64_t)v20);
      unsigned __int8 v12 = v28;
      LOBYTE(v28) = v20[0];
      v20[0] = v12;
      BOOL v7 = (uint64_t **)&v21;
      *(double *)&uint64_t v13 = v29;
      double v29 = v21;
      double v21 = *(double *)&v13;
      sub_100016EAC((uint64_t)&v28);
      sub_100016EAC((uint64_t)v20);
      int v9 = v20[0];
    }
    else
    {
      LOBYTE(v22) = 5;
      uint64_t v23 = 0;
      sub_100016EAC((uint64_t)&v22);
      sub_100016EAC((uint64_t)&v22);
      if (LOBYTE(v22) == 7 || v32 == 7)
      {
        double v34 = NAN;
        sub_100026DA0((unsigned __int8 *)&v22, &v34);
        double v34 = NAN;
        sub_100026DA0((unsigned __int8 *)&v32, &v34);
        v24[0] = 7;
        double v25 = -v34;
      }
      else
      {
        if (LOBYTE(v22) == 6 && v32 == 6)
        {
          double v34 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v22, (unint64_t *)&v34);
          double v34 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v32, (unint64_t *)&v34);
          *(void *)&double v14 = -*(void *)&v34;
          char v15 = 6;
        }
        else
        {
          double v34 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v22, (uint64_t *)&v34);
          double v34 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v32, (uint64_t *)&v34);
          *(void *)&double v14 = -*(void *)&v34;
          char v15 = 5;
        }
        v24[0] = v15;
        double v25 = v14;
      }
      BOOL v7 = (uint64_t **)&v23;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      unsigned __int8 v16 = v28;
      LOBYTE(v28) = v24[0];
      v24[0] = v16;
      *(double *)&uint64_t v17 = v29;
      double v29 = v25;
      double v25 = *(double *)&v17;
      sub_100016EAC((uint64_t)&v28);
      sub_100016EAC((uint64_t)v24);
      sub_100016B28((uint64_t **)&v25, v24[0]);
      sub_100016EAC((uint64_t)&v22);
      int v9 = LOBYTE(v22);
    }
  }
  else
  {
    sub_100016A10((uint64_t)v26, (uint64_t)&v30);
    sub_100016EAC((uint64_t)v26);
    char v6 = v28;
    LOBYTE(v28) = v26[0];
    v26[0] = v6;
    BOOL v7 = &v27;
    long long v8 = *(uint64_t **)&v29;
    double v29 = *(double *)&v27;
    unsigned __int8 v27 = v8;
    sub_100016EAC((uint64_t)&v28);
    sub_100016EAC((uint64_t)v26);
    int v9 = v26[0];
  }
  sub_100016B28(v7, v9);
  unint64_t v18 = a2[4];
  if (v18 >= a2[5])
  {
    uint64_t v19 = sub_100019524(a2 + 3, (uint64_t)&v28);
  }
  else
  {
    *(unsigned char *)unint64_t v18 = v28;
    *(double *)(v18 + 8) = v29;
    sub_100016EAC((uint64_t)&v28);
    LOBYTE(v28) = 0;
    double v29 = 0.0;
    sub_100016EAC(v18);
    uint64_t v19 = v18 + 16;
  }
  a2[4] = v19;
  sub_100016EAC((uint64_t)&v28);
  sub_100016B28((uint64_t **)&v29, v28);
  sub_100016EAC((uint64_t)&v30);
  sub_100016B28(&v31, v30);
  sub_100016EAC((uint64_t)&v32);
  sub_100016B28(&v33, v32);
}

void sub_1000D71D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  char v5 = va_arg(va1, uint64_t *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned __int8 v12 = va_arg(va2, uint64_t *);
  uint64_t v14 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  sub_100028D64((uint64_t **)(v3 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7220()
{
  return 1;
}

void sub_1000D7228(uint64_t a1, uint64_t *a2)
{
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v18);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v16);
  unint64_t v14 = 0xAAAAAAAAAAAAAA00;
  double v15 = 0.0;
  sub_100016EAC((uint64_t)&v14);
  sub_100016EAC((uint64_t)&v14);
  if ((_BYTE)v16 && (_BYTE)v18)
  {
    if (v16 == 7 || v18 == 7)
    {
      double v20 = NAN;
      sub_100026DA0((unsigned __int8 *)&v16, &v20);
      double v6 = v20;
      double v20 = NAN;
      sub_100026DA0((unsigned __int8 *)&v18, &v20);
      v12[0] = 7;
      double v13 = v6 * v20;
    }
    else
    {
      if (v16 == 6 && v18 == 6)
      {
        double v20 = -3.72066208e-103;
        sub_10001BEF8((unsigned __int8 *)&v16, (unint64_t *)&v20);
        double v3 = v20;
        double v20 = -3.72066208e-103;
        sub_10001BEF8((unsigned __int8 *)&v18, (unint64_t *)&v20);
        uint64_t v4 = *(void *)&v20 * *(void *)&v3;
        char v5 = 6;
      }
      else
      {
        double v20 = -3.72066208e-103;
        sub_10001C724((unsigned __int8 *)&v16, (uint64_t *)&v20);
        double v7 = v20;
        double v20 = -3.72066208e-103;
        sub_10001C724((unsigned __int8 *)&v18, (uint64_t *)&v20);
        uint64_t v4 = *(void *)&v20 * *(void *)&v7;
        char v5 = 5;
      }
      v12[0] = v5;
      double v13 = *(double *)&v4;
    }
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    unsigned __int8 v8 = v14;
    LOBYTE(v14) = v12[0];
    v12[0] = v8;
    *(double *)&uint64_t v9 = v15;
    double v15 = v13;
    double v13 = *(double *)&v9;
    sub_100016EAC((uint64_t)&v14);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28((uint64_t **)&v13, v12[0]);
  }
  unint64_t v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t v11 = sub_100019524(a2 + 3, (uint64_t)&v14);
  }
  else
  {
    *(unsigned char *)unint64_t v10 = v14;
    *(double *)(v10 + 8) = v15;
    sub_100016EAC((uint64_t)&v14);
    LOBYTE(v14) = 0;
    double v15 = 0.0;
    sub_100016EAC(v10);
    uint64_t v11 = v10 + 16;
  }
  a2[4] = v11;
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28((uint64_t **)&v15, v14);
  sub_100016EAC((uint64_t)&v16);
  sub_100016B28(&v17, v16);
  sub_100016EAC((uint64_t)&v18);
  sub_100016B28(&v19, v18);
}

void sub_1000D74A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  double v7 = va_arg(va2, uint64_t *);
  uint64_t v9 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D74E0()
{
  return 1;
}

void sub_1000D74E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  double v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v19);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAA00;
  double v16 = 0.0;
  sub_100016EAC((uint64_t)&v15);
  sub_100016EAC((uint64_t)&v15);
  if ((_BYTE)v17 && (_BYTE)v19)
  {
    if (sub_1000D667C((unsigned __int8 *)&v19, 0))
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Divide by zero");
    }
    if (v17 == 7 || v19 == 7)
    {
      double v21 = NAN;
      sub_100026DA0((unsigned __int8 *)&v17, &v21);
      double v3 = v21;
      double v21 = NAN;
      sub_100026DA0((unsigned __int8 *)&v19, &v21);
      v13[0] = 7;
      double v14 = v3 / v21;
    }
    else
    {
      if (v17 == 6 && v19 == 6)
      {
        double v21 = -3.72066208e-103;
        sub_10001BEF8((unsigned __int8 *)&v17, (unint64_t *)&v21);
        double v4 = v21;
        double v21 = -3.72066208e-103;
        sub_10001BEF8((unsigned __int8 *)&v19, (unint64_t *)&v21);
        unint64_t v5 = *(void *)&v4 / *(void *)&v21;
        char v6 = 6;
      }
      else
      {
        double v21 = -3.72066208e-103;
        sub_10001C724((unsigned __int8 *)&v17, (uint64_t *)&v21);
        double v7 = v21;
        double v21 = -3.72066208e-103;
        sub_10001C724((unsigned __int8 *)&v19, (uint64_t *)&v21);
        unint64_t v5 = *(void *)&v7 / *(uint64_t *)&v21;
        char v6 = 5;
      }
      v13[0] = v6;
      double v14 = *(double *)&v5;
    }
    sub_100016EAC((uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    unsigned __int8 v8 = v15;
    LOBYTE(v15) = v13[0];
    v13[0] = v8;
    *(double *)&uint64_t v9 = v16;
    double v16 = v14;
    double v14 = *(double *)&v9;
    sub_100016EAC((uint64_t)&v15);
    sub_100016EAC((uint64_t)v13);
    sub_100016B28((uint64_t **)&v14, v13[0]);
  }
  unint64_t v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t v11 = sub_100019524(a2 + 3, (uint64_t)&v15);
  }
  else
  {
    *(unsigned char *)unint64_t v10 = v15;
    *(double *)(v10 + 8) = v16;
    sub_100016EAC((uint64_t)&v15);
    LOBYTE(v15) = 0;
    double v16 = 0.0;
    sub_100016EAC(v10);
    uint64_t v11 = v10 + 16;
  }
  a2[4] = v11;
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28((uint64_t **)&v16, v15);
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
  sub_100016EAC((uint64_t)&v19);
  sub_100016B28(&v20, v19);
}

void sub_1000D77D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t *a15)
{
  __cxa_free_exception(v15);
  sub_100028D64(&a11);
  sub_100028D64(&a13);
  sub_100028D64(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7820()
{
  return 1;
}

void sub_1000D7828(uint64_t a1, uint64_t *a2)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v29);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v27);
  unint64_t v25 = 0xAAAAAAAAAAAAAA00;
  unint64_t v26 = 0;
  sub_100016EAC((uint64_t)&v25);
  sub_100016EAC((uint64_t)&v25);
  if ((_BYTE)v27)
  {
    if ((_BYTE)v29)
    {
      if (v27 == 7 || v29 == 7)
      {
        double v31 = NAN;
        sub_100026DA0((unsigned __int8 *)&v27, &v31);
        double v12 = v31;
        double v31 = NAN;
        sub_100026DA0((unsigned __int8 *)&v29, &v31);
        double v13 = v31;
        if (v31 >= v12) {
          double v13 = v12;
        }
        v19[0] = 7;
        double v20 = *(uint64_t **)&v13;
      }
      else
      {
        if (v27 == 6 && v29 == 6)
        {
          double v31 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v27, (unint64_t *)&v31);
          unint64_t v3 = *(void *)&v31;
          double v31 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v29, (unint64_t *)&v31);
          double v4 = v31;
          if (*(void *)&v31 >= v3) {
            double v4 = *(double *)&v3;
          }
          char v5 = 6;
        }
        else
        {
          double v31 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v27, (uint64_t *)&v31);
          double v14 = v31;
          double v31 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v29, (uint64_t *)&v31);
          double v4 = v31;
          if (*(uint64_t *)&v31 >= *(uint64_t *)&v14) {
            double v4 = v14;
          }
          char v5 = 5;
        }
        v19[0] = v5;
        double v20 = *(uint64_t **)&v4;
      }
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v15 = v25;
      LOBYTE(v25) = v19[0];
      v19[0] = v15;
      double v7 = &v20;
      double v16 = v26;
      unint64_t v26 = v20;
      double v20 = v16;
      sub_100016EAC((uint64_t)&v25);
      sub_100016EAC((uint64_t)v19);
      int v9 = v19[0];
    }
    else
    {
      sub_100016A10((uint64_t)v21, (uint64_t)&v27);
      sub_100016EAC((uint64_t)v21);
      char v10 = v25;
      LOBYTE(v25) = v21[0];
      v21[0] = v10;
      double v7 = &v22;
      uint64_t v11 = v26;
      unint64_t v26 = v22;
      double v22 = v11;
      sub_100016EAC((uint64_t)&v25);
      sub_100016EAC((uint64_t)v21);
      int v9 = v21[0];
    }
  }
  else
  {
    sub_100016A10((uint64_t)v23, (uint64_t)&v29);
    sub_100016EAC((uint64_t)v23);
    char v6 = v25;
    LOBYTE(v25) = v23[0];
    v23[0] = v6;
    double v7 = &v24;
    unsigned __int8 v8 = v26;
    unint64_t v26 = v24;
    unint64_t v24 = v8;
    sub_100016EAC((uint64_t)&v25);
    sub_100016EAC((uint64_t)v23);
    int v9 = v23[0];
  }
  sub_100016B28(v7, v9);
  unint64_t v17 = a2[4];
  if (v17 >= a2[5])
  {
    uint64_t v18 = sub_100019524(a2 + 3, (uint64_t)&v25);
  }
  else
  {
    *(unsigned char *)unint64_t v17 = v25;
    *(void *)(v17 + 8) = v26;
    sub_100016EAC((uint64_t)&v25);
    LOBYTE(v25) = 0;
    unint64_t v26 = 0;
    sub_100016EAC(v17);
    uint64_t v18 = v17 + 16;
  }
  a2[4] = v18;
  sub_100016EAC((uint64_t)&v25);
  sub_100016B28(&v26, v25);
  sub_100016EAC((uint64_t)&v27);
  sub_100016B28(&v28, v27);
  sub_100016EAC((uint64_t)&v29);
  sub_100016B28(&v30, v29);
}

void sub_1000D7B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  unsigned __int8 v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7B94()
{
  return 1;
}

void sub_1000D7B9C(uint64_t a1, uint64_t *a2)
{
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v29);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v28 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v27);
  unint64_t v25 = 0xAAAAAAAAAAAAAA00;
  unint64_t v26 = 0;
  sub_100016EAC((uint64_t)&v25);
  sub_100016EAC((uint64_t)&v25);
  if ((_BYTE)v27)
  {
    if ((_BYTE)v29)
    {
      if (v27 == 7 || v29 == 7)
      {
        double v31 = NAN;
        sub_100026DA0((unsigned __int8 *)&v27, &v31);
        double v12 = v31;
        double v31 = NAN;
        sub_100026DA0((unsigned __int8 *)&v29, &v31);
        double v13 = v31;
        if (v12 >= v31) {
          double v13 = v12;
        }
        v19[0] = 7;
        double v20 = *(uint64_t **)&v13;
      }
      else
      {
        if (v27 == 6 && v29 == 6)
        {
          double v31 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v27, (unint64_t *)&v31);
          unint64_t v3 = *(void *)&v31;
          double v31 = -3.72066208e-103;
          sub_10001BEF8((unsigned __int8 *)&v29, (unint64_t *)&v31);
          double v4 = v31;
          if (v3 > *(void *)&v31) {
            double v4 = *(double *)&v3;
          }
          char v5 = 6;
        }
        else
        {
          double v31 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v27, (uint64_t *)&v31);
          double v14 = v31;
          double v31 = -3.72066208e-103;
          sub_10001C724((unsigned __int8 *)&v29, (uint64_t *)&v31);
          double v4 = v31;
          if (*(uint64_t *)&v14 > *(uint64_t *)&v31) {
            double v4 = v14;
          }
          char v5 = 5;
        }
        v19[0] = v5;
        double v20 = *(uint64_t **)&v4;
      }
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v15 = v25;
      LOBYTE(v25) = v19[0];
      v19[0] = v15;
      double v7 = &v20;
      double v16 = v26;
      unint64_t v26 = v20;
      double v20 = v16;
      sub_100016EAC((uint64_t)&v25);
      sub_100016EAC((uint64_t)v19);
      int v9 = v19[0];
    }
    else
    {
      sub_100016A10((uint64_t)v21, (uint64_t)&v27);
      sub_100016EAC((uint64_t)v21);
      char v10 = v25;
      LOBYTE(v25) = v21[0];
      v21[0] = v10;
      double v7 = &v22;
      uint64_t v11 = v26;
      unint64_t v26 = v22;
      double v22 = v11;
      sub_100016EAC((uint64_t)&v25);
      sub_100016EAC((uint64_t)v21);
      int v9 = v21[0];
    }
  }
  else
  {
    sub_100016A10((uint64_t)v23, (uint64_t)&v29);
    sub_100016EAC((uint64_t)v23);
    char v6 = v25;
    LOBYTE(v25) = v23[0];
    v23[0] = v6;
    double v7 = &v24;
    unsigned __int8 v8 = v26;
    unint64_t v26 = v24;
    unint64_t v24 = v8;
    sub_100016EAC((uint64_t)&v25);
    sub_100016EAC((uint64_t)v23);
    int v9 = v23[0];
  }
  sub_100016B28(v7, v9);
  unint64_t v17 = a2[4];
  if (v17 >= a2[5])
  {
    uint64_t v18 = sub_100019524(a2 + 3, (uint64_t)&v25);
  }
  else
  {
    *(unsigned char *)unint64_t v17 = v25;
    *(void *)(v17 + 8) = v26;
    sub_100016EAC((uint64_t)&v25);
    LOBYTE(v25) = 0;
    unint64_t v26 = 0;
    sub_100016EAC(v17);
    uint64_t v18 = v17 + 16;
  }
  a2[4] = v18;
  sub_100016EAC((uint64_t)&v25);
  sub_100016B28(&v26, v25);
  sub_100016EAC((uint64_t)&v27);
  sub_100016B28(&v28, v27);
  sub_100016EAC((uint64_t)&v29);
  sub_100016B28(&v30, v29);
}

void sub_1000D7ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  unsigned __int8 v8 = va_arg(va1, uint64_t *);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7F08()
{
  return 1;
}

void sub_1000D7F14(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D7F50(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D7F8C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D7FC8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D8004(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D8040(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D807C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D80B8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D80F4(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D8130(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000D816C(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

__n128 sub_1000D81A4@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *(unsigned __int8 **)a1;
  double v7 = (__n128 *)(a1 + 8);
  long long v8 = *(_OWORD *)(a1 + 24);
  long long v24 = *(_OWORD *)(a1 + 8);
  long long v25 = v8;
  uint64_t v20 = *a2;
  long long v21 = *(_OWORD *)(a2 + 1);
  long long v22 = *(_OWORD *)(a2 + 3);
  uint64_t v9 = sub_100020528((uint64_t)&v23, (uint64_t)&v20);
  if (v9)
  {
    unint64_t v10 = v9;
    do
    {
      unint64_t v11 = v10 >> 1;
      *(void *)&v19[32] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)unint64_t v19 = v12;
      *(_OWORD *)&v19[16] = v12;
      unint64_t v26 = *(unsigned __int8 **)a1;
      __n128 v13 = v7[1];
      __n128 v27 = *v7;
      __n128 v28 = v13;
      sub_10001EFF8(&v26, v10 >> 1);
      *(void *)unint64_t v19 = v26;
      *(__n128 *)&unsigned __int8 v19[8] = v27;
      *(__n128 *)&v19[24] = v28;
      double v14 = sub_10001EE40((unsigned __int8 **)v19);
      if ((sub_10001F364(a3, v14) & 1) == 0)
      {
        unsigned __int8 v15 = sub_100013C64((unsigned __int8 **)v19);
        *(void *)a1 = *v15;
        __n128 v16 = *(__n128 *)(v15 + 3);
        *double v7 = *(__n128 *)(v15 + 1);
        v7[1] = v16;
        unint64_t v11 = v10 + ~v11;
      }
      unint64_t v10 = v11;
    }
    while (v11);
  }
  *(void *)a4 = *(void *)a1;
  __n128 result = *v7;
  __n128 v18 = v7[1];
  *(__n128 *)(a4 + 8) = *v7;
  *(__n128 *)(a4 + 24) = v18;
  return result;
}

void sub_1000D830C(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000E2590(a1, a2, &v4);
  if (sub_10006457C(v4))
  {
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    if (*((void *)&v4 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t *sub_1000D83A4(uint64_t *a1, long long *a2, uint64_t *a3)
{
  *a1 = (uint64_t)off_1001558C8;
  dispatch_object_t object = dispatch_queue_create("analyticsd.SqliteDeviceConfigurationStoreQueue", 0);
  sub_100063E80(a1, (uint64_t *)off_100159BA0, &object, a2, a3);
  if (object) {
    dispatch_release(object);
  }
  sub_1000F2610(a1 + 14, (uint64_t *)off_100159BB0);
  *a1 = (uint64_t)off_100159950;
  a1[14] = (uint64_t)off_100159AA0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  return a1;
}

void sub_1000D84B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000D84BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  char v5 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E26B0;
  block[3] = &unk_100159EE0;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v5, block);
  sub_1000650BC((sqlite3_stmt **)(a1 + 136), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 128), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 120), 0);
  sub_1000818C0(a1, (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t sub_1000D85A8(uint64_t a1)
{
  return sub_1000D84BC(a1, (uint64_t)&off_100159B98);
}

uint64_t sub_1000D85B4(uint64_t a1)
{
  return sub_1000D84BC(a1 - 112, (uint64_t)&off_100159B98);
}

void sub_1000D85C4(uint64_t a1)
{
  sub_1000D84BC(a1, (uint64_t)&off_100159B98);

  operator delete();
}

void sub_1000D8604(uint64_t a1)
{
  sub_1000D84BC(a1 - 112, (uint64_t)&off_100159B98);

  operator delete();
}

uint64_t sub_1000D8648(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E26F8;
  void v6[3] = &unk_100159F00;
  void v6[4] = v2;
  void v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000D8748(uint64_t a1, uint64_t a2)
{
  return sub_1000D8648(a1 - 112, a2);
}

uint64_t sub_1000D8750(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000E2888;
  void v5[3] = &unk_100159F40;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  char v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_1000D884C(uint64_t a1)
{
  return sub_1000D8750(a1 - 112);
}

uint64_t sub_1000D8854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E2A48;
  void v6[3] = &unk_100159F60;
  void v6[4] = v2;
  void v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000D8954(uint64_t a1, uint64_t a2)
{
  return sub_1000D8854(a1 - 112, a2);
}

void sub_1000D895C(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(NSObject **)(a1 + 24);
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000E2DC8;
  void v5[3] = &unk_100159F80;
  void v5[4] = a1 + 8;
  v5[5] = &v4;
  char v6 = v5;
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000047E0;
  block[3] = &unk_100159FA0;
  void block[4] = a2;
  void block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_1000D8A7C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1000D8A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  unint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E3150;
  block[3] = &unk_100159FC0;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000D8B2C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000D8B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  unint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E32D0;
  void v6[3] = &unk_100159FE0;
  void v6[4] = v2;
  void v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000D8C34(uint64_t a1, uint64_t a2)
{
  return sub_1000D8B34(a1 - 112, a2);
}

void sub_1000D8C3C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E3460;
  block[3] = &unk_10015A000;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000D8CE4(uint64_t a1)
{
}

uint64_t sub_1000D8CEC(uint64_t a1, char a2)
{
  char v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _OWORD v7[2] = sub_1000E34EC;
  void v7[3] = &unk_10015A020;
  void v7[4] = v2;
  v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_1000D8DF4(uint64_t a1, char a2)
{
  return sub_1000D8CEC(a1 - 112, a2);
}

uint64_t sub_1000D8DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E36E0;
  void v6[3] = &unk_10015A040;
  void v6[4] = v2;
  void v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000D8EFC(uint64_t a1, uint64_t a2)
{
  return sub_1000D8DFC(a1 - 112, a2);
}

uint64_t sub_1000D8F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a2;
  v5[1] = a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E3878;
  void v6[3] = &unk_10015A060;
  void v6[4] = v2;
  void v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000065D0;
  block[3] = &unk_100159F20;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_1000D9004(uint64_t a1, uint64_t a2)
{
  return sub_1000D8F04(a1 - 112, a2);
}

void sub_1000D900C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_1000E408C;
  void v6[3] = &unk_10015A110;
  void v6[4] = v3;
  void v6[5] = v5;
  uint64_t v7 = v6;
  *a3 = 0u;
  a3[1] = 0u;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E4284;
  block[3] = &unk_10015A130;
  void block[4] = a3;
  void block[5] = &v7;
  dispatch_sync(v4, block);
}

void sub_1000D9104(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void sub_1000D910C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F0F0))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EAA0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F0F0);
  }
  std::mutex::lock(&stru_10015EAA0);
  unsigned __int8 v9 = &v13;
  unsigned __int8 v10 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  __n128 v13 = 0;
  double v14 = _NSConcreteStackBlock;
  uint64_t v15 = 0x40000000;
  __n128 v16 = sub_1000E4320;
  unint64_t v17 = &unk_10015A150;
  uint64_t v18 = a1 + 8;
  unint64_t v19 = &v9;
  uint64_t v20 = &v14;
  LOBYTE(v12) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000065D0;
  long long v25 = &unk_100159F20;
  unint64_t v26 = &v12;
  __n128 v27 = (void ***)&v20;
  dispatch_sync(v3, &block);
  if ((_BYTE)v12)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Config Store] Iterating all enabled transforms", (uint8_t *)&block, 2u);
    }
    do
    {
      unsigned __int8 v9 = (sqlite3_stmt **)a1;
      unsigned __int8 v10 = &v13;
      unint64_t v11 = &v12;
      uint64_t v12 = 0;
      char v5 = *(NSObject **)(a1 + 24);
      double v14 = _NSConcreteStackBlock;
      uint64_t v15 = 0x40000000;
      __n128 v16 = sub_1000E4410;
      unint64_t v17 = &unk_10015A170;
      uint64_t v18 = a1 + 8;
      unint64_t v19 = &v9;
      uint64_t v20 = &v14;
      unsigned __int8 v21 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000;
      long long v24 = sub_1000065D0;
      long long v25 = &unk_100159F20;
      unint64_t v26 = (uint64_t *)&v21;
      __n128 v27 = (void ***)&v20;
      dispatch_sync(v5, &block);
      int v6 = v21;
      if (v21 && v12) {
        sub_100089DF0(a2, v12);
      }
    }
    while (v6);
  }
  double v14 = (void **)&v13;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000E454C;
  long long v25 = &unk_10015A190;
  unint64_t v26 = (uint64_t *)(a1 + 8);
  __n128 v27 = &v14;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v13, 0);
  std::mutex::unlock(&stru_10015EAA0);
}

void sub_1000D9458(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000D9468(uint64_t a1, uint64_t a2)
{
}

void sub_1000D9470(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F0F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F0F8))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EAE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F0F8);
  }
  std::mutex::lock(&stru_10015EAE0);
  unsigned __int8 v9 = &v13;
  unsigned __int8 v10 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  __n128 v13 = 0;
  double v14 = _NSConcreteStackBlock;
  uint64_t v15 = 0x40000000;
  __n128 v16 = sub_1000E455C;
  unint64_t v17 = &unk_10015A1B0;
  uint64_t v18 = a1 + 8;
  unint64_t v19 = &v9;
  uint64_t v20 = &v14;
  LOBYTE(v12) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000065D0;
  long long v25 = &unk_100159F20;
  unint64_t v26 = &v12;
  __n128 v27 = (void ***)&v20;
  dispatch_sync(v3, &block);
  if ((_BYTE)v12)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Config Store] Iterating all disabled transforms", (uint8_t *)&block, 2u);
    }
    do
    {
      unsigned __int8 v9 = (sqlite3_stmt **)a1;
      unsigned __int8 v10 = &v13;
      unint64_t v11 = &v12;
      uint64_t v12 = 0;
      char v5 = *(NSObject **)(a1 + 24);
      double v14 = _NSConcreteStackBlock;
      uint64_t v15 = 0x40000000;
      __n128 v16 = sub_1000E464C;
      unint64_t v17 = &unk_10015A1D0;
      uint64_t v18 = a1 + 8;
      unint64_t v19 = &v9;
      uint64_t v20 = &v14;
      unsigned __int8 v21 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000;
      long long v24 = sub_1000065D0;
      long long v25 = &unk_100159F20;
      unint64_t v26 = (uint64_t *)&v21;
      __n128 v27 = (void ***)&v20;
      dispatch_sync(v5, &block);
      int v6 = v21;
      if (v21 && v12) {
        sub_100089DF0(a2, v12);
      }
    }
    while (v6);
  }
  double v14 = (void **)&v13;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000E4788;
  long long v25 = &unk_10015A1F0;
  unint64_t v26 = (uint64_t *)(a1 + 8);
  __n128 v27 = &v14;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v13, 0);
  std::mutex::unlock(&stru_10015EAE0);
}

void sub_1000D97BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000D97CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000D97D4(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F108))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EB60, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F108);
  }
  std::mutex::lock(&stru_10015EB60);
  unsigned __int8 v9 = &v13;
  unsigned __int8 v10 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  __n128 v13 = 0;
  double v14 = _NSConcreteStackBlock;
  uint64_t v15 = 0x40000000;
  __n128 v16 = sub_1000E4798;
  unint64_t v17 = &unk_10015A270;
  uint64_t v18 = a1 + 8;
  unint64_t v19 = &v9;
  uint64_t v20 = &v14;
  LOBYTE(v12) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000065D0;
  long long v25 = &unk_100159F20;
  unint64_t v26 = &v12;
  __n128 v27 = (void ***)&v20;
  dispatch_sync(v3, &block);
  if ((_BYTE)v12)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Config Store] Iterating all active events", (uint8_t *)&block, 2u);
    }
    do
    {
      unsigned __int8 v9 = (sqlite3_stmt **)a1;
      unsigned __int8 v10 = &v13;
      unint64_t v11 = &v12;
      uint64_t v12 = 0;
      char v5 = *(NSObject **)(a1 + 24);
      double v14 = _NSConcreteStackBlock;
      uint64_t v15 = 0x40000000;
      __n128 v16 = sub_1000E4888;
      unint64_t v17 = &unk_10015A290;
      uint64_t v18 = a1 + 8;
      unint64_t v19 = &v9;
      uint64_t v20 = &v14;
      unsigned __int8 v21 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000;
      long long v24 = sub_1000065D0;
      long long v25 = &unk_100159F20;
      unint64_t v26 = (uint64_t *)&v21;
      __n128 v27 = (void ***)&v20;
      dispatch_sync(v5, &block);
      int v6 = v21;
      if (v21 && v12) {
        sub_100089DF0(a2, v12);
      }
    }
    while (v6);
  }
  double v14 = (void **)&v13;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  long long v24 = sub_1000E49C4;
  long long v25 = &unk_10015A2B0;
  unint64_t v26 = (uint64_t *)(a1 + 8);
  __n128 v27 = &v14;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v13, 0);
  std::mutex::unlock(&stru_10015EB60);
}

void sub_1000D9B20(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000D9B30(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000D9B38(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000E49D4;
  void v5[3] = &unk_10015A2D0;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned int v8 = -1431655766;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E4B00;
  block[3] = &unk_10015A2F0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_1000D9C34(uint64_t a1)
{
  return sub_1000D9B38(a1 - 112);
}

void sub_1000D9C3C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F110))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EBA0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F110);
  }
  std::mutex::lock(&stru_10015EBA0);
  unsigned __int8 v9 = &v19;
  unsigned __int8 v10 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  unint64_t v19 = 0;
  uint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 0x40000000;
  long long v22 = sub_1000E4B3C;
  uint64_t v23 = &unk_10015A310;
  uint64_t v24 = a1 + 8;
  long long v25 = &v9;
  unint64_t v26 = &v20;
  LOBYTE(v18) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000;
  unint64_t v30 = sub_1000065D0;
  double v31 = &unk_100159F20;
  unint64_t v32 = &v18;
  int v33 = (void ***)&v26;
  dispatch_sync(v3, &block);
  if ((_BYTE)v18)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Config Store] Iterating all eventdefs", (uint8_t *)&block, 2u);
    }
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      unsigned __int8 v9 = (sqlite3_stmt **)a1;
      unsigned __int8 v10 = &v19;
      unint64_t v11 = &v18;
      uint64_t v12 = &v17;
      __n128 v13 = &v16;
      double v14 = &v15;
      char v5 = *(NSObject **)(a1 + 24);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 0x40000000;
      long long v22 = sub_1000E4C2C;
      uint64_t v23 = &unk_10015A330;
      uint64_t v24 = a1 + 8;
      long long v25 = &v9;
      unint64_t v26 = &v20;
      unsigned __int8 v27 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v29 = 0x40000000;
      unint64_t v30 = sub_1000065D0;
      double v31 = &unk_100159F20;
      unint64_t v32 = (uint64_t *)&v27;
      int v33 = (void ***)&v26;
      dispatch_sync(v5, &block);
      int v6 = v27;
      if (v27 && v15) {
        sub_1000D9FB8(a2, v18, v17, v16, v15);
      }
    }
    while (v6);
  }
  uint64_t v20 = (void **)&v19;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000;
  unint64_t v30 = sub_1000E4DB0;
  double v31 = &unk_10015A350;
  unint64_t v32 = (uint64_t *)(a1 + 8);
  int v33 = &v20;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v19, 0);
  std::mutex::unlock(&stru_10015EBA0);
}

void sub_1000D9FA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D9FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

void sub_1000DA04C(uint64_t a1, uint64_t a2)
{
}

void sub_1000DA054(uint64_t a1, sqlite3_stmt **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F118))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EBE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F118);
  }
  std::mutex::lock(&stru_10015EBE0);
  uint64_t v10 = &v19;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  unint64_t v19 = 0;
  uint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 0x40000000;
  long long v22 = sub_1000E4DC0;
  uint64_t v23 = &unk_10015A370;
  uint64_t v24 = a1 + 8;
  long long v25 = &v10;
  unint64_t v26 = &v20;
  LOBYTE(v18) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000;
  unint64_t v30 = sub_1000065D0;
  double v31 = &unk_100159F20;
  unint64_t v32 = &v18;
  int v33 = (void ***)&v26;
  dispatch_sync(v4, &block);
  if ((_BYTE)v18)
  {
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v10 = a2;
      uint64_t v11 = a1;
      uint64_t v12 = &v19;
      __n128 v13 = &v18;
      double v14 = &v17;
      uint64_t v5 = *(NSObject **)(a1 + 24);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 0x40000000;
      long long v22 = sub_1000E4EC4;
      uint64_t v23 = &unk_10015A390;
      uint64_t v24 = a1 + 8;
      long long v25 = &v10;
      unint64_t v26 = &v20;
      unsigned __int8 v27 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v29 = 0x40000000;
      unint64_t v30 = sub_1000065D0;
      double v31 = &unk_100159F20;
      unint64_t v32 = (uint64_t *)&v27;
      int v33 = (void ***)&v26;
      dispatch_sync(v5, &block);
      int v6 = v27;
      if (v27 && v16) {
        sub_100005494(a3, v18, v17, v16);
      }
    }
    while (v6);
  }
  uint64_t v20 = (void **)&v19;
  uint64_t v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000;
  unint64_t v30 = sub_1000E5080;
  double v31 = &unk_10015A3B0;
  unint64_t v32 = (uint64_t *)(a1 + 8);
  int v33 = &v20;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v19, 0);
  std::mutex::unlock(&stru_10015EBE0);
}

void sub_1000DA370(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000DA380(uint64_t a1, sqlite3_stmt **a2, uint64_t a3)
{
}

void sub_1000DA388(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F120))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EC20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F120);
  }
  std::mutex::lock(&stru_10015EC20);
  uint64_t v10 = &v18;
  uint64_t v11 = (sqlite3_stmt **)a1;
  uint64_t v12 = a2;
  uint64_t v5 = *(NSObject **)(a1 + 24);
  uint64_t v18 = 0;
  unint64_t v19 = _NSConcreteStackBlock;
  uint64_t v20 = 0x40000000;
  uint64_t v21 = sub_1000E5090;
  long long v22 = &unk_10015A3D0;
  uint64_t v23 = a1 + 8;
  uint64_t v24 = &v10;
  long long v25 = &v19;
  LOBYTE(v17) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000;
  uint64_t v29 = sub_1000065D0;
  unint64_t v30 = &unk_100159F20;
  double v31 = &v17;
  unint64_t v32 = (void ***)&v25;
  dispatch_sync(v5, &block);
  if ((_BYTE)v17)
  {
    do
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      double v14 = &v15;
      uint64_t v15 = 0;
      uint64_t v10 = (sqlite3_stmt **)a1;
      uint64_t v11 = &v18;
      uint64_t v12 = &v17;
      __n128 v13 = &v16;
      int v6 = *(NSObject **)(a1 + 24);
      unint64_t v19 = _NSConcreteStackBlock;
      uint64_t v20 = 0x40000000;
      uint64_t v21 = sub_1000E5194;
      long long v22 = &unk_10015A3F0;
      uint64_t v23 = a1 + 8;
      uint64_t v24 = &v10;
      long long v25 = &v19;
      unsigned __int8 v26 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v28 = 0x40000000;
      uint64_t v29 = sub_1000065D0;
      unint64_t v30 = &unk_100159F20;
      double v31 = (uint64_t *)&v26;
      unint64_t v32 = (void ***)&v25;
      dispatch_sync(v6, &block);
      int v7 = v26;
      if (v26 && v17 && v15) {
        sub_100005494(a3, v17, v16, v15);
      }
    }
    while (v7);
  }
  unint64_t v19 = (void **)&v18;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000;
  uint64_t v29 = sub_1000E5300;
  unint64_t v30 = &unk_10015A410;
  double v31 = (uint64_t *)(a1 + 8);
  unint64_t v32 = &v19;
  dispatch_sync(v8, &block);
  sub_1000650BC(&v18, 0);
  std::mutex::unlock(&stru_10015EC20);
}

void sub_1000DA6A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000DA6B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1000DA6BC(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F130))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015ECA0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F130);
  }
  std::mutex::lock(&stru_10015ECA0);
  uint64_t v9 = &v15;
  uint64_t v10 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  uint64_t v15 = 0;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 0x40000000;
  uint64_t v18 = sub_1000E5310;
  unint64_t v19 = &unk_10015A490;
  uint64_t v20 = a1 + 8;
  uint64_t v21 = &v9;
  long long v22 = &v16;
  LOBYTE(v14) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000;
  unsigned __int8 v26 = sub_1000065D0;
  unsigned __int8 v27 = &unk_100159F20;
  uint64_t v28 = &v14;
  uint64_t v29 = (void ***)&v22;
  dispatch_sync(v3, &block);
  if ((_BYTE)v14)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Config Store] Iterating all external configs", (uint8_t *)&block, 2u);
    }
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v9 = (sqlite3_stmt **)a1;
      uint64_t v10 = &v15;
      uint64_t v11 = &v14;
      uint64_t v12 = &v13;
      uint64_t v5 = *(NSObject **)(a1 + 24);
      uint64_t v16 = _NSConcreteStackBlock;
      uint64_t v17 = 0x40000000;
      uint64_t v18 = sub_1000E5400;
      unint64_t v19 = &unk_10015A4B0;
      uint64_t v20 = a1 + 8;
      uint64_t v21 = &v9;
      long long v22 = &v16;
      unsigned __int8 v23 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v25 = 0x40000000;
      unsigned __int8 v26 = sub_1000065D0;
      unsigned __int8 v27 = &unk_100159F20;
      uint64_t v28 = (uint64_t *)&v23;
      uint64_t v29 = (void ***)&v22;
      dispatch_sync(v5, &block);
      int v6 = v23;
      if (v23 && v13) {
        sub_1000DAA28(a2, v14, v13);
      }
    }
    while (v6);
  }
  uint64_t v16 = (void **)&v15;
  int v7 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v25 = 0x40000000;
  unsigned __int8 v26 = sub_1000E5554;
  unsigned __int8 v27 = &unk_10015A4D0;
  uint64_t v28 = (uint64_t *)(a1 + 8);
  uint64_t v29 = &v16;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v15, 0);
  std::mutex::unlock(&stru_10015ECA0);
}

void sub_1000DAA18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000DAA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_1000DAAAC(uint64_t a1, uint64_t a2)
{
}

void sub_1000DAAB4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E5564;
  block[3] = &unk_10015A4F0;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000DAB5C(uint64_t a1)
{
}

sqlite3_int64 sub_1000DAB64(uint64_t a1, uint64_t a2)
{
  memset(&v27, 170, sizeof(v27));
  uint64_t v4 = sub_100024940(a2, "uuid");
  sub_100015064(v4, &v27);
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unsigned __int8 v26 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100064D6C(a1, "INSERT INTO configs (config_uuid, config_parent_uuid, config_header) VALUES (?1, ?2, ?3);",
      0,
      &v26);
    if (!v26)
    {
      uint64_t v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E5EC8((uint64_t)v11, (uint64_t)__p);
        }
      }
      else if (v10)
      {
        sub_1000E5E68();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_44;
    }
    uint64_t v25 = 0;
    sub_1000089E8(a1, &v26, 1, (uint64_t)&v27, &v25);
    uint64_t v28 = "parentUuid";
    __p[4] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v6;
    *(_OWORD *)&__p[2] = v6;
    sub_1000135DC(a2, &v28, (uint64_t)__p);
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)buf);
    if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)buf))
    {
      uint64_t v7 = sub_1000155C8();
      if (!v7) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
    }
    if (*(unsigned char *)v7 == 3)
    {
      uint64_t v12 = *(void *)(v7 + 8);
      if (v12)
      {
        sub_1000089E8(a1, &v26, 2, v12, &v25);
        char v13 = 0;
        goto LABEL_19;
      }
    }
LABEL_18:
    sub_100064CF4(a1, &v26, 2, &v25);
    uint64_t v12 = 0;
    char v13 = 1;
LABEL_19:
    memset(__p, 170, 24);
    sub_100007460(a2, -1, 0x20u, 0, 0, __p);
    sub_1000089E8(a1, &v26, 3, (uint64_t)__p, &v25);
    int v14 = sub_10000AAD0(a1, &v26, &v25);
    uint64_t v15 = *(sqlite3 **)(a1 + 32);
    if (v14 == 101)
    {
      sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      if (insert_rowid)
      {
        if (v13 & 1) != 0 || (sub_1000DAFC8(a1, insert_rowid, v12))
        {
          uint64_t v16 = qword_10015EF60;
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = &v27;
            if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[Config Store] Config header with uuid '%{public}s' inserted successfully", buf, 0xCu);
          }
          goto LABEL_42;
        }
        if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
          sub_1000E5F6C();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
      {
        sub_1000E5F00();
      }
    }
    else
    {
      uint64_t v18 = qword_10015EF60;
      BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v15)
      {
        if (v19)
        {
          int v20 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
          std::string::size_type v21 = v27.__r_.__value_.__r.__words[0];
          long long v22 = sqlite3_errmsg(v15);
          unsigned __int8 v23 = &v27;
          if (v20 < 0) {
            unsigned __int8 v23 = (std::string *)v21;
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Config header with uuid '%{public}s' failed to insert new row; %s",
            buf,
            0x16u);
        }
      }
      else if (v19)
      {
        sub_1000E5FD8();
      }
    }
    sqlite3_int64 insert_rowid = 0;
LABEL_42:
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
LABEL_44:
    sub_1000650BC(&v26, 0);
    goto LABEL_45;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
    sub_1000E5E08();
  }
  sqlite3_int64 insert_rowid = 0;
LABEL_45:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return insert_rowid;
}

void sub_1000DAFBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000DAFC8(uint64_t a1, sqlite3_int64 a2, uint64_t a3)
{
  sqlite3_int64 v63 = a2;
  uint64_t v5 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = *(void *)a3;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Config Store] Cloning from parent config with uuid '%{public}s'", buf, 0xCu);
  }
  uint64_t v62 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "SELECT config_id FROM configs WHERE config_uuid=?1 LIMIT 1;", 0, &v62);
  if (!v62)
  {
    uint64_t v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000E60A4((uint64_t)v10, (uint64_t)buf);
      }
    }
    else if (v9)
    {
      sub_1000E6044();
    }
    goto LABEL_97;
  }
  sub_100008A30(a1, &v62, 1, a3);
  int v7 = sub_1000090A4(a1, &v62);
  if (v7 != 100)
  {
    if (v7 == 101)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6634();
      }
    }
    else
    {
      unint64_t v32 = *(sqlite3 **)(a1 + 32);
      BOOL v33 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v32)
      {
        if (v33)
        {
          double v34 = sqlite3_errmsg(v32);
          sub_1000E613C((uint64_t)v34, (uint64_t)buf);
        }
      }
      else if (v33)
      {
        sub_1000E60DC();
      }
    }
LABEL_97:
    uint64_t v29 = 0;
    goto LABEL_98;
  }
  sqlite3_int64 v61 = sub_100006A48(a1, &v62, 0);
  sub_100064D6C(a1, "INSERT INTO config_transforms (config_id, transform_id) SELECT ?1, transform_id FROM config_transforms WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  uint64_t v11 = *(sqlite3_stmt **)buf;
  *(void *)long long buf = 0;
  sub_1000650BC(&v62, v11);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v62)
  {
    std::string::size_type v35 = *(sqlite3 **)(a1 + 32);
    BOOL v36 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v35)
    {
      if (v36)
      {
        double v37 = sqlite3_errmsg(v35);
        sub_1000E61D4((uint64_t)v37, (uint64_t)buf);
      }
    }
    else if (v36)
    {
      sub_1000E6174();
    }
    goto LABEL_97;
  }
  uint64_t v60 = 0;
  sub_10000B0E4(a1, &v62, 1, &v63, &v60);
  sub_10000B0E4(a1, &v62, 2, &v61, &v60);
  do
    int v12 = sub_10000AAD0(a1, &v62, &v60);
  while (v12 == 100);
  if (v12 != 101)
  {
    unint64_t v38 = *(sqlite3 **)(a1 + 32);
    BOOL v39 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      if (v39)
      {
        uint64_t v40 = sqlite3_errmsg(v38);
        sub_1000E626C((uint64_t)v40, (uint64_t)buf);
      }
    }
    else if (v39)
    {
      sub_1000E620C();
    }
    goto LABEL_97;
  }
  char v13 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    int v14 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[Config Store] Cloned %d transforms from parent configwith uuid '%{public}s' ", buf, 0x12u);
  }
  sub_100064D6C(a1, "INSERT INTO config_eventdefs (config_id, eventdef_id) SELECT ?1, eventdef_id FROM config_eventdefs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  uint64_t v16 = *(sqlite3_stmt **)buf;
  *(void *)long long buf = 0;
  sub_1000650BC(&v62, v16);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v62)
  {
    char v41 = *(sqlite3 **)(a1 + 32);
    BOOL v42 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v41)
    {
      if (v42)
      {
        char v43 = sqlite3_errmsg(v41);
        sub_1000E6304((uint64_t)v43, (uint64_t)buf);
      }
    }
    else if (v42)
    {
      sub_1000E62A4();
    }
    goto LABEL_97;
  }
  uint64_t v60 = 0;
  sub_10000B0E4(a1, &v62, 1, &v63, &v60);
  sub_10000B0E4(a1, &v62, 2, &v61, &v60);
  do
    int v17 = sub_10000AAD0(a1, &v62, &v60);
  while (v17 == 100);
  if (v17 != 101)
  {
    uint64_t v44 = *(sqlite3 **)(a1 + 32);
    BOOL v45 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v44)
    {
      if (v45)
      {
        char v46 = sqlite3_errmsg(v44);
        sub_1000E639C((uint64_t)v46, (uint64_t)buf);
      }
    }
    else if (v45)
    {
      sub_1000E633C();
    }
    goto LABEL_97;
  }
  uint64_t v18 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    int v19 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[Config Store] Cloned %d eventdefs from parent configwith uuid '%{public}s' ", buf, 0x12u);
  }
  sub_100064D6C(a1, "INSERT INTO config_modify_eventdefs (config_id, modify_eventdef_id) SELECT ?1, modify_eventdef_id FROM config_modify_eventdefs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  std::string::size_type v21 = *(sqlite3_stmt **)buf;
  *(void *)long long buf = 0;
  sub_1000650BC(&v62, v21);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v62)
  {
    long long v47 = *(sqlite3 **)(a1 + 32);
    BOOL v48 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v47)
    {
      if (v48)
      {
        char v49 = sqlite3_errmsg(v47);
        sub_1000E6434((uint64_t)v49, (uint64_t)buf);
      }
    }
    else if (v48)
    {
      sub_1000E63D4();
    }
    goto LABEL_97;
  }
  uint64_t v60 = 0;
  sub_10000B0E4(a1, &v62, 1, &v63, &v60);
  sub_10000B0E4(a1, &v62, 2, &v61, &v60);
  do
    int v22 = sub_10000AAD0(a1, &v62, &v60);
  while (v22 == 100);
  if (v22 != 101)
  {
    char v50 = *(sqlite3 **)(a1 + 32);
    BOOL v51 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v50)
    {
      if (v51)
      {
        char v52 = sqlite3_errmsg(v50);
        sub_1000E64CC((uint64_t)v52, (uint64_t)buf);
      }
    }
    else if (v51)
    {
      sub_1000E646C();
    }
    goto LABEL_97;
  }
  unsigned __int8 v23 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    int v24 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v24;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "[Config Store] Cloned %d modify-eventdefs from parent configwith uuid '%{public}s' ", buf, 0x12u);
  }
  sub_100064D6C(a1, "INSERT INTO config_external_configs (config_id, external_config_id) SELECT ?1, external_config_id FROM config_external_configs WHERE config_id=?2;",
    0,
    (sqlite3_stmt **)buf);
  unsigned __int8 v26 = *(sqlite3_stmt **)buf;
  *(void *)long long buf = 0;
  sub_1000650BC(&v62, v26);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v62)
  {
    char v53 = *(sqlite3 **)(a1 + 32);
    BOOL v54 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v53)
    {
      if (v54)
      {
        char v55 = sqlite3_errmsg(v53);
        sub_1000E6564((uint64_t)v55, (uint64_t)buf);
      }
    }
    else if (v54)
    {
      sub_1000E6504();
    }
    goto LABEL_97;
  }
  uint64_t v60 = 0;
  sub_10000B0E4(a1, &v62, 1, &v63, &v60);
  sub_10000B0E4(a1, &v62, 2, &v61, &v60);
  do
    int v27 = sub_10000AAD0(a1, &v62, &v60);
  while (v27 == 100);
  if (v27 != 101)
  {
    std::string v56 = *(sqlite3 **)(a1 + 32);
    BOOL v57 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v56)
    {
      if (v57)
      {
        char v58 = sqlite3_errmsg(v56);
        sub_1000E65FC((uint64_t)v58, (uint64_t)buf);
      }
    }
    else if (v57)
    {
      sub_1000E659C();
    }
    goto LABEL_97;
  }
  uint64_t v28 = qword_10015EF60;
  uint64_t v29 = 1;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    int v30 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v31 = a3;
    }
    else {
      uint64_t v31 = *(void *)a3;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v30;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v31;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "[Config Store] Cloned %d external configs from parent config with uuid '%{public}s'", buf, 0x12u);
  }
LABEL_98:
  sub_1000650BC(&v62, 0);
  return v29;
}

void sub_1000DB7DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DB7E8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*a3 != 2) {
    return 0;
  }
  sqlite3_int64 insert_rowid = sub_1000DBBE0(a1, a2, (uint64_t)a3);
  if (insert_rowid) {
    return insert_rowid;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  int v7 = (sqlite3_stmt **)(a2 + 24);
  if (!v8)
  {
    sub_100064D6C(a1, "INSERT INTO sampling (sampling_def, sampling_def_perc, sampled_out, disable_sampling) VALUES (?1, ?2, ?3, ?4);",
      0,
      (sqlite3_stmt **)buf);
    BOOL v9 = *(sqlite3_stmt **)buf;
    *(void *)long long buf = 0;
    sub_1000650BC(v7, v9);
    sub_1000650BC((sqlite3_stmt **)buf, 0);
    if (!*v7)
    {
      unsigned __int8 v23 = *(sqlite3 **)(a1 + 32);
      BOOL v24 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v23)
      {
        if (v24)
        {
          uint64_t v25 = sqlite3_errmsg(v23);
          sub_1000E6700((uint64_t)v25, (uint64_t)buf);
        }
      }
      else if (v24)
      {
        sub_1000E66A0();
      }
      return 0;
    }
  }
  int v30 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100008C70(&v30, v7);
  uint64_t v29 = 0;
  memset(__p, 170, sizeof(__p));
  sub_100007460((uint64_t)a3, -1, 0x20u, 0, 0, __p);
  sub_1000089E8(a1, v7, 1, (uint64_t)__p, &v29);
  uint64_t v27 = 0x4059000000000000;
  int v10 = *a3;
  if (v10 == 1)
  {
    uint64_t v11 = *(void *)(*((void *)a3 + 1) + 16);
    goto LABEL_9;
  }
  if (v10 == 2)
  {
    uint64_t v11 = (uint64_t)(*(void *)(*((void *)a3 + 1) + 8) - **((void **)a3 + 1)) >> 4;
LABEL_9:
    if (v11 == 4)
    {
      int v12 = (unsigned __int8 *)sub_10003A164(a3, 1uLL);
      if (sub_1000612BC(v12, ":generateStableRandomValuePerDevice100"))
      {
        char v13 = (unsigned __int8 *)sub_10003A164(a3, 2uLL);
        *(void *)long long buf = -1;
        sub_100026DA0(v13, (double *)buf);
        uint64_t v27 = *(void *)buf;
      }
    }
  }
  sub_100064CB4(a1, v7, 2, (double *)&v27, &v29);
  int v35 = -1431655766;
  memset(buf, 0, sizeof(buf));
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  sub_100013798(*(void ***)(a1 + 64), (uint64_t)buf, a3);
  if ((void)v33 - *(void *)&buf[24] == 16)
  {
    LOBYTE(v31) = -86;
    sub_100072884(*(char **)&buf[24], &v31);
    BOOL v14 = (_BYTE)v31 != 0;
  }
  else
  {
    BOOL v14 = 0;
  }
  if (*(void *)&v34[16]) {
    sub_1000147D8(*(std::__shared_weak_count **)&v34[16]);
  }
  uint64_t v31 = &buf[24];
  sub_100016F68((void ***)&v31);
  uint64_t v31 = buf;
  sub_100014738((void ***)&v31);
  *(void *)long long buf = !v14;
  sub_10000B0E4(a1, v7, 3, (sqlite3_int64 *)buf, &v29);
  *(void *)long long buf = sub_1000B3C24();
  sub_10000B0E4(a1, v7, 4, (sqlite3_int64 *)buf, &v29);
  int v15 = sub_10000AAD0(a1, v7, &v29);
  uint64_t v16 = *(sqlite3 **)(a1 + 32);
  if (v15 == 101)
  {
    sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
  }
  else
  {
    int v17 = qword_10015EF60;
    BOOL v18 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v18)
      {
        int v19 = SHIBYTE(__p[2]);
        uint64_t v20 = (void **)__p[0];
        std::string::size_type v21 = sqlite3_errmsg(v16);
        int v22 = __p;
        if (v19 < 0) {
          int v22 = v20;
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Failed to insert sampling_def=%{public}s; %s",
          buf,
          0x16u);
      }
    }
    else if (v18)
    {
      sub_1000E6738();
    }
    sqlite3_int64 insert_rowid = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_100008C7C(&v30);
  return insert_rowid;
}

void sub_1000DBB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    sub_1000318A8((uint64_t)&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1000DB9ECLL);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_int64 sub_1000DBBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 32);
  if (*(void *)(a2 + 32)
    || (sub_100064D6C(a1, "SELECT sampling_id FROM sampling WHERE sampling_def=?1 LIMIT 1", 0, (sqlite3_stmt **)__p),
        uint64_t v6 = (sqlite3_stmt *)__p[0],
        __p[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC((sqlite3_stmt **)__p, 0),
        *v5))
  {
    int v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v12, v5);
    memset(__p, 170, sizeof(__p));
    sub_100007460(a3, -1, 0x20u, 0, 0, __p);
    sub_100008A30(a1, v5, 1, (uint64_t)__p);
    if (sub_1000090A4(a1, v5) == 100) {
      sqlite3_int64 v7 = sub_100006A48(a1, v5, 0);
    }
    else {
      sqlite3_int64 v7 = 0;
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100008C7C(&v12);
  }
  else
  {
    BOOL v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000E6804((uint64_t)v11, (uint64_t)__p);
      }
    }
    else if (v10)
    {
      sub_1000E67A4();
    }
    return 0;
  }
  return v7;
}

void sub_1000DBD78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DBD84(uint64_t a1, uint64_t a2, sqlite3_int64 a3, uint64_t a4)
{
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  sqlite3_int64 v32 = a3;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v8;
  v30[1] = v8;
  sub_10003A370(a4, "uuid", (uint64_t)v30);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v9;
  long long v28 = v9;
  sub_10001586C(__p, a4);
  sub_1000157EC((unsigned __int8 **)__p);
  if (sub_1000205D8((unsigned __int8 **)v30, (unsigned __int8 **)__p) || *sub_10001EE40((unsigned __int8 **)v30) != 3)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000E683C();
    }
    return 0;
  }
  else
  {
    BOOL v10 = sub_10001EE40((unsigned __int8 **)v30);
    sub_100015064((uint64_t)v10, (std::string *)__p);
    if (*(void *)(a2 + 8)
      || (sub_100064D6C(a1, "INSERT INTO transforms (transform_uuid, transform_def, sampling_id) VALUES (?1, ?2, ?3);",
            0,
            v37),
          uint64_t v11 = v37[0],
          v37[0] = 0,
          sub_1000650BC((sqlite3_stmt **)(a2 + 8), v11),
          sub_1000650BC(v37, 0),
          *(void *)(a2 + 8)))
    {
      memset(v37, 170, sizeof(v37));
      sub_100007460(a4, -1, 0x20u, 0, 0, v37);
      unsigned __int8 v26 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100008C70(&v26, (void *)(a2 + 8));
      uint64_t v25 = 0;
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 8), 1, (uint64_t)__p, &v25);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 8), 2, (uint64_t)v37, &v25);
      if (a3) {
        sub_10000B0E4(a1, (sqlite3_stmt **)(a2 + 8), 3, &v32, &v25);
      }
      else {
        sub_100064CF4(a1, (sqlite3_stmt **)(a2 + 8), 3, &v25);
      }
      if (sub_10000AAD0(a1, (sqlite3_stmt **)(a2 + 8), &v25) == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }
      else
      {
        sqlite3_int64 v14 = sub_1000DC12C(a1, a2, (uint64_t)__p);
        if (v14)
        {
          sqlite3_int64 insert_rowid = v14;
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEBUG)) {
            sub_1000E69A0();
          }
        }
        else
        {
          int v15 = *(sqlite3 **)(a1 + 32);
          uint64_t v16 = qword_10015EF60;
          BOOL v17 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v15)
          {
            if (v17)
            {
              int v18 = SBYTE7(v28);
              int v19 = (void **)__p[0];
              uint64_t v20 = sqlite3_errmsg(v15);
              std::string::size_type v21 = __p;
              if (v18 < 0) {
                std::string::size_type v21 = v19;
              }
              *(_DWORD *)long long buf = 136446466;
              double v34 = v21;
              __int16 v35 = 2080;
              BOOL v36 = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Failed to insert transform uuid='%{public}s'; %s",
                buf,
                0x16u);
            }
          }
          else if (v17)
          {
            sub_1000E6934();
          }
          sqlite3_int64 insert_rowid = 0;
        }
      }
      sub_100008C7C(&v26);
      if (SHIBYTE(v37[2]) < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      int v22 = *(sqlite3 **)(a1 + 32);
      BOOL v23 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v22)
      {
        if (v23)
        {
          BOOL v24 = sqlite3_errmsg(v22);
          sub_1000E68FC((uint64_t)v24, (uint64_t)v37);
        }
      }
      else if (v23)
      {
        sub_1000E689C();
      }
      sqlite3_int64 insert_rowid = 0;
    }
    if (SBYTE7(v28) < 0) {
      operator delete(__p[0]);
    }
  }
  return insert_rowid;
}

void sub_1000DC120(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DC12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 16);
  if (*(void *)(a2 + 16)
    || (sub_100064D6C(a1, "SELECT transform_id FROM transforms WHERE transform_uuid=?1 LIMIT 1;", 0, v12),
        uint64_t v6 = v12[0],
        v12[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v12, 0),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(v12, v5);
    sub_100008A30(a1, v5, 1, a3);
    if (sub_1000090A4(a1, v5) == 100) {
      sqlite3_int64 v7 = sub_100006A48(a1, v5, 0);
    }
    else {
      sqlite3_int64 v7 = 0;
    }
    sub_100008C7C(v12);
  }
  else
  {
    long long v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000E6A6C((uint64_t)v11, (uint64_t)v12);
      }
    }
    else if (v10)
    {
      sub_1000E6A0C();
    }
    return 0;
  }
  return v7;
}

void sub_1000DC290(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DC29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 64);
  if (*(void *)(a2 + 64)
    || (sub_100064D6C(a1, "SELECT eventdef_id FROM eventdefs WHERE event_uuid=?1 LIMIT 1", 0, v12),
        uint64_t v6 = v12[0],
        v12[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v12, 0),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(v12, v5);
    sub_100008A30(a1, v5, 1, a3);
    if (sub_1000090A4(a1, v5) == 100) {
      sqlite3_int64 v7 = sub_100006A48(a1, v5, 0);
    }
    else {
      sqlite3_int64 v7 = 0;
    }
    sub_100008C7C(v12);
  }
  else
  {
    long long v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000E6B04((uint64_t)v11, (uint64_t)v12);
      }
    }
    else if (v10)
    {
      sub_1000E6AA4();
    }
    return 0;
  }
  return v7;
}

void sub_1000DC400(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DC40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v48[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)BOOL v48 = v6;
  *(_OWORD *)&unsigned char v48[16] = v6;
  sub_10003A370(a3, "uuid", (uint64_t)v48);
  *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v7;
  *(_OWORD *)&uint8_t buf[16] = v7;
  long long v8 = (unsigned __int8 **)sub_10001586C(buf, a3);
  sub_1000157EC(v8);
  if (!sub_1000205D8((unsigned __int8 **)v48, (unsigned __int8 **)buf) && *sub_10001EE40((unsigned __int8 **)v48) == 3)
  {
    long long v9 = sub_10001EE40((unsigned __int8 **)v48);
    sub_100015064((uint64_t)v9, &__p);
    sub_10003A370(a3, "name", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&char v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&uint8_t v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v10;
    *(_OWORD *)&uint8_t buf[16] = v10;
    uint64_t v11 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v11);
    if (sub_1000205D8((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v48) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6B9C();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_20;
    }
    int v12 = sub_10001EE40((unsigned __int8 **)v48);
    sub_100015064((uint64_t)v12, &v46);
    sub_10003A370(a3, "type", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&char v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&uint8_t v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v13;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sqlite3_int64 v14 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v14);
    if (sub_1000205D8((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v48) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6BFC();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_25;
    }
    int v15 = sub_10001EE40((unsigned __int8 **)v48);
    sub_100015064((uint64_t)v15, &v45);
    sub_10003A370(a3, "configuration", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&char v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&uint8_t v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    BOOL v17 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v17);
    if (sub_1000205D8((unsigned __int8 **)v48, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v48) != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6C5C();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_30;
    }
    int v18 = sub_10001EE40((unsigned __int8 **)v48);
    int v19 = *v18;
    if (!*v18) {
      goto LABEL_34;
    }
    if (v19 == 1)
    {
      uint64_t v20 = *(void *)(*((void *)v18 + 1) + 16);
    }
    else
    {
      if (v19 != 2) {
        goto LABEL_36;
      }
      uint64_t v20 = (uint64_t)(*(void *)(*((void *)v18 + 1) + 8) - **((void **)v18 + 1)) >> 4;
    }
    if (!v20)
    {
LABEL_34:
      BOOL v23 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "[Config Store] WARNING: event has no configurations", buf, 2u);
      }
    }
LABEL_36:
    BOOL v24 = sub_10001EE40((unsigned __int8 **)v48);
    sub_100007460((uint64_t)v24, -1, 0x20u, 0, 0, v43);
    v41[0] = 0;
    v41[1] = 0;
    uint64_t v42 = 0;
    sub_10003A370(a3, "defType", (uint64_t)buf);
    *(void *)BOOL v48 = *(void *)buf;
    *(_OWORD *)&char v48[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&uint8_t v48[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v25;
    *(_OWORD *)&uint8_t buf[16] = v25;
    unsigned __int8 v26 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v26);
    if (!sub_1000205D8((unsigned __int8 **)v48, (unsigned __int8 **)buf)
      && *sub_10001EE40((unsigned __int8 **)v48) == 3)
    {
      uint64_t v27 = sub_10001EE40((unsigned __int8 **)v48);
      sub_100015064((uint64_t)v27, (std::string *)buf);
      *(_OWORD *)char v41 = *(_OWORD *)buf;
      uint64_t v42 = *(void *)&buf[16];
    }
    if (*(void *)(a2 + 56)
      || (sub_100064D6C(a1, "INSERT INTO eventdefs (event_uuid, event_name, event_type, event_defType, event_config) VALUES (?1, ?2, ?3, ?4, ?5);",
            0,
            (sqlite3_stmt **)buf),
          long long v28 = *(sqlite3_stmt **)buf,
          *(void *)long long buf = 0,
          sub_1000650BC((sqlite3_stmt **)(a2 + 56), v28),
          sub_1000650BC((sqlite3_stmt **)buf, 0),
          *(void *)(a2 + 56)))
    {
      uint64_t v40 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100008C70(&v40, (void *)(a2 + 56));
      uint64_t v39 = 0;
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 56), 1, (uint64_t)&__p, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 56), 2, (uint64_t)&v46, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 56), 3, (uint64_t)&v45, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 56), 4, (uint64_t)v41, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 56), 5, (uint64_t)v43, &v39);
      if (sub_10000AAD0(a1, (sqlite3_stmt **)(a2 + 56), &v39) == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }
      else
      {
        sqlite3_int64 insert_rowid = sub_1000DC29C(a1, a2, (uint64_t)&__p);
        if (!insert_rowid)
        {
          unint64_t v29 = *(sqlite3 **)(a1 + 32);
          int v30 = qword_10015EF60;
          BOOL v31 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v29)
          {
            if (v31)
            {
              int v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v33 = __p.__r_.__value_.__r.__words[0];
              double v34 = sqlite3_errmsg(v29);
              p_p = &__p;
              if (v32 < 0) {
                p_p = (std::string *)v33;
              }
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = p_p;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v34;
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Failed to insert event def uuid='%{public}s'; %s",
                buf,
                0x16u);
            }
          }
          else if (v31)
          {
            sub_1000E6D54();
          }
          sqlite3_int64 insert_rowid = 0;
        }
      }
      sub_100008C7C(&v40);
    }
    else
    {
      BOOL v36 = *(sqlite3 **)(a1 + 32);
      BOOL v37 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v36)
      {
        if (v37)
        {
          unint64_t v38 = sqlite3_errmsg(v36);
          sub_1000E6D1C((uint64_t)v38, (uint64_t)buf);
        }
      }
      else if (v37)
      {
        sub_1000E6CBC();
      }
      sqlite3_int64 insert_rowid = 0;
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
LABEL_30:
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
LABEL_25:
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return insert_rowid;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
    sub_1000E6B3C();
  }
  return 0;
}

void sub_1000DCADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DCAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 80);
  if (*(void *)(a2 + 80)
    || (sub_100064D6C(a1, "SELECT modify_eventdef_id FROM modify_eventdefs WHERE modify_event_uuid=?1 LIMIT 1", 0, v12),
        long long v6 = v12[0],
        v12[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v12, 0),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(v12, v5);
    sub_100008A30(a1, v5, 1, a3);
    if (sub_1000090A4(a1, v5) == 100) {
      sqlite3_int64 v7 = sub_100006A48(a1, v5, 0);
    }
    else {
      sqlite3_int64 v7 = 0;
    }
    sub_100008C7C(v12);
  }
  else
  {
    long long v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000E6E20((uint64_t)v11, (uint64_t)v12);
      }
    }
    else if (v10)
    {
      sub_1000E6DC0();
    }
    return 0;
  }
  return v7;
}

void sub_1000DCC4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DCC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v45[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string v45 = v6;
  *(_OWORD *)&unsigned char v45[16] = v6;
  sub_10003A370(a3, "uuid", (uint64_t)v45);
  *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v7;
  *(_OWORD *)&uint8_t buf[16] = v7;
  long long v8 = (unsigned __int8 **)sub_10001586C(buf, a3);
  sub_1000157EC(v8);
  if (!sub_1000205D8((unsigned __int8 **)v45, (unsigned __int8 **)buf) && *sub_10001EE40((unsigned __int8 **)v45) == 3)
  {
    long long v9 = sub_10001EE40((unsigned __int8 **)v45);
    sub_100015064((uint64_t)v9, &__p);
    sub_10003A370(a3, "name", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&unsigned char v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v10;
    *(_OWORD *)&uint8_t buf[16] = v10;
    uint64_t v11 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v11);
    if (sub_1000205D8((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6EB8();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_22;
    }
    int v12 = sub_10001EE40((unsigned __int8 **)v45);
    sub_100015064((uint64_t)v12, &v43);
    sub_10003A370(a3, "type", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&unsigned char v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v13;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sqlite3_int64 v14 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v14);
    if (sub_1000205D8((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6F18();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_27;
    }
    int v15 = sub_10001EE40((unsigned __int8 **)v45);
    sub_100015064((uint64_t)v15, &v42);
    sub_10003A370(a3, "defType", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&unsigned char v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    BOOL v17 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v17);
    if (sub_1000205D8((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v45) != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6F78();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_32;
    }
    int v18 = sub_10001EE40((unsigned __int8 **)v45);
    sub_100015064((uint64_t)v18, &v41);
    sub_10003A370(a3, "configuration", (uint64_t)buf);
    *(void *)std::string v45 = *(void *)buf;
    *(_OWORD *)&unsigned char v45[8] = *(_OWORD *)&buf[8];
    *(_OWORD *)&v45[24] = *(_OWORD *)&buf[24];
    *(void *)&uint8_t buf[32] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long buf = v19;
    *(_OWORD *)&uint8_t buf[16] = v19;
    uint64_t v20 = (unsigned __int8 **)sub_10001586C(buf, a3);
    sub_1000157EC(v20);
    if (sub_1000205D8((unsigned __int8 **)v45, (unsigned __int8 **)buf) || *sub_10001EE40((unsigned __int8 **)v45) != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        sub_1000E6FD8();
      }
      sqlite3_int64 insert_rowid = 0;
      goto LABEL_37;
    }
    std::string::size_type v21 = sub_10001EE40((unsigned __int8 **)v45);
    int v22 = *v21;
    if (!*v21) {
      goto LABEL_41;
    }
    if (v22 == 1)
    {
      uint64_t v23 = *(void *)(*((void *)v21 + 1) + 16);
    }
    else
    {
      if (v22 != 2) {
        goto LABEL_43;
      }
      uint64_t v23 = (uint64_t)(*(void *)(*((void *)v21 + 1) + 8) - **((void **)v21 + 1)) >> 4;
    }
    if (!v23)
    {
LABEL_41:
      unsigned __int8 v26 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[Config Store] WARNING: modify event has no configurations", buf, 2u);
      }
    }
LABEL_43:
    uint64_t v27 = sub_10001EE40((unsigned __int8 **)v45);
    sub_100007460((uint64_t)v27, -1, 0x20u, 0, 0, buf);
    if (*(void *)(a2 + 72)
      || (sub_100064D6C(a1, "INSERT INTO modify_eventdefs (modify_event_uuid, modify_event_name, modify_event_type, modify_event_defType, modify_event_config) VALUES (?1, ?2, ?3, ?4, ?5);",
            0,
            (sqlite3_stmt **)v47),
          long long v28 = *(sqlite3_stmt **)v47,
          *(void *)long long v47 = 0,
          sub_1000650BC((sqlite3_stmt **)(a2 + 72), v28),
          sub_1000650BC((sqlite3_stmt **)v47, 0),
          *(void *)(a2 + 72)))
    {
      uint64_t v40 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100008C70(&v40, (void *)(a2 + 72));
      uint64_t v39 = 0;
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 72), 1, (uint64_t)&__p, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 72), 2, (uint64_t)&v43, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 72), 3, (uint64_t)&v42, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 72), 4, (uint64_t)&v41, &v39);
      sub_1000089E8(a1, (sqlite3_stmt **)(a2 + 72), 5, (uint64_t)buf, &v39);
      if (sub_10000AAD0(a1, (sqlite3_stmt **)(a2 + 72), &v39) == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }
      else
      {
        sqlite3_int64 insert_rowid = sub_1000DCAE8(a1, a2, (uint64_t)&__p);
        if (!insert_rowid)
        {
          unint64_t v29 = *(sqlite3 **)(a1 + 32);
          int v30 = qword_10015EF60;
          BOOL v31 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v29)
          {
            if (v31)
            {
              int v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v33 = __p.__r_.__value_.__r.__words[0];
              double v34 = sqlite3_errmsg(v29);
              p_p = &__p;
              if (v32 < 0) {
                p_p = (std::string *)v33;
              }
              *(_DWORD *)long long v47 = 136446466;
              *(void *)&v47[4] = p_p;
              __int16 v48 = 2080;
              char v49 = v34;
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Failed to insert modify event def uuid='%{public}s'; %s",
                v47,
                0x16u);
            }
          }
          else if (v31)
          {
            sub_1000E70D0();
          }
          sqlite3_int64 insert_rowid = 0;
        }
      }
      sub_100008C7C(&v40);
    }
    else
    {
      BOOL v36 = *(sqlite3 **)(a1 + 32);
      BOOL v37 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v36)
      {
        if (v37)
        {
          unint64_t v38 = sqlite3_errmsg(v36);
          sub_1000E7098((uint64_t)v38, (uint64_t)v47);
        }
      }
      else if (v37)
      {
        sub_1000E7038();
      }
      sqlite3_int64 insert_rowid = 0;
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
LABEL_37:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
LABEL_32:
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
LABEL_27:
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
LABEL_22:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return insert_rowid;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
    sub_1000E6E58();
  }
  return 0;
}

void sub_1000DD33C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DD348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sqlite3_int64 insert_rowid = sub_1000DD568(a1, a2, a3);
  if (!insert_rowid)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    long long v7 = (sqlite3_stmt **)(a2 + 40);
    if (v8
      || (sub_100064D6C(a1, "INSERT INTO events (event_name) VALUES (?1)", 0, (sqlite3_stmt **)buf),
          long long v9 = *(sqlite3_stmt **)buf,
          *(void *)long long buf = 0,
          sub_1000650BC(v7, v9),
          sub_1000650BC((sqlite3_stmt **)buf, 0),
          *v7))
    {
      uint64_t v23 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
      sub_100008C70(&v23, v7);
      uint64_t v22 = 0;
      sub_1000089E8(a1, v7, 1, a3, &v22);
      int v10 = sub_10000AAD0(a1, v7, &v22);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10 == 101)
      {
        sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
      }
      else
      {
        int v12 = qword_10015EF60;
        BOOL v13 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (v13)
          {
            int v14 = *(char *)(a3 + 23);
            uint64_t v15 = *(void *)a3;
            long long v16 = sqlite3_errmsg(v11);
            if (v14 >= 0) {
              uint64_t v17 = a3;
            }
            else {
              uint64_t v17 = v15;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v17;
            __int16 v25 = 2080;
            unsigned __int8 v26 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Failed to insert event '%s'; %s",
              buf,
              0x16u);
          }
        }
        else if (v13)
        {
          sub_1000E713C();
        }
        sqlite3_int64 insert_rowid = 0;
      }
      sub_100008C7C(&v23);
    }
    else
    {
      long long v19 = *(sqlite3 **)(a1 + 32);
      BOOL v20 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v19)
      {
        if (v20)
        {
          std::string::size_type v21 = sqlite3_errmsg(v19);
          sub_1000E6D1C((uint64_t)v21, (uint64_t)buf);
        }
      }
      else if (v20)
      {
        sub_1000E6CBC();
      }
      return 0;
    }
  }
  return insert_rowid;
}

void sub_1000DD55C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DD568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt **)(a2 + 48);
  if (*(void *)(a2 + 48)
    || (sub_100064D6C(a1, "SELECT event_id FROM events WHERE event_name=?1 LIMIT 1;", 0, v12),
        long long v6 = v12[0],
        v12[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v12, 0),
        *v5))
  {
    v12[0] = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(v12, v5);
    sub_100008A30(a1, v5, 1, a3);
    if (sub_1000090A4(a1, v5) == 100) {
      sqlite3_int64 v7 = sub_100006A48(a1, v5, 0);
    }
    else {
      sqlite3_int64 v7 = 0;
    }
    sub_100008C7C(v12);
  }
  else
  {
    long long v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000E7208((uint64_t)v11, (uint64_t)v12);
      }
    }
    else if (v10)
    {
      sub_1000E71A8();
    }
    return 0;
  }
  return v7;
}

void sub_1000DD6CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_int64 sub_1000DD6D8(uint64_t a1, uint64_t a2, sqlite3_int64 a3, unsigned __int8 *a4)
{
  sqlite3_int64 v22 = a3;
  sqlite3_int64 v7 = (sqlite3_stmt **)(a2 + 144);
  if (*(void *)(a2 + 144)
    || (sub_100064D6C(a1, "INSERT INTO external_configs (external_config_kind, external_config_def, sampling_id) VALUES (?1, ?2, ?3);",
          0,
          (sqlite3_stmt **)&v24),
        uint64_t v8 = (sqlite3_stmt *)v24.__r_.__value_.__r.__words[0],
        v24.__r_.__value_.__r.__words[0] = 0,
        sub_1000650BC(v7, v8),
        sub_1000650BC((sqlite3_stmt **)&v24, 0),
        *v7))
  {
    memset(&v24, 170, sizeof(v24));
    long long v9 = sub_10000D104(a4, "kind");
    sub_100015064((uint64_t)v9, &v24);
    memset(__p, 170, sizeof(__p));
    sub_100007460((uint64_t)a4, -1, 0x20u, 0, 0, __p);
    BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v20, v7);
    uint64_t v19 = 0;
    sub_1000089E8(a1, v7, 1, (uint64_t)&v24, &v19);
    sub_1000089E8(a1, v7, 2, (uint64_t)__p, &v19);
    if (a3) {
      sub_10000B0E4(a1, v7, 3, &v22, &v19);
    }
    else {
      sub_100064CF4(a1, v7, 3, &v19);
    }
    int v10 = sub_10000AAD0(a1, v7, &v19);
    uint64_t v11 = *(sqlite3 **)(a1 + 32);
    if (v10 == 101)
    {
      sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32));
    }
    else
    {
      BOOL v13 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13)
        {
          int v14 = sqlite3_errmsg(v11);
          sub_1000E7338((uint64_t)v14, (uint64_t)v23);
        }
      }
      else if (v13)
      {
        sub_1000E72D8();
      }
      sqlite3_int64 insert_rowid = 0;
    }
    sub_100008C7C(&v20);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v15 = *(sqlite3 **)(a1 + 32);
    BOOL v16 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v16)
      {
        uint64_t v17 = sqlite3_errmsg(v15);
        sub_1000E72A0((uint64_t)v17, (uint64_t)&v24);
      }
    }
    else if (v16)
    {
      sub_1000E7240();
    }
    return 0;
  }
  return insert_rowid;
}

void sub_1000DD954(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DD960(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 11);
  if (a2[11]
    || (sub_100064D6C(a1, "INSERT OR IGNORE INTO config_transforms (config_id, transform_id) VALUES (?1, ?2)", 0, v19),
        long long v6 = v19[0],
        v19[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v19, 0),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v17, v5);
    uint64_t v16 = 0;
    sub_10000B0E4(a1, v5, 1, a2, &v16);
    sub_10000B0E4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10000AAD0(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      long long v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E7468((uint64_t)v11, (uint64_t)v19);
        }
      }
      else if (v10)
      {
        sub_1000E7408();
      }
    }
    sub_100008C7C(&v17);
  }
  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000E73D0((uint64_t)v15, (uint64_t)v19);
      }
    }
    else if (v14)
    {
      sub_1000E7370();
    }
    return 0;
  }
  return v8;
}

void sub_1000DDB24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DDB30(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 13);
  if (a2[13]
    || (sub_100064D6C(a1, "INSERT OR IGNORE INTO config_eventdefs (config_id, eventdef_id) VALUES (?1, ?2)", 0, v19),
        long long v6 = v19[0],
        v19[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v19, 0),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v17, v5);
    uint64_t v16 = 0;
    sub_10000B0E4(a1, v5, 1, a2, &v16);
    sub_10000B0E4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10000AAD0(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      long long v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E7598((uint64_t)v11, (uint64_t)v19);
        }
      }
      else if (v10)
      {
        sub_1000E7538();
      }
    }
    sub_100008C7C(&v17);
  }
  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000E7500((uint64_t)v15, (uint64_t)v19);
      }
    }
    else if (v14)
    {
      sub_1000E74A0();
    }
    return 0;
  }
  return v8;
}

void sub_1000DDCF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DDD00(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 15);
  if (a2[15]
    || (sub_100064D6C(a1, "INSERT OR IGNORE INTO config_modify_eventdefs (config_id, modify_eventdef_id) VALUES (?1, ?2);",
          0,
          v19),
        long long v6 = v19[0],
        v19[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v19, 0),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v17, v5);
    uint64_t v16 = 0;
    sub_10000B0E4(a1, v5, 1, a2, &v16);
    sub_10000B0E4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10000AAD0(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      long long v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E76C8((uint64_t)v11, (uint64_t)v19);
        }
      }
      else if (v10)
      {
        sub_1000E7668();
      }
    }
    sub_100008C7C(&v17);
  }
  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000E7630((uint64_t)v15, (uint64_t)v19);
      }
    }
    else if (v14)
    {
      sub_1000E75D0();
    }
    return 0;
  }
  return v8;
}

void sub_1000DDEC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DDED0(uint64_t a1, uint64_t a2, sqlite3_int64 a3, sqlite3_int64 a4)
{
  sqlite3_int64 v18 = a4;
  sqlite3_int64 v19 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 136);
  if (*(void *)(a2 + 136)
    || (sub_100064D6C(a1, "INSERT OR IGNORE INTO transform_events (event_id, transform_id) VALUES (?1, ?2)", 0, v20),
        long long v6 = v20[0],
        v20[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v20, 0),
        *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v17, v5);
    uint64_t v16 = 0;
    sub_10000B0E4(a1, v5, 1, &v19, &v16);
    sub_10000B0E4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10000AAD0(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      long long v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E77F8((uint64_t)v11, (uint64_t)v20);
        }
      }
      else if (v10)
      {
        sub_1000E7798();
      }
    }
    sub_100008C7C(&v17);
  }
  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000E7760((uint64_t)v15, (uint64_t)v20);
      }
    }
    else if (v14)
    {
      sub_1000E7700();
    }
    return 0;
  }
  return v8;
}

void sub_1000DE090(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DE09C(uint64_t a1, sqlite3_int64 *a2, sqlite3_int64 a3)
{
  sqlite3_int64 v18 = a3;
  uint64_t v5 = (sqlite3_stmt **)(a2 + 20);
  if (a2[20]
    || (sub_100064D6C(a1, "INSERT OR IGNORE INTO config_external_configs (config_id, external_config_id) VALUES (?1, ?2)", 0, v19), long long v6 = v19[0], v19[0] = 0, sub_1000650BC(v5, v6), sub_1000650BC(v19, 0), *v5))
  {
    uint64_t v17 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v17, v5);
    uint64_t v16 = 0;
    sub_10000B0E4(a1, v5, 1, a2, &v16);
    sub_10000B0E4(a1, v5, 2, &v18, &v16);
    int v7 = sub_10000AAD0(a1, v5, &v16);
    BOOL v8 = v7 == 101;
    if (v7 != 101)
    {
      long long v9 = *(sqlite3 **)(a1 + 32);
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v10)
        {
          uint64_t v11 = sqlite3_errmsg(v9);
          sub_1000E7928((uint64_t)v11, (uint64_t)v19);
        }
      }
      else if (v10)
      {
        sub_1000E78C8();
      }
    }
    sub_100008C7C(&v17);
  }
  else
  {
    BOOL v13 = *(sqlite3 **)(a1 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        uint64_t v15 = sqlite3_errmsg(v13);
        sub_1000E7890((uint64_t)v15, (uint64_t)v19);
      }
    }
    else if (v14)
    {
      sub_1000E7830();
    }
    return 0;
  }
  return v8;
}

void sub_1000DE260(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DE26C(uint64_t a1, uint64_t a2, unsigned char *a3, sqlite3_int64 a4)
{
  if (*a3 != 2) {
    return 0;
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v8;
  v27[1] = v8;
  long long v9 = (unsigned __int8 **)sub_1000136C8(v27, (uint64_t)a3);
  sub_100014064(v9);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v10;
  v25[1] = v10;
  sub_1000136C8(v25, (uint64_t)a3);
  sub_100013648((unsigned __int8 **)v25);
  while (1)
  {
    BOOL v11 = sub_100013964((unsigned __int8 **)v27, (unsigned __int8 **)v25);
    if (v11) {
      break;
    }
    int v12 = sub_100013AAC((unsigned __int8 **)v27);
    uint64_t v13 = (uint64_t)v12;
    if (*v12 == 1)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v23[0] = v14;
      v23[1] = v14;
      sub_1000239E4((uint64_t)v12, "event", (uint64_t)v23);
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v15;
      long long v21 = v15;
      sub_1000136C8(__p, v13);
      sub_100013648((unsigned __int8 **)__p);
      if (!sub_100013964((unsigned __int8 **)v23, (unsigned __int8 **)__p)
        && *sub_100013AAC((unsigned __int8 **)v23) == 3)
      {
        uint64_t v16 = sub_100013AAC((unsigned __int8 **)v23);
        sub_100015064((uint64_t)v16, (std::string *)__p);
        sqlite3_int64 v17 = sub_1000DD348(a1, a2, (uint64_t)__p);
        BOOL v18 = !v17 || !sub_1000DDED0(a1, a2, v17, a4);
        if (SBYTE7(v21) < 0) {
          operator delete(__p[0]);
        }
        if (v18) {
          break;
        }
      }
    }
    sub_100013C64((unsigned __int8 **)v27);
  }
  return v11;
}

void sub_1000DE430(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000DE43C(uint64_t a1, sqlite3_int64 *a2, unsigned __int8 *a3)
{
  if (*a3 == 1)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    sqlite3_int64 v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000DE610(a3, &v18);
    sqlite3_int64 v6 = sub_1000DB7E8(a1, (uint64_t)a2, (unsigned __int8 *)&v18);
    sqlite3_int64 v7 = sub_1000DBD84(a1, (uint64_t)a2, v6, (uint64_t)a3);
    if (v7)
    {
      sqlite3_int64 v8 = v7;
      if (sub_1000DD960(a1, a2, v7))
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[0] = v9;
        v16[1] = v9;
        sub_10003A370((uint64_t)a3, "inputs", (uint64_t)v16);
        unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v14[0] = v10;
        v14[1] = v10;
        sub_10001586C(v14, (uint64_t)a3);
        sub_1000157EC((unsigned __int8 **)v14);
        if (sub_1000205D8((unsigned __int8 **)v16, (unsigned __int8 **)v14))
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000E7960();
          }
          goto LABEL_11;
        }
        int v12 = sub_10001EE40((unsigned __int8 **)v16);
        if (sub_1000DE26C(a1, (uint64_t)a2, v12, v8))
        {
LABEL_11:
          uint64_t v11 = 1;
LABEL_13:
          sub_100016EAC((uint64_t)&v18);
          sub_100016B28(&v19, v18);
          return v11;
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
    sub_1000E79C0();
  }
  return 0;
}

void sub_1000DE604(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000DE610@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0;
  *(unsigned char *)a2 = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  *(void *)&v17[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)unint64_t v17 = v4;
  *(_OWORD *)&v17[16] = v4;
  sub_10003A370((uint64_t)a1, "enableIf", (uint64_t)v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v5;
  v15[1] = v5;
  sub_10001586C(v15, (uint64_t)a1);
  sub_1000157EC((unsigned __int8 **)v15);
  uint64_t result = sub_1000205D8((unsigned __int8 **)v17, (unsigned __int8 **)v15);
  if ((result & 1) == 0)
  {
    sqlite3_int64 v7 = sub_10001EE40((unsigned __int8 **)v17);
    v13[0] = *v7;
    long long v14 = (uint64_t *)*((void *)v7 + 1);
    sub_100016EAC((uint64_t)v7);
    *sqlite3_int64 v7 = 0;
    *((void *)v7 + 1) = 0;
    sub_100016EAC((uint64_t)v13);
    sub_100016EAC((uint64_t)v13);
    unsigned __int8 v8 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v13[0];
    v13[0] = v8;
    long long v9 = (uint64_t *)a2[1];
    a2[1] = v14;
    long long v14 = v9;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v13);
    sub_100016B28(&v14, v13[0]);
    uint64_t v10 = *(void *)v17;
    long long v11 = *(_OWORD *)&v17[8];
    long long v12 = *(_OWORD *)&v17[24];
    return sub_10003D1D4(a1, (uint64_t)&v10, (uint64_t)v15);
  }
  return result;
}

void sub_1000DE788(_Unwind_Exception *a1)
{
  sub_100028D64(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000DE7A4(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 12);
    if (a2[12]
      || (sub_100064D6C(a1, "DELETE FROM config_transforms WHERE config_id=?1 AND transform_id IN (SELECT transform_id FROM transforms WHERE transform_uuid=?2)", 0, (sqlite3_stmt **)v41), sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0], *(void *)&v41[0] = 0, sub_1000650BC(v6, v7), sub_1000650BC((sqlite3_stmt **)v41, 0), *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      long long v9 = (unsigned __int8 **)sub_10001586C(v41, (uint64_t)a3);
      sub_10001D3E4(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_10001586C(v35, (uint64_t)a3);
      sub_1000157EC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_1000205D8((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        long long v12 = sub_10001EE40((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000E7AB8();
          }
          return v11;
        }
        sub_100015064((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100008C70(&v33, v6);
        uint64_t v32 = 0;
        sub_10000B0E4(a1, v6, 1, a2, &v32);
        sub_1000089E8(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10000AAD0(a1, v6, &v32);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 != 1)
          {
            unint64_t v16 = qword_10015EF60;
            if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long buf = 136315394;
              unint64_t v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[Config Store] WARNING: config tried to remove transform (uuid='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }
        else
        {
          uint64_t v18 = qword_10015EF60;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            long long v21 = sqlite3_errmsg(v14);
            *(_DWORD *)long long buf = 136446466;
            unint64_t v22 = &__p;
            if (v20 < 0) {
              unint64_t v22 = (std::string *)v31;
            }
            unint64_t v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            uint64_t v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove transform (uuid='%{public}s'); %s";
            uint32_t v25 = 22;
          }
          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136446210;
            unint64_t v38 = v26;
            uint64_t v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove transform (uuid='%{public}s')[null database]";
            uint32_t v25 = 12;
          }
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }
LABEL_19:
        sub_100008C7C(&v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v13 != 101) {
          return v11;
        }
        sub_100013C64((unsigned __int8 **)v41);
      }
    }
    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    BOOL v29 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        int v30 = sqlite3_errmsg(v28);
        sub_1000E7A80((uint64_t)v30, (uint64_t)v41);
      }
    }
    else if (v29)
    {
      sub_1000E7A20();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
  {
    sub_1000E7B18();
  }
  return 0;
}

void sub_1000DEB88(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000DEB98(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000E7B78();
    }
    return 0;
  }
  sqlite3_int64 v5 = sub_1000DC40C(a1, (uint64_t)a2, (uint64_t)a3);
  if (!v5) {
    return 0;
  }

  return sub_1000DDB30(a1, a2, v5);
}

BOOL sub_1000DEC28(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 14);
    if (a2[14]
      || (sub_100064D6C(a1, "DELETE FROM config_eventdefs WHERE config_id=?1 AND eventdef_id IN (SELECT eventdef_id FROM eventdefs WHERE event_uuid=?2)", 0, (sqlite3_stmt **)v41), sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0], *(void *)&v41[0] = 0, sub_1000650BC(v6, v7), sub_1000650BC((sqlite3_stmt **)v41, 0), *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      long long v9 = (unsigned __int8 **)sub_10001586C(v41, (uint64_t)a3);
      sub_10001D3E4(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_10001586C(v35, (uint64_t)a3);
      sub_1000157EC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_1000205D8((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        long long v12 = sub_10001EE40((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000E7C70();
          }
          return v11;
        }
        sub_100015064((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100008C70(&v33, v6);
        uint64_t v32 = 0;
        sub_10000B0E4(a1, v6, 1, a2, &v32);
        sub_1000089E8(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10000AAD0(a1, v6, &v32);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 != 1)
          {
            unint64_t v16 = qword_10015EF60;
            if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long buf = 136315394;
              unint64_t v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[Config Store] WARNING: config tried to remove eventdef (uuid='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }
        else
        {
          uint64_t v18 = qword_10015EF60;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            long long v21 = sqlite3_errmsg(v14);
            *(_DWORD *)long long buf = 136446466;
            unint64_t v22 = &__p;
            if (v20 < 0) {
              unint64_t v22 = (std::string *)v31;
            }
            unint64_t v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            uint64_t v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove eventdef (uuid='%{public}s'); %s";
            uint32_t v25 = 22;
          }
          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136446210;
            unint64_t v38 = v26;
            uint64_t v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove eventdef (uuid='%{public}s')[null database]";
            uint32_t v25 = 12;
          }
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }
LABEL_19:
        sub_100008C7C(&v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v13 != 101) {
          return v11;
        }
        sub_100013C64((unsigned __int8 **)v41);
      }
    }
    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    BOOL v29 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        int v30 = sqlite3_errmsg(v28);
        sub_1000E7C38((uint64_t)v30, (uint64_t)v41);
      }
    }
    else if (v29)
    {
      sub_1000E7BD8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
  {
    sub_1000E7CD0();
  }
  return 0;
}

void sub_1000DF00C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000DF01C(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000E7D30();
    }
    return 0;
  }
  sqlite3_int64 v5 = sub_1000DCC58(a1, (uint64_t)a2, (uint64_t)a3);
  if (!v5) {
    return 0;
  }

  return sub_1000DDD00(a1, a2, v5);
}

BOOL sub_1000DF0AC(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 16);
    if (a2[16]
      || (sub_100064D6C(a1, "DELETE FROM config_modify_eventdefs WHERE config_id=?1 AND modify_eventdef_id IN (SELECT modify_eventdef_id FROM modify_eventdefs WHERE modify_event_uuid=?2);",
            0,
            (sqlite3_stmt **)v41),
          sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0],
          *(void *)&v41[0] = 0,
          sub_1000650BC(v6, v7),
          sub_1000650BC((sqlite3_stmt **)v41, 0),
          *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      long long v9 = (unsigned __int8 **)sub_10001586C(v41, (uint64_t)a3);
      sub_10001D3E4(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_10001586C(v35, (uint64_t)a3);
      sub_1000157EC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_1000205D8((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        long long v12 = sub_10001EE40((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000E7E28();
          }
          return v11;
        }
        sub_100015064((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100008C70(&v33, v6);
        uint64_t v32 = 0;
        sub_10000B0E4(a1, v6, 1, a2, &v32);
        sub_1000089E8(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10000AAD0(a1, v6, &v32);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13 != 101) {
          break;
        }
        int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
        if (v15 != 1)
        {
          uint64_t v16 = qword_10015EF60;
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136315394;
            unint64_t v38 = p_p;
            __int16 v39 = 1024;
            LODWORD(v40) = v15;
            uint64_t v18 = v16;
            BOOL v19 = "[Config Store] ERROR: config tried to remove modify eventdef (uuid='%s') but %d rows were updated; continue";
            uint32_t v20 = 18;
LABEL_26:
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
          }
        }
LABEL_19:
        sub_100008C7C(&v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v13 != 101) {
          return v11;
        }
        sub_100013C64((unsigned __int8 **)v41);
      }
      uint64_t v21 = qword_10015EF60;
      BOOL v22 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v14)
      {
        if (!v22) {
          goto LABEL_19;
        }
        int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
        unint64_t v24 = sqlite3_errmsg(v14);
        *(_DWORD *)long long buf = 136446466;
        uint32_t v25 = &__p;
        if (v23 < 0) {
          uint32_t v25 = (std::string *)v31;
        }
        unint64_t v38 = v25;
        __int16 v39 = 2080;
        uint64_t v40 = v24;
        uint64_t v18 = v21;
        BOOL v19 = "[Config Store] ERROR: Failed to remove modify-eventdefs (uuid='%{public}s'); %s";
        uint32_t v20 = 22;
      }
      else
      {
        if (!v22) {
          goto LABEL_19;
        }
        unint64_t v26 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136446210;
        unint64_t v38 = v26;
        uint64_t v18 = v21;
        BOOL v19 = "[Config Store] ERROR: Failed to remove modify-eventdefs (uuid='%{public}s')[null database]";
        uint32_t v20 = 12;
      }
      goto LABEL_26;
    }
    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    BOOL v29 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        int v30 = sqlite3_errmsg(v28);
        sub_1000E7DF0((uint64_t)v30, (uint64_t)v41);
      }
    }
    else if (v29)
    {
      sub_1000E7D90();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
  {
    sub_1000E7E88();
  }
  return 0;
}

void sub_1000DF48C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000DF49C(uint64_t a1, sqlite3_int64 *a2, unsigned char *a3)
{
  if (*a3 == 2)
  {
    sqlite3_int64 v6 = (sqlite3_stmt **)(a2 + 19);
    if (a2[19]
      || (sub_100064D6C(a1, "DELETE FROM config_external_configs WHERE config_id=?1 AND external_config_id IN (SELECT external_config_id FROM external_configs WHERE external_config_kind=?2)", 0, (sqlite3_stmt **)v41), sqlite3_int64 v7 = *(sqlite3_stmt **)&v41[0], *(void *)&v41[0] = 0, sub_1000650BC(v6, v7), sub_1000650BC((sqlite3_stmt **)v41, 0), *v6))
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v41[0] = v8;
      v41[1] = v8;
      long long v9 = (unsigned __int8 **)sub_10001586C(v41, (uint64_t)a3);
      sub_10001D3E4(v9);
      unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v35[0] = v10;
      v35[1] = v10;
      sub_10001586C(v35, (uint64_t)a3);
      sub_1000157EC((unsigned __int8 **)v35);
      while (1)
      {
        BOOL v11 = sub_1000205D8((unsigned __int8 **)v41, (unsigned __int8 **)v35);
        if (v11) {
          return v11;
        }
        long long v12 = sub_10001EE40((unsigned __int8 **)v41);
        if (*v12 != 3)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000E7F80();
          }
          return v11;
        }
        sub_100015064((uint64_t)v12, &__p);
        std::string::size_type v33 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
        sub_100008C70(&v33, v6);
        uint64_t v32 = 0;
        sub_10000B0E4(a1, v6, 1, a2, &v32);
        sub_1000089E8(a1, v6, 2, (uint64_t)&__p, &v32);
        int v13 = sub_10000AAD0(a1, v6, &v32);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13 == 101)
        {
          int v15 = sqlite3_changes(*(sqlite3 **)(a1 + 32));
          if (v15 <= 0)
          {
            uint64_t v16 = qword_10015EF60;
            if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
            {
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long buf = 136315394;
              unint64_t v38 = p_p;
              __int16 v39 = 1024;
              LODWORD(v40) = v15;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[Config Store] WARNING: config tried to remove external config (kind='%s') but %d rows were updated; continue",
                buf,
                0x12u);
            }
          }
        }
        else
        {
          uint64_t v18 = qword_10015EF60;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!v19) {
              goto LABEL_19;
            }
            int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
            uint64_t v21 = sqlite3_errmsg(v14);
            *(_DWORD *)long long buf = 136446466;
            BOOL v22 = &__p;
            if (v20 < 0) {
              BOOL v22 = (std::string *)v31;
            }
            unint64_t v38 = v22;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            int v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove external config (kind='%{public}s'); %s";
            uint32_t v25 = 22;
          }
          else
          {
            if (!v19) {
              goto LABEL_19;
            }
            unint64_t v26 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136446210;
            unint64_t v38 = v26;
            int v23 = v18;
            unint64_t v24 = "[Config Store] ERROR: Failed to remove external config (kind='%{public}s')[null database]";
            uint32_t v25 = 12;
          }
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, v25);
        }
LABEL_19:
        sub_100008C7C(&v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v13 != 101) {
          return v11;
        }
        sub_100013C64((unsigned __int8 **)v41);
      }
    }
    unint64_t v28 = *(sqlite3 **)(a1 + 32);
    BOOL v29 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v28)
    {
      if (v29)
      {
        int v30 = sqlite3_errmsg(v28);
        sub_1000E7F48((uint64_t)v30, (uint64_t)v41);
      }
    }
    else if (v29)
    {
      sub_1000E7EE8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
  {
    sub_1000E7B18();
  }
  return 0;
}

void sub_1000DF880(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000DF890(uint64_t a1, sqlite3_int64 *a2, unsigned __int8 *a3)
{
  if (*a3 == 1)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000DE610(a3, &v10);
    sqlite3_int64 v6 = sub_1000DB7E8(a1, (uint64_t)a2, (unsigned __int8 *)&v10);
    sqlite3_int64 v7 = sub_1000DD6D8(a1, (uint64_t)a2, v6, a3);
    if (v7) {
      BOOL v8 = sub_1000DE09C(a1, a2, v7);
    }
    else {
      BOOL v8 = 0;
    }
    sub_100016EAC((uint64_t)&v10);
    sub_100016B28(&v11, v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000E7FE0();
    }
    return 0;
  }
  return v8;
}

void sub_1000DF9A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000DF9B4(uint64_t a1)
{
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] DATABASE INITIALIZATION: modifying for V1 schema", v93, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE configs\n         (\n          config_id INTEGER PRIMARY KEY ASC,\n          config_uuid STRING UNIQUE,\n          config_parent_uuid STRING,\n          config_type STRING,\n          config_header STRING,\n          config_md5  BLOB,\n          config_enabled INTEGER DEFAULT 0,\n          config_last_enabled TEXT,\n          config_last_disabled TEXT\n         )\n    ", 0, 0, 0);
  long long v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000E91D8((uint64_t)v6, (uint64_t)v93);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000E9178();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TRIGGER update_activation_time AFTER UPDATE ON configs\n         WHEN old.config_enabled=0 AND new.config_enabled=1\n         BEGIN\n                 UPDATE configs SET config_last_enabled = datetime('now') WHERE config_id = new.config_id;\n"
           "         END\n"
           "    ",
           0,
           0,
           0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        long long v9 = sqlite3_errmsg(v8);
        sub_1000E9140((uint64_t)v9, (uint64_t)v93);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000E90E0();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TRIGGER update_deactivation_time AFTER UPDATE ON configs\n         WHEN old.config_enabled=1 AND new.config_enabled=0\n         BEGIN\n                 UPDATE configs SET config_last_disabled = datetime('now') WHERE config_id = new.config_id;\n"
              "         END\n"
              "    ",
              0,
              0,
              0);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          long long v12 = sqlite3_errmsg(v11);
          sub_1000E90A8((uint64_t)v12, (uint64_t)v93);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000E9048();
        }
      }
      else
      {
        int v13 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE events\n         (\n          event_id INTEGER PRIMARY KEY ASC,\n          event_name STRING UNIQUE ON CONFLICT IGNORE\n         )\n    ", 0, 0, 0);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000E9010((uint64_t)v15, (uint64_t)v93);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000E8FB0();
          }
        }
        else
        {
          int v16 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE eventdefs\n         (\n          eventdef_id INTEGER PRIMARY KEY ASC,\n          event_uuid STRING UNIQUE,\n          event_name STRING,\n          event_type STRING,\n          event_defType STRING,\n          event_config STRING\n         )\n    ", 0, 0, 0);
          unint64_t v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              uint64_t v18 = sqlite3_errmsg(v17);
              sub_1000E8F78((uint64_t)v18, (uint64_t)v93);
            }
            else
            {
              if (!result) {
                return result;
              }
              sub_1000E8F18();
            }
          }
          else
          {
            int v19 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE transforms\n         (\n          transform_id INTEGER PRIMARY KEY ASC,\n          transform_uuid STRING UNIQUE,\n          transform_def  STRING,\n          transform_enableIf STRING\n         )\n    ", 0, 0, 0);
            int v20 = *(sqlite3 **)(a1 + 32);
            if (v19)
            {
              BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
              if (v20)
              {
                if (!result) {
                  return result;
                }
                uint64_t v21 = sqlite3_errmsg(v20);
                sub_1000E8EE0((uint64_t)v21, (uint64_t)v93);
              }
              else
              {
                if (!result) {
                  return result;
                }
                sub_1000E8E80();
              }
            }
            else
            {
              int v22 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE config_transforms\n         (\n          config_id INTEGER,\n          transform_id INTEGER\n         )\n    ", 0, 0, 0);
              int v23 = *(sqlite3 **)(a1 + 32);
              if (v22)
              {
                BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                if (v23)
                {
                  if (!result) {
                    return result;
                  }
                  unint64_t v24 = sqlite3_errmsg(v23);
                  sub_1000E8E48((uint64_t)v24, (uint64_t)v93);
                }
                else
                {
                  if (!result) {
                    return result;
                  }
                  sub_1000E8DE8();
                }
              }
              else
              {
                int v25 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE config_eventdefs\n         (\n          config_id INTEGER,\n          eventdef_id INTEGER\n         )\n    ", 0, 0, 0);
                unint64_t v26 = *(sqlite3 **)(a1 + 32);
                if (v25)
                {
                  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                  if (v26)
                  {
                    if (!result) {
                      return result;
                    }
                    uint64_t v27 = sqlite3_errmsg(v26);
                    sub_1000E8DB0((uint64_t)v27, (uint64_t)v93);
                  }
                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000E8D50();
                  }
                }
                else
                {
                  int v28 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE transform_events\n         (\n          event_id INTEGER,\n          transform_id INTEGER,\n          CONSTRAINT maps_uniquely UNIQUE (event_id, transform_id)\n         )\n    ", 0, 0, 0);
                  BOOL v29 = *(sqlite3 **)(a1 + 32);
                  if (v28)
                  {
                    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                    if (v29)
                    {
                      if (!result) {
                        return result;
                      }
                      int v30 = sqlite3_errmsg(v29);
                      sub_1000E8D18((uint64_t)v30, (uint64_t)v93);
                    }
                    else
                    {
                      if (!result) {
                        return result;
                      }
                      sub_1000E8CB8();
                    }
                  }
                  else
                  {
                    int v31 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE disabled_transforms\n         (\n          transform_id INTEGER\n        )\n    ", 0, 0, 0);
                    uint64_t v32 = *(sqlite3 **)(a1 + 32);
                    if (v31)
                    {
                      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                      if (v32)
                      {
                        if (!result) {
                          return result;
                        }
                        std::string::size_type v33 = sqlite3_errmsg(v32);
                        sub_1000E8C80((uint64_t)v33, (uint64_t)v93);
                      }
                      else
                      {
                        if (!result) {
                          return result;
                        }
                        sub_1000E8C20();
                      }
                    }
                    else
                    {
                      int v34 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE external_configs\n         (\n          external_config_id INTEGER PRIMARY KEY ASC,\n          external_config_kind STRING,\n          external_config_def  STRING,\n          external_config_enableIf STRING\n         )\n    ", 0, 0, 0);
                      __int16 v35 = *(sqlite3 **)(a1 + 32);
                      if (v34)
                      {
                        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                        if (v35)
                        {
                          if (!result) {
                            return result;
                          }
                          unint64_t v36 = sqlite3_errmsg(v35);
                          sub_1000E8BE8((uint64_t)v36, (uint64_t)v93);
                        }
                        else
                        {
                          if (!result) {
                            return result;
                          }
                          sub_1000E8B88();
                        }
                      }
                      else
                      {
                        int v37 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE config_external_configs\n         (\n          config_id INTEGER,\n          external_config_id INTEGER\n         )\n    ", 0, 0, 0);
                        unint64_t v38 = *(sqlite3 **)(a1 + 32);
                        if (v37)
                        {
                          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                          if (v38)
                          {
                            if (!result) {
                              return result;
                            }
                            __int16 v39 = sqlite3_errmsg(v38);
                            sub_1000E8B50((uint64_t)v39, (uint64_t)v93);
                          }
                          else
                          {
                            if (!result) {
                              return result;
                            }
                            sub_1000E8AF0();
                          }
                        }
                        else
                        {
                          int v40 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE disabled_external_configs\n         (\n          external_config_id INTEGER\n        )\n    ", 0, 0, 0);
                          std::string v41 = *(sqlite3 **)(a1 + 32);
                          if (v40)
                          {
                            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                            if (v41)
                            {
                              if (!result) {
                                return result;
                              }
                              unint64_t v42 = sqlite3_errmsg(v41);
                              sub_1000E8AB8((uint64_t)v42, (uint64_t)v93);
                            }
                            else
                            {
                              if (!result) {
                                return result;
                              }
                              sub_1000E8A58();
                            }
                          }
                          else
                          {
                            int v43 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW eligible_transform_view AS\n           SELECT transforms.transform_id, transform_uuid, transform_def, transform_enableIf\n           FROM transforms\n           INNER JOIN config_transforms\n                ON config_transforms.transform_id=transforms.transform_id\n           WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ", 0, 0, 0);
                            char v44 = *(sqlite3 **)(a1 + 32);
                            if (v43)
                            {
                              BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                              if (v44)
                              {
                                if (!result) {
                                  return result;
                                }
                                std::string v45 = sqlite3_errmsg(v44);
                                sub_1000E8A20((uint64_t)v45, (uint64_t)v93);
                              }
                              else
                              {
                                if (!result) {
                                  return result;
                                }
                                sub_1000E89C0();
                              }
                            }
                            else
                            {
                              int v46 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW eligible_eventdef_view AS\n           SELECT eventdefs.eventdef_id, event_uuid, event_name, event_type, event_defType, event_config\n           FROM eventdefs\n           INNER JOIN config_eventdefs\n                ON config_eventdefs.eventdef_id=eventdefs.eventdef_id\n           WHERE config_eventdefs.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ", 0, 0, 0);
                              long long v47 = *(sqlite3 **)(a1 + 32);
                              if (v46)
                              {
                                BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                if (v47)
                                {
                                  if (!result) {
                                    return result;
                                  }
                                  __int16 v48 = sqlite3_errmsg(v47);
                                  sub_1000E8988((uint64_t)v48, (uint64_t)v93);
                                }
                                else
                                {
                                  if (!result) {
                                    return result;
                                  }
                                  sub_1000E8928();
                                }
                              }
                              else
                              {
                                int v49 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW eligible_external_configs_view AS\n           SELECT config_external_configs.external_config_id, external_config_kind, external_config_def, external_config_enableIf\n           FROM external_configs\n           INNER JOIN config_external_configs\n                ON config_external_configs.external_config_id=external_configs.external_config_id\n           WHERE config_external_configs.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ", 0, 0, 0);
                                char v50 = *(sqlite3 **)(a1 + 32);
                                if (v49)
                                {
                                  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                  if (v50)
                                  {
                                    if (!result) {
                                      return result;
                                    }
                                    BOOL v51 = sqlite3_errmsg(v50);
                                    sub_1000E88F0((uint64_t)v51, (uint64_t)v93);
                                  }
                                  else
                                  {
                                    if (!result) {
                                      return result;
                                    }
                                    sub_1000E8890();
                                  }
                                }
                                else
                                {
                                  int v52 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW enabled_transform_view AS\n           SELECT eligible_transform_view.transform_id AS transform_id, transform_uuid, transform_def\n           FROM eligible_transform_view\n           LEFT JOIN disabled_transforms\n              ON eligible_transform_view.transform_id=disabled_transforms.transform_id\n           WHERE disabled_transforms.transform_id IS NULL\n    ", 0, 0, 0);
                                  char v53 = *(sqlite3 **)(a1 + 32);
                                  if (v52)
                                  {
                                    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                    if (v53)
                                    {
                                      if (!result) {
                                        return result;
                                      }
                                      BOOL v54 = sqlite3_errmsg(v53);
                                      sub_1000E8858((uint64_t)v54, (uint64_t)v93);
                                    }
                                    else
                                    {
                                      if (!result) {
                                        return result;
                                      }
                                      sub_1000E87F8();
                                    }
                                  }
                                  else
                                  {
                                    int v55 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW disabled_transform_view AS\n           SELECT eligible_transform_view.transform_id AS transform_id, transform_uuid, transform_def\n           FROM eligible_transform_view\n           LEFT JOIN disabled_transforms\n              ON eligible_transform_view.transform_id=disabled_transforms.transform_id\n           WHERE disabled_transforms.transform_id IS NOT NULL\n    ", 0, 0, 0);
                                    std::string v56 = *(sqlite3 **)(a1 + 32);
                                    if (v55)
                                    {
                                      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                      if (v56)
                                      {
                                        if (!result) {
                                          return result;
                                        }
                                        BOOL v57 = sqlite3_errmsg(v56);
                                        sub_1000E87C0((uint64_t)v57, (uint64_t)v93);
                                      }
                                      else
                                      {
                                        if (!result) {
                                          return result;
                                        }
                                        sub_1000E8760();
                                      }
                                    }
                                    else
                                    {
                                      int v58 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW enabled_tranforms_by_event_view AS\n           SELECT transform_events.event_id, event_name, transform_uuid, transform_def\n           FROM enabled_transform_view\n           INNER JOIN transform_events\n              ON transform_events.transform_id=enabled_transform_view.transform_id\n           LEFT JOIN events\n              ON transform_events.event_id=events.event_id\n    ", 0, 0, 0);
                                      int64_t v59 = *(sqlite3 **)(a1 + 32);
                                      if (v58)
                                      {
                                        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                        if (v59)
                                        {
                                          if (!result) {
                                            return result;
                                          }
                                          uint64_t v60 = sqlite3_errmsg(v59);
                                          sub_1000E8728((uint64_t)v60, (uint64_t)v93);
                                        }
                                        else
                                        {
                                          if (!result) {
                                            return result;
                                          }
                                          sub_1000E86C8();
                                        }
                                      }
                                      else
                                      {
                                        int v61 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW enabled_event_names_view AS\n           SELECT DISTINCT event_name\n           FROM enabled_tranforms_by_event_view\n           ORDER BY event_name\n    ", 0, 0, 0);
                                        uint64_t v62 = *(sqlite3 **)(a1 + 32);
                                        if (v61)
                                        {
                                          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                          if (v62)
                                          {
                                            if (!result) {
                                              return result;
                                            }
                                            sqlite3_int64 v63 = sqlite3_errmsg(v62);
                                            sub_1000E8690((uint64_t)v63, (uint64_t)v93);
                                          }
                                          else
                                          {
                                            if (!result) {
                                              return result;
                                            }
                                            sub_1000E8630();
                                          }
                                        }
                                        else
                                        {
                                          int v64 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW enabled_external_configs_view AS\n           SELECT external_config_kind, external_config_def\n           FROM eligible_external_configs_view\n           LEFT JOIN disabled_external_configs\n              ON eligible_external_configs_view.external_config_id=disabled_external_configs.external_config_id\n           WHERE disabled_external_configs.external_config_id IS NULL\n    ", 0, 0, 0);
                                          char v65 = *(sqlite3 **)(a1 + 32);
                                          if (v64)
                                          {
                                            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                            if (v65)
                                            {
                                              if (!result) {
                                                return result;
                                              }
                                              unint64_t v66 = sqlite3_errmsg(v65);
                                              sub_1000E85F8((uint64_t)v66, (uint64_t)v93);
                                            }
                                            else
                                            {
                                              if (!result) {
                                                return result;
                                              }
                                              sub_1000E8598();
                                            }
                                          }
                                          else
                                          {
                                            int v67 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index1 ON disabled_transforms(transform_id);",
                                                    0,
                                                    0,
                                                    0);
                                            char v68 = *(sqlite3 **)(a1 + 32);
                                            if (v67)
                                            {
                                              BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                              if (v68)
                                              {
                                                if (!result) {
                                                  return result;
                                                }
                                                unint64_t v69 = sqlite3_errmsg(v68);
                                                sub_1000E8560((uint64_t)v69, (uint64_t)v93);
                                              }
                                              else
                                              {
                                                if (!result) {
                                                  return result;
                                                }
                                                sub_1000E8500();
                                              }
                                            }
                                            else
                                            {
                                              int v70 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index2 ON transform_events(transform_id);",
                                                      0,
                                                      0,
                                                      0);
                                              v71 = *(sqlite3 **)(a1 + 32);
                                              if (v70)
                                              {
                                                BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                if (v71)
                                                {
                                                  if (!result) {
                                                    return result;
                                                  }
                                                  uint64_t v72 = sqlite3_errmsg(v71);
                                                  sub_1000E84C8((uint64_t)v72, (uint64_t)v93);
                                                }
                                                else
                                                {
                                                  if (!result) {
                                                    return result;
                                                  }
                                                  sub_1000E8468();
                                                }
                                              }
                                              else
                                              {
                                                int v73 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index3 ON disabled_external_configs(external_config_id);",
                                                        0,
                                                        0,
                                                        0);
                                                v74 = *(sqlite3 **)(a1 + 32);
                                                if (v73)
                                                {
                                                  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                  if (v74)
                                                  {
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    char v75 = sqlite3_errmsg(v74);
                                                    sub_1000E8430((uint64_t)v75, (uint64_t)v93);
                                                  }
                                                  else
                                                  {
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    sub_1000E83D0();
                                                  }
                                                }
                                                else
                                                {
                                                  int v76 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index4 ON transforms(transform_id);",
                                                          0,
                                                          0,
                                                          0);
                                                  char v77 = *(sqlite3 **)(a1 + 32);
                                                  if (v76)
                                                  {
                                                    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                    if (v77)
                                                    {
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      v78 = sqlite3_errmsg(v77);
                                                      sub_1000E8398((uint64_t)v78, (uint64_t)v93);
                                                    }
                                                    else
                                                    {
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      sub_1000E8338();
                                                    }
                                                  }
                                                  else
                                                  {
                                                    int v79 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index5 ON config_transforms(transform_id);",
                                                            0,
                                                            0,
                                                            0);
                                                    unint64_t v80 = *(sqlite3 **)(a1 + 32);
                                                    if (v79)
                                                    {
                                                      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                      if (v80)
                                                      {
                                                        if (!result) {
                                                          return result;
                                                        }
                                                        v81 = sqlite3_errmsg(v80);
                                                        sub_1000E8300((uint64_t)v81, (uint64_t)v93);
                                                      }
                                                      else
                                                      {
                                                        if (!result) {
                                                          return result;
                                                        }
                                                        sub_1000E82A0();
                                                      }
                                                    }
                                                    else
                                                    {
                                                      int v82 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index6 ON transform_events(event_id);",
                                                              0,
                                                              0,
                                                              0);
                                                      int v83 = *(sqlite3 **)(a1 + 32);
                                                      if (v82)
                                                      {
                                                        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                        if (v83)
                                                        {
                                                          if (!result) {
                                                            return result;
                                                          }
                                                          char v84 = sqlite3_errmsg(v83);
                                                          sub_1000E8268((uint64_t)v84, (uint64_t)v93);
                                                        }
                                                        else
                                                        {
                                                          if (!result) {
                                                            return result;
                                                          }
                                                          sub_1000E8208();
                                                        }
                                                      }
                                                      else
                                                      {
                                                        int v85 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index7 ON events(event_id);",
                                                                0,
                                                                0,
                                                                0);
                                                        v86 = *(sqlite3 **)(a1 + 32);
                                                        if (v85)
                                                        {
                                                          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                          if (v86)
                                                          {
                                                            if (!result) {
                                                              return result;
                                                            }
                                                            uint64_t v87 = sqlite3_errmsg(v86);
                                                            sub_1000E81D0((uint64_t)v87, (uint64_t)v93);
                                                          }
                                                          else
                                                          {
                                                            if (!result) {
                                                              return result;
                                                            }
                                                            sub_1000E8170();
                                                          }
                                                        }
                                                        else
                                                        {
                                                          int v88 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index8 ON eventdefs(eventdef_id);",
                                                                  0,
                                                                  0,
                                                                  0);
                                                          v89 = *(sqlite3 **)(a1 + 32);
                                                          if (v88)
                                                          {
                                                            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                            if (v89)
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              v90 = sqlite3_errmsg(v89);
                                                              sub_1000E8138((uint64_t)v90, (uint64_t)v93);
                                                            }
                                                            else
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              sub_1000E80D8();
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index9 ON config_eventdefs(eventdef_id);",
                                                                    0,
                                                                    0,
                                                                    0))
                                                              return sub_100064E08(a1, 1);
                                                            v91 = *(sqlite3 **)(a1 + 32);
                                                            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                                                            if (v91)
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              unsigned __int8 v92 = sqlite3_errmsg(v91);
                                                              sub_1000E80A0((uint64_t)v92, (uint64_t)v93);
                                                            }
                                                            else
                                                            {
                                                              if (!result) {
                                                                return result;
                                                              }
                                                              sub_1000E8040();
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1000E0620(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E062C(uint64_t a1)
{
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] DATABASE INITIALIZATION: modifying for V2 schema", v15, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         ALTER TABLE transforms ADD COLUMN transform_sampling DOUBLE DEFAULT 100.00\n    ", 0, 0, 0);
  long long v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000E9270((uint64_t)v6, (uint64_t)v15);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000E9210();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW eligible_transform_view; CREATE VIEW eligible_transform_view AS\n"
           "           SELECT transforms.transform_id, transform_uuid, transform_def, transform_enableIf, transform_sampl"
           "ing\n"
           "           FROM transforms\n"
           "           INNER JOIN config_transforms\n"
           "                ON config_transforms.transform_id=transforms.transform_id\n"
           "           WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ",
           0,
           0,
           0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        long long v9 = sqlite3_errmsg(v8);
        sub_1000E8A20((uint64_t)v9, (uint64_t)v15);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000E89C0();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_transform_view; CREATE VIEW enabled_transform_view AS\n"
              "           SELECT eligible_transform_view.transform_id AS transform_id, transform_uuid, transform_def, tra"
              "nsform_sampling\n"
              "           FROM eligible_transform_view\n"
              "           LEFT JOIN disabled_transforms\n"
              "              ON eligible_transform_view.transform_id=disabled_transforms.transform_id\n"
              "           WHERE disabled_transforms.transform_id IS NULL\n"
              "    ",
              0,
              0,
              0);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          long long v12 = sqlite3_errmsg(v11);
          sub_1000E8858((uint64_t)v12, (uint64_t)v15);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000E87F8();
        }
      }
      else
      {
        if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_tranforms_by_event_view; CREATE VIEW enabled_tranforms_by_event_view AS\n"
                "           SELECT transform_events.event_id, event_name, transform_uuid, transform_def, transform_sampli"
                "ng\n"
                "           FROM enabled_transform_view\n"
                "           INNER JOIN transform_events\n"
                "              ON transform_events.transform_id=enabled_transform_view.transform_id\n"
                "           LEFT JOIN events\n"
                "              ON transform_events.event_id=events.event_id\n"
                "    ",
                0,
                0,
                0))
          return sub_100064E08(a1, 2);
        int v13 = *(sqlite3 **)(a1 + 32);
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v13)
        {
          if (!result) {
            return result;
          }
          long long v14 = sqlite3_errmsg(v13);
          sub_1000E8728((uint64_t)v14, (uint64_t)v15);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000E86C8();
        }
      }
    }
  }
  return 0;
}

void sub_1000E0870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E087C(uint64_t a1)
{
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)sqlite3_int64 v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] DATABASE INITIALIZATION: modifying for V3 schema", v6, 2u);
  }
  if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         ALTER TABLE disabled_transforms ADD COLUMN disable_reason STRING\n    ", 0, 0, 0))return sub_100064E08(a1, 3); {
  int v3 = *(sqlite3 **)(a1 + 32);
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      sqlite3_int64 v5 = sqlite3_errmsg(v3);
      sub_1000E9308((uint64_t)v5, (uint64_t)v6);
      return 0;
    }
  }
  else if (result)
  {
    sub_1000E92A8();
    return 0;
  }
  return result;
}

void sub_1000E0998(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E09A4(uint64_t a1)
{
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] DATABASE INITIALIZATION: modifying for V4 schema", v18, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE modify_eventdefs\n         (\n          modify_eventdef_id INTEGER PRIMARY KEY ASC,\n          modify_event_uuid STRING UNIQUE,\n          modify_event_name STRING,\n          modify_event_type STRING,\n          modify_event_defType STRING,\n          modify_event_config STRING\n         )\n    ", 0, 0, 0);
  long long v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      sqlite3_int64 v6 = sqlite3_errmsg(v4);
      sub_1000E9600((uint64_t)v6, (uint64_t)v18);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000E95A0();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE config_modify_eventdefs\n         (\n          config_id INTEGER,\n          modify_eventdef_id INTEGER\n         )\n    ", 0, 0, 0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        long long v9 = sqlite3_errmsg(v8);
        sub_1000E9568((uint64_t)v9, (uint64_t)v18);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000E9508();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW eligible_modify_eventdef_view AS\n           SELECT modify_eventdefs.modify_eventdef_id, modify_event_uuid, modify_event_name, modify_event_type, modify_event_defType, modify_event_config\n           FROM modify_eventdefs\n           INNER JOIN config_modify_eventdefs\n                ON config_modify_eventdefs.modify_eventdef_id=modify_eventdefs.modify_eventdef_id\n           WHERE config_modify_eventdefs.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ", 0, 0, 0);
      BOOL v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          long long v12 = sqlite3_errmsg(v11);
          sub_1000E94D0((uint64_t)v12, (uint64_t)v18);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000E9470();
        }
      }
      else
      {
        int v13 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index10 ON modify_eventdefs(modify_eventdef_id);",
                0,
                0,
                0);
        long long v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000E9438((uint64_t)v15, (uint64_t)v18);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000E93D8();
          }
        }
        else
        {
          if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index11 ON config_modify_eventdefs(modify_eventdef_id);",
                  0,
                  0,
                  0))
            return sub_100064E08(a1, 4);
          int v16 = *(sqlite3 **)(a1 + 32);
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v16)
          {
            if (!result) {
              return result;
            }
            unint64_t v17 = sqlite3_errmsg(v16);
            sub_1000E93A0((uint64_t)v17, (uint64_t)v18);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000E9340();
          }
        }
      }
    }
  }
  return 0;
}

void sub_1000E0C4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E0C58(uint64_t a1)
{
  int v2 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE sampling\n         (\n          sampling_id INTEGER PRIMARY KEY ASC,\n          sampling_def STRING UNIQUE NOT NULL,\n          sampling_def_perc DOUBLE NOT NULL DEFAULT 100.0,\n          sampled_out INTEGER NOT NULL DEFAULT 0,\n          disable_sampling INTEGER NOT NULL DEFAULT 0\n         )\n    ", 0, 0, 0);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        sqlite3_int64 v5 = sqlite3_errmsg(v3);
        sub_1000EAE58((uint64_t)v5, (uint64_t)v166);
      }
    }
    else if (v4)
    {
      sub_1000EADF8();
    }
    return 0;
  }
  int v6 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "ALTER TABLE transforms ADD COLUMN sampling_id INTEGER REFERENCES sampling(sampling_id)", 0, 0, 0);
  int v7 = *(sqlite3 **)(a1 + 32);
  if (v6)
  {
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        long long v9 = sqlite3_errmsg(v7);
        sub_1000EADC0((uint64_t)v9, (uint64_t)v166);
      }
    }
    else if (v8)
    {
      sub_1000EAD60();
    }
    return 0;
  }
  int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "ALTER TABLE external_configs ADD COLUMN sampling_id INTEGER REFERENCES sampling(sampling_id)", 0, 0, 0);
  BOOL v11 = *(sqlite3 **)(a1 + 32);
  if (v10)
  {
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v12)
      {
        int v13 = sqlite3_errmsg(v11);
        sub_1000EAD28((uint64_t)v13, (uint64_t)v166);
      }
    }
    else if (v12)
    {
      sub_1000EACC8();
    }
    return 0;
  }
  int v14 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n                            INSERT INTO sampling(sampling_def, sampling_def_perc, sampled_out)\n                            SELECT transform_enableIf, transform_sampling, CASE WHEN (disabled_transforms.transform_id IS NOT NULL AND disable_reason=\"sampled\") THEN 1 ELSE 0 END AS sampled_out\n                            FROM transforms\n                            LEFT JOIN disabled_transforms\n                            ON transforms.transform_id=disabled_transforms.transform_id\n                            WHERE transform_enableIf IS NOT NULL\n                            GROUP BY transform_enableIf;\n"
          "    ",
          0,
          0,
          0);
  int v15 = *(sqlite3 **)(a1 + 32);
  if (v14)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v16)
      {
        unint64_t v17 = sqlite3_errmsg(v15);
        sub_1000EAC90((uint64_t)v17, (uint64_t)v166);
      }
    }
    else if (v16)
    {
      sub_1000EAC30();
    }
    return 0;
  }
  int v18 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n                            INSERT INTO sampling(sampling_def, sampled_out)\n                            SELECT external_config_enableIf, CASE WHEN disabled_external_configs.external_config_id IS NOT NULL THEN 1 ELSE 0 END AS sampled_out\n                            FROM external_configs\n                            LEFT JOIN disabled_external_configs\n                            ON external_configs.external_config_id=disabled_external_configs.external_config_id\n                            WHERE external_config_enableIf IS NOT NULL\n                            GROUP BY external_config_enableIf;\n"
          "    ",
          0,
          0,
          0);
  int v19 = *(sqlite3 **)(a1 + 32);
  if (v18)
  {
    BOOL v20 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v20)
      {
        uint64_t v21 = sqlite3_errmsg(v19);
        sub_1000EABF8((uint64_t)v21, (uint64_t)v166);
      }
    }
    else if (v20)
    {
      sub_1000EAB98();
    }
    return 0;
  }
  int v22 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n                            UPDATE transforms\n                            SET sampling_id=sampling.sampling_id\n                            FROM sampling\n                            WHERE transforms.transform_enableIf=sampling.sampling_def;\n"
          "    ",
          0,
          0,
          0);
  int v23 = *(sqlite3 **)(a1 + 32);
  if (v22)
  {
    BOOL v24 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v23)
    {
      if (v24)
      {
        int v25 = sqlite3_errmsg(v23);
        sub_1000EAB60((uint64_t)v25, (uint64_t)v166);
      }
    }
    else if (v24)
    {
      sub_1000EAB00();
    }
    return 0;
  }
  int v26 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n                            UPDATE external_configs\n                            SET sampling_id=sampling.sampling_id\n                            FROM sampling\n                            WHERE external_configs.external_config_enableIf=sampling.sampling_def;\n"
          "    ",
          0,
          0,
          0);
  uint64_t v27 = *(sqlite3 **)(a1 + 32);
  if (v26)
  {
    BOOL v28 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v27)
    {
      if (v28)
      {
        BOOL v29 = sqlite3_errmsg(v27);
        sub_1000EAAC8((uint64_t)v29, (uint64_t)v166);
      }
    }
    else if (v28)
    {
      sub_1000EAA68();
    }
    return 0;
  }
  int v30 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW composed_transforms_view AS\n           SELECT transforms.*, sampling.*, CASE WHEN (transforms.sampling_id IS NULL OR disable_sampling=1) THEN 100.0 ELSE sampling_def_perc END as derived_sampling_perc\n           FROM transforms\n           LEFT JOIN sampling\n                ON transforms.sampling_id=sampling.sampling_id\n    ", 0, 0, 0);
  int v31 = *(sqlite3 **)(a1 + 32);
  if (v30)
  {
    BOOL v32 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v31)
    {
      if (v32)
      {
        std::string::size_type v33 = sqlite3_errmsg(v31);
        sub_1000EAA30((uint64_t)v33, (uint64_t)v166);
      }
    }
    else if (v32)
    {
      sub_1000EA9D0();
    }
    return 0;
  }
  int v34 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           DROP VIEW eligible_transform_view; CREATE VIEW eligible_transforms_view AS\n"
          "           SELECT composed_transforms_view.*\n"
          "           FROM composed_transforms_view\n"
          "           INNER JOIN config_transforms\n"
          "                ON composed_transforms_view.transform_id=config_transforms.transform_id\n"
          "           WHERE config_transforms.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ",
          0,
          0,
          0);
  __int16 v35 = *(sqlite3 **)(a1 + 32);
  if (v34)
  {
    BOOL v36 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v35)
    {
      if (v36)
      {
        int v37 = sqlite3_errmsg(v35);
        sub_1000EA998((uint64_t)v37, (uint64_t)v166);
      }
    }
    else if (v36)
    {
      sub_1000EA938();
    }
    return 0;
  }
  int v38 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           DROP VIEW disabled_transform_view; CREATE VIEW disabled_transforms_view AS\n"
          "           SELECT composed_transforms_view.*\n"
          "           FROM composed_transforms_view\n"
          "           INNER JOIN disabled_transforms\n"
          "              ON composed_transforms_view.transform_id=disabled_transforms.transform_id\n"
          "    ",
          0,
          0,
          0);
  __int16 v39 = *(sqlite3 **)(a1 + 32);
  if (v38)
  {
    BOOL v40 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v39)
    {
      if (v40)
      {
        std::string v41 = sqlite3_errmsg(v39);
        sub_1000EA900((uint64_t)v41, (uint64_t)v166);
      }
    }
    else if (v40)
    {
      sub_1000EA8A0();
    }
    return 0;
  }
  int v42 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW sampled_out_transforms_view AS\n           SELECT *\n           FROM composed_transforms_view\n           WHERE (sampled_out=1 AND disable_sampling=0)\n    ", 0, 0, 0);
  int v43 = *(sqlite3 **)(a1 + 32);
  if (v42)
  {
    BOOL v44 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v43)
    {
      if (v44)
      {
        std::string v45 = sqlite3_errmsg(v43);
        sub_1000EA868((uint64_t)v45, (uint64_t)v166);
      }
    }
    else if (v44)
    {
      sub_1000EA808();
    }
    return 0;
  }
  int v46 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW usable_transforms_view AS\n           SELECT composed_transforms_view.*\n           FROM composed_transforms_view\n           LEFT JOIN disabled_transforms\n              ON composed_transforms_view.transform_id=disabled_transforms.transform_id\n           WHERE disabled_transforms.transform_id IS NULL AND (sampling_id IS NULL OR sampled_out=0 OR disable_sampling=1)\n    ", 0, 0, 0);
  long long v47 = *(sqlite3 **)(a1 + 32);
  if (v46)
  {
    BOOL v48 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v47)
    {
      if (v48)
      {
        int v49 = sqlite3_errmsg(v47);
        sub_1000EA7D0((uint64_t)v49, (uint64_t)v166);
      }
    }
    else if (v48)
    {
      sub_1000EA770();
    }
    return 0;
  }
  int v50 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_transform_view; CREATE VIEW enabled_transforms_view AS\n"
          "           SELECT eligible_transforms_view.*\n"
          "           FROM eligible_transforms_view\n"
          "           INNER JOIN usable_transforms_view\n"
          "              ON usable_transforms_view.transform_id=eligible_transforms_view.transform_id\n"
          "    ",
          0,
          0,
          0);
  BOOL v51 = *(sqlite3 **)(a1 + 32);
  if (v50)
  {
    BOOL v52 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v51)
    {
      if (v52)
      {
        char v53 = sqlite3_errmsg(v51);
        sub_1000EA738((uint64_t)v53, (uint64_t)v166);
      }
    }
    else if (v52)
    {
      sub_1000EA6D8();
    }
    return 0;
  }
  int v54 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_tranforms_by_event_view; CREATE VIEW enabled_transforms_by_event_view AS\n"
          "           SELECT events.*, enabled_transforms_view.*\n"
          "           FROM enabled_transforms_view\n"
          "           INNER JOIN transform_events\n"
          "              ON enabled_transforms_view.transform_id=transform_events.transform_id\n"
          "           LEFT JOIN events\n"
          "              ON transform_events.event_id=events.event_id\n"
          "    ",
          0,
          0,
          0);
  int v55 = *(sqlite3 **)(a1 + 32);
  if (v54)
  {
    BOOL v56 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v55)
    {
      if (v56)
      {
        BOOL v57 = sqlite3_errmsg(v55);
        sub_1000EA6A0((uint64_t)v57, (uint64_t)v166);
      }
    }
    else if (v56)
    {
      sub_1000EA640();
    }
    return 0;
  }
  int v58 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_event_names_view; CREATE VIEW enabled_event_names_view AS\n"
          "           SELECT DISTINCT event_name\n"
          "           FROM enabled_transforms_by_event_view\n"
          "           ORDER BY event_name\n"
          "    ",
          0,
          0,
          0);
  int64_t v59 = *(sqlite3 **)(a1 + 32);
  if (v58)
  {
    BOOL v60 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v59)
    {
      if (v60)
      {
        int v61 = sqlite3_errmsg(v59);
        sub_1000EA608((uint64_t)v61, (uint64_t)v166);
      }
    }
    else if (v60)
    {
      sub_1000EA5A8();
    }
    return 0;
  }
  int v62 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW composed_external_configs_view AS\n           SELECT external_configs.*, sampling.*\n           FROM external_configs\n           LEFT JOIN sampling\n                ON external_configs.sampling_id=sampling.sampling_id\n    ", 0, 0, 0);
  sqlite3_int64 v63 = *(sqlite3 **)(a1 + 32);
  if (v62)
  {
    BOOL v64 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v63)
    {
      if (v64)
      {
        char v65 = sqlite3_errmsg(v63);
        sub_1000EA570((uint64_t)v65, (uint64_t)v166);
      }
    }
    else if (v64)
    {
      sub_1000EA510();
    }
    return 0;
  }
  int v66 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           DROP VIEW eligible_external_configs_view; CREATE VIEW eligible_external_configs_view AS\n"
          "           SELECT composed_external_configs_view.*\n"
          "           FROM composed_external_configs_view\n"
          "           INNER JOIN config_external_configs\n"
          "                ON composed_external_configs_view.external_config_id=config_external_configs.external_config_i"
          "d\n"
          "           WHERE config_external_configs.config_id IN (SELECT config_id FROM configs WHERE config_enabled=1 LIMIT 1)\n    ",
          0,
          0,
          0);
  int v67 = *(sqlite3 **)(a1 + 32);
  if (v66)
  {
    BOOL v68 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v67)
    {
      if (v68)
      {
        unint64_t v69 = sqlite3_errmsg(v67);
        sub_1000EA4D8((uint64_t)v69, (uint64_t)v166);
      }
    }
    else if (v68)
    {
      sub_1000EA478();
    }
    return 0;
  }
  int v70 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW disabled_external_configs_view AS\n           SELECT composed_external_configs_view.*\n           FROM composed_external_configs_view\n           INNER JOIN disabled_external_configs\n              ON composed_external_configs_view.external_config_id=disabled_external_configs.external_config_id\n    ", 0, 0, 0);
  v71 = *(sqlite3 **)(a1 + 32);
  if (v70)
  {
    BOOL v72 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v71)
    {
      if (v72)
      {
        int v73 = sqlite3_errmsg(v71);
        sub_1000EA440((uint64_t)v73, (uint64_t)v166);
      }
    }
    else if (v72)
    {
      sub_1000EA3E0();
    }
    return 0;
  }
  int v74 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n           CREATE VIEW sampled_out_external_configs_view AS\n           SELECT *\n           FROM composed_external_configs_view\n           WHERE (sampled_out=1 AND disable_sampling=0)\n    ", 0, 0, 0);
  char v75 = *(sqlite3 **)(a1 + 32);
  if (v74)
  {
    BOOL v76 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v75)
    {
      if (v76)
      {
        char v77 = sqlite3_errmsg(v75);
        sub_1000EA3A8((uint64_t)v77, (uint64_t)v166);
      }
    }
    else if (v76)
    {
      sub_1000EA348();
    }
    return 0;
  }
  int v78 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n          CREATE VIEW usable_external_configs_view AS\n          SELECT composed_external_configs_view.*\n          FROM composed_external_configs_view\n          LEFT JOIN disabled_external_configs\n             ON composed_external_configs_view.external_config_id=disabled_external_configs.external_config_id\n          WHERE disabled_external_configs.external_config_id IS NULL AND (sampling_id IS NULL OR sampled_out=0 OR disable_sampling=1)\n    ", 0, 0, 0);
  int v79 = *(sqlite3 **)(a1 + 32);
  if (v78)
  {
    BOOL v80 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v79)
    {
      if (v80)
      {
        v81 = sqlite3_errmsg(v79);
        sub_1000EA310((uint64_t)v81, (uint64_t)v166);
      }
    }
    else if (v80)
    {
      sub_1000EA2B0();
    }
    return 0;
  }
  int v82 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW enabled_external_configs_view; CREATE VIEW enabled_external_configs_view AS\n"
          "           SELECT eligible_external_configs_view.*\n"
          "           FROM eligible_external_configs_view\n"
          "           INNER JOIN usable_external_configs_view\n"
          "              ON eligible_external_configs_view.external_config_id=usable_external_configs_view.external_config_id\n    ",
          0,
          0,
          0);
  int v83 = *(sqlite3 **)(a1 + 32);
  if (v82)
  {
    BOOL v84 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v83)
    {
      if (v84)
      {
        int v85 = sqlite3_errmsg(v83);
        sub_1000EA278((uint64_t)v85, (uint64_t)v166);
      }
    }
    else if (v84)
    {
      sub_1000EA218();
    }
    return 0;
  }
  int v86 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "ALTER TABLE transforms DROP COLUMN transform_enableIf; ALTER TABLE transforms DROP COLUMN transform_sampling",
          0,
          0,
          0);
  uint64_t v87 = *(sqlite3 **)(a1 + 32);
  if (v86)
  {
    BOOL v88 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v87)
    {
      if (v88)
      {
        v89 = sqlite3_errmsg(v87);
        sub_1000EA1E0((uint64_t)v89, (uint64_t)v166);
      }
    }
    else if (v88)
    {
      sub_1000EA180();
    }
    return 0;
  }
  int v90 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "ALTER TABLE external_configs DROP COLUMN external_config_enableIf", 0, 0, 0);
  v91 = *(sqlite3 **)(a1 + 32);
  if (v90)
  {
    BOOL v92 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v91)
    {
      if (v92)
      {
        v93 = sqlite3_errmsg(v91);
        sub_1000EA148((uint64_t)v93, (uint64_t)v166);
      }
    }
    else if (v92)
    {
      sub_1000EA0E8();
    }
    return 0;
  }
  int v94 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_sampling_sampled_out_disable_sampling ON sampling(sampled_out, disable_sampling)", 0, 0, 0);
  uint64_t v95 = *(sqlite3 **)(a1 + 32);
  if (v94)
  {
    BOOL v96 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v95)
    {
      if (v96)
      {
        v97 = sqlite3_errmsg(v95);
        sub_1000EA0B0((uint64_t)v97, (uint64_t)v166);
      }
    }
    else if (v96)
    {
      sub_1000EA050();
    }
    return 0;
  }
  int v98 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_transforms_sampling_id ON transforms(sampling_id)", 0, 0, 0);
  v99 = *(sqlite3 **)(a1 + 32);
  if (v98)
  {
    BOOL v100 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v99)
    {
      if (v100)
      {
        id v101 = sqlite3_errmsg(v99);
        sub_1000EA018((uint64_t)v101, (uint64_t)v166);
      }
    }
    else if (v100)
    {
      sub_1000E9FB8();
    }
    return 0;
  }
  int v102 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_external_configs_sampling_id ON external_configs(sampling_id)", 0, 0, 0);
  id v103 = *(sqlite3 **)(a1 + 32);
  if (v102)
  {
    BOOL v104 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v103)
    {
      if (v104)
      {
        v105 = sqlite3_errmsg(v103);
        sub_1000E9F80((uint64_t)v105, (uint64_t)v166);
      }
    }
    else if (v104)
    {
      sub_1000E9F20();
    }
    return 0;
  }
  int v106 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index1; CREATE INDEX IX_disabled_transforms_transform_id ON disabled_transforms(transform_id)",
           0,
           0,
           0);
  v107 = *(sqlite3 **)(a1 + 32);
  if (v106)
  {
    BOOL v108 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v107)
    {
      if (v108)
      {
        v109 = sqlite3_errmsg(v107);
        sub_1000E9EE8((uint64_t)v109, (uint64_t)v166);
      }
    }
    else if (v108)
    {
      sub_1000E9E88();
    }
    return 0;
  }
  int v110 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index2; CREATE INDEX IX_transform_events_transform_id ON transform_events(transform_id)",
           0,
           0,
           0);
  v111 = *(sqlite3 **)(a1 + 32);
  if (v110)
  {
    BOOL v112 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v111)
    {
      if (v112)
      {
        v113 = sqlite3_errmsg(v111);
        sub_1000E9E50((uint64_t)v113, (uint64_t)v166);
      }
    }
    else if (v112)
    {
      sub_1000E9DF0();
    }
    return 0;
  }
  int v114 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index3; CREATE INDEX IX_disabled_external_configs_external_config_id ON disabled_external_configs("
           "external_config_id)",
           0,
           0,
           0);
  v115 = *(sqlite3 **)(a1 + 32);
  if (v114)
  {
    BOOL v116 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v115)
    {
      if (v116)
      {
        v117 = sqlite3_errmsg(v115);
        sub_1000E9DB8((uint64_t)v117, (uint64_t)v166);
      }
    }
    else if (v116)
    {
      sub_1000E9D58();
    }
    return 0;
  }
  int v118 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index4", 0, 0, 0);
  unint64_t v119 = *(sqlite3 **)(a1 + 32);
  if (v118)
  {
    BOOL v120 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v119)
    {
      if (v120)
      {
        v121 = sqlite3_errmsg(v119);
        sub_1000E9D20((uint64_t)v121, (uint64_t)v166);
      }
    }
    else if (v120)
    {
      sub_1000E9CC0();
    }
    return 0;
  }
  int v122 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index5; CREATE INDEX IX_config_transforms_transform_id ON config_transforms(transform_id)",
           0,
           0,
           0);
  v123 = *(sqlite3 **)(a1 + 32);
  if (v122)
  {
    BOOL v124 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v123)
    {
      if (v124)
      {
        v125 = sqlite3_errmsg(v123);
        sub_1000E9C88((uint64_t)v125, (uint64_t)v166);
      }
    }
    else if (v124)
    {
      sub_1000E9C28();
    }
    return 0;
  }
  int v126 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_config_transforms_config_id_transform_id ON config_transforms(config_id, transform_id)", 0, 0, 0);
  v127 = *(sqlite3 **)(a1 + 32);
  if (v126)
  {
    BOOL v128 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v127)
    {
      if (v128)
      {
        v129 = sqlite3_errmsg(v127);
        sub_1000E9BF0((uint64_t)v129, (uint64_t)v166);
      }
    }
    else if (v128)
    {
      sub_1000E9B90();
    }
    return 0;
  }
  int v130 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index6; CREATE INDEX IX_transform_events_event_id ON transform_events(event_id)",
           0,
           0,
           0);
  v131 = *(sqlite3 **)(a1 + 32);
  if (v130)
  {
    BOOL v132 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v131)
    {
      if (v132)
      {
        v133 = sqlite3_errmsg(v131);
        sub_1000E9B58((uint64_t)v133, (uint64_t)v166);
      }
    }
    else if (v132)
    {
      sub_1000E9AF8();
    }
    return 0;
  }
  int v134 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index7", 0, 0, 0);
  v135 = *(sqlite3 **)(a1 + 32);
  if (v134)
  {
    BOOL v136 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v135)
    {
      if (v136)
      {
        v137 = sqlite3_errmsg(v135);
        sub_1000E9AC0((uint64_t)v137, (uint64_t)v166);
      }
    }
    else if (v136)
    {
      sub_1000E9A60();
    }
    return 0;
  }
  int v138 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index8", 0, 0, 0);
  v139 = *(sqlite3 **)(a1 + 32);
  if (v138)
  {
    BOOL v140 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v139)
    {
      if (v140)
      {
        v141 = sqlite3_errmsg(v139);
        sub_1000E9A28((uint64_t)v141, (uint64_t)v166);
      }
    }
    else if (v140)
    {
      sub_1000E99C8();
    }
    return 0;
  }
  int v142 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index9; CREATE INDEX IX_config_eventdefs_eventdef_id ON config_eventdefs(eventdef_id)",
           0,
           0,
           0);
  v143 = *(sqlite3 **)(a1 + 32);
  if (v142)
  {
    BOOL v144 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v143)
    {
      if (v144)
      {
        v145 = sqlite3_errmsg(v143);
        sub_1000E9990((uint64_t)v145, (uint64_t)v166);
      }
    }
    else if (v144)
    {
      sub_1000E9930();
    }
    return 0;
  }
  int v146 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_config_eventdefs_config_id_eventdef_id ON config_eventdefs(config_id, eventdef_id)", 0, 0, 0);
  v147 = *(sqlite3 **)(a1 + 32);
  if (v146)
  {
    BOOL v148 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v147)
    {
      if (v148)
      {
        v149 = sqlite3_errmsg(v147);
        sub_1000E98F8((uint64_t)v149, (uint64_t)v166);
      }
    }
    else if (v148)
    {
      sub_1000E9898();
    }
    return 0;
  }
  int v150 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index10;", 0, 0, 0);
  uint64_t v151 = *(sqlite3 **)(a1 + 32);
  if (v150)
  {
    BOOL v152 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v151)
    {
      if (v152)
      {
        unint64_t v153 = sqlite3_errmsg(v151);
        sub_1000E9860((uint64_t)v153, (uint64_t)v166);
      }
    }
    else if (v152)
    {
      sub_1000E9800();
    }
    return 0;
  }
  int v154 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "DROP INDEX index11; CREATE INDEX IX_config_modify_eventdefs_modify_eventdef_id ON config_modify_eventdefs(mod"
           "ify_eventdef_id)",
           0,
           0,
           0);
  v155 = *(sqlite3 **)(a1 + 32);
  if (v154)
  {
    BOOL v156 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v155)
    {
      if (v156)
      {
        v157 = sqlite3_errmsg(v155);
        sub_1000E97C8((uint64_t)v157, (uint64_t)v166);
      }
    }
    else if (v156)
    {
      sub_1000E9768();
    }
    return 0;
  }
  int v158 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_config_modify_eventdefs_config_id_modify_eventdef_id ON config_modify_eventdefs(config_id, modify_eventdef_id)", 0, 0, 0);
  v159 = *(sqlite3 **)(a1 + 32);
  if (v158)
  {
    BOOL v160 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v159)
    {
      if (v160)
      {
        v161 = sqlite3_errmsg(v159);
        sub_1000E9730((uint64_t)v161, (uint64_t)v166);
      }
    }
    else if (v160)
    {
      sub_1000E96D0();
    }
    return 0;
  }
  if (sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_modify_eventdefs_modify_event_name ON modify_eventdefs(modify_event_name)", 0, 0, 0))
  {
    v162 = *(sqlite3 **)(a1 + 32);
    BOOL v163 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v162)
    {
      if (v163)
      {
        v164 = sqlite3_errmsg(v162);
        sub_1000E9698((uint64_t)v164, (uint64_t)v166);
      }
    }
    else if (v163)
    {
      sub_1000E9638();
    }
    return 0;
  }

  return sub_100064E08(a1, 5);
}

void sub_1000E1EE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E1EEC(uint64_t a1)
{
  int v2 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_configs_config_id ON configs(config_id)", 0, 0, 0);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        sqlite3_int64 v5 = sqlite3_errmsg(v3);
        sub_1000EB0B8((uint64_t)v5, (uint64_t)v18);
      }
    }
    else if (v4)
    {
      sub_1000EB058();
    }
    return 0;
  }
  int v6 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_config_transforms_transform_id_config_id ON config_transforms(transform_id, config_id)", 0, 0, 0);
  int v7 = *(sqlite3 **)(a1 + 32);
  if (v6)
  {
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        long long v9 = sqlite3_errmsg(v7);
        sub_1000EB020((uint64_t)v9, (uint64_t)v18);
      }
    }
    else if (v8)
    {
      sub_1000EAFC0();
    }
    return 0;
  }
  int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_configs_config_last_enabled ON configs(config_last_enabled)", 0, 0, 0);
  BOOL v11 = *(sqlite3 **)(a1 + 32);
  if (v10)
  {
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v12)
      {
        int v13 = sqlite3_errmsg(v11);
        sub_1000EAF88((uint64_t)v13, (uint64_t)v18);
      }
    }
    else if (v12)
    {
      sub_1000EAF28();
    }
    return 0;
  }
  if (sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW composed_transforms_view; CREATE VIEW composed_transforms_view AS\n"
         "                   SELECT transforms.*, sampling.*, CASE WHEN (transforms.sampling_id IS NULL OR disable_sampli"
         "ng=1) THEN 100.0 ELSE sampling_def_perc END as derived_sampling_perc, configs.config_last_enabled AS transform_"
         "started_aggregating_timestamp\n"
         "                   FROM transforms\n"
         "                   LEFT JOIN sampling\n"
         "                      ON transforms.sampling_id=sampling.sampling_id\n"
         "                   LEFT JOIN configs\n"
         "                      ON configs.config_id=(\n"
         "                          SELECT MIN(config_transforms.config_id)\n"
         "                          FROM config_transforms\n"
         "                          WHERE transforms.transform_id=config_transforms.transform_id\n"
         "                      )\n"
         "    ",
         0,
         0,
         0))
  {
    int v14 = *(sqlite3 **)(a1 + 32);
    BOOL v15 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v14)
    {
      if (v15)
      {
        BOOL v16 = sqlite3_errmsg(v14);
        sub_1000EAEF0((uint64_t)v16, (uint64_t)v18);
      }
    }
    else if (v15)
    {
      sub_1000EAE90();
    }
    return 0;
  }

  return sub_100064E08(a1, 6);
}

void sub_1000E2144(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000E2150(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] DATABASE INITIALIZATION: begin schema migration", (uint8_t *)&v12, 2u);
  }
  if (!sub_100064A50(a1))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
    if (!BYTE1(v13))
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (!v4)
      {
        if (!v5) {
          goto LABEL_29;
        }
        goto LABEL_59;
      }
      if (!v5) {
        goto LABEL_29;
      }
LABEL_53:
      BOOL v11 = sqlite3_errmsg(v4);
      sub_1000EB150((uint64_t)v11, (uint64_t)v14);
      goto LABEL_29;
    }
    if (!sub_1000DF9B4(a1)) {
      goto LABEL_28;
    }
    sub_10000B278((uint64_t)&v12);
    sub_10000B128((uint64_t)&v12);
  }
  if (sub_100064A50(a1) != 1) {
    goto LABEL_8;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v6) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_1000E062C(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_8:
  if (sub_100064A50(a1) != 2) {
    goto LABEL_12;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v7) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_1000E087C(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_12:
  if (sub_100064A50(a1) != 3) {
    goto LABEL_16;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v8) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_1000E09A4(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_16:
  if (sub_100064A50(a1) != 4)
  {
LABEL_20:
    if (sub_100064A50(a1) != 5) {
      return sub_100064A50(a1) == 6;
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
    if (BYTE1(v13))
    {
      if (sub_1000E1EEC(a1))
      {
        sub_10000B278((uint64_t)&v12);
        sub_10000B128((uint64_t)&v12);
        return sub_100064A50(a1) == 6;
      }
      goto LABEL_28;
    }
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!v10) {
        goto LABEL_29;
      }
      goto LABEL_53;
    }
    if (!v10) {
      goto LABEL_29;
    }
LABEL_59:
    sub_1000EB0F0();
    goto LABEL_29;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v9) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v9) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (sub_1000E0C58(a1))
  {
    sub_10000B278((uint64_t)&v12);
    sub_10000B128((uint64_t)&v12);
    goto LABEL_20;
  }
LABEL_28:
  sub_10005A644((uint64_t)&v12);
LABEL_29:
  sub_10000B128((uint64_t)&v12);
  return 0;
}

void sub_1000E257C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000E2588()
{
  return 6;
}

void sub_1000E2590(long long *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xA8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *BOOL v6 = off_100159EA0;
  sub_1000D83A4(v6 + 3, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000106D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000E2628(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100159EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000E2648(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100159EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000E269C(uint64_t a1)
{
  return sub_1000D84BC(a1 + 24, (uint64_t)&off_100159B98);
}

sqlite3_stmt **sub_1000E26B0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  sub_1000650BC((sqlite3_stmt **)(v1 + 120), 0);

  return sub_1000650BC((sqlite3_stmt **)(v1 + 136), 0);
}

BOOL sub_1000E26F8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "SELECT 1 FROM configs WHERE config_uuid=?1;", 0, &v12);
  if (v12)
  {
    sub_100008A30(v2, &v12, 1, v1[1]);
    int v3 = sub_1000090A4(v2, &v12);
    BOOL v4 = v3 == 100;
    if ((v3 & 0xFFFFFFFE) != 0x64)
    {
      BOOL v5 = *(sqlite3 **)(v2 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000EB1E8((uint64_t)v7, (uint64_t)v13);
        }
      }
      else if (v6)
      {
        sub_1000EB188();
      }
    }
  }
  else
  {
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000EB1E8((uint64_t)v10, (uint64_t)v13);
      }
    }
    else if (v9)
    {
      sub_1000EB188();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v12, 0);
  return v4;
}

void sub_1000E2864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2888(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  BOOL v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v1, "UPDATE configs SET config_enabled=0;", 0, &v11);
  if (!v11)
  {
    BOOL v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000EB280((uint64_t)v6, (uint64_t)buf);
      }
    }
    else if (v5)
    {
      sub_1000EB220();
    }
    goto LABEL_16;
  }
  *(void *)long long buf = 0;
  if (sub_10000AAD0(v1, &v11, buf) != 101)
  {
    BOOL v7 = *(sqlite3 **)(v1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000EB318((uint64_t)v9, (uint64_t)buf);
      }
    }
    else if (v8)
    {
      sub_1000EB2B8();
    }
LABEL_16:
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] Deactivated all device configurations", buf, 2u);
  }
  uint64_t v3 = 1;
LABEL_17:
  sub_1000650BC(&v11, 0);
  return v3;
}

void sub_1000E2A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2A48(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  BOOL v24 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "UPDATE configs SET config_enabled=(config_uuid=?1);", 0, &v24);
  if (!v24)
  {
    BOOL v10 = *(sqlite3 **)(v2 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        unint64_t v12 = sqlite3_errmsg(v10);
        sub_1000EB3B0((uint64_t)v12, (uint64_t)buf);
      }
    }
    else if (v11)
    {
      sub_1000EB350();
    }
    goto LABEL_36;
  }
  uint64_t v23 = 0;
  uint64_t v4 = v1[1];
  uint64_t v3 = v1 + 1;
  sub_1000089E8(v2, &v24, 1, v4, &v23);
  if (sub_10000AAD0(v2, &v24, &v23) != 101)
  {
    unint64_t v13 = *(sqlite3 **)(v2 + 32);
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v14)
      {
        BOOL v15 = sqlite3_errmsg(v13);
        sub_1000EB688((uint64_t)v15, (uint64_t)buf);
      }
    }
    else if (v14)
    {
      sub_1000EB628();
    }
    goto LABEL_36;
  }
  sub_100064D6C(v2, "SELECT COUNT(*) FROM configs WHERE config_uuid=?1", 0, (sqlite3_stmt **)buf);
  BOOL v5 = *(sqlite3_stmt **)buf;
  *(void *)long long buf = 0;
  sub_1000650BC(&v24, v5);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v24)
  {
    BOOL v16 = *(sqlite3 **)(v2 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        int v18 = sqlite3_errmsg(v16);
        sub_1000EB448((uint64_t)v18, (uint64_t)buf);
      }
    }
    else if (v17)
    {
      sub_1000EB3E8();
    }
    goto LABEL_36;
  }
  sub_100008A30(v2, &v24, 1, *v3);
  if (sub_1000090A4(v2, &v24) != 100)
  {
    int v19 = *(sqlite3 **)(v2 + 32);
    BOOL v20 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v20)
      {
        uint64_t v21 = sqlite3_errmsg(v19);
        sub_1000EB5F0((uint64_t)v21, (uint64_t)buf);
      }
    }
    else if (v20)
    {
      sub_1000EB590();
    }
    goto LABEL_36;
  }
  sqlite3_int64 v6 = sub_100006A48(v2, &v24, 0);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000EB514();
    }
    goto LABEL_36;
  }
  if (v6 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
      sub_1000EB480();
    }
LABEL_36:
    uint64_t v9 = 0;
    goto LABEL_37;
  }
  BOOL v7 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = (void *)*v3;
    if (*(char *)(*v3 + 23) < 0) {
      BOOL v8 = (void *)*v8;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Config Store] Activated device configuration with uuid '%{public}s'", buf, 0xCu);
  }
  uint64_t v9 = 1;
LABEL_37:
  sub_1000650BC(&v24, 0);
  return v9;
}

void sub_1000E2D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

sqlite3_stmt **sub_1000E2DC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  BOOL v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v3, "SELECT config_header FROM configs WHERE config_enabled=1 LIMIT 1;", 0, &v20);
  if (v20)
  {
    int v4 = sub_1000090A4(v3, &v20);
    if (v4 == 100)
    {
      int v19 = (const char *)sub_1000090E4(v3, &v20, 0);
      if (v19)
      {
        _OWORD v22[2] = 0;
        sub_10000DD74(&v19, (uint64_t)&buf, 1, &v17);
        sub_10000DE9C(&buf);
        sub_100016EAC((uint64_t)&v17);
        char v9 = *(unsigned char *)a2;
        *(unsigned char *)a2 = v17;
        LOBYTE(v17) = v9;
        BOOL v10 = (uint64_t *)a2[1];
        a2[1] = v18;
        int v18 = v10;
        sub_100016EAC((uint64_t)a2);
        sub_100016EAC((uint64_t)&v17);
        sub_100016B28(&v18, v17);
        if (*(unsigned char *)a2 != 1)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
            sub_1000EB850();
          }
          LOBYTE(buf) = 0;
          v22[0] = 0;
          sub_100016EAC((uint64_t)&buf);
          sub_100016EAC((uint64_t)&buf);
          sub_100016EAC((uint64_t)&buf);
          char v11 = *(unsigned char *)a2;
          *(unsigned char *)a2 = buf;
          LOBYTE(buf) = v11;
          unint64_t v12 = (uint64_t *)a2[1];
          a2[1] = v22[0];
          v22[0] = v12;
          sub_100016EAC((uint64_t)a2);
          sub_100016EAC((uint64_t)&buf);
          sub_100016B28(v22, buf);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
      {
        sub_1000EB7F0();
      }
    }
    else if (v4 == 101)
    {
      BOOL v5 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Config Store] No activated config currently set", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      unint64_t v13 = *(sqlite3 **)(v3 + 32);
      BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v13)
      {
        if (v14)
        {
          BOOL v15 = sqlite3_errmsg(v13);
          sub_1000EB7B8((uint64_t)v15, (uint64_t)&buf);
        }
      }
      else if (v14)
      {
        sub_1000EB758();
      }
    }
  }
  else
  {
    sqlite3_int64 v6 = *(sqlite3 **)(v3 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000EB720((uint64_t)v8, (uint64_t)&buf);
      }
    }
    else if (v7)
    {
      sub_1000EB6C0();
    }
  }
  return sub_1000650BC(&v20, 0);
}

void sub_1000E30D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  sub_100016EAC((uint64_t)v4);
  sub_100016B28(v5, *v4);
  _Unwind_Resume(a1);
}

sqlite3_stmt **sub_1000E3150(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  char v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "INSERT INTO disabled_transforms (transform_id,disable_reason) VALUES ((SELECT transform_id FROM transforms WHERE transform_uuid=?1), \"budgeted\");",
    0,
    &v11);
  if (v11)
  {
    uint64_t v10 = 0;
    sub_1000089E8(v2, &v11, 1, v1[1], &v10);
    if (sub_10000AAD0(v2, &v11, &v10) != 101)
    {
      uint64_t v3 = *(sqlite3 **)(v2 + 32);
      BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v3)
      {
        if (v4)
        {
          BOOL v5 = sqlite3_errmsg(v3);
          sub_1000EB9A8((uint64_t)v5, (uint64_t)v12);
        }
      }
      else if (v4)
      {
        sub_1000EB948();
      }
    }
  }
  else
  {
    sqlite3_int64 v6 = *(sqlite3 **)(v2 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000EB910((uint64_t)v8, (uint64_t)v12);
      }
    }
    else if (v7)
    {
      sub_1000EB8B0();
    }
  }
  return sub_1000650BC(&v11, 0);
}

void sub_1000E32AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_1000E32D0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "SELECT transform_id FROM enabled_transforms_view WHERE transform_uuid=?1 LIMIT 1;", 0, &v12);
  if (v12)
  {
    sub_100008A30(v2, &v12, 1, v1[1]);
    int v3 = sub_1000090A4(v2, &v12);
    BOOL v4 = v3 == 100;
    if ((v3 & 0xFFFFFFFE) != 0x64)
    {
      BOOL v5 = *(sqlite3 **)(v2 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000EBAD8((uint64_t)v7, (uint64_t)v13);
        }
      }
      else if (v6)
      {
        sub_1000EBA78();
      }
    }
  }
  else
  {
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        uint64_t v10 = sqlite3_errmsg(v8);
        sub_1000EBA40((uint64_t)v10, (uint64_t)v13);
      }
    }
    else if (v9)
    {
      sub_1000EB9E0();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v12, 0);
  return v4;
}

void sub_1000E343C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000E3460(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (sqlite3_exec(*(sqlite3 **)(*v1 + 32), "DELETE FROM disabled_transforms WHERE (disable_reason=\"budgeted\" OR disable_reason IS NULL);",
         0,
         0,
         0))
  {
    int v3 = *(sqlite3 **)(v2 + 32);
    BOOL v4 = qword_10015EF60;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v5) {
        sub_1000EBB70(v3, v4);
      }
    }
    else if (v5)
    {
      sub_1000EBB10();
    }
  }
}

uint64_t sub_1000E34EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  unint64_t v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "UPDATE sampling SET disable_sampling=?1;", 0, &v13);
  if (!v13)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000EBC50((uint64_t)v8, (uint64_t)buf);
      }
    }
    else if (v7)
    {
      sub_1000EBBF0();
    }
    goto LABEL_16;
  }
  *(void *)uint64_t buf = **(unsigned __int8 **)(v1 + 8);
  sub_100064C88(v2, &v13, 1, (sqlite3_int64 *)buf);
  *(void *)uint64_t buf = 0;
  if (sub_10000AAD0(v2, &v13, buf) != 101)
  {
    BOOL v9 = *(sqlite3 **)(v2 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        char v11 = sqlite3_errmsg(v9);
        sub_1000EBCE8((uint64_t)v11, (uint64_t)buf);
      }
    }
    else if (v10)
    {
      sub_1000EBC88();
    }
LABEL_16:
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  int v3 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = **(unsigned __int8 **)(v1 + 8);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Config Store] Set disable sampling override to %{public}d", buf, 8u);
  }
  uint64_t v5 = 1;
LABEL_17:
  sub_1000650BC(&v13, 0);
  return v5;
}

void sub_1000E36BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_1000E36E0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  char v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v2, "SELECT COUNT(*) FROM enabled_event_names_view WHERE event_name=?1", 0, &v11);
  if (!v11)
  {
    int v4 = *(sqlite3 **)(v2 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000EBD80((uint64_t)v6, (uint64_t)v12);
      }
    }
    else if (v5)
    {
      sub_1000EBD20();
    }
    goto LABEL_14;
  }
  sub_100008A30(v2, &v11, 1, v1[1]);
  if (sub_1000090A4(v2, &v11) != 100)
  {
    BOOL v7 = *(sqlite3 **)(v2 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000EBE18((uint64_t)v9, (uint64_t)v12);
      }
    }
    else if (v8)
    {
      sub_1000EBDB8();
    }
LABEL_14:
    BOOL v3 = 1;
    goto LABEL_15;
  }
  BOOL v3 = (int)sub_100064D30(v2, &v11, 0) > 0;
LABEL_15:
  sub_1000650BC(&v11, 0);
  return v3;
}

void sub_1000E3854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3878(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[1];
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000EDE8(&v15, "com.apple.analyticsd.store-config");
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)*v1 + 16))(&v13);
  if ((_BYTE)v13)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000B150((uint64_t)&v16, (void *)(v2 + 32));
    if (BYTE1(v17))
    {
      BOOL v3 = (sqlite3_stmt *)sub_1000DAB64(v2, (uint64_t)&v13);
      if (v3)
      {
        BOOL v20 = v3;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        __int16 v12 = 0;
        uint64_t v4 = *v1;
        BOOL v5 = operator new(0x20uLL);
        *BOOL v5 = off_10015A090;
        v5[1] = &v12;
        void v5[2] = v2;
        void v5[3] = &v20;
        int v19 = v5;
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v4 + 24))(v4, buf);
        sub_1000E3EF4(buf);
        BOOL v7 = qword_10015EF60;
        if (v6)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Config Store] Config store complete!", buf, 2u);
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_FAULT)) {
            sub_1000EBF48();
          }
          sub_10005A644((uint64_t)&v16);
          sub_1000650E8(v2);
          sub_1000E2150(v2);
        }
        sub_1000E3F78(&v20);
        goto LABEL_21;
      }
      sub_10005A644((uint64_t)&v16);
    }
    else
    {
      BOOL v8 = *(sqlite3 **)(v2 + 32);
      BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v9)
        {
          BOOL v10 = sqlite3_errmsg(v8);
          sub_1000EBF10((uint64_t)v10, (uint64_t)&v20);
        }
      }
      else if (v9)
      {
        sub_1000EBEB0();
      }
    }
    uint64_t v6 = 0;
LABEL_21:
    sub_10000B128((uint64_t)&v16);
    goto LABEL_22;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
    sub_1000EBE50();
  }
  uint64_t v6 = 0;
LABEL_22:
  sub_100016EAC((uint64_t)&v13);
  sub_100016B28(&v14, v13);
  sub_10000EE20(&v15);
  return v6;
}

void sub_1000E3B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  BOOL v5 = va_arg(va2, uint64_t *);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  sub_10000B128((uint64_t)va3);
  sub_100016EAC((uint64_t)va);
  sub_100016B28((uint64_t **)va1, v3);
  sub_10000EE20((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_1000E3B98()
{
}

__n128 sub_1000E3BAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_10015A090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000E3C00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10015A090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000E3C38(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  v14[0] = *(unsigned char *)a3;
  unint64_t v15 = *(uint64_t **)(a3 + 8);
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  sub_100016EAC((uint64_t)v14);
  uint64_t v6 = *(_WORD **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  __int16 v8 = *v6 + 1;
  *uint64_t v6 = v8;
  if ((unsigned __int16)((v8 << 14) | ((unsigned __int16)(23593 * v8) >> 2)) > 0x28Fu)
  {
LABEL_2:
    switch(v5)
    {
      case 1:
        uint64_t v9 = sub_1000DE43C(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 2:
        uint64_t v9 = sub_1000DE7A4(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 3:
        uint64_t v9 = sub_1000DEB98(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 4:
        uint64_t v9 = sub_1000DEC28(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 5:
        uint64_t v9 = sub_1000DF01C(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 6:
        uint64_t v9 = sub_1000DF0AC(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 7:
        uint64_t v9 = sub_1000DF890(v7, *(sqlite3_int64 **)(a1 + 24), v14);
        goto LABEL_18;
      case 8:
        uint64_t v9 = sub_1000DF49C(v7, *(sqlite3_int64 **)(a1 + 24), v14);
LABEL_18:
        uint64_t v11 = v9;
        break;
      default:
        uint64_t v11 = 1;
        break;
    }
    goto LABEL_19;
  }
  if (!sqlite3_db_cacheflush(*(sqlite3 **)(v7 + 32)))
  {
    HIDWORD(v12) = 652835029 * **(unsigned __int16 **)(a1 + 8);
    LODWORD(v12) = HIDWORD(v12);
    if ((v12 >> 4) <= 0x20C49B) {
      sub_100027664(0);
    }
    goto LABEL_2;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_FAULT))
  {
    BOOL v10 = sqlite3_errmsg(*(sqlite3 **)(v7 + 32));
    sub_1000EBFB4((uint64_t)v10, (uint64_t)v16);
  }
  uint64_t v11 = 0;
LABEL_19:
  sub_100016EAC((uint64_t)v14);
  sub_100016B28(&v15, v14[0]);
  return v11;
}

void sub_1000E3E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
}

uint64_t sub_1000E3EA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000E3EE8()
{
}

void *sub_1000E3EF4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

sqlite3_stmt **sub_1000E3F78(sqlite3_stmt **a1)
{
  return a1;
}

void sub_1000E408C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  int v5 = (sqlite3_stmt **)(*v3 + 128);
  if (*v5
    || (sub_100064D6C(*v3, "SELECT transform_def, derived_sampling_perc FROM eligible_transforms_view WHERE transform_uuid=?1;",
          1,
          v17),
        uint64_t v6 = v17[0],
        v17[0] = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(v17, 0),
        *(void *)(v4 + 128)))
  {
    unint64_t v16 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v16, v5);
    sub_100008A30(v4, v5, 1, v3[1]);
    if (sub_1000090A4(v4, v5) == 100)
    {
      uint64_t v7 = (char *)sub_1000090E4(v4, v5, 0);
      sub_10000914C(v4, v5, 1);
      uint64_t v9 = v8;
      sub_100015438((void *)a2, v7);
      *(void *)(a2 + 24) = v9;
    }
    else
    {
      BOOL v10 = *(sqlite3 **)(v4 + 32);
      BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v11)
        {
          unint64_t v12 = sqlite3_errmsg(v10);
          sub_1000EC13C((uint64_t)v12, (uint64_t)v17);
        }
      }
      else if (v11)
      {
        sub_1000EC0DC();
      }
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    sub_100008C7C(&v16);
  }
  else
  {
    unint64_t v13 = *(sqlite3 **)(v4 + 32);
    BOOL v14 = qword_10015EF60;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v15) {
        sub_1000EC058(v13, v14);
      }
    }
    else if (v15)
    {
      sub_1000EBFF8();
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void sub_1000E4264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100008C7C((sqlite3_stmt **)va);
  _Unwind_Resume(a1);
}

double sub_1000E4284(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  long long v3 = v5;
  *(void *)(v2 + 16) = v6;
  *(_OWORD *)uint64_t v2 = v3;
  double result = v7;
  *(double *)(v2 + 24) = v7;
  return result;
}

BOOL sub_1000E4320(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT transform_def FROM enabled_transforms_view", 0, &v10);
  long long v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  long long v5 = **v1;
  if (!v5)
  {
    uint64_t v6 = *(sqlite3 **)(v2 + 32);
    double v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000EC1D4(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000EC174();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E4410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1;
    }
    else
    {
      BOOL v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: Event query weirdness: got a row but no definition? (all-enabled-transforms)", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      long long v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000EC2B4(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000EC254();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E454C(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_1000E455C(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT transform_def FROM disabled_transforms_view", 0, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  long long v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000EC394(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000EC334();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E464C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1;
    }
    else
    {
      BOOL v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: Event query weirdness: got a row but no definition? (all-disabled-transforms)", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      long long v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000EC474(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000EC414();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E4788(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_1000E4798(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT event_name FROM enabled_event_names_view", 0, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  long long v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000EC714(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000EC6B4();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E4888(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      return 1;
    }
    else
    {
      BOOL v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: Active-Event query weirdness: got a row but no definition? (all-active-events)", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      long long v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000EC7F4(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000EC794();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E49C4(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

uint64_t sub_1000E49D4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v7 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v1, "SELECT COUNT(*) FROM enabled_event_names_view", 0, &v7);
  if (!v7)
  {
    int v3 = *(sqlite3 **)(v1 + 32);
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        long long v5 = sqlite3_errmsg(v3);
        sub_1000EC8D4((uint64_t)v5, (uint64_t)v8);
      }
    }
    else if (v4)
    {
      sub_1000EC874();
    }
    goto LABEL_9;
  }
  if (sub_1000090A4(v1, &v7) != 100)
  {
LABEL_9:
    uint64_t v2 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = sub_100064D30(v1, &v7, 0);
LABEL_10:
  sub_1000650BC(&v7, 0);
  return v2;
}

void sub_1000E4AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E4B00(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

BOOL sub_1000E4B3C(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT event_name, event_type, event_defType, event_config FROM eligible_eventdef_view", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  long long v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000EC96C(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000EC90C();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E4C2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    **(void **)(v1 + 40) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
    if (!**(void **)(v1 + 40))
    {
      BOOL v8 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: All-eventdefs query weirdness: got a row but no definition?", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      long long v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000ECA4C(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000EC9EC();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E4DB0(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_1000E4DC0(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT event_name, event_defType, event_config FROM eligible_eventdef_view WHERE event_xpc_type_t type = ?1", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  long long v5 = **v1;
  if (v5)
  {
    sub_100008A30(v2, *v1, 1, (uint64_t)v1[2]);
  }
  else
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000ECB2C(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000ECACC();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E4EC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    BOOL v4 = *(void **)v1;
    if (*(char *)(*(void *)v1 + 23) < 0) {
      BOOL v4 = (void *)*v4;
    }
    int v12 = 136315138;
    unint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Config Store] Iterating all eventdefs of type %s", (uint8_t *)&v12, 0xCu);
  }
  int v5 = sub_1000090A4(v2, *(sqlite3_stmt ***)(v1 + 16));
  if (v5 == 100)
  {
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 16), 0);
    uint64_t v9 = 1;
    **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 16), 1);
    **(void **)(v1 + 40) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 16), 2);
    if (!**(void **)(v1 + 40))
    {
      BOOL v10 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[Config Store] WARNING: eventdef-with-type query weirdness: got a row but no definition?", (uint8_t *)&v12, 2u);
      }
    }
  }
  else
  {
    if (v5 != 101)
    {
      BOOL v6 = *(sqlite3 **)(v2 + 32);
      uint64_t v7 = qword_10015EF60;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8) {
          sub_1000ECC0C(v6, v7);
        }
      }
      else if (v8)
      {
        sub_1000ECBAC();
      }
    }
    return 0;
  }
  return v9;
}

sqlite3_stmt **sub_1000E5080(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_1000E5090(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT modify_event_name, modify_event_defType, modify_event_config FROM eligible_modify_eventdef_view WHERE modify_event_xpc_type_t type = ?1;",
    0,
    &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  int v5 = **v1;
  if (v5)
  {
    sub_100008A30(v2, *v1, 1, (uint64_t)v1[2]);
  }
  else
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000ECCEC(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000ECC8C();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E5194(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    if (!**(void **)(v1 + 16))
    {
      BOOL v8 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: modify-events-with-type query weirdness: got a row but no name?", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      int v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000ECDCC(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000ECD6C();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E5300(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_1000E5310(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT external_config_kind, external_config_def FROM enabled_external_configs_view", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  int v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000ED06C(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000ED00C();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000E5400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    if (!**(void **)(v1 + 24))
    {
      BOOL v8 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Config Store] WARNING: All-external-configs query weirdness: got a row but no definition?", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      int v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000ED14C(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000ED0EC();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_1000E5554(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

sqlite3_stmt **sub_1000E5564(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Config Store] Debug dump current database state", buf, 2u);
  }
  long long v47 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v1, "SELECT config_uuid, config_enabled, config_last_enabled, config_last_disabled FROM configs;",
    0,
    &v47);
  if (v47)
  {
    while (sub_1000090A4(v1, &v47) == 100)
    {
      int v3 = sub_1000090E4(v1, &v47, 0);
      int v4 = sub_100064D30(v1, &v47, 1);
      int v5 = sub_1000090E4(v1, &v47, 2);
      BOOL v6 = sub_1000090E4(v1, &v47, 3);
      uint64_t v7 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        if (v3) {
          BOOL v8 = (const char *)v3;
        }
        else {
          BOOL v8 = "(null)";
        }
        *(_DWORD *)uint64_t buf = 136446978;
        *(void *)&uint8_t buf[4] = v8;
        if (v5) {
          uint64_t v9 = (const char *)v5;
        }
        else {
          uint64_t v9 = "(null)";
        }
        __int16 v54 = 1024;
        *(_DWORD *)int v55 = v4 != 0;
        if (v6) {
          BOOL v10 = (const char *)v6;
        }
        else {
          BOOL v10 = "(null)";
        }
        *(_WORD *)&v55[4] = 2082;
        *(void *)&v55[6] = v9;
        __int16 v56 = 2082;
        BOOL v57 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Config Store] - Config: uuid=%{public}s, enabled=%d, lastEnabled=%{public}s, lastDisabled=%{public}s", buf, 0x26u);
      }
    }
  }
  else
  {
    BOOL v11 = *(sqlite3 **)(v1 + 32);
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v12)
      {
        unint64_t v13 = sqlite3_errmsg(v11);
        sub_1000ED3F4((uint64_t)v13, (uint64_t)v52);
      }
    }
    else if (v12)
    {
      sub_1000ED394();
    }
  }
  sub_100064D6C(v1, "SELECT COUNT(*) FROM events;", 0, (sqlite3_stmt **)buf);
  BOOL v14 = *(sqlite3_stmt **)buf;
  *(void *)uint64_t buf = 0;
  sub_1000650BC(&v47, v14);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (v47)
  {
    if (sub_1000090A4(v1, &v47) == 100)
    {
      BOOL v15 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v16 = sub_100006A48(v1, &v47, 0);
        *(_DWORD *)uint64_t buf = 134217984;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[Config Store] - Events: count=%lld", buf, 0xCu);
      }
    }
  }
  else
  {
    unint64_t v17 = *(sqlite3 **)(v1 + 32);
    BOOL v18 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (v18)
      {
        int v19 = sqlite3_errmsg(v17);
        sub_1000ED2C4((uint64_t)v19, (uint64_t)v51);
      }
    }
    else if (v18)
    {
      sub_1000ED264();
    }
  }
  sub_100064D6C(v1, "SELECT event_id, event_name FROM events;", 0, (sqlite3_stmt **)buf);
  BOOL v20 = *(sqlite3_stmt **)buf;
  *(void *)uint64_t buf = 0;
  sub_1000650BC(&v47, v20);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (v47)
  {
    while (sub_1000090A4(v1, &v47) == 100)
    {
      long long v21 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v22 = sub_100006A48(v1, &v47, 0);
        long long v23 = sub_1000090E4(v1, &v47, 1);
        *(_DWORD *)uint64_t buf = 134218242;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v54 = 2082;
        *(void *)int v55 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[Config Store]   :: %lld -> %{public}s", buf, 0x16u);
      }
    }
  }
  else
  {
    long long v24 = *(sqlite3 **)(v1 + 32);
    BOOL v25 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v24)
    {
      if (v25)
      {
        long long v26 = sqlite3_errmsg(v24);
        sub_1000ED2C4((uint64_t)v26, (uint64_t)v50);
      }
    }
    else if (v25)
    {
      sub_1000ED264();
    }
  }
  sub_100064D6C(v1, "SELECT COUNT(*) FROM transforms;", 0, (sqlite3_stmt **)buf);
  long long v27 = *(sqlite3_stmt **)buf;
  *(void *)uint64_t buf = 0;
  sub_1000650BC(&v47, v27);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (v47)
  {
    if (sub_1000090A4(v1, &v47) == 100)
    {
      long long v28 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v29 = sub_100006A48(v1, &v47, 0);
        *(_DWORD *)uint64_t buf = 134217984;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[Config Store] - Transforms: count=%lld", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v30 = *(sqlite3 **)(v1 + 32);
    BOOL v31 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v30)
    {
      if (v31)
      {
        BOOL v32 = sqlite3_errmsg(v30);
        sub_1000ED35C((uint64_t)v32, (uint64_t)v49);
      }
    }
    else if (v31)
    {
      sub_1000ED2FC();
    }
  }
  sub_100064D6C(v1, "SELECT transform_id, transform_uuid FROM transforms;", 0, (sqlite3_stmt **)buf);
  std::string::size_type v33 = *(sqlite3_stmt **)buf;
  *(void *)uint64_t buf = 0;
  sub_1000650BC(&v47, v33);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (v47)
  {
    while (sub_1000090A4(v1, &v47) == 100)
    {
      int v34 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v35 = sub_100006A48(v1, &v47, 0);
        BOOL v36 = sub_1000090E4(v1, &v47, 1);
        *(_DWORD *)uint64_t buf = 134218242;
        *(void *)&uint8_t buf[4] = v35;
        __int16 v54 = 2082;
        *(void *)int v55 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[Config Store]   :: %lld : %{public}s", buf, 0x16u);
      }
    }
  }
  else
  {
    int v37 = *(sqlite3 **)(v1 + 32);
    BOOL v38 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v37)
    {
      if (v38)
      {
        __int16 v39 = sqlite3_errmsg(v37);
        sub_1000ED2C4((uint64_t)v39, (uint64_t)buf);
      }
    }
    else if (v38)
    {
      sub_1000ED264();
    }
  }
  sub_100064D6C(v1, "SELECT COUNT(*) FROM transform_events;", 0, (sqlite3_stmt **)v48);
  BOOL v40 = *(sqlite3_stmt **)v48;
  *(void *)BOOL v48 = 0;
  sub_1000650BC(&v47, v40);
  sub_1000650BC((sqlite3_stmt **)v48, 0);
  if (v47)
  {
    if (sub_1000090A4(v1, &v47) == 100)
    {
      std::string v41 = qword_10015EF60;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v42 = sub_100006A48(v1, &v47, 0);
        *(_DWORD *)BOOL v48 = 134217984;
        *(void *)&v48[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[Config Store] - Event-Transform Map: count=%lld", v48, 0xCu);
      }
    }
  }
  else
  {
    int v43 = *(sqlite3 **)(v1 + 32);
    BOOL v44 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v43)
    {
      if (v44)
      {
        std::string v45 = sqlite3_errmsg(v43);
        sub_1000ED22C((uint64_t)v45, (uint64_t)v48);
      }
    }
    else if (v44)
    {
      sub_1000ED1CC();
    }
  }
  return sub_1000650BC(&v47, 0);
}

void sub_1000E5CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000E5D08(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000E5D20()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[Config Store] Retrieving transforms for event with name '%s'", v1, 0xCu);
}

void sub_1000E5D94()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[Config Store] Retrieving modify-eventdefs for event with name '%s'", v1, 0xCu);
}

void sub_1000E5E08()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to store config: header present but has no UUID", v2, v3, v4, v5, v6);
}

void sub_1000E5E68()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E5EC8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-insert statement; %s",
    v4);
}

void sub_1000E5F00()
{
  sub_1000E5D08(__stack_chk_guard);
  sub_100089014();
  sub_10005A734((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Config header with uuid '%{public}s' inserted but failed to return row id", v2);
}

void sub_1000E5F6C()
{
  sub_1000E5D08(__stack_chk_guard);
  sub_100089014();
  sub_10005A734((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Config header with uuid '%{public}s' has parent that is not present; cannot insert yet.",
    v2);
}

void sub_1000E5FD8()
{
  sub_1000E5D08(__stack_chk_guard);
  sub_100089014();
  sub_10005A734((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Config header with uuid '%{public}s' failed to insert new row[null database]", v2);
}

void sub_1000E6044()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-parent-query statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E60A4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-parent-query statement; %s",
    v4);
}

void sub_1000E60DC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to retrieve parent config id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E613C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to retrieve parent config id; %s",
    v4);
}

void sub_1000E6174()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-dup-transform statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E61D4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-dup-transform statement; %s",
    v4);
}

void sub_1000E620C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to finish config-transform-dup[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E626C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to finish config-transform-dup; %s",
    v4);
}

void sub_1000E62A4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-dup-eventdef statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6304(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-dup-eventdef statement; %s",
    v4);
}

void sub_1000E633C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to finish config-eventdef-dup[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E639C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to finish config-eventdef-dup; %s",
    v4);
}

void sub_1000E63D4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-dup-modify-eventdef statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6434(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-dup-modify-eventdef statement; %s",
    v4);
}

void sub_1000E646C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to finish config-modify-eventdefs-dup[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E64CC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to finish config-modify-eventdefs-dup; %s",
    v4);
}

void sub_1000E6504()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config-dup-external-configs statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6564(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config-dup-external-configs statement; %s",
    v4);
}

void sub_1000E659C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to finish config-external-config-dup[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E65FC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to finish config-external-config-dup; %s",
    v4);
}

void sub_1000E6634()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Parent config with uuid '%{public}s' does not exist", v2);
}

void sub_1000E66A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create sampling-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6700(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create sampling-insert statement; %s",
    v4);
}

void sub_1000E6738()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert sampling_def=%{public}s[null database]", v2);
}

void sub_1000E67A4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database get-sampling-id query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6804(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Error preparing database get-sampling-id query; %s",
    v4);
}

void sub_1000E683C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add transform (no string uuid)", v2, v3, v4, v5, v6);
}

void sub_1000E689C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create transform-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E68FC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create transform-insert statement; %s",
    v4);
}

void sub_1000E6934()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert transform uuid='%{public}s'[null database]", v2);
}

void sub_1000E69A0()
{
  sub_10002B138();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[Config Store] ERROR: Attempting to store duplicate transform uuids. Please be certain that the new transforms have unique uuids. Retaining old transform definitions.", v1, 2u);
}

void sub_1000E6A0C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database get-transform-id query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6A6C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Error preparing database get-transform-id query; %s",
    v4);
}

void sub_1000E6AA4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database get-eventdef-id query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6B04(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Error preparing database get-eventdef-id query; %s",
    v4);
}

void sub_1000E6B3C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add event def (no string uuid)", v2, v3, v4, v5, v6);
}

void sub_1000E6B9C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add event def (no string event name)", v2, v3, v4, v5, v6);
}

void sub_1000E6BFC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add event def (no string event type)", v2, v3, v4, v5, v6);
}

void sub_1000E6C5C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add event def (no string event configuration)", v2, v3, v4, v5, v6);
}

void sub_1000E6CBC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create event-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6D1C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create event-insert statement; %s",
    v4);
}

void sub_1000E6D54()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert event def uuid='%{public}s'[null database]", v2);
}

void sub_1000E6DC0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database get-modify-eventdef-id query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E6E20(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Error preparing database get-modify-eventdef-id query; %s",
    v4);
}

void sub_1000E6E58()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event def (no string uuid)", v2, v3, v4, v5, v6);
}

void sub_1000E6EB8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event def (no string name)", v2, v3, v4, v5, v6);
}

void sub_1000E6F18()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event def (no string type)", v2, v3, v4, v5, v6);
}

void sub_1000E6F78()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event def (no string defType)", v2, v3, v4, v5, v6);
}

void sub_1000E6FD8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event def (no string event configuration)", v2, v3, v4, v5, v6);
}

void sub_1000E7038()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create modify-event-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7098(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create modify-event-insert statement; %s",
    v4);
}

void sub_1000E70D0()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert modify event def uuid='%{public}s'[null database]", v2);
}

void sub_1000E713C()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert event '%s'[null database]", v2);
}

void sub_1000E71A8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create event-id-query statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7208(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create event-id-query statement; %s",
    v4);
}

void sub_1000E7240()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to create external-config-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E72A0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to create external-config-insert statement; %s",
    v4);
}

void sub_1000E72D8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert external-config[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7338(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert external-config; %s", v4);
}

void sub_1000E7370()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-transform-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E73D0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-transform-insert statement; %s",
    v4);
}

void sub_1000E7408()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert config-transform mapping[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7468(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert config-transform mapping; %s",
    v4);
}

void sub_1000E74A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-eventdef-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7500(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-eventdef-insert statement; %s",
    v4);
}

void sub_1000E7538()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert config-eventdef mapping[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7598(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert config-eventdef mapping; %s",
    v4);
}

void sub_1000E75D0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-modify-eventdef-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7630(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-modify-eventdef-insert statement; %s",
    v4);
}

void sub_1000E7668()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert config-modify-eventdef mapping[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E76C8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert config-modify-eventdef mapping; %s",
    v4);
}

void sub_1000E7700()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create transform-event-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7760(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create transform-event-insert statement; %s",
    v4);
}

void sub_1000E7798()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert event-transform mapping[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E77F8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert event-transform mapping; %s",
    v4);
}

void sub_1000E7830()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-external_config-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7890(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-external_config-insert statement; %s",
    v4);
}

void sub_1000E78C8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert config-external_config mapping[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7928(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert config-external_config mapping; %s",
    v4);
}

void sub_1000E7960()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: transform has no inputs", v2, v3, v4, v5, v6);
}

void sub_1000E79C0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add transform (was not object)", v2, v3, v4, v5, v6);
}

void sub_1000E7A20()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-transform-remove statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7A80(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-transform-remove statement; %s",
    v4);
}

void sub_1000E7AB8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove transforms (element was not string)", v2, v3, v4, v5, v6);
}

void sub_1000E7B18()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove transforms (was not array)", v2, v3, v4, v5, v6);
}

void sub_1000E7B78()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add event (was not object)", v2, v3, v4, v5, v6);
}

void sub_1000E7BD8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-eventdef-remove statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7C38(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-eventdef-remove statement; %s",
    v4);
}

void sub_1000E7C70()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove eventdefs (element was not string)", v2, v3, v4, v5, v6);
}

void sub_1000E7CD0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove event defintions (was not array)", v2, v3, v4, v5, v6);
}

void sub_1000E7D30()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add modify event definition (was not object)", v2, v3, v4, v5, v6);
}

void sub_1000E7D90()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-modify-eventdef-remove remove statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7DF0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-modify-eventdef-remove remove statement; %s",
    v4);
}

void sub_1000E7E28()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove modify-eventdefs (element was not string)", v2, v3, v4, v5, v6);
}

void sub_1000E7E88()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove modify event defintions (was not array)", v2, v3, v4, v5, v6);
}

void sub_1000E7EE8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config-external_config-remove statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E7F48(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config-external_config-remove statement; %s",
    v4);
}

void sub_1000E7F80()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to remove external configs (kind was not string)", v2, v3, v4, v5, v6);
}

void sub_1000E7FE0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to add external config (was not object)", v2, v3, v4, v5, v6);
}

void sub_1000E8040()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index9 ON config_eventdefs(eventdef_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E80A0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index9 ON config_eventdefs(eventdef_id); %s",
    v4);
}

void sub_1000E80D8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index8 ON eventdefs(eventdef_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8138(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index8 ON eventdefs(eventdef_id); %s",
    v4);
}

void sub_1000E8170()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index7 ON events(event_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E81D0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index7 ON events(event_id); %s",
    v4);
}

void sub_1000E8208()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index6 ON transform_events(event_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8268(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index6 ON transform_events(event_id); %s",
    v4);
}

void sub_1000E82A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index5 ON config_transforms(transform_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8300(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index5 ON config_transforms(transform_id); %s",
    v4);
}

void sub_1000E8338()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index4 ON transforms(transform_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8398(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index4 ON transforms(transform_id); %s",
    v4);
}

void sub_1000E83D0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index3 ON disabled_external_configs(external_config_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8430(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index3 ON disabled_external_configs(external_config_id); %s",
    v4);
}

void sub_1000E8468()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index2 ON transform_events(transform_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E84C8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index2 ON transform_events(transform_id); %s",
    v4);
}

void sub_1000E8500()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index1 ON disabled_transforms(transform_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8560(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index1 ON disabled_transforms(transform_id); %s",
    v4);
}

void sub_1000E8598()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create enabled_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E85F8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create enabled_external_configs_view; %s",
    v4);
}

void sub_1000E8630()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create enabled_event_names_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8690(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create enabled_event_names_view; %s",
    v4);
}

void sub_1000E86C8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create enabled_tranforms_by_event_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8728(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create enabled_tranforms_by_event_view; %s",
    v4);
}

void sub_1000E8760()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create disabled_transform_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E87C0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create disabled_transform_view; %s",
    v4);
}

void sub_1000E87F8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create enabled_transform_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8858(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create enabled_transform_view; %s",
    v4);
}

void sub_1000E8890()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create eligible_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E88F0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create eligible_external_configs_view; %s",
    v4);
}

void sub_1000E8928()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create eligible_eventdef_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8988(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create eligible_eventdef_view; %s",
    v4);
}

void sub_1000E89C0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create eligible_transform_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8A20(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create eligible_transform_view; %s",
    v4);
}

void sub_1000E8A58()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create disabled_external_configs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8AB8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create disabled_external_configs table; %s",
    v4);
}

void sub_1000E8AF0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config_external_configs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8B50(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config_external_configs table; %s",
    v4);
}

void sub_1000E8B88()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create external_configs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8BE8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create external_configs table; %s",
    v4);
}

void sub_1000E8C20()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create disabled_transforms table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8C80(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create disabled_transforms table; %s",
    v4);
}

void sub_1000E8CB8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create transform_events table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8D18(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create transform_events table; %s",
    v4);
}

void sub_1000E8D50()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config_eventdefs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8DB0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config_eventdefs table; %s",
    v4);
}

void sub_1000E8DE8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config_transforms table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8E48(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config_transforms table; %s",
    v4);
}

void sub_1000E8E80()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create transforms table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8EE0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create transforms table; %s", v4);
}

void sub_1000E8F18()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create eventdefs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E8F78(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create eventdefs table; %s", v4);
}

void sub_1000E8FB0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create events table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9010(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create events table; %s", v4);
}

void sub_1000E9048()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create configs-update_deactivation_time trigger[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E90A8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create configs-update_deactivation_time trigger; %s",
    v4);
}

void sub_1000E90E0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create configs-update_activation_time trigger[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9140(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create configs-update_activation_time trigger; %s",
    v4);
}

void sub_1000E9178()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create configs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E91D8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create configs table; %s", v4);
}

void sub_1000E9210()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to add column transform_sampling to table transforms[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9270(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to add column transform_sampling to table transforms; %s",
    v4);
}

void sub_1000E92A8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to add disable_reason column to table disabled_transforms[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9308(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to add disable_reason column to table disabled_transforms; %s",
    v4);
}

void sub_1000E9340()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index11 ON config_modify_eventdefs(modify_eventdef_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E93A0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index11 ON config_modify_eventdefs(modify_eventdef_id); %s",
    v4);
}

void sub_1000E93D8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index10 ON modify_eventdefs(modify_eventdef_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9438(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index10 ON modify_eventdefs(modify_eventdef_id); %s",
    v4);
}

void sub_1000E9470()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create eligible_modify_eventdef_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E94D0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create eligible_modify_eventdef_view; %s",
    v4);
}

void sub_1000E9508()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create config_modify_eventdefs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9568(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create config_modify_eventdefs table; %s",
    v4);
}

void sub_1000E95A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create modify_eventdefs table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9600(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create modify_eventdefs table; %s",
    v4);
}

void sub_1000E9638()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_modify_eventdefs_modify_event_name[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9698(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_modify_eventdefs_modify_event_name; %s",
    v4);
}

void sub_1000E96D0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_config_modify_eventdefs_config_id_modify_eventdef_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9730(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_config_modify_eventdefs_config_id_modify_eventdef_id; %s",
    v4);
}

void sub_1000E9768()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index11 or create index IX_config_modify_eventdefs_modify_eventdef_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E97C8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index11 or create index IX_config_modify_eventdefs_modify_eventdef_id; %s",
    v4);
}

void sub_1000E9800()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index index10[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9860(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index index10; %s", v4);
}

void sub_1000E9898()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_config_eventdefs_config_id_eventdef_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E98F8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_config_eventdefs_config_id_eventdef_id; %s",
    v4);
}

void sub_1000E9930()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index9 or create index IX_config_eventdefs_eventdef_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9990(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index9 or create index IX_config_eventdefs_eventdef_id; %s",
    v4);
}

void sub_1000E99C8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index index8[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9A28(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index index8; %s", v4);
}

void sub_1000E9A60()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index index7[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9AC0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index index7; %s", v4);
}

void sub_1000E9AF8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index index6 or create IX_transform_events_event_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9B58(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index index6 or create IX_transform_events_event_id; %s",
    v4);
}

void sub_1000E9B90()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_config_transforms_config_id_transform_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9BF0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_config_transforms_config_id_transform_id; %s",
    v4);
}

void sub_1000E9C28()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index5 or create index IX_config_transforms_transform_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9C88(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index5 or create index IX_config_transforms_transform_id; %s",
    v4);
}

void sub_1000E9CC0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index4[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9D20(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index4; %s", v4);
}

void sub_1000E9D58()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index3 or create index IX_disabled_external_configs_external_config_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9DB8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index3 or create index IX_disabled_external_configs_external_config_id; %s",
    v4);
}

void sub_1000E9DF0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index2 or create index IX_transform_events_transform_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9E50(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index2 or create index IX_transform_events_transform_id; %s",
    v4);
}

void sub_1000E9E88()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop index1 or create index IX_disabled_transforms_transform_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9EE8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop index1 or create index IX_disabled_transforms_transform_id; %s",
    v4);
}

void sub_1000E9F20()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed create index IX_external_configs_sampling_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000E9F80(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed create index IX_external_configs_sampling_id; %s",
    v4);
}

void sub_1000E9FB8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed create index IX_transforms_sampling_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA018(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed create index IX_transforms_sampling_id; %s",
    v4);
}

void sub_1000EA050()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed create index IX_sampling_sampled_out_disable_sampling[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA0B0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed create index IX_sampling_sampled_out_disable_sampling; %s",
    v4);
}

void sub_1000EA0E8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to drop column external_configs(external_config_enableIf)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA148(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to drop column external_configs(external_config_enableIf); %s",
    v4);
}

void sub_1000EA180()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to drop column transforms(transform_enableIf) or transforms(transform_sampling)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA1E0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to drop column transforms(transform_enableIf) or transforms(transform_sampling); %s",
    v4);
}

void sub_1000EA218()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop enabled_external_configs_view or create enabled_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA278(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop enabled_external_configs_view or create enabled_external_configs_view; %s",
    v4);
}

void sub_1000EA2B0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create usable_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA310(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create usable_external_configs_view; %s",
    v4);
}

void sub_1000EA348()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create sampled_out_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA3A8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create sampled_out_external_configs_view; %s",
    v4);
}

void sub_1000EA3E0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create disabled_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA440(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create disabled_external_configs_view; %s",
    v4);
}

void sub_1000EA478()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop eligible_external_configs_view or create eligible_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA4D8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop eligible_external_configs_view or create eligible_external_configs_view; %s",
    v4);
}

void sub_1000EA510()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create composed_external_configs_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA570(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create composed_external_configs_view; %s",
    v4);
}

void sub_1000EA5A8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop enabled_event_names_view or create new enabled_event_names_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA608(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop enabled_event_names_view or create new enabled_event_names_view; %s",
    v4);
}

void sub_1000EA640()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop enabled_tranforms_by_event_view or create new enabled_tranforms_by_event_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA6A0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop enabled_tranforms_by_event_view or create new enabled_tranforms_by_event_view; %s",
    v4);
}

void sub_1000EA6D8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop enabled_transform_view or create enabled_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA738(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop enabled_transform_view or create enabled_transforms_view; %s",
    v4);
}

void sub_1000EA770()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create usable_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA7D0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create usable_transforms_view; %s",
    v4);
}

void sub_1000EA808()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create sampled_out_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA868(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create sampled_out_transforms_view; %s",
    v4);
}

void sub_1000EA8A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop disabled_transform_view or create disabled_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA900(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop disabled_transform_view or create disabled_transforms_view; %s",
    v4);
}

void sub_1000EA938()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop eligible_transform_view or create eligible_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EA998(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop eligible_transform_view or create eligible_transforms_view; %s",
    v4);
}

void sub_1000EA9D0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create composed_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAA30(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create composed_transforms_view; %s",
    v4);
}

void sub_1000EAA68()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to migrate external_config(sampling_id) to new sampling rows[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAAC8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to migrate external_config(sampling_id) to new sampling rows; %s",
    v4);
}

void sub_1000EAB00()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to associate transforms(sampling_id) to new sampling rows[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAB60(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to associate transforms(sampling_id) to new sampling rows; %s",
    v4);
}

void sub_1000EAB98()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to migrate external_config_enableIf and disabled_external_configs to new sampling rows[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EABF8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to migrate external_config_enableIf and disabled_external_configs to new sampling rows; %s",
    v4);
}

void sub_1000EAC30()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to migrate transform_enableIf and disbled_transforms to new sampling rows[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAC90(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to migrate transform_enableIf and disbled_transforms to new sampling rows; %s",
    v4);
}

void sub_1000EACC8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to add column sampling_id to external_configs[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAD28(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to add column sampling_id to external_configs; %s",
    v4);
}

void sub_1000EAD60()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to add column sampling_id to transforms[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EADC0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to add column sampling_id to transforms; %s",
    v4);
}

void sub_1000EADF8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to create sampling table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAE58(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to create sampling table; %s", v4);
}

void sub_1000EAE90()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to drop composed_transforms_view or create new composed_transforms_view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAEF0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to drop composed_transforms_view or create new composed_transforms_view; %s",
    v4);
}

void sub_1000EAF28()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_configs_config_last_enabled[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EAF88(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_configs_config_last_enabled; %s",
    v4);
}

void sub_1000EAFC0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_config_transforms_transform_id_config_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB020(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_config_transforms_transform_id_config_id; %s",
    v4);
}

void sub_1000EB058()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create index IX_configs_config_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB0B8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to create index IX_configs_config_id; %s",
    v4);
}

void sub_1000EB0F0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to create transaction for migrating state database[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB150(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to create transaction for migrating state database; %s",
    v4);
}

void sub_1000EB188()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to retrieve information about config[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB1E8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to retrieve information about config; %s",
    v4);
}

void sub_1000EB220()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare deactivate-all-config statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB280(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare deactivate-all-config statement; %s",
    v4);
}

void sub_1000EB2B8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to deactivate-all-configs[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB318(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to deactivate-all-configs; %s", v4);
}

void sub_1000EB350()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare activate-config statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB3B0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare activate-config statement; %s",
    v4);
}

void sub_1000EB3E8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare enabled-config-count statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB448(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare enabled-config-count statement; %s",
    v4);
}

void sub_1000EB480()
{
  sub_100089014();
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "[Config Store] ERROR: Activation of device configuration with uuid '%{public}s' enabled %lld configs?", v2, 0x16u);
}

void sub_1000EB514()
{
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Activation of device configuration with uuid '%{public}s' failed; does not exist?",
    v2);
}

void sub_1000EB590()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to count enabled configs[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB5F0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to count enabled configs; %s", v4);
}

void sub_1000EB628()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to activate config[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB688(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to activate config; %s", v4);
}

void sub_1000EB6C0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare get-active-header statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB720(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare get-active-header statement; %s",
    v4);
}

void sub_1000EB758()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to execute get-active-header statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB7B8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to execute get-active-header statement; %s",
    v4);
}

void sub_1000EB7F0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Activated device configuration exists but header is not set?", v2, v3, v4, v5, v6);
}

void sub_1000EB850()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Activated device configuration had header but it could not be parsed", v2, v3, v4, v5, v6);
}

void sub_1000EB8B0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare disabled-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EB910(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare disabled-insert statement; %s",
    v4);
}

void sub_1000EB948()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to insert row for disabled transform; rolling all changes back.[null database]",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1000EB9A8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to insert row for disabled transform; rolling all changes back.; %s",
    v4);
}

void sub_1000EB9E0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare disabled-select query statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBA40(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare disabled-select query statement; %s",
    v4);
}

void sub_1000EBA78()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to retrieve a transform's enabled/disabled status[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBAD8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to retrieve a transform's enabled/disabled status; %s",
    v4);
}

void sub_1000EBB10()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to reenable all budgeted transforms[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBB70(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] Failed to reenable all budgeted transforms; %s",
    v4);
}

void sub_1000EBBF0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare update-disable-sampling statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBC50(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare update-disable-sampling statement; %s",
    v4);
}

void sub_1000EBC88()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to update-disable-sampling[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBCE8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to update-disable-sampling; %s", v4);
}

void sub_1000EBD20()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare event-used query statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBD80(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare event-used query statement; %s",
    v4);
}

void sub_1000EBDB8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to retrieve a event's used/not used status[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBE18(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to retrieve a event's used/not used status; %s",
    v4);
}

void sub_1000EBE50()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to store config: missing header", v2, v3, v4, v5, v6);
}

void sub_1000EBEB0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed to create transaction for storing device configuration[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EBF10(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] Failed to create transaction for storing device configuration; %s",
    v4);
}

void sub_1000EBF48()
{
  sub_10002B138();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[Config Store] FAULT: Failed to store device configuration", v1, 2u);
}

void sub_1000EBFB4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[Config Store] FAULT: failed to flush transaction cache during config application: %s", v3, 0xCu);
}

void sub_1000EBFF8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing transform-with-uuid query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC058(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing transform-with-uuid query; %s",
    v4);
}

void sub_1000EC0DC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: No results for transform uuid query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC13C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: No results for transform uuid query; %s",
    v4);
}

void sub_1000EC174()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database enabled-transform query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC1D4(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database enabled-transform query; %s",
    v4);
}

void sub_1000EC254()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed during enabled-transform-query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC2B4(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] Failed during enabled-transform-query; %s", v4);
}

void sub_1000EC334()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database disabled-transform query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC394(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database disabled-transform query; %s",
    v4);
}

void sub_1000EC414()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during disabled-transform-query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC474(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during disabled-transform-query; %s",
    v4);
}

void sub_1000EC4F4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to create event-query statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC554(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed to create event-query statement; %s",
    v4);
}

void sub_1000EC5D4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during event-query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC634(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during event-query; %s", v4);
}

void sub_1000EC6B4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database all-active-events query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC714(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database all-active-events query; %s",
    v4);
}

void sub_1000EC794()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during all-active-events[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC7F4(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during all-active-events; %s", v4);
}

void sub_1000EC874()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database all-active-events-count query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC8D4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Error preparing database all-active-events-count query; %s",
    v4);
}

void sub_1000EC90C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database all-active-eventdefs query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000EC96C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database all-active-eventdefs query; %s",
    v4);
}

void sub_1000EC9EC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during all-eventdefs[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECA4C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during all-eventdefs; %s", v4);
}

void sub_1000ECACC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database active-eventdefs-for-type query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECB2C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database active-eventdefs-for-type query; %s",
    v4);
}

void sub_1000ECBAC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during eventdef-with-type[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECC0C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during eventdef-with-type; %s", v4);
}

void sub_1000ECC8C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Error preparing database eligible-modify-events query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECCEC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] Error preparing database eligible-modify-events query; %s",
    v4);
}

void sub_1000ECD6C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] Failed during eligible-modify-events-with-type query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECDCC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] Failed during eligible-modify-events-with-type query; %s",
    v4);
}

void sub_1000ECE4C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database active-modify-eventdefs query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECEAC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database active-modify-eventdefs query; %s",
    v4);
}

void sub_1000ECF2C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during modify-eventdef query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ECF8C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during modify-eventdef query; %s",
    v4);
}

void sub_1000ED00C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Error preparing database all-active-external-configs query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED06C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Error preparing database all-active-external-configs query; %s",
    v4);
}

void sub_1000ED0EC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed during all-external-configs[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED14C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[Config Store] ERROR: Failed during all-external-configs; %s", v4);
}

void sub_1000ED1CC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare event-transform-count statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED22C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare event-transform-count statement; %s",
    v4);
}

void sub_1000ED264()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare event-count statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED2C4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare event-count statement; %s",
    v4);
}

void sub_1000ED2FC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare transform-count statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED35C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare transform-count statement; %s",
    v4);
}

void sub_1000ED394()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Config Store] ERROR: Failed to prepare config statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000ED3F4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[Config Store] ERROR: Failed to prepare config statement; %s", v4);
}

void sub_1000ED42C()
{
}

void sub_1000ED8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000ED9D4(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EDB58((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EDB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EDB58(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EDB58(v8, a2);
LABEL_12:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EDB58(a1, v8);
    goto LABEL_12;
  }

  return sub_10001F364((double *)a1, (unsigned __int8 *)a2);
}

void sub_1000EDCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EDD00()
{
  return 1;
}

void sub_1000EDD08(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EDE8C((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EDE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EDE8C(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EDE8C(v8, a2);
LABEL_10:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EDE8C(a1, v8);
    goto LABEL_10;
  }
  return sub_10001F364((double *)a2, (unsigned __int8 *)a1) ^ 1;
}

void sub_1000EDFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EE004()
{
  return 1;
}

void sub_1000EE00C(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EE190((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EE154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE190(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EE190(v8, a2);
LABEL_12:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EE190(a1, v8);
    goto LABEL_12;
  }

  return sub_10001F364((double *)a2, (unsigned __int8 *)a1);
}

void sub_1000EE318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EE338()
{
  return 1;
}

void sub_1000EE340(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EE4C4((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EE488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE4C4(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EE4C4(v8, a2);
LABEL_10:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EE4C4(a1, v8);
    goto LABEL_10;
  }
  return sub_10001F364((double *)a1, (unsigned __int8 *)a2) ^ 1;
}

void sub_1000EE61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EE63C()
{
  return 1;
}

void sub_1000EE644(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EE7C8((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EE78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE7C8(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EE7C8(v8, a2);
LABEL_12:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EE7C8(a1, v8);
    goto LABEL_12;
  }

  return sub_10001F600((unsigned __int8 *)a1, (unsigned __int8 *)a2);
}

void sub_1000EE950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EE970()
{
  return 1;
}

void sub_1000EE978(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v10 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v9);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C((uint64_t)a2, &v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000EEAFC((char *)&v7, (char *)&v9);
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
  sub_100016EAC((uint64_t)&v9);
  sub_100016B28(&v10, v9);
}

void sub_1000EEAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v6 = va_arg(va2, uint64_t *);
  uint64_t v8 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_100028D64((uint64_t **)va1);
  sub_100028D64((uint64_t **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EEAFC(char *a1, char *a2)
{
  int v4 = *a1;
  if (v4 == 4)
  {
    if (*a2 - 5 <= 2)
    {
      unsigned __int8 v10 = -86;
      sub_100072884(a1, &v10);
      v8[0] = 5;
      unint64_t v9 = v10;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      uint64_t v5 = sub_1000EEAFC(v8, a2);
LABEL_10:
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      return v5;
    }
  }
  else if ((v4 - 5) <= 2 && *a2 == 4)
  {
    unsigned __int8 v10 = -86;
    sub_100072884(a2, &v10);
    v8[0] = 5;
    unint64_t v9 = v10;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    uint64_t v5 = sub_1000EEAFC(a1, v8);
    goto LABEL_10;
  }
  return sub_10001F600((unsigned __int8 *)a1, (unsigned __int8 *)a2) ^ 1;
}

void sub_1000EEC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t sub_1000EEC74()
{
  return 1;
}

void sub_1000EEC80(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EECBC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EECF8(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EED34(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EED70(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EEDAC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EEDE4()
{
}

void sub_1000EF278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF38C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)a2 + 40;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_1000BB6E0((uint64_t *)(a2 + 24), v3);
  }
  else
  {
    sub_100016A10(*(void *)(a2 + 32), v3);
    uint64_t result = v4 + 16;
    *(void *)(a2 + 32) = v4 + 16;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_1000EF3E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF3EC()
{
  return 1;
}

uint64_t sub_1000EF3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)a2 + 16;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_10009A0B4((uint64_t *)(a2 + 24), v3);
  }
  else
  {
    sub_1000168C0(*(void *)(a2 + 32), v3);
    uint64_t result = v4 + 16;
    *(void *)(a2 + 32) = v4 + 16;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_1000EF44C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF454()
{
  return 1;
}

uint64_t sub_1000EF45C()
{
  return 1;
}

uint64_t sub_1000EF464()
{
  return 1;
}

void sub_1000EF46C(uint64_t a1, uint64_t *a2)
{
  memset(&v19, 170, sizeof(v19));
  sub_100014F90((uint64_t)a2, &v19);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v17 = v3;
  long long v18 = v3;
  sub_10001521C(a2, (uint64_t)&v19, (uint64_t *)&v17);
  uint64_t v4 = a2[1];
  uint64_t v5 = (void *)v17;
  if ((void)v17 == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Operation 'deleteEventField' tried to delete field on non-existent event");
  }
  *(void *)&v16[32] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)sqlite3_int64 v16 = v6;
  *(_OWORD *)&v16[16] = v6;
  sub_100015780(*(void *)v17 + 40, (const void **)&v17 + 1, (uint64_t)v16);
  uint64_t v7 = *v5 + 40;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v8;
  v14[1] = v8;
  sub_10001586C(v14, v7);
  sub_1000157EC((unsigned __int8 **)v14);
  if (!sub_1000205D8((unsigned __int8 **)v16, (unsigned __int8 **)v14))
  {
    unint64_t v9 = (unsigned __int8 *)(*v5 + 40);
    uint64_t v11 = *(void *)v16;
    long long v12 = *(_OWORD *)&v16[8];
    long long v13 = *(_OWORD *)&v16[24];
    sub_10003D1D4(v9, (uint64_t)&v11, (uint64_t)v14);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(*((void **)&v17 + 1));
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1000EF604(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EF65C()
{
  return 1;
}

void sub_1000EF664(uint64_t a1, void *a2)
{
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v33 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001D738((uint64_t)a2, &v32);
  if ((_BYTE)v32)
  {
    if (*a2 == a2[1])
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Operation 'mergeEventMap' tried to merge but had no event");
    }
    unsigned __int8 v10 = (unsigned __int8 *)(*(void *)*a2 + 40);
    BOOL v31 = &v32;
    sub_100006184((uint64_t *)&v31, (uint64_t)&v23);
    sub_10000626C((uint64_t *)&v31, (uint64_t)v19);
    while (!sub_1000205D8(&v23, v19))
    {
      *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)long long v18 = v3;
      *(_OWORD *)&unsigned char v18[16] = v3;
      long long v17 = v3;
      long long v13 = v23;
      long long v14 = v24;
      long long v15 = v25;
      long long v16 = v26;
      if (SHIBYTE(v28) < 0)
      {
        sub_100017424(&v17, (void *)v27, *((unint64_t *)&v27 + 1));
      }
      else
      {
        long long v17 = v27;
        *(void *)long long v18 = v28;
      }
      if (SHIBYTE(v30) < 0)
      {
        sub_100017424(&v18[8], (void *)v29, *((unint64_t *)&v29 + 1));
      }
      else
      {
        *(_OWORD *)&unsigned __int8 v18[8] = v29;
        *(void *)&unsigned char v18[24] = v30;
      }
      uint64_t v4 = sub_10001EE40(&v13);
      v11[0] = *v4;
      long long v12 = (uint64_t *)*((void *)v4 + 1);
      sub_100016EAC((uint64_t)v4);
      *uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      sub_100016EAC((uint64_t)v11);
      uint64_t v5 = (const void **)sub_100005DA8(&v13);
      long long v6 = sub_10001DA78(v10, v5);
      sub_100016EAC((uint64_t)v11);
      unsigned __int8 v7 = *(unsigned char *)v6;
      *(unsigned char *)long long v6 = v11[0];
      v11[0] = v7;
      long long v8 = (uint64_t *)v6[1];
      v6[1] = (uint64_t)v12;
      long long v12 = v8;
      sub_100016EAC((uint64_t)v6);
      sub_100016EAC((uint64_t)v11);
      sub_100016B28(&v12, v11[0]);
      if ((v18[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v18[8]);
      }
      if ((v18[7] & 0x80000000) != 0) {
        operator delete((void *)v17);
      }
      sub_100013C64(&v23);
      *(void *)&long long v26 = v26 + 1;
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19[7]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
  }
  sub_100016EAC((uint64_t)&v32);
  sub_100016B28(&v33, v32);
}

void sub_1000EF950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100028D64((uint64_t **)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF9D0()
{
  return 1;
}

void sub_1000EF9DC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFA18(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFA54(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFA90(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFACC(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFB08(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000EFB40(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    long long v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  long long v8 = this;
  if ((v12 & 0x80) != 0) {
    long long v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    long long v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void sub_1000EFC10()
{
}

void sub_1000EFDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000C7720(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_1000EFE38(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3040((uint64_t)a2, &v8);
  sub_1000625C0((uint64_t)&v8, v7);
  v5[0] = 4;
  unint64_t v6 = sub_1000F0278((uint64_t)v7, (const void **)&__p.__r_.__value_.__l.__data_) != 0;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  unint64_t v3 = a2[4];
  if (v3 >= a2[5])
  {
    uint64_t v4 = sub_100019524(a2 + 3, (uint64_t)v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5[0];
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)v5);
    v5[0] = 0;
    unint64_t v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  a2[4] = v4;
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_10001700C((uint64_t)v7, (char *)v7[1]);
  sub_100016EAC((uint64_t)&v8);
  sub_100016B28(&v9, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000EFF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000EFFF0()
{
  return 1;
}

void sub_1000EFFF8(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  long long v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F3040((uint64_t)a2, &v13);
  sub_1000625C0((uint64_t)&v13, &v11);
  unint64_t v3 = (char **)sub_1000184CC((uint64_t)&v11, (const void **)&__p.__r_.__value_.__l.__data_);
  if (&v12 == v3)
  {
    v9[0] = 0;
    std::string::size_type v10 = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    unint64_t v7 = a2[4];
    if (v7 >= a2[5])
    {
      uint64_t v8 = sub_100019524(a2 + 3, (uint64_t)v9);
    }
    else
    {
      *(unsigned char *)unint64_t v7 = v9[0];
      *(void *)(v7 + 8) = v10;
      sub_100016EAC((uint64_t)v9);
      v9[0] = 0;
      std::string::size_type v10 = 0;
      sub_100016EAC(v7);
      uint64_t v8 = v7 + 16;
    }
    a2[4] = v8;
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  else
  {
    uint64_t v4 = (uint64_t)(v3 + 7);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100013F48(a2 + 3, v4);
    }
    else
    {
      sub_100016A10(a2[4], v4);
      uint64_t v6 = v5 + 16;
      a2[4] = v5 + 16;
    }
    a2[4] = v6;
  }
  sub_10001700C((uint64_t)&v11, v12);
  sub_100016EAC((uint64_t)&v13);
  sub_100016B28(&v14, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000F0190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F01F8()
{
  return 1;
}

void sub_1000F0204(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_1000F0240(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

uint64_t sub_1000F0278(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!sub_1000185FC(v4, a2, v2 + 4))
      {
        if (!sub_1000185FC(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void sub_1000F02F8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10015A958;
  uint64_t v5 = sub_1000F04BC(&v4[1].__vftable, a1);
  *a2 = v5;
  a2[1] = v4;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000F041C((uint64_t)v5, (uint64_t)&v12);
  if (v12 != 1)
  {
    shared_owners = (uint64_t *)v4[1].__shared_owners_;
    shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
    if (shared_weak_owners) {
      atomic_fetch_add_explicit(&shared_weak_owners->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *shared_owners;
    uint64_t v9 = shared_owners[1];
    uint64_t *shared_owners = -1;
    shared_owners[1] = 0;
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    v14[0] = v10;
    v14[1] = v11;
    sub_100065AE8(v14);
    *a2 = 0;
    a2[1] = 0;
    sub_1000147D8(v4);
    if (shared_weak_owners) {
      sub_1000147D8(shared_weak_owners);
    }
  }
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
}

void sub_1000F041C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000F07B4(a1, (uint64_t)v3);
  *(unsigned char *)a2 = v3[0];
  *(void *)(a2 + 8) = v4;
  sub_100016EAC((uint64_t)v3);
  v3[0] = 0;
  uint64_t v4 = 0;
  sub_100016EAC(a2);
  sub_100016EAC((uint64_t)v3);
  sub_100016B28(&v4, v3[0]);
}

void *sub_1000F04BC(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000D06CC(a1);
  *uint64_t v4 = off_10015A910;
  *(_OWORD *)(v4 + 1) = 0u;
  *(_OWORD *)(v4 + 3) = 0u;
  uint64_t v5 = operator new(0x28uLL);
  v5[1] = 0;
  void v5[2] = 0;
  *uint64_t v5 = off_10015A9A8;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  void v5[3] = *a2;
  void v5[4] = v7;
  *a2 = -1;
  a2[1] = 0;
  if (v6 == -1) {
    uint64_t v6 = 0;
  }
  a1[3] = v6;
  a1[4] = v6 + v7;
  uint64_t v8 = (std::__shared_weak_count *)a1[2];
  a1[1] = v5 + 3;
  a1[2] = v5;
  if (v8) {
    sub_1000147D8(v8);
  }
  return a1;
}

uint64_t sub_1000F0578(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1000147D8(v2);
  }

  return nullsub_13(a1);
}

void sub_1000F05BC(uint64_t a1)
{
  sub_1000F0578(a1);

  operator delete();
}

void sub_1000F05F4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0;
  a3[2] = 0xAAAAAAAAAAAAAAAALL;
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)a3 = 0;
  sub_100016EAC((uint64_t)a3);
  sub_100016EAC((uint64_t)a3);
  a3[2] = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  if ((void *)v6 != a2)
  {
    uint64_t v7 = memchr(a2, 10, v6 - (void)a2);
    if (v7) {
      uint64_t v6 = (uint64_t)v7;
    }
    void v13[3] = 0;
    sub_100056A30((uint64_t)a2, v6, (uint64_t)v13, 1, &v11);
    sub_10000DE9C(v13);
    sub_100016EAC((uint64_t)&v11);
    char v8 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v11;
    LOBYTE(v11) = v8;
    uint64_t v9 = (uint64_t *)a3[1];
    a3[1] = v12;
    unint64_t v12 = v9;
    sub_100016EAC((uint64_t)a3);
    sub_100016EAC((uint64_t)&v11);
    sub_100016B28(&v12, v11);
    if (v6 == *(void *)(a1 + 32)) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    a3[2] = v10;
  }
}

void sub_1000F0724(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10000DE9C((uint64_t *)va1);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    LOBYTE(v6) = 0;
    uint64_t v8 = 0;
    sub_100016EAC((uint64_t)va);
    sub_100016EAC((uint64_t)va);
    __cxa_end_catch();
    JUMPOUT(0x1000F0694);
  }
  sub_10005E9FC(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0778(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1000F07B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  memset(v37, 170, sizeof(v37));
  sub_1000F05F4(a1, *(void **)(a1 + 24), v37);
  if (!v37[2]) {
    goto LABEL_15;
  }
  if (LOBYTE(v37[0]) != 1) {
    goto LABEL_15;
  }
  sub_10003A370((uint64_t)v37, "transforms", (uint64_t)v35);
  long long v32 = (unint64_t)v37;
  long long v33 = 0uLL;
  unint64_t v34 = 0x8000000000000000;
  sub_1000157EC((unsigned __int8 **)&v32);
  if (!sub_1000205D8((unsigned __int8 **)v35, (unsigned __int8 **)&v32)) {
    goto LABEL_15;
  }
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v3;
  v35[1] = v3;
  sub_10003A370((uint64_t)v37, "header", (uint64_t)v35);
  long long v32 = (unint64_t)v37;
  long long v33 = 0uLL;
  unint64_t v34 = 0x8000000000000000;
  sub_1000157EC((unsigned __int8 **)&v32);
  if (sub_1000205D8((unsigned __int8 **)v35, (unsigned __int8 **)&v32)) {
    goto LABEL_15;
  }
  if (*sub_10003D074((unsigned __int8 **)v35) != 1) {
    goto LABEL_15;
  }
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v32 = v4;
  long long v33 = v4;
  uint64_t v5 = sub_10003D074((unsigned __int8 **)v35);
  sub_10003A370((uint64_t)v5, "uuid", (uint64_t)&v32);
  uint64_t v6 = sub_10003D074((unsigned __int8 **)v35);
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v7;
  long long v30 = v7;
  sub_10001586C(&v29, (uint64_t)v6);
  sub_1000157EC((unsigned __int8 **)&v29);
  if (sub_1000205D8((unsigned __int8 **)&v32, (unsigned __int8 **)&v29)) {
    goto LABEL_15;
  }
  if (*sub_10001EE40((unsigned __int8 **)&v32) == 3)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v29 = v8;
    long long v30 = v8;
    uint64_t v9 = sub_10003D074((unsigned __int8 **)v35);
    sub_10003A370((uint64_t)v9, "name", (uint64_t)&v29);
    uint64_t v10 = sub_10003D074((unsigned __int8 **)v35);
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v26 = v11;
    long long v27 = v11;
    sub_10001586C(&v26, (uint64_t)v10);
    sub_1000157EC((unsigned __int8 **)&v26);
    if (sub_1000205D8((unsigned __int8 **)&v29, (unsigned __int8 **)&v26)) {
      goto LABEL_17;
    }
    if (*sub_10001EE40((unsigned __int8 **)&v29) != 3) {
      goto LABEL_17;
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v26 = v12;
    long long v27 = v12;
    unint64_t v13 = sub_10003D074((unsigned __int8 **)v35);
    sub_10003A370((uint64_t)v13, "builtOnDate", (uint64_t)&v26);
    long long v14 = sub_10003D074((unsigned __int8 **)v35);
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v23 = v15;
    long long v24 = v15;
    sub_10001586C(&v23, (uint64_t)v14);
    sub_1000157EC((unsigned __int8 **)&v23);
    if (sub_1000205D8((unsigned __int8 **)&v26, (unsigned __int8 **)&v23)) {
      goto LABEL_17;
    }
    if (*sub_10001EE40((unsigned __int8 **)&v26) != 3) {
      goto LABEL_17;
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v23 = v16;
    long long v24 = v16;
    long long v17 = sub_10003D074((unsigned __int8 **)v35);
    sub_10003A370((uint64_t)v17, "version", (uint64_t)&v23);
    long long v18 = sub_10003D074((unsigned __int8 **)v35);
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[0] = v19;
    v21[1] = v19;
    sub_10001586C(v21, (uint64_t)v18);
    sub_1000157EC((unsigned __int8 **)v21);
    if (sub_1000205D8((unsigned __int8 **)&v23, (unsigned __int8 **)v21)
      || *sub_10001EE40((unsigned __int8 **)&v23) != 3)
    {
LABEL_17:
      sub_1000F0778(a2);
    }
    else
    {
      char v20 = sub_10001EE40((unsigned __int8 **)v35);
      sub_1000F0B28(a2, (uint64_t)v20, &v37[2]);
    }
  }
  else
  {
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC(a2);
    sub_100016EAC(a2);
    *(void *)(a2 + 16) = 0;
  }
  sub_100016EAC((uint64_t)v37);
  sub_100016B28(&v37[1], LOBYTE(v37[0]));
}

void sub_1000F0B1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000F0B28(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_100016EAC(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC(a1);
  *(void *)(a1 + 16) = *a3;
  return a1;
}

BOOL sub_1000F0B8C(uint64_t a1)
{
  memset(&v11, 170, sizeof(v11));
  sub_10005A7F4(&v11);
  memset(v32, 170, sizeof(v32));
  *(void *)((char *)&v32[-1] + (void)*(v31 - 3)) = v2;
  long long v3 = (std::ios_base *)((char *)&v32[-1] + (void)*(v31 - 3));
  std::ios_base::init(v3, v32);
  v3[1].__vftable = 0;
  v3[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  std::ofstream::open();
  if ((*((unsigned char *)&v32[3] + (void)*(v31 - 3)) & 5) != 0)
  {
    long long v4 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_1000F1FC8(v4);
    }
    BOOL v5 = 0;
  }
  else
  {
    memset(v10, 170, sizeof(v10));
    LODWORD(v12) = 1;
    sub_100015438(&v13, "addTransform");
    int v15 = 2;
    sub_100015438(v16, "removeTransforms");
    int v17 = 3;
    sub_100015438(v18, "addEvent");
    int v19 = 4;
    sub_100015438(v20, "removeEvents");
    int v21 = 5;
    sub_100015438(v22, "addModifyEvent");
    int v23 = 6;
    sub_100015438(v24, "removeModifyEvents");
    int v25 = 7;
    sub_100015438(v26, "addExternalConfiguration");
    int v27 = 8;
    sub_100015438(v28, "removeExternalConfigurations");
    int v29 = 0;
    sub_100015438(v30, "header");
    sub_1000F1788((uint64_t)v10, (int *)&v12, 9);
    uint64_t v6 = 288;
    do
    {
      if (*((char *)&v12 + v6 - 1) < 0) {
        operator delete(*(void **)((char *)&v11.__r_.__value_.__l.__data_ + v6));
      }
      v6 -= 32;
    }
    while (v6);
    memset(__p, 170, sizeof(__p));
    sub_100015438(__p, "");
    long long v14 = 0;
    long long v7 = operator new(0x20uLL);
    *long long v7 = off_10015A9F8;
    v7[1] = v10;
    _OWORD v7[2] = &v31;
    void v7[3] = __p;
    long long v14 = v7;
    BOOL v5 = sub_1000F1094(a1, (uint64_t)&v12);
    sub_1000E3EF4(&v12);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v32[-1] + (void)*(v31 - 3)), *(_DWORD *)((char *)&v32[3] + (void)*(v31 - 3)) | 4);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_1000F1B88((uint64_t)v10, v10[1]);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1000F1050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    std::ostream::~ostream();
    std::ios::~ios();
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000F1094(uint64_t a1, uint64_t a2)
{
  memset(v25, 170, 24);
  sub_1000F07B4(a1, (uint64_t)v25);
  long long v4 = *(uint64_t **)&v25[16];
  if (v25[0] != 1 || *(void *)&v25[16] == 0)
  {
    sub_100016EAC((uint64_t)v25);
    sub_100016B28((uint64_t **)&v25[8], v25[0]);
  }
  else
  {
    int v6 = sub_1000F1608(a2, 0);
    sub_100016EAC((uint64_t)v25);
    sub_100016B28((uint64_t **)&v25[8], v25[0]);
    if (v6)
    {
      while (1)
      {
        long long v7 = *(uint64_t **)(a1 + 32);
        BOOL v8 = v4 == v7;
        if (v4 == v7) {
          return v8;
        }
        memset(v26, 170, sizeof(v26));
        sub_1000F05F4(a1, v4, v26);
        long long v4 = v26[2];
        if (!v26[2]) {
          goto LABEL_20;
        }
        *(void *)&uint8_t v25[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v25 = v9;
        *(_OWORD *)&v25[16] = v9;
        sub_10003A370((uint64_t)v26, "addTransform", (uint64_t)v25);
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 1);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "removeTransforms", (uint64_t)&__p);
        uint64_t v10 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v10;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 2);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "addEvent", (uint64_t)&__p);
        std::string v11 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v11;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 3);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "removeEvents", (uint64_t)&__p);
        uint64_t v12 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v12;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 4);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "addModifyEvent", (uint64_t)&__p);
        uint64_t v13 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v13;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 5);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "removeModifyEvents", (uint64_t)&__p);
        long long v14 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v14;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 6);
          goto LABEL_29;
        }
        sub_10003A370((uint64_t)v26, "addExternalConfiguration", (uint64_t)&__p);
        int v15 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v15;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p)) {
          break;
        }
        sub_10003A370((uint64_t)v26, "removeExternalConfigurations", (uint64_t)&__p);
        long long v16 = __p;
        *(_OWORD *)&unsigned char v25[8] = v23;
        *(_OWORD *)&v25[24] = v24;
        *(void *)&long long v24 = 0;
        long long v23 = 0uLL;
        std::string __p = v26;
        *((void *)&v24 + 1) = 0x8000000000000000;
        *(void *)int v25 = v16;
        sub_1000157EC((unsigned __int8 **)&__p);
        if (!sub_1000205D8((unsigned __int8 **)v25, (unsigned __int8 **)&__p))
        {
          sub_10001EE40((unsigned __int8 **)v25);
          char v19 = sub_1000F1608(a2, 8);
LABEL_29:
          if (v19) {
            goto LABEL_30;
          }
          goto LABEL_20;
        }
        int v17 = qword_10015ED90;
        if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR))
        {
          sub_100007460((uint64_t)v26, -1, 0x20u, 0, 1, &__p);
          p_p = &__p;
          if (v23 < 0) {
            p_p = __p;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          unint64_t v28 = p_p;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[NdJson Config] ERROR: Unknown config key encountered while parsing ndjson config: %{public}s", buf, 0xCu);
          if (SHIBYTE(v23) < 0) {
            operator delete(__p);
          }
        }
        if (sub_1000F1608(a2, 9))
        {
LABEL_30:
          int v18 = 0;
          goto LABEL_31;
        }
LABEL_20:
        int v18 = 1;
LABEL_31:
        sub_100016EAC((uint64_t)v26);
        sub_100016B28(&v26[1], LOBYTE(v26[0]));
        if (v18) {
          return v8;
        }
      }
      sub_10001EE40((unsigned __int8 **)v25);
      char v19 = sub_1000F1608(a2, 7);
      goto LABEL_29;
    }
  }
  return 0;
}

void sub_1000F15F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1608(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1000F1688(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10015A958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F16A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10015A958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000F16FC(uint64_t a1)
{
  return sub_1000F0578(a1 + 24);
}

void sub_1000F1708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10015A9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F1728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10015A9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000F177C(uint64_t a1)
{
  return sub_100065AE8(a1 + 24);
}

uint64_t sub_1000F1788(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_1000F1808((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1000F17F0(_Unwind_Exception *a1)
{
  sub_1000F1B88(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000F1808(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_1000F18C4(a1, a2, &v9, &v8, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_1000F1A6C((uint64_t)a1, a4, v10);
    sub_1000187B0(a1, (uint64_t)v9, v6, v10[0]);
    return v10[0];
  }
  return result;
}

uint64_t *sub_1000F18C4(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_1000F1A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  int v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  unsigned __int8 v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_100017424(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1000F1B0C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000F1B28(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1000F1B28(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1000F1B88(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000F1B88(a1, *(void *)a2);
    sub_1000F1B88(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void sub_1000F1BF0()
{
}

__n128 sub_1000F1C04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_10015A9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1000F1C58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10015A9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000F1C90(uint64_t a1, int *a2, uint64_t a3)
{
  int v24 = *a2;
  if (v24 != 9)
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    long long v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v22, 0, 0, 0, 1);
    sub_100016A10((uint64_t)v20, a3);
    uint64_t v5 = *(uint64_t ***)(a1 + 8);
    __p[0] = &v24;
    int v6 = sub_1000F1F00(v5, &v24, (uint64_t)&unk_100117318, (_DWORD **)__p);
    int v7 = sub_10001DA78((unsigned __int8 *)&v22, (const void **)v6 + 5);
    sub_100016EAC((uint64_t)v20);
    char v8 = *(unsigned char *)v7;
    *(unsigned char *)int v7 = v20[0];
    v20[0] = v8;
    long long v9 = (uint64_t *)v7[1];
    v7[1] = (uint64_t)v21;
    int v21 = v9;
    sub_100016EAC((uint64_t)v7);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
    uint64_t v10 = *(void *)(a1 + 24);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(void *)(a1 + 24);
    }
    else {
      uint64_t v12 = *(void *)v10;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    BOOL v14 = sub_10008AD70(*(void **)(a1 + 16), v12, v13);
    sub_100007460((uint64_t)&v22, -1, 0x20u, 0, 0, __p);
    if ((v19 & 0x80u) == 0) {
      int v15 = __p;
    }
    else {
      int v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    sub_10008AD70(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    std::string::assign(*(std::string **)(a1 + 24), "\n");
    sub_100016EAC((uint64_t)&v22);
    sub_100016B28(&v23, v22);
  }
  return 1;
}

void sub_1000F1E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100016EAC((uint64_t)&a18);
  sub_100016B28(&a19, a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1EB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000F1EF4()
{
}

uint64_t **sub_1000F1F00(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    unsigned __int8 v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_1000187B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1000F1FC8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[NdJson Config] ERROR: Failed to open ndjson dev tasked config file for writing.", v1, 2u);
}

void *sub_1000F2038(void *a1, uint64_t a2)
{
  int v4 = sub_1000D06CC(a1);
  *int v4 = off_10015AA78;
  sub_100016A10((uint64_t)(v4 + 1), a2);
  return a1;
}

uint64_t sub_1000F2090(uint64_t a1)
{
  sub_100016EAC(a1 + 8);
  sub_100016B28((uint64_t **)(a1 + 16), *(unsigned __int8 *)(a1 + 8));

  return nullsub_13(a1);
}

void sub_1000F20DC(uint64_t a1)
{
  sub_1000F2090(a1);

  operator delete();
}

uint64_t sub_1000F2114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v17[0] = v4;
    v17[1] = v4;
    sub_1000135DC(a1 + 8, (const std::string::value_type **)off_1001521A0, (uint64_t)v17);
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v14 = v5;
    long long v15 = v5;
    sub_1000136C8(&v14, v3);
    sub_100013648((unsigned __int8 **)&v14);
    if (sub_100013964((unsigned __int8 **)v17, (unsigned __int8 **)&v14)) {
      goto LABEL_9;
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v14 = v6;
    long long v15 = v6;
    int v7 = sub_100063118((unsigned __int8 **)v17);
    sub_1000239E4((uint64_t)v7, "uuid", (uint64_t)&v14);
    int v8 = sub_100063118((unsigned __int8 **)v17);
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v12[0] = v9;
    v12[1] = v9;
    sub_1000136C8(v12, (uint64_t)v8);
    sub_100013648((unsigned __int8 **)v12);
    if (sub_100013964((unsigned __int8 **)&v14, (unsigned __int8 **)v12)
      || *sub_100013AAC((unsigned __int8 **)&v14) != 3)
    {
LABEL_9:
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      sub_100016EAC(a2);
      return sub_100016EAC(a2);
    }
    else
    {
      int v10 = sub_100013AAC((unsigned __int8 **)v17);
      return sub_100016A10(a2, (uint64_t)v10);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC(a2);
    return sub_100016EAC(a2);
  }
}

void sub_1000F22CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000F22D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)(a1 + 8) != 1) {
    return 0;
  }
  *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000F2114(a1, (uint64_t)&v27);
  if (v27 == 1 && !sub_1000F1608(a2, 0))
  {
    sub_100016EAC((uint64_t)&v27);
    sub_100016B28((uint64_t **)&v27 + 1, v27);
    return 0;
  }
  sub_100016EAC((uint64_t)&v27);
  sub_100016B28((uint64_t **)&v27 + 1, v27);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v4;
  long long v28 = v4;
  sub_1000135DC(v2, (const std::string::value_type **)off_100152188, (uint64_t)&v27);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v5;
  long long v25 = v5;
  sub_1000136C8(&v24, v2);
  sub_100013648((unsigned __int8 **)&v24);
  if (!sub_100013964((unsigned __int8 **)&v27, (unsigned __int8 **)&v24)
    && *sub_100013AAC((unsigned __int8 **)&v27) == 2)
  {
    long long v6 = sub_100013AAC((unsigned __int8 **)&v27);
    unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v24 = v7;
    long long v25 = v7;
    sub_1000136C8(&v24, (uint64_t)v6);
    sub_100014064((unsigned __int8 **)&v24);
    unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v21 = v8;
    long long v22 = v8;
    sub_1000136C8(&v21, (uint64_t)v6);
    sub_100013648((unsigned __int8 **)&v21);
    while (!sub_100013964((unsigned __int8 **)&v24, (unsigned __int8 **)&v21))
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      long long v9 = sub_100013AAC((unsigned __int8 **)&v24);
      sub_100016A10((uint64_t)&v19, (uint64_t)v9);
      int v10 = sub_1000F1608(a2, 1);
      sub_100016EAC((uint64_t)&v19);
      sub_100016B28(&v20, v19);
      if (!v10) {
        return 0;
      }
      sub_100013C64((unsigned __int8 **)&v24);
    }
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v11;
  long long v28 = v11;
  sub_1000135DC(v2, (const std::string::value_type **)off_100152190, (uint64_t)&v27);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v12;
  long long v25 = v12;
  sub_1000136C8(&v24, v2);
  sub_100013648((unsigned __int8 **)&v24);
  if (!sub_100013964((unsigned __int8 **)&v27, (unsigned __int8 **)&v24)
    && *sub_100013AAC((unsigned __int8 **)&v27) == 2)
  {
    unint64_t v13 = sub_100013AAC((unsigned __int8 **)&v27);
    unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v24 = v14;
    long long v25 = v14;
    sub_1000136C8(&v24, (uint64_t)v13);
    sub_100014064((unsigned __int8 **)&v24);
    unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v21 = v15;
    long long v22 = v15;
    sub_1000136C8(&v21, (uint64_t)v13);
    sub_100013648((unsigned __int8 **)&v21);
    while (!sub_100013964((unsigned __int8 **)&v24, (unsigned __int8 **)&v21))
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      unint64_t v16 = sub_100013AAC((unsigned __int8 **)&v24);
      sub_100016A10((uint64_t)&v19, (uint64_t)v16);
      char v17 = sub_1000F1608(a2, 7);
      sub_100016EAC((uint64_t)&v19);
      sub_100016B28(&v20, v19);
      if ((v17 & 1) == 0) {
        return 0;
      }
      sub_100013C64((unsigned __int8 **)&v24);
    }
  }
  return 1;
}

void sub_1000F25F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000F2610(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  *(uint64_t *)((char *)result + *(void *)(v2 - 88)) = a2[1];
  return result;
}

void sub_1000F269C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v3);
  sub_1000F2750(&v3, a2);
  sub_100016EAC((uint64_t)&v3);
  sub_100016B28((uint64_t **)&v3.__r_.__value_.__l.__size_, v3.__r_.__value_.__s.__data_[0]);
}

void sub_1000F273C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

std::string *sub_1000F2750@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  if (result->__r_.__value_.__s.__data_[0] != 1) {
    goto LABEL_5;
  }
  uint64_t v3 = (uint64_t)result;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v4;
  v9[1] = v4;
  sub_1000239E4((uint64_t)result, "uuid", (uint64_t)v9);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v5;
  v7[1] = v5;
  sub_1000136C8(v7, v3);
  sub_100013648((unsigned __int8 **)v7);
  __n128 result = (std::string *)sub_100013964((unsigned __int8 **)v9, (unsigned __int8 **)v7);
  if (result) {
    goto LABEL_5;
  }
  __n128 result = (std::string *)sub_100013AAC((unsigned __int8 **)v9);
  if (result->__r_.__value_.__s.__data_[0] == 3)
  {
    long long v6 = sub_100013AAC((unsigned __int8 **)v9);
    return sub_100015064((uint64_t)v6, a2);
  }
  else
  {
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  return result;
}

uint64_t sub_1000F2840(uint64_t a1, uint64_t a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_1000F269C(a2, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v4 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v4;
    }
    goto LABEL_5;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 72))(a1, &__p);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1000F2914(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000F2920(uint64_t a1, uint64_t a2)
{
  memset(&__p, 170, sizeof(__p));
  sub_1000F269C(a2, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v4 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v4;
    }
    goto LABEL_5;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 88))(a1, &__p);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1000F29F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000F2A00()
{
  os_log_t v0 = (char *)operator new(0x40uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)os_log_t v0 = off_10015AAF8;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((_DWORD *)v0 + 14) = 1065353216;
  sub_1000C9DEC();
}

void sub_1000F2AC8(_Unwind_Exception *a1)
{
  sub_1000147D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected integer");
    goto LABEL_6;
  }
  int v5 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = (unsigned __int8 *)(v2 - 16);
  if ((v5 - 5) >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected integer");
LABEL_6:
  }
  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v4, &v10);
  uint64_t v7 = v10;
  sub_100016AC4(v3, *(void *)(a2 + 32) - 16);
  return v7;
}

void sub_1000F2BD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected integer");
    goto LABEL_9;
  }
  int v6 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = (unsigned __int8 *)(v2 - 16);
  int v5 = v6;
  if (!v6)
  {
    sub_100016AC4(a2 + 24, (uint64_t)v4);
    return 0;
  }
  if ((v5 - 5) >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected integer");
LABEL_9:
  }
  uint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(v4, &v11);
  uint64_t v8 = v11;
  sub_100016AC4(v3, *(void *)(a2 + 32) - 16);
  return v8;
}

void sub_1000F2D08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2D28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 24) == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected number type");
    goto LABEL_10;
  }
  int v8 = *(unsigned __int8 *)(v3 - 16);
  int v6 = (char *)(v3 - 16);
  int v7 = v8;
  if ((v8 - 5) > 2)
  {
    if (v7 == 4)
    {
      unsigned __int8 v13 = -86;
      sub_100072884(v6, &v13);
      uint64_t v11 = v13;
      sub_100016AC4(v4, *(void *)(a1 + 32) - 16);
      *(unsigned char *)a2 = 5;
      *(void *)(a2 + 8) = v11;
      sub_100016EAC(a2);
      return sub_100016EAC(a2);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected number type");
LABEL_10:
  }
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_100016A10(a2, (uint64_t)v6);
  uint64_t v9 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v4, v9);
}

void sub_1000F2EA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = a2 + 24;
  if (*(void *)(a2 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected BOOL type");
    goto LABEL_9;
  }
  int v7 = *(unsigned __int8 *)(v2 - 16);
  int v5 = (char *)(v2 - 16);
  int v6 = v7;
  if (v7 != 4)
  {
    if ((v6 - 5) <= 2)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
      long long v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_100016A10((uint64_t)&v11, (uint64_t)v5);
      sub_100016AC4(v3, *(void *)(a2 + 32) - 16);
      uint64_t v8 = sub_1000D2608((unsigned __int8 *)&v11, 0);
      sub_100016EAC((uint64_t)&v11);
      sub_100016B28(&v12, v11);
      return v8;
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected BOOL type");
LABEL_9:
  }
  LOBYTE(v11) = -86;
  sub_100072884(v5, &v11);
  uint64_t v8 = (_BYTE)v11 != 0;
  sub_100016AC4(v3, *(void *)(a2 + 32) - 16);
  return v8;
}

void sub_1000F3020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F3040@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected map");
    goto LABEL_8;
  }
  if (*(unsigned char *)(v4 - 16) != 1)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected map");
LABEL_8:
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)a2 = 1;
  a2[1] = *(void *)(v4 - 8);
  sub_100016EAC(v4 - 16);
  *(unsigned char *)(v4 - 16) = 0;
  *(void *)(v4 - 8) = 0;
  sub_100016EAC((uint64_t)a2);
  uint64_t v6 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v6);
}

void sub_1000F3128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F3140@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected string/null");
LABEL_11:
  }
  int v5 = *(unsigned __int8 *)(v4 - 16);
  if (*(unsigned char *)(v4 - 16)) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected string/null");
    goto LABEL_11;
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)a2 = v5;
  a2[1] = *(void *)(v4 - 8);
  sub_100016EAC(v4 - 16);
  *(unsigned char *)(v4 - 16) = 0;
  *(void *)(v4 - 8) = 0;
  sub_100016EAC((uint64_t)a2);
  uint64_t v8 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v8);
}

void sub_1000F3228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F3240(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10015AAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F3260(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10015AAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000F32B4(uint64_t a1)
{
  return sub_1000F32C0(a1 + 24);
}

uint64_t sub_1000F32C0(uint64_t a1)
{
  sub_1000F32FC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000F32FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1000C76A8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1000F3340(uint64_t a1, uint64_t a2, const char *a3)
{
  sub_1000F3B48(a3, a2, &v7);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &off_10015ABA0;
  long long v5 = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_1000F33C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = (void *)sub_1000F3340(a1, a4, a2);
  *BOOL v6 = off_10015AB48;
  void v6[5] = 0;
  std::string v7 = v6 + 5;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)uint64_t v8 = 0;
  uint64_t v9 = v8 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100017424(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 3) = *(void *)(a3 + 16);
  }
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  unint64_t v11 = v8;
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  unint64_t v11 = (char *)*v7;
  *std::string v7 = (uint64_t)v8;
  sub_1000F42C8((uint64_t *)&v11);
  return a1;
}

void sub_1000F34AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  *uint64_t v10 = 0;
  sub_1000F42C8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000F3494);
}

void sub_1000F34E4(_Unwind_Exception *a1)
{
  sub_1000F42C8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v8 = (void *)sub_1000F3340(a1, a5, a2);
  *uint64_t v8 = off_10015AB48;
  void v8[5] = 0;
  uint64_t v9 = v8 + 5;
  uint64_t v10 = (atomic_uint *)operator new(0x50uLL);
  sub_1000F4110((uint64_t)v10, a3, a4);
  uint64_t v12 = (uint64_t)v10;
  atomic_fetch_add(v10, 1u);
  uint64_t v12 = *v9;
  *uint64_t v9 = (uint64_t)v10;
  sub_1000F42C8(&v12);
  return a1;
}

void sub_1000F35B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  *uint64_t v10 = 0;
  sub_1000F42C8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000F3598);
}

void sub_1000F35EC(_Unwind_Exception *a1)
{
  sub_1000F42C8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::filesystem::filesystem_error::~filesystem_error(boost::filesystem::filesystem_error *this)
{
  *(void *)this = off_10015AB48;
  sub_1000F42C8((uint64_t *)this + 5);

  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_10015AB48;
  sub_1000F42C8((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);

  operator delete(v2);
}

const char *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  imp = this[2].__imp_.__imp_;
  if (imp)
  {
    if (imp[79] < 0)
    {
      if (*((void *)imp + 8)) {
        goto LABEL_28;
      }
    }
    else if (imp[79])
    {
      goto LABEL_28;
    }
    uint64_t v3 = (char *)std::runtime_error::what(this);
    sub_1000F4280((std::string *)(this[2].__imp_.__imp_ + 56), v3);
    imp = this[2].__imp_.__imp_;
    if (imp[31] < 0)
    {
      if (!*((void *)imp + 2)) {
        goto LABEL_17;
      }
    }
    else if (!imp[31])
    {
      goto LABEL_17;
    }
    std::string::append((std::string *)(imp + 56), ": \"", 3uLL);
    uint64_t v4 = this[2].__imp_.__imp_;
    std::string v7 = (const std::string::value_type *)*((void *)v4 + 1);
    long long v5 = v4 + 8;
    BOOL v6 = v7;
    int v8 = v5[23];
    if (v8 >= 0) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v6;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)v5 + 1);
    }
    std::string::append((std::string *)v5 + 2, v9, v10);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
    imp = this[2].__imp_.__imp_;
LABEL_17:
    if (imp[55] < 0)
    {
      if (!*((void *)imp + 5)) {
        goto LABEL_28;
      }
    }
    else if (!imp[55])
    {
LABEL_28:
      __n128 result = imp + 56;
      if (imp[79] < 0) {
        return *(const char **)result;
      }
      return result;
    }
    std::string::append((std::string *)(imp + 56), ", \"", 3uLL);
    unint64_t v11 = this[2].__imp_.__imp_;
    long long v14 = (const std::string::value_type *)*((void *)v11 + 4);
    uint64_t v12 = v11 + 32;
    unsigned __int8 v13 = v14;
    int v15 = v12[23];
    if (v15 >= 0) {
      unint64_t v16 = v12;
    }
    else {
      unint64_t v16 = v13;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *((unsigned __int8 *)v12 + 23);
    }
    else {
      std::string::size_type v17 = *((void *)v12 + 1);
    }
    std::string::append((std::string *)v12 + 1, v16, v17);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
    imp = this[2].__imp_.__imp_;
    goto LABEL_28;
  }

  return std::runtime_error::what(this);
}

uint64_t sub_1000F3860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v13[0] = 0;
    if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
      int v9 = a1 != 0;
    }
    else {
      int v9 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, a1);
    }
    uint64_t v10 = 2;
    LODWORD(v13[0]) = a1;
    if (v9) {
      uint64_t v10 = 3;
    }
    v13[1] = &boost::system::detail::system_cat_holder<void>::instance;
    _OWORD v13[2] = v10;
    boost::filesystem::filesystem_error::filesystem_error(exception, a4, a2, v13);
  }
  if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = a1 != 0;
  }
  else {
    uint64_t result = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, a1);
  }
  uint64_t v7 = 2;
  if (result) {
    uint64_t v7 = 3;
  }
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(void *)(a3 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a3 + 16) = v7;
  return result;
}

void sub_1000F39BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F39D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    v15[0] = 0;
    if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
      int v10 = a1 != 0;
    }
    else {
      int v10 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, a1);
    }
    uint64_t v11 = 2;
    LODWORD(v15[0]) = a1;
    if (v10) {
      uint64_t v11 = 3;
    }
    v15[1] = &boost::system::detail::system_cat_holder<void>::instance;
    _OWORD v15[2] = v11;
    boost::filesystem::filesystem_error::filesystem_error(exception, a5, a2, a3, v15);
  }
  if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
    uint64_t result = a1 != 0;
  }
  else {
    uint64_t result = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, a1);
  }
  uint64_t v8 = 2;
  if (result) {
    uint64_t v8 = 3;
  }
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(void *)(a4 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(void *)(a4 + 16) = v8;
  return result;
}

void sub_1000F3B34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F3B48(const char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1)
  {
    std::string::size_type v6 = strlen(a1);
    std::string::append(a3, a1, v6);
    std::string::append(a3, ": ", 2uLL);
  }
  sub_1000F3C58(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000F3BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3C30(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

std::string *sub_1000F3C58@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10009EC08((unsigned int *)a1, a2);
  std::string::append(a2, " [", 2uLL);
  sub_1000F3DAC((int *)a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a1 + 16) >= 4uLL)
  {
    std::string::append(a2, " at ", 4uLL);
    unint64_t v6 = *(void *)(a1 + 16);
    if (v6 <= 3) {
      uint64_t v7 = off_10015ABB8;
    }
    else {
      uint64_t v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
    }
    sub_1000F3F78((uint64_t)v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a2, "]", 1uLL);
}

void sub_1000F3D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000F3DAC@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      sub_100015438(a2, "std:");
      long long v5 = (const char *)(*(uint64_t (**)(void))(**((void **)a1 + 1) + 16))(*((void *)a1 + 1));
      std::string::size_type v6 = strlen(v5);
      std::string::append(a2, v5, v6);
      sub_1000F40E4(__s, 0x20uLL, ":%d", v7, v8, v9, v10, v11, *a1);
      std::string::size_type v12 = strlen(__s);
      return std::string::append(a2, __s, v12);
    }
    long long v14 = (uint64_t (***)())*((void *)a1 + 1);
  }
  else
  {
    long long v14 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  uint64_t v15 = (char *)((uint64_t (*)(uint64_t (***)()))**v14)(v14);
  sub_100015438(a2, v15);
  int v21 = *a1;
  if (*((void *)a1 + 2) == 1) {
    v21 += 1000 * (*((void *)a1 + 1) % 0x1FFFF7uLL);
  }
  sub_1000F40E4(__s, 0x20uLL, ":%d", v16, v17, v18, v19, v20, v21);
  std::string::size_type v22 = strlen(__s);
  return std::string::append(a2, __s, v22);
}

void sub_1000F3F58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3F78(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 16))
  {
    sub_100015438(a2, *(char **)a1);
    sprintf(__s, ":%ld", *(unsigned int *)(a1 + 16));
    std::string::size_type v4 = strlen(__s);
    std::string::append(a2, __s, v4);
    if (*(_DWORD *)(a1 + 20))
    {
      sprintf(__s, ":%ld", *(unsigned int *)(a1 + 20));
      std::string::size_type v5 = strlen(__s);
      std::string::append(a2, __s, v5);
    }
    std::string::append(a2, " in function '", 0xEuLL);
    std::string::size_type v6 = *(const char **)(a1 + 8);
    std::string::size_type v7 = strlen(v6);
    std::string::append(a2, v6, v7);
    std::string::push_back(a2, 39);
  }
  else
  {
    sub_100015438(a2, "(unknown source location)");
  }
}

void sub_1000F40C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F40E4(char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

uint64_t sub_1000F4110(uint64_t a1, long long *a2, long long *a3)
{
  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  std::string::size_type v6 = (unsigned char *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100017424(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)std::string::size_type v6 = v7;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_1000F41A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000F41C0(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    long long v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    long long v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_1000F4280(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_1000F41C0(a1, __s, v4);
}

uint64_t *sub_1000F42C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    if (*(char *)(v2 + 79) < 0) {
      operator delete(*(void **)(v2 + 56));
    }
    if (*(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

DIR *sub_1000F433C@<X0>(DIR **a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  uint64_t result = *a1;
  if (*a1 && (*a1 = 0, uint64_t result = (DIR *)closedir(result), result))
  {
    uint64_t v7 = *__error();
    return (DIR *)sub_1000F43D0(a3, v7, &boost::system::detail::system_cat_holder<void>::instance);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void *sub_1000F43D0(void *a1, uint64_t a2, void *a3)
{
  int v4 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a3[1] >> 1 == 0x595588BD12BF6FE8) {
    int v6 = a2 != 0;
  }
  else {
    int v6 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 48))(a3, a2);
  }
  uint64_t v7 = 2;
  *(_DWORD *)a1 = v4;
  if (v6) {
    uint64_t v7 = 3;
  }
  a1[1] = a3;
  a1[2] = v7;
  return a1;
}

atomic_uint **sub_1000F4470(dirent **a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    if (a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      long long v33 = 0;
      std::string::size_type v9 = operator new(0x40uLL, &std::nothrow);
      if (v9)
      {
        *(_DWORD *)std::string::size_type v9 = 0;
        _OWORD v9[2] = 0;
        void v9[3] = 0;
        v9[1] = 0;
        *((_DWORD *)v9 + 8) = 0;
        *(void *)((char *)v9 + 36) = 0xFFFFLL;
        *((_DWORD *)v9 + 11) = 0xFFFF;
        v9[6] = 0;
        v9[7] = 0;
        long long v30 = (atomic_uint *)v9;
        atomic_fetch_add((atomic_uint *volatile)v9, 1u);
        unint64_t v10 = (atomic_uint *)v9;
        uint64_t v11 = v33;
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v10 = 0;
      }
      long long v30 = v11;
      long long v33 = v10;
      sub_1000F59B0(&v30);
      unsigned __int8 v13 = v33;
      if (!v33)
      {
        if ((unint64_t)qword_10015ECE8 >> 1 == 0x595588BD12BF6FE8
          || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
        {
          uint64_t v27 = 3;
        }
        else
        {
          uint64_t v27 = 2;
        }
        *a4 = 12;
        a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
        a4[2] = v27;
        return sub_1000F59B0(&v33);
      }
    }
    else
    {
      long long v33 = 0;
      std::string::size_type v12 = operator new(0x40uLL);
      *(_DWORD *)std::string::size_type v12 = 0;
      _OWORD v12[2] = 0;
      uint64_t v12[3] = 0;
      v12[1] = 0;
      *((_DWORD *)v12 + 8) = 0;
      *(void *)((char *)v12 + 36) = 0xFFFFLL;
      *((_DWORD *)v12 + 11) = 0xFFFF;
      v12[6] = 0;
      v12[7] = 0;
      long long v30 = (atomic_uint *)v12;
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
      long long v30 = v33;
      long long v33 = (atomic_uint *)v12;
      sub_1000F59B0(&v30);
      unsigned __int8 v13 = v33;
    }
    if (*(char *)(a2 + 23) >= 0) {
      long long v14 = (const char *)a2;
    }
    else {
      long long v14 = *(const char **)a2;
    }
    uint64_t v15 = opendir(v14);
    *((void *)v13 + 6) = v15;
    if (v15)
    {
      char v16 = 1;
      uint64_t v17 = 46;
    }
    else
    {
      uint64_t v18 = *__error();
      long long v30 = 0;
      if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
        int v19 = v18 != 0;
      }
      else {
        int v19 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v18);
      }
      uint64_t v20 = 2;
      LODWORD(v30) = v18;
      if (v19) {
        uint64_t v20 = 3;
      }
      unint64_t v31 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
      uint64_t v32 = v20;
      if (v20)
      {
        __str.__r_.__value_.__r.__words[0] = 13;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
        char v24 = sub_1000F4F08((uint64_t *)&v30, (uint64_t)&__str);
        if ((a3 & 1) == 0 || (v24 & 1) == 0)
        {
          uint64_t v25 = v30;
          if (v32 == 1) {
            uint64_t v25 = v30 + 1000 * (v31 % 0x1FFFF7);
          }
          if (v25)
          {
            sub_1000F3860(v25, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
          }
          else if (a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
          }
        }
        return sub_1000F59B0(&v33);
      }
      uint64_t v17 = 0;
      char v16 = 0;
    }
    int v21 = v33;
    if (*((void *)v33 + 6))
    {
      std::string::size_type v22 = *a1;
      *a1 = (dirent *)v33;
      long long v33 = (atomic_uint *)v22;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v17;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v16;
      if (*(char *)(a2 + 23) < 0) {
        sub_100017424(&__str, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __str = *(std::string *)a2;
      }
      sub_1000F6CA4((uint64_t)&__str, &__p);
      std::string::operator=((std::string *)(v21 + 2), &__str);
      *(void *)&long long v23 = 0xFFFF00000000;
      *((void *)&v23 + 1) = 0xFFFF00000000;
      *((_OWORD *)v21 + 2) = v23;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v15) {
          return sub_1000F59B0(&v33);
        }
        goto LABEL_32;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v15) {
LABEL_32:
      }
        sub_1000F4968(a1, (uint64_t)a4);
    }
    return sub_1000F59B0(&v33);
  }

  return (atomic_uint **)sub_1000F3860(2, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
}

void sub_1000F4854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_10015ECE8 >> 1 == 0x595588BD12BF6FE8
        || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
      {
        uint64_t v28 = 3;
      }
      else
      {
        uint64_t v28 = 2;
      }
      *long long v23 = 12;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      _OWORD v23[2] = v28;
      a23 = *v24;
      uint64_t *v24 = 0;
      sub_1000F59B0((atomic_uint **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x1000F4768);
    }
    __cxa_rethrow();
  }
  sub_1000F59B0((atomic_uint **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_1000F4958()
{
}

void sub_1000F4968(dirent **a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  memset(&__src, 0, sizeof(__src));
  int v29 = 0;
  uint64_t v28 = 0;
  int v4 = *a1;
  long long v5 = *(DIR **)&(*a1)->d_name[27];
  while (1)
  {
    uint64_t v27 = 0;
    *__error() = 0;
    uint64_t v6 = (dirent **)&v4->d_name[35];
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      std::string::size_type v9 = readdir(v5);
      uint64_t v27 = v9;
      if (v9)
      {
LABEL_14:
        sub_1000F4280(&__src, v9->d_name);
        memset(&__p, 0, sizeof(__p));
        uint64_t v28 = 0;
        int v29 = 0;
        goto LABEL_15;
      }
      uint64_t v8 = *__error();
      if (v8) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v7 = *v6;
      if (!*v6)
      {
        uint64_t v20 = sub_1000F58FC() + 25;
        uint64_t v15 = (dirent *)malloc(v20);
        *uint64_t v6 = v15;
        if (!v15)
        {
          uint64_t v8 = 12;
LABEL_31:
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8
            || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8))
          {
            std::string::size_type v10 = 3;
          }
          else
          {
            std::string::size_type v10 = 2;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = v8;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          __p.__r_.__value_.__r.__words[2] = v10;
          goto LABEL_9;
        }
        uint64_t v7 = v15;
        bzero(v15, v20);
      }
      uint64_t v8 = readdir_r(v5, v7, &v27);
      if (v8) {
        goto LABEL_31;
      }
    }
    std::string::size_type v9 = v27;
    if (v27) {
      goto LABEL_14;
    }
    sub_1000F433C((DIR **)&v4->d_name[27], (void **)&v4->d_name[35], &__p);
    LODWORD(v8) = __p.__r_.__value_.__l.__data_;
    std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
LABEL_9:
    uint64_t v28 = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4);
    int v29 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if ((v10 & 1) != 0 && (v10 != 1 || v8))
    {
      uint64_t v27 = *a1;
      uint64_t v18 = v27;
      *a1 = 0;
      sub_10009EF20((char *)&v18->d_seekoff, &__p);
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        int v21 = v8;
        uint64_t v22 = v28;
        int v23 = v29;
        std::string::size_type v24 = v10;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::directory_iterator::operator++", &__p, &v21);
      }
      *(_DWORD *)a2 = v8;
      *(void *)(a2 + 4) = v28;
      *(_DWORD *)(a2 + 12) = v29;
      *(void *)(a2 + 16) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_p = (atomic_uint **)&v27;
      goto LABEL_42;
    }
LABEL_15:
    int v4 = *a1;
    long long v5 = *(DIR **)&(*a1)->d_name[27];
    if (!v5)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1;
      *a1 = 0;
      p_p = (atomic_uint **)&__p;
LABEL_42:
      sub_1000F59B0(p_p);
      goto LABEL_46;
    }
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_srCC_SHA512_CTX c = &__src;
    }
    else {
      p_srCC_SHA512_CTX c = (std::string *)__src.__r_.__value_.__r.__words[0];
    }
    if (p_src->__r_.__value_.__s.__data_[0] != 46) {
      break;
    }
    std::string::size_type v12 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__src
        : (std::string *)__src.__r_.__value_.__r.__words[0];
    int v13 = v12->__r_.__value_.__s.__data_[1];
    if (v13)
    {
      if (v13 != 46) {
        break;
      }
      long long v14 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__src
          : (std::string *)__src.__r_.__value_.__r.__words[0];
      if (v14->__r_.__value_.__s.__data_[2]) {
        break;
      }
    }
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    sub_100017424(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __src;
  }
  sub_1000F720C((std::string *)&v4->d_seekoff);
  sub_1000F6CA4((uint64_t)&v4->d_seekoff, &__p);
  *(void *)&long long v17 = 0xFFFF00000000;
  *((void *)&v17 + 1) = 0xFFFF00000000;
  *(_OWORD *)&v4->d_name[11] = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
}

void sub_1000F4CE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

void sub_1000F4E0C(_Unwind_Exception *a1)
{
}

void sub_1000F4E14(_Unwind_Exception *a1)
{
}

void sub_1000F4E20(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000F4E28);
  }
  sub_100028DD8(a1);
}

const char *sub_1000F4E38()
{
  return "generic";
}

uint64_t sub_1000F4E44(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1000F4E54@<X0>(int __errnum@<W1>, void *a2@<X8>)
{
  uint64_t v3 = strerror(__errnum);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = "Unknown error";
  }

  return sub_100015438(a2, v4);
}

const char *sub_1000F4EA0(int a1, int __errnum, char *a3, uint64_t a4)
{
  int v4 = a3;
  if (a4)
  {
    long long v5 = a3;
    size_t v6 = a4 - 1;
    if (a4 != 1)
    {
      uint64_t v7 = strerror(__errnum);
      if (!v7) {
        return "Unknown error";
      }
      strncpy(v4, v7, v6);
      long long v5 = &v4[v6];
    }
    *long long v5 = 0;
  }
  return v4;
}

uint64_t sub_1000F4F08(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    if (v4 == 1)
    {
      unint64_t v5 = sub_1000F507C(a1);
      uint64_t v7 = v6;
      v15[0] = v5;
      v15[1] = v6;
      uint64_t v13 = sub_1000F51A4((unsigned int *)a2);
      uint64_t v14 = v8;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)v7 + 32))(v7, v5, &v13) & 1) == 0) {
        return (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v14 + 40))(v14, v15, v13);
      }
      return 1;
    }
    std::string::size_type v10 = (uint64_t (***)())a1[1];
  }
  else
  {
    std::string::size_type v10 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  if (((uint64_t (*)(uint64_t (***)(), void, uint64_t))(*v10)[2])(v10, *(unsigned int *)a1, a2)) {
    return 1;
  }
  if (*(void *)(a2 + 8)) {
    uint64_t v11 = *(uint64_t (****)())(a2 + 8);
  }
  else {
    uint64_t v11 = &boost::system::detail::generic_cat_holder<void>::instance;
  }
  std::string::size_type v12 = (*v11)[3];

  return v12();
}

unint64_t sub_1000F507C(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v2 = *a1;
      unint64_t v3 = *a1 & 0xFFFFFFFF00000000;
    }
    else
    {
      LODWORD(v2) = *(_DWORD *)a1;
      uint64_t v4 = a1[1];
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5 == 0xB2AB117A257EDFD1)
      {
        std::system_category();
      }
      else if (v5 == 0xB2AB117A257EDFD0)
      {
        std::generic_category();
      }
      else if (!atomic_load_explicit((atomic_ullong *volatile)(v4 + 16), memory_order_acquire))
      {
        uint64_t v6 = operator new(0x10uLL);
        uint64_t v7 = 0;
        *uint64_t v6 = &off_10015AC40;
        v6[1] = v4;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 16), (unint64_t *)&v7, (unint64_t)v6);
        if (v7)
        {
          (*(void (**)(void *))(*v6 + 8))(v6);
          unint64_t v3 = 0;
          return v3 | v2;
        }
      }
      unint64_t v3 = 0;
    }
  }
  else
  {
    std::system_category();
    unint64_t v3 = 0;
    LODWORD(v2) = 0;
  }
  return v3 | v2;
}

uint64_t sub_1000F51A4(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = *a1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3 == 0xB2AB117A257EDFD1)
  {
    std::system_category();
    return v2;
  }
  if (v3 != 0xB2AB117A257EDFD0)
  {
    if (!atomic_load_explicit((atomic_ullong *volatile)(v1 + 16), memory_order_acquire))
    {
      uint64_t v5 = operator new(0x10uLL);
      uint64_t v6 = 0;
      *uint64_t v5 = &off_10015AC40;
      v5[1] = v1;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v1 + 16), (unint64_t *)&v6, (unint64_t)v5);
      if (v6) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  else
  {
LABEL_4:
    std::generic_category();
  }
  return v2;
}

void sub_1000F5294(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  operator delete(v1);
}

uint64_t sub_1000F52BC(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
}

uint64_t sub_1000F52E4(uint64_t a1)
{
  v3[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  v3[1] = v1;
  return sub_1000F51A4((unsigned int *)v3);
}

uint64_t sub_1000F5338(std::error_category *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (const std::error_category *)*((void *)a3 + 1);
  if (v6 == a1)
  {
    std::string::size_type v9 = (uint64_t (***)())a1[1].__vftable;
    int v17 = *a3;
    uint64_t v18 = v9;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v17);
  }
  if (v6 == std::generic_category()) {
    goto LABEL_14;
  }
  uint64_t v7 = (void *)*((void *)a3 + 1);
  if (qword_10015ECE8 == 0xB2AB117A257EDFD1)
  {
    explicit = std::system_category();
  }
  else if (qword_10015ECE8 == 0xB2AB117A257EDFD0)
  {
    explicit = std::generic_category();
  }
  else
  {
    explicit = (void *)atomic_load_explicit(&qword_10015ECF0, memory_order_acquire);
    if (!explicit)
    {
      explicit = operator new(0x10uLL);
      std::string::size_type v10 = 0;
      void *explicit = &off_10015AC40;
      explicit[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      atomic_compare_exchange_strong(&qword_10015ECF0, (unint64_t *)&v10, (unint64_t)explicit);
      if (v10)
      {
        (*(void (**)(void *))(*explicit + 8))(explicit);
        explicit = v10;
      }
    }
  }
  if (v7 == explicit)
  {
LABEL_14:
    int v17 = *a3;
    uint64_t v18 = &boost::system::detail::generic_cat_holder<void>::instance;
    goto LABEL_15;
  }
  if (v11)
  {
    std::string::size_type v12 = (uint64_t (***)())v11[1];
    int v17 = *a3;
    uint64_t v18 = v12;
LABEL_15:
    std::string::size_type v9 = (uint64_t (***)())a1[1].__vftable;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v17);
  }
  int v14 = ((uint64_t (*)(std::error_category *, uint64_t))a1->default_error_condition)(a1, a2);
  return *((void *)a3 + 1) == v15 && *a3 == v14;
}

uint64_t sub_1000F5548(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (const std::error_category *)*((void *)a2 + 1);
  if (v6 == (const std::error_category *)a1)
  {
    uint64_t v9 = *a2;
    std::string::size_type v10 = *(uint64_t (****)())(a1 + 8);
    uint64_t v29 = 0;
    if ((unint64_t)v10[1] >> 1 == 0x595588BD12BF6FE8)
    {
      int v11 = v9 != 0;
      std::string::size_type v12 = v10;
    }
    else
    {
      int v11 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v10)[6])(v10, v9);
      std::string::size_type v12 = *(uint64_t (****)())(a1 + 8);
    }
    BOOL v13 = v11 == 0;
    uint64_t v14 = 2;
    if (!v13) {
      uint64_t v14 = 3;
    }
    LODWORD(v29) = v9;
    long long v30 = v10;
    uint64_t v31 = v14;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v29, a3);
  }
  if (v6 == std::generic_category()) {
    goto LABEL_20;
  }
  uint64_t v7 = (void *)*((void *)a2 + 1);
  if (qword_10015ECE8 == 0xB2AB117A257EDFD1)
  {
    explicit = std::system_category();
  }
  else if (qword_10015ECE8 == 0xB2AB117A257EDFD0)
  {
    explicit = std::generic_category();
  }
  else
  {
    explicit = (void *)atomic_load_explicit(&qword_10015ECF0, memory_order_acquire);
    if (!explicit)
    {
      explicit = operator new(0x10uLL);
      uint64_t v15 = 0;
      void *explicit = &off_10015AC40;
      explicit[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      atomic_compare_exchange_strong(&qword_10015ECF0, (unint64_t *)&v15, (unint64_t)explicit);
      if (v15)
      {
        (*(void (**)(void *))(*explicit + 8))(explicit);
        explicit = v15;
      }
    }
  }
  if (v7 == explicit)
  {
LABEL_20:
    uint64_t v20 = *a2;
    uint64_t v29 = 0;
    if ((unint64_t)qword_10015ECE8 >> 1 == 0x595588BD12BF6FE8) {
      int v21 = v20 != 0;
    }
    else {
      int v21 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, v20);
    }
    uint64_t v22 = 2;
    if (v21) {
      uint64_t v22 = 3;
    }
    LODWORD(v29) = v20;
    long long v30 = &boost::system::detail::generic_cat_holder<void>::instance;
    uint64_t v31 = v22;
    goto LABEL_36;
  }
  if (v16)
  {
    uint64_t v17 = *a2;
    uint64_t v18 = (uint64_t (***)())v16[1];
    uint64_t v29 = 0;
    if ((unint64_t)v18[1] >> 1 == 0x595588BD12BF6FE8) {
      int v19 = v17 != 0;
    }
    else {
      int v19 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v18)[6])(v18, v17);
    }
    uint64_t v28 = 2;
    if (v19) {
      uint64_t v28 = 3;
    }
    LODWORD(v29) = v17;
    long long v30 = v18;
    uint64_t v31 = v28;
LABEL_36:
    std::string::size_type v12 = *(uint64_t (****)())(a1 + 8);
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v29, a3);
  }
  int v23 = *(uint64_t (****)())(a1 + 8);
  BOOL v24 = v23 == &boost::system::detail::generic_cat_holder<void>::instance;
  BOOL v25 = v23[1] == (uint64_t (**)())qword_10015ECE8;
  if (!qword_10015ECE8) {
    BOOL v25 = v24;
  }
  if (!v25) {
    return 0;
  }
  equivalent_0 = (uint64_t (*)(void))std::generic_category()->equivalent_0;

  return equivalent_0();
}

uint64_t sub_1000F58D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_1000F58FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F140))
  {
    qword_10015F138 = sub_1000F5970();
    __cxa_guard_release(&qword_10015F140);
  }
  return qword_10015F138;
}

void sub_1000F5958(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F5970()
{
  *__error() = 0;
  uint64_t v0 = pathconf("/", 5);
  if ((unint64_t)v0 <= 0x400) {
    uint64_t v1 = 1024;
  }
  else {
    uint64_t v1 = v0;
  }
  if (v0 >= 0) {
    return v1;
  }
  else {
    return 1024;
  }
}

atomic_uint **sub_1000F59B0(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v3 = (void *)sub_1000F59F4((uint64_t)v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1000F59F4(uint64_t a1)
{
  sub_1000F433C((DIR **)(a1 + 48), (void **)(a1 + 56), v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

int *sub_1000F5A40@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  uint64_t v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = (int *)stat(a1, &v17);
  if (result)
  {
    uint64_t result = __error();
    uint64_t v7 = *result;
    if (a2)
    {
      if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
        uint64_t result = (int *)(v7 != 0);
      }
      else {
        uint64_t result = (int *)((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
      }
      uint64_t v11 = 2;
      if (result) {
        uint64_t v11 = 3;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }
    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0;
        if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
          int v14 = v7 != 0;
        }
        else {
          int v14 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
        }
        uint64_t v15 = 2;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _OWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v4, v16);
      }
      int v8 = 0;
      int v9 = 1;
    }
  }
  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_1000F5C98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_1000F5CDC@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  uint64_t v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = (int *)lstat(a1, &v17);
  if (result)
  {
    uint64_t result = __error();
    uint64_t v7 = *result;
    if (a2)
    {
      if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
        uint64_t result = (int *)(v7 != 0);
      }
      else {
        uint64_t result = (int *)((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
      }
      uint64_t v11 = 2;
      if (result) {
        uint64_t v11 = 3;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }
    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0;
        if ((unint64_t)qword_10015E8C8 >> 1 == 0x595588BD12BF6FE8) {
          int v14 = v7 != 0;
        }
        else {
          int v14 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
        }
        uint64_t v15 = 2;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _OWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::symlink_status", v4, v16);
      }
      int v8 = 0;
      int v9 = 1;
    }
  }
  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 9u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 4;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_1000F5F40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F5F84(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (a2)
  {
    uint64_t v6 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v6 = *(const char **)a2;
    }
    if (stat(v6, &v12) < 0)
    {
      uint64_t v8 = *__error();
      goto LABEL_17;
    }
    mode_t st_mode = v12.st_mode;
    if ((v12.st_mode & 0xF000) != 0x4000)
    {
      uint64_t v8 = 20;
LABEL_17:
      sub_1000F39D0(v8, a1, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
      return 0;
    }
  }
  else
  {
    mode_t st_mode = 511;
  }
  if (*(char *)(a1 + 23) >= 0) {
    int v9 = (const char *)a1;
  }
  else {
    int v9 = *(const char **)a1;
  }
  if (mkdir(v9, st_mode))
  {
    uint64_t v10 = *__error();
    memset(&v12, 0, 24);
    sub_1000F5A40((const char *)a1, (uint64_t)&v12, &v13);
    if (v13 != 3) {
      sub_1000F3860(v10, a1, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1000F6090(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if (a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    sub_1000F7024(a1, &v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      sub_100017424(&__dst, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v32;
    }
    long long v31 = v33;
    if (*(char *)(a1 + 23) < 0) {
      sub_100017424(&v29, *(void **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v29 = *(std::string *)a1;
    }
    uint64_t v6 = sub_1000F7634();
    uint64_t v7 = sub_1000F76D8();
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    sub_1000F6AD8(&v29, __p);
    while (1)
    {
      sub_1000F734C(&v29);
      if (!v8)
      {
LABEL_28:
        int v10 = 2;
        goto LABEL_29;
      }
      int v9 = (void *)HIBYTE(v26);
      if (v26 < 0) {
        int v9 = __p[1];
      }
      if (v9
        && sub_1000F7048((unint64_t)__p, (unint64_t)v6)
        && sub_1000F7048((unint64_t)__p, (unint64_t)v7))
      {
        sub_1000F5A40((const char *)&v29, (uint64_t)&v27, (int *)&v21);
        if (v21 == 3) {
          goto LABEL_28;
        }
        if (!v21) {
          break;
        }
      }
      sub_1000F79C4(&__dst);
      sub_1000F720C(&v29);
      sub_1000F6AD8(&v29, &v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v21;
      uint64_t v26 = v22;
    }
    if (!a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      long long v23 = v27;
      uint64_t v24 = v28;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::create_directories", a1, &v29, &v23);
    }
    *(_OWORD *)a2 = v27;
    a2[2] = v28;
    int v10 = 1;
LABEL_29:
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v10 == 2)
    {
      char v11 = 0;
      while ((void)v31 != (void)v33 || *((void *)&v31 + 1) != *((void *)&v33 + 1))
      {
        sub_1000F6CA4((uint64_t)&v29, &__dst);
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (sub_1000F7048((unint64_t)&__dst, (unint64_t)v6))
          {
            if (sub_1000F7048((unint64_t)&__dst, (unint64_t)v7))
            {
              char v11 = sub_1000F5F84((uint64_t)&v29, 0, &v27);
              if ((v28 & 1) != 0 && (v28 != 1 || v27))
              {
                if (!a2)
                {
                  stat v17 = __cxa_allocate_exception(0x30uLL);
                  long long v19 = v27;
                  uint64_t v20 = v28;
                  boost::filesystem::filesystem_error::filesystem_error(v17, "boost::filesystem::create_directories", a1, &v29, &v19);
                }
                char v11 = 0;
                *(_OWORD *)a2 = v27;
                a2[2] = v28;
                break;
              }
            }
          }
        }
        sub_1000F771C(&__dst);
      }
    }
    else
    {
      char v11 = 0;
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!a2)
    {
      uint64_t v15 = __cxa_allocate_exception(0x30uLL);
      v34[0] = 0;
      if ((qword_10015ECE8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
        || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22))
      {
        uint64_t v16 = 3;
      }
      else
      {
        uint64_t v16 = 2;
      }
      LODWORD(v34[0]) = 22;
      v34[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v34[2] = v16;
      boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::create_directories", a1, v34);
    }
    if ((qword_10015ECE8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22))
    {
      uint64_t v5 = 3;
    }
    else
    {
      uint64_t v5 = 2;
    }
    char v11 = 0;
    *a2 = 22;
    a2[1] = &boost::system::detail::generic_cat_holder<void>::instance;
    a2[2] = v5;
  }
  return v11 & 1;
}

void sub_1000F6518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000F65CC(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if (stat((const char *)a1, &v7) < 0)
  {
    uint64_t v6 = __error();
    sub_1000F3860(*v6, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::is_empty");
    return 0;
  }
  else if ((v7.st_mode & 0xF000) == 0x4000)
  {
    int v9 = 0;
    sub_1000F4470((dirent **)&v9, v3, 0, a2);
    uint64_t v8 = 0;
    if (v9) {
      BOOL v4 = *((void *)v9 + 6) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    sub_1000F59B0(&v8);
    sub_1000F59B0(&v9);
  }
  else
  {
    return v7.st_size == 0;
  }
  return v4;
}

void sub_1000F66B0(_Unwind_Exception *a1)
{
  sub_1000F59B0((atomic_uint **)(v1 - 24));
  _Unwind_Resume(a1);
}

double sub_1000F66C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_1000F5CDC((const char *)a1, (uint64_t)&v11, (int *)&v9);
  if (v9 != 1)
  {
    if (v9 == 3)
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v6 = (const char *)a1;
      }
      else {
        uint64_t v6 = *(const char **)a1;
      }
      if (rmdir(v6)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v9)
      {
        if (*(char *)(a1 + 23) >= 0) {
          uint64_t v5 = (const char *)a1;
        }
        else {
          uint64_t v5 = *(const char **)a1;
        }
        if (!unlink(v5)) {
          return result;
        }
LABEL_15:
        uint64_t v7 = *__error();
        if (v7 != 2 && v7 != 20) {
          sub_1000F3860(v7, a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
        }
        return result;
      }
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        long long v9 = v11;
        uint64_t v10 = v12;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove", a1, &v9);
      }
      double result = *(double *)&v11;
      *(_OWORD *)a2 = v11;
      a2[2] = v12;
    }
  }
  return result;
}

void sub_1000F680C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6820(uint64_t a1, void *a2)
{
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return sub_1000F6830(a1, a2);
}

uint64_t sub_1000F6830(uint64_t a1, void *a2)
{
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  sub_1000F5CDC((const char *)a1, (uint64_t)&v23, (int *)&v22);
  uint64_t result = 0;
  int v5 = (int)v22;
  if (v22 != 1)
  {
    if (!v22)
    {
      if (!a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
        long long v20 = v23;
        uint64_t v21 = v24;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove_all", a1, &v20);
      }
      *(_OWORD *)a2 = v23;
      a2[2] = v24;
      return -1;
    }
    if (v22 == 3)
    {
      *(void *)&long long v23 = 0;
      sub_1000F4470((dirent **)&v23, a1, 0, a2);
      if (a2)
      {
        uint64_t v6 = a2[2];
        if ((v6 & 1) != 0 && (v6 != 1 || *(_DWORD *)a2))
        {
          sub_1000F59B0((atomic_uint **)&v23);
          return -1;
        }
      }
      uint64_t v22 = 0;
      uint64_t v7 = v23;
      if ((void)v23)
      {
        uint64_t v8 = 0;
        long long v9 = 0;
        while (v7 && *(void *)(v7 + 48) || v9 && *((void *)v9 + 6))
        {
          v8 += sub_1000F6830(v7 + 8, a2);
          if (a2 && (uint64_t v10 = a2[2], (v10 & 1) != 0) && (v10 != 1 || *(_DWORD *)a2)
            || (sub_1000F4968((dirent **)&v23, (uint64_t)a2), a2)
            && (uint64_t v11 = a2[2], (v11 & 1) != 0)
            && (v11 != 1 || *(_DWORD *)a2))
          {
            char v12 = 0;
            goto LABEL_29;
          }
          long long v9 = v22;
          uint64_t v7 = v23;
          if ((atomic_uint *)v23 == v22) {
            break;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      char v12 = 1;
LABEL_29:
      sub_1000F59B0(&v22);
      sub_1000F59B0((atomic_uint **)&v23);
      if ((v12 & 1) == 0) {
        return -1;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (v5 == 1) {
      goto LABEL_39;
    }
    if (v5 == 3)
    {
      if (*(char *)(a1 + 23) >= 0) {
        int v13 = (const char *)a1;
      }
      else {
        int v13 = *(const char **)a1;
      }
      if (rmdir(v13))
      {
LABEL_36:
        int v14 = __error();
        uint64_t v15 = 0;
        uint64_t v16 = *v14;
        if (v16 == 2 || v16 == 20)
        {
LABEL_40:
          if (a2)
          {
LABEL_41:
            uint64_t v17 = a2[2];
            if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a2)) {
              return -1;
            }
          }
          return v15 + v8;
        }
        sub_1000F3860(v16, a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
LABEL_39:
        uint64_t v15 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v18 = (const char *)a1;
      }
      else {
        uint64_t v18 = *(const char **)a1;
      }
      if (unlink(v18)) {
        goto LABEL_36;
      }
    }
    uint64_t v15 = 1;
    if (a2) {
      goto LABEL_41;
    }
    return v15 + v8;
  }
  return result;
}

void sub_1000F6AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void *sub_1000F6AD8@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = sub_1000F7640(a1);
  if ((char)v2[23] < 0)
  {
    uint64_t v6 = v2;
    uint64_t v2 = *(unsigned char **)v2;
    uint64_t v5 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v5 = v2[23];
  }

  return sub_1000500B4(a2, &v2[v5 - v4], &v2[v5], v4);
}

void sub_1000F6B38(std::string *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  char v3 = v2;
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    if (a1 == (std::string *)a2)
    {
      if ((char)v2 < 0)
      {
        sub_100017424(__p, *(void **)a2, v4);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        uint64_t v12 = *(void *)(a2 + 16);
      }
      sub_1000F6B38(a2, __p);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v8 = *(const std::string::value_type **)a2;
      if ((v2 & 0x80u) == 0) {
        long long v9 = (unsigned char *)a2;
      }
      else {
        long long v9 = *(unsigned char **)a2;
      }
      if (*v9 != 47)
      {
        sub_1000F6C40((uint64_t)a1);
        unint64_t v2 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v8 = *(const std::string::value_type **)a2;
        unint64_t v4 = *(void *)(a2 + 8);
        char v3 = *(unsigned char *)(a2 + 23);
      }
      if (v3 >= 0) {
        uint64_t v10 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v10 = v8;
      }
      if (v3 >= 0) {
        unint64_t v4 = v2;
      }
      std::string::append(a1, v10, v4);
    }
  }
}

void sub_1000F6C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F6C40(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      return 0;
    }
    uint64_t v2 = a1 + v1;
LABEL_6:
    if (*(unsigned char *)(v2 - 1) != 47)
    {
      std::string::push_back((std::string *)a1, 47);
      return v1;
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + v1;
    goto LABEL_6;
  }
  return v1;
}

void sub_1000F6CA4(uint64_t a1, const std::string *a2)
{
  int v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v3 >= 0) {
    unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((const std::string *)a1 == a2)
    {
      if (v3 < 0)
      {
        sub_100017424(__n, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__uint64_t n = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type v17 = a2->__r_.__value_.__r.__words[2];
      }
      sub_1000F6CA4(a2, __n);
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)__n[0]);
      }
    }
    else
    {
      if (v3 >= 0) {
        uint64_t v6 = (std::string *)a2;
      }
      else {
        uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      __n[0] = 0;
      if (sub_1000F6E70(v6, size, __n) < size)
      {
LABEL_25:
        std::string::operator=((std::string *)a1, a2);
        return;
      }
      unint64_t v18 = 0;
      if (*(char *)(a1 + 23) < 0)
      {
        uint64_t v8 = *(unsigned char **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
        uint64_t v8 = (unsigned char *)a1;
      }
      sub_1000F6E70(v8, v7, &v18);
      size_t v9 = __n[0];
      if (__n[0])
      {
        if (__n[0] != v18) {
          goto LABEL_25;
        }
        uint64_t v10 = (unsigned char *)a1;
        if (*(char *)(a1 + 23) < 0) {
          uint64_t v10 = *(unsigned char **)a1;
        }
        int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        uint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        int v13 = v11 >= 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v10, v13, __n[0])) {
          goto LABEL_25;
        }
      }
      else
      {
        LOBYTE(v11) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
        uint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80u) == 0) {
        int v14 = a2;
      }
      else {
        int v14 = (const std::string *)v12;
      }
      uint64_t v15 = (char *)v14 + v9;
      if (v14->__r_.__value_.__s.__data_[v9] != 47) {
        sub_1000F6C40(a1);
      }
      std::string::append((std::string *)a1, v15, size - v9);
    }
  }
  else if (sub_1000F7640((unsigned char *)a1))
  {
    std::string::push_back((std::string *)a1, 47);
  }
}

void sub_1000F6E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000F6E70(unsigned char *__s, unint64_t a2, unint64_t *a3)
{
  *a3 = 0;
  if (a2 && *__s == 47)
  {
    if (a2 < 2 || __s[1] != 47) {
      return 0;
    }
    size_t v4 = a2 - 2;
    if (a2 != 2)
    {
      uint64_t v5 = __s + 2;
      if (__s[2] == 47) {
        return 0;
      }
      unint64_t v7 = memchr(v5, 47, v4);
      size_t v8 = v7 - v5;
      if (!v7) {
        size_t v8 = v4;
      }
      a2 = v8 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

unint64_t sub_1000F6F08@<X0>(unint64_t result@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = result;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2[1].__r_.__value_.__r.__words[0] = result;
  int v4 = *(char *)(result + 23);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(result + 23);
  }
  else {
    unint64_t v6 = *(void *)(result + 8);
  }
  a2[1].__r_.__value_.__l.__size_ = 0;
  if (v4 < 0)
  {
    if (!v5) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0;
    uint64_t result = *(void *)result;
  }
  else
  {
    if (!v4) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0;
  }
  uint64_t result = sub_1000F6E70((unsigned char *)result, v6, (unint64_t *)&v14);
  std::string::size_type v7 = v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
  std::string::size_type v8 = result;
  if (result < v6)
  {
    a2[1].__r_.__value_.__l.__size_ = result;
    std::string::size_type v7 = 1;
    goto LABEL_13;
  }
  int v9 = *(char *)(v2 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    unint64_t v11 = v2;
  }
  else {
    unint64_t v11 = *(void *)v2;
  }
  if (v10) {
    std::string::size_type v7 = *(void *)(v2 + 8);
  }
  else {
    std::string::size_type v7 = *(unsigned __int8 *)(v2 + 23);
  }
  if (!v7)
  {
LABEL_25:
    if (!v7) {
      return result;
    }
LABEL_10:
    std::string::size_type v8 = 0;
LABEL_13:
    uint64_t result = (unint64_t)std::string::basic_string(&v14, (const std::string *)v2, v8, v7, (std::allocator<char> *)&v15);
    *a2 = v14;
    return result;
  }
  std::string::size_type v12 = 0;
  while (*(unsigned char *)(v11 + v12) != 47)
  {
    if (v7 == ++v12) {
      goto LABEL_25;
    }
  }
  if (v12 == -1) {
    std::string::size_type v13 = v7;
  }
  else {
    std::string::size_type v13 = v12;
  }
  if (v7 != v12) {
    std::string::size_type v7 = v13;
  }
  if (v7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1000F7024@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = result;
  if (*(char *)(result + 23) < 0) {
    uint64_t v2 = *(void *)(result + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(result + 23);
  }
  a2[4] = v2;
  return result;
}

uint64_t sub_1000F7048(unint64_t a1, unint64_t a2)
{
  sub_1000F6F08(a1, &v11);
  memset(v10, 0, 24);
  void v10[3] = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v10[4] = v4;
  sub_1000F6F08(a2, &__p);
  memset(v8, 0, 24);
  void v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  void v8[4] = v5;
  uint64_t v6 = sub_1000F7108(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

uint64_t sub_1000F7108(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  std::string::size_type v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    std::string::size_type v8 = data;
    std::string::size_type v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_1000F76E4(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((sub_1000F76E4(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0) {
        return 1;
      }
      sub_1000F771C(a1);
      sub_1000F771C(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9) {
    return 1;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

std::string *sub_1000F720C(std::string *a1)
{
  std::string::size_type v2 = sub_1000F7268(a1);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type v3 = (std::string::size_type)a1 + HIBYTE(a1->__r_.__value_.__r.__words[2]);
    uint64_t v4 = a1;
  }
  std::string::erase(a1, v2, v3 - (void)v4 - v2);
  return a1;
}

unint64_t sub_1000F7268(unsigned char *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v16 = 0;
  unint64_t v3 = sub_1000F6E70(a1, v2, &v16);
  int v4 = (char)v1[23];
  if (v2 >= v16) {
    unint64_t v5 = v16;
  }
  else {
    unint64_t v5 = v2;
  }
  if (v4 >= 0) {
    uint64_t v6 = v1;
  }
  else {
    uint64_t v6 = *(unsigned char **)v1;
  }
  std::string::size_type v7 = v6 - 1;
  unint64_t v8 = v2;
  while (v8 > v16)
  {
    unint64_t v9 = v8 - 1;
    int v10 = v7[v8--];
    if (v10 == 47)
    {
      unint64_t v5 = v9 + 1;
      break;
    }
  }
  if (v5 >= v16) {
    unint64_t v11 = v16;
  }
  else {
    unint64_t v11 = v5;
  }
  if (v4 >= 0) {
    std::string::size_type v12 = v1;
  }
  else {
    std::string::size_type v12 = *(unsigned char **)v1;
  }
  std::string::size_type v13 = v12 - 1;
  unint64_t v14 = v5;
  while (v14 > v16)
  {
    if (v13[v14] != 47) {
      return v14;
    }
    if (v3 == --v14)
    {
      if (v2 == v5) {
        return v3;
      }
      else {
        return v3 + 1;
      }
    }
  }
  if (v2 == v5) {
    return 0;
  }
  else {
    return v11;
  }
}

unint64_t sub_1000F734C(unsigned char *a1)
{
  uint64_t v1 = a1;
  unint64_t v10 = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v3 = sub_1000F6E70(a1, v2, &v10);
  unint64_t result = v10;
  unint64_t v5 = v1[23];
  if ((char)v1[23] < 0)
  {
    unint64_t v6 = *((void *)v1 + 1);
    if (v3 >= v6) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = v1[23];
    if (v3 >= v5) {
      return result;
    }
  }
  unint64_t v7 = v3 + 1;
  if (v6 <= v3 + 1) {
    unint64_t result = v3 + 1;
  }
  else {
    unint64_t result = v6;
  }
  while (v7 < v6)
  {
    unint64_t v8 = v1;
    if ((v5 & 0x80) != 0) {
      unint64_t v8 = *(unsigned char **)v1;
    }
    int v9 = v8[v7++];
    if (v9 != 47) {
      return v7 - 1;
    }
  }
  return result;
}

char *sub_1000F7408@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }
  else
  {
    unint64_t v4 = a1[23];
  }
  unint64_t v27 = 0;
  unint64_t result = (char *)sub_1000F6E70(a1, v4, &v27);
  if ((unint64_t)result >= v4)
  {
    LOBYTE(v7) = v2[23];
  }
  else
  {
    unint64_t v6 = (char *)(v4 - 1);
    int v7 = (char)v2[23];
    unint64_t v8 = v2;
    if (v7 < 0) {
      unint64_t v8 = *(unsigned char **)v2;
    }
    if (v6[(void)v8] == 47)
    {
      int v9 = *(unsigned char **)v2;
      if (v6 >= result) {
        unint64_t v6 = result;
      }
      if (v7 >= 0) {
        int v9 = v2;
      }
      unint64_t v10 = v9 - 2;
      unint64_t v11 = v4;
      while (1)
      {
        std::string::size_type v12 = (char *)(v11 - 1);
        if (v11 - 1 <= (unint64_t)result) {
          break;
        }
        int v13 = v10[v11--];
        if (v13 != 47) {
          goto LABEL_42;
        }
      }
      std::string::size_type v12 = v6;
LABEL_42:
      if (v12 == result)
      {
        unint64_t v4 = 1;
        goto LABEL_48;
      }
    }
  }
  if (v27 == v4)
  {
    unint64_t result = 0;
LABEL_48:
    if ((v7 & 0x80) != 0) {
      unint64_t v2 = *(unsigned char **)v2;
    }
    return (char *)sub_1000500B4(a2, &result[(void)v2], &result[(void)v2 + v4], v4);
  }
  if (v4 >= v27) {
    unint64_t v14 = v27;
  }
  else {
    unint64_t v14 = v4;
  }
  if ((v7 & 0x80u) == 0) {
    char v15 = v2;
  }
  else {
    char v15 = *(unsigned char **)v2;
  }
  unint64_t v16 = v15 - 1;
  unint64_t v17 = v4;
  while (v17 > v27)
  {
    unint64_t v18 = v17 - 1;
    int v19 = v16[v17--];
    if (v19 == 47)
    {
      unint64_t v14 = v18 + 1;
      break;
    }
  }
  v4 -= v14;
  if (v4)
  {
LABEL_47:
    unint64_t result = (char *)v14;
    goto LABEL_48;
  }
  if (v14 <= v27) {
    goto LABEL_46;
  }
  long long v20 = (char *)(v14 - 1);
  uint64_t v21 = (v7 & 0x80u) == 0 ? v2 : *(unsigned char **)v2;
  if (v20[(void)v21] != 47) {
    goto LABEL_46;
  }
  if (v20 >= result) {
    long long v20 = result;
  }
  uint64_t v22 = v21 - 2;
  unint64_t v23 = v14;
  while (1)
  {
    uint64_t v24 = (char *)(v23 - 1);
    if (v23 - 1 <= (unint64_t)result) {
      break;
    }
    int v25 = v22[v23--];
    if (v25 != 47) {
      goto LABEL_45;
    }
  }
  uint64_t v24 = v20;
LABEL_45:
  if (v24 == result)
  {
LABEL_46:
    unint64_t v4 = 0;
    goto LABEL_47;
  }
  if (byte_10015F167 < 0)
  {
    long long v26 = xmmword_10015F150;
    return (char *)sub_100017424(a2, (void *)v26, *((unint64_t *)&v26 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_10015F150;
    a2[2] = unk_10015F160;
  }
  return result;
}

long long *sub_1000F7634()
{
  return &xmmword_10015F150;
}

unint64_t sub_1000F7640(unsigned char *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v10 = 0;
  sub_1000F6E70(a1, v2, &v10);
  if (v2 >= v10) {
    unint64_t v3 = v10;
  }
  else {
    unint64_t v3 = v2;
  }
  if ((char)v1[23] >= 0) {
    unint64_t v4 = v1;
  }
  else {
    unint64_t v4 = *(unsigned char **)v1;
  }
  unint64_t v5 = v4 - 1;
  unint64_t v6 = v2;
  while (v6 > v10)
  {
    unint64_t v7 = v6 - 1;
    int v8 = v5[v6--];
    if (v8 == 47)
    {
      unint64_t v3 = v7 + 1;
      return v2 - v3;
    }
  }
  return v2 - v3;
}

void *sub_1000F76D8()
{
  return &unk_10015F168;
}

uint64_t sub_1000F76E4(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_1000F7C28(a1, v2, v5, v6);
}

void sub_1000F771C(std::string *this)
{
  uint64_t v1 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    unint64_t v3 = *((void *)data + 1);
  }
  else {
    unint64_t v3 = data[23];
  }
  uint64_t v4 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v1->__r_.__value_.__l.__size_) {
      goto LABEL_13;
    }
  }
  else if (*((unsigned char *)&v1->__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  std::string::size_type size = v1[1].__r_.__value_.__l.__size_;
  if (size + 1 == v3)
  {
    std::string::pointer v6 = data;
    if (data[23] < 0) {
      std::string::pointer v6 = *(std::string::pointer *)data;
    }
    if (v6[size] == 47)
    {
      v1[1].__r_.__value_.__l.__size_ = v3;
      return;
    }
  }
LABEL_13:
  if ((v4 & 0x80) != 0)
  {
    p_std::string::size_type size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v8 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_63:
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_std::string::size_type size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v8 = v1[1].__r_.__value_.__l.__size_ + v4;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_15:
      v1->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  std::string::pointer v9 = data;
  if (data[23] < 0) {
    std::string::pointer v9 = *(std::string::pointer *)data;
  }
  if (v9[v8] == 47)
  {
    unint64_t v21 = 0;
    if (data[23] < 0) {
      std::string::pointer data = *(std::string::pointer *)data;
    }
    unint64_t v10 = sub_1000F6E70(data, v3, &v21);
    std::string::size_type v8 = *p_size;
    if (*p_size == v10)
    {
      if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v21)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_28;
        }
      }
      else if (v21 == HIBYTE(v1->__r_.__value_.__r.__words[2]))
      {
        *((unsigned char *)&v1->__r_.__value_.__s + 23) = 1;
LABEL_28:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    for (std::string::pointer data = v1[1].__r_.__value_.__l.__data_; v3 != v8; *p_size = ++v8)
    {
      std::string::pointer v11 = data;
      if (data[23] < 0) {
        std::string::pointer v11 = *(std::string::pointer *)data;
      }
      if (v11[v8] != 47) {
        goto LABEL_46;
      }
    }
    unint64_t v12 = v3 - 1 >= v10 ? v10 : v3 - 1;
    std::string::pointer v13 = data[23] >= 0 ? data : *(std::string::pointer *)data;
    std::string::pointer v14 = v13 - 2;
    unint64_t v15 = v3;
    while (1)
    {
      unint64_t v16 = v15 - 1;
      if (v15 - 1 <= v10) {
        break;
      }
      int v17 = v14[v15--];
      if (v17 != 47) {
        goto LABEL_45;
      }
    }
    unint64_t v16 = v12;
LABEL_45:
    std::string::size_type v8 = v3;
    if (v16 != v10)
    {
      v1[1].__r_.__value_.__l.__size_ = v3 - 1;
      if ((SHIBYTE(v1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_63;
    }
  }
LABEL_46:
  if (data[23] < 0)
  {
    std::string::pointer v18 = *(std::string::pointer *)data;
    std::string::size_type v19 = *((void *)data + 1);
  }
  else
  {
    std::string::pointer v18 = data;
    std::string::size_type v19 = data[23];
  }
  if (v19 <= v8) {
    goto LABEL_53;
  }
  unint64_t v20 = v8;
  while (v18[v20] != 47)
  {
    if (v19 == ++v20) {
      goto LABEL_53;
    }
  }
  if (v19 == v20 || v20 == -1) {
LABEL_53:
  }
    unint64_t v20 = v3;
  if (data[23] < 0) {
    std::string::pointer data = *(std::string::pointer *)data;
  }

  sub_1000EFB40(v1, &data[v8], &data[v20], v20 - v8);
}

void sub_1000F79C4(std::string *a1)
{
  uint64_t v1 = a1;
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::pointer v4 = data;
    std::string::pointer data = *(std::string::pointer *)data;
    unint64_t v3 = *((void *)v4 + 1);
  }
  else
  {
    unint64_t v3 = data[23];
  }
  unint64_t v31 = 0;
  unint64_t v5 = sub_1000F6E70(data, v3, &v31);
  std::string::size_type size = v1[1].__r_.__value_.__l.__size_;
  if (v5 >= v3 || size != v5)
  {
    if (v3 >= 2 && size == v3)
    {
      std::string::pointer v9 = v1[1].__r_.__value_.__l.__data_;
      unint64_t v10 = v3 - 1;
      std::string::pointer v11 = v9;
      if (v9[23] < 0) {
        std::string::pointer v11 = *(std::string::pointer *)v9;
      }
      if (v11[v10] == 47)
      {
        if (v10 >= v5) {
          unint64_t v12 = v5;
        }
        else {
          unint64_t v12 = v3 - 1;
        }
        if (v9[23] < 0) {
          std::string::pointer v9 = *(std::string::pointer *)v9;
        }
        std::string::pointer v13 = v9 - 2;
        while (1)
        {
          unint64_t v14 = v3 - 1;
          if (v3 - 1 <= v5) {
            break;
          }
          int v15 = v13[v3--];
          if (v15 != 47) {
            goto LABEL_26;
          }
        }
        unint64_t v14 = v12;
LABEL_26:
        if (v14 != v5)
        {
          v1[1].__r_.__value_.__l.__size_ = v10;
          if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
          {
            *v1->__r_.__value_.__l.__data_ = 0;
            v1->__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v1->__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v1->__r_.__value_.__s + 23) = 0;
          }
          return;
        }
      }
    }
    unint64_t v16 = v31;
    std::string::size_type v17 = size + 1;
    while (1)
    {
      unint64_t v18 = v17 - 1;
      if (v17 - 1 <= v31) {
        break;
      }
      if (v17 - v5 == 2)
      {
        v1[1].__r_.__value_.__l.__size_ = v5;
        if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v1->__r_.__value_.__s + 23) = 1;
        }
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
      std::string::pointer v19 = v1[1].__r_.__value_.__l.__data_;
      std::string::pointer v20 = v19;
      if (v19[23] < 0) {
        std::string::pointer v20 = *(std::string::pointer *)v19;
      }
      int v21 = v20[v17-- - 2];
      if (v21 != 47)
      {
        std::string::pointer v22 = *(std::string::pointer *)v19;
        if (v19[23] >= 0) {
          std::string::pointer v22 = v1[1].__r_.__value_.__l.__data_;
        }
        unint64_t v23 = v18 - 1;
        unint64_t v24 = v18;
        while (1)
        {
          unint64_t v25 = v24;
          if (v23 + 1 <= v31) {
            break;
          }
          int v26 = v22[v23--];
          --v24;
          if (v26 == 47)
          {
            unint64_t v27 = v23 + 2;
            goto LABEL_48;
          }
        }
        unint64_t v27 = v31;
LABEL_48:
        v1[1].__r_.__value_.__l.__size_ = v27;
        if (v19[23] < 0) {
          std::string::pointer v19 = *(std::string::pointer *)v19;
        }
        uint64_t v28 = &v19[v27];
        long long v30 = &v19[v18];
        if (v16 <= v25) {
          unint64_t v16 = v25;
        }
        std::string::size_type v29 = v18 - v16;
        goto LABEL_42;
      }
    }
  }
  v1[1].__r_.__value_.__l.__size_ = 0;
  uint64_t v28 = v1[1].__r_.__value_.__l.__data_;
  if (v28[23] < 0) {
    uint64_t v28 = *(std::string::value_type **)v28;
  }
  std::string::size_type v29 = v31;
  long long v30 = &v28[v31];
LABEL_42:

  sub_1000EFB40(v1, v28, v30, v29);
}

uint64_t sub_1000F7BEC(uint64_t a1)
{
  if (qword_10015F180)
  {
    std::locale::~locale((std::locale *)qword_10015F180);
    operator delete(v2);
  }
  qword_10015F180 = 0;
  return a1;
}

uint64_t sub_1000F7C28(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t sub_1000F7C88()
{
  __cxa_atexit((void (*)(void *))sub_1000F7BEC, &unk_10015F148, (void *)&_mh_execute_header);
  sub_100015438(&xmmword_10015F150, ".");
  __cxa_atexit((void (*)(void *))sub_10005A76C, &xmmword_10015F150, (void *)&_mh_execute_header);
  sub_100015438(qword_10015F168, "..");

  return __cxa_atexit((void (*)(void *))sub_10005A76C, qword_10015F168, (void *)&_mh_execute_header);
}

void sub_1000F7D40(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[HeartBeatActivity] Complete\n\n", v1, 2u);
}

void sub_1000F7DB0(uint64_t *a1, char a2, os_log_t log)
{
  unint64_t v3 = (uint64_t *)*a1;
  std::string::pointer v4 = "";
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v3 = a1;
  }
  if (a2) {
    std::string::pointer v4 = "(baseline)";
  }
  int v5 = 136315394;
  std::string::pointer v6 = v3;
  __int16 v7 = 2082;
  int v8 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PowerResolver] thermal-pressure: %s %{public}s", (uint8_t *)&v5, 0x16u);
}

void sub_1000F7E60()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] thermal-pressure notification failed with error code: %d %{public}s");
}

void sub_1000F7ED8()
{
  sub_10002B0BC();
  sub_10002B0DC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] plugged-in: %d %{public}s");
}

void sub_1000F7F54()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] plugged-in notification failed with error code: %d %{public}s");
}

void sub_1000F7FCC()
{
  sub_10002B0BC();
  sub_10002B0DC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] low-power-mode: %d %{public}s");
}

void sub_1000F8048()
{
  sub_10002B0BC();
  sub_10002B0DC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] screen-on: %d %{public}s");
}

void sub_1000F80C4()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[PowerResolver] screen-on notification failed with error code: %d %{public}s");
}

void sub_1000F813C()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[PowerResolver] Initializing screen on notifications", v2, v3, v4, v5, v6);
}

void sub_1000F819C()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[PowerResolver] Initializing low power mode notifications", v2, v3, v4, v5, v6);
}

void sub_1000F81FC()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[PowerResolver] Initializing plugged in notifications", v2, v3, v4, v5, v6);
}

void sub_1000F825C()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[PowerResolver] Initializing thermal pressure notifications", v2, v3, v4, v5, v6);
}

void sub_1000F82BC(uint64_t a1, uint64_t a2)
{
  sub_10002BAD8(a1, a2);
  sub_10002BB20();
  sub_10002BB34();
  sub_10002BB00((void *)&_mh_execute_header, v2, v3, "[Transform Factory] ERROR: Transform specification '%s' does not have a name?!", v4, v5, v6, v7, v8, (uint64_t)__p, v11, v12, v14);
  if (v13 < 0) {
    operator delete(__pa);
  }
}

void sub_1000F834C(uint64_t a1, uint64_t a2)
{
  sub_10002BAD8(a1, a2);
  sub_10002BB20();
  sub_10002BB34();
  sub_10002BB00((void *)&_mh_execute_header, v2, v3, "[Transform Factory] ERROR: Transform specification '%s' does not have a uuid?!", v4, v5, v6, v7, v8, (uint64_t)__p, v11, v12, v14);
  if (v13 < 0) {
    operator delete(__pa);
  }
}

void sub_1000F83DC(uint64_t a1, uint64_t a2)
{
  sub_10002BAD8(a1, a2);
  sub_10002BB20();
  sub_10002BB34();
  sub_10002BB00((void *)&_mh_execute_header, v2, v3, "[Transform Factory] ERROR: Transform specification '%s' does not have a type?!", v4, v5, v6, v7, v8, (uint64_t)__p, v11, v12, v14);
  if (v13 < 0) {
    operator delete(__pa);
  }
}

void sub_1000F846C(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) < 0) {
    a1 = (uint64_t *)*a1;
  }
  int v2 = 136315138;
  int v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[Transform Factory] ERROR: Transform specification for '%s' could not be created. Ignored.", (uint8_t *)&v2, 0xCu);
}

void sub_1000F84F0(char *a1, void *a2, os_log_t log)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  int v4 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Transform Factory] ERROR: Invalid buffered transform type %{public}s", (uint8_t *)&v3, 0xCu);
}

void sub_1000F8578(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[Transform Factory] No Transform aggregation period specified.", v1, 2u);
}

void sub_1000F85E8(uint64_t a1, uint64_t a2)
{
  sub_10002BAD8(a1, a2);
  sub_10002BB20();
  sub_10002BB34();
  sub_10002BB00((void *)&_mh_execute_header, v2, v3, "[Transform Factory] ERROR: Transform specification '%s' is not a dictionary?!", v4, v5, v6, v7, v8, (uint64_t)__p, v11, v12, v14);
  if (v13 < 0) {
    operator delete(__pa);
  }
}

void sub_1000F8678()
{
}

void sub_1000F86A4()
{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

void sub_1000F86D0()
{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

void sub_1000F86FC()
{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

void sub_1000F8728()
{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

void sub_1000F8754()
{
}

void sub_1000F8780()
{
}

void sub_1000F87AC()
{
}

void sub_1000F87D8()
{
}

void sub_1000F8804()
{
}

void sub_1000F8830()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000F885C()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000F8888()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

void sub_1000F88B4()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

void sub_1000F88E0()
{
}

void sub_1000F890C()
{
}

void sub_1000F8938()
{
}

void sub_1000F8964()
{
}

void sub_1000F8990()
{
}

void sub_1000F89BC()
{
}

void sub_1000F89E8()
{
}

void sub_1000F8A14()
{
}

void sub_1000F8A40()
{
}

void sub_1000F8A6C()
{
}

void sub_1000F8A98()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

void sub_1000F8AC4()
{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void sub_1000F8AF0()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

void sub_1000F8B1C()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

void sub_1000F8B48()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

void sub_1000F8B74()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

void sub_1000F8BA0()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

void sub_1000F8BCC()
{
}

void sub_1000F8BF8()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

void sub_1000F8C24()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

void sub_1000F8C50()
{
}

void sub_1000F8C7C()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

void sub_1000F8CA8()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

void sub_1000F8CD4()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

void sub_1000F8D00()
{
}

void sub_1000F8D2C()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

void sub_1000F8D58()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

void sub_1000F8D84()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

void sub_1000F8DB0()
{
}

void sub_1000F8DDC()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void sub_1000F8E08()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void sub_1000F8E34()
{
  __assert_rtn("operator*", "iter_impl.hpp", 248, "m_it.object_iterator != m_object->m_value.object->end()");
}

void sub_1000F8E60()
{
  __assert_rtn("operator*", "iter_impl.hpp", 254, "m_it.array_iterator != m_object->m_value.array->end()");
}

void sub_1000F8E8C(char *a1, void *a2, os_log_t log)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  int v4 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[RolloverManager] ERROR: Last rollover was partial, but rollover reason from rollover is missing. Using default reason %{public}s", (uint8_t *)&v3, 0xCu);
}

void sub_1000F8F14(const char **a1, uint64_t a2, os_log_t log)
{
  int v3 = "unknown";
  if (*a1) {
    int v3 = *a1;
  }
  int v4 = (void *)(a2 + 32);
  if (*(char *)(a2 + 55) < 0) {
    int v4 = (void *)*v4;
  }
  int v5 = 136446466;
  int v6 = v3;
  __int16 v7 = 2082;
  uint64_t v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Device Config] ERROR: Failed to load config: error='%{public}s', path='%{public}s'", (uint8_t *)&v5, 0x16u);
}

void sub_1000F8FC0(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_1000F9030()
{
  sub_10003804C(__stack_chk_guard);
  sub_100038080();
  sub_100038060((void *)&_mh_execute_header, v0, v1, "[MotionStateResolver] raw-device-orientation: %s %{public}s");
}

void sub_1000F90AC()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[MotionStateResolver] raw-device-orientation notification failed with error code: %d %{public}s");
}

void sub_1000F9124()
{
  sub_10003804C(__stack_chk_guard);
  sub_100038080();
  sub_100038060((void *)&_mh_execute_header, v0, v1, "[MotionStateResolver] device-orientation: %s %{public}s");
}

void sub_1000F91A0()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[MotionStateResolver] device-orientation notification failed with error code: %d %{public}s");
}

void sub_1000F9218(char a1, uint64_t a2, NSObject *a3)
{
  int v3 = "true";
  if ((a1 & 1) == 0) {
    int v3 = "false";
  }
  int v4 = "(baseline)";
  if ((a2 & 1) == 0) {
    int v4 = "";
  }
  *(_DWORD *)int v5 = 136315394;
  *(void *)&void v5[4] = v3;
  *(_WORD *)&v5[12] = 2082;
  *(void *)&v5[14] = v4;
  sub_100038060((void *)&_mh_execute_header, a2, a3, "[MotionStateResolver] device-orientation-lock: %s %{public}s", *(void *)v5, *(void *)&v5[8], *(void *)&v5[16]);
}

void sub_1000F92C0()
{
  sub_10002B09C();
  sub_10002B0FC((void *)&_mh_execute_header, v0, v1, "[MotionStateResolver] device-orientation-lock notification failed with error code: %d %{public}s");
}

void sub_1000F9338()
{
  sub_10003804C(__stack_chk_guard);
  if (v3 != v4) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v0;
  }
  int v6 = 136315138;
  uint64_t v7 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] motionState: %s", (uint8_t *)&v6, 0xCu);
}

void sub_1000F93B4()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void sub_1000F93E0()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

void sub_1000F940C()
{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\\"'");
}

void sub_1000F9438()
{
}

void sub_1000F9464()
{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000F9490()
{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000F94BC()
{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void sub_1000F94E8()
{
}

void sub_1000F9514()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

void sub_1000F9540()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void sub_1000F956C()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void sub_1000F9598()
{
}

void sub_1000F95C4()
{
}

void sub_1000F95F0()
{
}

void sub_1000F961C()
{
}

void sub_1000F9648()
{
}

void sub_1000F9674()
{
}

void sub_1000F96A0()
{
}

void sub_1000F96CC()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

void sub_1000F96F8()
{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

void sub_1000F9724()
{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void sub_1000F9750()
{
}

void sub_1000F977C()
{
}

void sub_1000F97A8(uint64_t *a1, NSObject *a2)
{
  uint64_t v4 = sub_100026820(*a1);
  if (*(char *)(v4 + 23) >= 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = *(void *)v4;
  }
  uint64_t v6 = sub_100024914(*a1);
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = *(void *)v6;
  }
  int v8 = 136315394;
  uint64_t v9 = v5;
  __int16 v10 = 2080;
  uint64_t v11 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[Transform Cache] Eviction callback for transform %s - %s", (uint8_t *)&v8, 0x16u);
}

void *sub_1000F9878(void *result)
{
  do
  {
    os_log_t v1 = (void *)result[1];
    if (v1)
    {
      result[1] = v1[2];
      void v1[2] = result;
    }
    else
    {
      os_log_t v1 = (void *)result[2];
      *unint64_t result = 0;
      result[1] = 0;
      result[2] = 0;
    }
    unint64_t result = v1;
  }
  while (v1);
  return result;
}

void sub_1000F98A8(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Transform Manager] Pre-reconfiguration: ERROR: null config store; cannot set anything up!",
    v1,
    2u);
}

void sub_1000F9918()
{
}

void sub_1000F9944()
{
}

void sub_1000F9970()
{
}

void sub_1000F999C()
{
  __assert_rtn("erase", "bstree_algorithms.hpp", 1587, "!x || NodeTraits::get_parent(x) == x_parent");
}

void sub_1000F99C8()
{
}

void sub_1000F99F4()
{
}

void sub_1000F9A20()
{
  __assert_rtn("erase", "bstree_algorithms.hpp", 1545, "NodeTraits::get_left(x_parent) == y");
}

void sub_1000F9A4C()
{
  __assert_rtn("alloc_size", "pool.hpp", 353, "s >= min_alloc_size");
}

void sub_1000F9A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 32;
  uint64_t v4 = (unsigned __int8 *)(a1 - 32);
  do
  {
    sub_100016EAC(v3);
    int v5 = *v4;
    v4 -= 32;
    sub_100016B28((uint64_t **)(v3 + 8), v5);
    BOOL v6 = v3 == a2;
    uint64_t v3 = (uint64_t)v4;
  }
  while (!v6);
}

void sub_1000F9AC8()
{
  sub_1000472D8();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[EventStreamingObserver] Adding observer for event '%s' for client %llu", v1, 0x16u);
}

void sub_1000F9B54()
{
  sub_1000472D8();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[EventStreamingObserver] Destroyed observer for event '%s' for client %llu", v1, 0x16u);
}

void sub_1000F9BF4(std::__shared_weak_count **a1, uint64_t a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4)
{
  uint64_t v7 = *a1;
  if (v7) {
    sub_1000147D8(v7);
  }
  int v8 = *(std::__shared_weak_count **)(a2 + 88);
  if (v8) {
    sub_1000147D8(v8);
  }
  if (*a3) {
    sub_1000147D8(*a3);
  }
  if (*a4) {
    sub_1000147D8(*a4);
  }
}

void sub_1000F9C54(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[EventBroker] event processing already paused; ignoring extra pause request.",
    v1,
    2u);
}

void sub_1000F9CC4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[EventBroker] event processing already resumed; ignoring extra resume request.",
    v1,
    2u);
}

void sub_1000F9D34(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = (void *)(*(void *)a1 + 16);
  if (*(char *)(*(void *)a1 + 39) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  v4[0] = 67109378;
  v4[1] = a2;
  __int16 v5 = 2080;
  BOOL v6 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[EventBroker] %d subscribers notified of event %s", (uint8_t *)v4, 0x12u);
}

void sub_1000F9DD0(uint64_t a1, void *a2, os_log_t log)
{
  if (*(char *)(a1 + 47) < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136315138;
  uint64_t v4 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[EventBroker] ERROR: invalid regular expression: %s", (uint8_t *)&v3, 0xCu);
}

void sub_1000F9E58(std::locale *this, std::locale *a2)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_1000147D8(locale);
  }
  std::locale::~locale(this);
  __int16 v5 = (std::__shared_weak_count *)a2[6].__locale_;
  if (v5) {
    sub_1000147D8(v5);
  }
  std::locale::~locale(a2);
}

uint64_t sub_1000F9EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_1000F9EC8(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  int v4 = 136315394;
  uint64_t v5 = a1 + 8;
  __int16 v6 = 2114;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[KernelEventToJson] Error: Unable to deserialize event %s: %{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_1000F9F58(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1 + 8;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[KernelEventToJson] Successfully deserialized: %s - %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_1000F9FE4(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[MTEventToJson] Setting \"Message\" to %s", (uint8_t *)&v3, 0xCu);
}

void sub_1000FA060(uint64_t a1, NSObject *a2, double a3)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  double v6 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[MTEventToJson] Converting string %s to double %f", (uint8_t *)&v3, 0x16u);
}

void sub_1000FA0EC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FA150(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_10005A734((void *)&_mh_execute_header, a2, a3, "[Config Store] Transaction failed to start; %s", (uint8_t *)a2);
}

void sub_1000FA18C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FA1F0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_10005A734((void *)&_mh_execute_header, a2, a3, "[SQL Transaction] Transaction failed to rollback; %s",
    (uint8_t *)a2);
}

void sub_1000FA22C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FA290(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_10005A734((void *)&_mh_execute_header, a2, a3, "[SQL Transaction] Transaction failed to end; %s", (uint8_t *)a2);
}

void sub_1000FA2CC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[Config Path] Error: unable to retrieve CA Tasking path", v1, 2u);
}

void sub_1000FA33C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Platform] ERROR: Failed to retrieve current boot time", v1, 2u);
}

void sub_1000FA3AC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[Platform] ERROR: Failed to retrieve current CPU uptime: %i", (uint8_t *)v2, 8u);
}

void sub_1000FA424(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Platform] ERROR: Failed to get hw.memezise", v1, 2u);
}

void sub_1000FA494(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[StateCache] Invalidating all cache entries for state: %s", (uint8_t *)&v3, 0xCu);
}

void sub_1000FA51C()
{
  __assert_rtn("operator[]", "json.hpp", 3713, "m_value.object->find(key) != m_value.object->end()");
}

void sub_1000FA550()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Failed to disable legacy alter table[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA5A4()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Failed to set journaling mode[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA5F8()
{
  sub_100065A90();
  sub_100065A60(v1, v2, v3, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] State database is corrupted! DB Integrity check failed. Status = %{public}d[null database]", v4, 0x12u);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA654()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Error preparing database version query[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA6A8()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Failed to retrieve database version query[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA6FC()
{
  sub_100065A90();
  sub_100065A60(v1, v2, v3, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] Failed to update schema version to V%{public}d[null database]", v4, 0x12u);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA758()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Failed to check database integrity after database clear[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA7AC()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] Failed to truncate database during clear[null database]", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA800()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] DATABASE INITIALIZATION: wiping database", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA854()
{
  sub_100065A48();
  if (v4 != v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v1;
  }
  sub_100065A84(v2, v6, 4.8751e-34);
  sub_10005A734((void *)&_mh_execute_header, v7, v8, "[Sqlite Store %{public}s] ## DATABASE WIPE: Wipe failed", v9);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FA8A8(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"(en)[^/]+";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[WiFiStateRelay] ERROR: Failed to create key on interface pattern for entity: %@ during registration", (uint8_t *)&v1, 0xCu);
}

void sub_1000FA92C(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[WiFiStateRelay] ERROR: Failed to register for LQM updates from SCDynamicStore", v1, 2u);
}

void sub_1000FA99C(os_log_t log)
{
  int v1 = 138412290;
  uint64_t v2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[WiFiStateRelay] ERROR: Failed to create key on interface for entity: %@", (uint8_t *)&v1, 0xCu);
}

void sub_1000FAA18()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] Bad notifyRunLoop", v2, v3, v4, v5, v6);
}

void sub_1000FAA78()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] Bad clientManager", v2, v3, v4, v5, v6);
}

void sub_1000FAAD8(mach_error_t a1)
{
  mach_error_string(a1);
  sub_10006845C();
  sub_10006843C((void *)&_mh_execute_header, v1, v2, "[KernelClient] initWithCFRunLoop failed %{public}s", v3, v4, v5, v6, v7);
}

void sub_1000FAB50()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] servicePublished no io_service_t", v2, v3, v4, v5, v6);
}

void sub_1000FABB0(mach_error_t a1)
{
  mach_error_string(a1);
  sub_10006845C();
  sub_10006843C((void *)&_mh_execute_header, v1, v2, "[KernelClient] _registerSharedDataQueueEventHandler failed %{public}s", v3, v4, v5, v6, v7);
}

void sub_1000FAC28(mach_error_t a1)
{
  mach_error_string(a1);
  sub_10006845C();
  sub_10006843C((void *)&_mh_execute_header, v1, v2, "[KernelClient] IOServiceOpen failed %{public}s", v3, v4, v5, v6, v7);
}

void sub_1000FACA0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] _registerSharedDataQueueEventHandler bad _queuePort", v2, v3, v4, v5, v6);
}

void sub_1000FAD00()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] _registerSharedDataQueueEventHandler bad _responseQueue", v2, v3, v4, v5, v6);
}

void sub_1000FAD60()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[KernelClient] _registerSharedDataQueueEventHandler bad _asyncEventSource", v2, v3, v4, v5, v6);
}

void sub_1000FADC0(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint64_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[KernelClient] IODataQueueMemory malformed\n", buf, 2u);
}

void sub_1000FAE00(void *a1, uint8_t *buf, void *a3, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *a3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[AppUsage] Skipping event for %@ due to missing start or end date", buf, 0xCu);
}

void sub_1000FAE5C(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[AppUsage] Stopping iteration with %@ that ends in the future at %@", buf, 0x16u);
}

void sub_1000FAECC(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[AppUsage] ERROR: Failed to query knowledge store: %@", buf, 0xCu);
}

void sub_1000FAF24(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[AppUsage] Last app usage sync was more than one day ago; clamping at 24 hours",
    v1,
    2u);
}

void sub_1000FAF94(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[AppUsage] ERROR: failed to iterate app usage payloads because a sync point has not been set", v1, 2u);
}

void sub_1000FB004(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[FrameworkConfiguration] Received configuration update from daemon but was not usable (not deserializable)", v1, 2u);
}

void sub_1000FB074(int a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[FrameworkConfiguration] Received configuration update from daemon but was not usable (fw end offset [%u] > mmap size [%zu])", (uint8_t *)v3, 0x12u);
}

void sub_1000FB0FC(os_log_t log)
{
  v1[0] = 67109120;
  v1[1] = -258926936;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[FrameworkConfiguration] Received configuration update from daemon but was not usable (invalid version) %u", (uint8_t *)v1, 8u);
}

void sub_1000FB180(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[FrameworkConfiguration] Received configuration update from daemon but was not usable (invalid magic number) %u", (uint8_t *)v2, 8u);
}

void sub_1000FB1F8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[DefaultSink] ERROR: failed to create CA log file: error %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FB270(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[DefaultSink] ERROR: Unexpected error. Failed to write to file.", v1, 2u);
}

void sub_1000FB2E0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[DefaultSink] ERROR: Unexpected. No debug heartbeat exists. Was the base config overriden?", v1, 2u);
}

void sub_1000FB350()
{
}

void sub_1000FB37C()
{
}

void sub_1000FB3A8()
{
  __assert_rtn("key", "iter_impl.hpp", 612, "m_object != nullptr");
}

void sub_1000FB3D4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the iso country code", v1, 2u);
}

void sub_1000FB444(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A750((void *)&_mh_execute_header, a1, a3, "==== ERROR: Clean exit timeout: continuing shutdown anyways", a5, a6, a7, a8, 0);
}

void sub_1000FB4A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A750((void *)&_mh_execute_header, a1, a3, "==== ERROR: XPC Server shutdown TIMED OUT; continuing shutdown anyways",
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_1000FB50C(uint8_t *buf, unsigned char *a2)
{
  *uint64_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Home directory is not setup. Waiting to see if it gets repaired...", buf, 2u);
}

void sub_1000FB550(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A750((void *)&_mh_execute_header, a1, a3, "==== EXITING analyticsd ====", a5, a6, a7, a8, 0);
}

void sub_1000FB5B4(NSObject *a1)
{
  int v2 = 136315138;
  uint64_t v3 = getenv("USER");
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "ERROR: Unrecognized user: '%s'", (uint8_t *)&v2, 0xCu);
}

void sub_1000FB648(id *a1)
{
  id v2 = *a1;
  *a1 = 0;
}

void sub_1000FB67C(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TrialStateRelay] Trial: sandbox extension token query returned: %@", buf, 0xCu);
}

void sub_1000FB6D4(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint64_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TrialStateRelay] Trial: Extension token is null", buf, 2u);
}

void sub_1000FB714(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[TrialStateRelay] TrialIdentifier: experimentIdentifiers nil. No active experiment", v1, 2u);
}

void sub_1000FB784(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TrialStateRelay] TrialIdentifier: subscribeToTrialNamespace: Invalid Trial client", v1, 2u);
}

void sub_1000FB7F4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: retrieved defType is null", v1, 2u);
}

void sub_1000FB864(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: Failed to generate events for the config.", v1, 2u);
}

void sub_1000FB8D4(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: Invalid defType: %s", (uint8_t *)&v2, 0xCu);
}

void sub_1000FB94C()
{
  sub_10007FE68();
  sub_10007FE3C(v1, v2, 5.7779e-34);
  sub_10005A734((void *)&_mh_execute_header, v3, v4, "[TelephonyStateRelay] data subscription context is null, %@", v5);
}

void sub_1000FB990()
{
  sub_10007FE68();
  sub_10007FE3C(v1, v2, 5.7779e-34);
  sub_10005A734((void *)&_mh_execute_header, v3, v4, "[TelephonyStateRelay], failed to get signal strength info, %@", v5);
}

void sub_1000FB9D4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: context is null for data sim change", v2, v3, v4, v5, v6);
}

void sub_1000FBA34()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: context or cellInfo is null", v2, v3, v4, v5, v6);
}

void sub_1000FBA94()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: context or signal strength info is null", v2, v3, v4, v5, v6);
}

void sub_1000FBAF4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: metric from notification is null", v2, v3, v4, v5, v6);
}

void sub_1000FBB54()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] Encountered unknown link state change type", v2, v3, v4, v5, v6);
}

void sub_1000FBBB4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: null context on CarrierBundle change ", v2, v3, v4, v5, v6);
}

void sub_1000FBC14()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: null context on OperatorBundle change ", v2, v3, v4, v5, v6);
}

void sub_1000FBC74()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[TelephonyStateRelay] ERROR: null context on DisplayStatus changed", v2, v3, v4, v5, v6);
}

void sub_1000FBCD4(char a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109376;
  HIDWORD(v3) = a1 & 1;
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = *(unsigned __int8 *)(a2 + 176);
  sub_10007FE48((void *)&_mh_execute_header, a2, a3, "[TelephonyStateRelay] Handling display status changed callback with status=%{BOOL}d, system=%u", v3, v4);
}

void sub_1000FBD54()
{
  sub_10002B138();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[TelephonyStateRelay] Received Stw stateChanged callback", v1, 2u);
}

void sub_1000FBDC0(unsigned __int8 *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[TelephonyStateRelay] Decoded an unexpected value for cellHighThroughputState: %d", (uint8_t *)v3, 8u);
}

void sub_1000FBE3C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1000FBE60(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 1024;
  HIWORD(v3) = a2;
  sub_10007FE48((void *)&_mh_execute_header, a2, a3, "[TelephonyStateRelay] Changing SatelliteStatus from %u to %u", 67109376, v3);
}

void sub_1000FBEE0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1000FBEF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FBF58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FBFBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FC020(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *uint64_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[ModifyEventManager] ERROR: Queried state is not wrapped in an object. Cannot populate event fields without the key for that state.", buf, 2u);
}

void sub_1000FC060()
{
}

void sub_1000FC08C(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[ModifyEventManager] ERROR: Invalid type for event modification: %s", (uint8_t *)&v2, 0xCu);
}

void sub_1000FC104()
{
  __assert_rtn("init_from_unsigned_long", "dynamic_bitset.hpp", 472, "m_bits.size() == 0");
}

void sub_1000FC158()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states_matching_key-remove[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC1B8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states_matching_key-remove; %s",
    v4);
}

void sub_1000FC1F0()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove keyed transform state for (uuid='%{public}s')[null database]", v2);
}

void sub_1000FC25C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC2BC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states-insert statement; %s",
    v4);
}

void sub_1000FC2F4()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to insert transform state for uuid='%s'[null database]", v2);
}

void sub_1000FC360()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-remove[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC3C0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states-remove; %s",
    v4);
}

void sub_1000FC3F8()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove transform_state for (uuid='%{public}s')[null database]", v2);
}

void sub_1000FC464()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC4C4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_metadata-insert statement; %s",
    v4);
}

void sub_1000FC4FC()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to insert transform metadata for uuid='%s'[null database]", v2);
}

void sub_1000FC568()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-remove[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC5C8(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_metadata-remove; %s",
    v4);
}

void sub_1000FC600()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove transform_metadata for (uuid='%{public}s')[null database]", v2);
}

void sub_1000FC66C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-remove-all[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC6CC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states-remove-all; %s",
    v4);
}

void sub_1000FC704()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove all transform_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC764(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove all transform_states; %s", v4);
}

void sub_1000FC79C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Removing all transform states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC7FC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Removing all transform states; %s", v4);
}

void sub_1000FC834()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-remove-all[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC894(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_metadata-remove-all; %s",
    v4);
}

void sub_1000FC8CC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove all transform_metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC92C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove all transform_metadata; %s", v4);
}

void sub_1000FC964()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Removing all transform metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FC9C4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Removing all transform metadata; %s", v4);
}

void sub_1000FC9FC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-remove-for-period[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCA5C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states-remove-for-period; %s",
    v4);
}

void sub_1000FCA94()
{
  sub_100065A48();
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove transforms states for aggregation period='%s'[null database]", v4);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FCAEC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-remove-for-period[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCB4C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_metadata-remove-for-period; %s",
    v4);
}

void sub_1000FCB84()
{
  sub_100065A48();
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove transforms metadata for aggregation period='%s'[null database]", v4);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FCBDC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-remove-expired[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCC3C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_states-remove-expired; %s",
    v4);
}

void sub_1000FCC74()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove expired transform_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCCD4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove expired transform_states; %s", v4);
}

void sub_1000FCD0C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-remove-expired[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCD6C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database transform_metadata-remove-expired; %s",
    v4);
}

void sub_1000FCDA4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove expired transform_metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCE04(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove expired transform_metadata; %s",
    v4);
}

void sub_1000FCE3C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database agg_session-exists query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCE9C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database agg_session-exists query; %s",
    v4);
}

void sub_1000FCED4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database agg_session-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FCF34(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database agg_session-insert statement; %s",
    v4);
}

void sub_1000FCF6C()
{
  sub_100065A48();
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to insert aggregation session for aggregation period='%s'[null database]", v4);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_1000FCFC4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database remove-expired-agg-sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD024(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database remove-expired-agg-sessions; %s",
    v4);
}

void sub_1000FD05C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove expired agg_sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD0BC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove expired agg_sessions; %s", v4);
}

void sub_1000FD0F4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database remove-all-agg-sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD154(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database remove-all-agg-sessions; %s",
    v4);
}

void sub_1000FD18C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove all agg_sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD1EC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove all agg_sessions; %s", v4);
}

void sub_1000FD224()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database remove-agg-sessions-for-period[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD284(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database remove-agg-sessions-for-period; %s",
    v4);
}

void sub_1000FD2BC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove agg_sessions for period[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD31C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove agg_sessions for period; %s", v4);
}

void sub_1000FD354()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index1 ON queried_states(queried_state_name, queried_state_params)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD3B4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index1 ON queried_states(queried_state_name, queried_state_params); %s",
    v4);
}

void sub_1000FD3EC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create update_queried_state_last_modified_time trigger[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD44C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create update_queried_state_last_modified_time trigger; %s",
    v4);
}

void sub_1000FD484()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create queried_states table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD4E4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create queried_states table; %s", v4);
}

void sub_1000FD51C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transform_metadata_and_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD57C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transform_metadata_and_states; %s",
    v4);
}

void sub_1000FD5B4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index4 ON transform_metadata(transform_uuid)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD614(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index4 ON transform_metadata(transform_uuid); %s",
    v4);
}

void sub_1000FD64C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index3 ON transform_states(transform_key)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD6AC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index3 ON transform_states(transform_key); %s",
    v4);
}

void sub_1000FD6E4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index2 ON transform_states(transform_uuid)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD744(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index2 ON transform_states(transform_uuid); %s",
    v4);
}

void sub_1000FD77C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transform_metadata table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD7DC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transform_metadata table; %s", v4);
}

void sub_1000FD814()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transform_states table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD874(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transform_states table; %s", v4);
}

void sub_1000FD8AC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transform_metadata_and_states view[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD90C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transform_metadata_and_states view; %s",
    v4);
}

void sub_1000FD944()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index3 ON transform_states(transform_key)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FD9A4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index3 ON transform_states(transform_key); %s",
    v4);
}

void sub_1000FD9DC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create index2 ON transform_states(transform_metadata_id)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDA3C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create index2 ON transform_states(transform_metadata_id); %s",
    v4);
}

void sub_1000FDA74()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to rename table transform_states_new to transform_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDAD4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to rename table transform_states_new to transform_states; %s",
    v4);
}

void sub_1000FDB0C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to drop transform_states table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDB6C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to drop transform_states table; %s", v4);
}

void sub_1000FDBA4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to copy data from transform_states to transform_states_new table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDC04(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to copy data from transform_states to transform_states_new table; %s",
    v4);
}

void sub_1000FDC3C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transform_states_new table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDC9C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transform_states_new table; %s",
    v4);
}

void sub_1000FDCD4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to rename transform_metdata_id column to transform_metadata_id[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDD34(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to rename transform_metdata_id column to transform_metadata_id; %s",
    v4);
}

void sub_1000FDD6C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to drop view transform_metadata_and_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDDCC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to drop view transform_metadata_and_states; %s",
    v4);
}

void sub_1000FDE04()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create IX_agg_session_agg_session_period_agg_session_start_timestamp ON agg_session(agg_session_period, agg_session_start_timestamp)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDE64(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create IX_agg_session_agg_session_period_agg_session_start_timestamp ON agg_session(agg_session_period, agg_session_start_timestamp); %s",
    v4);
}

void sub_1000FDE9C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create IX_agg_session_agg_session_end_boundary ON agg_session(agg_session_end_boundary)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDEFC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create IX_agg_session_agg_session_end_boundary ON agg_session(agg_session_end_boundary); %s",
    v4);
}

void sub_1000FDF34()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to add agg_session_id column to transform_metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FDF94(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to add agg_session_id column to transform_metadata; %s",
    v4);
}

void sub_1000FDFCC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create agg_session table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE02C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create agg_session table; %s", v4);
}

void sub_1000FE064()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create IX_transform_metadata_transform_event_count ON transform_metadata(transform_event_count)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE0C4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create IX_transform_metadata_transform_event_count ON transform_metadata(transform_event_count); %s",
    v4);
}

void sub_1000FE0FC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to drop transform_other_metadata column[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE15C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to drop transform_other_metadata column; %s",
    v4);
}

void sub_1000FE194()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to transfer data from transform_other_metadata column to transform_event_count column[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE1F4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to transfer data from transform_other_metadata column to transform_event_count column; %s",
    v4);
}

void sub_1000FE22C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to add transform_event_count column to transform_metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE28C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to add transform_event_count column to transform_metadata; %s",
    v4);
}

void sub_1000FE2C4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create UIX_queried_states_queried_state_name_queried_state_params ON queried_states(queried_state_name, queried_state_params)[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE324(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create UIX_queried_states_queried_state_name_queried_state_params ON queried_states(queried_state_name, queried_state_params); %s",
    v4);
}

void sub_1000FE35C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to recreate update_queried_state_last_modified_time trigger[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE3BC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to recreate update_queried_state_last_modified_time trigger; %s",
    v4);
}

void sub_1000FE3F4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to drop queried_states table and rename queried_states_new table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE454(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to drop queried_states table and rename queried_states_new table; %s",
    v4);
}

void sub_1000FE48C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to copy data from queried_states to queried_states_new table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE4EC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to copy data from queried_states to queried_states_new table; %s",
    v4);
}

void sub_1000FE524()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create queried_states_new table[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE584(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create queried_states_new table; %s", v4);
}

void sub_1000FE5BC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for migrating state database[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE61C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for migrating state database; %s",
    v4);
}

void sub_1000FE654()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database queried_states-insert statement[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE6B4(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database queried_states-insert statement; %s",
    v4);
}

void sub_1000FE738()
{
  sub_100089014();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "[State Store] Failed to insert queried_state for stateName='%s' and params='%s'[null database]", v2, 0x16u);
}

void sub_1000FE7DC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database queried_states-retrieve query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE83C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database queried_states-retrieve query; %s",
    v4);
}

void sub_1000FE8C0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] ERROR: Error preparing database iterate-queried-states query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FE920(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] ERROR: Error preparing database iterate-queried-states query; %s",
    v4);
}

void sub_1000FE9A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] ERROR: Failed during iterate-queried-states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FEA00(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] ERROR: Failed during iterate-queried-states; %s",
    v4);
}

void sub_1000FEA80()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database queried_states-remove query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FEAE0(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database queried_states-remove query; %s",
    v4);
}

void sub_1000FEB64()
{
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove queried_states (name='%{public}s')[null database]", v2);
}

void sub_1000FEBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100089020(a1, a2, a3, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove queried_states (name='%{public}s'); %s",
    v3,
    0x16u);
}

void sub_1000FEC28(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database queried_states-remove query; %s",
    v4);
}

void sub_1000FEC60()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove all queried_states[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FECC0(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove all queried_states; %s", v4);
}

void sub_1000FECF8()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_states-retrieve query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FED58(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database transform_states-retrieve query; %s",
    v4);
}

void sub_1000FEDDC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-uuid iterate query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FEE3C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database transform_metadata-uuid iterate query; %s",
    v4);
}

void sub_1000FEEBC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed during retrieve-transform-state-query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FEF1C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Failed during retrieve-transform-state-query; %s",
    v4);
}

void sub_1000FEF9C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_budget_used-retrieve query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FEFFC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database transform_budget_used-retrieve query; %s",
    v4);
}

void sub_1000FF07C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database transform_metadata-iterate query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF0DC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database transform_metadata-iterate query; %s",
    v4);
}

void sub_1000FF15C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed during iterate-transform-metadata-query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF1BC(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Failed during iterate-transform-metadata-query; %s",
    v4);
}

void sub_1000FF23C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database iterate-transforms-for-period iterate query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF29C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database iterate-transforms-for-period iterate query; %s",
    v4);
}

void sub_1000FF31C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed during iterate-transforms-for-period query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF37C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Failed during iterate-transforms-for-period query; %s",
    v4);
}

void sub_1000FF3FC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database iterate-transform-metadata iterate query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF45C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Error preparing database iterate-transform-metadata iterate query; %s",
    v4);
}

void sub_1000FF4DC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed during iterate-transform-metadata query[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF53C(sqlite3 *a1, NSObject *a2)
{
  sqlite3_errmsg(a1);
  sub_10006845C();
  sub_100088FE4((void *)&_mh_execute_header, a2, v3, "[State Store] Failed during iterate-transform-metadata query; %s",
    v4);
}

void sub_1000FF5BC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for removing transform state and metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF61C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for removing transform state and metadata; %s",
    v4);
}

void sub_1000FF654()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for removing all transform state and metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF6B4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for removing all transform state and metadata; %s",
    v4);
}

void sub_1000FF6EC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for removing all expired transform state and metadata[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF74C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for removing all expired transform state and metadata; %s",
    v4);
}

void sub_1000FF784()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Error preparing database remove-all-agg-sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF7E4(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Error preparing database remove-all-agg-sessions; %s",
    v4);
}

void sub_1000FF81C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to remove all agg_sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF87C(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to remove all agg_sessions; %s", v4);
}

void sub_1000FF8B4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for removing and recreating expired aggregation sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF914(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for removing and recreating expired aggregation sessions; %s",
    v4);
}

void sub_1000FF94C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for inserting new aggregation sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FF9AC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for inserting new aggregation sessions; %s",
    v4);
}

void sub_1000FF9E4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for reinitializing all aggregation sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FFA44(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for reinitializing all aggregation sessions; %s",
    v4);
}

void sub_1000FFA7C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for replacing expired aggregation sessions[null database]", v2, v3, v4, v5, v6);
}

void sub_1000FFADC(uint64_t a1, uint64_t a2)
{
  sub_10007FE3C(a1, a2, 4.8149e-34);
  sub_10005A734((void *)&_mh_execute_header, v2, v3, "[State Store] Failed to create transaction for replacing expired aggregation sessions; %s",
    v4);
}

void sub_1000FFB14()
{
  sub_100089014();
  sub_100088FE4((void *)&_mh_execute_header, v0, v1, "[State Store] Failed to create transaction for writing state for transform %{public}s[null database]", v2);
}

void sub_1000FFB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100089020(a1, a2, a3, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[State Store] Failed to create transaction for writing state for transform %{public}s; %s",
    v3,
    0x16u);
}

void sub_1000FFBD8(int *a1, uint8_t *buf, os_log_t log)
{
  int v3 = *a1;
  *(_DWORD *)uint64_t buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Sandboxing] failed to initialize temporary directory: %{darwin.errno}d", buf, 8u);
}

void sub_1000FFC24(int *a1, uint8_t *buf, os_log_t log)
{
  int v3 = *a1;
  *(_DWORD *)uint64_t buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Sandboxing] failed to resolve temporary directory: %{darwin.errno}d", buf, 8u);
}

void sub_1000FFC70(void *a1)
{
  uint64_t v1 = __cxa_begin_catch(a1);
  int v2 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = (*(uint64_t (**)(void *))(*(void *)v1 + 16))(v1);
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[FwConfigWriter] ERROR: failed to delete framework config. Exception: %s", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000FFD48(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  int v6 = 136315394;
  uint64_t v7 = a1;
  __int16 v8 = 2080;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "[FwConfigWriter] ERROR: failed to parse external config of kind: %s, Exception: %s", (uint8_t *)&v6, 0x16u);
}

void sub_1000FFE08()
{
  __assert_rtn("OSTransaction", "utils.cpp", 14, "transaction_ != nullptr");
}

void sub_1000FFE34()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: initialized trialClient for Wireless project ID", v2, v3, v4, v5, v6);
}

void sub_1000FFE94()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: experimentIdentifiers nil. No active experiment", v2, v3, v4, v5, v6);
}

void sub_1000FFEF4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: activateTreatment: Invalid Trial level", v2, v3, v4, v5, v6);
}

void sub_1000FFF54()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: activateTreatment: Invalid Asset Path. Treatment ended. Clear trial plist.", v2, v3, v4, v5, v6);
}

void sub_1000FFFB4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: activateTreatment: Invalid asset path in trial.", v2, v3, v4, v5, v6);
}

void sub_100100014()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: updateTreatment", v2, v3, v4, v5, v6);
}

void sub_100100074()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: subscribeToTrial: Invalid Trial client", v2, v3, v4, v5, v6);
}

void sub_1001000D4()
{
  sub_10002B138();
  sub_10002B11C((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: subscribeToTrial: Subscribing to Trial", v2, v3, v4, v5, v6);
}

void sub_100100134(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: Channels Group (%s) not found.", (uint8_t *)&v3, 0xCu);
}

void sub_1001001BC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: Channels not yet sampled.", v1, 2u);
}

void sub_10010022C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[MTShim Connection] Processing MT xpc event on the work queue", v1, 2u);
}

void sub_10010029C()
{
  sub_100090304(__stack_chk_guard);
  if (v3 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v4 = (uint64_t)(*(void *)(v0 + 80) - *(void *)(v0 + 72)) >> 3;
  int v5 = 136446466;
  uint8_t v6 = v2;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[%{public}s XPC Server] Setting new client connection handler. %zu active connections", (uint8_t *)&v5, 0x16u);
}

void sub_100100334()
{
  sub_100090314();
  sub_100089020(v0, v1, v2, 4.8752e-34);
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}s XPC Connection] managed connection recieved connection invalidated: %s", v3, 0x16u);
}

void sub_100100378()
{
  sub_100090314();
  sub_100089020(v0, v1, v2, 4.8752e-34);
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[%{public}s XPC Connection] managed connection recieved connection interrupted: %s", v3, 0x16u);
}

void sub_1001003BC()
{
  sub_100090314();
  sub_100089020(v0, v1, v2, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%{public}s XPC Connection] managed connection recieved unknown error: %s", v3, 0x16u);
}

void sub_100100400()
{
  sub_100090304(__stack_chk_guard);
  if (v2 < 0) {
    uint64_t v1 = (void *)*v1;
  }
  int v3 = 136446210;
  os_log_t v4 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[%{public}s XPC Connection] Received xpc object of unexpected type", (uint8_t *)&v3, 0xCu);
}

void sub_100100480()
{
  sub_100090314();
  sub_100089020(v0, v1, v2, 4.8752e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%{public}s XPC Server] recieved unknown error: %s", v3, 0x16u);
}

void sub_1001004C4()
{
  sub_100090304(__stack_chk_guard);
  if (v2 < 0) {
    uint64_t v1 = (void *)*v1;
  }
  int v3 = 136446210;
  os_log_t v4 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[%{public}s XPC Server] received xpc object of unexpected type", (uint8_t *)&v3, 0xCu);
}

void sub_100100544()
{
  sub_10006845C();
  __int16 v2 = 2048;
  uint64_t v3 = 4168;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "[Kernel event] Invalid size. std::string::size_type size = %zu, expected: %zu", v1, 0x16u);
}

void sub_1001005C8()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_10009A87C((void *)&_mh_execute_header, v0, v1, "[FW Event] ERROR: Event '%s' dropped due to missing broker", v2, v3, v4, v5, v6);
}

void sub_100100630()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_10009A87C((void *)&_mh_execute_header, v0, v1, "[FW Event] ERROR: Event '%s' has non-object payload; dropping.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100100698()
{
  sub_100088FFC(__stack_chk_guard);
  sub_100089014();
  sub_10009A87C((void *)&_mh_execute_header, v0, v1, "[FW Event] ERROR: Event '%s' has no payload; dropping.",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100100700()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'log-dump' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100760()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'log-transform-counts' due to no reply", v2, v3, v4, v5, v6);
}

void sub_1001007C0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'config-list' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100820()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'config-info' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100880()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'create-event-observer' due to no reply", v2, v3, v4, v5, v6);
}

void sub_1001008E0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: set-dev tasking no config provided; ignoring request",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100100940()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: set-dev tasking failed to save dev config", v2, v3, v4, v5, v6);
}

void sub_1001009A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: set-dev tasking failed to remove dev config", v2, v3, v4, v5, v6);
}

void sub_100100A00(void *a1)
{
  uint64_t v1 = __cxa_begin_catch(a1);
  uint64_t v2 = qword_10015EF40;
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(void *))(*(void *)v1 + 16))(v1);
    sub_10006845C();
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[ClientManager] ERROR: set-dev tasking config provided but was not valid; ignoring request: %s",
      v3,
      0xCu);
  }
}

void sub_100100AD4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'set-tasking-old' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100B34()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: SetDevTasking: no ndjson config provided; ignoring request",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100100B94()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: SetDevTasking: invalid ndjson config; ignoring request",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100100BF4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: SetDevTasking: a failure occured while writing the ndjson config to disk", v2, v3, v4, v5, v6);
}

void sub_100100C54()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'set-tasking' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100CB4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'set-clear-config-after-reboot' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100D14()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'insert-query-state' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100D74()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'query-state' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100DD4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'query-list' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100E34()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'query-clear' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100E94()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'checkout' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100EF4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'transform-info' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100F54()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'event-used' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100100FB4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'transform-persist' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100101014()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'store-locale-info' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100101074()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'transform-evict' due to no reply", v2, v3, v4, v5, v6);
}

void sub_1001010D4()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'app-usage-sync' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100101134()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Dropping 'rollover' due to no reply", v2, v3, v4, v5, v6);
}

void sub_100101194()
{
  sub_10006845C();
  sub_10009A87C((void *)&_mh_execute_header, v0, v1, "[MT Shim] '%{public}s' dropped due to missing broker", v2, v3, v4, v5, v6);
}

void sub_1001011FC()
{
  sub_10006845C();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s %s", v2, 0x16u);
}

void sub_100101290()
{
  sub_100089014();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[Kernel event] Dropping %{public}s as it isn't used in any transform (not in the config or budgeted?)", v1, 0xCu);
}

void sub_100101308()
{
  sub_10006845C();
  sub_10009A87C((void *)&_mh_execute_header, v0, v1, "[Kernel event] '%{public}s' dropped due to missing broker or payload", v2, v3, v4, v5, v6);
}

void sub_100101370()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager] ERROR: Client double connected?", v2, v3, v4, v5, v6);
}

void sub_1001013D0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager Reconfigure] ERROR: Received null config store", v2, v3, v4, v5, v6);
}

void sub_100101430()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager Reconfigure] ERROR: Received config store, but was unable to serialize", v2, v3, v4, v5, v6);
}

void sub_100101490()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[ClientManager Reconfigure] ERROR: Failed to create framework config (device out of space?).", v2, v3, v4, v5, v6);
}

uint64_t sub_1001014F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_100101528(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[HeartBeatActivity] 60 minute timer", v1, 2u);
}

void sub_100101598(unsigned int *a1, NSObject *a2)
{
  sub_10009EC08(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)uint64_t buf = 136446210;
  uint8_t v6 = p_p;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[ConfigUtils] ERROR: Remove task config from disk: failed (%{public}s)", buf, 0xCu);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100101650(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[ConfigUtils] ERROR: Remove task config from disk: nothing to remove", v1, 2u);
}

void sub_1001016C0(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136446210;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[Tasked Config] ERROR: Save task config: failed to because parent path is not a directory %{public}s", (uint8_t *)&v3, 0xCu);
}

void sub_100101748(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v3 = 136446210;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[Tasked Config] ERROR: Failed to save config to path: %{public}s", (uint8_t *)&v3, 0xCu);
}

void sub_1001017D0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[Tasked Config] ERROR: Save task config: failed to write file.", v1, 2u);
}

void sub_100101840()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] No restart queued. Perf window unexpectedly empty", v2, v3, v4, v5, v6);
}

void sub_1001018A0()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] No restart queued. Could not determine memory average", v2, v3, v4, v5, v6);
}

void sub_100101900()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] No restart queued. Could not determine jetsam limit", v2, v3, v4, v5, v6);
}

void sub_100101960()
{
  sub_10002B138();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "[Daemon perf] Perf check throttled", v1, 2u);
}

void sub_1001019CC()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] Perf check ignored. Failed to add valid sample to add to window.", v2, v3, v4, v5, v6);
}

void sub_100101A2C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] Ability to restart is already suspended because restart is in progress", v2, v3, v4, v5, v6);
}

void sub_100101A8C()
{
  sub_10002B138();
  sub_10005A750((void *)&_mh_execute_header, v0, v1, "[Daemon perf] Ability to restart cannot be resumed because restart is in progress", v2, v3, v4, v5, v6);
}

void sub_100101AEC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = sub_100024914(a1);
  if (*(char *)(v4 + 23) >= 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = *(void *)v4;
  }
  uint64_t v6 = sub_100026820(a1);
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = *(void *)v6;
  }
  int v8 = 136315394;
  uint64_t v9 = v5;
  __int16 v10 = 2080;
  uint64_t v11 = v7;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[Transform] transform %s - %s was not initialized when being checked for a budget exceeded", (uint8_t *)&v8, 0x16u);
}

void sub_100101BB8(char *a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  if (a1[23] >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(char **)a1;
  }
  *(_DWORD *)uint64_t buf = 134218242;
  *(void *)(buf + 4) = a3;
  *((_WORD *)buf + 6) = 2082;
  *(void *)(buf + 14) = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[LocationRelay] Location manager updated authorization for accuracy %f: %{public}s", buf, 0x16u);
  if (a1[23] < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100101C3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100101CC0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100101D44(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100101DC8(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "MarketErrorNoLocation";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[LocationManager] Encountered error while querying market: %s", (uint8_t *)&v1, 0xCu);
}

void sub_100101E4C(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "MarketErrorNoneFound";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[LocationManager] Encountered error while introspecting market: %s", (uint8_t *)&v1, 0xCu);
}

void sub_100101ED0(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TrialHelper] rollout query returned: %@", buf, 0xCu);
}

void sub_100101F28(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[TrialHelper] experiments query returned: %@", buf, 0xCu);
}

void sub_100101F80()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] primaryNetworkInterface: %s", v2);
}

void sub_100101FF0()
{
  sub_1000B27F8();
  sub_1000B27DC((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] wiFiLQM: %d", v2, v3, v4, v5, v6);
}

void sub_10010205C()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] wiFiRadioTechResult: %s", v2);
}

void sub_1001020CC()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[WirelessTrialStateRelay] WirelessTrialIdentifier: [NetworkingStateResolver] wirelessTrialIdentifier: %s", v2);
}

void sub_10010213C()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] cellularRAT: %s", v2);
}

void sub_1001021AC()
{
  sub_1000B27F8();
  sub_1000B27DC((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] cellularSignalBars: %d", v2, v3, v4, v5, v6);
}

void sub_100102218()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] subscriberCarrierName: %s", v2);
}

void sub_100102288()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] subscriberCarrierBundleVersion: %s", v2);
}

void sub_1001022F8()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] subscriberCarrierCountry: %s", v2);
}

void sub_100102368()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] servingCarrierName: %s", v2);
}

void sub_1001023D8()
{
  sub_1000B27F8();
  sub_1000B27DC((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] isDualSim: %{BOOL}d", v2, v3, v4, v5, v6);
}

void sub_100102444()
{
  sub_1000B27D0(__stack_chk_guard);
  sub_1000B27C4();
  sub_1000B27A4((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] cellularInternetConnection: %s", v2);
}

void sub_1001024B4()
{
  sub_1000B27F8();
  sub_1000B27DC((void *)&_mh_execute_header, v0, v1, "[NetworkingStateResolver] cellularLQM: %d", v2, v3, v4, v5, v6);
}

void sub_100102520(uint64_t a1, NSObject *a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v2 = "YES";
  }
  else {
    uint64_t v2 = "NO";
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[NetworkingStateResolver] cellularHighThroughput: %s", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_1001025B4()
{
  return std::ios::~ios();
}

void sub_1001025F4(uint64_t a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(void *)(buf + 14) = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[DaemonState] %s parameters parsed (%lu bytes)", buf, 0x16u);
}

void sub_10010264C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001026B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100102714(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100102778()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove legacy budget usage temp path %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_10010280C()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove legacy budget usage path %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_1001028A0()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove_all legacy markov path %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_100102934()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove_all legacy journal path %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_1001029C8()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove legacy config %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_100102A5C()
{
  sub_1000B6D60();
  uint64_t v2 = sub_1000B6D98(v0, v1);
  v3(v2);
  sub_1000B6D48();
  sub_1000B6D78((void *)&_mh_execute_header, v4, v5, "[LegacyWipe] Failed to remove legacy allowlist %{public}s (boost: %{public}s): ", v6, v7, v8, v9, v10);
}

void sub_100102AF0(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)uint64_t buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[RTCReporter] Sending payload %@ to RTCReporting.", buf, 0xCu);
}

void sub_100102B48(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[RTCReporter] Error configuring RTCReporting. initWithSessionInfo failed.", v1, 2u);
}

void sub_100102BB8(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[RTCReporter] Creating RTCReporting session for %s service.", (uint8_t *)&v3, 0xCu);
}

void sub_100102C40(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[RTCReporter] Error configuring RTCReporting.", v1, 2u);
}

void sub_100102CB0(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[RTCReporter] Releasing RTCReporter for %s service.", (uint8_t *)&v3, 0xCu);
}

void sub_100102D38(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[HighEngagement] After fetching Common Dimensions", v1, 2u);
}

void sub_100102DA8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[HighEngagement] About to fetch Common Dimensions", v1, 2u);
}

void sub_100102E18(const char *a1, NSObject *a2)
{
  if (a1)
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
  }
  else
  {
    a1 = "";
  }
  int v2 = 136315394;
  int v3 = "isDualSim";
  __int16 v4 = 2080;
  uint64_t v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "[CD] GetTelephonyInfo: %s unknown: %s", (uint8_t *)&v2, 0x16u);
}

void sub_100102EC0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[CD] GetTelephonyInfo: Failed to get the data preferred context", v1, 2u);
}

void sub_100102F30()
{
  __assert_rtn("operator--", "iter_impl.hpp", 367, "m_object != nullptr");
}

void sub_100102F5C()
{
}

void sub_100102F88()
{
}

void sub_100102FB4()
{
}

void sub_100102FE0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_100103034()
{
}

void sub_100103060()
{
}

void sub_10010308C(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[MemoryUtils] Memory Footprint: {Current: %d, Peak: %d}", (uint8_t *)v3, 0xEu);
}

void sub_100103114(void *a1, uint64_t a2)
{
  __cxa_begin_catch(a1);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC(a2);
  sub_100016EAC(a2);

  __cxa_end_catch();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_TYPE_ERROR.getter()
{
  return XPC_TYPE_ERROR.getter();
}

uint64_t XPC_TYPE_DICTIONARY.getter()
{
  return XPC_TYPE_DICTIONARY.getter();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return _CC_SHA512_Final(md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return _CC_SHA512_Init(c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA512_Update(c, data, len);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return _CFAllocatorAllocate(allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void *__cdecl CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint)
{
  return _CFAllocatorReallocate(allocator, ptr, newsize, hint);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return _CFStringGetMaximumSizeForEncoding(length, encoding);
}

CFTypeRef IOCFUnserializeWithSize(const char *buffer, size_t bufferSize, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return _IOCFUnserializeWithSize(buffer, bufferSize, allocator, options, errorString);
}

kern_return_t IOConnectMapMemory(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return _IOConnectMapMemory(connect, memoryType, intoTask, atAddress, ofSize, options);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return _IOConnectSetNotificationPort(connect, type, port, reference);
}

kern_return_t IOConnectUnmapMemory(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return _IOConnectUnmapMemory(connect, memoryType, fromTask, atAddress);
}

mach_port_t IODataQueueAllocateNotificationPort(void)
{
  return _IODataQueueAllocateNotificationPort();
}

IOReturn IODataQueueDequeue(IODataQueueMemory *dataQueue, void *data, uint32_t *dataSize)
{
  return _IODataQueueDequeue(dataQueue, data, dataSize);
}

IODataQueueEntry *__cdecl IODataQueuePeek(IODataQueueMemory *dataQueue)
{
  return _IODataQueuePeek(dataQueue);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return _IOMainPort(bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

uint64_t IOReportChannelGetChannelName()
{
  return _IOReportChannelGetChannelName();
}

uint64_t IOReportChannelGetFormat()
{
  return _IOReportChannelGetFormat();
}

uint64_t IOReportCopyChannelsInCategories()
{
  return _IOReportCopyChannelsInCategories();
}

uint64_t IOReportCreateSamples()
{
  return _IOReportCreateSamples();
}

uint64_t IOReportCreateSubscription()
{
  return _IOReportCreateSubscription();
}

uint64_t IOReportIterate()
{
  return _IOReportIterate();
}

uint64_t IOReportPrune()
{
  return _IOReportPrune();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return _IOReportSimpleGetIntegerValue();
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return _IOServiceGetMatchingServices(mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t OSATimeIntervalApproximate()
{
  return _OSATimeIntervalApproximate();
}

uint64_t SCDynamicStoreAddWatchedKey()
{
  return _SCDynamicStoreAddWatchedKey();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

uint64_t SCDynamicStoreRemoveWatchedKey()
{
  return _SCDynamicStoreRemoveWatchedKey();
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2, const char *a3)
{
  return applesauce::xpc::dyn_cast_or_default(this, (const applesauce::xpc::object *)a2, a3);
}

uint64_t applesauce::xpc::dyn_cast_or_default()
{
  return applesauce::xpc::dyn_cast_or_default();
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2, BOOL a3)
{
  return applesauce::xpc::dyn_cast_or_default(this, (const applesauce::xpc::object *)a2, a3);
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2, int a3)
{
  return applesauce::xpc::dyn_cast_or_default(this, (const applesauce::xpc::object *)a2, a3);
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2, unint64_t a3)
{
  return applesauce::xpc::dyn_cast_or_default(this, (const applesauce::xpc::object *)a2, a3);
}

uint64_t applesauce::xpc::object::to_string(applesauce::xpc::object *this)
{
  return applesauce::xpc::object::to_string(this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return std::error_code::message(retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::find(this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return std::locale::name(retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::get()
{
  return std::time_get<char,std::istreambuf_iterator<char>>::get();
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return std::time_put<char,std::ostreambuf_iterator<char>>::put();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return std::logic_error::logic_error(this, a2);
}

void std::out_of_range::~out_of_range(std::out_of_range *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  std::runtime_error::~runtime_error(this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return std::regex_error::regex_error(this, __ecode);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return std::string::replace(this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return std::string::basic_string(this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return std::string::operator=(this, __c);
}

uint64_t std::filebuf::open()
{
  return std::filebuf::open();
}

uint64_t std::filebuf::close()
{
  return std::filebuf::close();
}

uint64_t std::filebuf::basic_filebuf()
{
  return std::filebuf::basic_filebuf();
}

uint64_t std::filebuf::~filebuf()
{
  return std::filebuf::~filebuf();
}

uint64_t std::istream::sentry::sentry()
{
  return std::istream::sentry::sentry();
}

uint64_t std::istream::~istream()
{
  return std::istream::~istream();
}

uint64_t std::istream::operator>>()
{
  return std::istream::operator>>();
}

uint64_t std::ostream::write()
{
  return std::ostream::write();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return std::random_device::random_device(this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return std::random_device::operator()(this);
}

uint64_t std::ofstream::open()
{
  return std::ofstream::open();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return std::__get_classname(__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

const std::error_category *std::system_category(void)
{
  return std::system_category();
}

const std::error_category *std::generic_category(void)
{
  return std::generic_category();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return std::__get_collation_name(retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

std::chrono::system_clock::time_point std::chrono::system_clock::from_time_t(time_t __t)
{
  return std::chrono::system_clock::from_time_t(__t);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return std::chrono::system_clock::now();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return std::chrono::system_clock::to_time_t(__t);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return std::locale::locale(this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return std::locale::locale(this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return ___error();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sqlite3_db_truncate()
{
  return __sqlite3_db_truncate();
}

uint64_t _sqlite3_integrity_check()
{
  return __sqlite3_integrity_check();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void bzero(void *a1, size_t a2)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return _clock_gettime(__clock_id, __tp);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

int fileno(FILE *a1)
{
  return _fileno(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return _getpwuid(a1);
}

uid_t getuid(void)
{
  return _getuid();
}

tm *__cdecl gmtime(const time_t *a1)
{
  return _gmtime(a1);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return _gmtime_r(a1, a2);
}

lconv *localeconv(void)
{
  return _localeconv();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return _localtime_r(a1, a2);
}

long double log10(long double __x)
{
  return _log10(__x);
}

int lstat(const char *a1, stat *a2)
{
  return _lstat(a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

time_t mktime(tm *a1)
{
  return _mktime(a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return _nw_path_get_status(path);
}

void nw_path_monitor_cancel(nw_path_monitor_t monitor)
{
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  return _nw_path_monitor_create();
}

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
}

void nw_path_monitor_set_update_handler(nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return _opendir(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_release(void *object)
{
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

uint64_t pathconf(const char *a1, int a2)
{
  return _pathconf(a1, a2);
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return _readdir_r(a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

int rmdir(const char *a1)
{
  return _rmdir(a1);
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return _sprintf(a1, a2);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return _sqlite3_changes(a1);
}

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  return _sqlite3_changes64(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_db_cacheflush(sqlite3 *a1)
{
  return _sqlite3_db_cacheflush(a1);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return _sqlite3_db_config(a1, op);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return _sqlite3_last_insert_rowid(a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v3(db, zSql, nByte, prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return _strftime(a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return _strtoll(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t sysconf(int a1)
{
  return _sysconf(a1);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return _task_info(target_task, flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_value(xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return _xpc_BOOL_create(value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return _xpc_connection_copy_entitlement_value();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return _xpc_connection_send_message_with_reply_sync(connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

uint64_t xpc_connection_set_target_user_session_uid()
{
  return _xpc_connection_set_target_user_session_uid();
}

void xpc_connection_suspend(xpc_connection_t connection)
{
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return _xpc_data_get_bytes_ptr(xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return _xpc_data_get_length(xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return _xpc_dictionary_create_empty();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return _xpc_dictionary_get_remote_connection(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  return _xpc_double_get_value(xdouble);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return _xpc_int64_create(value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

uint64_t xpc_is_system_session()
{
  return _xpc_is_system_session();
}

xpc_object_t xpc_null_create(void)
{
  return _xpc_null_create();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return _xpc_retain(object);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return _xpc_shmem_create(region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return _xpc_shmem_map(xshmem, region);
}

xpc_object_t xpc_string_create(const char *string)
{
  return _xpc_string_create(string);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return _xpc_type_get_name(type);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

uint64_t xpc_user_sessions_enabled()
{
  return _xpc_user_sessions_enabled();
}

uint64_t xpc_user_sessions_get_foreground_uid()
{
  return _xpc_user_sessions_get_foreground_uid();
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return _xpc_uuid_get_bytes(xuuid);
}

id objc_msgSend_AnalyticsQueryValuesWrapperWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AnalyticsQueryValuesWrapperWithArguments:");
}

id objc_msgSend_CA(void *a1, const char *a2, ...)
{
  return _[a1 CA];
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return _[a1 Device];
}

id objc_msgSend_HighEngagementDevices(void *a1, const char *a2, ...)
{
  return _[a1 HighEngagementDevices];
}

id objc_msgSend_NANData(void *a1, const char *a2, ...)
{
  return _[a1 NANData];
}

id objc_msgSend_OSAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 OSAnalytics];
}

id objc_msgSend_ScreenLocked(void *a1, const char *a2, ...)
{
  return _[a1 ScreenLocked];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__updateCellInternetStatusAndLQM_pdpContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCellInternetStatusAndLQM:pdpContext:");
}

id objc_msgSend__updateCellularLQM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCellularLQM:");
}

id objc_msgSend__updateCellularRAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCellularRAT:");
}

id objc_msgSend__updateHighThroughput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHighThroughput:");
}

id objc_msgSend__updateIsDualSim_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateIsDualSim:");
}

id objc_msgSend__updateServingCarrierName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateServingCarrierName:");
}

id objc_msgSend__updateSignalBars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSignalBars:");
}

id objc_msgSend__updateSubscriberCarrierBundleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSubscriberCarrierBundleVersion:");
}

id objc_msgSend__updateSubscriberCarrierCountry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSubscriberCarrierCountry:");
}

id objc_msgSend__updateSubscriberCarrierName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSubscriberCarrierName:");
}

id objc_msgSend__updateTrialState_experimentIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTrialState:experimentIdentifiers:");
}

id objc_msgSend__updateWirelessTrialIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWirelessTrialIdentifier:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addUpdateHandlerForNamespaceName_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUpdateHandlerForNamespaceName:queue:usingBlock:");
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 administrativeArea];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_appInFocusStream(void *a1, const char *a2, ...)
{
  return _[a1 appInFocusStream];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return _[a1 automotive];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _[a1 buildVersion];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cellularInternetConnectionStateAsEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularInternetConnectionStateAsEnum:");
}

id objc_msgSend_clientWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientWithIdentifier:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_configureCWFInterfaceEventHandler(void *a1, const char *a2, ...)
{
  return _[a1 configureCWFInterfaceEventHandler];
}

id objc_msgSend_configureSCDynamicStore(void *a1, const char *a2, ...)
{
  return _[a1 configureSCDynamicStore];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _[a1 coordinate];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyBundleVersion_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBundleVersion:bundleType:error:");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValue:key:bundleType:error:");
}

id objc_msgSend_copyMobileCountryCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileCountryCode:error:");
}

id objc_msgSend_copyMobileNetworkCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileNetworkCode:error:");
}

id objc_msgSend_copyMobileSubscriberCountryCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberCountryCode:error:");
}

id objc_msgSend_copyMobileSubscriberNetworkCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberNetworkCode:error:");
}

id objc_msgSend_copyRegistrationDisplayStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRegistrationDisplayStatus:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_crashReporterKey(void *a1, const char *a2, ...)
{
  return _[a1 crashReporterKey];
}

id objc_msgSend_createForSubmission_metadata_options_error_writing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createForSubmission:metadata:options:error:writing:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return _[a1 currentKnownNetworkProfile];
}

id objc_msgSend_currentQueue(void *a1, const char *a2, ...)
{
  return _[a1 currentQueue];
}

id objc_msgSend_cycling(void *a1, const char *a2, ...)
{
  return _[a1 cycling];
}

id objc_msgSend_dataSubscriptionContext(void *a1, const char *a2, ...)
{
  return _[a1 dataSubscriptionContext];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultProvider(void *a1, const char *a2, ...)
{
  return _[a1 defaultProvider];
}

id objc_msgSend_deploymentId(void *a1, const char *a2, ...)
{
  return _[a1 deploymentId];
}

id objc_msgSend_deregisterForCWEventTypes(void *a1, const char *a2, ...)
{
  return _[a1 deregisterForCWEventTypes];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_displayBars(void *a1, const char *a2, ...)
{
  return _[a1 displayBars];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dyldPlatform(void *a1, const char *a2, ...)
{
  return _[a1 dyldPlatform];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endDateSortDescriptorAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDateSortDescriptorAscending:");
}

id objc_msgSend_enhancedLinkQuality(void *a1, const char *a2, ...)
{
  return _[a1 enhancedLinkQuality];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateSampledActiveExperimentsForEnvironment_correlationID_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSampledActiveExperimentsForEnvironment:correlationID:error:block:");
}

id objc_msgSend_enumerateSampledActiveRolloutsForCorrelationID_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSampledActiveRolloutsForCorrelationID:error:block:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _[a1 eventBody];
}

id objc_msgSend_exactBundleVersion(void *a1, const char *a2, ...)
{
  return _[a1 exactBundleVersion];
}

id objc_msgSend_executeQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:error:");
}

id objc_msgSend_experimentId(void *a1, const char *a2, ...)
{
  return _[a1 experimentId];
}

id objc_msgSend_experimentIdentifiersWithNamespaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "experimentIdentifiersWithNamespaceName:");
}

id objc_msgSend_extractHighThroughput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractHighThroughput:");
}

id objc_msgSend_extractLinkStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractLinkStateChange:");
}

id objc_msgSend_extractServingCellInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractServingCellInfo:");
}

id objc_msgSend_factorPackIds(void *a1, const char *a2, ...)
{
  return _[a1 factorPackIds];
}

id objc_msgSend_fetchHighEngagementCategories(void *a1, const char *a2, ...)
{
  return _[a1 fetchHighEngagementCategories];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileValue(void *a1, const char *a2, ...)
{
  return _[a1 fileValue];
}

id objc_msgSend_filepath(void *a1, const char *a2, ...)
{
  return _[a1 filepath];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_formatCellularRAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatCellularRAT:");
}

id objc_msgSend_formatCellularRat_forDeploymentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatCellularRat:forDeploymentType:");
}

id objc_msgSend_formatInternetConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatInternetConnection:");
}

id objc_msgSend_formatSignalBars_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatSignalBars:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getEnglishCarrierNameFor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnglishCarrierNameFor:error:");
}

id objc_msgSend_getInternetConnectionStateSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInternetConnectionStateSync:");
}

id objc_msgSend_getPreferredDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPreferredDataSubscriptionContextSync:");
}

id objc_msgSend_getQueue(void *a1, const char *a2, ...)
{
  return _[a1 getQueue];
}

id objc_msgSend_getSandboxExtensionTokensForIdentifierQueryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSandboxExtensionTokensForIdentifierQueryWithError:");
}

id objc_msgSend_getSignalStrengthInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSignalStrengthInfo:error:");
}

id objc_msgSend_getState(void *a1, const char *a2, ...)
{
  return _[a1 getState];
}

id objc_msgSend_getSubscriptionInfoWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionInfoWithError:");
}

id objc_msgSend_getWirelessTrialIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 getWirelessTrialIdentifier];
}

id objc_msgSend_handleDisplayStatusChangedForSatelliteStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDisplayStatusChangedForSatelliteStatus:");
}

id objc_msgSend_handleHighThroughputChanged_metric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleHighThroughputChanged:metric:");
}

id objc_msgSend_handleLinkStateChanged_metric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLinkStateChanged:metric:");
}

id objc_msgSend_hasStarting(void *a1, const char *a2, ...)
{
  return _[a1 hasStarting];
}

id objc_msgSend_highEngagementCategory1(void *a1, const char *a2, ...)
{
  return _[a1 highEngagementCategory1];
}

id objc_msgSend_highEngagementCategory2(void *a1, const char *a2, ...)
{
  return _[a1 highEngagementCategory2];
}

id objc_msgSend_initTelephonyClient(void *a1, const char *a2, ...)
{
  return _[a1 initTelephonyClient];
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:");
}

id objc_msgSend_initWithDelegate_withAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:withAccuracy:");
}

id objc_msgSend_initWithEffectiveBundle_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffectiveBundle:delegate:onQueue:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitoring:");
}

id objc_msgSend_initWithMonitoring_withWiFiStateRelay_withTelephonyStateRelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitoring:withWiFiStateRelay:withTelephonyStateRelay:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithSessionInfo_userInfo_frameworksToCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionInfo:userInfo:frameworksToCheck:");
}

id objc_msgSend_initWithStartDate_endDate_maxEvents_lastN_reversed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:maxEvents:lastN:reversed:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _[a1 interfaceName];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_isActivityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isActivityAvailable];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isLowPowerModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLowPowerModeEnabled];
}

id objc_msgSend_isNativeArchitecture(void *a1, const char *a2, ...)
{
  return _[a1 isNativeArchitecture];
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 isPersonalHotspot];
}

id objc_msgSend_isSatelliteSystem(void *a1, const char *a2, ...)
{
  return _[a1 isSatelliteSystem];
}

id objc_msgSend_isStewieActive(void *a1, const char *a2, ...)
{
  return _[a1 isStewieActive];
}

id objc_msgSend_isStewieActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStewieActive:");
}

id objc_msgSend_knowledgeStore(void *a1, const char *a2, ...)
{
  return _[a1 knowledgeStore];
}

id objc_msgSend_lastKnownEstimates(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownEstimates];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return _[a1 legacyInfo];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_levelForFactor_withNamespaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "levelForFactor:withNamespaceName:");
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _[a1 locality];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedStringForCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForCountryCode:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationServicesEnabled(void *a1, const char *a2, ...)
{
  return _[a1 locationServicesEnabled];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_maxPHYModeDescription(void *a1, const char *a2, ...)
{
  return _[a1 maxPHYModeDescription];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metricType(void *a1, const char *a2, ...)
{
  return _[a1 metricType];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return _[a1 networkName];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _[a1 objCType];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_optIn3rdParty(void *a1, const char *a2, ...)
{
  return _[a1 optIn3rdParty];
}

id objc_msgSend_optInApple(void *a1, const char *a2, ...)
{
  return _[a1 optInApple];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathCATasking(void *a1, const char *a2, ...)
{
  return _[a1 pathCATasking];
}

id objc_msgSend_pdp(void *a1, const char *a2, ...)
{
  return _[a1 pdp];
}

id objc_msgSend_powerOn(void *a1, const char *a2, ...)
{
  return _[a1 powerOn];
}

id objc_msgSend_predicateForEventsIntersectingDateRangeFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForEventsIntersectingDateRangeFrom:to:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return _[a1 productName];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_prohibitNetworkAgentsWithDomain_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prohibitNetworkAgentsWithDomain:type:");
}

id objc_msgSend_publisherWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publisherWithOptions:");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_recordEvent_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordEvent:with:");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _[a1 refresh];
}

id objc_msgSend_refreshInternetConnectionSync(void *a1, const char *a2, ...)
{
  return _[a1 refreshInternetConnectionSync];
}

id objc_msgSend_refreshIsDualSimSync(void *a1, const char *a2, ...)
{
  return _[a1 refreshIsDualSimSync];
}

id objc_msgSend_refreshOnCurrentDataSimChange(void *a1, const char *a2, ...)
{
  return _[a1 refreshOnCurrentDataSimChange];
}

id objc_msgSend_refreshServingCarrierNameSync(void *a1, const char *a2, ...)
{
  return _[a1 refreshServingCarrierNameSync];
}

id objc_msgSend_refreshSignalStrengthBarsSync(void *a1, const char *a2, ...)
{
  return _[a1 refreshSignalStrengthBarsSync];
}

id objc_msgSend_refreshSubscriberInfoSync(void *a1, const char *a2, ...)
{
  return _[a1 refreshSubscriberInfoSync];
}

id objc_msgSend_refreshTrialState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshTrialState:");
}

id objc_msgSend_refreshWiFiLQM(void *a1, const char *a2, ...)
{
  return _[a1 refreshWiFiLQM];
}

id objc_msgSend_refreshWiFiLQM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWiFiLQM:");
}

id objc_msgSend_refreshWirelessTrialIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 refreshWirelessTrialIdentifier];
}

id objc_msgSend_registerForCWEventTypes(void *a1, const char *a2, ...)
{
  return _[a1 registerForCWEventTypes];
}

id objc_msgSend_registerForNetworkChanges(void *a1, const char *a2, ...)
{
  return _[a1 registerForNetworkChanges];
}

id objc_msgSend_registerForSCDynamicStoreLQMUpdates(void *a1, const char *a2, ...)
{
  return _[a1 registerForSCDynamicStoreLQMUpdates];
}

id objc_msgSend_registrationDisplayStatus(void *a1, const char *a2, ...)
{
  return _[a1 registrationDisplayStatus];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeUpdateHandlerForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeUpdateHandlerForToken:");
}

id objc_msgSend_requestLocation(void *a1, const char *a2, ...)
{
  return _[a1 requestLocation];
}

id objc_msgSend_retrieveRadioTech(void *a1, const char *a2, ...)
{
  return _[a1 retrieveRadioTech];
}

id objc_msgSend_retrieveWiFILQM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveWiFILQM:");
}

id objc_msgSend_reverseGeocodeLocation_preferredLocale_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseGeocodeLocation:preferredLocale:completionHandler:");
}

id objc_msgSend_rolloutId(void *a1, const char *a2, ...)
{
  return _[a1 rolloutId];
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return _[a1 running];
}

id objc_msgSend_sendMessageWithCategory_type_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithCategory:type:payload:error:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredAccuracy:");
}

id objc_msgSend_setDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDouble:forKey:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setEventStreams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventStreams:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_shortVersionString(void *a1, const char *a2, ...)
{
  return _[a1 shortVersionString];
}

id objc_msgSend_signalEnvironmentType(void *a1, const char *a2, ...)
{
  return _[a1 signalEnvironmentType];
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _[a1 slotID];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startActivityUpdatesToQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startActivityUpdatesToQueue:withHandler:");
}

id objc_msgSend_startConfigurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConfigurationWithCompletionHandler:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateSortDescriptorAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateSortDescriptorAscending:");
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringEventType:error:");
}

id objc_msgSend_starting(void *a1, const char *a2, ...)
{
  return _[a1 starting];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return _[a1 stationary];
}

id objc_msgSend_stopActivityUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopActivityUpdates];
}

id objc_msgSend_stopMonitoringEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringEventType:");
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopUpdatingLocation];
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subAdministrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 subAdministrativeArea];
}

id objc_msgSend_subscribeToTrial(void *a1, const char *a2, ...)
{
  return _[a1 subscribeToTrial];
}

id objc_msgSend_subscribeToTrialNamespace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToTrialNamespace:");
}

id objc_msgSend_subscribeToUserDataChangesWithArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToUserDataChangesWithArguments:");
}

id objc_msgSend_subscriptionsInUse(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsInUse];
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_systemLocale(void *a1, const char *a2, ...)
{
  return _[a1 systemLocale];
}

id objc_msgSend_targetAudience(void *a1, const char *a2, ...)
{
  return _[a1 targetAudience];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_topCategory1(void *a1, const char *a2, ...)
{
  return _[a1 topCategory1];
}

id objc_msgSend_topCategory2(void *a1, const char *a2, ...)
{
  return _[a1 topCategory2];
}

id objc_msgSend_topCategory3(void *a1, const char *a2, ...)
{
  return _[a1 topCategory3];
}

id objc_msgSend_treatmentId(void *a1, const char *a2, ...)
{
  return _[a1 treatmentId];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _[a1 unknown];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsubscribeAllUpdateHandlers(void *a1, const char *a2, ...)
{
  return _[a1 unsubscribeAllUpdateHandlers];
}

id objc_msgSend_updateDelegateWithInitialStates(void *a1, const char *a2, ...)
{
  return _[a1 updateDelegateWithInitialStates];
}

id objc_msgSend_updatePrimaryNetworkInterfaceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrimaryNetworkInterfaceType:");
}

id objc_msgSend_updateSatelliteStatusAndCellularRAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSatelliteStatusAndCellularRAT:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return _[a1 walking];
}

id objc_msgSend_wiFiActiveAndUsingPersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 wiFiActiveAndUsingPersonalHotspot];
}