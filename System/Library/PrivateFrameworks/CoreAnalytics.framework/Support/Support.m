void sub_1000029CC(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  void *v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;

  v4 = *(void **)a1;
  if (v4 == (void *)-1)
  {
    *a2 = xpc_null_create();
    a2[1] = 0;
  }
  else
  {
    v5 = xpc_shmem_create(v4, *(void *)(a1 + 8));
    if (!v5) {
      v5 = xpc_null_create();
    }
    v6 = *(void **)(a1 + 8);
    *a2 = v5;
    v7 = xpc_null_create();
    a2[1] = v6;
    xpc_release(v7);
  }
}

void sub_100002A40(uint64_t a1, void *a2, xpc_object_t *a3)
{
  xpc_object_t v4 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  *a2 = v4;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
}

uint64_t sub_100002A94(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  xpc_release(v5);
  *(void *)(a1 + 8) = a2[1];
  return a1;
}

void sub_100002AEC(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3) {
      goto LABEL_5;
    }
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    goto LABEL_7;
  }
LABEL_5:
  *a1 = xpc_null_create();
LABEL_7:
  xpc_release(v3);
}

void sub_100002B80(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v7 = [v9 objectForKeyedSubscript:kCTCellMonitorCellType];
    v8 = v7;
    if (v7 && [v7 isEqualToString:kCTCellMonitorCellTypeServing])
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }
  }
}

void sub_100002C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100002C6C(uint64_t a1)
{
  v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  xpc_object_t v2 = (void **)v1[1];
  uint64_t v4 = *v1 + 208;
  xpc_object_t v5 = (void *)(*(void *)(*v1 + 248) + 1);
  *(void *)(*v1 + 248) = v5;
  xpc_object_t v11 = v5;
  LOBYTE(v12) = 0;
  char v14 = 0;
  memset(v15, 0, sizeof(v15));
  sub_10002793C((uint64_t)&object, v2, (uint64_t *)&v11);
  sub_100027AC4(v4, &object, (uint64_t)&object);
  char v7 = v6;
  v10 = (void **)&v21;
  sub_100014738(&v10);
  if (v20 && v19 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  v10 = v15;
  sub_100014738(&v10);
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v7)
  {
    if (*(unsigned char *)v1[2])
    {
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = xpc_null_create();
      unint64_t v17 = 0;
      id v9 = *(void **)(v3 + 264);
      if (v9)
      {
        sub_100027E28(v9, (uint64_t)&v11);
        sub_100002A94((uint64_t)&object, &v11);
        xpc_release(v11);
      }
      sub_100003594((uint64_t)v9, (xpc_connection_t *)v1[1], v8, (uint64_t)&object);
      xpc_release(object);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
  {
    sub_100101370();
  }
}

void sub_100002E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
}

void sub_100002EB8(uint64_t a1, xpc_object_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEBUG)) {
    sub_10010029C();
  }
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >= *(void *)(a1 + 88))
  {
    uint64_t v5 = sub_100090108((void *)(a1 + 72), a2);
  }
  else
  {
    sub_100002A40(a1 + 88, *(void **)(a1 + 80), a2);
    uint64_t v5 = v4 + 8;
    *(void *)(a1 + 80) = v4 + 8;
  }
  *(void *)(a1 + 80) = v5;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  char v6 = (_xpc_connection_s *)*a2;
  sub_10000FB4C(&v12, (void *)(a1 + 8));
  uint64_t v8 = v12;
  char v7 = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000147D8(v7);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 1174405120;
  handler[2] = sub_1000048AC;
  handler[3] = &unk_100156550;
  handler[4] = a1;
  handler[5] = v8;
  v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v11 = v6;
  xpc_connection_set_event_handler(v6, handler);
  xpc_connection_set_target_queue(v6, *(dispatch_queue_t *)(a1 + 24));
  xpc_connection_resume(v6);
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 48))(a1, a2);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100003080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  *(void *)(v16 + 80) = v17;
  _Unwind_Resume(exception_object);
}

void sub_1000030BC(void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    char v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      if (!a1[5])
      {
LABEL_19:
        sub_1000147D8(v7);
        return;
      }
      xpc_type_t type = xpc_get_type(a2);
      if (type != (xpc_type_t)&_xpc_type_connection)
      {
        if (type == (xpc_type_t)&_xpc_type_error)
        {
          if (a2 == &_xpc_error_connection_invalid)
          {
            v10 = qword_10015EF80;
            if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEFAULT))
            {
              xpc_object_t v11 = (void *)(v5 + 32);
              if (*(char *)(v5 + 55) < 0) {
                xpc_object_t v11 = (void *)*v11;
              }
              *(_DWORD *)xpc_object_t object = 136446466;
              *(void *)&object[4] = v11;
              __int16 v14 = 2080;
              string = xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[%{public}s XPC Server] recieved connection invalidated: %s", object, 0x16u);
            }
            dispatch_group_leave(*(dispatch_group_t *)(v5 + 64));
          }
          else
          {
            id v9 = qword_10015EF80;
            if (a2 == &_xpc_error_connection_interrupted)
            {
              if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v12 = (void *)(v5 + 32);
                if (*(char *)(v5 + 55) < 0) {
                  uint64_t v12 = (void *)*v12;
                }
                *(_DWORD *)xpc_object_t object = 136446466;
                *(void *)&object[4] = v12;
                __int16 v14 = 2080;
                string = xpc_dictionary_get_string(&_xpc_error_connection_interrupted, _xpc_error_key_description);
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%{public}s XPC Server] recieved connection interrupted: %s", object, 0x16u);
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_ERROR))
            {
              xpc_dictionary_get_string(a2, _xpc_error_key_description);
              sub_100100480();
            }
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_ERROR))
        {
          sub_1001004C4();
        }
        goto LABEL_19;
      }
      if (a2)
      {
        xpc_retain(a2);
        *(void *)xpc_object_t object = a2;
      }
      else
      {
        a2 = xpc_null_create();
        *(void *)xpc_object_t object = a2;
        if (!a2) {
          goto LABEL_16;
        }
      }
      if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_connection)
      {
        xpc_retain(a2);
        goto LABEL_18;
      }
LABEL_16:
      *(void *)xpc_object_t object = xpc_null_create();
LABEL_18:
      sub_100002EB8(v5, (xpc_object_t *)object);
      xpc_release(*(xpc_object_t *)object);
      *(void *)xpc_object_t object = 0;
      xpc_release(a2);
      goto LABEL_19;
    }
  }
}

void sub_100003394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  sub_1000147D8(v9);
  _Unwind_Resume(a1);
}

sqlite3_stmt **sub_1000033FC(uint64_t a1)
{
  v1 = *(void ***)(a1 + 40);
  uint64_t v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100008C70(&v3, *v1);
  return sub_100008C7C(&v3);
}

void sub_100003578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003594(uint64_t a1, xpc_connection_t *a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v15 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  sub_100002AEC(&v15);
  xpc_object_t object = xpc_string_create("configuration-change");
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  uint64_t v12 = "notification";
  sub_100003760((uint64_t)&v11, &object, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  char v6 = *(void **)a4;
  xpc_object_t v9 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  uint64_t v12 = "configuration";
  sub_100003760((uint64_t)&v11, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_object_t v7 = xpc_int64_create(*(void *)(a4 + 8));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v11 = &v15;
  uint64_t v12 = "configuration-size";
  sub_100003760((uint64_t)&v11, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v7);
  xpc_object_t v7 = 0;
  xpc_connection_send_message(*a2, v15);
  xpc_release(v15);
}

void sub_100003708(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

xpc_object_t sub_100003760@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void sub_10000392C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100003A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_100003F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Block_object_dispose(&a14, 8);

  _Unwind_Resume(a1);
}

void sub_100004100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10000412C(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(v3);
  sub_1000041B8(*(void *)(a1 + 32), v3);
  return sub_10001DE9C((uint64_t **)v3);
}

void sub_1000041AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1000041B8(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == a2[2].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 40))
    {
      v7[0] = a2->n128_u8[0];
      xpc_object_t v8 = (uint64_t *)a2->n128_u64[1];
      sub_100016EAC((uint64_t)a2);
      a2->n128_u8[0] = 0;
      a2->n128_u64[1] = 0;
      sub_100016EAC((uint64_t)v7);
      sub_100016EAC((uint64_t)v7);
      unsigned __int8 v4 = *(unsigned char *)a1;
      *(unsigned char *)a1 = v7[0];
      v7[0] = v4;
      uint64_t v5 = *(uint64_t **)(a1 + 8);
      *(void *)(a1 + 8) = v8;
      xpc_object_t v8 = v5;
      sub_100016EAC(a1);
      sub_100016EAC((uint64_t)v7);
      sub_100016B28(&v8, v7[0]);
      __n128 result = a2[1];
      *(unsigned char *)(a1 + 32) = a2[2].n128_u8[0];
      *(__n128 *)(a1 + 16) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    sub_1000871AC((uint64_t **)a1);
  }
  else
  {
    *(unsigned char *)a1 = a2->n128_u8[0];
    *(void *)(a1 + 8) = a2->n128_u64[1];
    sub_100016EAC((uint64_t)a2);
    a2->n128_u8[0] = 0;
    a2->n128_u64[1] = 0;
    sub_100016EAC(a1);
    __n128 result = a2[1];
    *(unsigned char *)(a1 + 32) = a2[2].n128_u8[0];
    *(__n128 *)(a1 + 16) = result;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t sub_100004338(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

unint64_t sub_100004374(uint64_t a1)
{
  v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = (sqlite3_stmt **)(*v1 + 192);
  if (*v3
    || (sub_100064D6C(*v1, "SELECT transform_budget_used, transform_event_count FROM transform_metadata WHERE transform_uuid=?1", 1, &v11), unsigned __int8 v4 = v11, v11 = 0, sub_1000650BC(v3, v4), sub_1000650BC(&v11, 0), *(void *)(v2 + 192)))
  {
    xpc_object_t v11 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v11, v3);
    sub_100008A30(v2, v3, 1, v1[1]);
    if (sub_1000090A4(v2, v3) == 100)
    {
      unsigned int v5 = sub_100006A48(v2, v3, 0);
      unsigned int v6 = sub_100006A48(v2, v3, 1);
    }
    else
    {
      unsigned int v5 = 0;
      unsigned int v6 = 0;
    }
    sub_100008C7C(&v11);
  }
  else
  {
    xpc_object_t v8 = *(sqlite3 **)(v2 + 32);
    xpc_object_t v9 = qword_10015EF60;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10) {
        sub_1000FEFFC(v8, v9);
      }
    }
    else if (v10)
    {
      sub_1000FEF9C();
    }
    unsigned int v5 = 0;
    unsigned int v6 = 0;
  }
  return v5 | ((unint64_t)v6 << 32);
}

void sub_1000044F0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v5);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  unsigned __int8 v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + 8) = v6;
  unsigned int v6 = v4;
  sub_100016EAC(v2);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

void sub_1000045AC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v5);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  unsigned __int8 v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + 8) = v6;
  unsigned int v6 = v4;
  sub_100016EAC(v2);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

void sub_100004668(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v5);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  unsigned __int8 v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + 8) = v6;
  unsigned int v6 = v4;
  sub_100016EAC(v2);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

void sub_100004724(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v5);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  unsigned __int8 v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + 8) = v6;
  unsigned int v6 = v4;
  sub_100016EAC(v2);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

void sub_1000047E0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100016EAC((uint64_t)&v5);
  char v3 = *(unsigned char *)v2;
  *(unsigned char *)uint64_t v2 = v5;
  LOBYTE(v5) = v3;
  unsigned __int8 v4 = *(uint64_t **)(v2 + 8);
  *(void *)(v2 + 8) = v6;
  unsigned int v6 = v4;
  sub_100016EAC(v2);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

uint64_t **sub_10000489C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000109C8(**(void **)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8), a2);
}

void sub_1000048AC(void *a1, void *a2)
{
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      if (!a1[5])
      {
LABEL_28:
        sub_1000147D8(v7);
        return;
      }
      xpc_object_t v8 = (xpc_object_t)a1[7];
      if (v8)
      {
        xpc_retain(v8);
        if (a2)
        {
LABEL_6:
          xpc_retain(a2);
          xpc_object_t v9 = a2;
LABEL_9:
          xpc_type_t type = xpc_get_type(a2);
          if (type == (xpc_type_t)&_xpc_type_dictionary)
          {
            v15[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v15[0] = xpc_null_create();
            }
            xpc_object_t object = v9;
            if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary) {
              xpc_retain(v9);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v5 + 64))(v5, v15, &object);
            xpc_release(object);
            xpc_release(v15[0]);
          }
          else if (type == (xpc_type_t)&_xpc_type_error)
          {
            v15[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v15[0] = xpc_null_create();
            }
            (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v5 + 56))(v5, v15);
            xpc_release(v15[0]);
            v15[0] = v8;
            if (v8 && xpc_get_type(v8) == (xpc_type_t)&_xpc_type_connection) {
              xpc_retain(v8);
            }
            else {
              v15[0] = xpc_null_create();
            }
            char v13 = sub_10008F770(*(xpc_object_t **)(v5 + 72), *(xpc_object_t **)(v5 + 80), v15);
            sub_10008F808(v5 + 72, v13, *(xpc_connection_t **)(v5 + 80));
            xpc_release(v15[0]);
            if (a2 == &_xpc_error_connection_invalid)
            {
              if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEBUG))
              {
                xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
                sub_100100334();
              }
              dispatch_group_leave(*(dispatch_group_t *)(v5 + 64));
            }
            else if (a2 == &_xpc_error_connection_interrupted)
            {
              if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEBUG))
              {
                xpc_dictionary_get_string(&_xpc_error_connection_interrupted, _xpc_error_key_description);
                sub_100100378();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_ERROR))
            {
              xpc_dictionary_get_string(a2, _xpc_error_key_description);
              sub_1001003BC();
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_ERROR))
          {
            sub_100100400();
          }
          xpc_object_t reply = xpc_dictionary_create_reply(a2);
          if (reply)
          {
            remote_connection = xpc_dictionary_get_remote_connection(a2);
            xpc_connection_send_message(remote_connection, reply);
            xpc_release(reply);
          }
          xpc_release(v9);
          xpc_release(v8);
          goto LABEL_28;
        }
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        if (a2) {
          goto LABEL_6;
        }
      }
      xpc_object_t v9 = xpc_null_create();
      goto LABEL_9;
    }
  }
}

void sub_100004C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object)
{
  xpc_release(v13);
  xpc_release(v12);
  sub_1000147D8(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100004D64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 16))();
}

void sub_100004D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 8;
  v5[0] = a3;
  v5[1] = a1;
  unsigned __int8 v4 = *(NSObject **)(a1 + 24);
  v5[2] = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10000B470;
  block[3] = &unk_1001568A8;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void *sub_100004E34(uint64_t a1)
{
  v1 = *(void **)(a1 + 40);
  uint64_t v2 = *v1;
  if (!*(unsigned char *)(*v1 + 128)
    || (uint64_t result = (void *)sub_100004FF8(v2 + 88, (char *)(*(void *)v1[1] + 16)), result))
  {
    unsigned __int8 v4 = (uint64_t *)v1[1];
    uint64_t v5 = *v4;
    unsigned int v6 = (void *)(*v4 + 16);
    size_t v7 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if (*(char *)(*v4 + 39) < 0)
    {
      if (v7 == *(void *)(v5 + 24))
      {
        if (v7 == -1) {
          goto LABEL_15;
        }
        unsigned int v6 = (void *)*v6;
LABEL_10:
        if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
        {
          xpc_object_t v8 = qword_10015EFA0;
          if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v10) = 136446210;
            *(void *)((char *)&v10 + 4) = "com.apple.coreanalytics.heartbeat.2hours";
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[ModifyEventManager] Retrieving Modify Event Definitions for %{public}s.", (uint8_t *)&v10, 0xCu);
            unsigned __int8 v4 = (uint64_t *)v1[1];
            uint64_t v5 = *v4;
          }
        }
      }
    }
    else if (v7 == *(unsigned __int8 *)(*v4 + 39))
    {
      if (v7 == -1) {
LABEL_15:
      }
        sub_10002B720();
      goto LABEL_10;
    }
    uint64_t v9 = *(void *)(v2 + 40);
    *(void *)&long long v10 = off_100154FE0;
    *((void *)&v10 + 1) = v2;
    xpc_object_t v11 = v4;
    uint64_t v12 = &v10;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v9 + 200))(v9, v5 + 16, &v10);
    return sub_10000642C(&v10);
  }
  return result;
}

void sub_100004FEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100004FF8(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10000507C(a1, a2);
  if ((*(void *)(*(void *)(a1 + 8) + (((v4 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4 % *(void *)(a1 + 32)))) {
    return 1;
  }
  unint64_t v6 = sub_1000050D8(a1 + 1, a2);
  return (*(void *)(*(void *)(a1 + 8) + (((v6 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 % *(void *)(a1 + 32))) & 1;
}

unint64_t sub_10000507C(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  unint64_t result = 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  for (; v2; --v2)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

uint64_t sub_1000050D8(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (!v2) {
    return 13;
  }
  unint64_t v4 = 0;
  do
  {
    uint64_t v5 = *v3++;
    unint64_t v6 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ v4);
    unint64_t v4 = v6 + 3864292196u;
    --v2;
  }
  while (v2);
  return v6 + 3864292209u;
}

void sub_100005148(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F128, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F128))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EC60, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F128);
  }
  std::mutex::lock(&stru_10015EC60);
  uint64_t v10 = a1 + 136;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v5 = *(NSObject **)(a1 + 24);
  v18 = _NSConcreteStackBlock;
  uint64_t v19 = 0x40000000;
  char v20 = sub_10000B368;
  uint64_t v21 = &unk_10015A430;
  uint64_t v22 = a1 + 8;
  v23 = &v10;
  v24 = &v18;
  LOBYTE(v17) = -86;
  block = _NSConcreteStackBlock;
  uint64_t v27 = 0x40000000;
  v28 = sub_1000065D0;
  v29 = &unk_100159F20;
  v30 = &v17;
  v31 = (void ***)&v24;
  dispatch_sync(v5, &block);
  if ((_BYTE)v17)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEBUG)) {
      sub_1000E5D94();
    }
    do
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v10 = a1;
      uint64_t v11 = a1 + 136;
      uint64_t v12 = &v17;
      char v13 = &v16;
      xpc_object_t v14 = &v15;
      uint64_t v15 = 0;
      unint64_t v6 = *(NSObject **)(a1 + 24);
      v18 = _NSConcreteStackBlock;
      uint64_t v19 = 0x40000000;
      char v20 = sub_100008CAC;
      uint64_t v21 = &unk_10015A450;
      uint64_t v22 = a1 + 8;
      v23 = &v10;
      v24 = &v18;
      unsigned __int8 v25 = -86;
      block = _NSConcreteStackBlock;
      uint64_t v27 = 0x40000000;
      v28 = sub_1000065D0;
      v29 = &unk_100159F20;
      v30 = (uint64_t *)&v25;
      v31 = (void ***)&v24;
      dispatch_sync(v6, &block);
      int v7 = v25;
      if (v25 && v17 && v15) {
        sub_100005494(a3, v17, v16, v15);
      }
    }
    while (v7);
  }
  v18 = (void **)(a1 + 136);
  xpc_object_t v8 = *(NSObject **)(a1 + 24);
  block = _NSConcreteStackBlock;
  uint64_t v27 = 0x40000000;
  v28 = sub_1000033FC;
  v29 = &unk_10015A470;
  v30 = (uint64_t *)(a1 + 8);
  v31 = &v18;
  dispatch_sync(v8, &block);
  std::mutex::unlock(&stru_10015EC60);
}

void sub_100005484(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100005494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_100005520(uint64_t a1, char **a2, char **a3, char **a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *(void **)(a1 + 8);
  sub_100015438(&v16, *a2);
  if (v17 < 0)
  {
    if (*((void *)&v16 + 1) != 14)
    {
      operator delete((void *)v16);
LABEL_22:
      char v13 = qword_10015EF28;
      if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
        sub_1000FC08C((uint64_t)v5, v13);
      }
      return;
    }
    BOOL v11 = *(void *)v16 != 0x5F64656972657571 || *(void *)(v16 + 6) != 0x7365746174735F64;
    operator delete((void *)v16);
    if (v11) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v17 != 14) {
      goto LABEL_22;
    }
    if ((void)v16 != 0x5F64656972657571 || *(void *)((char *)&v16 + 6) != 0x7365746174735F64) {
      goto LABEL_22;
    }
  }
  uint64_t v12 = *(void **)(a1 + 16);
  sub_100015438(&v16, v6);
  sub_100015438(__p, v7);
  sub_1000056D8(v8, v12, (uint64_t)&v16, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete((void *)v16);
  }
}

void sub_1000056B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000056D8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)a3;
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a3 + 8) != 13)
    {
      uint64_t v8 = qword_10015EF28;
      if (!os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
        return;
      }
LABEL_15:
      uint64_t v4 = (void *)*v4;
LABEL_16:
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[ModifyEventManager] ERROR: Invalid defType for queried state: %s", buf, 0xCu);
      return;
    }
    uint64_t v7 = *(uint64_t **)a3;
  }
  else
  {
    uint64_t v7 = (uint64_t *)a3;
    if (v6 != 13)
    {
      uint64_t v8 = qword_10015EF28;
      if (!os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_16;
    }
  }
  uint64_t v9 = *v7;
  uint64_t v10 = *(uint64_t *)((char *)v7 + 5);
  if (v9 != 0x6572707865627573 || v10 != 0x6E6F697373657270)
  {
    uint64_t v8 = qword_10015EF28;
    if (!os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  v35 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v57 = 0;
  sub_1000062F0(a4, (uint64_t)buf, 1, &v34);
  sub_10000DE9C(buf);
  v33[0] = (unsigned __int8 *)&v34;
  memset(&v33[1], 0, 24);
  v33[4] = (unsigned __int8 *)0x8000000000000000;
  sub_10001D3E4(v33);
  v32[0] = (unsigned __int8 *)&v34;
  memset(&v32[1], 0, 24);
  v32[4] = (unsigned __int8 *)0x8000000000000000;
  sub_1000157EC(v32);
  while (!sub_1000205D8(v33, v32))
  {
    uint64_t v12 = sub_10001EE40(v33);
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    char v13 = (void **)a1[9];
    xpc_object_t v14 = (long long *)sub_100015438(buf, "");
    sub_10001048C(v14, v48);
    uint64_t v15 = a1[8];
    v42 = (unsigned __int8 *)a1[7];
    *(void *)&long long v43 = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100005F44(v13, v48, (uint64_t *)&v42, v12, (uint64_t)&v30);
    if ((void)v43) {
      sub_1000147D8((std::__shared_weak_count *)v43);
    }
    if (*((void *)&v48[0] + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v48[0] + 1));
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v28[0] = v30;
    v29 = v31;
    sub_100016EAC((uint64_t)&v30);
    LOBYTE(v30) = 0;
    v31 = 0;
    sub_100016EAC((uint64_t)v28);
    if (v28[0] == 1)
    {
      v53 = v28;
      sub_100006184((uint64_t *)&v53, (uint64_t)buf);
      sub_10000626C((uint64_t *)&v53, (uint64_t)v48);
      while (!sub_1000205D8((unsigned __int8 **)buf, (unsigned __int8 **)v48))
      {
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v47 = v16;
        *(_OWORD *)&v47[16] = v16;
        long long v46 = v16;
        v42 = *(unsigned __int8 **)buf;
        long long v43 = *(_OWORD *)&buf[8];
        long long v44 = v57;
        long long v45 = v58;
        if (SHIBYTE(v60) < 0)
        {
          sub_100017424(&v46, (void *)v59, *((unint64_t *)&v59 + 1));
        }
        else
        {
          long long v46 = v59;
          *(void *)v47 = v60;
        }
        if (SHIBYTE(v62) < 0)
        {
          sub_100017424(&v47[8], (void *)v61, *((unint64_t *)&v61 + 1));
        }
        else
        {
          *(_OWORD *)&v47[8] = v61;
          *(void *)&v47[24] = v62;
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        char v17 = sub_10001EE40(&v42);
        sub_100016A10((uint64_t)&v40, (uint64_t)v17);
        uint64_t v18 = *a2;
        uint64_t v19 = (const void **)sub_100005DA8(&v42);
        sub_100015780(v18 + 40, v19, (uint64_t)v39);
        char v20 = (unsigned __int8 *)(*a2 + 40);
        memset(&v38[1], 0, 24);
        v38[0] = v20;
        v38[4] = (unsigned __int8 *)0x8000000000000000;
        sub_1000157EC(v38);
        if (!sub_1000205D8(v39, v38))
        {
          sub_100016EAC((uint64_t)&v40);
          sub_100016B28(&v41, v40);
          if ((v47[31] & 0x80000000) != 0) {
            operator delete(*(void **)&v47[8]);
          }
          if ((v47[7] & 0x80000000) != 0) {
            operator delete((void *)v46);
          }
          break;
        }
        v36[0] = v40;
        v37 = v41;
        sub_100016EAC((uint64_t)&v40);
        LOBYTE(v40) = 0;
        v41 = 0;
        sub_100016EAC((uint64_t)v36);
        uint64_t v21 = *a2;
        uint64_t v22 = (const void **)sub_100005DA8(&v42);
        v23 = sub_10001DA78((unsigned __int8 *)(v21 + 40), v22);
        sub_100016EAC((uint64_t)v36);
        char v24 = *(unsigned char *)v23;
        *(unsigned char *)v23 = v36[0];
        v36[0] = v24;
        unsigned __int8 v25 = (uint64_t *)v23[1];
        v23[1] = (uint64_t)v37;
        v37 = v25;
        sub_100016EAC((uint64_t)v23);
        sub_100016EAC((uint64_t)v36);
        sub_100016B28(&v37, v36[0]);
        sub_100016EAC((uint64_t)&v40);
        sub_100016B28(&v41, v40);
        if ((v47[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v47[8]);
        }
        if ((v47[7] & 0x80000000) != 0) {
          operator delete((void *)v46);
        }
        sub_100013C64((unsigned __int8 **)buf);
        *(void *)&long long v58 = v58 + 1;
      }
      if (v52 < 0) {
        operator delete(v51);
      }
      if (v50 < 0) {
        operator delete(v49);
      }
      if (SHIBYTE(v62) < 0) {
        operator delete((void *)v61);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete((void *)v59);
      }
    }
    else
    {
      v26 = qword_10015EF28;
      if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
        sub_1000FC020(&v54, v55, v26);
      }
    }
    sub_100016EAC((uint64_t)v28);
    sub_100016B28(&v29, v28[0]);
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    sub_100013C64(v33);
  }
  sub_100016EAC((uint64_t)&v34);
  sub_100016B28(&v35, v34);
}

void sub_100005CCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  if (a2)
  {
    sub_10000DE9C((void *)(v33 - 208));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      a32 = 0;
      a33 = 0;
      sub_100016EAC((uint64_t)&a32);
      sub_100016EAC((uint64_t)&a32);
      __cxa_end_catch();
      JUMPOUT(0x100005840);
    }
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100005DA8(unsigned __int8 **a1)
{
  if (!*a1) {
    sub_1000064B4();
  }
  int v2 = **a1;
  if (v2 == 1)
  {
    return sub_100005E30(a1);
  }
  else if (v2 == 2)
  {
    unint64_t v3 = (unint64_t)a1[5];
    if ((unsigned __int8 *)v3 != a1[6])
    {
      sub_100072B14((uint64_t)(a1 + 7), v3);
      a1[6] = a1[5];
    }
    return (uint64_t)(a1 + 7);
  }
  else
  {
    return (uint64_t)(a1 + 10);
  }
}

uint64_t sub_100005E30(void *a1)
{
  if (!*a1) {
    sub_1000FB3A8();
  }
  if (*(unsigned char *)*a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v3, "cannot use key() for non-object iterators");
    sub_10002B4EC(207, (uint64_t)v3, exception);
  }
  return a1[1] + 32;
}

void sub_100005F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_100005F44(void **a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  sub_10001484C((uint64_t *)&v9, a2);
  sub_100006008(a1, &v9, a3, a4, a5);
  BOOL v11 = (void **)&v9;
  sub_100014738(&v11);
}

void sub_100005FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100014738((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100006008(void **a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  memset(v12, 0, sizeof(v12));
  int v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v13 = *a3;
  xpc_object_t v14 = v6;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v15) = 0;
  sub_100013798(a1, (uint64_t)&v10, a4);
  if (*(void *)&v12[0] != *((void *)&v12[0] + 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Stack evaluation was expected to be empty");
  }
  uint64_t v7 = *(void *)v10 + 40;
  *(unsigned char *)a5 = *(unsigned char *)v7;
  *(void *)(a5 + 8) = *(void *)(v7 + 8);
  sub_100016EAC(v7);
  *(unsigned char *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  sub_100016EAC(a5);
  if (v14) {
    sub_1000147D8(v14);
  }
  long long v9 = (void **)v12;
  sub_100016F68(&v9);
  long long v9 = (void **)&v10;
  sub_100014738(&v9);
}

void sub_100006160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  sub_1000318A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100006184@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_10001586C(v6, v3);
  sub_10001D3E4((unsigned __int8 **)v6);
  return sub_100006208(a2, (uint64_t)v6);
}

uint64_t sub_100006208(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_100015438((void *)(a1 + 56), "0");
  sub_100015438((void *)(a1 + 80), "");
  return a1;
}

uint64_t sub_10000626C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_10001586C(v6, v3);
  sub_1000157EC((unsigned __int8 **)v6);
  return sub_100006208(a2, (uint64_t)v6);
}

void *sub_1000062F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_10000DC80((uint64_t)v14, a2);
  if ((v8 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  sub_10000DABC(v11, v11 + v12, (uint64_t)v14, a3, (uint64_t)v15);
  sub_10000D584((uint64_t)v15, 1, (uint64_t)a4);
  sub_10000DF20((uint64_t)&v16);
  sub_10000DE9C(v15);
  return sub_10000DE9C(v14);
}

void sub_1000063E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10000DF20(v14 + 40);
  sub_10000DE9C(&a13);
  sub_10000DE9C(&a9);
  sub_100028D64(v13);
  _Unwind_Resume(a1);
}

void sub_100006424(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void *sub_10000642C(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000064B4()
{
  __assert_rtn("key", "iteration_proxy.hpp", 75, "anchor.m_object != nullptr");
}

uint64_t sub_1000064E0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10000651C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100006558(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100006594(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000065D0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_10000660C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  int v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_100064D6C(*(void *)(v1 + 8), "SELECT transform_uuid, transform_def, derived_sampling_perc, transform_started_aggregating_timestamp FROM enabled_transforms_by_event_view WHERE event_name=?1;",
          1,
          &v12),
        long long v4 = *(sqlite3_stmt ***)v1,
        uint64_t v5 = v12,
        uint64_t v12 = 0,
        sub_1000650BC(v4, v5),
        sub_1000650BC(&v12, 0),
        int v2 = *(sqlite3_stmt ***)v1,
        **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1;
    sub_100008A30(v3, v2, 1, v6);
  }
  else
  {
    uint64_t v9 = *(sqlite3 **)(v3 + 32);
    uint64_t v10 = qword_10015EF60;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000EC554(v9, v10);
      }
    }
    else if (v11)
    {
      sub_1000EC4F4();
    }
    return 0;
  }
  return v7;
}

void sub_100006714(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = (sqlite3_stmt **)(*v3 + 144);
  if (*v5
    || (sub_100064D6C(*v3, "SELECT queried_state_value, queried_state_last_modified, queried_state_ttl FROM queried_states WHERE queried_state_name=?1 AND (queried_state_params = '' OR queried_state_params IS NULL OR  queried_state_params=?2) LIMIT 1;",
          1,
          &v16),
        uint64_t v6 = v16,
        uint64_t v16 = 0,
        sub_1000650BC(v5, v6),
        sub_1000650BC(&v16, 0),
        *(void *)(v4 + 144)))
  {
    unint64_t v15 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v15, v5);
    sub_100008A30(v4, v5, 1, v3[1]);
    memset(&v14, 170, sizeof(v14));
    sub_100007460(v3[2], -1, 0x20u, 0, 0, &v14);
    uint64_t v7 = v3[2];
    if (*(unsigned char *)v7 != 1 || !*(void *)(*(void *)(v7 + 8) + 16)) {
      std::string::assign(&v14, "");
    }
    sub_100008A30(v4, v5, 2, (uint64_t)&v14);
    if (sub_1000090A4(v4, v5) == 100)
    {
      uint64_t v13 = (const char *)sub_1000090E4(v4, v5, 0);
      sqlite3_int64 v8 = sub_100006A48(v4, v5, 1);
      sqlite3_int64 v9 = sub_100006A48(v4, v5, 2);
      if (v13)
      {
        v20[3] = 0;
        sub_10000DD74(&v13, (uint64_t)v20, 1, &v16);
        sub_10000DE9C(v20);
      }
      else
      {
        LOBYTE(v16) = 0;
        char v17 = 0;
        sub_100016EAC((uint64_t)&v16);
        sub_100016EAC((uint64_t)&v16);
      }
      *(void *)&long long v18 = 1000000 * v8;
      *((void *)&v18 + 1) = 1000000 * v9;
      char v19 = 1;
      *(unsigned char *)a2 = (_BYTE)v16;
      *(void *)(a2 + 8) = v17;
      sub_100016EAC((uint64_t)&v16);
      LOBYTE(v16) = 0;
      char v17 = 0;
      sub_100016EAC(a2);
      *(_OWORD *)(a2 + 16) = v18;
      *(unsigned char *)(a2 + 32) = v19;
      *(unsigned char *)(a2 + 40) = 1;
      sub_100016EAC((uint64_t)&v16);
      sub_100016B28(&v17, v16);
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 40) = 0;
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    sub_100008C7C(&v15);
  }
  else
  {
    uint64_t v10 = *(sqlite3 **)(v4 + 32);
    BOOL v11 = qword_10015EF60;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v12) {
        sub_1000FE83C(v10, v11);
      }
    }
    else if (v12)
    {
      sub_1000FE7DC();
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
  }
}

void sub_1000069D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, sqlite3_stmt *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    LOBYTE(a18) = 0;
    a21 = 0;
    sub_100016EAC((uint64_t)&a18);
    sub_100016EAC((uint64_t)&a18);
    __cxa_end_catch();
    JUMPOUT(0x1000068C0);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100008C7C(&a17);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_100006A48(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  sqlite3_int64 result = sqlite3_column_int64(*a2, iCol);
  *(void *)(a1 + 88) += 8;
  return result;
}

sqlite3_stmt **sub_100006A84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = (sqlite3_stmt **)(*v3 + 176);
  if (*v5
    || (sub_100064D6C(*v3, "SELECT transform_value FROM transform_metadata_and_states WHERE (transform_uuid=?1 AND transform_key=?2) ORDER BY transform_state_id LIMIT 1", 1, v14), uint64_t v6 = v14[0], v14[0] = 0, sub_1000650BC(v5, v6), sub_1000650BC(v14, 0), *(void *)(v4 + 176)))
  {
    uint64_t v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v13, v5);
    sub_100008A30(v4, v5, 1, v3[1]);
    memset(__p, 170, sizeof(__p));
    sub_100007460(v3[2], -1, 0x20u, 0, 0, __p);
    sub_100008A30(v4, v5, 2, (uint64_t)__p);
    if (sub_1000090A4(v4, v5) == 100 && (BOOL v11 = (const char *)sub_1000090E4(v4, v5, 0)) != 0)
    {
      v14[3] = 0;
      sub_10000DD74(&v11, (uint64_t)v14, 1, a2);
      sub_10000DE9C(v14);
    }
    else
    {
      *(unsigned char *)a2 = 0;
      a2[1] = 0;
      sub_100016EAC((uint64_t)a2);
      sub_100016EAC((uint64_t)a2);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return sub_100008C7C(&v13);
  }
  else
  {
    sqlite3_int64 v8 = *(sqlite3 **)(v4 + 32);
    sqlite3_int64 v9 = qword_10015EF60;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v10) {
        sub_1000FED58(v8, v9);
      }
    }
    else if (v10)
    {
      sub_1000FECF8();
    }
    *(unsigned char *)a2 = 0;
    a2[1] = 0;
    sub_100016EAC((uint64_t)a2);
    return (sqlite3_stmt **)sub_100016EAC((uint64_t)a2);
  }
}

void sub_100006C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, sqlite3_stmt *a16, uint64_t a17)
{
  sub_10000DE9C(&a17);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *(unsigned char *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    sub_100016EAC(v17);
    sub_100016EAC(v17);
    __cxa_end_catch();
    JUMPOUT(0x100006BCCLL);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100008C7C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100006CEC(uint64_t result, uint64_t *a2, int a3)
{
  char v45 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    uint64_t v7 = (void *)result;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned int v46 = -1431655766;
    uint64_t v12 = result + 90;
    while (1)
    {
      if (v3) {
        uint64_t v13 = (uint64_t *)*a2;
      }
      else {
        uint64_t v13 = a2;
      }
      int v14 = *((unsigned __int8 *)v13 + v8);
      sqlite3_int64 result = sub_1000073D0(&v45, &v46, v14);
      if (result == 1)
      {
        int v16 = *((_DWORD *)v7 + 158);
        if ((v16 - 1) >= 2)
        {
          if (!v16)
          {
            unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
            uint64_t v44 = 0x3AAAAAAAAAAAAAALL;
            *(void *)__str = 0xAAAAAAAA00000000;
            snprintf(__str, 3uLL, "%.2X", v14);
            exception = __cxa_allocate_exception(0x20uLL);
            std::to_string(&v37, v8);
            uint64_t v27 = std::string::insert(&v37, 0, "invalid UTF-8 byte at index ");
            long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            v29 = std::string::append(&v38, ": 0x");
            long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            if (v44 >= 0) {
              v31 = __str;
            }
            else {
              v31 = *(char **)__str;
            }
            if (v44 >= 0) {
              std::string::size_type v32 = HIBYTE(v44);
            }
            else {
              std::string::size_type v32 = v43;
            }
            uint64_t v33 = std::string::append(&v39, v31, v32);
            long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            std::string::size_type v41 = v33->__r_.__value_.__r.__words[2];
            long long v40 = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            sub_100029288(316, (uint64_t)&v40, exception);
          }
          sub_1000F87D8();
        }
        uint64_t v17 = v9 != 0;
        if (v16 == 1)
        {
          uint64_t v18 = v12 + v10;
          if (a3)
          {
            *(_DWORD *)uint64_t v18 = 1717990748;
            *(_WORD *)(v18 + 4) = 25702;
            v10 += 6;
          }
          else
          {
            v10 += 3;
            *(_WORD *)uint64_t v18 = -16401;
            *(unsigned char *)(v18 + 2) = -67;
          }
          if ((unint64_t)(v10 - 500) <= 0xC)
          {
            sqlite3_int64 result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
            uint64_t v10 = 0;
          }
        }
        uint64_t v9 = 0;
        v8 -= v17;
        char v45 = 0;
        uint64_t v11 = v10;
      }
      else if (result)
      {
        if ((a3 & 1) == 0)
        {
          if (*((char *)a2 + 23) >= 0) {
            char v19 = a2;
          }
          else {
            char v19 = (uint64_t *)*a2;
          }
          *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
        }
        ++v9;
      }
      else
      {
        switch(v46)
        {
          case 8u:
            __int16 v15 = 25180;
            goto LABEL_43;
          case 9u:
            __int16 v15 = 29788;
            goto LABEL_43;
          case 0xAu:
            __int16 v15 = 28252;
            goto LABEL_43;
          case 0xBu:
            goto LABEL_29;
          case 0xCu:
            __int16 v15 = 26204;
            goto LABEL_43;
          case 0xDu:
            __int16 v15 = 29276;
            goto LABEL_43;
          default:
            if (v46 == 34)
            {
              __int16 v15 = 8796;
              goto LABEL_43;
            }
            if (v46 == 92)
            {
              __int16 v15 = 23644;
LABEL_43:
              *(_WORD *)(v12 + v11) = v15;
              v11 += 2;
              goto LABEL_44;
            }
LABEL_29:
            if (v46 > 0x7E) {
              int v20 = a3;
            }
            else {
              int v20 = 0;
            }
            if (v46 < 0x20 || v20)
            {
              char v24 = (char *)(v12 + v11);
              if (HIWORD(v46))
              {
                sqlite3_int64 result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v46 >> 10) - 10304), v46 & 0x3FF | 0xDC00);
                v11 += 12;
              }
              else
              {
                sqlite3_int64 result = snprintf(v24, 7uLL, "\\u%04x", v46);
                v11 += 6;
              }
            }
            else
            {
              if (*((char *)a2 + 23) >= 0) {
                uint64_t v21 = a2;
              }
              else {
                uint64_t v21 = (uint64_t *)*a2;
              }
              *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
            }
LABEL_44:
            if ((unint64_t)(v11 - 500) > 0xC)
            {
              uint64_t v9 = 0;
              uint64_t v10 = v11;
            }
            else
            {
              sqlite3_int64 result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
              uint64_t v11 = 0;
              uint64_t v10 = 0;
              uint64_t v9 = 0;
            }
            break;
        }
      }
      ++v8;
      int v22 = *((char *)a2 + 23);
      unsigned int v3 = v22 >> 31;
      unint64_t v23 = a2[1];
      if (v22 >= 0) {
        unint64_t v23 = *((unsigned __int8 *)a2 + 23);
      }
      if (v8 >= v23)
      {
        if (v45)
        {
          int v25 = *((_DWORD *)v7 + 158);
          switch(v25)
          {
            case 1:
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
              return (*(uint64_t (**)(void))(*(void *)*v7 + 8))();
            case 2:
              return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
            case 0:
              unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
              uint64_t v44 = 0x3AAAAAAAAAAAAAALL;
              *(void *)__str = 0xAAAAAAAA00000000;
              v35 = (uint64_t *)*a2;
              if (v22 >= 0) {
                v35 = a2;
              }
              snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v35 + v23 - 1));
              v36 = __cxa_allocate_exception(0x20uLL);
              std::operator+<char>();
              sub_100029288(316, (uint64_t)&v40, v36);
            default:
              sub_1000F87AC();
          }
        }
        else if (v11)
        {
          return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_100007308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v41 - 105) < 0) {
        operator delete(*(void **)(v41 - 128));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t sub_1000073D0(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = byte_10011AC00[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  }
  uint64_t v6 = byte_10011AC00[v5];
  *a1 = v6;
  return v6;
}

uint64_t sub_100007460@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  memset(__b, 170, sizeof(__b));
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_100151700;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)off_100151750;
  v12[1].__shared_owners_ = (uint64_t)a6;
  int v14 = v12 + 1;
  __int16 v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_100008670((uint64_t)__b, (uint64_t)&v14, a3, a5);
  if (v15) {
    sub_1000147D8(v15);
  }
  sub_1000147D8(v12);
  sub_1000075F0(__b, a1, a2 >= 0, a4, a2 & ~(a2 >> 31), 0);
  return sub_10000862C((uint64_t)__b);
}

void sub_1000075A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000862C((uint64_t)va);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000075F0(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        char v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        int v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            int v16 = *(void **)(a2 + 8);
            uint64_t v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              uint64_t v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                sub_100006CEC((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                sub_1000075F0(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    uint64_t v18 = v69;
                    v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    uint64_t v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    uint64_t v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                int v16 = *(void **)(a2 + 8);
                uint64_t v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            v70 = v16 + 1;
            if (v18 == v70) {
              sub_1000F86A4();
            }
            v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                v72 = v71;
                v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              v74 = v18;
              do
              {
                v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              sub_1000F86D0();
            }
            v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            sub_100006CEC((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            sub_1000075F0(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          sub_100006CEC((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          sub_1000075F0(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          v49 = (void *)v47[1];
          char v50 = v47;
          if (v49)
          {
            do
            {
              v47 = v49;
              v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              char v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      char v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        sub_1000F86FC();
      }
      v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          uint8_t v54 = v53;
          v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        v73 = v47;
        do
        {
          uint8_t v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        sub_1000F8728();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      sub_100006CEC((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      sub_1000075F0(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      uint64_t v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      char v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              sub_1000075F0(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              long long v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            sub_1000F8780();
          }
          sub_1000075F0(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        uint64_t v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            unint64_t v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                sub_1000075F0(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                uint64_t v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              sub_1000F8754();
            }
            long long v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              long long v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            sub_1000075F0(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              uint64_t v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            uint64_t v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      char v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      sub_100006CEC((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      uint64_t v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return sub_1000087B8((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return sub_100008A78((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return sub_1000098AC((char *)a1, v32);
    case 8:
      uint64_t v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            std::string v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            std::string v37 = (uint64_t (***)(void))*a1;
            std::string v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        std::string v37 = (uint64_t (***)(void))*a1;
        std::string v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          uint64_t v60 = *(unsigned __int8 ***)(a2 + 8);
          uint64_t v62 = *v60;
          long long v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                sub_10002B410((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            sub_10002B410((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            sub_10002B410((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        std::string v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      std::string v39 = *(unsigned __int8 ***)(a2 + 8);
      uint64_t v41 = *v39;
      int v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          sub_10002B410((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          int v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        sub_10002B410((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        sub_10002B410((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        uint64_t v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      uint64_t v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      sub_1000F8678();
  }
}

void sub_10000861C(uint64_t a1, std::string::value_type a2)
{
}

std::string *sub_100008624(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t sub_10000862C(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000147D8(v2);
  }
  return a1;
}

uint64_t sub_100008670(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  uint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  int8x16_t *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1000087A0(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000147D8(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000087B8(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    unsigned int v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      *unsigned int v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        uint64_t v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      sub_1000F8804();
    }
    uint64_t v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 200];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = *(_WORD *)&a00010203040506[2 * v12 + 200];
LABEL_36:
      int v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  unint64_t v5 = ***a1;

  return v5();
}

uint64_t sub_1000089E8(int a1, sqlite3_stmt **a2, int a3, uint64_t a4, void *a5)
{
  uint64_t result = sub_100008A30(a1, a2, a3, a4);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  *a5 += v8;
  return result;
}

uint64_t sub_100008A30(int a1, sqlite3_stmt **a2, int a3, uint64_t a4)
{
  int v5 = *(char *)(a4 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const char *)a4;
  }
  else {
    uint64_t v6 = *(const char **)a4;
  }
  if (v5 >= 0) {
    int v7 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    int v7 = *(_DWORD *)(a4 + 8);
  }
  return sqlite3_bind_text(*a2, a3, v6, v7, 0);
}

uint64_t sub_100008A78(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        sub_1000F8804();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = *(_WORD *)&a00010203040506[2 * (v2 % 0x64) + 400];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = *(_WORD *)&a00010203040506[2 * v9 + 400];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;

  return v4();
}

sqlite3_stmt **sub_100008C08(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 40);
  uint64_t v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100008C70(&v3, *v1);
  return sub_100008C7C(&v3);
}

void *sub_100008C70(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

sqlite3_stmt **sub_100008C7C(sqlite3_stmt **a1)
{
  return a1;
}

uint64_t sub_100008CAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    if (**(void **)(v1 + 16))
    {
      if (**(void **)(v1 + 32)) {
        return 1;
      }
      unint64_t v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO)) {
        return v7;
      }
      __int16 v12 = 0;
      unint64_t v9 = "[Config Store] WARNING: modify-eventdef query weirdness: got a row but no definition?";
      unint64_t v10 = (uint8_t *)&v12;
    }
    else
    {
      unint64_t v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO)) {
        return v7;
      }
      __int16 v13 = 0;
      unint64_t v9 = "[Config Store] WARNING: modify-eventdef query weirdness: got a row but no type?";
      unint64_t v10 = (uint8_t *)&v13;
    }
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, v10, 2u);
    return v7;
  }
  if (v3 != 101)
  {
    uint64_t v4 = *(sqlite3 **)(v2 + 32);
    int v5 = qword_10015EF60;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v6) {
        sub_1000ECF8C(v4, v5);
      }
    }
    else if (v6)
    {
      sub_1000ECF2C();
    }
  }
  return 0;
}

uint64_t sub_100008E64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 != 100)
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      int v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000EC634(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000EC5D4();
      }
    }
    return 0;
  }
  **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
  if (!**(void **)(v1 + 16))
  {
    int v14 = qword_10015EF60;
    uint64_t v12 = 1;
    if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO)) {
      return v12;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    unint64_t v15 = "[Config Store] WARNING: Event query weirdness: got a row but no transform uuid? (transforms-for-event)";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, (uint8_t *)&__p, 2u);
    return v12;
  }
  **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  if (!**(void **)(v1 + 24))
  {
    int v14 = qword_10015EF60;
    uint64_t v12 = 1;
    if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO)) {
      return v12;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    unint64_t v15 = "[Config Store] WARNING: Event query weirdness: got a row but no transform definition? (transforms-for-event)";
    goto LABEL_19;
  }
  sub_10000914C(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
  **(void **)(v1 + 32) = v7;
  unint64_t v8 = (char *)sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
  if (v8)
  {
    sub_100015438(&__p, v8);
    unint64_t v9 = sub_100009188(&__p, (uint64_t)"%Y-%m-%d %H:%M:%S");
    uint64_t v10 = *(void *)(v1 + 40);
    *(void *)uint64_t v10 = v9;
    *(unsigned char *)(v10 + 8) = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v1 + 40);
    if (!*(unsigned char *)(v16 + 8)) {
      *(unsigned char *)(v16 + 8) = 1;
    }
    *(void *)uint64_t v16 = 0x8000000000000000;
  }
  return 1;
}

void sub_100009080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000090A4(uint64_t a1, sqlite3_stmt **a2)
{
  uint64_t result = sqlite3_step(*a2);
  if (result == 101) {
    ++*(void *)(a1 + 96);
  }
  return result;
}

const unsigned __int8 *sub_1000090E4(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  BOOL v6 = sqlite3_column_text(*a2, iCol);
  if (v6)
  {
    int v7 = sqlite3_column_bytes(*a2, iCol);
    *(void *)(a1 + 88) += v7 & ~(v7 >> 31);
  }
  return v6;
}

void sub_10000914C(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  *(void *)(a1 + 88) += 8;
}

unint64_t sub_100009188(const std::string *a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v3;
  long long v25 = v3;
  long long v22 = v3;
  long long v23 = v3;
  long long v20 = v3;
  long long v21 = v3;
  long long v18 = v3;
  long long v19 = v3;
  long long v16 = v3;
  long long v17 = v3;
  *(_OWORD *)std::string __p = v3;
  long long v15 = v3;
  v13[1] = v3;
  v13[2] = v3;
  long long v12 = v3;
  v13[0] = v3;
  long long v11 = v3;
  sub_100009574((void (__cdecl ***)(std::istringstream *__hidden))&v11, a1, 8);
  memset(&v10, 0, sizeof(v10));
  v9[0] = &v10;
  v9[1] = a2;
  sub_1000093B8(&v11, (uint64_t)v9);
  if ((*((unsigned char *)v13 + *(void *)(v11 - 24)) & 5) != 0)
  {
    uint64_t rep_low = 0;
    unint64_t v5 = 0;
  }
  else
  {
    time_t v6 = mktime(&v10);
    v7.__d_.__rep_ = std::chrono::system_clock::from_time_t(v6 - timezone).__d_.__rep_;
    unint64_t v5 = v7.__d_.__rep_ & 0xFFFFFFFFFFFFFF00;
    uint64_t rep_low = LOBYTE(v7.__d_.__rep_);
  }
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return v5 | rep_low;
}

void sub_100009398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10005746C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000093B8(void *a1, uint64_t a2)
{
  char v7 = -86;
  std::istream::sentry::sentry();
  int v6 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  std::locale::use_facet(&v5, &std::time_get<char,std::istreambuf_iterator<char>>::id);
  std::locale::~locale(&v5);
  strlen(*(const char **)(a2 + 8));
  std::time_get<char,std::istreambuf_iterator<char>>::get();
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  return a1;
}

void sub_1000094F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (a2)
  {
    std::locale::~locale(&a10);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x1000094C0);
  }
  _Unwind_Resume(exception_object);
}

void (__cdecl ***sub_100009574(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v8;
  *(void *)((char *)*(v8 - 3) + (void)a1) = v7;
  a1[1] = 0;
  unint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_1000096F8(v6, a2, a3 | 8);
  return a1;
}

void sub_1000096D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000096F8(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100009798(a1);
  return a1;
}

void sub_100009774(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100009798(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t sub_1000098AC(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    int v6 = "null";
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = sub_10000995C(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    int v6 = a1 + 16;
  }

  return v4(v5, v6, v3);
}

char *sub_10000995C(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_1000F88E0();
  }
  uint64_t v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    uint64_t v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)uint64_t v3 = 11824;
    uint64_t result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      sub_1000F8830();
    }
    uint64_t v6 = 0;
    sub_100009A5C((uint64_t)v3, (int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      sub_1000F885C();
    }
    if (v5 <= 0x15) {
      sub_1000F8888();
    }
    if (v5 == 22) {
      sub_1000F88B4();
    }
    return sub_10000A2A8(v3, SHIDWORD(v6), v6, -4, 15);
  }
  return result;
}

uint64_t sub_100009A5C(uint64_t a1, int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_1000F8938();
  }
  if (a4 <= 0.0) {
    sub_1000F890C();
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v7;
  long long v12 = v7;
  long long v10 = v7;
  sub_100009D5C((uint64_t)&v10, a4);
  return sub_100009B18(a1, a2, a3, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8, v12, *((uint64_t *)&v12 + 1));
}

uint64_t sub_100009B18(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v32[0] = a4;
  v32[1] = a5;
  v31[0] = a6;
  v31[1] = a7;
  v30[0] = a9;
  v30[1] = a10;
  if (a10 != a5) {
    sub_1000F8AC4();
  }
  if (a10 != a7) {
    sub_1000F8A98();
  }
  uint64_t v13 = sub_100009CA4(a10);
  int v15 = v14;
  uint64_t v27 = v13;
  int v29 = -1431655766;
  int v28 = v16;
  unint64_t v17 = sub_100009C44(v31, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = sub_100009C44(v32, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = sub_100009C44(v30, &v27);
  *a3 = -v15;
  return sub_100009F70(a1, a2, a3, v20 + 1, v22 | 0xAAAAAAAA00000000, v17, v19, v25, v23 - 1, v24 | 0xAAAAAAAA00000000);
}

unint64_t sub_100009C44(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t sub_100009CA4(int a1)
{
  if (a1 <= -1501) {
    sub_1000F8AF0();
  }
  if (a1 >= 1501) {
    sub_1000F8B1C();
  }
  int v1 = 78913 * (-61 - a1) / 0x40000;
  if (a1 < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    sub_1000F8B48();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    sub_1000F8BCC();
  }
  uint64_t v3 = (void *)((char *)&unk_100116C10 + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + a1;
  if (v4 <= -125) {
    sub_1000F8B74();
  }
  if (v4 >= -95) {
    sub_1000F8BA0();
  }
  return *v3;
}

uint64_t sub_100009D5C@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_1000F8A6C();
  }
  if (a2 <= 0.0) {
    sub_1000F8A40();
  }
  BOOL v3 = (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) == 0;
  if (*(void *)&a2 >> 52) {
    unint64_t v4 = ((*(void *)&a2 >> 52) - 1075) | 0xAAAAAAAA00000000;
  }
  else {
    unint64_t v4 = 0xAAAAAAAAFFFFFBCELL;
  }
  if (*(void *)&a2 >> 52) {
    uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  BOOL v6 = *(void *)&a2 >> 53 != 0;
  BOOL v7 = !v6 || !v3;
  if (v6 && v3) {
    uint64_t v8 = 4 * v5;
  }
  else {
    uint64_t v8 = 2 * v5;
  }
  if (v7) {
    int v9 = v4 - 1;
  }
  else {
    int v9 = v4 - 2;
  }
  uint64_t v18 = v8 - 1;
  int v20 = -1431655766;
  int v19 = v9;
  uint64_t v10 = sub_100009EA8((2 * v5) | 1, (v4 - 1) | 0xAAAAAAAA00000000);
  int v12 = v11;
  unint64_t v13 = sub_100009F00(&v18, v11);
  int v15 = v14;
  uint64_t result = sub_100009EA8(v5, v4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 40) = v12;
  return result;
}

uint64_t sub_100009EA8(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t sub_100009F00(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 162;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

uint64_t sub_100009F70(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    sub_1000F8BF8();
  }
  if ((int)a10 >= -31) {
    sub_1000F8C24();
  }
  unint64_t v13 = sub_10000A238((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = sub_10000A238((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    sub_1000F8C50();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      sub_1000F8C7C();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = *a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      int v40 = *a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return sub_10000A4D8(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    sub_1000F8D00();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      sub_1000F8CA8();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      sub_1000F8CD4();
    }
    uint64_t v38 = *a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  int v40 = *a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return sub_10000A4D8(v41, v40, v17, v42, v20, v18);
}

uint64_t sub_10000A238(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = "x.e == y.e";
    int v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    unint64_t v4 = "x.f >= y.f";
    int v5 = 67;
    goto LABEL_6;
  }
  return result;
}

char *sub_10000A2A8(char *__src, int a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    sub_1000F8964();
  }
  if (a5 <= 0) {
    sub_1000F8990();
  }
  uint64_t v7 = a3 + (uint64_t)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset(&__src[a2], 48, a3);
    __src[v7] = 46;
    uint64_t result = &__src[v7 + 2];
    __src[(int)v7 + 1] = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove(&__src[v10 + 2], __src, a2);
      *(_WORD *)__src = 11824;
      memset(__src + 2, 48, v10);
      return &__src[v10 + 2 + a2];
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove(__src + 2, __src + 1, a2 - 1);
      __src[1] = 46;
      uint64_t v11 = a2 + 1;
    }
    int v12 = &__src[v11];
    char *v12 = 101;
    if ((int)v7 <= -999) {
      sub_1000F89BC();
    }
    if ((int)v7 >= 1001) {
      sub_1000F89E8();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        _OWORD v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      _OWORD v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      _OWORD v12[2] = 48;
      char v15 = v14 + 48;
    }
    v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    sub_1000F8A14();
  }
  int v9 = &__src[v7];
  memmove(v9 + 1, v9, a2 - (unint64_t)v7);
  *int v9 = 46;
  return &__src[a2 + 1];
}

uint64_t sub_10000A4D8(uint64_t result, int a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a2 <= 0) {
    sub_1000F8D2C();
  }
  if (a3 > a4) {
    sub_1000F8D58();
  }
  if (a4 < a5) {
    sub_1000F8D84();
  }
  if (!a6) {
    sub_1000F8DB0();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(result + v6);
      if (v9 == 48) {
        sub_1000F8DDC();
      }
      *(unsigned char *)(result + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return result;
}

uint64_t sub_10000A588(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (sqlite3 **)(*(void *)v1 + 32);
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v11, v3);
  if (!BYTE1(v12))
  {
    uint64_t v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(v1 + 8);
        if (*(char *)(v8 + 23) < 0) {
          uint64_t v8 = *(void *)v8;
        }
        int v9 = sqlite3_errmsg(v6);
        sub_1000FFB90(v8, (uint64_t)v9, (uint64_t)v13);
      }
    }
    else if (v7)
    {
      sub_1000FFB14();
    }
    goto LABEL_17;
  }
  if (!sub_10000ADF8(v2, **(_DWORD **)(v1 + 16), *(void *)(v1 + 8), **(_DWORD **)(v1 + 24), **(_DWORD **)(v1 + 32), **(_DWORD **)(v1 + 40), *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep **)(v1 + 48)))goto LABEL_16; {
  int v4 = **(_DWORD **)(v1 + 16);
  }
  if (v4 == 3)
  {
    if (!sub_1000840AC(v2, *(void *)(v1 + 8), *(void *)(v1 + 56))) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v4 != 2)
    {
      if (v4 != 1 || sub_10000A740(v2, *(void *)(v1 + 8), *(void *)(v1 + 56))) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
    if (!sub_100083D60(v2, *(void *)(v1 + 8), *(void *)(v1 + 56)))
    {
LABEL_16:
      sub_10005A644((uint64_t)&v11);
LABEL_17:
      uint64_t v5 = 0;
      goto LABEL_18;
    }
  }
LABEL_7:
  uint64_t v5 = 1;
LABEL_18:
  sub_10000B128((uint64_t)&v11);
  return v5;
}

void sub_10000A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10000A740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v6;
  v16[1] = v6;
  sub_1000136C8(v16, a3);
  sub_100014064((unsigned __int8 **)v16);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v7;
  v14[1] = v7;
  sub_1000136C8(v14, a3);
  sub_100013648((unsigned __int8 **)v14);
  while (1)
  {
    BOOL v8 = sub_100013964((unsigned __int8 **)v16, (unsigned __int8 **)v14);
    if (v8) {
      break;
    }
    int v9 = sub_100013AAC((unsigned __int8 **)v16);
    uint64_t v10 = sub_100012450((uint64_t)v9, 0);
    if (!sub_10000A87C(a1, a2, v10)) {
      break;
    }
    uint64_t v11 = sub_100012450((uint64_t)v9, 0);
    uint64_t v12 = sub_100012450((uint64_t)v9, 1);
    if (!sub_10000AB3C(a1, a2, v11, v12)) {
      break;
    }
    sub_100013C64((unsigned __int8 **)v16);
  }
  return v8;
}

void sub_10000A870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10000A87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (sqlite3_stmt **)(a1 + 208);
  if (*(void *)(a1 + 208)
    || (sub_100064D6C(a1, "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT transform_metadata_id FROM transform_metadata WHERE transform_uuid=?1 LIMIT 1) AND transform_key=?2", 1, (sqlite3_stmt **)__p), long long v7 = (sqlite3_stmt *)__p[0], __p[0] = 0, sub_1000650BC(v6, v7), sub_1000650BC((sqlite3_stmt **)__p, 0), *(void *)(a1 + 208)))
  {
    int v22 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v22, v6);
    uint64_t v21 = 0;
    sub_1000089E8(a1, v6, 1, a2, &v21);
    memset(__p, 170, sizeof(__p));
    sub_100007460(a3, -1, 0x20u, 0, 0, __p);
    sub_1000089E8(a1, v6, 2, (uint64_t)__p, &v21);
    int v8 = sub_10000AAD0(a1, v6, &v21);
    BOOL v9 = v8 == 101;
    if (v8 != 101)
    {
      uint64_t v10 = *(sqlite3 **)(a1 + 32);
      uint64_t v11 = qword_10015EF60;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (v12)
        {
          int v13 = *(char *)(a2 + 23);
          uint64_t v14 = *(void *)a2;
          unint64_t v15 = sqlite3_errmsg(v10);
          if (v13 >= 0) {
            uint64_t v16 = a2;
          }
          else {
            uint64_t v16 = v14;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v24 = v16;
          __int16 v25 = 2080;
          int v26 = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove keyed transform state for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }
      else if (v12)
      {
        sub_1000FC1F0();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100008C7C(&v22);
  }
  else
  {
    unint64_t v18 = *(sqlite3 **)(a1 + 32);
    BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v19)
      {
        unint64_t v20 = sqlite3_errmsg(v18);
        sub_1000FC1B8((uint64_t)v20, (uint64_t)__p);
      }
    }
    else if (v19)
    {
      sub_1000FC158();
    }
    return 0;
  }
  return v9;
}

void sub_10000AAC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10000AAD0(uint64_t a1, sqlite3_stmt **a2, void *a3)
{
  uint64_t v5 = sqlite3_step(*a2);
  if (v5 == 101)
  {
    *(void *)(a1 + 104) += sqlite3_changes64(*(sqlite3 **)(a1 + 32));
    *(void *)(a1 + 80) += *a3;
  }
  return v5;
}

BOOL sub_10000AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (sqlite3_stmt **)(a1 + 160);
  if (*(void *)(a1 + 160)
    || (sub_100064D6C(a1, "INSERT INTO transform_states (transform_metadata_id, transform_key, transform_value) VALUES ((SELECT transform_metadata_id FROM transform_metadata WHERE transform_uuid=?1 LIMIT 1), ?2, ?3)", 1, (sqlite3_stmt **)v30), BOOL v9 = (sqlite3_stmt *)v30[0], v30[0] = 0, sub_1000650BC(v8, v9), sub_1000650BC((sqlite3_stmt **)v30, 0), *(void *)(a1 + 160)))
  {
    __int16 v25 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v25, v8);
    uint64_t v24 = 0;
    sub_1000089E8(a1, v8, 1, a2, &v24);
    memset(v30, 170, sizeof(v30));
    sub_100007460(a3, -1, 0x20u, 0, 0, v30);
    sub_1000089E8(a1, v8, 2, (uint64_t)v30, &v24);
    memset(__p, 170, sizeof(__p));
    sub_100007460(a4, -1, 0x20u, 0, 0, __p);
    sub_1000089E8(a1, v8, 3, (uint64_t)__p, &v24);
    int v10 = sub_10000AAD0(a1, v8, &v24);
    uint64_t v11 = *(sqlite3 **)(a1 + 32);
    if (v10 == 101)
    {
      BOOL v12 = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 32)) != 0;
    }
    else
    {
      int v13 = qword_10015EF60;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v14)
        {
          int v15 = *(char *)(a2 + 23);
          uint64_t v16 = *(void *)a2;
          unint64_t v17 = sqlite3_errmsg(v11);
          if (v15 >= 0) {
            uint64_t v18 = a2;
          }
          else {
            uint64_t v18 = v16;
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v27 = v18;
          __int16 v28 = 2080;
          int v29 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[State Store] Failed to insert transform state for uuid='%s'; %s",
            buf,
            0x16u);
        }
      }
      else if (v14)
      {
        sub_1000FC2F4();
      }
      BOOL v12 = 0;
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30[2]) < 0) {
      operator delete(v30[0]);
    }
    sub_100008C7C(&v25);
  }
  else
  {
    unint64_t v20 = *(sqlite3 **)(a1 + 32);
    BOOL v21 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v20)
    {
      if (v21)
      {
        int v22 = sqlite3_errmsg(v20);
        sub_1000FC2BC((uint64_t)v22, (uint64_t)v30);
      }
    }
    else if (v21)
    {
      sub_1000FC25C();
    }
    return 0;
  }
  return v12;
}

void sub_10000ADEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10000ADF8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a7)
{
  BOOL v14 = (sqlite3_stmt **)(a1 + 168);
  if (*(void *)(a1 + 168)
    || (sub_100064D6C(a1, "INSERT INTO transform_metadata (transform_uuid, transform_type, transform_budget_used, transform_event_count, agg_session_id) VALUES (?1, ?2, ?3, ?4, (SELECT COALESCE((SELECT agg_session_id FROM agg_session WHERE agg_session_period=?5 AND agg_session_start_timestamp<=?6 ORDER BY agg_session_start_timestamp ASC LIMIT 1), (SELECT agg_session_id FROM agg_session WHERE agg_session_period=?5 ORDER BY agg_session_start_timestamp ASC LIMIT 1)))) ON CONFLICT(transform_uuid) DO UPDATE SET transform_budget_used=?3, transform_event_count=?4 WHERE transform_uuid=?1", 1, (sqlite3_stmt **)__p), int v15 = (sqlite3_stmt *)__p[0], __p[0] = 0, sub_1000650BC(v14, v15), sub_1000650BC((sqlite3_stmt **)__p, 0), *(void *)(a1 + 168)))
  {
    int v30 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v30, v14);
    uint64_t v29 = 0;
    sub_1000089E8(a1, v14, 1, a3, &v29);
    __p[0] = (void *)a2;
    sub_10000B0E4(a1, v14, 2, (sqlite3_int64 *)__p, &v29);
    __p[0] = (void *)a4;
    sub_10000B0E4(a1, v14, 3, (sqlite3_int64 *)__p, &v29);
    __p[0] = (void *)a5;
    sub_10000B0E4(a1, v14, 4, (sqlite3_int64 *)__p, &v29);
    __p[0] = (void *)a6;
    sub_10000B0E4(a1, v14, 5, (sqlite3_int64 *)__p, &v29);
    memset(__p, 170, sizeof(__p));
    sub_10001C968(*a7, (uint64_t)"%Y-%m-%dT%H:%M:%S");
    sub_1000089E8(a1, v14, 6, (uint64_t)__p, &v29);
    int v16 = sub_10000AAD0(a1, v14, &v29);
    BOOL v17 = v16 == 101;
    if (v16 != 101)
    {
      uint64_t v18 = *(sqlite3 **)(a1 + 32);
      BOOL v19 = qword_10015EF60;
      BOOL v20 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v18)
      {
        if (v20)
        {
          int v21 = *(char *)(a3 + 23);
          uint64_t v22 = *(void *)a3;
          unsigned int v23 = sqlite3_errmsg(v18);
          if (v21 >= 0) {
            uint64_t v24 = a3;
          }
          else {
            uint64_t v24 = v22;
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v32 = v24;
          __int16 v33 = 2080;
          unsigned int v34 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[State Store] Failed to insert transform metadata for uuid='%s'; %s",
            buf,
            0x16u);
        }
      }
      else if (v20)
      {
        sub_1000FC4FC();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100008C7C(&v30);
  }
  else
  {
    int v26 = *(sqlite3 **)(a1 + 32);
    BOOL v27 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v26)
    {
      if (v27)
      {
        __int16 v28 = sqlite3_errmsg(v26);
        sub_1000FC4C4((uint64_t)v28, (uint64_t)__p);
      }
    }
    else if (v27)
    {
      sub_1000FC464();
    }
    return 0;
  }
  return v17;
}

void sub_10000B0D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10000B0E4(int a1, sqlite3_stmt **a2, int a3, sqlite3_int64 *a4, void *a5)
{
  uint64_t result = sqlite3_bind_int64(*a2, a3, *a4);
  *a5 += 8;
  return result;
}

uint64_t sub_10000B128(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000B150(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *(_WORD *)(a1 + 8) = 0;
  if (*a2) {
    sub_10000B190(a1);
  }
  return a1;
}

BOOL sub_10000B190(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "BEGIN;", 0, 0, 0))
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 9) = 1;
    return result;
  }
  uint64_t v3 = *(sqlite3 **)a1;
  int v4 = qword_10015EF60;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      BOOL v12 = sqlite3_errmsg(v3);
      sub_1000FA150((uint64_t)v12, (uint64_t)&v13, v4);
      return 0;
    }
  }
  else if (result)
  {
    sub_1000FA0EC(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void sub_10000B26C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10000B278(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 9) || *(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "END;", 0, 0, 0))
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  uint64_t v3 = *(sqlite3 **)a1;
  int v4 = qword_10015EF60;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      BOOL v12 = sqlite3_errmsg(v3);
      sub_1000FA290((uint64_t)v12, (uint64_t)&v13, v4);
      return 0;
    }
  }
  else if (result)
  {
    sub_1000FA22C(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void sub_10000B35C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10000B368(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_100064D6C(*(void *)(v1 + 8), "SELECT modify_event_type, modify_event_defType, modify_event_config FROM eligible_modify_eventdef_view WHERE modify_event_name = ?1;",
          1,
          &v12),
        int v4 = *(sqlite3_stmt ***)v1,
        uint64_t v5 = v12,
        BOOL v12 = 0,
        sub_1000650BC(v4, v5),
        sub_1000650BC(&v12, 0),
        uint64_t v2 = *(sqlite3_stmt ***)v1,
        **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1;
    sub_100008A30(v3, v2, 1, v6);
  }
  else
  {
    uint64_t v9 = *(sqlite3 **)(v3 + 32);
    uint64_t v10 = qword_10015EF60;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000ECEAC(v9, v10);
      }
    }
    else if (v11)
    {
      sub_1000ECE4C();
    }
    return 0;
  }
  return v7;
}

void sub_10000B470(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(v1 + 8);
  memset(v117, 170, 24);
  *(void *)buf = *(void *)v1;
  *(void *)&buf[8] = "command";
  sub_10000D0B8((uint64_t)buf, &object);
  v117[3] = 0;
  v117[4] = 0;
  uint64_t v118 = 0;
  applesauce::xpc::dyn_cast_or_default();
  if (SHIBYTE(v118) < 0) {
    operator delete(v117[3]);
  }
  xpc_release(object);
  if ((HIBYTE(v117[2]) & 0x80) != 0)
  {
    switch((unint64_t)v117[1])
    {
      case 7uLL:
        if (*(_DWORD *)v117[0] != 1667590243 || *(_DWORD *)((char *)v117[0] + 3) != 1852402531) {
          break;
        }
LABEL_17:
        sub_100095B24((uint64_t)v2, *(xpc_object_t **)(v1 + 16), *(void *)v1);
        goto LABEL_390;
      case 8uLL:
        uint64_t v9 = *(void **)v117[0];
LABEL_50:
        if (v9 != (void *)0x74756F6B63656863) {
          break;
        }
        sub_100095CA4(v3, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xFuLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
        break;
      case 0xEuLL:
        goto LABEL_69;
      case 0x10uLL:
        if (*(void *)v117[0] == 0x2D656C6261736964 && *((void *)v117[0] + 1) == 0x676E696C706D6173)
        {
LABEL_57:
          int v16 = *(xpc_connection_t **)(v1 + 16);
          BOOL v17 = *(xpc_object_t **)v1;
          uint64_t v18 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.TransformSampling.manage");
          int v20 = sub_100090BE4((uint64_t)v18, v16, v17, (uint64_t *)&v117[3]);
          if (SHIBYTE(v118) < 0) {
            operator delete(v117[3]);
          }
          if (v20) {
            sub_1000924C4((uint64_t)v2, v19, *(xpc_object_t **)v1);
          }
        }
        break;
      case 0x11uLL:
        if (*(void *)v117[0] == 0x656C62616E656572
          && *((void *)v117[0] + 1) == 0x6E696C706D61732DLL
          && *((unsigned char *)v117[0] + 16) == 103)
        {
LABEL_91:
          unint64_t v37 = *(xpc_connection_t **)(v1 + 16);
          uint64_t v38 = *(xpc_object_t **)v1;
          uint64_t v39 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.TransformSampling.manage");
          int v41 = sub_100090BE4((uint64_t)v39, v37, v38, (uint64_t *)&v117[3]);
          if (SHIBYTE(v118) < 0) {
            operator delete(v117[3]);
          }
          if (v41) {
            sub_1000928B0((uint64_t)v2, v40, *(xpc_object_t **)v1);
          }
        }
        else
        {
          if (v117[1] != (void *)14) {
            break;
          }
LABEL_69:
          uint64_t v5 = (void **)v117[0];
LABEL_70:
          unsigned int v23 = *v5;
          uint64_t v24 = *(uint64_t *)((char *)v5 + 6);
          if (v23 == (void *)0x2D676E696B736174 && v24 == 0x796669746F6E2D67)
          {
            int v26 = *(xpc_connection_t **)(v1 + 16);
            BOOL v27 = *(xpc_object_t **)v1;
            __int16 v28 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.Tasking.notify");
            int v30 = sub_100090BE4((uint64_t)v28, v26, v27, (uint64_t *)&v117[3]);
            if (SHIBYTE(v118) < 0) {
              operator delete(v117[3]);
            }
            if (v30)
            {
              sub_100093BE0((uint64_t)v2, v29, *(xpc_object_t **)v1);
              goto LABEL_390;
            }
          }
        }
        break;
      case 0x15uLL:
        if (*(void *)v117[0] != 0x652D657461657263
          || *((void *)v117[0] + 1) != 0x73626F2D746E6576
          || *(void *)((char *)v117[0] + 13) != 0x726576726573626FLL)
        {
          break;
        }
LABEL_87:
        __int16 v33 = *(xpc_connection_t **)(v1 + 16);
        unsigned int v34 = *(xpc_object_t **)v1;
        uint64_t v35 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.ObserveEvents.allow");
        int v36 = sub_100090BE4((uint64_t)v35, v33, v34, (uint64_t *)&v117[3]);
        if (SHIBYTE(v118) < 0) {
          operator delete(v117[3]);
        }
        if (!v36) {
          break;
        }
        sub_100092C9C(v2, *(xpc_object_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      default:
        if (v117[1] != (void *)4) {
          break;
        }
        int v8 = *(_DWORD *)v117[0];
        goto LABEL_47;
    }
  }
  else
  {
    uint64_t v5 = v117;
    switch(HIBYTE(v117[2]))
    {
      case 7:
        if (LODWORD(v117[0]) != 1667590243 || *(_DWORD *)((char *)v117 + 3) != 1852402531) {
          goto LABEL_95;
        }
        goto LABEL_17;
      case 8:
        uint64_t v9 = v117[0];
        goto LABEL_50;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
      case 0x12:
      case 0x13:
      case 0x14:
        goto LABEL_95;
      case 0xE:
        goto LABEL_70;
      case 0x10:
        if (v117[0] != (void *)0x2D656C6261736964 || v117[1] != (void *)0x676E696C706D6173) {
          goto LABEL_95;
        }
        goto LABEL_57;
      case 0x11:
        if (v117[0] != (void *)0x656C62616E656572
          || v117[1] != (void *)0x6E696C706D61732DLL
          || LOBYTE(v117[2]) != 103)
        {
          goto LABEL_95;
        }
        goto LABEL_91;
      case 0x15:
        if (v117[0] != (void *)0x652D657461657263
          || v117[1] != (void *)0x73626F2D746E6576
          || *(void **)((char *)&v117[1] + 5) != (void *)0x726576726573626FLL)
        {
          goto LABEL_95;
        }
        goto LABEL_87;
      default:
        if (v117 != 4) {
          goto LABEL_95;
        }
        int v8 = (int)v117[0];
        break;
    }
LABEL_47:
    if (v8 == 1684956531)
    {
      sub_10000C9F8((uint64_t)v2, v4, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
  }
LABEL_95:
  unint64_t v42 = *(xpc_connection_t **)(v1 + 16);
  uint64_t v43 = *(xpc_object_t **)v1;
  unint64_t v44 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.ManagementCommands.allow");
  uint64_t v45 = sub_100090BE4((uint64_t)v44, v42, v43, (uint64_t *)&v117[3]);
  char v47 = v45;
  if (SHIBYTE(v118) < 0)
  {
    operator delete(v117[3]);
    if ((v47 & 1) == 0) {
      goto LABEL_390;
    }
  }
  else if ((v45 & 1) == 0)
  {
    goto LABEL_390;
  }
  char v48 = HIBYTE(v117[2]);
  if ((SHIBYTE(v117[2]) & 0x80000000) == 0)
  {
    switch(HIBYTE(v117[2]))
    {
      case 6:
        goto LABEL_101;
      case 8:
        if (v117[0] == (void *)0x706D75642D676F6CLL) {
          goto LABEL_134;
        }
LABEL_143:
        if (v117[0] == (void *)0x676F6C2D65766173) {
          goto LABEL_144;
        }
        if (HIBYTE(v117[2]) == 6) {
          goto LABEL_101;
        }
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        goto LABEL_389;
      case 0xA:
        goto LABEL_211;
      case 0xB:
LABEL_148:
        if (v117[0] != (void *)0x6C2D6769666E6F63 || *(void **)((char *)v117 + 3) != (void *)0x7473696C2D676966)
        {
          switch(HIBYTE(v117[2]))
          {
            case 6:
              goto LABEL_101;
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              if (v117[0] != (void *)0x692D6769666E6F63
                || *(void **)((char *)v117 + 3) != (void *)0x6F666E692D676966)
              {
                goto LABEL_157;
              }
              goto LABEL_407;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_163;
      case 0xD:
LABEL_164:
        if (v117[0] == (void *)0x722D6769666E6F63 && *(void **)((char *)v117 + 5) == (void *)0x64616F6C65722D67) {
          goto LABEL_394;
        }
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        if (HIBYTE(v117[2]) == 10) {
          goto LABEL_211;
        }
        if (HIBYTE(v117[2]) != 11) {
          goto LABEL_389;
        }
LABEL_171:
        if (v117[0] == (void *)0x6B7361742D746573 && *(void **)((char *)v117 + 3) == (void *)0x676E696B7361742DLL) {
          goto LABEL_406;
        }
        if ((HIBYTE(v117[2]) & 0x80) != 0) {
          goto LABEL_294;
        }
        if (HIBYTE(v117[2]) == 8) {
          goto LABEL_269;
        }
        if (HIBYTE(v117[2]) == 10) {
          goto LABEL_211;
        }
        if (HIBYTE(v117[2]) != 11) {
          goto LABEL_389;
        }
LABEL_204:
        if (v117[0] == (void *)0x74732D7972657571 && *(void **)((char *)v117 + 3) == (void *)0x65746174732D7972) {
          goto LABEL_415;
        }
        if ((HIBYTE(v117[2]) & 0x80) != 0) {
          goto LABEL_330;
        }
        if (HIBYTE(v117[2]) != 11)
        {
          if (HIBYTE(v117[2]) != 10) {
            goto LABEL_389;
          }
          goto LABEL_211;
        }
        if (v117[0] == (void *)0x6C632D7972657571 && *(void **)((char *)v117 + 3) == (void *)0x7261656C632D7972) {
          goto LABEL_423;
        }
        break;
      case 0xE:
LABEL_225:
        if (v117[0] == (void *)0x726F66736E617274 && *(void **)((char *)v117 + 6) == (void *)0x6F666E692D6D726FLL) {
          goto LABEL_397;
        }
        if (HIBYTE(v117[2]) != 14) {
          break;
        }
        goto LABEL_260;
      case 0xF:
LABEL_180:
        if (v117[0] != (void *)0x6B7361742D746573 || *(void **)((char *)v117 + 7) != (void *)0x646C6F2D676E696BLL)
        {
          switch(HIBYTE(v117[2]))
          {
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_396;
      case 0x11:
LABEL_237:
        if (v117[0] == (void *)0x726F66736E617274
          && v117[1] == (void *)0x7369737265702D6DLL
          && LOBYTE(v117[2]) == 116)
        {
          goto LABEL_400;
        }
        if (HIBYTE(v117[2]) == 14) {
          goto LABEL_260;
        }
        if (HIBYTE(v117[2]) != 17) {
          goto LABEL_389;
        }
        BOOL v77 = v117[0] == (void *)0x6F6C2D65726F7473 && v117[1] == (void *)0x666E692D656C6163;
        if (!v77 || LOBYTE(v117[2]) != 111) {
          goto LABEL_389;
        }
        goto LABEL_417;
      case 0x12:
LABEL_196:
        if (v117[0] != (void *)0x712D747265736E69
          || v117[1] != (void *)0x6174732D79726575
          || LOWORD(v117[2]) != 25972)
        {
          switch(HIBYTE(v117[2]))
          {
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            case 0x11:
              goto LABEL_237;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_399;
      case 0x14:
        if (v117[0] != (void *)0x6E6172742D676F6CLL
          || v117[1] != (void *)0x6F632D6D726F6673
          || LODWORD(v117[2]) != 1937010293)
        {
          switch(HIBYTE(v117[2]))
          {
            case 6:
              goto LABEL_101;
            case 8:
              goto LABEL_143;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_148;
            case 0xD:
              goto LABEL_164;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_180;
            case 0x11:
              goto LABEL_237;
            case 0x12:
              goto LABEL_196;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_147;
      case 0x18:
LABEL_217:
        if (v117[0] != (void *)0x6172742D7473696CLL
          || v117[1] != (void *)0x2D736D726F66736ELL
          || v117[2] != (void *)0x65686361632D6E69)
        {
          switch(HIBYTE(v117[2]))
          {
            case 0xA:
              goto LABEL_231;
            case 0xE:
              goto LABEL_225;
            case 0xF:
              goto LABEL_255;
            case 0x11:
              goto LABEL_237;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_401;
      case 0x1D:
        if (v117[0] != (void *)0x61656C632D746573
          || v117[1] != (void *)0x6769666E6F632D72
          || v117[2] != (void *)0x722D72657466612DLL
          || *(void **)((char *)&v117[2] + 5) != (void *)0x746F6F6265722D72)
        {
          switch(HIBYTE(v117[2]))
          {
            case 8:
              goto LABEL_269;
            case 0xA:
              goto LABEL_211;
            case 0xB:
              goto LABEL_204;
            case 0xE:
              goto LABEL_225;
            case 0xF:
LABEL_255:
              if (v117[0] != (void *)0x726F66736E617274
                || *(void **)((char *)v117 + 7) != (void *)0x74636976652D6D72)
              {
                goto LABEL_259;
              }
              goto LABEL_416;
            case 0x11:
              goto LABEL_237;
            case 0x12:
              goto LABEL_196;
            case 0x18:
              goto LABEL_217;
            default:
              goto LABEL_389;
          }
        }
        goto LABEL_398;
      default:
        goto LABEL_389;
    }
LABEL_230:
    if (HIBYTE(v117[2]) != 10) {
      goto LABEL_389;
    }
LABEL_231:
    if (v117[0] != (void *)0x73752D746E657665 || LOWORD(v117[1]) != 25701)
    {
      if ((HIBYTE(v117[2]) & 0x80) == 0) {
        goto LABEL_389;
      }
      goto LABEL_363;
    }
    goto LABEL_408;
  }
  char v50 = v117[1];
  if (v117[1] == (void *)8 && *(void *)v117[0] == 0x706D75642D676F6CLL)
  {
LABEL_134:
    sub_100090E84((uint64_t)v2, v46, *(xpc_object_t **)v1);
    goto LABEL_390;
  }
  if (v117[1] == (void *)20)
  {
    if (*(void *)v117[0] == 0x6E6172742D676F6CLL
      && *((void *)v117[0] + 1) == 0x6F632D6D726F6673
      && *((_DWORD *)v117[0] + 4) == 1937010293)
    {
LABEL_147:
      sub_100091244((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
    char v50 = v117[1];
  }
  if (v50 == (void *)8)
  {
    if (*(void *)v117[0] == 0x676F6C2D65766173)
    {
LABEL_144:
      uint64_t v57 = v2[12];
      sub_100015438(&v117[3], "api");
      buf[0] = 0;
      *(void *)&buf[8] = 0;
      sub_100016EAC((uint64_t)buf);
      sub_100016EAC((uint64_t)buf);
      (*(void (**)(uint64_t, void **, unsigned char *))(*(void *)v57 + 24))(v57, &v117[3], buf);
      sub_100016EAC((uint64_t)buf);
      sub_100016B28((uint64_t **)&buf[8], buf[0]);
LABEL_145:
      if (SHIBYTE(v118) < 0) {
        operator delete(v117[3]);
      }
      goto LABEL_390;
    }
    char v50 = v117[1];
  }
  if (v50 == (void *)11)
  {
    if (*(void *)v117[0] == 0x6C2D6769666E6F63 && *(void *)((char *)v117[0] + 3) == 0x7473696C2D676966)
    {
LABEL_163:
      sub_1000918E4((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
    char v50 = v117[1];
    if (v117[1] == (void *)11)
    {
      if (*(void *)v117[0] == 0x692D6769666E6F63 && *(void *)((char *)v117[0] + 3) == 0x6F666E692D676966) {
        goto LABEL_407;
      }
      if ((HIBYTE(v117[2]) & 0x80) == 0)
      {
        switch(HIBYTE(v117[2]))
        {
          case 6:
LABEL_101:
            if (LODWORD(v117[0]) == 1835888483 && WORD2(v117[0]) == 29801) {
              goto LABEL_393;
            }
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_282;
            }
            goto LABEL_389;
          case 8:
LABEL_269:
            if (v117[0] == (void *)0x7265766F6C6C6F72) {
              goto LABEL_402;
            }
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_315;
            }
            goto LABEL_389;
          case 0xA:
LABEL_211:
            if (v117[0] == (void *)0x696C2D7972657571 && LOWORD(v117[1]) == 29811) {
              goto LABEL_395;
            }
            if ((HIBYTE(v117[2]) & 0x80) != 0) {
              goto LABEL_336;
            }
            goto LABEL_230;
          case 0xB:
LABEL_157:
            if (v117[0] == (void *)0x642D6769666E6F63 && *(void **)((char *)v117 + 3) == (void *)0x706D75642D676966) {
              goto LABEL_407;
            }
            if ((HIBYTE(v117[2]) & 0x80) == 0)
            {
              switch(HIBYTE(v117[2]))
              {
                case 6:
                  goto LABEL_101;
                case 8:
                  goto LABEL_269;
                case 0xA:
                  goto LABEL_211;
                case 0xB:
                  goto LABEL_171;
                default:
                  goto LABEL_389;
              }
            }
            goto LABEL_276;
          default:
            goto LABEL_389;
        }
      }
      if (*(void *)v117[0] == 0x642D6769666E6F63 && *(void *)((char *)v117[0] + 3) == 0x706D75642D676966)
      {
LABEL_407:
        sub_100091B60((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
LABEL_276:
      char v50 = v117[1];
    }
  }
  if (v50 == (void *)6)
  {
    if (*(_DWORD *)v117[0] == 1835888483 && *((_WORD *)v117[0] + 2) == 29801)
    {
LABEL_393:
      sub_100091E40((uint64_t)v2, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
LABEL_282:
    char v50 = v117[1];
  }
  if (v50 == (void *)13)
  {
    if (*(void *)v117[0] == 0x722D6769666E6F63 && *(void *)((char *)v117[0] + 5) == 0x64616F6C65722D67) {
LABEL_394:
    }
      sub_100091FC8((uint64_t)v2, v46, *(xpc_object_t **)v1);
    char v50 = v117[1];
  }
  if (v50 == (void *)11)
  {
    if (*(void *)v117[0] == 0x6B7361742D746573 && *(void *)((char *)v117[0] + 3) == 0x676E696B7361742DLL)
    {
LABEL_406:
      sub_100093E9C(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
LABEL_294:
    char v50 = v117[1];
  }
  if (v50 == (void *)15)
  {
    if (*(void *)v117[0] == 0x6B7361742D746573 && *(void *)((char *)v117[0] + 7) == 0x646C6F2D676E696BLL)
    {
LABEL_396:
      sub_10009364C(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
    char v50 = v117[1];
  }
  if (v50 == (void *)29)
  {
    if (*(void *)v117[0] == 0x61656C632D746573
      && *((void *)v117[0] + 1) == 0x6769666E6F632D72
      && *((void *)v117[0] + 2) == 0x722D72657466612DLL
      && *(void *)((char *)v117[0] + 21) == 0x746F6F6265722D72)
    {
LABEL_398:
      sub_100094230(v45, v46, *(xpc_object_t **)v1);
      goto LABEL_390;
    }
    char v50 = v117[1];
  }
  if (v50 != (void *)8)
  {
LABEL_316:
    if (v50 == (void *)18)
    {
      if (*(void *)v117[0] == 0x712D747265736E69
        && *((void *)v117[0] + 1) == 0x6174732D79726575
        && *((_WORD *)v117[0] + 8) == 25972)
      {
LABEL_399:
        sub_10009433C((uint64_t)v2, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      char v50 = v117[1];
    }
    if (v50 == (void *)11)
    {
      if (*(void *)v117[0] == 0x74732D7972657571 && *(void *)((char *)v117[0] + 3) == 0x65746174732D7972)
      {
LABEL_415:
        sub_100094990((uint64_t)v2, *(xpc_connection_t **)(v1 + 16), *(xpc_object_t **)v1);
        goto LABEL_390;
      }
LABEL_330:
      char v50 = v117[1];
    }
    if (v50 == (void *)10)
    {
      if (*(void *)v117[0] == 0x696C2D7972657571 && *((_WORD *)v117[0] + 4) == 29811)
      {
LABEL_395:
        sub_1000951B8((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
LABEL_336:
      char v50 = v117[1];
    }
    if (v50 == (void *)11)
    {
      if (*(void *)v117[0] == 0x6C632D7972657571 && *(void *)((char *)v117[0] + 3) == 0x7261656C632D7972)
      {
LABEL_423:
        sub_100095644((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      char v50 = v117[1];
    }
    if (v50 == (void *)24)
    {
      if (*(void *)v117[0] == 0x6172742D7473696CLL
        && *((void *)v117[0] + 1) == 0x2D736D726F66736ELL
        && *((void *)v117[0] + 2) == 0x65686361632D6E69)
      {
LABEL_401:
        sub_1000958D4((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      char v50 = v117[1];
    }
    if (v50 == (void *)14)
    {
      if (*(void *)v117[0] == 0x726F66736E617274 && *(void *)((char *)v117[0] + 6) == 0x6F666E692D6D726FLL)
      {
LABEL_397:
        sub_100095D98((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      char v50 = v117[1];
    }
    if (v50 != (void *)10)
    {
LABEL_364:
      if (v50 == (void *)15)
      {
        if (*(void *)v117[0] == 0x726F66736E617274 && *(void *)((char *)v117[0] + 7) == 0x74636976652D6D72)
        {
LABEL_416:
          sub_100096738((uint64_t)v2, v46, *(xpc_object_t **)v1);
          goto LABEL_390;
        }
        char v50 = v117[1];
      }
      if (v50 != (void *)17) {
        goto LABEL_387;
      }
      if (*(void *)v117[0] == 0x726F66736E617274
        && *((void *)v117[0] + 1) == 0x7369737265702D6DLL
        && *((unsigned char *)v117[0] + 16) == 116)
      {
LABEL_400:
        sub_100096308((uint64_t)v2, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      char v50 = v117[1];
      if (v117[1] != (void *)17) {
        goto LABEL_387;
      }
      if (*(void *)v117[0] == 0x6F6C2D65726F7473
        && *((void *)v117[0] + 1) == 0x666E692D656C6163
        && *((unsigned char *)v117[0] + 16) == 111)
      {
LABEL_417:
        sub_100096578(v45, v46, *(xpc_object_t **)v1);
        goto LABEL_390;
      }
      if ((HIBYTE(v117[2]) & 0x80) == 0)
      {
LABEL_259:
        if (HIBYTE(v117[2]) == 14)
        {
LABEL_260:
          v80 = v117;
          goto LABEL_261;
        }
      }
      else
      {
LABEL_387:
        if (v50 == (void *)14)
        {
          v80 = (void **)v117[0];
LABEL_261:
          v81 = *v80;
          uint64_t v82 = *(uint64_t *)((char *)v80 + 6);
          if (v81 == (void *)0x676173752D707061 && v82 == 0x636E79732D656761)
          {
            sub_100096B94((uint64_t)v2, v46, *(xpc_object_t **)v1);
            goto LABEL_390;
          }
        }
      }
LABEL_389:
      v106 = qword_10015EF40;
      if (!os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_390;
      }
      v112 = (void **)v117[0];
      applesauce::xpc::object::to_string((uint64_t *)&v117[3], *(applesauce::xpc::object **)v1);
      v113 = v117;
      if (v48 < 0) {
        v113 = v112;
      }
      if (v118 >= 0) {
        v114 = &v117[3];
      }
      else {
        v114 = (void **)v117[3];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v113;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v114;
      _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "[ClientManager] ERROR: Unrecognized command: %s (message=%s)", buf, 0x16u);
      goto LABEL_145;
    }
    if (*(void *)v117[0] != 0x73752D746E657665 || *((_WORD *)v117[0] + 4) != 25701)
    {
LABEL_363:
      char v50 = v117[1];
      goto LABEL_364;
    }
LABEL_408:
    sub_100096078((uint64_t)v2, v46, *(xpc_object_t **)v1);
    goto LABEL_390;
  }
  if (*(void *)v117[0] != 0x7265766F6C6C6F72)
  {
LABEL_315:
    char v50 = v117[1];
    goto LABEL_316;
  }
LABEL_402:
  v107 = *(xpc_connection_t **)(v1 + 16);
  v108 = *(xpc_object_t **)v1;
  v109 = sub_100015438(&v117[3], "com.apple.private.CoreAnalytics.RolloverEvents.allow");
  int v111 = sub_100090BE4((uint64_t)v109, v107, v108, (uint64_t *)&v117[3]);
  if (SHIBYTE(v118) < 0) {
    operator delete(v117[3]);
  }
  if (v111) {
    sub_100097034((uint64_t)v2, v110, *(xpc_object_t **)v1);
  }
LABEL_390:
  if (SHIBYTE(v117[2]) < 0) {
    operator delete(v117[0]);
  }
}

void sub_10000C938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C9F8(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  memset(v36, 170, sizeof(v36));
  __p[0] = a3;
  __p[1] = "event";
  sub_10000D0B8((uint64_t)__p, &object);
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  applesauce::xpc::dyn_cast_or_default();
  if (SHIBYTE(v39) < 0) {
    operator delete(v37);
  }
  xpc_release(object);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAA00;
  *(void *)uint64_t v35 = 0;
  sub_100016EAC((uint64_t)&object);
  sub_100016EAC((uint64_t)&object);
  unint64_t v37 = a3;
  uint64_t v38 = (std::__shared_weak_count *)"json";
  sub_10000D0B8((uint64_t)&v37, &v33);
  if (xpc_get_type(v33) != (xpc_type_t)&_xpc_type_null)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    applesauce::xpc::dyn_cast_or_default();
    if (SHIBYTE(v39) < 0) {
      operator delete(v37);
    }
    uint64_t v40 = 0;
    sub_10000D450((uint64_t)__p, (uint64_t)&v37, 1, &v31);
    sub_10000DE9C(&v37);
    sub_100016EAC((uint64_t)&v31);
    char v5 = (char)object;
    LOBYTE(object) = v31;
    LOBYTE(v31) = v5;
    uint64_t v6 = *(uint64_t **)v35;
    *(void *)uint64_t v35 = v32;
    uint64_t v32 = v6;
    sub_100016EAC((uint64_t)&object);
    sub_100016EAC((uint64_t)&v31);
    sub_100016B28(&v32, v31);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_11;
  }
  unint64_t v37 = a3;
  uint64_t v38 = (std::__shared_weak_count *)"xpc";
  sub_10000D0B8((uint64_t)&v37, __p);
  if (xpc_get_type(__p[0]) != (xpc_type_t)&_xpc_type_null)
  {
    sub_1000C3374(__p, &v27);
    sub_100016EAC((uint64_t)&v27);
    char v7 = (char)object;
    LOBYTE(object) = v27;
    LOBYTE(v27) = v7;
    int v8 = &v28;
    uint64_t v9 = *(uint64_t **)v35;
    *(void *)uint64_t v35 = v28;
    __int16 v28 = v9;
    sub_100016EAC((uint64_t)&object);
    sub_100016EAC((uint64_t)&v27);
    int v10 = v27;
LABEL_10:
    sub_100016B28(v8, v10);
    xpc_release(__p[0]);
LABEL_11:
    xpc_release(v33);
    if (object == 1)
    {
      if (!sub_10000F860(*(uint64_t *)v35, "timestamp"))
      {
        unint64_t v37 = a3;
        uint64_t v38 = (std::__shared_weak_count *)"timestamp";
        sub_10000D0B8((uint64_t)&v37, __p);
        BOOL v12 = (uint64_t *)applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0, v11);
        xpc_release(__p[0]);
        if (v12)
        {
          v23[0] = 6;
          uint64_t v24 = v12;
          sub_100016EAC((uint64_t)v23);
          sub_100016EAC((uint64_t)v23);
          uint64_t v13 = sub_10000D104((unsigned __int8 *)&object, "timestamp");
          sub_100016EAC((uint64_t)v23);
          unsigned __int8 v14 = *(unsigned char *)v13;
          *(unsigned char *)uint64_t v13 = v23[0];
          v23[0] = v14;
          int v15 = (uint64_t *)v13[1];
          v13[1] = (uint64_t)v24;
          uint64_t v24 = v15;
          sub_100016EAC((uint64_t)v13);
          sub_100016EAC((uint64_t)v23);
          sub_100016B28(&v24, v23[0]);
        }
      }
      unint64_t v37 = a3;
      uint64_t v38 = (std::__shared_weak_count *)"priority";
      sub_10000D0B8((uint64_t)&v37, __p);
      if (xpc_get_type(__p[0]) == (xpc_type_t)&_xpc_type_null) {
        char v17 = 0;
      }
      else {
        char v17 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0, v16);
      }
      xpc_release(__p[0]);
      unint64_t v37 = a3;
      uint64_t v38 = (std::__shared_weak_count *)"format";
      sub_10000D0B8((uint64_t)&v37, __p);
      if (xpc_get_type(__p[0]) == (xpc_type_t)&_xpc_type_null) {
        char v19 = 0;
      }
      else {
        char v19 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)__p, 0, v18);
      }
      xpc_release(__p[0]);
      uint64_t v20 = *(void *)(a1 + 48);
      if (v20)
      {
        sub_10001059C((long long *)v36, (uint64_t)&object, v19, v17, &v37);
        (*(void (**)(uint64_t, xpc_object_t **))(*(void *)v20 + 16))(v20, &v37);
        if (v38) {
          sub_1000147D8(v38);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR))
      {
        sub_1001005C8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR))
    {
      sub_100100630();
    }
    goto LABEL_32;
  }
  if (!xpc_dictionary_get_value(*a3, "xpc"))
  {
    sub_10001200C((uint64_t)v25, 0, 0, 0, 1);
    sub_100016EAC((uint64_t)v25);
    unsigned __int8 v21 = object;
    LOBYTE(object) = v25[0];
    v25[0] = v21;
    int v8 = (uint64_t **)&v26;
    uint64_t v22 = *(void *)v35;
    *(void *)uint64_t v35 = v26;
    uint64_t v26 = v22;
    sub_100016EAC((uint64_t)&object);
    sub_100016EAC((uint64_t)v25);
    int v10 = v25[0];
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
    sub_100100698();
  }
  xpc_release(__p[0]);
  xpc_release(v33);
LABEL_32:
  sub_100016EAC((uint64_t)&object);
  sub_100016B28((uint64_t **)v35, object);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
}

void sub_10000CF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,xpc_object_t a23,xpc_object_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_10000D0B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t *sub_10000D104(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    char v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *char v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_100016EAC((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v10 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v13, v10);
    unint64_t v11 = std::string::insert(&v13, 0, "cannot use operator[] with a string argument with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(305, (uint64_t)__p, exception);
  }
  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  sub_100015438(__p, __s);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  char v7 = sub_10000D2F8(v6, (const void **)__p, (uint64_t)&unk_100117318, &v13);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v7 + 7;
}

void sub_10000D278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10000D2F8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_10001855C((uint64_t)a1, &v8, a2);
  xpc_object_t result = *v6;
  if (!*v6)
  {
    memset(v9, 170, sizeof(v9));
    sub_10000D3C8((uint64_t)a1, a4, v9);
    sub_1000187B0(a1, v8, v6, v9[0]);
    return v9[0];
  }
  return result;
}

uint64_t sub_10000D3C8@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  uint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  char v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  _OWORD v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((void *)v6 + 8) = 0;
  *((unsigned char *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  sub_100016EAC((uint64_t)v6 + 56);
  uint64_t result = sub_100016EAC(v9);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void *sub_10000D450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_10000DC80((uint64_t)v14, a2);
  if ((v8 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  sub_10000DABC(v11, v11 + v12, (uint64_t)v14, a3, (uint64_t)v15);
  sub_10000D584((uint64_t)v15, 1, (uint64_t)a4);
  sub_10000DF20((uint64_t)&v16);
  sub_10000DE9C(v15);
  return sub_10000DE9C(v14);
}

void sub_10000D548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10000DF20(v14 + 40);
  sub_10000DE9C(&a13);
  sub_10000DE9C(&a9);
  sub_100028D64(v13);
  _Unwind_Resume(a1);
}

void sub_10000D584(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v40 = v6;
    long long v41 = v6;
    long long v38 = v6;
    long long v39 = v6;
    long long v36 = v6;
    long long v37 = v6;
    *(_OWORD *)&v35[16] = v6;
    *(_OWORD *)&v35[32] = v6;
    *(_OWORD *)uint64_t v35 = v6;
    sub_10000DC80((uint64_t)v34, a1);
    sub_10003BFA0((uint64_t)v35, a3, (uint64_t)v34, *(unsigned char *)(a1 + 176));
    sub_10000DE9C(v34);
    sub_10003AA6C(a1, (uint64_t *)v35);
    sub_100016EAC(a3);
    if (a2)
    {
      int v7 = sub_10001AAC8(a1 + 40);
      *(_DWORD *)(a1 + 32) = v7;
      if (v7 != 15)
      {
        uint64_t v8 = *(void *)(a1 + 64);
        sub_10003B59C(a1 + 40, &v33);
        long long v29 = *(_OWORD *)(a1 + 64);
        uint64_t v30 = *(void *)(a1 + 80);
        sub_100015438(v26, "value");
        sub_10003B954(a1, 0xFu, (uint64_t)v26, &__p);
        sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
        sub_10003B420((uint64_t)v35, v8, (uint64_t)&v33, (uint64_t)&v31);
        v31.__vftable = (std::exception_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v32);
        std::exception::~exception(&v31);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
    }
    if (BYTE8(v38))
    {
      v24[0] = 9;
      uint64_t v9 = (uint64_t **)&v25;
      uint64_t v25 = 0;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      unsigned __int8 v10 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v24[0];
      v24[0] = v10;
      uint64_t v11 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v25;
      uint64_t v25 = v11;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v24);
      int v12 = v24[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        sub_10003F2CC((uint64_t)v35);
        return;
      }
      v22[0] = 0;
      uint64_t v9 = (uint64_t **)&v23;
      uint64_t v23 = 0;
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      unsigned __int8 v18 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v22[0];
      v22[0] = v18;
      uint64_t v19 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v23;
      uint64_t v23 = v19;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v22);
      int v12 = v22[0];
    }
    sub_100016B28(v9, v12);
    goto LABEL_27;
  }
  char v13 = *(unsigned char *)(a1 + 176);
  *(void *)&v35[40] = 0xAAAAAAAAAAAAAA00;
  *(void *)uint64_t v35 = a3;
  memset(&v35[8], 0, 32);
  v35[41] = v13;
  sub_10001A134(a1, (uint64_t *)v35);
  sub_100016EAC(a3);
  if (a2)
  {
    int v14 = sub_10001AAC8(a1 + 40);
    *(_DWORD *)(a1 + 32) = v14;
    if (v14 != 15)
    {
      uint64_t v15 = *(void *)(a1 + 64);
      sub_10003B59C(a1 + 40, &v33);
      long long v29 = *(_OWORD *)(a1 + 64);
      uint64_t v30 = *(void *)(a1 + 80);
      sub_100015438(v26, "value");
      sub_10003B954(a1, 0xFu, (uint64_t)v26, &__p);
      sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
      sub_10003BE24((uint64_t)v35, v15, (uint64_t)&v33, (uint64_t)&v31);
      v31.__vftable = (std::exception_vtbl *)off_100151508;
      std::runtime_error::~runtime_error(&v32);
      std::exception::~exception(&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v35[40])
  {
    v20[0] = 9;
    unsigned __int8 v21 = 0;
    sub_100016EAC((uint64_t)v20);
    sub_100016EAC((uint64_t)v20);
    unsigned __int8 v16 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v20[0];
    v20[0] = v16;
    char v17 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v21;
    unsigned __int8 v21 = v17;
    sub_100016EAC(a3);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
  }
  if (*(void *)&v35[8])
  {
    *(void *)&v35[16] = *(void *)&v35[8];
    operator delete(*(void **)&v35[8]);
  }
}

void sub_10000D9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_10003BD98(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void *sub_10000DABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  sub_10000DB54((uint64_t)v9, a3);
  sub_10000DBD4(a5, &v8, (uint64_t)v9, a4);
  return sub_10000DE9C(v9);
}

void sub_10000DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000DE9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DB54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_10000DBD4(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_10000DC80(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = sub_10000DD18();
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_10001AAC8(v8);
  return a1;
}

void sub_10000DC64(_Unwind_Exception *a1)
{
  sub_10000DF20(v2);
  sub_10000DE9C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DC80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10000DD18()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

void *sub_10000DD74@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  uint64_t v8 = *a1;
  size_t v9 = strlen(v8);
  sub_10000DC80((uint64_t)v11, a2);
  sub_10000E49C((uint64_t)v8, (uint64_t)&v8[v9], (uint64_t)v11, a3, (uint64_t)v12);
  sub_10000DF64((uint64_t)v12, 1, (uint64_t)a4);
  sub_10000DF20((uint64_t)&v13);
  sub_10000DE9C(v12);
  return sub_10000DE9C(v11);
}

void sub_10000DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10000DF20(v14 + 40);
  sub_10000DE9C(&a13);
  sub_10000DE9C(&a9);
  sub_100028D64(v13);
  _Unwind_Resume(a1);
}

void *sub_10000DE9C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10000DF20(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10000DF64(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v40 = v6;
    long long v41 = v6;
    long long v38 = v6;
    long long v39 = v6;
    long long v36 = v6;
    long long v37 = v6;
    *(_OWORD *)&v35[16] = v6;
    *(_OWORD *)&v35[32] = v6;
    *(_OWORD *)uint64_t v35 = v6;
    sub_10000DC80((uint64_t)v34, a1);
    sub_10003BFA0((uint64_t)v35, a3, (uint64_t)v34, *(unsigned char *)(a1 + 176));
    sub_10000DE9C(v34);
    sub_100043554(a1, (uint64_t *)v35);
    sub_100016EAC(a3);
    if (a2)
    {
      int v7 = sub_1000162FC(a1 + 40);
      *(_DWORD *)(a1 + 32) = v7;
      if (v7 != 15)
      {
        uint64_t v8 = *(void *)(a1 + 64);
        sub_100043F08(a1 + 40, &v33);
        long long v29 = *(_OWORD *)(a1 + 64);
        uint64_t v30 = *(void *)(a1 + 80);
        sub_100015438(v26, "value");
        sub_100043FEC(a1, 0xFu, (uint64_t)v26, &__p);
        sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
        sub_10003B420((uint64_t)v35, v8, (uint64_t)&v33, (uint64_t)&v31);
        v31.__vftable = (std::exception_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v32);
        std::exception::~exception(&v31);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
    }
    if (BYTE8(v38))
    {
      v24[0] = 9;
      size_t v9 = (uint64_t **)&v25;
      uint64_t v25 = 0;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v24);
      unsigned __int8 v10 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v24[0];
      v24[0] = v10;
      uint64_t v11 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v25;
      uint64_t v25 = v11;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v24);
      int v12 = v24[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        sub_10003F2CC((uint64_t)v35);
        return;
      }
      v22[0] = 0;
      size_t v9 = (uint64_t **)&v23;
      uint64_t v23 = 0;
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v22);
      unsigned __int8 v18 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v22[0];
      v22[0] = v18;
      uint64_t v19 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v23;
      uint64_t v23 = v19;
      sub_100016EAC(a3);
      sub_100016EAC((uint64_t)v22);
      int v12 = v22[0];
    }
    sub_100016B28(v9, v12);
    goto LABEL_27;
  }
  char v13 = *(unsigned char *)(a1 + 176);
  *(void *)&v35[40] = 0xAAAAAAAAAAAAAA00;
  *(void *)uint64_t v35 = a3;
  memset(&v35[8], 0, 32);
  v35[41] = v13;
  sub_100015968(a1, (uint64_t *)v35);
  sub_100016EAC(a3);
  if (a2)
  {
    int v14 = sub_1000162FC(a1 + 40);
    *(_DWORD *)(a1 + 32) = v14;
    if (v14 != 15)
    {
      uint64_t v15 = *(void *)(a1 + 64);
      sub_100043F08(a1 + 40, &v33);
      long long v29 = *(_OWORD *)(a1 + 64);
      uint64_t v30 = *(void *)(a1 + 80);
      sub_100015438(v26, "value");
      sub_100043FEC(a1, 0xFu, (uint64_t)v26, &__p);
      sub_10003B680(101, (uint64_t *)&v29, (uint64_t)&__p, &v31);
      sub_10003BE24((uint64_t)v35, v15, (uint64_t)&v33, (uint64_t)&v31);
      v31.__vftable = (std::exception_vtbl *)off_100151508;
      std::runtime_error::~runtime_error(&v32);
      std::exception::~exception(&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v35[40])
  {
    v20[0] = 9;
    unsigned __int8 v21 = 0;
    sub_100016EAC((uint64_t)v20);
    sub_100016EAC((uint64_t)v20);
    unsigned __int8 v16 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v20[0];
    v20[0] = v16;
    char v17 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v21;
    unsigned __int8 v21 = v17;
    sub_100016EAC(a3);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
  }
  if (*(void *)&v35[8])
  {
    *(void *)&v35[16] = *(void *)&v35[8];
    operator delete(*(void **)&v35[8]);
  }
}

void sub_10000E3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_10003BD98(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void *sub_10000E49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  sub_10000DB54((uint64_t)v9, a3);
  sub_10000E534(a5, &v8, (uint64_t)v9, a4);
  return sub_10000DE9C(v9);
}

void sub_10000E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000DE9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E534(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_10000DC80(a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = sub_10000E5E0();
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_1000162FC(v8);
  return a1;
}

void sub_10000E5C4(_Unwind_Exception *a1)
{
  sub_10000DF20(v2);
  sub_10000DE9C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E5E0()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

void sub_10000E63C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = a1;
  v6[1] = v4;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100027904;
  block[3] = &unk_100153568;
  block[4] = v2;
  block[5] = v6;
  dispatch_sync(v5, block);
  if (v7) {
    sub_1000147D8(v7);
  }
}

void *sub_10000E708(uint64_t a1, long long *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80)))
  {
    sub_100015438(__p, "scheduled");
    v12[0] = 0;
    char v13 = 0;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    sub_1000485E8(a1, (uint64_t **)__p, (uint64_t)v12, &object);
    if (object) {
      dispatch_release(object);
    }
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    sub_1000899E4();
  }
  uint64_t v4 = *(uint64_t **)(a1 + 216);
  uint64_t v5 = *(void *)a2;
  long long v6 = (void *)(*(void *)a2 + 16);
  size_t v7 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a2 + 39);
  if (v4)
  {
    if ((v8 & 0x80) != 0)
    {
      if (v7 == *(void *)(v5 + 24))
      {
        if (v7 == -1) {
          goto LABEL_30;
        }
        long long v6 = (void *)*v6;
LABEL_19:
        if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
        {
          size_t v9 = qword_10015EFA0;
          if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string __p = 136446210;
            *(void *)&__p[4] = "com.apple.coreanalytics.heartbeat.2hours";
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[EventBroker] Queuing %{public}s onto the paused event queue.", __p, 0xCu);
            uint64_t v4 = *(uint64_t **)(a1 + 216);
          }
        }
      }
    }
    else if (v7 == v8)
    {
      if (v7 == -1) {
LABEL_30:
      }
        sub_10002B720();
      goto LABEL_19;
    }
    return sub_1000488E8(v4, a2);
  }
  if ((v8 & 0x80) != 0)
  {
    if (v7 == *(void *)(v5 + 24))
    {
      if (v7 == -1) {
        goto LABEL_31;
      }
      long long v6 = (void *)*v6;
LABEL_26:
      if (!memcmp(v6, "com.apple.coreanalytics.heartbeat.2hours", v7))
      {
        uint64_t v11 = qword_10015EFA0;
        if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string __p = 136446210;
          *(void *)&__p[4] = "com.apple.coreanalytics.heartbeat.2hours";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[EventBroker] Posting event %{public}s.", __p, 0xCu);
        }
      }
    }
  }
  else if (v7 == v8)
  {
    if (v7 == -1) {
LABEL_31:
    }
      sub_10002B720();
    goto LABEL_26;
  }
  return (void *)sub_10000E9E0(a1, (uint64_t *)a2);
}

void sub_10000E9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000E9E0(uint64_t a1, uint64_t *a2)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000EDE8(&v24, "com.apple.analyticsd.post-event");
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112), a2);
  memset(v23, 170, sizeof(v23));
  sub_10000EEDC(*a2, v23);
  uint64_t v4 = (uint64_t *)v23[0];
  uint64_t v5 = v23[1];
  while (v4 != (uint64_t *)v5)
  {
    uint64_t v7 = *v4;
    long long v6 = (std::__shared_weak_count *)v4[1];
    uint64_t v21 = *v4;
    uint64_t v22 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *(char *)(v7 + 39);
    uint64_t v9 = *(unsigned __int8 *)(v7 + 39);
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(v7 + 39);
    }
    else {
      uint64_t v10 = *(void *)(v7 + 24);
    }
    if (v10)
    {
      uint64_t v11 = 0;
      if (v8 >= 0) {
        uint64_t v12 = v7 + 16;
      }
      else {
        uint64_t v12 = *(void *)(v7 + 16);
      }
      uint64_t v13 = v10 - 1;
      if ((unint64_t)(v10 - 1) >= 0x17) {
        uint64_t v13 = 23;
      }
      uint64_t v14 = v13 + 1;
      while (*(unsigned __int8 *)(v12 + v11) == aComAppleCorean_1[v11])
      {
        if (v14 == ++v11)
        {
          if (v11 == 24)
          {
            uint64_t v15 = qword_10015EF38;
            if (os_log_type_enabled((os_log_t)qword_10015EF38, OS_LOG_TYPE_DEBUG))
            {
              sub_100007460(v7 + 40, -1, 0x20u, 0, 1, buf);
              uint64_t v19 = buf;
              if (v26 < 0) {
                uint64_t v19 = *(unsigned char **)buf;
              }
              *(_DWORD *)char v27 = 136315394;
              uint64_t v28 = v12;
              __int16 v29 = 2080;
              uint64_t v30 = v19;
              _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s %s", v27, 0x16u);
              if (v26 < 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v7 = v21;
              uint64_t v9 = *(unsigned __int8 *)(v21 + 39);
            }
          }
          break;
        }
      }
    }
    char v16 = (void *)(v7 + 16);
    size_t v17 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if ((v9 & 0x80) != 0)
    {
      if (v17 == *(void *)(v7 + 24))
      {
        if (v17 == -1) {
LABEL_40:
        }
          sub_10002B720();
        char v16 = (void *)*v16;
        goto LABEL_25;
      }
    }
    else if (v17 == v9)
    {
      if (v17 == -1) {
        goto LABEL_40;
      }
LABEL_25:
      if (!memcmp(v16, "com.apple.coreanalytics.heartbeat.2hours", v17))
      {
        unsigned __int8 v18 = qword_10015EFA0;
        if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[EventBroker] Loading event handlers for %{public}s.", buf, 0xCu);
        }
      }
    }
    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), &v21);
    if (*(unsigned char *)(v21 + 57) == 1) {
      (*(void (**)(void))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64));
    }
    sub_10000FD24((void *)a1, (uint64_t)&v21);
    if (v22) {
      sub_1000147D8(v22);
    }
    v4 += 2;
  }
  *(void *)buf = v23;
  sub_100014738((void ***)buf);
  return sub_10000EE20(&v24);
}

void sub_10000ED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_10000EE20(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000EDB0(uint64_t *a1)
{
  uint64_t v2 = os_transaction_create();
  *a1 = v2;
  if (!v2) {
    sub_1000FFE08();
  }
  return a1;
}

void **sub_10000EDEC(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

void sub_10000EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100004E34;
  block[3] = &unk_100154FB0;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_10000EECC(uint64_t a1, uint64_t a2)
{
}

void sub_10000EED4(uint64_t a1, uint64_t a2)
{
}

void sub_10000EEDC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v4 = (unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40) == 1 && !sub_10000F860(*(void *)(a1 + 48), "timestamp"))
  {
    uint64_t v5 = v2;
    v94[0] = 5;
    rep = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    sub_100016EAC((uint64_t)v94);
    sub_100016EAC((uint64_t)v94);
    long long v6 = sub_10000D104(v4, "timestamp");
    sub_100016EAC((uint64_t)v94);
    unsigned __int8 v7 = *(unsigned char *)v6;
    *(unsigned char *)long long v6 = v94[0];
    v94[0] = v7;
    int v8 = (uint64_t *)v6[1];
    v6[1] = (uint64_t)rep;
    rep = v8;
    sub_100016EAC((uint64_t)v6);
    sub_100016EAC((uint64_t)v94);
    sub_100016B28(&rep, v94[0]);
    uint64_t v2 = v5;
  }
  uint64_t v62 = v2;
  if (*(unsigned char *)(v2 + 56) == 1)
  {
    a2[2] = 0;
    uint64_t v61 = (uint64_t)(a2 + 2);
    *a2 = 0;
    a2[1] = 0;
    unint64_t v92 = 0xAAAAAAAAAAAAAA00;
    v93 = 0;
    sub_100016EAC((uint64_t)&v92);
    sub_100016EAC((uint64_t)&v92);
    unint64_t v90 = 0xAAAAAAAAAAAAAA00;
    v91 = 0;
    sub_100016EAC((uint64_t)&v90);
    sub_100016EAC((uint64_t)&v90);
    v96[0] = v4;
    sub_100006184((uint64_t *)v96, (uint64_t)&v80);
    sub_10000626C((uint64_t *)v96, (uint64_t)v75);
    while (!sub_1000205D8((unsigned __int8 **)&v80, (unsigned __int8 **)v75))
    {
      if (*sub_10001EE40((unsigned __int8 **)&v80) == 2)
      {
        uint64_t v12 = sub_10001EE40((unsigned __int8 **)&v80);
        sub_100016A10((uint64_t)v73, (uint64_t)v12);
        uint64_t v13 = (const void **)sub_100005DA8((unsigned __int8 **)&v80);
        uint64_t v14 = sub_10001DA78((unsigned __int8 *)&v90, v13);
        sub_100016EAC((uint64_t)v73);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v73[0];
        v73[0] = v15;
        uint64_t v16 = v14[1];
        v14[1] = v74;
        uint64_t v74 = v16;
        sub_100016EAC((uint64_t)v14);
        sub_100016EAC((uint64_t)v73);
        int v17 = v73[0];
        unsigned __int8 v18 = (uint64_t **)&v74;
      }
      else
      {
        uint64_t v19 = sub_10001EE40((unsigned __int8 **)&v80);
        sub_100016A10((uint64_t)v71, (uint64_t)v19);
        uint64_t v20 = (const void **)sub_100005DA8((unsigned __int8 **)&v80);
        uint64_t v21 = sub_10001DA78((unsigned __int8 *)&v92, v20);
        sub_100016EAC((uint64_t)v71);
        unsigned __int8 v22 = *(unsigned char *)v21;
        *(unsigned char *)uint64_t v21 = v71[0];
        v71[0] = v22;
        uint64_t v23 = v21[1];
        v21[1] = v72;
        uint64_t v72 = v23;
        sub_100016EAC((uint64_t)v21);
        sub_100016EAC((uint64_t)v71);
        int v17 = v71[0];
        unsigned __int8 v18 = (uint64_t **)&v72;
      }
      sub_100016B28(v18, v17);
      sub_100013C64((unsigned __int8 **)&v80);
      ++v85;
    }
    if (v79 < 0) {
      operator delete(__p);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
    if (v89 < 0) {
      operator delete(v88);
    }
    if (v87 < 0) {
      operator delete(v86);
    }
    if (!(_BYTE)v90) {
      goto LABEL_28;
    }
    if (v90 == 1)
    {
      if (!v91[2]) {
        goto LABEL_28;
      }
    }
    else if (v90 == 2 && !((v91[1] - *v91) >> 4))
    {
LABEL_28:
      sub_10001059C((long long *)(v2 + 16), (uint64_t)&v92, 0, *(unsigned char *)(v2 + 57), v75);
      uint64_t v25 = (_OWORD *)a2[1];
      unint64_t v24 = a2[2];
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v52 = ((uint64_t)v25 - *a2) >> 4;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60) {
          sub_100028DEC();
        }
        uint64_t v54 = v24 - *a2;
        if (v54 >> 3 > v53) {
          unint64_t v53 = v54 >> 3;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        v84 = a2 + 2;
        uint64_t v56 = (char *)sub_1000171B0(v61, v55);
        uint64_t v57 = (std::__shared_weak_count *)&v56[16 * v52];
        v80 = v56;
        v81 = v57;
        v83 = &v56[16 * v58];
        v57->std::__shared_count = (std::__shared_count)v75[0];
        v75[0] = 0uLL;
        p_shared_weak_owners = &v57->__shared_weak_owners_;
        sub_100014994(a2, &v80);
        uint64_t v59 = a2[1];
        sub_100014B08(&v80);
        uint64_t v60 = (std::__shared_weak_count *)*((void *)&v75[0] + 1);
        a2[1] = v59;
        if (v60) {
          sub_1000147D8(v60);
        }
      }
      else
      {
        *uint64_t v25 = v75[0];
        a2[1] = (uint64_t)(v25 + 1);
      }
LABEL_86:
      sub_100016EAC((uint64_t)&v90);
      sub_100016B28(&v91, v90);
      sub_100016EAC((uint64_t)&v92);
      sub_100016B28(&v93, v92);
      return;
    }
    v70 = &v90;
    sub_100006184((uint64_t *)&v70, (uint64_t)&v80);
    sub_10000626C((uint64_t *)&v70, (uint64_t)v75);
    char v26 = (long long *)(v2 + 16);
    while (!sub_1000205D8((unsigned __int8 **)&v80, (unsigned __int8 **)v75))
    {
      uint64_t v27 = sub_100005DA8((unsigned __int8 **)&v80);
      uint64_t v28 = sub_10001EE40((unsigned __int8 **)&v80);
      for (i = 0; ; i = (uint64_t *)((char *)i + 1))
      {
        unint64_t v30 = *v28;
        if (*v28)
        {
          if (v30 == 1)
          {
            unint64_t v30 = *(void *)(*((void *)v28 + 1) + 16);
          }
          else if (v30 == 2)
          {
            unint64_t v30 = (uint64_t)(*(void *)(*((void *)v28 + 1) + 8) - **((void **)v28 + 1)) >> 4;
          }
          else
          {
            unint64_t v30 = 1;
          }
        }
        if ((unint64_t)i >= v30) {
          break;
        }
        unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
        v69 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        sub_100016A10((uint64_t)&v68, (uint64_t)&v92);
        if (*(unsigned char *)sub_100012450((uint64_t)v28, (uint64_t)i))
        {
          v66[0] = 6;
          unint64_t v67 = i;
          sub_100016EAC((uint64_t)v66);
          sub_100016EAC((uint64_t)v66);
          std::exception v31 = sub_10001DA78((unsigned __int8 *)&v68, (const void **)v27);
          sub_100016EAC((uint64_t)v66);
          unsigned __int8 v32 = *(unsigned char *)v31;
          *(unsigned char *)std::exception v31 = v66[0];
          v66[0] = v32;
          std::string v33 = (uint64_t *)v31[1];
          v31[1] = (uint64_t)v67;
          unint64_t v67 = v33;
          sub_100016EAC((uint64_t)v31);
          sub_100016EAC((uint64_t)v66);
          sub_100016B28(&v67, v66[0]);
          uint64_t v34 = sub_100012450((uint64_t)v28, (uint64_t)i);
          sub_100016A10((uint64_t)v64, v34);
          if (*(char *)(v27 + 23) >= 0) {
            size_t v35 = *(unsigned __int8 *)(v27 + 23);
          }
          else {
            size_t v35 = *(void *)(v27 + 8);
          }
          memset(v96, 170, 24);
          sub_100044D88((uint64_t)v96, v35 + 6);
          if (SHIBYTE(v96[2]) >= 0) {
            long long v36 = v96;
          }
          else {
            long long v36 = (const void **)v96[0];
          }
          if (v35)
          {
            if (*(char *)(v27 + 23) >= 0) {
              long long v37 = (const void *)v27;
            }
            else {
              long long v37 = *(const void **)v27;
            }
            memmove(v36, v37, v35);
          }
          strcpy((char *)v36 + v35, "_value");
          long long v38 = sub_10001DA78((unsigned __int8 *)&v68, v96);
          sub_100016EAC((uint64_t)v64);
          unsigned __int8 v39 = *(unsigned char *)v38;
          *(unsigned char *)long long v38 = v64[0];
          v64[0] = v39;
          long long v40 = (uint64_t *)v38[1];
          v38[1] = (uint64_t)v65;
          uint64_t v65 = v40;
          sub_100016EAC((uint64_t)v38);
          if (SHIBYTE(v96[2]) < 0) {
            operator delete((void *)v96[0]);
          }
          sub_100016EAC((uint64_t)v64);
          sub_100016B28(&v65, v64[0]);
          sub_10001059C(v26, (uint64_t)&v68, 0, *(unsigned char *)(v62 + 57), &v63);
          unint64_t v42 = (_OWORD *)a2[1];
          unint64_t v41 = a2[2];
          if ((unint64_t)v42 >= v41)
          {
            uint64_t v43 = ((uint64_t)v42 - *a2) >> 4;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 60) {
              sub_100028DEC();
            }
            uint64_t v45 = v41 - *a2;
            if (v45 >> 3 > v44) {
              unint64_t v44 = v45 >> 3;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            v96[4] = a2 + 2;
            char v47 = (char *)sub_1000171B0(v61, v46);
            char v48 = &v47[16 * v43];
            v96[0] = v47;
            v96[1] = v48;
            v96[3] = &v47[16 * v49];
            *(_OWORD *)char v48 = v63;
            long long v63 = 0uLL;
            v96[2] = v48 + 16;
            sub_100014994(a2, v96);
            uint64_t v50 = a2[1];
            sub_100014B08((void **)v96);
            BOOL v51 = (std::__shared_weak_count *)*((void *)&v63 + 1);
            a2[1] = v50;
            if (v51) {
              sub_1000147D8(v51);
            }
          }
          else
          {
            _OWORD *v42 = v63;
            a2[1] = (uint64_t)(v42 + 1);
          }
        }
        sub_100016EAC((uint64_t)&v68);
        sub_100016B28(&v69, v68);
      }
      sub_100013C64((unsigned __int8 **)&v80);
      ++v85;
    }
    if (v79 < 0) {
      operator delete(__p);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
    if (v89 < 0) {
      operator delete(v88);
    }
    if (v87 < 0) {
      operator delete(v86);
    }
    goto LABEL_86;
  }
  if (*(unsigned char *)(v2 + 56))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v2 + 8);
    v80 = *(void **)v2;
    v81 = v9;
    if (v9
      && (atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed), unint64_t v10 = a2[1], v10 < a2[2]))
    {
      sub_10000FB4C((void *)a2[1], &v80);
      uint64_t v11 = v10 + 16;
      a2[1] = v10 + 16;
    }
    else
    {
      uint64_t v11 = sub_10000FA30(a2, &v80);
    }
    a2[1] = v11;
    if (v81) {
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_10000F728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  sub_100014B08((void **)&a43);
  if (a30) {
    sub_1000147D8(a30);
  }
  sub_100028D64((uint64_t **)(v44 - 184));
  sub_100028D64((uint64_t **)(v44 - 168));
  sub_100014738((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F860(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v3 + 4), __s) > 0)
  {
    uint64_t v2 = v3;
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v3 + 4), __s) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  unsigned __int8 v7 = v3;
  if (*v3)
  {
    unsigned __int8 v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), __s);
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        uint64_t v9 = (uint64_t *)v6;
        unsigned __int8 v7 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), __s);
      uint64_t v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        uint64_t v12 = (uint64_t *)v10;
        uint64_t v2 = (void *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        unsigned __int8 v7 = v14;
      }
      while (!v15);
    }
    ++result;
    unsigned __int8 v7 = v14;
  }
  while (v14 != v2);
  return result;
}

void sub_10000F988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000214C4;
  block[3] = &unk_1001525A0;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

uint64_t sub_10000FA30(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[16 * v4];
  uint64_t v16 = &v10[16 * v9];
  sub_10000FB4C(v14, a2);
  BOOL v15 = v14 + 16;
  sub_100014994(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100014B08(&v13);
  return v11;
}

void sub_10000FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void *sub_10000FB4C(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10002AEC0();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

BOOL sub_10000FB90(uint64_t a1)
{
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = sub_10000FBE0(*(void *)(a1 + 32));
  return v2.__d_.__rep_ >= v3 || v2.__d_.__rep_ < v3 - 86400000000;
}

uint64_t sub_10000FBE0(uint64_t a1)
{
  uint64_t v6 = a1;
  std::chrono::system_clock::time_point v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000278F4;
  v7[3] = &unk_100151B90;
  v7[4] = a1;
  v7[5] = &v6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = objc_retainBlock(v7);
  uint64_t v10 = 0;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000278B8;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  uint64_t v4 = v10;

  return v4;
}

void sub_10000FD10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

id sub_10000FD1C(id *a1)
{
  return *a1;
}

void sub_10000FD24(void *a1, uint64_t a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = sub_100010388(a1 + 16, (unsigned __int8 *)(*(void *)a2 + 16));
  if (v3)
  {
    uint64_t v4 = (void *)*((void *)v3 + 5);
    unint64_t v5 = (void *)*((void *)v3 + 6);
    if (v4 != v5)
    {
      int v6 = 0;
      do
      {
        uint64_t v7 = (std::__shared_weak_count *)v4[1];
        if (v7)
        {
          id v8 = std::__shared_weak_count::lock(v7);
          if (v8)
          {
            unint64_t v9 = v8;
            if (*v4)
            {
              (*(void (**)(void, uint64_t))(*(void *)*v4 + 16))(*v4, a2);
              ++v6;
            }
            sub_1000147D8(v9);
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
      if (v6) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v10 = a1[21];
  uint64_t v40 = a1[22];
  if (v10 != v40)
  {
    int v39 = 0;
    do
    {
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v53 = v11;
      v52[6] = 0xAAAAAAAAAAAAAA00;
      v52[3] = 0xAAAAAAAAAAAAAAAALL;
      v52[4] = 0;
      v52[5] = 0;
      v52[7] = 0;
      v52[8] = 0;
      LOBYTE(v53) = 0;
      BYTE8(v53) = 0;
      uint64_t v54 = 0;
      *(_OWORD *)BOOL v51 = 0u;
      memset(v52, 0, 25);
      int v12 = *(char *)(*(void *)a2 + 39);
      if (v12 >= 0) {
        uint64_t v13 = *(void *)a2 + 16;
      }
      else {
        uint64_t v13 = *(void *)(*(void *)a2 + 16);
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(*(void *)a2 + 39);
      }
      else {
        uint64_t v14 = *(void *)(*(void *)a2 + 24);
      }
      int v15 = sub_100054258(v13, v13 + v14, (uint64_t)v51, v10, 0);
      uint64_t v16 = v51[0];
      if (v15 && 0xAAAAAAAAAAAAAAABLL * (((char *)v51[1] - (char *)v51[0]) >> 3) >= 2)
      {
        unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v50 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        sub_100016A10((uint64_t)&v49, *(void *)a2 + 40);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[1] - (char *)v51[0]) >> 3) >= 2)
        {
          unint64_t v17 = 1;
          do
          {
            sub_100048A34(v51, v17, &__p);
            sub_10001C898((uint64_t)v47, (uint64_t)&__p);
            sub_100015438(&v43, "_extract");
            std::to_string(&v42, v17);
            if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned __int8 v18 = &v42;
            }
            else {
              unsigned __int8 v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
            }
            if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v42.__r_.__value_.__l.__size_;
            }
            uint64_t v20 = std::string::append(&v43, (const std::string::value_type *)v18, size);
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            std::string::size_type v56 = v20->__r_.__value_.__r.__words[2];
            long long buf = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            unsigned __int8 v22 = sub_10001DA78((unsigned __int8 *)&v49, (const void **)&buf);
            sub_100016EAC((uint64_t)v47);
            char v23 = *(unsigned char *)v22;
            *(unsigned char *)unsigned __int8 v22 = v47[0];
            v47[0] = v23;
            unint64_t v24 = (uint64_t *)v22[1];
            v22[1] = (uint64_t)v48;
            char v48 = v24;
            sub_100016EAC((uint64_t)v22);
            if (SHIBYTE(v56) < 0) {
              operator delete((void *)buf);
            }
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v42.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v43.__r_.__value_.__l.__data_);
            }
            sub_100016EAC((uint64_t)v47);
            sub_100016B28(&v48, v47[0]);
            if (v46 < 0) {
              operator delete(__p);
            }
            ++v17;
          }
          while (v17 < 0xAAAAAAAAAAAAAAABLL * (((char *)v51[1] - (char *)v51[0]) >> 3));
        }
        uint64_t v25 = *(void *)a2;
        sub_100015438(&__p, "value");
        LODWORD(buf) = 0;
        int v26 = sub_100048A84((char *)(v25 + 40), (const void **)&__p, (unsigned int *)&buf);
        if (v46 < 0) {
          operator delete(__p);
        }
        if (v26 >= 1)
        {
          uint64_t v27 = qword_10015EF28;
          if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEBUG))
          {
            sub_100007460((uint64_t)&v49, -1, 0x20u, 0, 1, &__p);
            p_p = &__p;
            if (v46 < 0) {
              p_p = __p;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = p_p;
            _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[EventBroker] matched event %s", (uint8_t *)&buf, 0xCu);
            if (v46 < 0) {
              operator delete(__p);
            }
          }
        }
        uint64_t v28 = *(std::__shared_weak_count **)(v10 + 72);
        if (v28)
        {
          __int16 v29 = std::__shared_weak_count::lock(v28);
          if (v29)
          {
            unint64_t v30 = v29;
            uint64_t v31 = *(void *)(v10 + 64);
            if (v31)
            {
              sub_10008D90C((long long *)(*(void *)a2 + 16), (uint64_t)&v49, &__p);
              (*(void (**)(uint64_t, void **))(*(void *)v31 + 16))(v31, &__p);
              if (v45) {
                sub_1000147D8(v45);
              }
              ++v39;
            }
            sub_1000147D8(v30);
          }
        }
        sub_100016EAC((uint64_t)&v49);
        sub_100016B28(&v50, v49);
        uint64_t v16 = v51[0];
      }
      if (v16)
      {
        v51[1] = v16;
        operator delete(v16);
      }
      v10 += 80;
    }
    while (v10 != v40);
    int v6 = v39;
    if (v39)
    {
LABEL_59:
      std::string v33 = qword_10015EF28;
      if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEBUG)) {
        sub_1000F9D34(a2, v6, v33);
      }
    }
  }
  uint64_t v34 = (void *)a1[24];
  size_t v35 = (void *)a1[25];
  while (v34 != v35)
  {
    long long v36 = (std::__shared_weak_count *)v34[1];
    if (v36)
    {
      long long v37 = std::__shared_weak_count::lock(v36);
      if (v37)
      {
        long long v38 = v37;
        if (*v34) {
          (*(void (**)(void, uint64_t))(*(void *)*v34 + 16))(*v34, a2);
        }
        sub_1000147D8(v38);
      }
    }
    v34 += 2;
  }
}

void sub_100010294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41)
{
}

unsigned __int8 *sub_100010388(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1000141F4((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_100014470(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_10001048C(long long *a1@<X0>, void *a2@<X8>)
{
  sub_10001200C((uint64_t)v4, 0, 0, 0, 1);
  sub_100010910((uint64_t)v6, a1, (uint64_t)v4, 0, 0);
  sub_10001075C((uint64_t)v6, a2);
  sub_100016EAC((uint64_t)v10);
  sub_100016B28(&v11, v10[0]);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_100016EAC((uint64_t)v4);
  sub_100016B28(&v5, v4[0]);
}

void sub_100010570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_10001059C(long long *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, void *a5@<X8>)
{
  v10[0] = *(unsigned char *)a2;
  long long v11 = *(uint64_t **)(a2 + 8);
  sub_100016EAC(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC((uint64_t)v10);
  sub_100010910((uint64_t)v12, a1, (uint64_t)v10, a3, a4);
  sub_10001075C((uint64_t)v12, a5);
  sub_100016EAC((uint64_t)v16);
  sub_100016B28(&v17, v16[0]);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_100016EAC((uint64_t)v10);
  sub_100016B28(&v11, v10[0]);
}

void sub_1000106B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1000106D4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int8x8_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_1000147D8(v5);
      }
    }
  }
}

void sub_10001075C(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x58uLL);
  sub_1000107D0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1000106D4((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1000107BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000107D0(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001519F8;
  char v4 = -86;
  sub_100010874((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100010860(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100010874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int8x8_t v5 = (unsigned char *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_100017424(v5, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)int8x8_t v5 = v6;
  }
  char v8 = *(unsigned char *)(a3 + 40);
  uint64_t v7 = a3 + 40;
  *(unsigned char *)(a2 + 40) = v8;
  uint64_t v9 = a2 + 40;
  *(void *)(v9 + 8) = *(void *)(v7 + 8);
  sub_100016EAC(v7);
  *(unsigned char *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  uint64_t result = sub_100016EAC(v9);
  *(_WORD *)(v9 + 16) = *(_WORD *)(v7 + 16);
  return result;
}

void sub_1000108F8(_Unwind_Exception *exception_object)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100010910(uint64_t a1, long long *a2, uint64_t a3, char a4, char a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = a1 + 16;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424((unsigned char *)v9, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v9 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)a3;
  *(void *)(a1 + 48) = *(void *)(a3 + 8);
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  sub_100016EAC(a1 + 40);
  *(unsigned char *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 57) = a5;
  return a1;
}

void sub_1000109B0(_Unwind_Exception *exception_object)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1000109C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  long long v26 = v5;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 32) + 32))(&v26);
  if (BYTE8(v28))
  {
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (!BYTE8(v28)) {
      goto LABEL_10;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (*((uint64_t *)&v27 + 1) >= 1) {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = v27 + *((void *)&v27 + 1);
    }
    if (v6.__d_.__rep_ < v7)
    {
      if ((_BYTE)v26)
      {
        sub_1000168C0((uint64_t)v50, a2);
        BOOL v51 = v50;
        char v52 = 1;
        uint64_t v54 = sub_100016A10((uint64_t)v53, (uint64_t)&v26);
        char v55 = 1;
        sub_10001200C((uint64_t)v35, (uint64_t)v50, 2, 1, 2);
        long long v36 = v35;
        char v37 = 1;
        sub_10001DD00((uint64_t)v44, "expiresAt");
        uint64_t v45 = v44;
        char v46 = 1;
        if (BYTE8(v28))
        {
          if (*((uint64_t *)&v27 + 1) < 1) {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = v27 + *((void *)&v27 + 1);
          }
        }
        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = 0x8000000000000000;
        }
        sub_10001C968(v8, (uint64_t)"%Y-%m-%dT%TZ");
        uint64_t v48 = sub_10001C898((uint64_t)v47, (uint64_t)__p);
        char v49 = 1;
        sub_10001200C((uint64_t)v38, (uint64_t)v44, 2, 1, 2);
        int v39 = v38;
        char v40 = 1;
        sub_10001200C(a3, (uint64_t)v35, 2, 1, 2);
        for (uint64_t i = 0; i != -64; i -= 32)
        {
          sub_100016EAC((uint64_t)&v38[i]);
          sub_100016B28((uint64_t **)&v38[i + 8], v38[i]);
        }
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          sub_100016EAC((uint64_t)&v47[j]);
          sub_100016B28((uint64_t **)&v47[j + 8], v47[j]);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          sub_100016EAC((uint64_t)&v53[k]);
          sub_100016B28((uint64_t **)&v53[k + 8], v53[k]);
        }
      }
      else
      {
        sub_10004595C((uint64_t)v50, "name");
        BOOL v51 = v50;
        char v52 = 1;
        uint64_t v54 = sub_1000168C0((uint64_t)v53, a2);
        char v55 = 1;
        sub_10001200C((uint64_t)v35, (uint64_t)v50, 2, 1, 2);
        long long v36 = v35;
        char v37 = 1;
        sub_10005EA30((uint64_t)v44, "error");
        uint64_t v45 = v44;
        char v46 = 1;
        uint64_t v48 = sub_100030238((uint64_t)v47, &off_10015E590);
        char v49 = 1;
        sub_10001200C((uint64_t)v38, (uint64_t)v44, 2, 1, 2);
        int v39 = v38;
        char v40 = 1;
        sub_10001DD00((uint64_t)__p, "expiresAt");
        unint64_t v30 = __p;
        char v31 = 1;
        if (BYTE8(v28))
        {
          if (*((uint64_t *)&v27 + 1) < 1) {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = v27 + *((void *)&v27 + 1);
          }
        }
        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = 0x8000000000000000;
        }
        sub_10001C968(v15, (uint64_t)"%Y-%m-%dT%TZ");
        uint64_t v33 = sub_10001C898((uint64_t)v32, (uint64_t)&v24);
        char v34 = 1;
        sub_10001200C((uint64_t)v41, (uint64_t)__p, 2, 1, 2);
        std::string v42 = v41;
        char v43 = 1;
        sub_10001200C(a3, (uint64_t)v35, 3, 1, 2);
        for (uint64_t m = 0; m != -96; m -= 32)
        {
          sub_100016EAC((uint64_t)&v41[m]);
          sub_100016B28((uint64_t **)&v41[m + 8], v41[m]);
        }
        for (uint64_t n = 0; n != -64; n -= 32)
        {
          sub_100016EAC((uint64_t)&v32[n]);
          sub_100016B28((uint64_t **)&v32[n + 8], v32[n]);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        for (iuint64_t i = 0; ii != -64; ii -= 32)
        {
          sub_100016EAC((uint64_t)&v47[ii]);
          sub_100016B28((uint64_t **)&v47[ii + 8], v47[ii]);
        }
        for (juint64_t j = 0; jj != -64; jj -= 32)
        {
          sub_100016EAC((uint64_t)&v53[jj]);
          sub_100016B28((uint64_t **)&v53[jj + 8], v53[jj]);
        }
      }
    }
    else
    {
LABEL_10:
      sub_10004595C((uint64_t)v50, "name");
      BOOL v51 = v50;
      char v52 = 1;
      uint64_t v54 = sub_1000168C0((uint64_t)v53, a2);
      char v55 = 1;
      sub_10001200C((uint64_t)v35, (uint64_t)v50, 2, 1, 2);
      long long v36 = v35;
      char v37 = 1;
      sub_10005EA30((uint64_t)v44, "error");
      uint64_t v45 = v44;
      char v46 = 1;
      sub_100015438(__p, "CacheEntryExpired");
      uint64_t v48 = sub_10001C898((uint64_t)v47, (uint64_t)__p);
      char v49 = 1;
      sub_10001200C((uint64_t)v38, (uint64_t)v44, 2, 1, 2);
      int v39 = v38;
      char v40 = 1;
      sub_10001200C(a3, (uint64_t)v35, 2, 1, 2);
      for (uint64_t kk = 0; kk != -64; kk -= 32)
      {
        sub_100016EAC((uint64_t)&v38[kk]);
        sub_100016B28((uint64_t **)&v38[kk + 8], v38[kk]);
      }
      for (uint64_t mm = 0; mm != -64; mm -= 32)
      {
        sub_100016EAC((uint64_t)&v47[mm]);
        sub_100016B28((uint64_t **)&v47[mm + 8], v47[mm]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      for (uint64_t nn = 0; nn != -64; nn -= 32)
      {
        sub_100016EAC((uint64_t)&v53[nn]);
        sub_100016B28((uint64_t **)&v53[nn + 8], v53[nn]);
      }
    }
  }
  else
  {
    sub_10004595C((uint64_t)v50, "name");
    BOOL v51 = v50;
    char v52 = 1;
    uint64_t v54 = sub_1000168C0((uint64_t)v53, a2);
    char v55 = 1;
    sub_10001200C((uint64_t)v35, (uint64_t)v50, 2, 1, 2);
    long long v36 = v35;
    char v37 = 1;
    sub_10005EA30((uint64_t)v44, "error");
    uint64_t v45 = v44;
    char v46 = 1;
    sub_100015438(__p, "CacheEntryAbsent");
    uint64_t v48 = sub_10001C898((uint64_t)v47, (uint64_t)__p);
    char v49 = 1;
    sub_10001200C((uint64_t)v38, (uint64_t)v44, 2, 1, 2);
    int v39 = v38;
    char v40 = 1;
    sub_10001200C(a3, (uint64_t)v35, 2, 1, 2);
    for (uint64_t i1 = 0; i1 != -64; i1 -= 32)
    {
      sub_100016EAC((uint64_t)&v38[i1]);
      sub_100016B28((uint64_t **)&v38[i1 + 8], v38[i1]);
    }
    for (uint64_t i2 = 0; i2 != -64; i2 -= 32)
    {
      sub_100016EAC((uint64_t)&v47[i2]);
      sub_100016B28((uint64_t **)&v47[i2 + 8], v47[i2]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    for (uint64_t i3 = 0; i3 != -64; i3 -= 32)
    {
      sub_100016EAC((uint64_t)&v53[i3]);
      sub_100016B28((uint64_t **)&v53[i3 + 8], v53[i3]);
    }
  }
  return sub_10001DE9C((uint64_t **)&v26);
}

void sub_100011150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  for (uint64_t i = 64; i != -32; i -= 32)
    sub_10005E9FC((uint64_t **)(v34 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    sub_10005E9FC((uint64_t **)((char *)&a23 + j));
  if (a15 < 0) {
    operator delete(__p);
  }
  for (uint64_t k = 32; k != -32; k -= 32)
    sub_10005E9FC((uint64_t **)(v35 - 184 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    sub_10005E9FC((uint64_t **)(v35 - 120 + m));
  sub_10001DE9C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100011584(uint64_t *a1, uint64_t a2, long long *a3)
{
  (*(void (**)(uint64_t *))(*a1 + 64))(a1);
  long long v5 = (void *)(*(void *)a3 + 16);
  size_t v6 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  if (*(char *)(*(void *)a3 + 39) < 0)
  {
    if (v6 != *(void *)(*(void *)a3 + 24)) {
      goto LABEL_11;
    }
    if (v6 == -1) {
      goto LABEL_49;
    }
    long long v5 = (void *)*v5;
  }
  else
  {
    if (v6 != *(unsigned __int8 *)(*(void *)a3 + 39)) {
      goto LABEL_11;
    }
    if (v6 == -1) {
LABEL_49:
    }
      sub_10002B720();
  }
  if (!memcmp(v5, "com.apple.coreanalytics.heartbeat.2hours", v6))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v7 = qword_10015EFA0;
    if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform] Applying aggregation for %{public}s.", buf, 0xCu);
    }
  }
LABEL_11:
  if (!sub_100012B9C(a1) && !sub_100012D20((uint64_t)a1, (unsigned char *)a1[3], a3))
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    memset(v29, 170, sizeof(v29));
    sub_100011C74(a1[15], buf);
    sub_100011AA4((uint64_t)a1, (uint64_t *)buf, a3, v29);
    *(void *)unint64_t v30 = buf;
    sub_100016F68((void ***)v30);
    memset(v28, 170, sizeof(v28));
    sub_100011C74(a1[16], buf);
    sub_100011AA4((uint64_t)a1, (uint64_t *)buf, a3, v28);
    *(void *)unint64_t v30 = buf;
    sub_100016F68((void ***)v30);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = (void *)(*(void *)a3 + 16);
    size_t v16 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if (*(char *)(*(void *)a3 + 39) < 0)
    {
      if (v16 == *(void *)(*(void *)a3 + 24))
      {
        if (v16 == -1) {
          goto LABEL_50;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v15 = (void *)*v15;
LABEL_26:
        if (!memcmp(v15, "com.apple.coreanalytics.heartbeat.2hours", v16))
        {
          unint64_t v17 = qword_10015EFA0;
          if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
          {
            sub_100007460(a1[15], -1, 0x20u, 0, 1, v30);
            int v18 = SHIBYTE(v33);
            uint64_t v19 = *(unsigned char **)v30;
            sub_100007460(a1[16], -1, 0x20u, 0, 1, __p);
            uint64_t v20 = v30;
            if (v18 < 0) {
              uint64_t v20 = v19;
            }
            if (v27 >= 0) {
              long long v21 = __p;
            }
            else {
              long long v21 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = "com.apple.coreanalytics.heartbeat.2hours";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v20;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&unsigned char buf[24] = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform: %{public}s] Spec: Dimensions: %s, Measures: %s", buf, 0x20u);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v33) < 0) {
              operator delete(*(void **)v30);
            }
          }
          *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf[16] = v22;
          long long v36 = v22;
          *(_OWORD *)long long buf = v22;
          sub_1000C032C(v29, v28, (uint64_t)buf);
          char v23 = qword_10015EFA0;
          if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v24 = &buf[24];
            char v25 = buf;
            if (buf[23] < 0) {
              char v25 = *(unsigned char **)buf;
            }
            if (v36 < 0) {
              unint64_t v24 = *(unsigned char **)&buf[24];
            }
            *(_DWORD *)unint64_t v30 = 136446722;
            *(void *)&v30[4] = "com.apple.coreanalytics.heartbeat.2hours";
            __int16 v31 = 2080;
            unsigned __int8 v32 = v25;
            __int16 v33 = 2080;
            uint64_t v34 = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform: %{public}s] Values: Dimensions: %s, Measures: %s", v30, 0x20u);
          }
          if (SHIBYTE(v36) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
    else if (v16 == *(unsigned __int8 *)(*(void *)a3 + 39))
    {
      if (v16 == -1) {
LABEL_50:
      }
        sub_10002B720();
      goto LABEL_26;
    }
    sub_10001B6A8((uint64_t)a1, (uint64_t *)a3, v29, v28);
    *(void *)long long buf = v28;
    sub_100016F68((void ***)buf);
    *(void *)long long buf = v29;
    sub_100016F68((void ***)buf);
    return 1;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8 = qword_10015EF48;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    uint64_t v11 = *(void *)a3;
    uint64_t v12 = (void *)(*(void *)a3 + 16);
    if (*(char *)(v11 + 39) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    BOOL v13 = sub_100012B9C(a1);
    uint64_t v14 = "Config";
    if (v13) {
      uint64_t v14 = "Budget Exceeded";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform] Ignoring event %s. Reason: %s", buf, 0x16u);
    return 0;
  }
  return result;
}

void sub_100011A8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100011AA4(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  memset(a4, 170, 24);
  sub_10001200C((uint64_t)v10, 0, 0, 0, 2);
  sub_100011C74((uint64_t)v10, a4);
  sub_100016EAC((uint64_t)v10);
  sub_100016B28(&v11, v10[0]);
  sub_1000170F0(a4, (a2[1] - *a2) >> 4);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  for (uint64_t i = a4; v8 != v9; v8 += 16)
  {
    sub_1000131E4(a1, v8, a3, (uint64_t)v10);
    sub_100011BF4(&i, (uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
  }
}

void sub_100011BC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

uint64_t **sub_100011BF4(uint64_t **a1, uint64_t a2)
{
  char v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    uint64_t v6 = sub_100019524(*a1, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = *(unsigned char *)a2;
    *(void *)(v5 + 8) = *(void *)(a2 + 8);
    sub_100016EAC(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
  }
  v4[1] = v6;
  return a1;
}

uint64_t sub_100011C74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_100011E60(a1, (uint64_t)a2);
}

void sub_100011CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_100011CF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_100012330((void **)a1);
    if (a4 >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100018368((void *)a1, v12);
    uint64_t result = sub_1000183AC(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (*(void *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 16 * v14;
    sub_10001236C((uint64_t)&v17, a2, v15, v9);
    uint64_t result = sub_1000183AC(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  sub_10001236C((uint64_t)&v18, a2, a3, v9);
  return sub_100016AC4(a1, v16);
}

void sub_100011E4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100011E54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100011E60(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (char *)result;
  if (*(unsigned char *)result != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)sub_100029400(v2);
    sub_100015438(&v12, v9);
    uint64_t v10 = std::string::insert(&v12, 0, "type must be array, but is ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(302, (uint64_t)&v13, exception);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = *(uint64_t **)(result + 8);
  if (v3 != (uint64_t *)a2)
  {
    uint64_t v4 = v3[1];
    unint64_t v5 = (v4 - *v3) >> 4;
    uint64_t v7 = *v3;
    return sub_100011CF0(a2, v7, v4, v5);
  }
  return result;
}

void sub_100011FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10001200C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    int v13 = 1;
    if (a4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 32 * a3;
  long long v11 = (unsigned char **)(a2 + 16);
  while (1)
  {
    std::string v12 = *v11;
    if (**v11 != 2
      || *(void *)(*((void *)v12 + 1) + 8) - **((void **)v12 + 1) != 32
      || *(unsigned char *)sub_100012450((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10) {
      goto LABEL_7;
    }
  }
  int v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2) {
      int v14 = 0;
    }
    else {
      int v14 = v13;
    }
    if (a5 != 1) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      sub_100015438(v20, "cannot create object from initializer list");
      sub_100029288(301, (uint64_t)v20, exception);
    }
    int v13 = v14;
  }
LABEL_17:
  uint64_t v15 = a2 + 32 * a3;
  if (v13)
  {
    *(unsigned char *)a1 = 1;
    uint64_t v16 = operator new(0x18uLL);
    _OWORD v16[2] = 0;
    v16[1] = 0;
    *uint64_t v16 = v16 + 1;
    *(void *)(a1 + 8) = v16;
    sub_10001C06C(a2, v15, a1);
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v19 = v15;
    v20[0] = a2;
    *(void *)(a1 + 8) = sub_10001220C(v20, &v19);
  }
  sub_100016EAC(a1);
  return a1;
}

void sub_1000121CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void *sub_10001220C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = (*a2 - *a1) >> 5;
  v4[1] = 0;
  void v4[2] = 0;
  *uint64_t v4 = 0;
  sub_100012278(v4, v5, v6, v7);
  return v4;
}

void sub_100012264(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100012278(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100018368(result, a4);
    uint64_t result = (void *)sub_10001C2C4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100012310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_100016F68((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100012330(void **a1)
{
  if (*a1)
  {
    sub_10001690C(a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10001236C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_100016A10((uint64_t)v10, v5);
    sub_100016EAC((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    uint64_t v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    long long v11 = v8;
    sub_100016EAC(a4);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
    v5 += 16;
    a4 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_100012450(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0, "cannot use operator[] with a numeric argument with ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(305, (uint64_t)&v9, exception);
  }
  return **(void **)(a1 + 8) + 16 * a2;
}

void sub_10001254C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1000125AC(uint64_t a1)
{
  sub_1000126F0(a1);
  sub_100015438(__p, "initialize statistics");
  v4[0] = off_100157E98;
  v4[1] = a1;
  v4[3] = v4;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v4);
  sub_10001266C(v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100012660(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_10001266C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000126F0(uint64_t a1)
{
  sub_100015438(__p, "initialize metadata");
  v4[0] = off_100157030;
  v4[1] = a1;
  v4[3] = v4;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v4);
  sub_10001266C(v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000127A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000127AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
}

void sub_100012848(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, int a17, __int16 a18, char a19, char a20,uint64_t a21,long long a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    char v25 = __cxa_begin_catch(a1);
    uint64_t v26 = qword_10015EF48;
    if (!os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_FAULT)) {
      goto LABEL_24;
    }
    p_p = &__p;
    sub_1000A5458(v23, &__p);
    if (a15 < 0) {
      p_p = __p;
    }
    if (*(char *)(v22 + 23) < 0) {
      uint64_t v22 = *(void *)v22;
    }
    uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
    uint64_t v29 = sub_100024914(v23);
    if (*(char *)(v29 + 23) >= 0) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = *(void *)v29;
    }
    LODWORD(buf) = 136446978;
    *(void *)((char *)&buf + 4) = p_p;
    WORD6(buf) = 2082;
    *(void *)((char *)&buf + 14) = v22;
    a19 = 34;
    a20 = 8;
    a21 = v28;
    LOWORD(a22) = 2082;
    *(void *)((char *)&a22 + 2) = v30;
    __int16 v31 = "[%{public}sTransform] ERROR: Exception (json: %{public}s). Failed to %{public}s for xform: %{public}s";
  }
  else
  {
    unsigned __int8 v32 = __cxa_begin_catch(a1);
    uint64_t v26 = qword_10015EF48;
    BOOL v33 = os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_FAULT);
    if (a2 != 2)
    {
      if (!v33) {
        goto LABEL_24;
      }
      char v40 = &__p;
      sub_1000A5458(v23, &__p);
      if (a15 < 0) {
        char v40 = __p;
      }
      if (*(char *)(v22 + 23) < 0) {
        uint64_t v22 = *(void *)v22;
      }
      uint64_t v41 = sub_100024914(v23);
      if (*(char *)(v41 + 23) >= 0) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = *(void *)v41;
      }
      LODWORD(buf) = 136446722;
      *(void *)((char *)&buf + 4) = v40;
      WORD6(buf) = 2082;
      *(void *)((char *)&buf + 14) = v22;
      a19 = 34;
      a20 = 8;
      a21 = v42;
      __int16 v31 = "[%{public}sTransform] ERROR: Exception encountered. Failed to %{public}s for xform: %{public}s";
      long long v38 = v26;
      uint32_t v39 = 32;
      goto LABEL_33;
    }
    if (!v33) {
      goto LABEL_24;
    }
    uint64_t v34 = &__p;
    sub_1000A5458(v23, &__p);
    if (a15 < 0) {
      uint64_t v34 = __p;
    }
    uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
    if (*(char *)(v22 + 23) < 0) {
      uint64_t v22 = *(void *)v22;
    }
    uint64_t v36 = sub_100024914(v23);
    if (*(char *)(v36 + 23) >= 0) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = *(void *)v36;
    }
    LODWORD(buf) = 136446978;
    *(void *)((char *)&buf + 4) = v34;
    WORD6(buf) = 2082;
    *(void *)((char *)&buf + 14) = v35;
    a19 = 34;
    a20 = 8;
    a21 = v22;
    LOWORD(a22) = 2082;
    *(void *)((char *)&a22 + 2) = v37;
    __int16 v31 = "[%{public}sTransform] ERROR: Exception (stl: %{public}s). Failed to %{public}s for xform: %{public}s";
  }
  long long v38 = v26;
  uint32_t v39 = 42;
LABEL_33:
  _os_log_fault_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, v31, (uint8_t *)&buf, v39);
  if (a15 < 0) {
    operator delete(__p);
  }
LABEL_24:
  __cxa_end_catch();
  JUMPOUT(0x10001280CLL);
}

uint64_t sub_100012AFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 40) + 72);
    uint64_t v4 = sub_100024914(v1);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 88))(v3, v4);
    *(_DWORD *)(v1 + 100) = result;
    *(unsigned char *)(v1 + 104) = 1;
    *(_DWORD *)(v1 + 108) = HIDWORD(result);
    *(unsigned char *)(v1 + 112) = 1;
  }
  return result;
}

BOOL sub_100012B9C(_DWORD *a1)
{
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1)) {
    return a1[25] >= a1[24];
  }
  uint64_t v3 = qword_10015EF48;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_100101AEC((uint64_t)a1, v3);
    return 0;
  }
  return result;
}

BOOL sub_100012C28(uint64_t a1)
{
  BOOL result = sub_100012C5C(a1);
  if (result) {
    return *(unsigned char *)(a1 + 160) != 0;
  }
  return result;
}

BOOL sub_100012C5C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 104) && *(unsigned char *)(a1 + 112) != 0;
}

void sub_100012C80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v1 + 160))
  {
    memset(v2, 0, sizeof(v2));
    sub_10001EC90(v1 + 136, (uint64_t)v2);
    uint64_t v3 = (void **)v2;
    sub_10001D120(&v3);
  }
}

void sub_100012D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_10001D120(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100012D20(uint64_t a1, unsigned char *a2, long long *a3)
{
  if (*a2 == 2)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v6;
    v16[1] = v6;
    sub_1000136C8(v16, (uint64_t)a2);
    sub_100014064((unsigned __int8 **)v16);
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[0] = v7;
    v14[1] = v7;
    sub_1000136C8(v14, (uint64_t)a2);
    sub_100013648((unsigned __int8 **)v14);
    while (!sub_100013964((unsigned __int8 **)v16, (unsigned __int8 **)v14))
    {
      std::string v8 = sub_100013AAC((unsigned __int8 **)v16);
      long long v21 = "ignoreIf";
      unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v19[0] = v9;
      v19[1] = v9;
      sub_1000135DC((uint64_t)v8, &v21, (uint64_t)v19);
      memset(&v18[1], 0, 24);
      v18[0] = v8;
      v18[4] = (unsigned __int8 *)0x8000000000000000;
      sub_100013648(v18);
      if (sub_100013964((unsigned __int8 **)v19, v18))
      {
        std::string::size_type v10 = (unsigned char *)sub_1000155C8();
        if (!v10) {
          goto LABEL_9;
        }
      }
      else
      {
        std::string::size_type v10 = sub_100013AAC((unsigned __int8 **)v19);
      }
      if (*v10 == 2)
      {
        *(void *)&v19[0] = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v19[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
        sub_10001467C(*(void ***)(*(void *)(a1 + 40) + 24), a3, v10, (uint64_t)v19);
        uint64_t v11 = 1;
        char v12 = sub_1000A70EC((unsigned __int8 *)v19, 1u);
        sub_100016EAC((uint64_t)v19);
        sub_100016B28((uint64_t **)v19 + 1, LOBYTE(v19[0]));
        if (v12) {
          return v11;
        }
      }
LABEL_9:
      sub_100013C64((unsigned __int8 **)v16);
    }
  }
  return 0;
}

void sub_100012EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100015438(&a28, "IgnoreIfError");
    sub_100015438(&__p, "ignoreIf");
    if (a2 == 2) {
      sub_1000A5508(v34, (uint64_t)&a28, (uint64_t)&__p, v33);
    }
    else {
      sub_1000A5974(v34, (uint64_t)&a28, (uint64_t)&__p, v33);
    }
    if (a25 < 0) {
      operator delete(__p);
    }
    if (a33 < 0) {
      operator delete(a28);
    }
    __cxa_end_catch();
    JUMPOUT(0x100012EB4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100013020@<X0>(char *a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v11 = (char *)sub_100029400(a1);
    sub_100015438(v14, v11);
    char v12 = std::string::insert((std::string *)v14, 0, "cannot use value() with ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&long long v17 = *((void *)&v12->__r_.__value_.__l + 2);
    long long v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v16, exception);
  }
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = v7;
  long long v17 = v7;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v16);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v8;
  v14[1] = v8;
  sub_1000136C8(v14, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v14);
  if (!sub_100013964((unsigned __int8 **)&v16, (unsigned __int8 **)v14)) {
    a3 = sub_100013AAC((unsigned __int8 **)&v16);
  }
  return sub_100016A10(a4, (uint64_t)a3);
}

void sub_10001317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_1000131E4(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  v23[0] = "expression";
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v8;
  long long v28 = v8;
  sub_1000135DC(a2, v23, (uint64_t)&v27);
  long long v24 = (unint64_t)a2;
  long long v25 = 0uLL;
  unint64_t v26 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v24);
  if (sub_100013964((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    long long v9 = (unsigned char *)sub_1000155C8();
    if (!v9) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v9 = sub_100013AAC((unsigned __int8 **)&v27);
  }
  if (*v9 == 2)
  {
    sub_10001467C(*(void ***)(*(void *)(a1 + 40) + 24), a3, v9, a4);
    return;
  }
LABEL_7:
  v23[0] = "field";
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v10;
  long long v28 = v10;
  sub_1000135DC(a2, v23, (uint64_t)&v27);
  long long v24 = (unint64_t)a2;
  long long v25 = 0uLL;
  unint64_t v26 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v24);
  if (sub_100013964((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    uint64_t v11 = sub_1000155C8();
    if (!v11)
    {
LABEL_15:
      v23[0] = "name";
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v27 = v16;
      long long v28 = v16;
      sub_1000135DC(a2, v23, (uint64_t)&v27);
      long long v24 = (unint64_t)a2;
      long long v25 = 0uLL;
      unint64_t v26 = 0x8000000000000000;
      sub_100013648((unsigned __int8 **)&v24);
      if (sub_100013964((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
      {
        uint64_t v17 = sub_1000155C8();
        if (!v17) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v17 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v27);
      }
      if (*(unsigned char *)v17 != 3) {
        goto LABEL_22;
      }
      unint64_t v18 = *(const void ***)(v17 + 8);
      if (!v18) {
        goto LABEL_22;
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v27 = v19;
      long long v28 = v19;
      sub_100015780(*(void *)a3 + 40, v18, (uint64_t)&v27);
      uint64_t v20 = *(void *)a3 + 40;
      *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v24 = v21;
      long long v25 = v21;
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001586C(&v24, v20);
      sub_1000157EC((unsigned __int8 **)&v24);
      if (sub_1000205D8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24)) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v27);
  }
  if (*(unsigned char *)v11 != 3) {
    goto LABEL_15;
  }
  char v12 = *(const void ***)(v11 + 8);
  if (!v12) {
    goto LABEL_15;
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v13;
  long long v28 = v13;
  sub_100015780(*(void *)a3 + 40, v12, (uint64_t)&v27);
  uint64_t v14 = *(void *)a3 + 40;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  sub_10001586C(&v24, v14);
  sub_1000157EC((unsigned __int8 **)&v24);
  if (sub_1000205D8((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
LABEL_22:
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    sub_100016EAC(a4);
    sub_100016EAC(a4);
    return;
  }
LABEL_23:
  uint64_t v22 = sub_10001EE40((unsigned __int8 **)&v27);
  sub_100016A10(a4, (uint64_t)v22);
}

void sub_1000134D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100015438(&a25, "ExpressionError");
    sub_100015438(&a10, "name");
    sub_100024AD0("<unknown>", v32, (const void **)&a10, (std::string *)&__p);
    if (a2 == 2) {
      sub_1000A5508(v33, (uint64_t)&a25, (uint64_t)&__p, v31);
    }
    else {
      sub_1000A5974(v33, (uint64_t)&a25, (uint64_t)&__p, v31);
    }
    if (a21 < 0) {
      operator delete(__p);
    }
    if (a15 < 0) {
      operator delete(a10);
    }
    if (a30 < 0) {
      operator delete(a25);
    }
    *(unsigned char *)uint64_t v30 = 0;
    *(void *)(v30 + 8) = 0;
    sub_100016EAC(v30);
    sub_100016EAC(v30);
    __cxa_end_catch();
    JUMPOUT(0x100013484);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000135DC@<X0>(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  long long v7 = (unsigned __int8 **)sub_1000136C8((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100013648(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_100013718(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

unsigned __int8 **sub_100013648(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

void *sub_1000136C8(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0x8000000000000000;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

uint64_t sub_100013718(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    long long v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      long long v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1) {
    return v2;
  }
  return v5;
}

BOOL sub_100013798(void **a1, uint64_t a2, unsigned char *a3)
{
  if (*a3 != 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Evaluator::run requires an array of operations");
  }
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = a1;
  }
  ++*(_DWORD *)(a2 + 72);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_1000136C8(v13, (uint64_t)a3);
  sub_100014064((unsigned __int8 **)v13);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v7;
  v11[1] = v7;
  sub_1000136C8(v11, (uint64_t)a3);
  sub_100013648((unsigned __int8 **)v11);
  for (BOOL result = sub_100013964((unsigned __int8 **)v13, (unsigned __int8 **)v11);
        !result;
        BOOL result = sub_100013964((unsigned __int8 **)v13, (unsigned __int8 **)v11))
  {
    long long v9 = sub_100013AAC((unsigned __int8 **)v13);
    sub_100013CEC(a1, (uint64_t *)a2, v9);
    sub_100013C64((unsigned __int8 **)v13);
  }
  --*(_DWORD *)(a2 + 72);
  return result;
}

void sub_1000138E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100013964(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v8, "cannot compare iterators of different containers");
    sub_10002B4EC(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    sub_1000F8E08();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a2[2];
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a2[1];
  }
  else
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a2[4];
  }
  return v4 == v5;
}

void sub_100013A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

unsigned __int8 *sub_100013AAC(unsigned __int8 **a1)
{
  BOOL result = *a1;
  if (!result) {
    sub_100020874();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    long long v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      sub_1000F8E34();
    }
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    uint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    BOOL result = a1[2];
    if (result == v5) {
      sub_1000F8E60();
    }
  }
  else
  {
    if (!*result)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      sub_100015438(v8, "cannot get value");
      sub_10002B4EC(214, (uint64_t)v8, exception);
    }
    if (a1[4])
    {
      uint64_t v4 = __cxa_allocate_exception(0x20uLL);
      sub_100015438(v8, "cannot get value");
      sub_10002B4EC(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_100013C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **sub_100013C64(unsigned __int8 **result)
{
  if (!*result) {
    sub_100015690();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    int v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        int v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[4];
  }
  return result;
}

uint64_t sub_100013CEC(void **a1, uint64_t *a2, unsigned char *a3)
{
  if (*a3 != 3) {
    goto LABEL_12;
  }
  uint64_t v6 = sub_100013DF0((uint64_t)a3);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_12;
    }
    long long v7 = *(unsigned char **)v6;
  }
  else
  {
    long long v7 = (unsigned char *)v6;
    if (!*(unsigned char *)(v6 + 23)) {
      goto LABEL_12;
    }
  }
  if (*v7 != 58 || (long long v8 = sub_1000140F0(*a1, (unsigned __int8 *)v6)) == 0)
  {
LABEL_12:
    unint64_t v11 = a2[4];
    if (v11 >= a2[5])
    {
      uint64_t result = sub_100013F48(a2 + 3, (uint64_t)a3);
    }
    else
    {
      sub_100016A10(a2[4], (uint64_t)a3);
      uint64_t result = v11 + 16;
      a2[4] = v11 + 16;
    }
    a2[4] = result;
    return result;
  }
  long long v9 = *(uint64_t (**)(void))(**((void **)v8 + 5) + 16);

  return v9();
}

void sub_100013DE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100013DF0(uint64_t a1)
{
  if (*(unsigned char *)a1 != 3 || (uint64_t result = *(void *)(a1 + 8)) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v7, v4);
    BOOL v5 = std::string::insert(&v7, 0, "incompatible ReferenceType for get_ref, actual type is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(303, (uint64_t)&v8, exception);
  }
  return result;
}

void sub_100013EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_100013F48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  unint64_t v14 = &v10[16 * v4];
  long long v16 = &v10[16 * v9];
  sub_100016A10((uint64_t)v14, a2);
  char v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_100014050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 **sub_100014064(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

unsigned __int8 *sub_1000140F0(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1000141F4((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_100014470(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_1000141F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_100014268((uint64_t)&v5, (uint64_t *)a2, v3);
}

void sub_10001425C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

unint64_t sub_100014268(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1000261A8(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1000158BC(a2, a3);
  }
  else
  {
    return sub_100014518(a2, a3);
  }
}

uint64_t sub_100014470(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t sub_100014518(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t sub_100014610@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  unint64_t v7 = (unsigned __int8 **)sub_1000136C8((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100013648(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_1000184CC(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

void sub_10001467C(void **a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  sub_10001484C((uint64_t *)&v7, a2);
  sub_100014B90(a1, &v7, a3, a4);
  int v9 = (void **)&v7;
  sub_100014738(&v9);
}

void sub_100014720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100014738((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100014738(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_10001478C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10001478C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_1000147D8(v4);
    }
  }
  a1[1] = v2;
}

void sub_1000147D8(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void **sub_10001484C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    BOOL v14 = (char *)sub_1000171B0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_100014994(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_100014B08(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100014980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_100014994(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100014A0C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100014A0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_100014AD0((uint64_t)v14);
  return v10;
}

uint64_t sub_100014AD0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054214(a1);
  }
  return a1;
}

void **sub_100014B08(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100014B3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_1000147D8(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_100014B90(void **a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0u;
  LODWORD(v14) = 0;
  sub_100013798(a1, (uint64_t)&v10, a3);
  uint64_t v5 = *(void *)&v12[0];
  if (*((void *)&v12[0] + 1) - *(void *)&v12[0] != 16)
  {
    uint64_t v6 = *((void *)&v12[0] + 1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v8 = exception;
    if (v5 == v6) {
      std::runtime_error::runtime_error(exception, "Stack evaluation was empty but required one output value.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Stack evaluation had multiple values remaining, but required exactly one output value.");
    }
  }
  *(unsigned char *)a4 = **(unsigned char **)&v12[0];
  *(void *)(a4 + 8) = *(void *)(v5 + 8);
  sub_100016EAC(v5);
  *(unsigned char *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  sub_100016EAC(a4);
  if (*((void *)&v13 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v13 + 1));
  }
  long long v9 = (void **)v12;
  sub_100016F68(&v9);
  long long v9 = (void **)&v10;
  sub_100014738(&v9);
}

void sub_100014CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  sub_1000318A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100014D18(uint64_t a1, uint64_t a2)
{
  memset(&v18, 170, sizeof(v18));
  sub_100014F90(a2, &v18);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v17 = v3;
  sub_10001521C((uint64_t *)a2, (uint64_t)&v18, (uint64_t *)__p);
  if (__p[0] == *(void **)(a2 + 8))
  {
    unint64_t v14 = 0;
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >= *(void *)(a2 + 40))
    {
      uint64_t v9 = sub_1000270EC((uint64_t *)(a2 + 24));
    }
    else
    {
      *(unsigned char *)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      sub_100016EAC(v8);
      sub_100016EAC(v8);
      uint64_t v9 = v8 + 16;
    }
    goto LABEL_15;
  }
  uint64_t v4 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v4 = v17;
  }
  if (!v4)
  {
    uint64_t v10 = *(void *)__p[0] + 40;
    unint64_t v11 = *(void *)(a2 + 32);
    if (v11 >= *(void *)(a2 + 40))
    {
      uint64_t v9 = sub_1000BB6E0((uint64_t *)(a2 + 24), v10);
    }
    else
    {
      sub_100016A10(*(void *)(a2 + 32), v10);
      uint64_t v9 = v11 + 16;
      *(void *)(a2 + 32) = v11 + 16;
    }
LABEL_15:
    *(void *)(a2 + 32) = v9;
    goto LABEL_16;
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (char *)(*(void *)__p[0] + 40);
  v12[0] = 0;
  long long v13 = 0;
  sub_100016EAC((uint64_t)v12);
  sub_100016EAC((uint64_t)v12);
  sub_100013020(v5, (const void **)&__p[1], v12, (uint64_t)&v14);
  sub_100016EAC((uint64_t)v12);
  sub_100016B28(&v13, v12[0]);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t v7 = sub_100071148((uint64_t *)(a2 + 24), (uint64_t)&v14);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = v14;
    *(void *)(v6 + 8) = v15;
    sub_100016EAC((uint64_t)&v14);
    LOBYTE(v14) = 0;
    unint64_t v15 = 0;
    sub_100016EAC(v6);
    uint64_t v7 = v6 + 16;
  }
  *(void *)(a2 + 32) = v7;
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
LABEL_16:
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_100014F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014F90@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected string");
    goto LABEL_8;
  }
  int v5 = *(unsigned __int8 *)(v2 - 16);
  uint64_t v4 = v2 - 16;
  if (v5 != 3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected string");
LABEL_8:
  }
  memset(a2, 170, sizeof(std::string));
  sub_100015064(v4, a2);
  uint64_t v7 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v7);
}

void sub_10001504C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_100015064@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return sub_1000150B0(a1, a2);
}

void sub_100015094(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1000150B0(uint64_t a1, std::string *this)
{
  if (*(unsigned char *)a1 != 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v7 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v10, v7);
    unint64_t v8 = std::string::insert(&v10, 0, "type must be string, but is ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(302, (uint64_t)&v11, exception);
  }
  uint64_t v4 = *(const std::string **)(a1 + 8);

  return std::string::operator=(this, v4);
}

void sub_1000151BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_10001521C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    memset(&v16, 0, sizeof(v16));
    while ((sub_1000154EC((unsigned __int8 *)a2, (unsigned __int8 *)(*(void *)v5 + 16), &v16) & 1) == 0)
    {
      v5 += 16;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    if (v5 != a1[1])
    {
      *a3 = v5;
      unint64_t v8 = a3 + 1;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_100017424(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    sub_100015438(__p, "event");
    int v10 = sub_1000154EC((unsigned __int8 *)a2, (unsigned __int8 *)__p, &v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    *a3 = *a1;
    unint64_t v8 = a3 + 1;
    if (v10)
    {
      if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        *(_OWORD *)unint64_t v8 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
        std::string::size_type v11 = v16.__r_.__value_.__r.__words[2];
LABEL_16:
        v8[2] = v11;
        goto LABEL_17;
      }
      sub_100017424(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else
    {
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
        std::string::size_type v11 = *(void *)(a2 + 16);
        goto LABEL_16;
      }
      sub_100017424(v8, *(void **)a2, *(void *)(a2 + 8));
    }
LABEL_17:
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    return;
  }
  *a3 = v5;
  long long v9 = a3 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v12 = *(void **)a2;
    unint64_t v13 = *(void *)(a2 + 8);
    sub_100017424(v9, v12, v13);
  }
  else
  {
    *(_OWORD *)long long v9 = *(_OWORD *)a2;
    a3[3] = *(void *)(a2 + 16);
  }
}

void sub_1000153F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100015438(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001C950();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_1000154EC(unsigned __int8 *a1, unsigned __int8 *a2, std::string *this)
{
  int v3 = (char)a1[23];
  BOOL v4 = v3 < 0;
  size_t v5 = *(unsigned __int8 **)a1;
  if (v3 >= 0) {
    size_t v5 = a1;
  }
  uint64_t v6 = a1[23];
  if (v4) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  int v7 = (char)a2[23];
  BOOL v8 = v7 < 0;
  long long v9 = *(unsigned __int8 **)a2;
  if (v7 >= 0) {
    long long v9 = a2;
  }
  uint64_t v10 = a2[23];
  if (v8) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v6) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = v10 - 1;
    uint64_t v13 = v6 - 1;
    unint64_t v14 = v9;
    char v15 = v5;
    while (*v15 == *v14)
    {
      ++v14;
      if (v13)
      {
        ++v15;
        uint64_t v16 = v12--;
        --v13;
        if (v16) {
          continue;
        }
      }
      goto LABEL_18;
    }
    return 0;
  }
  unint64_t v14 = v9;
LABEL_18:
  if (v14 != &v9[v10]) {
    return 0;
  }
  if (v6 != v10)
  {
    std::string v18 = &v5[v10];
    if (*v18 != 46) {
      return 0;
    }
    sub_1000EFB40(this, (std::string::value_type *)v18 + 1, (std::string::value_type *)&v5[v6], &v5[v6] - (v18 + 1));
  }
  return 1;
}

uint64_t sub_1000155C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F0E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F0E0))
  {
    operator new();
  }
  return qword_10015F0D8;
}

void sub_100015650(_Unwind_Exception *a1)
{
}

uint64_t sub_10001566C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_100015690()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void sub_1000156BC(uint64_t a1)
{
  char v1 = -86;
  sub_100015718((uint64_t)&v1, a1 + 24);
}

void sub_100015718(uint64_t a1, uint64_t a2)
{
  sub_100016EAC(a2 + 40);
  sub_100016B28((uint64_t **)(a2 + 48), *(unsigned __int8 *)(a2 + 40));
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  int v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_100015780@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  int v7 = (unsigned __int8 **)sub_10001586C((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000157EC(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_1000184CC(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

unsigned __int8 **sub_1000157EC(unsigned __int8 **result)
{
  char v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

void *sub_10001586C(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0x8000000000000000;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

unint64_t sub_1000158BC(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

uint64_t sub_100015968(uint64_t a1, uint64_t *a2)
{
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v4 = (std::runtime_error_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        sub_100026F20(a2);
        goto LABEL_17;
      case 4:
        sub_100016718(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10001AD14(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_10003F458(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          sub_100019F4C(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v40);
        sub_100043F08(v5, &v34);
        uint64_t v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v36, &v38);
        uint64_t v18 = sub_10003BE24((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        sub_10003CC54(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!sub_100018E18(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_1000181AC((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001906C(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          uint64_t v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(sub_100016548(v16, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
          int v17 = sub_1000162FC(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_1000181AC((uint64_t)&v41, &v38);
          int v15 = sub_1000162FC(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = sub_1000162FC(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              sub_100043F08(v5, &v40);
              *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              sub_100015438(&v34, "array");
              sub_100043FEC(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v24 = sub_10003BE24((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            sub_100043F08(v5, &v40);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            sub_100015438(&v34, "object");
            sub_100043FEC(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            uint64_t v24 = sub_10003BE24((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          sub_100043F08(v5, &v40);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          sub_100015438(&v34, "object key");
          sub_100043FEC(a1, 4u, (uint64_t)&v34, &__p);
          sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          uint64_t v24 = sub_10003BE24((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        uint64_t v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(sub_100016548(v13, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
        int v14 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = sub_1000162FC(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "object separator");
        sub_100043FEC(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v24 = sub_10003BE24((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        sub_10003BD98(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "value");
        sub_100043FEC(a1, 0, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "value");
        sub_100043FEC(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_1000161B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  uint64_t v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000162FC(uint64_t a1)
{
  if (!*(void *)(a1 + 24) && !sub_10001B2F0((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      sub_100017EBC((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5;
        uint64_t v7 = 2;
        return sub_10001B3C0(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 1;
        }
        return sub_10001B3C0(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      uint64_t v8 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 96) = v8;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_1000179C0(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_100019B58(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

uint64_t *sub_100016548(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = (uint64_t **)sub_10001855C((uint64_t)a1, &v8, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v9, 170, sizeof(v9));
    sub_100016618((uint64_t)a1, a4, v9);
    sub_1000187B0(a1, v8, v6, v9[0]);
    return v9[0];
  }
  return result;
}

void *sub_100016618@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  unint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1000166AC(v6 + 4, *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100016690(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10002E44C(v2, v3);
  _Unwind_Resume(a1);
}

void *sub_1000166AC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((unsigned char *)__dst + 24) = 0;
  __dst[4] = 0;
  sub_100016EAC((uint64_t)(__dst + 3));
  sub_100016EAC((uint64_t)(__dst + 3));
  return __dst;
}

uint64_t sub_100016718(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    sub_1000168C0((uint64_t)v18, a2);
    uint64_t v9 = *a1;
    sub_100016EAC((uint64_t)v18);
    unsigned __int8 v10 = *(unsigned char *)v9;
    *(unsigned char *)uint64_t v9 = v18[0];
    v18[0] = v10;
    int v11 = *(uint64_t **)(v9 + 8);
    *(void *)(v9 + 8) = v19;
    uint64_t v19 = v11;
    sub_100016EAC(v9);
    sub_100016EAC((uint64_t)v18);
    sub_100016B28(&v19, v18[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = sub_100018CFC(v6, a2);
      }
      else
      {
        sub_1000168C0(v6[1], a2);
        uint64_t v8 = v7 + 16;
        v6[1] = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      sub_1000168C0((uint64_t)v16, a2);
      uint64_t v13 = a1[4];
      sub_100016EAC((uint64_t)v16);
      unsigned __int8 v14 = *(unsigned char *)v13;
      *(unsigned char *)uint64_t v13 = v16[0];
      v16[0] = v14;
      int v15 = *(uint64_t **)(v13 + 8);
      *(void *)(v13 + 8) = v17;
      int v17 = v15;
      sub_100016EAC(v13);
      sub_100016EAC((uint64_t)v16);
      sub_100016B28(&v17, v16[0]);
      return a1[4];
    }
  }
}

void sub_1000168B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000168C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100017084(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_10001690C(void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    int v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      sub_100016EAC(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)sub_100016B28(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_10001696C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = sub_100019524(a4, v5);
      }
      else
      {
        *(unsigned char *)unint64_t v7 = *(unsigned char *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        sub_100016EAC(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        sub_100016EAC(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100016A10(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  sub_100016EAC(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v4 = sub_100018C58(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      uint64_t v4 = sub_100018254(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      uint64_t v4 = sub_100017084(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      uint64_t v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(uint64_t **)(a2 + 8);
      goto LABEL_8;
    case 8:
      uint64_t v4 = sub_10002E524(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  sub_100016EAC(a1);
  return a1;
}

uint64_t sub_100016AC4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    unsigned int v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      sub_100016EAC(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = sub_100016B28(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void sub_100016B28(uint64_t **a1, int a2)
{
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_1000170F0(&v23, (*a1)[2]);
    uint64_t v5 = (uint64_t)(*a1 + 1);
    unsigned int v6 = (void *)**a1;
    unint64_t v4 = v24;
    if (v6 != (void *)v5)
    {
      do
      {
        if (v4 >= v25)
        {
          unint64_t v4 = sub_100019524(&v23, (uint64_t)(v6 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v4 = *((unsigned char *)v6 + 56);
          *(void *)(v4 + 8) = v6[8];
          sub_100016EAC((uint64_t)(v6 + 7));
          *((unsigned char *)v6 + 56) = 0;
          unsigned char v6[8] = 0;
          sub_100016EAC(v4);
          v4 += 16;
        }
        unint64_t v24 = v4;
        unsigned int v7 = (void *)v6[1];
        if (v7)
        {
          do
          {
            BOOL v8 = v7;
            unsigned int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            BOOL v8 = (void *)v6[2];
            BOOL v9 = *v8 == (void)v6;
            unsigned int v6 = v8;
          }
          while (!v9);
        }
        unsigned int v6 = v8;
      }
      while (v8 != (void *)v5);
    }
  }
  else
  {
    unint64_t v4 = 0;
    if (a2 == 2)
    {
      sub_1000170F0(&v23, ((*a1)[1] - **a1) >> 4);
      sub_10001696C((uint64_t)&v21, **a1, (*a1)[1], &v23);
      unint64_t v4 = v24;
    }
  }
  if (v23 != v4)
  {
    do
    {
      uint64_t v21 = (void **)0xAAAAAAAAAAAAAAAALL;
      uint64_t v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      char v11 = *(unsigned char *)(v4 - 16);
      uint64_t v10 = v4 - 16;
      LOBYTE(v21) = v11;
      uint64_t v22 = *(uint64_t **)(v10 + 8);
      sub_100016EAC(v10);
      *(unsigned char *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      sub_100016EAC((uint64_t)&v21);
      sub_100016AC4((uint64_t)&v23, v24 - 16);
      if (v21 == 1)
      {
        int v12 = v22;
        uint64_t v13 = v22 + 1;
        unsigned __int8 v14 = (void *)*v22;
        if ((uint64_t *)*v22 != v22 + 1)
        {
          unint64_t v15 = v24;
          do
          {
            if (v15 >= v25)
            {
              unint64_t v15 = sub_100019524(&v23, (uint64_t)(v14 + 7));
            }
            else
            {
              *(unsigned char *)unint64_t v15 = *((unsigned char *)v14 + 56);
              *(void *)(v15 + 8) = v14[8];
              sub_100016EAC((uint64_t)(v14 + 7));
              *((unsigned char *)v14 + 56) = 0;
              v14[8] = 0;
              sub_100016EAC(v15);
              v15 += 16;
            }
            unint64_t v24 = v15;
            uint64_t v16 = (void *)v14[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                uint64_t v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                int v17 = (void *)v14[2];
                BOOL v9 = *v17 == (void)v14;
                unsigned __int8 v14 = v17;
              }
              while (!v9);
            }
            unsigned __int8 v14 = v17;
          }
          while (v17 != v13);
          int v12 = v22;
        }
        sub_10001700C((uint64_t)v12, (char *)v12[1]);
        uint64_t *v12 = (uint64_t)(v12 + 1);
        _OWORD v12[2] = 0;
        v12[1] = 0;
      }
      else if (v21 == 2)
      {
        sub_10001696C((uint64_t)&v26, *v22, v22[1], &v23);
        sub_10001690C(v22);
      }
      sub_100016EAC((uint64_t)&v21);
      sub_100016B28(&v22, v21);
      unint64_t v4 = v24;
    }
    while (v23 != v24);
  }
  switch(v3)
  {
    case 0:
      sub_10001700C((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_40;
    case 1:
      uint64_t v21 = (void **)*a1;
      sub_100016F68(&v21);
      goto LABEL_40;
    case 2:
      uint64_t v18 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_41;
      }
      uint64_t v19 = (void *)*v18;
      break;
    case 7:
      uint64_t v18 = *a1;
      uint64_t v20 = (void *)**a1;
      if (!v20) {
        goto LABEL_41;
      }
      v18[1] = (uint64_t)v20;
      uint64_t v19 = v20;
      break;
    default:
      goto LABEL_42;
  }
  operator delete(v19);
LABEL_40:
  uint64_t v18 = *a1;
LABEL_41:
  operator delete(v18);
LABEL_42:
  uint64_t v21 = (void **)&v23;
  sub_100016F68(&v21);
}

void sub_100016E8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100016EAC(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void sub_100016F68(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      unsigned int v7 = v4 - 16;
      do
      {
        sub_100016EAC(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        sub_100016B28(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10001700C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10001700C(a1, *(void *)a2);
    sub_10001700C(a1, *((void *)a2 + 1));
    sub_100016EAC((uint64_t)(a2 + 56));
    sub_100016B28(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *sub_100017084(uint64_t a1)
{
  int v2 = operator new(0x18uLL);
  int v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100017424(v2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)int v2 = *(_OWORD *)a1;
    v2[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_1000170DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000170F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100028DEC();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000171B0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_1000171E8(a1, v7);
    return sub_100017390((uint64_t)v7);
  }
  return result;
}

void sub_10001719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000171B0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100028E94();
  }
  return operator new(16 * a2);
}

uint64_t sub_1000171E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100017260((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100017260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v16[0] = a1;
  v16[1] = &v14;
  _OWORD v16[2] = &v15;
  unint64_t v17 = 0xAAAAAAAAAAAAAA00;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(unsigned char *)(v7 - 16) = *(unsigned char *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      sub_100016EAC(v9);
      *(unsigned char *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      sub_100016EAC(v10);
      uint64_t v7 = *((void *)&v15 + 1) - 16;
      *((void *)&v15 + 1) -= 16;
      BOOL v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    uint64_t v12 = v15;
  }
  LOBYTE(v17) = 1;
  sub_100017358((uint64_t)v16);
  return v12;
}

uint64_t sub_100017358(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100028EC8((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_100017390(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000173C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      sub_100016EAC(v2 - 16);
      uint64_t result = sub_100016B28(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_100017424(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_10001C950();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1000174C4(uint64_t a1)
{
  sub_1000180E8(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    sub_1000F940C();
  }
  while (2)
  {
    while (2)
    {
      int v2 = sub_100017EBC((unsigned __int8 **)a1) + 1;
      uint64_t result = 4;
      uint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          uint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          uint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          uint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          uint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          uint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          uint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          uint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          uint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          uint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          uint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          uint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          uint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          uint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          uint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          uint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          uint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          uint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          uint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          uint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          uint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          uint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          uint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          uint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          uint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          uint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          uint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          uint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          uint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          uint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          uint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          uint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          uint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = sub_100017EBC((unsigned __int8 **)a1);
          uint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_1001179F0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_1001179E0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_1001179D0;
LABEL_7:
          long long v14 = v8;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100117D04;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100117D1C;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100117D34;
LABEL_18:
          long long v14 = *v9;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((sub_10003A9B4(v6, &v14, v7) & 1) == 0) {
            return 14;
          }
          continue;
        default:
          uint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v11 = sub_10003A8C0(a1);
        if (v11 == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = v11;
        if ((v11 & 0xFFFFFC00) != 0xD800)
        {
          if ((v11 & 0xFFFFFC00) == 0xDC00)
          {
            uint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (v11 >= 0x110000) {
            sub_1000F93E0();
          }
          if (v11 > 0x7F)
          {
            if (v11 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(v11))
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = v11;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (sub_100017EBC((unsigned __int8 **)a1) != 92
          || sub_100017EBC((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          uint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = sub_10003A8C0(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        uint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t sub_1000179C0(uint64_t a1)
{
  sub_100018024(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    sub_1000F940C();
  }
  while (2)
  {
    while (2)
    {
      int v2 = sub_100017EBC((unsigned __int8 **)a1) + 1;
      uint64_t result = 4;
      uint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          uint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          uint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          uint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          uint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          uint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          uint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          uint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          uint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          uint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          uint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          uint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          uint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          uint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          uint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          uint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          uint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          uint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          uint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          uint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          uint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          uint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          uint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          uint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          uint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          uint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          uint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          uint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          uint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          uint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          uint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          uint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          uint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = sub_100017EBC((unsigned __int8 **)a1);
          uint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_1001179F0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_1001179E0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_1001179D0;
LABEL_7:
          long long v14 = v8;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100118AC8;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100118AE0;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          uint64_t v9 = &xmmword_100118AF8;
LABEL_18:
          long long v14 = *v9;
          uint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((sub_10003A9B4(v6, &v14, v7) & 1) == 0) {
            return 14;
          }
          continue;
        default:
          uint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int v11 = sub_10003A8C0(a1);
        if (v11 == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = v11;
        if ((v11 & 0xFFFFFC00) != 0xD800)
        {
          if ((v11 & 0xFFFFFC00) == 0xDC00)
          {
            uint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (v11 >= 0x110000) {
            sub_1000F93E0();
          }
          if (v11 > 0x7F)
          {
            if (v11 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(v11))
            {
              std::string::push_back((std::string *)(a1 + 72), (v11 >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = v11;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (sub_100017EBC((unsigned __int8 **)a1) != 92
          || sub_100017EBC((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          uint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = sub_10003A8C0(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        uint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t sub_100017EBC(unsigned __int8 **a1)
{
  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 20))
  {
    *((unsigned char *)a1 + 20) = 0;
    int v2 = *((_DWORD *)a1 + 4);
  }
  else
  {
    int v3 = *a1;
    if (*a1 == a1[1])
    {
      int v2 = -1;
    }
    else
    {
      int v2 = *v3;
      *a1 = v3 + 1;
    }
    *((_DWORD *)a1 + 4) = v2;
  }
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v5 = a1[7];
  unint64_t v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = a1 + 6;
    unint64_t v8 = (unint64_t)a1[6];
    uint64_t v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      sub_100028DEC();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unsigned int v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      unsigned int v13 = 0;
    }
    long long v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      unsigned int v13 = &v9[(void)v13];
    }
    else
    {
      uint64_t v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      int v5 = *v7;
    }
    a1[6] = v13;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[7] = (unsigned __int8 *)v6;
  uint64_t result = *((unsigned int *)a1 + 4);
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[5] + 1);
    a1[4] = 0;
    a1[5] = (unsigned __int8 *)v18;
  }
  return result;
}

void sub_100018024(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  int v2 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    uint64_t v9 = operator new(v8);
    *uint64_t v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *int v2 = v3;
    int v5 = v2 + 1;
  }
  *(void *)(a1 + 56) = v5;
}

void sub_1000180E8(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  int v2 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    uint64_t v9 = operator new(v8);
    *uint64_t v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *int v2 = v3;
    int v5 = v2 + 1;
  }
  *(void *)(a1 + 56) = v5;
}

void sub_1000181AC(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_100028DEC();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_100019774((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  size_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void *sub_100018254(uint64_t *a1)
{
  int v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *int v2 = 0;
  sub_1000182B0(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_10001829C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000182B0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100018368(result, a4);
    uint64_t result = (void *)sub_1000183AC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100018348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_100016F68((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_100018368(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100028DEC();
  }
  uint64_t result = (char *)sub_1000171B0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_1000183AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100016A10(v4, v6);
      v6 += 16;
      uint64_t v4 = v9 + 16;
      v9 += 16;
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  sub_100018480((uint64_t)v10);
  return v4;
}

void sub_10001846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100018480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100018480(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002E4A8(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1000184CC(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_1000185FC(v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1000185FC(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void *sub_10001855C(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!sub_1000185FC(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_1000185FC(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_1000185FC(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t *sub_100018668(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    size_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1000186F4(v5, v6, v4 + 4, (long long *)v4 + 2);
      size_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          size_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }
        while (!v9);
      }
      int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1000186F4(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v9 = (const void **)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (uint64_t **)sub_100018A34(a1, a2, &v9, &v8, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_1000189A0((uint64_t)a1, a4, v10);
    sub_1000187B0(a1, (uint64_t)v9, v6, (uint64_t *)v10[0]);
    return (uint64_t *)v10[0];
  }
  return result;
}

uint64_t *sub_1000187B0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  size_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_100018808(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_100018808(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            _DWORD v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

char *sub_1000189A0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  size_t v5 = (char *)(a1 + 8);
  memset(a3, 170, 24);
  int v6 = (char *)operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_100018BE0(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100018A18(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10002E44C(v2, v3);
  _Unwind_Resume(a1);
}

const void **sub_100018A34(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  BOOL v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !sub_1000185FC((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!sub_1000185FC((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        long long v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1000185FC((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    unsigned __int8 v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      unsigned __int8 v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_1000185FC((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)sub_10001855C((uint64_t)a1, a3, a5);
}

char *sub_100018BE0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100016A10(__dst + 24, (char *)a2 + 24);
  return __dst;
}

void sub_100018C3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100018C58(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  sub_100018CA4(v2, a1);
  return v2;
}

void sub_100018C90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100018CA4(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100018668(a1, *a2, a2 + 1);
  return a1;
}

void sub_100018CE4(_Unwind_Exception *a1)
{
  sub_10001700C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100018CFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = &v10[16 * v4];
  unsigned __int8 v16 = &v10[16 * v9];
  sub_1000168C0((uint64_t)v14, a2);
  uint64_t v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_100018E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100018E18(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 2;
  uint64_t v4 = sub_1000192C0(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  int v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019978((uint64_t)(a1 + 3), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = (uint64_t *)&v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *long long v14 = v4;
    uint64_t v7 = v14 + 1;
    BOOL v17 = (char *)a1[1];
    unsigned __int8 v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--long long v14 = v18;
      }
      while (v16 != v17);
      unsigned __int8 v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_100117DC0[v19];
    }
    if (v20 < a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      uint64_t v23 = std::string::insert(&v25, 0, "excessive array size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      sub_10003CADC(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_100019004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10001906C(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 1;
  uint64_t v4 = sub_1000192C0(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  int v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_100019978((uint64_t)(a1 + 3), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = (uint64_t *)&v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *long long v14 = v4;
    uint64_t v7 = v14 + 1;
    BOOL v17 = (char *)a1[1];
    unsigned __int8 v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--long long v14 = v18;
      }
      while (v16 != v17);
      unsigned __int8 v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_100117DC0[v19];
    }
    if (v20 < a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      uint64_t v23 = std::string::insert(&v25, 0, "excessive object size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      sub_10003CADC(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_100019258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_1000192C0(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    int v9 = *a2;
    v20[0] = v9;
    sub_10001946C(&v21, v9);
    sub_100016EAC((uint64_t)v20);
    uint64_t v10 = *a1;
    sub_100016EAC((uint64_t)v20);
    unsigned __int8 v11 = *(unsigned char *)v10;
    *(unsigned char *)uint64_t v10 = v20[0];
    v20[0] = v11;
    unint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + 8) = v21;
    uint64_t v21 = v12;
    sub_100016EAC(v10);
    sub_100016EAC((uint64_t)v20);
    sub_100016B28(&v21, v20[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      int v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = sub_10001964C(v6, a2);
      }
      else
      {
        sub_10001C4C4((uint64_t)v6, a2);
        uint64_t v8 = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      int v14 = *a2;
      v18[0] = v14;
      sub_10001946C(&v19, v14);
      sub_100016EAC((uint64_t)v18);
      uint64_t v15 = a1[4];
      sub_100016EAC((uint64_t)v18);
      unsigned __int8 v16 = *(unsigned char *)v15;
      *(unsigned char *)uint64_t v15 = v18[0];
      v18[0] = v16;
      BOOL v17 = *(uint64_t **)(v15 + 8);
      *(void *)(v15 + 8) = v19;
      unint64_t v19 = v17;
      sub_100016EAC(v15);
      sub_100016EAC((uint64_t)v18);
      sub_100016B28(&v19, v18[0]);
      return a1[4];
    }
  }
}

unsigned char *sub_10001946C(unsigned char *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *uint64_t v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *uint64_t v3 = 0;
      goto LABEL_8;
    case 3:
      uint64_t v3 = sub_100039B48("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *uint64_t v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0;
      break;
  }
  return a1;
}

uint64_t sub_100019524(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  sub_100016EAC(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC(v11);
  *(void *)&long long v16 = v11 + 16;
  sub_1000171E8(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100017390((uint64_t)&v15);
  return v13;
}

void sub_100019638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001964C(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  BOOL v17 = &v10[16 * v9];
  int v12 = *a2;
  *uint64_t v11 = v12;
  sub_10001946C(v11 + 8, v12);
  sub_100016EAC((uint64_t)v11);
  v16 += 16;
  sub_1000171E8(a1, v15);
  uint64_t v13 = a1[1];
  sub_100017390((uint64_t)v15);
  return v13;
}

void sub_100019760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100019774(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_100028DEC();
    }
    int v6 = 0;
    long long v7 = 0uLL;
    sub_100019930(&v6, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v10 = *a1;
    int v11 = 0;
    uint64_t v8 = &v10[8 * (v3 >> 6)];
    int v9 = v3 & 0x3F;
    sub_100019860(&v6, (uint64_t)&v10, (uint64_t)&v8, v3);
    uint64_t v4 = *a1;
    *a1 = v6;
    int v6 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v7;
    long long v7 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_100019848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019860(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_1000199B0(&v16, &v14, &v12, (uint64_t)v11);
}

void *sub_100019930(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100028DEC();
  }
  uint64_t result = sub_100019978((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_100019978(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100028E94();
  }
  return operator new(8 * a2);
}

void sub_1000199B0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = v9;
  long long v21 = v9;
  uint64_t v18 = v5;
  int v19 = v6;
  uint64_t v16 = v7;
  int v17 = v8;
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v14 = *a3;
  int v15 = v10;
  sub_100019A88((uint64_t)&v18, (uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v20);
  int v11 = DWORD2(v20);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  *(void *)a4 = v20;
  *(_DWORD *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v12;
  *(_DWORD *)(a4 + 24) = v13;
}

void sub_100019A88(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    uint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t sub_100019B58(uint64_t a1)
{
  sub_100018024(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        sub_1000F9438();
      }
      unint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = sub_100017EBC((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        uint64_t v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = sub_100017EBC((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (sub_100017EBC((unsigned __int8 **)a1) - 48 > 9)
    {
      uint64_t v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = sub_100017EBC((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_10001B354(a1);
      std::string v25 = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = sub_100017EBC((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      int v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      int v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (sub_100017EBC((unsigned __int8 **)a1) - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (sub_100017EBC((unsigned __int8 **)a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (sub_100017EBC((unsigned __int8 **)a1) - 48 < 0xA);
        }
        goto LABEL_13;
      }
      uint64_t v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      uint64_t v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  unint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = sub_100017EBC((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_10001B354(a1);
  std::string v25 = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    long long v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      long long v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (v25 != (char *)v21 + v24) {
      sub_1000F94BC();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    int v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      int v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (v25 != (char *)v17 + v20) {
      sub_1000F9490();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  uint64_t v9 = (const char **)(a1 + 72);
  uint64_t v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &v25);
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (v25 != (char *)v9 + v11) {
    sub_1000F9464();
  }
  return 7;
}

void sub_100019F40(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100019F4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 7;
    uint64_t v22 = v10;
    sub_100016EAC((uint64_t)v21);
    sub_100016EAC((uint64_t)v21);
    uint64_t v11 = *a1;
    sub_100016EAC((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    int v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    sub_100016EAC(v11);
    sub_100016EAC((uint64_t)v21);
    sub_100016B28(&v22, v21[0]);
    return *a1;
  }
  else
  {
    int v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      int v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = sub_10001E9CC(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 7;
        *(void *)(v7 + 8) = v8;
        sub_100016EAC(v7);
        sub_100016EAC(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      int v15 = (uint64_t *)*a2;
      v19[0] = 7;
      uint64_t v20 = v15;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      uint64_t v16 = a1[4];
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      uint64_t v20 = v18;
      sub_100016EAC(v16);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t sub_10001A134(uint64_t a1, uint64_t *a2)
{
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::runtime_error_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        sub_10001B444(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        sub_100026F20(a2);
        goto LABEL_17;
      case 4:
        sub_100016718(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10001AD14(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_10003F458(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          sub_100019F4C(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v40);
        sub_10003B59C(v5, &v34);
        uint64_t v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v36, &v38);
        uint64_t v18 = sub_10003BE24((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        sub_10003CC54(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!sub_100018E18(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        sub_1000181AC((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((sub_10001906C(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          uint64_t v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(sub_100016548(v16, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
          int v17 = sub_10001AAC8(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          sub_1000181AC((uint64_t)&v41, &v38);
          int v15 = sub_10001AAC8(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = sub_10001AAC8(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              sub_10003B59C(v5, &v40);
              *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              sub_100015438(&v34, "array");
              sub_10003B954(a1, 0xAu, (uint64_t)&v34, &__p);
              sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
              uint64_t v24 = sub_10003BE24((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            sub_10003B59C(v5, &v40);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            sub_100015438(&v34, "object");
            sub_10003B954(a1, 0xBu, (uint64_t)&v34, &__p);
            sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
            uint64_t v24 = sub_10003BE24((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          sub_10003B59C(v5, &v40);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          sub_100015438(&v34, "object key");
          sub_10003B954(a1, 4u, (uint64_t)&v34, &__p);
          sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
          uint64_t v24 = sub_10003BE24((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(sub_100016548(v13, (const void **)&v4->~runtime_error, (uint64_t)&unk_100117318, (long long **)&v38)+ 7);
        int v14 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = sub_10001AAC8(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "object separator");
        sub_10003B954(a1, 0xCu, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v24 = sub_10003BE24((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        sub_10003BD98(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "value");
        sub_10003B954(a1, 0, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v40);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        sub_100015438(&v34, "value");
        sub_10003B954(a1, 0x10u, (uint64_t)&v34, &__p);
        sub_10003B680(101, (uint64_t *)v36, (uint64_t)&__p, &v38);
        uint64_t v21 = sub_10003BE24((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_10001A97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  uint64_t v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001AAC8(uint64_t a1)
{
  if (!*(void *)(a1 + 24) && !sub_10001B2F0((unsigned __int8 **)a1))
  {
    uint64_t v8 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      sub_100017EBC((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v9, "false", 5);
        uint64_t v5 = a1;
        unint64_t v6 = 5;
        uint64_t v7 = 2;
        return sub_10001B3C0(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v9[0] = 1819047278;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          v9[0] = 1702195828;
          uint64_t v5 = a1;
          unint64_t v6 = 4;
          uint64_t v7 = 1;
        }
        return sub_10001B3C0(v5, (unsigned __int8 *)v9, v6, v7);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      uint64_t v8 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 96) = v8;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = sub_1000174C4(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = sub_10001AEFC(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

uint64_t sub_10001AD14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 6;
    uint64_t v22 = v10;
    sub_100016EAC((uint64_t)v21);
    sub_100016EAC((uint64_t)v21);
    uint64_t v11 = *a1;
    sub_100016EAC((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    int v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    sub_100016EAC(v11);
    sub_100016EAC((uint64_t)v21);
    sub_100016B28(&v22, v21[0]);
    return *a1;
  }
  else
  {
    int v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = sub_10001BDD4(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 6;
        *(void *)(v7 + 8) = v8;
        sub_100016EAC(v7);
        sub_100016EAC(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      int v15 = (uint64_t *)*a2;
      v19[0] = 6;
      uint64_t v20 = v15;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      uint64_t v16 = a1[4];
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      uint64_t v20 = v18;
      sub_100016EAC(v16);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t sub_10001AEFC(uint64_t a1)
{
  sub_1000180E8(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        sub_1000F9438();
      }
      uint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = sub_100017EBC((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        int v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = sub_100017EBC((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (sub_100017EBC((unsigned __int8 **)a1) - 48 > 9)
    {
      int v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = sub_100017EBC((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      sub_10001B354(a1);
      int v25 = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = sub_100017EBC((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      uint64_t v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (sub_100017EBC((unsigned __int8 **)a1) - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (sub_100017EBC((unsigned __int8 **)a1) - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (sub_100017EBC((unsigned __int8 **)a1) - 48 < 0xA);
        }
        goto LABEL_13;
      }
      int v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      int v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = sub_100017EBC((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  sub_10001B354(a1);
  int v25 = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    uint64_t v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      uint64_t v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (v25 != (char *)v21 + v24) {
      sub_1000F94BC();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &v25, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (v25 != (char *)v17 + v20) {
      sub_1000F9490();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  uint64_t v9 = (const char **)(a1 + 72);
  uint64_t v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &v25);
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (v25 != (char *)v9 + v11) {
    sub_1000F9464();
  }
  return 7;
}

void sub_10001B2E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10001B2F0(unsigned __int8 **a1)
{
  if (sub_100017EBC(a1) == 239)
  {
    return sub_100017EBC(a1) == 187 && sub_100017EBC(a1) == 191;
  }
  else
  {
    sub_10001B354((uint64_t)a1);
    return 1;
  }
}

uint64_t sub_10001B354(uint64_t result)
{
  uint64_t v1 = (void *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)(result + 20) = 1;
  --*(void *)(result + 24);
  if (v2 || (v1 = (void *)(result + 40), (uint64_t v2 = *(void *)(result + 40)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 56);
    if (*(void *)(result + 48) == v3) {
      sub_1000F94E8();
    }
    *(void *)(result + 56) = v3 - 1;
  }
  return result;
}

uint64_t sub_10001B3C0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 16)) {
    sub_1000F93B4();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    int v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = sub_100017EBC((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *(void *)(a1 + 96) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t sub_10001B444(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 4;
    uint64_t v22 = v10;
    sub_100016EAC((uint64_t)v21);
    sub_100016EAC((uint64_t)v21);
    uint64_t v11 = *a1;
    sub_100016EAC((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    int v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    sub_100016EAC(v11);
    sub_100016EAC((uint64_t)v21);
    sub_100016B28(&v22, v21[0]);
    return *a1;
  }
  else
  {
    int v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = sub_10003F334(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 4;
        *(void *)(v7 + 8) = v8;
        sub_100016EAC(v7);
        sub_100016EAC(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      int v15 = (uint64_t *)*a2;
      v19[0] = 4;
      uint64_t v20 = v15;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      uint64_t v16 = a1[4];
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      uint64_t v20 = v18;
      sub_100016EAC(v16);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t sub_10001B62C(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
  if ((result & 1) == 0) {
    __assert_rtn("incrementEventCount", "Transform.cpp", 266, "initialized()");
  }
  ++a1[27];
  return result;
}

void sub_10001B6A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_10001BBEC(a1);
  uint64_t v8 = sub_10001F050(a1, a3);
  char v10 = v9;
  uint64_t v11 = (void *)(*a2 + 16);
  size_t v12 = strlen("com.apple.coreanalytics.heartbeat.2hours");
  if (*(char *)(*a2 + 39) < 0)
  {
    if (v12 != *(void *)(*a2 + 24)) {
      goto LABEL_19;
    }
    if (v12 == -1) {
      goto LABEL_53;
    }
    uint64_t v11 = (void *)*v11;
  }
  else
  {
    if (v12 != *(unsigned __int8 *)(*a2 + 39)) {
      goto LABEL_19;
    }
    if (v12 == -1) {
LABEL_53:
    }
      sub_10002B720();
  }
  if (!memcmp(v11, "com.apple.coreanalytics.heartbeat.2hours", v12))
  {
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[16] = v13;
    long long v40 = v13;
    *(_OWORD *)long long buf = v13;
    sub_1000C032C(v8, v8 + 3, (uint64_t)buf);
    int v14 = qword_10015EFA0;
    if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = &buf[24];
      uint64_t v16 = buf;
      if (buf[23] < 0) {
        uint64_t v16 = *(unsigned char **)buf;
      }
      if (v40 < 0) {
        int v15 = *(unsigned char **)&buf[24];
      }
      *(_DWORD *)std::string v34 = 136446722;
      *(void *)&void v34[4] = "com.apple.coreanalytics.heartbeat.2hours";
      __int16 v35 = 2080;
      uint64_t v36 = v16;
      __int16 v37 = 2080;
      std::runtime_error v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform: %{public}s] Before accumulation: dimensions: %s, measures: %s", v34, 0x20u);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_19:
  if (v8[3] == v8[4]) {
    sub_1000263C0(v8 + 3, (a4[1] - *a4) >> 4);
  }
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  uint64_t v19 = (v18 - *a4) >> 4;
  if (v19 == (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2 && v19 == (v8[4] - v8[3]) >> 4)
  {
    if (v18 != v17)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      do
      {
        sub_10001BB50(*(_DWORD *)(*(void *)(a1 + 168) + 4 * v21++), (unsigned __int8 *)(v8[3] + v20), (unsigned __int8 *)(v17 + v20));
        uint64_t v17 = *a4;
        v20 += 16;
      }
      while (v21 < (a4[1] - *a4) >> 4);
    }
    uint64_t v22 = *a2;
    uint64_t v23 = (void *)(v22 + 16);
    size_t v24 = strlen("com.apple.coreanalytics.heartbeat.2hours");
    if (*(char *)(v22 + 39) < 0)
    {
      if (v24 == *(void *)(v22 + 24))
      {
        if (v24 == -1) {
          goto LABEL_54;
        }
        uint64_t v23 = (void *)*v23;
LABEL_35:
        if (!memcmp(v23, "com.apple.coreanalytics.heartbeat.2hours", v24))
        {
          *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf[16] = v26;
          long long v40 = v26;
          *(_OWORD *)long long buf = v26;
          sub_1000C032C(v8, v8 + 3, (uint64_t)buf);
          uint64_t v27 = qword_10015EFA0;
          if (os_log_type_enabled((os_log_t)qword_10015EFA0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v28 = &buf[24];
            uint64_t v29 = buf;
            if (buf[23] < 0) {
              uint64_t v29 = *(unsigned char **)buf;
            }
            if (v40 < 0) {
              uint64_t v28 = *(unsigned char **)&buf[24];
            }
            *(_DWORD *)std::string v34 = 136446722;
            *(void *)&void v34[4] = "com.apple.coreanalytics.heartbeat.2hours";
            __int16 v35 = 2080;
            uint64_t v36 = v29;
            __int16 v37 = 2080;
            std::runtime_error v38 = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[AggregatingTransform: %{public}s] After accumulation: dimensions: %s, measures: %s", v34, 0x20u);
          }
          if (SHIBYTE(v40) < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
    else if (v24 == *(unsigned __int8 *)(v22 + 39))
    {
      if (v24 == -1) {
LABEL_54:
      }
        sub_10002B720();
      goto LABEL_35;
    }
    if (v10)
    {
      sub_10002684C(a1, (uint64_t)v8);
      sub_1000264D8(a1);
    }
    return;
  }
  int v25 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
  {
    sub_1000A5458(a1, v34);
    uint64_t v30 = v37 >= 0 ? v34 : *(unsigned char **)v34;
    uint64_t v31 = (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2;
    uint64_t v32 = (v8[4] - v8[3]) >> 4;
    uint64_t v33 = (a4[1] - *a4) >> 4;
    *(_DWORD *)long long buf = 136446978;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v31;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v32;
    LOWORD(v40) = 2048;
    *(void *)((char *)&v40 + 2) = v33;
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[%{public}sTransform] Error: transform has a size mismatch between extracted measures, aggregating measures, and aggregation functions { functions=%zd, running_measures=%zd, extracted_measures=%zd} ", buf, 0x2Au);
    if (SHIBYTE(v37) < 0) {
      operator delete(*(void **)v34);
    }
  }
}

void sub_10001BB30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10001BB50(int a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  switch(a1)
  {
    case 1:
      sub_10001BC84(a2);
      break;
    case 2:
      sub_10001C510(a2, a3);
      break;
    case 3:
      sub_1000C10D4(a2, a3);
      break;
    case 4:
      sub_100027370(a2, a3);
      break;
    case 5:
      sub_100026B7C(a2, a3);
      break;
    case 6:
      sub_1000C0F64(a2, a3);
      break;
    case 7:
      sub_1000C1244(a2, a3);
      break;
    case 8:
      sub_1000C13B4((uint64_t)a2, (uint64_t)a3);
      break;
    case 9:
      sub_1000C1464((uint64_t)a2, (uint64_t)a3);
      break;
    default:
      return;
  }
}

uint64_t sub_10001BBEC(uint64_t result)
{
  if (!*(void *)(result + 192)) {
    operator new();
  }
  return result;
}

void sub_10001BC60()
{
}

void sub_10001BC84(unsigned __int8 *a1)
{
  if (*a1 - 5 >= 2)
  {
    uint64_t v2 = (uint64_t **)&v11;
    v10[0] = 6;
    uint64_t v11 = 1;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    unsigned __int8 v6 = *a1;
    *a1 = v10[0];
    v10[0] = v6;
    uint64_t v7 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v11;
    uint64_t v11 = v7;
    sub_100016EAC((uint64_t)a1);
    sub_100016EAC((uint64_t)v10);
    int v5 = v10[0];
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    sub_10001BEF8(a1, &v12);
    uint64_t v2 = (uint64_t **)&v9;
    v8[0] = 6;
    uint64_t v9 = v12 + 1;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    unsigned __int8 v3 = *a1;
    *a1 = v8[0];
    v8[0] = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v4;
    sub_100016EAC((uint64_t)a1);
    sub_100016EAC((uint64_t)v8);
    int v5 = v8[0];
  }
  sub_100016B28(v2, v5);
}

uint64_t sub_10001BDD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  char v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 6;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_10001BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_10001BEF8(unsigned __int8 *result, unint64_t *a2)
{
  uint64_t v2 = (char *)result;
  int v3 = *result;
  if (v3 != 5)
  {
    if (v3 == 7)
    {
      unint64_t v4 = (unint64_t)*((double *)result + 1);
      goto LABEL_6;
    }
    if (v3 != 6)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unsigned __int8 v6 = (char *)sub_100029400(v2);
      sub_100015438(&v9, v6);
      uint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v10, exception);
    }
  }
  unint64_t v4 = *((void *)result + 1);
LABEL_6:
  *a2 = v4;
  return result;
}

void sub_10001C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10001C06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
      long long v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      sub_10001C440(v5, (uint64_t)&v7);
      sub_10001C164(*(uint64_t ***)(a3 + 8), *(const void ***)(*v8 + 8), *(void *)(*v8 + 8), *v8 + 16);
      sub_100016EAC((uint64_t)&v7);
      sub_100016B28(&v8, v7);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_10001C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_100016EAC((uint64_t)&a10);
  sub_100016B28(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10001C164(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = (uint64_t **)sub_10001855C((uint64_t)a1, &v9, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    memset(v10, 170, sizeof(v10));
    sub_10001C22C((uint64_t)a1, a3, a4, v10);
    sub_1000187B0(a1, v9, v7, v10[0]);
    return v10[0];
  }
  return result;
}

uint64_t sub_10001C22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  memset(a4, 170, 24);
  long long v8 = operator new(0x48uLL);
  *a4 = v8;
  a4[1] = v7;
  v8[2] = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v9 = *(unsigned char *)a3;
  *((void *)v8 + 8) = *(void *)(a3 + 8);
  *((unsigned char *)v8 + 56) = v9;
  uint64_t v10 = (uint64_t)v8 + 56;
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t result = sub_100016EAC(v10);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

uint64_t sub_10001C2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10001C398(v4, v6);
      v6 += 32;
      uint64_t v4 = v9 + 16;
      v9 += 16;
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  sub_100018480((uint64_t)v10);
  return v4;
}

void sub_10001C384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100018480((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C398(uint64_t a1, uint64_t a2)
{
  sub_10001C440(a2, (uint64_t)v4);
  *(unsigned char *)a1 = v4[0];
  *(void *)(a1 + 8) = v5;
  sub_100016EAC((uint64_t)v4);
  v4[0] = 0;
  uint64_t v5 = 0;
  sub_100016EAC(a1);
  sub_100016EAC((uint64_t)v4);
  sub_100016B28(&v5, v4[0]);
  return a1;
}

uint64_t sub_10001C440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)a2 = *(unsigned char *)v3;
    *(void *)(a2 + 8) = *(void *)(v3 + 8);
    sub_100016EAC(v3);
    *(unsigned char *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    return sub_100016EAC(a2);
  }
  else
  {
    return sub_100016A10(a2, v3);
  }
}

uint64_t sub_10001C4C4(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  *uint64_t v3 = v4;
  sub_10001946C(v3 + 8, v4);
  uint64_t result = sub_100016EAC((uint64_t)v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_10001C508(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10001C510(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v13 = 0;
  if (sub_10001C67C(a2, &v13))
  {
    if (*a1 - 5 >= 3)
    {
      uint64_t v3 = (uint64_t **)&v12;
      v11[0] = 5;
      uint64_t v12 = v13;
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      unsigned __int8 v7 = *a1;
      *a1 = v11[0];
      v11[0] = v7;
      uint64_t v8 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v12;
      uint64_t v12 = v8;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v11);
      int v6 = v11[0];
    }
    else
    {
      uint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724(a1, &v14);
      uint64_t v3 = (uint64_t **)&v10;
      v9[0] = 5;
      uint64_t v10 = v13 + v14;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v9);
      unsigned __int8 v4 = *a1;
      *a1 = v9[0];
      v9[0] = v4;
      uint64_t v5 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v10;
      uint64_t v10 = v5;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v9);
      int v6 = v9[0];
    }
    sub_100016B28(v3, v6);
  }
}

uint64_t sub_10001C67C(unsigned __int8 *a1, uint64_t *a2)
{
  int v3 = *a1;
  if ((v3 - 5) <= 2)
  {
    uint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(a1, &v6);
    uint64_t v4 = v6;
LABEL_5:
    *a2 = v4;
    return 1;
  }
  if (v3 == 4)
  {
    LOBYTE(v6) = -86;
    sub_100072884((char *)a1, &v6);
    uint64_t v4 = v6;
    goto LABEL_5;
  }
  return 0;
}

unsigned __int8 *sub_10001C724(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2 = (char *)result;
  int v3 = *result;
  if (v3 != 5)
  {
    if (v3 == 7)
    {
      uint64_t v4 = (uint64_t)*((double *)result + 1);
      goto LABEL_6;
    }
    if (v3 != 6)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v6 = (char *)sub_100029400(v2);
      sub_100015438(&v9, v6);
      unsigned __int8 v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v10, exception);
    }
  }
  uint64_t v4 = *((void *)result + 1);
LABEL_6:
  *a2 = v4;
  return result;
}

void sub_10001C838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10001C898(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = v4;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

uint64_t sub_10001C900(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10000EE20(result);
    operator delete();
  }
  return result;
}

void sub_10001C950()
{
}

uint64_t sub_10001C968(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1, uint64_t a2)
{
  __t.__d_.__rep_ = a1;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = v3;
  long long v20 = v3;
  long long v17 = v3;
  long long v18 = v3;
  long long v15 = v3;
  long long v16 = v3;
  long long v13 = v3;
  long long v14 = v3;
  long long v11 = v3;
  long long v12 = v3;
  *(_OWORD *)std::string __p = v3;
  long long v10 = v3;
  v8[2] = v3;
  void v8[3] = v3;
  v8[0] = v3;
  v8[1] = v3;
  sub_10001CD68((uint64_t)v8);
  time_t v6 = std::chrono::system_clock::to_time_t(&__t);
  v5[0] = gmtime(&v6);
  v5[1] = a2;
  sub_10001CB30(v8, (uint64_t)v5);
  std::stringbuf::str();
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10001CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100057368((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10001CB30(void *a1, uint64_t a2)
{
  std::ostream::sentry::sentry();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  std::locale::use_facet(&v8, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v8);
  uint64_t v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  if (v4[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v4);
    uint64_t v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    std::ios_base::fmtflags v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    v4[1].__fmtflags_ = v6;
  }
  strlen(*(const char **)(a2 + 8));
  if (!std::time_put<char,std::ostreambuf_iterator<char>>::put()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 1);
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10001CCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    std::ostream::sentry::~sentry();
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x10001CC98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001CD68(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  uint64_t v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10001CED8(_Unwind_Exception *a1)
{
}

void sub_10001CF00(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 72);
  uint64_t v4 = sub_100024914(v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)v3 + 72))(&v8, v3, v4, a1[3]);
  uint64_t v5 = a1[1];
  sub_100016EAC((uint64_t)&v8);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v8;
  LOBYTE(v8) = v6;
  unsigned __int8 v7 = *(uint64_t **)(v5 + 8);
  *(void *)(v5 + 8) = v9;
  std::string v9 = v7;
  sub_100016EAC(v5);
  sub_100016EAC((uint64_t)&v8);
  sub_100016B28(&v9, v8);
}

void sub_10001CFF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void sub_10001CFF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v5 = *(NSObject **)(a1 + 24);
  void v6[2] = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_100006A84;
  v7[3] = &unk_100155AA0;
  v7[4] = a1 + 8;
  void v7[5] = v6;
  uint64_t v8 = v7;
  *a4 = 0xAAAAAAAAAAAAAA00;
  a4[1] = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100004668;
  block[3] = &unk_100155AC0;
  block[4] = a4;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_10001D120(void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    sub_10001EAF0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10001D174(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E6C8((uint64_t)a2, &v17);
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001E5C8((uint64_t)a2, &v15);
  if (!(_BYTE)v17)
  {
    LOBYTE(v22) = 0;
    *(void *)&long long v23 = 0;
    sub_100016EAC((uint64_t)&v22);
    sub_100016EAC((uint64_t)&v22);
    unint64_t v5 = a2[4];
    if (v5 >= a2[5])
    {
      uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)&v22);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v3;
  v13[1] = v3;
  long long v10 = (unsigned __int8 *)&v15;
  long long v11 = 0uLL;
  *(void *)&long long v12 = 0;
  *((void *)&v12 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v10);
  unsigned __int8 v7 = (unsigned __int8 *)&v15;
  long long v8 = 0uLL;
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = 0x8000000000000000;
  sub_1000157EC(&v7);
  long long v23 = v11;
  long long v24 = v12;
  long long v20 = v8;
  long long v21 = v9;
  char v25 = 0;
  int v22 = v10;
  long long v19 = v7;
  sub_10001ED0C((uint64_t)&v22, (uint64_t *)&v19, (unsigned __int8 *)&v17, (uint64_t)v13);
  int v22 = (unsigned __int8 *)&v15;
  long long v23 = 0uLL;
  *(void *)&long long v24 = 0;
  *((void *)&v24 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v22);
  uint64_t v4 = sub_100020720((unsigned __int8 **)v13, (uint64_t)&v22);
  LOBYTE(v22) = 6;
  *(void *)&long long v23 = v4;
  sub_100016EAC((uint64_t)&v22);
  sub_100016EAC((uint64_t)&v22);
  unint64_t v5 = a2[4];
  if (v5 < a2[5])
  {
LABEL_5:
    *(unsigned char *)unint64_t v5 = (_BYTE)v22;
    *(void *)(v5 + 8) = v23;
    sub_100016EAC((uint64_t)&v22);
    LOBYTE(v22) = 0;
    *(void *)&long long v23 = 0;
    sub_100016EAC(v5);
    uint64_t v6 = v5 + 16;
    goto LABEL_7;
  }
  uint64_t v6 = sub_100019524(a2 + 3, (uint64_t)&v22);
LABEL_7:
  a2[4] = v6;
  sub_100016EAC((uint64_t)&v22);
  sub_100016B28((uint64_t **)&v23, v22);
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
  sub_100016EAC((uint64_t)&v17);
  sub_100016B28(&v18, v17);
}

void sub_10001D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t *a27)
{
  sub_100028D64((uint64_t **)(v27 - 104));
  sub_100028D64(&a25);
  sub_100028D64(&a27);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_10001D3E4(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

void sub_10001D470(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[7];
  long long v3 = (std::__shared_weak_count *)a2[8];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001D738((uint64_t)a2, &v15);
  memset(&__p, 170, sizeof(__p));
  sub_100014F90((uint64_t)a2, &__p);
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  long long v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, std::string *, unint64_t *))(*(void *)v4 + 16))(&v12, v4, &__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  long long v20 = p_p;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v6;
  v18[1] = v6;
  sub_1000135DC((uint64_t)&v12, (const std::string::value_type **)&v20, (uint64_t)v18);
  v17[0] = (unsigned __int8 *)&v12;
  memset(&v17[1], 0, 24);
  v17[4] = (unsigned __int8 *)0x8000000000000000;
  sub_100013648(v17);
  if (sub_100013964((unsigned __int8 **)v18, v17))
  {
    uint64_t v7 = sub_1000155C8();
    if (!v7)
    {
      LOBYTE(v18[0]) = 0;
      *((void *)&v18[0] + 1) = 0;
      sub_100016EAC((uint64_t)v18);
      sub_100016EAC((uint64_t)v18);
      unint64_t v8 = a2[4];
      if (v8 >= a2[5])
      {
        uint64_t v9 = sub_100019524(a2 + 3, (uint64_t)v18);
      }
      else
      {
        *(unsigned char *)unint64_t v8 = v18[0];
        *(void *)(v8 + 8) = *((void *)&v18[0] + 1);
        sub_100016EAC((uint64_t)v18);
        LOBYTE(v18[0]) = 0;
        *((void *)&v18[0] + 1) = 0;
        sub_100016EAC(v8);
        uint64_t v9 = v8 + 16;
      }
      a2[4] = v9;
      sub_100016EAC((uint64_t)v18);
      sub_100016B28((uint64_t **)v18 + 1, LOBYTE(v18[0]));
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t)sub_100013AAC((unsigned __int8 **)v18);
  }
  unint64_t v10 = a2[4];
  if (v10 >= a2[5])
  {
    uint64_t v11 = sub_100013F48(a2 + 3, v7);
  }
  else
  {
    sub_100016A10(a2[4], v7);
    uint64_t v11 = v10 + 16;
    a2[4] = v10 + 16;
  }
  a2[4] = v11;
LABEL_15:
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
  if (v3) {
    sub_1000147D8(v3);
  }
}

void sub_10001D6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24)
{
  sub_100028D64(&a24);
  sub_100028D64((uint64_t **)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a17);
  if (v24) {
    sub_1000147D8(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001D738@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected map or null");
    goto LABEL_8;
  }
  unsigned int v5 = *(unsigned __int8 *)(v4 - 16);
  if (v5 >= 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected map or null");
LABEL_8:
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)a2 = v5;
  a2[1] = *(void *)(v4 - 8);
  sub_100016EAC(v4 - 16);
  *(unsigned char *)(v4 - 16) = 0;
  *(void *)(v4 - 8) = 0;
  sub_100016EAC((uint64_t)a2);
  uint64_t v7 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v7);
}

void sub_10001D81C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001D834(uint64_t a1, uint64_t a2)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001DC2C(a2, &v13);
  memset(&v12, 170, sizeof(v12));
  sub_100014F90(a2, &v12);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v11 = v3;
  sub_10001521C((uint64_t *)a2, (uint64_t)&v12, (uint64_t *)__p);
  if (__p[0] == *(void **)(a2 + 8))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Operation 'setEventField' tried to set field on non-existent event");
  }
  v8[0] = v13;
  uint64_t v9 = v14;
  sub_100016EAC((uint64_t)&v13);
  LOBYTE(v13) = 0;
  unint64_t v14 = 0;
  sub_100016EAC((uint64_t)v8);
  uint64_t v4 = sub_10001DA78((unsigned __int8 *)(*(void *)__p[0] + 40), (const void **)&__p[1]);
  sub_100016EAC((uint64_t)v8);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)uint64_t v4 = v8[0];
  v8[0] = v5;
  long long v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v9;
  uint64_t v9 = v6;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  sub_100016EAC((uint64_t)&v13);
  sub_100016B28(&v14, v13);
}

void sub_10001DA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_100028D64((uint64_t **)(v23 - 56));
  _Unwind_Resume(a1);
}

uint64_t *sub_10001DA78(unsigned __int8 *a1, const void **a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    char v5 = operator new(0x18uLL);
    void v5[2] = 0;
    v5[1] = 0;
    *char v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_100016EAC((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v12, v9);
    unint64_t v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(305, (uint64_t)&v13, exception);
  }
  long long v6 = (uint64_t **)*((void *)a1 + 1);
  *(void *)&long long v13 = a2;
  return sub_100016548(v6, a2, (uint64_t)&unk_100117318, (long long **)&v13) + 7;
}

void sub_10001DBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10001DC2C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected array");
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  char v7 = *(unsigned char *)(v4 - 16);
  uint64_t v6 = v4 - 16;
  *(unsigned char *)a2 = v7;
  a2[1] = *(void *)(v6 + 8);
  sub_100016EAC(v6);
  *(unsigned char *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  sub_100016EAC((uint64_t)a2);
  uint64_t v8 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v8);
}

void sub_10001DCEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DD00(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_10001DD4C(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_10001DD4C(char *a1)
{
  int v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_10001DD84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_10001DD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  v8.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  v8.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v8;
  __n128 v12 = v8;
  v11[0] = v8;
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 8) + 32))(v11);
  if (v12.n128_u8[8])
  {
    sub_10008DF0C(a4, v11);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2, a3);
    }
    else
    {
      a4->n128_u8[0] = 0;
      a4[2].n128_u8[8] = 0;
    }
  }
  return sub_10001DE9C((uint64_t **)v11);
}

uint64_t **sub_10001DE9C(uint64_t **a1)
{
  if (*((unsigned char *)a1 + 40))
  {
    sub_100016EAC((uint64_t)a1);
    sub_100016B28(a1 + 1, *(unsigned __int8 *)a1);
  }
  return a1;
}

void sub_10001DEDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  char v5 = *(NSObject **)(a1 + 24);
  void v6[2] = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_10000489C;
  v7[3] = &unk_100153C78;
  v7[4] = a1 + 8;
  void v7[5] = v6;
  __n128 v8 = v7;
  *a4 = 0xAAAAAAAAAAAAAA00;
  a4[1] = 0;
  sub_100016EAC((uint64_t)a4);
  sub_100016EAC((uint64_t)a4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000045AC;
  block[3] = &unk_100153C98;
  block[4] = a4;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_10001E000(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10001E46C(a2, a3, __p);
  uint64_t v6 = sub_10001E0EC((void *)(a1 + 8), (long long *)__p);
  sub_100016EAC((uint64_t)v11);
  sub_100016B28(&v12, v11[0]);
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    char v8 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  sub_100016A10(a4, (uint64_t)(v6 + 56));
  long long v7 = *(_OWORD *)(v6 + 72);
  *(unsigned char *)(a4 + 32) = v6[88];
  *(_OWORD *)(a4 + 16) = v7;
  char v8 = 1;
LABEL_6:
  *(unsigned char *)(a4 + 40) = v8;
}

void sub_10001E0E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

unsigned __int8 *sub_10001E0EC(void *a1, long long *a2)
{
  unint64_t v4 = sub_10001E1F0((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_10004640C(v12, v11 + 16, (unsigned __int8 *)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_10001E1F0(uint64_t a1, long long *a2)
{
  sub_10001E2A4(__p, a2);
  unint64_t v3 = sub_10001E31C(a1, (char *)__p);
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10001E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10001E2A4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100016A10((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10001E300(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10001E31C(uint64_t a1, char *a2)
{
  char v7 = -86;
  unint64_t v3 = sub_10000507C((uint64_t)&v7, a2);
  unint64_t v4 = sub_10001E3D8((uint64_t)&v6, (uint64_t)(a2 + 24));
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47)) + 3864292196u))
       + 3864292196u;
}

unint64_t sub_10001E3D8(uint64_t a1, uint64_t a2)
{
  sub_100007460(a2, -1, 0x20u, 0, 0, __p);
  unint64_t v2 = sub_1000141F4((uint64_t)&v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10001E46C(long long *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)a2 == 1 && *(void *)(*(void *)(a2 + 8) + 16))
  {
    sub_100016A10((uint64_t)v5, a2);
  }
  else
  {
    v5[0] = 0;
    char v6 = 0;
    sub_100016EAC((uint64_t)v5);
    sub_100016EAC((uint64_t)v5);
  }
  sub_10001E54C(a3, a1, (uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
}

void sub_10001E530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_10001E54C(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_100016A10((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_10001E5AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001E5C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (*(void *)(a1 + 24) == v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected array");
    goto LABEL_8;
  }
  if (*(unsigned char *)(v4 - 16) != 2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected array");
LABEL_8:
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)a2 = 2;
  a2[1] = *(void *)(v4 - 8);
  sub_100016EAC(v4 - 16);
  *(unsigned char *)(v4 - 16) = 0;
  *(void *)(v4 - 8) = 0;
  sub_100016EAC((uint64_t)a2);
  uint64_t v6 = *(void *)(a1 + 32) - 16;

  return sub_100016AC4(v3, v6);
}

void sub_10001E6B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E6C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 24) == v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack empty: expected number type");
    goto LABEL_14;
  }
  int v8 = *(unsigned __int8 *)(v3 - 16);
  uint64_t v6 = (char *)(v3 - 16);
  int v7 = v8;
  if ((v8 - 5) <= 2)
  {
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_100016A10((uint64_t)a2, (uint64_t)v6);
    uint64_t v9 = *(void *)(a1 + 32) - 16;
    return sub_100016AC4(v4, v9);
  }
  if (v7)
  {
    if (v7 == 4)
    {
      unsigned __int8 v13 = -86;
      sub_100072884(v6, &v13);
      uint64_t v11 = v13;
      sub_100016AC4(v4, *(void *)(a1 + 32) - 16);
      *(unsigned char *)a2 = 5;
      a2[1] = v11;
      sub_100016EAC((uint64_t)a2);
      return sub_100016EAC((uint64_t)a2);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C8FD0(exception, "EvaluationContext Stack type mismatch: expected number/null type");
LABEL_14:
  }
  sub_100016AC4(a1 + 24, (uint64_t)v6);
  *(unsigned char *)a2 = 0;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);

  return sub_100016EAC((uint64_t)a2);
}

void sub_10001E8A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001E8C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_10001E8CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1 + 8;
  v7[0] = a1;
  v7[1] = a2;
  long long v5 = *(NSObject **)(a1 + 24);
  v7[2] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_100006714;
  void v8[3] = &unk_1001559C0;
  _OWORD v8[4] = v4;
  v8[5] = v7;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v6;
  *(_OWORD *)a4 = v6;
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 40) = 0;
  uint64_t v9 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10000412C;
  block[3] = &unk_1001559E0;
  block[4] = a4;
  block[5] = &v9;
  dispatch_sync(v5, block);
}

uint64_t sub_10001E9CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  char v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 7;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_10001EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10001EAF0(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = v4 - 6;
      long long v6 = v4 - 3;
      sub_100016F68(&v6);
      long long v6 = v5;
      sub_100016F68(&v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_10001EB8C(uint64_t a1, uint64_t a2)
{
  return sub_10001EB94(a1 - 120, a2);
}

uint64_t sub_10001EB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100004374;
  void v6[3] = &unk_100155B40;
  v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100004338;
  block[3] = &unk_100155B60;
  block[4] = &v9;
  block[5] = &v7;
  uint64_t v9 = 0;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_10001EC90(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1000C1C84(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

__n128 sub_10001ED0C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  long long v24 = *(unsigned __int8 **)a1;
  uint64_t v7 = (__n128 *)(a1 + 8);
  long long v25 = *(_OWORD *)(a1 + 8);
  long long v26 = *(_OWORD *)(a1 + 24);
  uint64_t v21 = *a2;
  long long v8 = *(_OWORD *)(a2 + 3);
  long long v22 = *(_OWORD *)(a2 + 1);
  long long v23 = v8;
  uint64_t v9 = sub_100020528((uint64_t)&v24, (uint64_t)&v21);
  if (v9)
  {
    unint64_t v10 = v9;
    do
    {
      unint64_t v11 = v10 >> 1;
      long long v18 = *(unsigned __int8 **)a1;
      __n128 v12 = v7[1];
      __n128 v19 = *v7;
      __n128 v20 = v12;
      sub_10001EFF8(&v18, v10 >> 1);
      uint64_t v13 = (double *)sub_10001EE40(&v18);
      if (sub_10001F364(v13, a3))
      {
        uint64_t v14 = sub_100013C64(&v18);
        *(void *)a1 = *v14;
        __n128 v15 = *(__n128 *)(v14 + 3);
        __n128 *v7 = *(__n128 *)(v14 + 1);
        v7[1] = v15;
        unint64_t v11 = v10 + ~v11;
      }
      unint64_t v10 = v11;
    }
    while (v11);
  }
  *(void *)a4 = *(void *)a1;
  __n128 result = *v7;
  __n128 v17 = v7[1];
  *(__n128 *)(a4 + 8) = *v7;
  *(__n128 *)(a4 + 24) = v17;
  return result;
}

unsigned __int8 *sub_10001EE40(unsigned __int8 **a1)
{
  __n128 result = *a1;
  if (!result) {
    sub_100020874();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    long long v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      sub_1000F8E34();
    }
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    unint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    __n128 result = a1[2];
    if (result == v5) {
      sub_1000F8E60();
    }
  }
  else
  {
    if (!*result)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      sub_100015438(v8, "cannot get value");
      sub_10002B4EC(214, (uint64_t)v8, exception);
    }
    if (a1[4])
    {
      uint64_t v4 = __cxa_allocate_exception(0x20uLL);
      sub_100015438(v8, "cannot get value");
      sub_10002B4EC(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_10001EFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15) {
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **sub_10001EFF8(unsigned __int8 **result, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = result;
  if (a2 < 0)
  {
    do
      __n128 result = sub_1000BB7FC(v3);
    while (!__CFADD__(v2++, 1));
  }
  else if (a2)
  {
    unint64_t v4 = a2 + 1;
    do
    {
      __n128 result = sub_100013C64(v3);
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t *sub_10001F050(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    sub_100103034();
  }
  unint64_t v4 = *(uint64_t **)(v3 + 136);
  unint64_t v5 = (uint64_t *)(v3 + 136);
  uint64_t v6 = *(void *)(v3 + 144) - (void)v4;
  if (!v6) {
    goto LABEL_20;
  }
  __n128 v20 = (uint64_t *)(v3 + 136);
  uint64_t v21 = v3;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
  do
  {
    unint64_t v8 = v7 >> 1;
    uint64_t v9 = (double *)*a2;
    unint64_t v10 = (double *)a2[1];
    if ((double *)*a2 != v10)
    {
      unint64_t v11 = &v4[6 * v8];
      uint64_t v13 = (unsigned __int8 *)*v11;
      __n128 v12 = (unsigned __int8 *)v11[1];
      while (v13 != v12 && (sub_10001F364((double *)v13, (unsigned __int8 *)v9) & 1) == 0)
      {
        if ((sub_10001F364(v9, v13) & 1) == 0)
        {
          v13 += 16;
          v9 += 2;
          if (v9 != v10) {
            continue;
          }
        }
        goto LABEL_12;
      }
      unint64_t v4 = v11 + 6;
      unint64_t v8 = v7 + ~v8;
    }
LABEL_12:
    unint64_t v7 = v8;
  }
  while (v8);
  uint64_t v3 = v21;
  if (v4 == *(uint64_t **)(v21 + 144))
  {
    unint64_t v5 = v20;
LABEL_20:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    unint64_t v4 = (uint64_t *)sub_10001F9EC(v5, v4, (uint64_t)&v36);
    uint64_t v33 = (void **)&v37 + 1;
    sub_100016F68(&v33);
    uint64_t v33 = (void **)&v36;
    sub_100016F68(&v33);
    sub_10001FC5C(*a2, a2[1], v4);
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001F9A0((uint64_t)&v36, a2);
    sub_10001FD54(v3, (uint64_t)&v36, &v28);
    sub_100016EAC((uint64_t)&v36);
    sub_100016B28((uint64_t **)&v36 + 1, v36);
    if (v28 == 2)
    {
      long long v25 = (void **)&v28;
      long long v26 = 0uLL;
      *(void *)&long long v27 = 0;
      *((void *)&v27 + 1) = 0x8000000000000000;
      sub_10001D3E4((unsigned __int8 **)&v25);
      long long v22 = (unsigned __int8 *)&v28;
      long long v23 = 0uLL;
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0x8000000000000000;
      sub_1000157EC(&v22);
      long long v34 = v26;
      long long v35 = v27;
      long long v31 = v23;
      long long v32 = v24;
      *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v37 = v18;
      long long v38 = v18;
      long long v36 = v18;
      uint64_t v33 = v25;
      uint64_t v30 = v22;
      sub_100020460((uint64_t)&v33, &v30, v4 + 3, (uint64_t)&v36);
    }
    sub_100016EAC((uint64_t)&v28);
    sub_100016B28(&v29, v28);
    return v4;
  }
  uint64_t v14 = (unsigned __int8 *)*v4;
  char v15 = (unsigned __int8 *)v4[1];
  long long v16 = (unsigned __int8 *)*a2;
  __n128 v17 = (unsigned __int8 *)a2[1];
  unint64_t v5 = v20;
  if (&v15[-*v4] != &v17[-*a2]) {
    goto LABEL_20;
  }
  while (v14 != v15 && v16 != v17)
  {
    if (!sub_10001F600(v14, v16)) {
      goto LABEL_20;
    }
    v14 += 16;
    v16 += 16;
  }
  if (v14 != v15 || v16 != v17) {
    goto LABEL_20;
  }
  return v4;
}

void sub_10001F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F364(double *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  uint64_t v3 = *a2;
  if (v2 != v3)
  {
    if (v2 != 5 || v3 != 7)
    {
      if (v2 == 7 && v3 == 5)
      {
        double v8 = a1[1];
        double v9 = (double)*((uint64_t *)a2 + 1);
      }
      else
      {
        if (v2 == 6 && v3 == 7)
        {
          double v7 = (double)*((unint64_t *)a1 + 1);
          return *((double *)a2 + 1) > v7;
        }
        if (v2 != 7 || v3 != 6)
        {
          if (v2 == 5 && v3 == 6 || v2 == 6 && v3 == 5) {
            return *((void *)a1 + 1) < *((void *)a2 + 1);
          }
          uint64_t result = 0;
          if (v2 <= 8 && v3 <= 8)
          {
            unsigned int v20 = byte_10011EB54[v2];
            unsigned int v21 = byte_10011EB54[v3];
LABEL_40:
            BOOL v22 = v20 >= v21;
            return !v22;
          }
          return result;
        }
        double v8 = a1[1];
        double v9 = (double)*((unint64_t *)a2 + 1);
      }
      return v8 < v9;
    }
    double v7 = (double)*((uint64_t *)a1 + 1);
    return *((double *)a2 + 1) > v7;
  }
  switch(*(unsigned char *)a1)
  {
    case 1:
      return sub_100070410(**((void ***)a1 + 1), (void *)(*((void *)a1 + 1) + 8), **((void ***)a2 + 1), (void *)(*((void *)a2 + 1) + 8));
    case 2:
      return sub_100070380(**((void **)a1 + 1), *(void *)(*((void *)a1 + 1) + 8), **((void **)a2 + 1), *(void *)(*((void *)a2 + 1) + 8));
    case 3:
      uint64_t v10 = *((void *)a1 + 1);
      uint64_t v11 = *((void *)a2 + 1);
      int v12 = *(char *)(v11 + 23);
      int v13 = *(char *)(v10 + 23);
      if (v13 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        size_t v14 = *(void *)(v10 + 8);
      }
      if (v13 >= 0) {
        char v15 = (const void *)*((void *)a1 + 1);
      }
      else {
        char v15 = *(const void **)v10;
      }
      if (v12 >= 0) {
        size_t v16 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        size_t v16 = *(void *)(v11 + 8);
      }
      if (v12 >= 0) {
        __n128 v17 = (const void *)*((void *)a2 + 1);
      }
      else {
        __n128 v17 = *(const void **)v11;
      }
      if (v16 >= v14) {
        size_t v18 = v14;
      }
      else {
        size_t v18 = v16;
      }
      int v19 = memcmp(v15, v17, v18);
      if (v19) {
        return v19 < 0;
      }
      else {
        return v14 < v16;
      }
    case 4:
      unsigned int v20 = *((unsigned __int8 *)a1 + 8);
      unsigned int v21 = a2[8];
      goto LABEL_40;
    case 5:
      return *((void *)a1 + 1) < *((void *)a2 + 1);
    case 6:
      BOOL v22 = *((void *)a1 + 1) >= *((void *)a2 + 1);
      return !v22;
    case 7:
      double v8 = a1[1];
      double v9 = *((double *)a2 + 1);
      return v8 < v9;
    case 8:
      long long v23 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      if (v25 == v24) {
        return 0;
      }
      long long v27 = (unsigned __int8 *)**((void **)a1 + 1);
      long long v26 = *(unsigned __int8 **)(*((void *)a1 + 1) + 8);
      uint64_t v28 = v25 + 1;
      break;
    default:
      return 0;
  }
  while (v27 != v26)
  {
    unsigned int v29 = *v27;
    unsigned int v30 = *(unsigned __int8 *)(v28 - 1);
    if (v29 < v30) {
      break;
    }
    uint64_t result = 0;
    ++v27;
    if (v30 < v29 || v28++ == v24) {
      return result;
    }
  }
  return 1;
}

void sub_10001F5F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10001F600(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      double v12 = (double)*((uint64_t *)a1 + 1);
    }
    else
    {
      if (v3 == 7 && v4 == 5)
      {
        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((uint64_t *)a2 + 1);
        return v10 == v11;
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 != 7 || v4 != 6)
        {
          if (v3 != 6 || v4 != 5)
          {
            uint64_t result = 0;
            if (v3 != 5 || v4 != 6) {
              return result;
            }
          }
          return *((void *)a1 + 1) == *((void *)a2 + 1);
        }
        double v10 = *((double *)a1 + 1);
        double v11 = (double)*((unint64_t *)a2 + 1);
        return v10 == v11;
      }
      double v12 = (double)*((unint64_t *)a1 + 1);
    }
    return *((double *)a2 + 1) == v12;
  }
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      int v13 = (void *)*((void *)a1 + 1);
      size_t v14 = (void *)*((void *)a2 + 1);
      if (v13[2] != v14[2]) {
        return 0;
      }
      __n128 v17 = (void *)*v13;
      char v15 = v13 + 1;
      size_t v16 = v17;
      if (v17 == v15) {
        return result;
      }
      size_t v18 = (void *)*v14;
      break;
    case 2:
      unsigned int v29 = (uint64_t *)*((void *)a1 + 1);
      unsigned int v30 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v31 = *v29;
      uint64_t v32 = v29[1];
      uint64_t v33 = *v30;
      if (v32 - *v29 != v30[1] - *v30) {
        return 0;
      }
      while (v31 != v32)
      {
        uint64_t result = sub_10001F600(v31, v33);
        if (!result) {
          break;
        }
        v31 += 16;
        v33 += 16;
      }
      return result;
    case 3:
      long long v34 = (unsigned __int8 *)*((void *)a1 + 1);
      long long v35 = (unsigned __int8 **)*((void *)a2 + 1);
      uint64_t v36 = v34[23];
      if ((v36 & 0x80u) == 0) {
        long long v37 = (unsigned __int8 *)v34[23];
      }
      else {
        long long v37 = (unsigned __int8 *)*((void *)v34 + 1);
      }
      long long v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      int v39 = (char)v38;
      if ((char)v38 < 0) {
        long long v38 = v35[1];
      }
      if (v37 != v38) {
        return 0;
      }
      if (v39 >= 0) {
        long long v40 = (unsigned __int8 *)*((void *)a2 + 1);
      }
      else {
        long long v40 = *v35;
      }
      if ((v36 & 0x80) != 0) {
        return memcmp(*(const void **)v34, v40, *((void *)v34 + 1)) == 0;
      }
      if (v34[23])
      {
        uint64_t v41 = v36 - 1;
        do
        {
          int v43 = *v34++;
          int v42 = v43;
          int v45 = *v40++;
          int v44 = v45;
          BOOL v47 = v41-- != 0;
          uint64_t result = v42 == v44;
        }
        while (v42 == v44 && v47);
      }
      return result;
    case 4:
      return a1[8] == a2[8];
    case 5:
    case 6:
      return *((void *)a1 + 1) == *((void *)a2 + 1);
    case 7:
      double v10 = *((double *)a1 + 1);
      double v11 = *((double *)a2 + 1);
      return v10 == v11;
    case 8:
      uint64_t v48 = *((void *)a2 + 1);
      v50[0] = *((void *)a1 + 1);
      v50[1] = v50[0] + 24;
      v50[2] = v50[0] + 25;
      v49[0] = v48;
      v49[1] = v48 + 24;
      v49[2] = v48 + 25;
      return sub_1000464F4((uint64_t)&v51, (uint64_t)v50, (uint64_t)v49);
    default:
      return 0;
  }
  while (1)
  {
    uint64_t v19 = *((unsigned __int8 *)v16 + 55);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *((unsigned __int8 *)v16 + 55);
    }
    else {
      uint64_t v20 = v16[5];
    }
    uint64_t v21 = *((unsigned __int8 *)v18 + 55);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = v18[5];
    }
    if (v20 != v21) {
      return 0;
    }
    long long v23 = (const void **)(v16 + 4);
    if (v22 >= 0) {
      uint64_t v24 = (unsigned __int8 *)(v18 + 4);
    }
    else {
      uint64_t v24 = (unsigned __int8 *)v18[4];
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, v16[5])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v16 + 55))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        long long v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19) {
          goto LABEL_41;
        }
      }
      return 0;
    }
LABEL_41:
    uint64_t result = sub_10001F600(v16 + 7, v18 + 7);
    if (result)
    {
      uint64_t v25 = (void *)v16[1];
      long long v26 = v16;
      if (v25)
      {
        do
        {
          size_t v16 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          size_t v16 = (void *)v26[2];
          BOOL v6 = *v16 == (void)v26;
          long long v26 = v16;
        }
        while (!v6);
      }
      long long v27 = (void *)v18[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          long long v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v18[2];
          BOOL v6 = *v28 == (void)v18;
          size_t v18 = v28;
        }
        while (!v6);
      }
      uint64_t result = 1;
      size_t v18 = v28;
      if (v16 != v15) {
        continue;
      }
    }
    return result;
  }
}

void sub_10001F994(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10001F9A0(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 2;
  *(void *)(a1 + 8) = sub_100018254(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

uint64_t sub_10001F9EC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  BOOL v6 = (void *)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if ((unint64_t)v6 >= v11)
  {
    long long v19 = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v7) >> 4) + 1;
    if (v13 > 0x555555555555555) {
      sub_100028DEC();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    *(void *)&v20[16] = v9;
    if (v15) {
      size_t v16 = (char *)sub_10002019C(v9, v15);
    }
    else {
      size_t v16 = 0;
    }
    *(void *)&long long v19 = v16;
    *((void *)&v19 + 1) = &v16[48 * v8];
    *(void *)uint64_t v20 = *((void *)&v19 + 1);
    *(void *)&char v20[8] = &v16[48 * v15];
    sub_1000202B8(&v19, a3);
    uint64_t v4 = sub_10001FE94(a1, &v19, v4);
    sub_1000201E4((uint64_t)&v19);
  }
  else if (a2 == v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    __n128 v17 = (void *)(v7 + 48 * v8);
    v17[3] = 0;
    v17[4] = 0;
    v17[5] = 0;
    *(_OWORD *)(v17 + 3) = *(_OWORD *)(a3 + 24);
    v17[5] = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    a1[1] = (uint64_t)(a2 + 6);
  }
  else
  {
    long long v19 = *(_OWORD *)a3;
    *(void *)uint64_t v20 = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)&char v20[8] = *(_OWORD *)(a3 + 24);
    uint64_t v21 = *(void *)(a3 + 40);
    uint64_t v22 = v9;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    sub_1000271F8((uint64_t)a1, (uint64_t)a2, a1[1], (uint64_t)(a2 + 6));
    sub_100012330((void **)v4);
    *(_OWORD *)uint64_t v4 = v19;
    *(void *)(v4 + 16) = *(void *)v20;
    long long v19 = 0uLL;
    *(void *)uint64_t v20 = 0;
    unint64_t v12 = v7 + 48 * v8;
    sub_100012330((void **)(v12 + 24));
    *(_OWORD *)(v12 + 24) = *(_OWORD *)&v20[8];
    *(void *)(v12 + 40) = v21;
    *(void *)&char v20[8] = 0;
    *(void *)&v20[16] = 0;
    uint64_t v21 = 0;
    long long v23 = (void **)&v20[8];
    sub_100016F68(&v23);
    long long v23 = (void **)&v19;
    sub_100016F68(&v23);
  }
  return v4;
}

void sub_10001FC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_10001FC5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  BOOL v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_10001FCF0(&v6, v3);
    v3 += 16;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **sub_10001FCF0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = sub_100013F48(*a1, a2);
  }
  else
  {
    sub_100016A10((*a1)[1], a2);
    uint64_t v5 = v4 + 16;
    v3[1] = v4 + 16;
  }
  v3[1] = v5;
  return a1;
}

void sub_10001FD4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10001FD54(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("loadSingleStatisticFromStore", "AggregatingTransform.cpp", 140, "initialized()");
  }
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0;
  *(unsigned char *)a3 = 0;
  sub_100016EAC((uint64_t)a3);
  sub_100016EAC((uint64_t)a3);
  sub_100015438(__p, "loading single statistic from store");
  unint64_t v10 = 0;
  BOOL v6 = operator new(0x20uLL);
  *BOOL v6 = off_100157D98;
  v6[1] = a3;
  void v6[2] = a1;
  void v6[3] = a2;
  unint64_t v10 = v6;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v9);
  sub_10001266C(v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10001FE88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10001FE94(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100020024((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10001FF48(v7, a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_10001FF48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a4;
  uint64_t v7 = a4;
  v8[0] = a1;
  v8[1] = &v6;
  v8[2] = &v7;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      void v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4[3] = 0;
      void v4[4] = 0;
      v4[5] = 0;
      *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
      v4[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v4 += 6;
      a2 += 48;
    }
    while (a2 != a3);
    uint64_t v7 = v4;
  }
  LOBYTE(v9) = 1;
  sub_100020118((uint64_t)v8);
  return v4;
}

uint64_t sub_100020024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v12 = a6;
  *((void *)&v12 + 1) = a7;
  long long v11 = v12;
  v13[0] = a1;
  v13[1] = &v11;
  _OWORD v13[2] = &v12;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v12 + 1) - 48;
      *((void *)&v12 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v12;
  }
  LOBYTE(v14) = 1;
  sub_100020164((uint64_t)v13);
  return v9;
}

uint64_t sub_100020118(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000C1F40(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100020164(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000C1E24((uint64_t *)a1);
  }
  return a1;
}

void *sub_10002019C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_100028E94();
  }
  return operator new(48 * a2);
}

uint64_t sub_1000201E4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002021C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void **)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    uint64_t v6 = (void **)(i - 24);
    sub_100016F68(&v6);
    uint64_t v6 = v5;
    sub_100016F68(&v6);
  }
}

__n128 sub_1000202B8(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == (void *)*a1) {
        unint64_t v9 = 1;
      }
      else {
        unint64_t v9 = 0x5555555555555556 * (((uint64_t)v4 - *a1) >> 4);
      }
      unint64_t v10 = v9 >> 2;
      uint64_t v11 = a1[4];
      uint64_t v19 = a1[4];
      *(void *)&long long v17 = sub_10002019C(v11, v9);
      *((void *)&v17 + 1) = v17 + 48 * v10;
      *(void *)&long long v18 = *((void *)&v17 + 1);
      *((void *)&v18 + 1) = v17 + 48 * v12;
      sub_1000C1DB8((uint64_t)&v17, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 4));
      long long v13 = v18;
      long long v14 = *(_OWORD *)a1;
      long long v15 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v17;
      *((_OWORD *)a1 + 1) = v13;
      long long v17 = v14;
      long long v18 = v15;
      sub_1000201E4((uint64_t)&v17);
      unint64_t v4 = (void *)a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      sub_1000C1D20((uint64_t)&v17, v5, (uint64_t)v4, v5 - 48 * (v7 >> 1));
      unint64_t v4 = v8;
      a1[1] -= 48 * (v7 >> 1);
      a1[2] = v8;
    }
  }
  *unint64_t v4 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 3) = result;
  v4[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[2] += 48;
  return result;
}

void sub_100020444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_100020460@<Q0>(uint64_t a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = a3;
  unint64_t v10 = a3;
  if (!sub_1000205D8((unsigned __int8 **)a1, a2))
  {
    do
    {
      long long v8 = sub_10001EE40((unsigned __int8 **)a1);
      sub_100011BF4(&v10, (uint64_t)v8);
      sub_100013C64((unsigned __int8 **)a1);
    }
    while (!sub_1000205D8((unsigned __int8 **)a1, a2));
    unint64_t v4 = v10;
  }
  *(void *)a4 = *(void *)a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v4;
  return result;
}

uint64_t sub_100020528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 **)a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = v4;
  unint64_t v10 = v2;
  uint64_t v7 = v3;
  uint64_t v5 = 0;
  while (!sub_1000205D8(&v10, &v7))
  {
    ++v5;
    sub_100013C64(&v10);
  }
  return v5;
}

BOOL sub_1000205D8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v8, "cannot compare iterators of different containers");
    sub_10002B4EC(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    sub_1000F8E08();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    long long v4 = a1[2];
    uint64_t v5 = a2[2];
  }
  else if (v3 == 1)
  {
    long long v4 = a1[1];
    uint64_t v5 = a2[1];
  }
  else
  {
    long long v4 = a1[4];
    uint64_t v5 = a2[4];
  }
  return v4 == v5;
}

void sub_1000206E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_100020720(unsigned __int8 **a1, uint64_t a2)
{
  if (!*a1) {
    sub_100027DFC();
  }
  int v2 = **a1;
  if (v2 == 2) {
    return (uint64_t)&a1[2][-*(void *)(a2 + 16)] >> 4;
  }
  if (v2 == 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v5, "cannot use offsets with object iterators");
    sub_10002B4EC(209, (uint64_t)v5, exception);
  }
  return (uint64_t)&a1[4][-*(void *)(a2 + 32)];
}

void sub_100020814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_100020850(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100020874()
{
  __assert_rtn("operator*", "iter_impl.hpp", 242, "m_object != nullptr");
}

uint64_t sub_1000208A0(uint64_t a1)
{
  *(void *)a1 = off_100157BC0;
  sub_10001C900((uint64_t *)(a1 + 192), 0);
  int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    long long v4 = (void **)(a1 + 136);
    sub_10001D120(&v4);
  }
  sub_10002094C(a1);
  return a1;
}

uint64_t sub_10002094C(uint64_t a1)
{
  *(void *)a1 = off_100156F78;
  sub_100016EAC(a1 + 56);
  sub_100016B28((uint64_t **)(a1 + 64), *(unsigned __int8 *)(a1 + 56));
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_1000147D8(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1000209B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_100024914(v2);
  memset(v15, 170, sizeof(v15));
  sub_100020BEC((void *)v2, v15);
  if (v15[0] == v15[1])
  {
    long long v9 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
    {
      sub_1000A5458(v2, &__p);
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (*(char *)(v3 + 23) >= 0) {
        uint64_t v11 = v3;
      }
      else {
        uint64_t v11 = *(void *)v3;
      }
      *(_DWORD *)long long buf = 136446466;
      long long v17 = p_p;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%{public}sTransform] transform '%s' has no data to persist", buf, 0x16u);
      if (v14 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v6 = *(unsigned int *)(v2 + 100);
    uint64_t v7 = *(unsigned int *)(v2 + 108);
    uint64_t v8 = *(unsigned int *)(v2 + 80);
    sub_10001F9A0((uint64_t)&__p, v15);
    **(unsigned char **)(a1 + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v4 + 152))(v4, v5, v3, v6, v7, v8, v2 + 88, &__p);
    sub_100016EAC((uint64_t)&__p);
    sub_100016B28(&v13, __p);
  }
  std::string __p = v15;
  sub_100016F68((void ***)&__p);
}

void sub_100020BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100016F68(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100020BE4(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  return sub_1000212B8(a1 - 120, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100020BEC(void *a1@<X0>, void *a2@<X8>)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("serialize", "AggregatingTransform.cpp", 193, "initialized()");
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v7, 0, 0, 0, 2);
  uint64_t v4 = (uint64_t *)a1[17];
  for (i = (uint64_t *)a1[18]; v4 != i; uint64_t v4 = v6 + 3)
  {
    long long v11 = xmmword_10011B640;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    *((void *)&v11 + 1) = sub_10001220C(&v13, &v12);
    sub_100016EAC((uint64_t)&v11);
    sub_100020DF8((uint64_t)&v11, v4);
    uint64_t v6 = v4 + 3;
    sub_100020DF8((uint64_t)&v11, v6);
    v9[0] = v11;
    unint64_t v10 = (uint64_t *)*((void *)&v11 + 1);
    sub_100016EAC((uint64_t)&v11);
    LOBYTE(v11) = 0;
    *((void *)&v11 + 1) = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)&v11);
    sub_100016B28((uint64_t **)&v11 + 1, v11);
    sub_1000210E0((uint64_t)&v7, (uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  sub_100011C74((uint64_t)&v7, a2);
  sub_100016EAC((uint64_t)&v7);
  sub_100016B28(&v8, v7);
}

void sub_100020DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

uint64_t sub_100020DF8(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unint64_t v10 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v13, v10);
      long long v11 = std::string::insert(&v13, 0, "cannot use emplace_back() with ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
      long long v14 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(311, (uint64_t)&v14, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    sub_100016EAC(a1);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t v7 = sub_100020FC4(v5, a2);
  }
  else
  {
    sub_10001F9A0(v5[1], a2);
    uint64_t v7 = v6 + 16;
    v5[1] = v6 + 16;
  }
  v5[1] = v7;
  return v7 - 16;
}

void sub_100020F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100020FC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000171B0(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::string v13 = v10;
  long long v14 = &v10[16 * v4];
  size_t v16 = &v10[16 * v9];
  sub_10001F9A0((uint64_t)v14, a2);
  std::string::size_type v15 = v14 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_1000210CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000210E0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unint64_t v9 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v12, v9);
      unint64_t v10 = std::string::insert(&v12, 0, "cannot use push_back() with ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
      long long v13 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(308, (uint64_t)&v13, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    uint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    *uint64_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    sub_100016EAC(a1);
  }
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t result = sub_100019524(v5, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = *(unsigned char *)a2;
    *(void *)(v6 + 8) = *(void *)(a2 + 8);
    sub_100016EAC(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC(v6);
    uint64_t result = v6 + 16;
  }
  v5[1] = result;
  return result;
}

void sub_100021250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1000212B0()
{
  return 1;
}

uint64_t sub_1000212B8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v14 = a4;
  int v15 = a2;
  int v12 = a6;
  int v13 = a5;
  uint64_t v8 = a1 + 8;
  v11[0] = a1;
  v11[1] = a3;
  __n128 v11[2] = &v15;
  v11[3] = &v14;
  void v11[4] = &v13;
  v11[5] = &v12;
  v11[6] = a7;
  v11[7] = a8;
  unint64_t v9 = *(NSObject **)(a1 + 24);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000;
  _OWORD v16[2] = sub_10000A588;
  void v16[3] = &unk_100155DC0;
  v16[4] = v8;
  v16[5] = v11;
  unsigned __int8 v19 = -86;
  long long v17 = v16;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  block[4] = &v19;
  block[5] = &v17;
  dispatch_sync(v9, block);
  return v19;
}

uint64_t *sub_1000213D8(uint64_t a1, const void **a2)
{
  int v12 = (uint64_t *)(a1 + 184);
  uint64_t v13 = a1 + 184;
  uint64_t result = sub_10002188C(&v12, a2, a2, (uint64_t)&v13, 1, 1);
  unint64_t v5 = v4;
  if (result != v4)
  {
    unint64_t v6 = (void *)(a1 + 176);
    do
    {
      uint64_t v7 = result[2];
      uint64_t v8 = result;
      if (v7)
      {
        do
        {
          unint64_t v9 = (uint64_t *)v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v10 = v8;
          uint64_t v8 = (uint64_t *)*v8;
        }
        while (v10 == (uint64_t *)v8[2]);
        if ((uint64_t *)v10[2] == v8) {
          unint64_t v9 = v10;
        }
        else {
          unint64_t v9 = v8;
        }
      }
      long long v11 = result;
      sub_100025834(v6, (uint64_t *)&v11, &v13);
      uint64_t result = v9;
    }
    while (v9 != v5);
  }
  return result;
}

void sub_1000214C4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  size_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v4 = (const void **)(*v3 + 16);
  unint64_t v5 = operator new(0x20uLL);
  *unint64_t v5 = off_1001526E0;
  v5[1] = v3;
  void v5[2] = &v17;
  void v5[3] = &v16;
  long long v23 = v5;
  sub_10002178C(v2 + 184, v4, (uint64_t)buf);
  sub_100021704(buf);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v13 = 0;
  if (!v16)
  {
    uint64_t v6 = *(void *)(v2 + 88);
    uint64_t v7 = (uint64_t *)v1[1];
    uint64_t v8 = *v7;
    unint64_t v9 = operator new(0x38uLL);
    *unint64_t v9 = off_100152770;
    v9[1] = v2;
    _DWORD v9[2] = v7;
    void v9[3] = &v17;
    void v9[4] = &v14;
    v9[5] = &v15;
    v9[6] = &v13;
    long long v23 = v9;
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v6 + 112))(v6, v8 + 16, buf);
    sub_100022018(buf);
    if (v13)
    {
      sub_100040A3C((void *)(v2 + 184));
      uint64_t v14 = 0;
    }
  }
  unint64_t v10 = qword_10015EF50;
  if (os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)v1[1];
    int v12 = (void *)(v11 + 16);
    if (*(char *)(v11 + 39) < 0) {
      int v12 = (void *)*v12;
    }
    *(_DWORD *)long long buf = 136316162;
    unsigned __int8 v19 = v12;
    __int16 v20 = 2050;
    uint64_t v21 = v17;
    __int16 v22 = 2050;
    long long v23 = v16;
    __int16 v24 = 2050;
    uint64_t v25 = v15;
    __int16 v26 = 2050;
    uint64_t v27 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[Transform Cache] Cache performance for input event %s: { transforms: %{public}zu, hit: %{public}zu, loaded: %{public}zu, inserted: %{public}zu}", buf, 0x34u);
  }
  sub_100021AAC(v2);
}

void sub_1000216E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100021704((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100021704(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10002178C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v8 = (uint64_t *)(a1 + 184);
  v9[0] = a1 + 184;
  uint64_t result = sub_10002188C(&v8, a2, a2, (uint64_t)v9, 1, 1);
  if (result == v7)
  {
    ++*(_DWORD *)(a1 + 16);
  }
  else
  {
    ++*(_DWORD *)(a1 + 20);
    v9[0] = off_100152660;
    v9[1] = a3;
    void v9[3] = v9;
    sub_100023E14(a1, a2, (uint64_t)v9);
    return sub_100023EAC(v9);
  }
  return result;
}

void sub_100021870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100023EAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002188C(uint64_t **a1, const void **a2, const void **a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6 = *a1;
  uint64_t v7 = **a1;
  if (!v7) {
    return *a1;
  }
  while (1)
  {
    if (sub_1000185FC((uint64_t)&v26, (const void **)(v7 + 32), a2))
    {
      if (!sub_1000185FC((uint64_t)&v26, (const void **)(v7 + 32), a3)) {
        sub_1000F9918();
      }
      int v12 = (uint64_t *)(v7 + 16);
      goto LABEL_7;
    }
    if (!sub_1000185FC((uint64_t)&v26, a3, (const void **)(v7 + 32))) {
      break;
    }
    int v12 = (uint64_t *)(v7 + 8);
    uint64_t v6 = (uint64_t *)v7;
LABEL_7:
    uint64_t v7 = *v12;
    char v13 = v6;
    if (!*v12) {
      return v13;
    }
  }
  if ((a5 & 1) == 0
    && (a6 & 1) == 0
    && !sub_1000185FC((uint64_t)&v26, a2, (const void **)(v7 + 32))
    && !sub_1000185FC((uint64_t)&v26, (const void **)(v7 + 32), a3))
  {
    sub_1000F9944();
  }
  if (a5)
  {
    uint64_t v14 = *(void *)(v7 + 8);
    char v13 = (uint64_t *)v7;
    if (v14)
    {
      char v13 = (uint64_t *)v7;
      do
      {
        BOOL v15 = sub_1000185FC((uint64_t)&v26, (const void **)(v14 + 32), a2);
        if (v15) {
          uint64_t v16 = 16;
        }
        else {
          uint64_t v16 = 8;
        }
        if (!v15) {
          char v13 = (uint64_t *)v14;
        }
        uint64_t v14 = *(void *)(v14 + v16);
      }
      while (v14);
    }
  }
  else
  {
    char v13 = v6;
    uint64_t v17 = v7;
    do
    {
      BOOL v18 = sub_1000185FC((uint64_t)&v26, a2, (const void **)(v17 + 32));
      if (v18) {
        uint64_t v19 = 8;
      }
      else {
        uint64_t v19 = 16;
      }
      if (v18) {
        char v13 = (uint64_t *)v17;
      }
      uint64_t v17 = *(void *)(v17 + v19);
    }
    while (v17);
  }
  if (a6)
  {
    for (uint64_t i = *(void *)(v7 + 16); i; uint64_t i = *(void *)(i + v22))
    {
      if (sub_1000185FC((uint64_t)&v26, a3, (const void **)(i + 32))) {
        uint64_t v22 = 8;
      }
      else {
        uint64_t v22 = 16;
      }
    }
  }
  else
  {
    do
    {
      if (sub_1000185FC((uint64_t)&v26, (const void **)(v7 + 32), a3)) {
        uint64_t v24 = 16;
      }
      else {
        uint64_t v24 = 8;
      }
      uint64_t v7 = *(void *)(v7 + v24);
    }
    while (v7);
  }
  return v13;
}

void sub_100021AAC(uint64_t a1)
{
  int v1 = dword_10015ECF8++;
  HIDWORD(v2) = -1030792151 * v1 + 85899344;
  LODWORD(v2) = HIDWORD(v2);
  if ((v2 >> 1) <= 0x51EB850)
  {
    uint64_t v5 = *(int *)(a1 + 200);
    uint64_t v4 = *(int *)(a1 + 204);
    uint64_t v6 = *(void *)(a1 + 192);
    sub_1000274E0(a1 + 184);
    uint64_t v7 = *(void *)(a1 + 352);
    uint64_t v8 = v5 + v4;
    int v9 = dword_10015ECF8 % 1000;
    unint64_t v10 = qword_10015EF50;
    if (dword_10015ECF8 % 1000)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 67110400;
        int v12 = v4;
        __int16 v13 = 2048;
        uint64_t v14 = v8;
        __int16 v15 = 2048;
        double v16 = (double)(int)v4 * 100.0 / (double)(int)v8;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        __int16 v21 = 2048;
        uint64_t v22 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[Transform Manager] Cache performance: {cacheHits: %d / %ld (%.2f%%), keyCount: %zu, nodeCount: %zu, cacheCost: %zu}", (uint8_t *)&v11, 0x3Au);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_INFO))
    {
      int v11 = 67110400;
      int v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      double v16 = (double)(int)v4 * 100.0 / (double)(int)v8;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      __int16 v19 = 2048;
      uint64_t v20 = v7;
      __int16 v21 = 2048;
      uint64_t v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[Transform Manager] Cache performance: {cacheHits: %d / %ld (%.2f%%), keyCount: %zu, nodeCount: %zu, cacheCost: %zu}", (uint8_t *)&v11, 0x3Au);
    }
    sub_100027664(v9 != 0);
  }
}

void sub_100021C9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015F100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015F100))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015EB20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015F100);
  }
  std::mutex::lock(&stru_10015EB20);
  uint64_t v10 = a1 + 120;
  uint64_t v11 = a1;
  int v12 = a2;
  uint64_t v5 = *(NSObject **)(a1 + 24);
  __int16 v19 = _NSConcreteStackBlock;
  uint64_t v20 = 0x40000000;
  __int16 v21 = sub_10000660C;
  uint64_t v22 = &unk_10015A210;
  uint64_t v23 = a1 + 8;
  uint64_t v24 = &v10;
  uint64_t v33 = &v19;
  LOBYTE(v25) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000;
  unsigned int v29 = sub_1000065D0;
  unsigned int v30 = &unk_100159F20;
  uint64_t v31 = (unsigned __int8 *)&v25;
  uint64_t v32 = &v33;
  dispatch_sync(v5, &block);
  if ((_BYTE)v25)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEBUG)) {
      sub_1000E5D20();
    }
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v33 = (void ***)0xAAAAAAAAAAAAAA00;
      unint64_t v34 = 0xAAAAAAAAAAAAAA00;
      uint64_t v10 = a1;
      uint64_t v11 = a1 + 120;
      int v12 = &v18;
      __int16 v13 = &v17;
      uint64_t v14 = &v16;
      __int16 v15 = &v33;
      double v16 = 100.0;
      uint64_t v6 = *(NSObject **)(a1 + 24);
      __int16 v19 = _NSConcreteStackBlock;
      uint64_t v20 = 0x40000000;
      __int16 v21 = sub_100008E64;
      uint64_t v22 = &unk_10015A230;
      uint64_t v23 = a1 + 8;
      uint64_t v24 = &v10;
      uint64_t v25 = &v19;
      unsigned __int8 v26 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v28 = 0x40000000;
      unsigned int v29 = sub_1000065D0;
      unsigned int v30 = &unk_100159F20;
      uint64_t v31 = &v26;
      uint64_t v32 = &v25;
      dispatch_sync(v6, &block);
      int v7 = v26;
      if (v26 && v18 && v17 && (_BYTE)v34) {
        sub_1000220A0(a3, v18, v17, (uint64_t)&v33, v16);
      }
    }
    while (v7);
  }
  __int16 v19 = (void **)(a1 + 120);
  uint64_t v8 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v28 = 0x40000000;
  unsigned int v29 = sub_100008C08;
  unsigned int v30 = &unk_10015A250;
  uint64_t v31 = (unsigned __int8 *)(a1 + 8);
  uint64_t v32 = (void ****)&v19;
  dispatch_sync(v8, &block);
  std::mutex::unlock(&stru_10015EB20);
}

void sub_100022000(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100022010(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void *sub_100022018(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1000220A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  double v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *, uint64_t))(*(void *)v5 + 48))(v5, &v9, &v8, &v7, a4);
}

void sub_100022130(uint64_t a1, char **a2, const char **a3, double *a4, void *a5)
{
  sub_100015438(__p, *a2);
  double v9 = *a4;
  uint64_t v25 = *a3;
  uint64_t v10 = *(void *)(a1 + 8);
  ++**(void **)(a1 + 24);
  ++**(void **)(a1 + 40);
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v24 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = *(unsigned __int8 ***)(v10 + 56);
  uint64_t v31 = 0;
  sub_10000DD74(&v25, (uint64_t)buf, 1, &v21);
  sub_10000DE9C(buf);
  sub_100022410(v11, (uint64_t)&v21, a5, &v23, v9);
  sub_100016EAC((uint64_t)&v21);
  sub_100016B28(&v22, v21);
  uint64_t v12 = v23;
  if (v23)
  {
    __int16 v13 = qword_10015EF50;
    if (os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = sub_100026820(v12);
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(void *)v14;
      }
      double v16 = __p;
      if (v20 < 0) {
        double v16 = (void **)__p[0];
      }
      uint64_t v17 = **(void **)(a1 + 16);
      uint64_t v18 = (void *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *(_DWORD *)long long buf = 136315650;
      uint64_t v27 = v15;
      __int16 v28 = 2080;
      unsigned int v29 = v16;
      __int16 v30 = 2080;
      uint64_t v31 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[Transform Cache] Cache miss. Loading %s - %s for input event %s", buf, 0x20u);
      uint64_t v12 = v23;
    }
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, *(void *)(a1 + 16));
    ++**(void **)(a1 + 32);
    **(unsigned char **)(a1 + 48) = sub_100023C88(v10 + 184, (unsigned __int8 *)(**(void **)(a1 + 16) + 16), &v23) ^ 1;
  }
  if (v24) {
    sub_1000147D8(v24);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10002237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_100016EAC((uint64_t)&a15);
  sub_100016B28((uint64_t **)(v20 + 8), a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100022410(unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  if (*(unsigned char *)a2 != 1)
  {
    uint64_t v12 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
      sub_1000F85E8(a2, v12);
    }
    goto LABEL_31;
  }
  char v55 = "name";
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v10;
  *(_OWORD *)&__p[16] = v10;
  sub_1000135DC(a2, &v55, (uint64_t)__p);
  uint64_t v50 = (unsigned __int8 *)a2;
  char v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v54 = 0x8000000000000000;
  sub_100013648(&v50);
  if (sub_100013964((unsigned __int8 **)__p, &v50))
  {
    uint64_t v11 = sub_1000155C8();
    if (!v11)
    {
LABEL_13:
      uint64_t v16 = qword_10015EF48;
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
        sub_1000F82BC(a2, v16);
      }
LABEL_31:
      *a4 = 0;
      a4[1] = 0;
      return;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*(unsigned char *)v11 != 3) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  if (!v13) {
    goto LABEL_13;
  }
  char v55 = "uuid";
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v14;
  *(_OWORD *)&__p[16] = v14;
  sub_1000135DC(a2, &v55, (uint64_t)__p);
  uint64_t v50 = (unsigned __int8 *)a2;
  char v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v54 = 0x8000000000000000;
  sub_100013648(&v50);
  if (sub_100013964((unsigned __int8 **)__p, &v50))
  {
    uint64_t v15 = sub_1000155C8();
    if (!v15) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v15 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*(unsigned char *)v15 != 3 || !*(void *)(v15 + 8))
  {
LABEL_21:
    uint64_t v19 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
      sub_1000F834C(a2, v19);
    }
    goto LABEL_31;
  }
  char v55 = "type";
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v17;
  *(_OWORD *)&__p[16] = v17;
  sub_1000135DC(a2, &v55, (uint64_t)__p);
  uint64_t v50 = (unsigned __int8 *)a2;
  char v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v54 = 0x8000000000000000;
  sub_100013648(&v50);
  if (sub_100013964((unsigned __int8 **)__p, &v50))
  {
    uint64_t v18 = sub_1000155C8();
    if (!v18) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v18 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
  }
  if (*(unsigned char *)v18 != 3 || (uint64_t v20 = *(uint64_t **)(v18 + 8)) == 0)
  {
LABEL_29:
    uint64_t v23 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
      sub_1000F83DC(a2, v23);
    }
    goto LABEL_31;
  }
  char v55 = "aggPeriod";
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v21;
  *(_OWORD *)&__p[16] = v21;
  sub_1000135DC(a2, &v55, (uint64_t)__p);
  uint64_t v50 = (unsigned __int8 *)a2;
  char v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v54 = 0x8000000000000000;
  sub_100013648(&v50);
  if (!sub_100013964((unsigned __int8 **)__p, &v50))
  {
    uint64_t v22 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
    goto LABEL_34;
  }
  uint64_t v22 = sub_1000155C8();
  if (v22)
  {
LABEL_34:
    if (*(unsigned char *)v22 == 3 && *(void *)(v22 + 8)) {
      goto LABEL_40;
    }
  }
  uint64_t v24 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEBUG)) {
    sub_1000F8578(v24);
  }
  sub_100015438(__p, "Daily");
  sub_10001C898((uint64_t)v48, (uint64_t)__p);
  uint64_t v25 = sub_10000D104((unsigned __int8 *)a2, "aggPeriod");
  sub_100016EAC((uint64_t)v48);
  unsigned __int8 v26 = *(unsigned char *)v25;
  *(unsigned char *)uint64_t v25 = v48[0];
  v48[0] = v26;
  uint64_t v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v49;
  char v49 = v27;
  sub_100016EAC((uint64_t)v25);
  sub_100016EAC((uint64_t)v48);
  sub_100016B28(&v49, v48[0]);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_40:
  __int16 v28 = *a1;
  unsigned int v29 = (std::__shared_weak_count *)a1[1];
  uint64_t v50 = *a1;
  char v51 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v28)
  {
    long long v38 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
      sub_1000F846C((uint64_t *)v13, v38);
    }
    goto LABEL_76;
  }
  if (a5 <= 0.0) {
    a5 = 100.0;
  }
  int v30 = *((char *)v20 + 23);
  if (v30 < 0)
  {
    if (v20[1] == 9)
    {
      uint64_t v32 = (uint64_t *)*v20;
      if (*(void *)*v20 != 0x7461676572676761 || *(unsigned char *)(*v20 + 8) != 101) {
        goto LABEL_51;
      }
      goto LABEL_68;
    }
  }
  else if (v30 == 9)
  {
    BOOL v31 = *v20 == 0x7461676572676761 && *((unsigned char *)v20 + 8) == 101;
    uint64_t v32 = v20;
    if (!v31)
    {
LABEL_51:
      uint64_t v33 = *v32;
      int v34 = *((unsigned __int8 *)v32 + 8);
      if (v33 != 0x696F767265736572 || v34 != 114) {
        goto LABEL_70;
      }
      uint64_t v36 = (std::__shared_weak_count *)a1[3];
      int v44 = a1[2];
      int v45 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10006ED50((uint64_t)&v50, a3, a2, &v44, (uint64_t)__p, a5);
      long long v37 = *(_OWORD *)__p;
      *(void *)std::string __p = 0;
      *(void *)&__p[8] = 0;
      if (!v45) {
        goto LABEL_72;
      }
      long long v42 = v37;
      sub_1000147D8(v45);
LABEL_69:
      long long v37 = v42;
      goto LABEL_72;
    }
LABEL_68:
    v46[0] = *(unsigned char *)a2;
    BOOL v47 = *(uint64_t **)(a2 + 8);
    sub_100016EAC(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    sub_100016EAC((uint64_t)v46);
    sub_100022B50((uint64_t)&v50, a3, (uint64_t)v46, (uint64_t)__p, a5);
    long long v42 = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    sub_100016EAC((uint64_t)v46);
    sub_100016B28(&v47, v46[0]);
    goto LABEL_69;
  }
LABEL_70:
  if (sub_10002B2B4(v20, "identity"))
  {
    sub_1000BBA68((uint64_t)&v50, a3, a2, (uint64_t)__p, a5);
    long long v37 = *(_OWORD *)__p;
LABEL_72:
    if ((void)v37)
    {
      *(_OWORD *)a4 = v37;
    }
    else
    {
      int v43 = (std::__shared_weak_count *)*((void *)&v37 + 1);
      uint64_t v41 = qword_10015EF48;
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)v20 + 23) < 0) {
          uint64_t v20 = (uint64_t *)*v20;
        }
        if (*(char *)(v13 + 23) < 0) {
          uint64_t v13 = *(void *)v13;
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v20;
        *(_WORD *)&unsigned char __p[12] = 2080;
        *(void *)&__p[14] = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[Transform Factory] ERROR: %{public}s transform failed to initialize due to invalid or missing configuration elements '%s'", __p, 0x16u);
      }
      *a4 = 0;
      a4[1] = 0;
      if (v43) {
        sub_1000147D8(v43);
      }
    }
    goto LABEL_77;
  }
  long long v40 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR)) {
    sub_1000F84F0((char *)v20 + 23, v20, v40);
  }
LABEL_76:
  *a4 = 0;
  a4[1] = 0;
LABEL_77:
  if (v51) {
    sub_1000147D8(v51);
  }
}

void sub_100022AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    sub_1000147D8(a12);
  }
  if (a18) {
    sub_1000147D8(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100022B50(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v7 = a5;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_100023578(a1, &v7, a2, a3, &v6);
  if ((*(unsigned int (**)(void))(*(void *)v6 + 56))(v6))
  {
    *(_OWORD *)a4 = v6;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (*((void *)&v6 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

BOOL sub_100022C14(uint64_t a1)
{
  BOOL result = sub_1000233E8(a1);
  if (!result) {
    return result;
  }
  long long v21 = "dimensions";
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v3;
  long long v19 = v3;
  sub_1000135DC(a1 + 56, &v21, (uint64_t)&v18);
  uint64_t v13 = (unsigned __int8 *)(a1 + 56);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0x8000000000000000;
  sub_100013648(&v13);
  if (sub_100013964((unsigned __int8 **)&v18, &v13))
  {
    uint64_t v4 = (unsigned char *)sub_1000155C8();
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = sub_100013AAC((unsigned __int8 **)&v18);
  }
  if (*v4 != 2) {
LABEL_7:
  }
    uint64_t v4 = 0;
  *(void *)(a1 + 120) = v4;
  long long v21 = "measures";
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = v5;
  long long v19 = v5;
  sub_1000135DC(a1 + 56, &v21, (uint64_t)&v18);
  uint64_t v13 = (unsigned __int8 *)(a1 + 56);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0x8000000000000000;
  sub_100013648(&v13);
  if (sub_100013964((unsigned __int8 **)&v18, &v13))
  {
    long long v6 = (unsigned __int8 *)sub_1000155C8();
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    long long v6 = sub_100013AAC((unsigned __int8 **)&v18);
  }
  if (*v6 != 2)
  {
LABEL_17:
    BOOL result = 0;
    *(void *)(a1 + 128) = 0;
    return result;
  }
  *(void *)(a1 + 128) = v6;
  if (!*(void *)(a1 + 120)) {
    return 0;
  }
  v12[0] = v6;
  memset(&v12[1], 0, 24);
  v12[4] = (unsigned __int8 *)0x8000000000000000;
  sub_100014064(v12);
  uint64_t v7 = *(void *)(a1 + 128);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v8;
  v10[1] = v8;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v10, v7);
  sub_100013648((unsigned __int8 **)v10);
  *(void *)&long long v18 = a1 + 168;
  while (!sub_100013964(v12, (unsigned __int8 **)v10))
  {
    double v9 = sub_100013AAC(v12);
    LODWORD(v13) = sub_100022E20(v9);
    sub_1000232C0((uint64_t *)&v18, &v13);
    sub_100013C64(v12);
  }
  return 1;
}

void sub_100022E10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100022E20(unsigned __int8 *a1)
{
  uint64_t v48 = "function";
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v2;
  long long v46 = v2;
  sub_1000135DC((uint64_t)a1, &v48, (uint64_t)&v45);
  long long v40 = a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0x8000000000000000;
  sub_100013648(&v40);
  if (sub_100013964((unsigned __int8 **)&v45, &v40))
  {
    uint64_t v3 = sub_1000155C8();
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v45);
  }
  if (*(unsigned char *)v3 == 3)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 8);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v4 = 0;
LABEL_8:
  uint64_t v48 = "type";
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v5;
  long long v46 = v5;
  sub_1000135DC((uint64_t)a1, &v48, (uint64_t)&v45);
  long long v40 = a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0x8000000000000000;
  sub_100013648(&v40);
  if (sub_100013964((unsigned __int8 **)&v45, &v40))
  {
    uint64_t v6 = sub_1000155C8();
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v45);
  }
  if (*(unsigned char *)v6 == 3)
  {
    uint64_t v7 = *(uint64_t ***)(v6 + 8);
    if (!v4) {
      return 0;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v7 = 0;
  if (!v4) {
    return 0;
  }
LABEL_16:
  int v8 = *((unsigned __int8 *)v4 + 23);
  if ((*((char *)v4 + 23) & 0x80000000) == 0)
  {
    if (v8 != 3)
    {
      if (v8 != 4)
      {
        if (v8 == 5)
        {
          if (*v4 != 1853189987 || *((unsigned char *)v4 + 4) != 116)
          {
            if (*v4 != 1936877926 || *((unsigned char *)v4 + 4) != 116) {
              return 0;
            }
            return 8;
          }
          return 1;
        }
        return 0;
      }
      goto LABEL_95;
    }
    if (*(_WORD *)v4 != 30067 || *((unsigned char *)v4 + 2) != 109)
    {
      if (*(_WORD *)v4 != 26989 || *((unsigned char *)v4 + 2) != 110)
      {
LABEL_56:
        if (*(_WORD *)v4 != 24941 || *((unsigned char *)v4 + 2) != 120) {
          return 0;
        }
        goto LABEL_103;
      }
LABEL_70:
      int v23 = *((char *)v7 + 23);
      if (v23 < 0)
      {
        if (v7[1] != (uint64_t *)5) {
          return 3;
        }
        uint64_t v7 = (uint64_t **)*v7;
      }
      else if (v23 != 5)
      {
        return 3;
      }
      unsigned int v27 = bswap32(*(_DWORD *)v7);
      if (v27 == 1718382433)
      {
        int v28 = *((unsigned __int8 *)v7 + 4) - 116;
      }
      else if (v27 < 0x666C6F61)
      {
        int v28 = -1;
      }
      else
      {
        int v28 = 1;
      }
      BOOL v24 = v28 == 0;
      unsigned int v25 = 3;
      unsigned int v26 = 6;
      goto LABEL_119;
    }
LABEL_61:
    int v19 = *((char *)v7 + 23);
    if (v19 < 0)
    {
      if (v7[1] != (uint64_t *)5) {
        return 2;
      }
      uint64_t v7 = (uint64_t **)*v7;
    }
    else if (v19 != 5)
    {
      return 2;
    }
    unsigned int v21 = bswap32(*(_DWORD *)v7);
    if (v21 == 1718382433)
    {
      int v22 = *((unsigned __int8 *)v7 + 4) - 116;
    }
    else if (v21 < 0x666C6F61)
    {
      int v22 = -1;
    }
    else
    {
      int v22 = 1;
    }
    BOOL v24 = v22 == 0;
    unsigned int v25 = 2;
    unsigned int v26 = 5;
    goto LABEL_119;
  }
  uint64_t v11 = *((void *)v4 + 1);
  if (v11 == 3)
  {
    if (**(_WORD **)v4 == 30067 && *(unsigned char *)(*(void *)v4 + 2) == 109) {
      goto LABEL_61;
    }
    uint64_t v11 = *((void *)v4 + 1);
    if (v11 == 3)
    {
      uint64_t v14 = *(unsigned __int16 **)v4;
      if (**(_WORD **)v4 == 26989 && *(unsigned char *)(*(void *)v4 + 2) == 110) {
        goto LABEL_70;
      }
      if ((v8 & 0x80) == 0)
      {
        if (v8 != 3) {
          return 0;
        }
        goto LABEL_56;
      }
      int v29 = *v14;
      int v30 = *((unsigned __int8 *)v14 + 2);
      if (v29 == 24941 && v30 == 120)
      {
LABEL_103:
        int v37 = *((char *)v7 + 23);
        if (v37 < 0)
        {
          if (v7[1] != (uint64_t *)5) {
            return 4;
          }
          uint64_t v7 = (uint64_t **)*v7;
        }
        else if (v37 != 5)
        {
          return 4;
        }
        unsigned int v38 = bswap32(*(_DWORD *)v7);
        if (v38 == 1718382433)
        {
          int v39 = *((unsigned __int8 *)v7 + 4) - 116;
        }
        else if (v38 < 0x666C6F61)
        {
          int v39 = -1;
        }
        else
        {
          int v39 = 1;
        }
        BOOL v24 = v39 == 0;
        unsigned int v25 = 4;
        unsigned int v26 = 7;
LABEL_119:
        if (v24) {
          return v26;
        }
        else {
          return v25;
        }
      }
      uint64_t v11 = *((void *)v4 + 1);
    }
  }
  else if (v11 == 5 && **(_DWORD **)v4 == 1853189987 && *(unsigned char *)(*(void *)v4 + 4) == 116)
  {
    return 1;
  }
  if (v11 == 5)
  {
    if (**(_DWORD **)v4 == 1936877926 && *(unsigned char *)(*(void *)v4 + 4) == 116) {
      return 8;
    }
    uint64_t v11 = *((void *)v4 + 1);
  }
  if (v11 != 4) {
    return 0;
  }
  uint64_t v4 = *(unsigned int **)v4;
LABEL_95:
  unsigned int v33 = bswap32(*v4);
  BOOL v34 = v33 >= 0x6C617374;
  int v35 = v33 > 0x6C617374;
  int v36 = !v34;
  if (v35 == v36) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t *sub_1000232C0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  long long v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_100028DEC();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000233B0((uint64_t)v6, v12);
      int v8 = *(_DWORD **)v4;
      long long v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *long long v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *sub_1000233B0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100028E94();
  }
  return operator new(4 * a2);
}

BOOL sub_1000233E8(uint64_t a1)
{
  long long v2 = (unsigned __int8 *)(a1 + 56);
  long long v18 = "inputs";
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v3;
  long long v16 = v3;
  sub_1000135DC(a1 + 56, &v18, (uint64_t)&v15);
  unint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0x8000000000000000;
  sub_100013648(&v10);
  if (!sub_100013964((unsigned __int8 **)&v15, &v10))
  {
    uint64_t v4 = sub_100013AAC((unsigned __int8 **)&v15);
LABEL_5:
    if (*v4 == 2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned char *)sub_1000155C8();
  if (v4) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v4 = 0;
LABEL_7:
  *(void *)(a1 + 24) = v4;
  long long v18 = "outputs";
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v5;
  long long v16 = v5;
  sub_1000135DC((uint64_t)v2, &v18, (uint64_t)&v15);
  unint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0x8000000000000000;
  sub_100013648(&v10);
  if (!sub_100013964((unsigned __int8 **)&v15, &v10))
  {
    uint64_t v6 = sub_100013AAC((unsigned __int8 **)&v15);
LABEL_11:
    if (*v6 == 2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned char *)sub_1000155C8();
  if (v6) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v6 = 0;
LABEL_13:
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(unsigned char **)(a1 + 24);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  if (v6 && *v7 == 2) {
    return *v6 == 2;
  }
  return v8;
}

void sub_10002356C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100023578(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0xE0uLL);
  sub_10002360C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1000106D4((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1000235F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002360C(uint64_t a1, uint64_t a2, double *a3, void *a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100157C48;
  sub_1000236A4(a1 + 24, a2, a4, a5, *a3);
  *(void *)(a1 + 24) = off_100157BC0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return a1;
}

void sub_100023690(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000236A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100156F78;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = a1 + 56;
  if (*(unsigned char *)a4 == 1)
  {
    *(unsigned char *)(a1 + 56) = 1;
    *(void *)(a1 + 64) = *(void *)(a4 + 8);
    sub_100016EAC(a4);
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    sub_100016EAC(a1 + 56);
  }
  sub_100016EAC(v8);
  *(double *)(a1 + 72) = a5;
  *(_DWORD *)(a1 + 80) = sub_1000238FC(a1);
  *(void *)(a1 + 88) = *a3;
  *(_DWORD *)(a1 + 96) = sub_100023790(a1);
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_100023790(uint64_t a1)
{
  int v1 = (unsigned __int8 *)(a1 + 56);
  unint64_t v14 = "budget";
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v2;
  long long v12 = v2;
  sub_1000135DC(a1 + 56, &v14, (uint64_t)&v11);
  uint64_t v6 = v1;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0x8000000000000000;
  sub_100013648(&v6);
  if (sub_100013964((unsigned __int8 **)&v11, &v6))
  {
    long long v3 = (unsigned char *)sub_1000155C8();
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v3 = sub_100013AAC((unsigned __int8 **)&v11);
  }
  if (*v3 - 5 < 3) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v14 = "storage_budget";
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v4;
  long long v12 = v4;
  sub_1000135DC((uint64_t)v1, &v14, (uint64_t)&v11);
  uint64_t v6 = v1;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0x8000000000000000;
  sub_100013648(&v6);
  if (sub_100013964((unsigned __int8 **)&v11, &v6))
  {
    long long v3 = (unsigned char *)sub_1000155C8();
    if (!v3) {
      return sub_100023AD0();
    }
  }
  else
  {
    long long v3 = sub_100013AAC((unsigned __int8 **)&v11);
  }
  if (*v3 - 5 <= 2)
  {
LABEL_11:
    LODWORD(v11) = -1431655766;
    sub_10002F58C(v3, (unsigned int *)&v11);
    return v11;
  }
  return sub_100023AD0();
}

void sub_1000238F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000238FC(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_1000239E4(a1 + 56, "aggPeriod", (uint64_t)&__p);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v2;
  v6[1] = v2;
  sub_1000136C8(v6, v1);
  sub_100013648((unsigned __int8 **)v6);
  if (sub_100013964((unsigned __int8 **)&__p, (unsigned __int8 **)v6)) {
    return 0;
  }
  uint64_t v4 = sub_100024940(v1, "aggPeriod");
  sub_100015064(v4, &__p);
  uint64_t v3 = sub_100023B14(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1000239D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000239E4@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  unint64_t v7 = (unsigned __int8 **)sub_1000136C8((void *)a3, a1);
  uint64_t result = (uint64_t)sub_100013648(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_100023A50(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sub_100023A50(uint64_t a1, std::string::value_type *__s)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), __s);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), __s) >= 1) {
    return v2;
  }
  return v5;
}

uint64_t sub_100023AD0()
{
  if (qword_10015EFB0 != -1) {
    dispatch_once(&qword_10015EFB0, &stru_100157658);
  }
  return dword_10015EFA8;
}

uint64_t sub_100023B14(void *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v2 = a1[1];
    if (v2 == 5 && *(_DWORD *)*a1 == 1818845508 && *(unsigned char *)(*a1 + 4) == 121) {
      return 0;
    }
    if (v2 == 6)
    {
      if (*(_DWORD *)*a1 == 1801807191 && *(_WORD *)(*a1 + 4) == 31084) {
        return 1;
      }
      uint64_t v2 = a1[1];
    }
    if (v2 == 7)
    {
      if (*(_DWORD *)*a1 == 1953394509 && *(_DWORD *)(*a1 + 3) == 2037147764) {
        return 2;
      }
      uint64_t v2 = a1[1];
    }
    if (v2 != 9) {
      return 0;
    }
    a1 = (void *)*a1;
    goto LABEL_25;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 6) {
    return *(_DWORD *)a1 == 1801807191 && *((_WORD *)a1 + 2) == 31084;
  }
  if (v1 != 7)
  {
    if (v1 != 9) {
      return 0;
    }
LABEL_25:
    unint64_t v6 = bswap64(*a1);
    if (v6 == 0x517561727465726CLL)
    {
      int v7 = *((unsigned __int8 *)a1 + 8) - 121;
    }
    else if (v6 < 0x517561727465726CLL)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    if (v7) {
      return 0;
    }
    else {
      return 3;
    }
  }
  BOOL v11 = *(_DWORD *)a1 == 1953394509 && *(_DWORD *)((char *)a1 + 3) == 2037147764;
  return (2 * v11);
}

uint64_t sub_100023C88(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (!v4) {
    sub_100027A78();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  v14[0] = (uint64_t *)off_1001527F0;
  void v14[3] = (uint64_t *)v14;
  sub_100023E14(a1, a2, (uint64_t)v14);
  sub_100023EAC(v14);
  int v8 = sub_100025190((unint64_t *)a1, a2, v7);
  uint64_t v9 = (uint64_t *)(a1 + 96);
  unint64_t v10 = *(uint64_t **)(a1 + 96);
  if (v10) {
    *uint64_t v9 = *v10;
  }
  else {
    unint64_t v10 = sub_1000447BC((void **)v9);
  }
  sub_1000252D0(v10, (long long *)a2, a3, v7);
  BOOL v11 = operator new(0x18uLL);
  v11[1] = a1 + 152;
  __n128 v11[2] = v10;
  uint64_t v12 = *(void *)(a1 + 152);
  *BOOL v11 = v12;
  *(void *)(v12 + 8) = v11;
  *(void *)(a1 + 152) = v11;
  ++*(void *)(a1 + 168);
  sub_100025368((void *)(a1 + 176), v10, v14);
  ++*(_DWORD *)(a1 + 24);
  return v8 ^ 1u;
}

void sub_100023DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100023EAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100023E14(uint64_t a1, void *a2, uint64_t a3)
{
  v4[0] = off_1001525D0;
  v4[1] = a1;
  void v4[2] = a3;
  v4[3] = v4;
  sub_100023F30(a1, a2, (uint64_t)v4);
  return sub_100023EAC(v4);
}

void sub_100023E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100023EAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100023EAC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100023F30(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_10002418C(a1, a2);
  int v22 = 0;
  int v23 = 0;
  BOOL v24 = 0;
  if ((void *)v5 != v6)
  {
    uint64_t v7 = (void *)v5;
    int v8 = v6;
    do
    {
      uint64_t v9 = (void **)v7;
      BOOL v11 = v7 + 1;
      uint64_t v7 = (void *)v7[1];
      uint64_t v10 = v11[1];
      uint64_t v12 = *v9;
      v12[1] = v7;
      *v9[1] = v12;
      --*(void *)(a1 + 168);
      operator delete(v9);
      if (v23 >= (uint64_t *)v24)
      {
        uint64_t v14 = ((char *)v23 - v22) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_100028DEC();
        }
        unint64_t v15 = (v24 - v22) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v24 - v22) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v17 = (char *)sub_100019978((uint64_t)&v24, v16);
        }
        else {
          unint64_t v17 = 0;
        }
        long long v18 = &v17[8 * v14];
        *(void *)long long v18 = v10;
        unint64_t v13 = (uint64_t *)(v18 + 8);
        int v19 = (char *)v23;
        if (v23 != (uint64_t *)v22)
        {
          do
          {
            uint64_t v20 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v20;
            v18 -= 8;
          }
          while (v19 != v22);
          int v19 = v22;
        }
        int v22 = v18;
        BOOL v24 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t *v23 = v10;
        unint64_t v13 = v23 + 1;
      }
      int v23 = v13;
    }
    while (v7 != v8);
    unsigned int v21 = (uint64_t *)v22;
    if (v22 == (char *)v13) {
      goto LABEL_23;
    }
    do
      sub_10002410C(a3, *v21++);
    while (v21 != v13);
    unint64_t v13 = (uint64_t *)v22;
    if (v22) {
LABEL_23:
    }
      operator delete(v13);
  }
}

void sub_1000240E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002410C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10002418C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 152;
  uint64_t v3 = *(void *)(a1 + 160);
  if (v3 == a1 + 152) {
    return v2;
  }
  uint64_t v4 = a2;
  char v5 = *((unsigned char *)a2 + 23);
  uint64_t v6 = v5 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
  uint64_t v7 = v5 >= 0 ? (unsigned __int8 *)a2 : (unsigned __int8 *)*a2;
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 16);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 55);
    size_t v10 = *(void *)(v8 + 40);
    if ((v9 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      uint64_t v11 = *(void *)(v8 + 40);
    }
    if (v11 != v6) {
      goto LABEL_19;
    }
    uint64_t v12 = (const void **)(v8 + 32);
    if ((v9 & 0x80) != 0) {
      break;
    }
    if (!v9) {
      goto LABEL_21;
    }
    unint64_t v13 = v7;
    while (*(unsigned __int8 *)v12 == *v13)
    {
      uint64_t v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v9) {
        goto LABEL_21;
      }
    }
LABEL_19:
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return v2;
    }
  }
  if (memcmp(*v12, v7, v10)) {
    goto LABEL_19;
  }
LABEL_21:
  if (v3 == v2) {
    return v2;
  }
  char v14 = v4[23];
  if (v14 >= 0) {
    uint64_t v15 = v4[23];
  }
  else {
    uint64_t v15 = *((void *)v4 + 1);
  }
  if (v14 < 0) {
    uint64_t v4 = *(unsigned char **)v4;
  }
  uint64_t v16 = v3;
  do
  {
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(unsigned __int8 *)(v17 + 55);
    size_t v19 = *(void *)(v17 + 40);
    uint64_t v20 = (v18 & 0x80u) == 0 ? *(unsigned __int8 *)(v17 + 55) : *(void *)(v17 + 40);
    if (v20 != v15) {
      break;
    }
    unsigned int v21 = (const void **)(v17 + 32);
    if ((v18 & 0x80) != 0)
    {
      if (memcmp(*v21, v4, v19)) {
        return v3;
      }
    }
    else if (v18)
    {
      int v22 = v4;
      while (*(unsigned __int8 *)v21 == *v22)
      {
        unsigned int v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v18) {
          goto LABEL_39;
        }
      }
      return v3;
    }
LABEL_39:
    uint64_t v16 = *(void *)(v16 + 8);
  }
  while (v16 != v2);
  return v3;
}

uint64_t sub_100024304(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 88);
  if (!v4) {
    sub_100027A78();
  }
  uint64_t v5 = *a2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48))(v4, *a2 + 32, *a2 + 56);
  *(void *)(v3 + 8) += v6 - *(void *)(v5 + 72);
  *(void *)(v5 + 72) = v6;
  uint64_t v7 = operator new(0x18uLL);
  v7[2] = v5;
  uint64_t v9 = *(void *)(v3 + 152);
  uint64_t v8 = (void *)(v3 + 152);
  void *v7 = v9;
  v7[1] = v8;
  *(void *)(v9 + 8) = v7;
  void *v8 = v7;
  ++v8[2];
  uint64_t v10 = a1[1];

  return sub_10002410C(v10, v5);
}

uint64_t sub_1000243C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_1000243D4()
{
  return 1;
}

uint64_t sub_1000243DC(uint64_t a1, uint64_t *a2)
{
  return sub_100024304((void *)(a1 + 8), a2);
}

uint64_t sub_1000243E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    sub_100027A78();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_100024444(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  ++**(void **)(a1 + 16);
  ++**(void **)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v5);
  if (v4)
  {
    sub_1000147D8(v4);
  }
}

void sub_1000244E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000147D8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000244F8(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100024ED8(**a1, 0);
  operator delete();
}

void sub_10002457C()
{
}

uint64_t sub_1000245A8(uint64_t *a1, long long *a2)
{
  uint64_t v4 = a1[3];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v5;
  v19[1] = v5;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v19, v4);
  sub_100014064((unsigned __int8 **)v19);
  uint64_t v6 = a1[3];
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[0] = v7;
  v17[1] = v7;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v17, v6);
  sub_100013648((unsigned __int8 **)v17);
  if (sub_100013964((unsigned __int8 **)v19, (unsigned __int8 **)v17))
  {
LABEL_4:
    uint64_t v9 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = __p;
      sub_1000A5458((uint64_t)a1, __p);
      if (v16 < 0) {
        uint64_t v11 = (void **)__p[0];
      }
      uint64_t v12 = sub_100026820((uint64_t)a1);
      if (*(char *)(v12 + 23) >= 0) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = *(void *)v12;
      }
      char v14 = (void *)(*(void *)a2 + 16);
      if (*(char *)(*(void *)a2 + 39) < 0) {
        char v14 = (void *)*v14;
      }
      *(_DWORD *)long long buf = 136446722;
      int v22 = v11;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      __int16 v25 = 2080;
      unsigned int v26 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%{public}sTransform] WARNING: transform '%s' received event '%s' but did not handle it", buf, 0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v8 = sub_100013AAC((unsigned __int8 **)v19);
      if (sub_100024788(a1, (char *)v8, a2)) {
        break;
      }
      sub_100013C64((unsigned __int8 **)v19);
      if (sub_100013964((unsigned __int8 **)v19, (unsigned __int8 **)v17)) {
        goto LABEL_4;
      }
    }
  }
  return (*(uint64_t (**)(void))(**(void **)(a1[5] + 56) + 24))(*(void *)(a1[5] + 56));
}

uint64_t sub_100024788(uint64_t *a1, char *a2, long long *a3)
{
  sub_100015438(__p, "matching");
  sub_100024AD0("", a2, (const void **)__p, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v8 = v14.__r_.__value_.__l.__size_ == 5
      && *(_DWORD *)v14.__r_.__value_.__l.__data_ == 1701274994
      && *(unsigned char *)(v14.__r_.__value_.__r.__words[0] + 4) == 120;
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v8 = SHIBYTE(v14.__r_.__value_.__r.__words[2]) == 5
      && LODWORD(v14.__r_.__value_.__l.__data_) == 1701274994
      && v14.__r_.__value_.__s.__data_[4] == 120;
  }
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      return sub_100011584(a1, v6, a3);
    }
  }
  else if (v8)
  {
    return sub_100011584(a1, v6, a3);
  }
  uint64_t v10 = (unsigned __int8 *)sub_100024940((uint64_t)a2, "event");
  sub_1000168C0((uint64_t)&v14, *(void *)a3 + 16);
  LODWORD(v10) = sub_10001F600(v10, (unsigned __int8 *)&v14);
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28((uint64_t **)&v14.__r_.__value_.__l.__size_, v14.__r_.__value_.__s.__data_[0]);
  if (v10) {
    return sub_100011584(a1, v6, a3);
  }
  return 0;
}

void sub_100024908(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100024914(uint64_t a1)
{
  uint64_t v1 = sub_100024940(a1 + 56, "uuid");
  return sub_100013DF0(v1);
}

uint64_t sub_100024940(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v12 = a2;
  if (*(unsigned char *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v6 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v9, v6);
    long long v7 = std::string::insert(&v9, 0, "cannot use operator[] with a string argument with ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(305, (uint64_t)&v10, exception);
  }
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8) + 8 == sub_100013718(*(void *)(a1 + 8), &v12)) {
    sub_1000FA51C();
  }
  return sub_100013718(*v3, &v12) + 56;
}

void sub_100024A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_100024AD0(char *__s@<X2>, char *a2@<X0>, const void **a3@<X1>, std::string *a4@<X8>)
{
  sub_100015438(__p, __s);
  sub_100024B88(a2, a3, (uint64_t)__p, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100024B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100024B88@<X0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v12 = (char *)sub_100029400(a1);
    sub_100015438(v15, v12);
    char v13 = std::string::insert((std::string *)v15, 0, "cannot use value() with ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&long long v18 = *((void *)&v13->__r_.__value_.__l + 2);
    long long v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v17, exception);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v17 = v7;
  long long v18 = v7;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v17);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v8;
  v15[1] = v8;
  sub_1000136C8(v15, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v15);
  uint64_t result = (std::string *)sub_100013964((unsigned __int8 **)&v17, (unsigned __int8 **)v15);
  if (result)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      return (std::string *)sub_100017424(a4, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    }
  }
  else
  {
    long long v10 = sub_100013AAC((unsigned __int8 **)&v17);
    return sub_100015064((uint64_t)v10, a4);
  }
  return result;
}

void sub_100024D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_100024D70(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100024E6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100024E7C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_1000147D8(v2);
    }
    operator delete();
  }
  return result;
}

void sub_100024ED0(uint64_t a1)
{
}

std::chrono::system_clock::time_point sub_100024ED8(uint64_t a1, int a2)
{
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = result.__d_.__rep_;
  uint64_t v6 = *(void *)(a1 + 400);
  int v7 = *(_DWORD *)(a1 + 408);
  if ((a2 & 1) != 0 || (v6 >= result.__d_.__rep_ ? (BOOL v8 = v7 == 0) : (BOOL v8 = 1), v8))
  {
    if (a2)
    {
      uint64_t v9 = qword_10015EF50;
      if (!os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      *(_WORD *)long long buf = 0;
      long long v10 = "[Transform Cache] Checkpoint initiated (forced)";
      std::string::size_type v11 = v9;
      uint32_t v12 = 2;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = v6 - result.__d_.__rep_;
      if (v6 >= result.__d_.__rep_)
      {
        if (v7) {
          goto LABEL_17;
        }
        uint64_t v15 = qword_10015EF50;
        if (!os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_INFO)) {
          goto LABEL_17;
        }
        *(_DWORD *)long long buf = 134217984;
        *(void *)int v22 = v13 / 1000000;
        long long v10 = "[Transform Cache] Checkpoint initiated. Persistence event countdown reached. Additional info {throttleTime"
              "Remaining (s): %lld}";
        std::string::size_type v11 = v15;
        uint32_t v12 = 12;
      }
      else
      {
        uint64_t v14 = qword_10015EF50;
        if (!os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_INFO)) {
          goto LABEL_17;
        }
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)int v22 = 100000 - v7;
        *(_WORD *)&v22[4] = 1024;
        *(_DWORD *)&v22[6] = 100000;
        long long v10 = "[Transform Cache] Checkpoint initiated. Persistence time throttle expired. Additional info {eventsSeen: %u"
              ", eventsRequired: %u}";
        std::string::size_type v11 = v14;
        uint32_t v12 = 14;
      }
    }
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
LABEL_17:
    uint64_t v16 = *(void *)(a1 + 344);
    if (v16 == a1 + 336)
    {
      int v17 = 0;
    }
    else
    {
      int v17 = 0;
      do
      {
        v17 += (*(uint64_t (**)(void))(**(void **)(*(void *)(v16 + 16) + 56) + 40))(*(void *)(*(void *)(v16 + 16) + 56)) ^ 1;
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while (v16 != a1 + 336);
    }
    long long v18 = qword_10015EF50;
    if (os_log_type_enabled((os_log_t)qword_10015EF50, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 352);
      *(_DWORD *)long long buf = 134218240;
      *(void *)int v22 = v19;
      *(_WORD *)&char v22[8] = 1024;
      int v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[Transform Cache] Checkpoint %lu transforms attempted to persisted. %u failures.", buf, 0x12u);
    }
    *(void *)(a1 + 400) = rep + 60000000;
    *(_DWORD *)(a1 + 408) = 100000;
    sub_1000B33AC();
    sub_1000A2EF0(*(void **)(a1 + 136), &object);
  }
  *(_DWORD *)(a1 + 408) = v7 - 1;
  return result;
}

uint64_t sub_100025180(uint64_t a1)
{
  return sub_1000243E8(a1 + 8);
}

uint64_t sub_100025190(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1] + a3;
  a1[1] = v4;
  if (v4 > v3)
  {
    char v7 = 0;
    while (1)
    {
      if (!a1[21]) {
        return v7 & 1;
      }
      BOOL v8 = (uint64_t *)a1[20];
      unint64_t v9 = v8[2];
      uint64_t v10 = a2[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = a2[23];
      }
      else {
        uint64_t v11 = *((void *)a2 + 1);
      }
      uint64_t v12 = *(unsigned __int8 *)(v9 + 55);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v9 + 40);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = (unsigned __int8 *)(v9 + 32);
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)(v9 + 32);
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, v14, *((void *)a2 + 1)))
          {
LABEL_21:
            sub_1000445DC((uint64_t)a1, v9);
            uint64_t v16 = *v8;
            *(void *)(v16 + 8) = v8[1];
            *(void *)v8[1] = v16;
            --a1[21];
            operator delete(v8);
            sub_1000257A4(a1, v9);
            char v7 = 1;
            goto LABEL_22;
          }
        }
        else
        {
          if (!a2[23]) {
            goto LABEL_21;
          }
          uint64_t v15 = a2;
          while (*v15 == *v14)
          {
            ++v15;
            ++v14;
            if (!--v10) {
              goto LABEL_21;
            }
          }
        }
      }
      sub_1000260F8((uint64_t)a1, (const void **)(v9 + 32));
LABEL_22:
      if (a1[1] <= *a1) {
        return v7 & 1;
      }
    }
  }
  char v7 = 0;
  return v7 & 1;
}

void *sub_1000252D0(void *a1, long long *a2, void *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v7 = a1 + 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    v7[2] = *((void *)a2 + 2);
    *(_OWORD *)char v7 = v8;
  }
  uint64_t v9 = a3[1];
  a1[7] = *a3;
  a1[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a1[9] = a4;
  return a1;
}

void sub_100025354(_Unwind_Exception *a1)
{
  sub_100042554(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100025368@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  if (*a2) {
    sub_100027E80();
  }
  uint64_t v6 = a1 + 1;
  *a3 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  long long v8 = a1 + 1;
  sub_10002541C((const void **)a1 + 1, a2, (uint64_t *)&v8, 0);
  std::chrono::system_clock::time_point result = sub_1000254AC(v6, a2);
  *a3 = a2;
  ++*a1;
  return result;
}

void *sub_10002541C(const void **a1, void *a2, uint64_t *a3, void *a4)
{
  v8[0] = 0xAAAAAAAAAAAAAA00;
  v8[1] = 0;
  uint64_t v7 = *a3;
  sub_1000255F0(a1, (uint64_t)a2, (uint64_t)&v7, (uint64_t)v8, a4);
  sub_10002570C(a1, a2, (uint64_t)v8);
  return a2;
}

uint64_t *sub_1000254AC(uint64_t *result, uint64_t *a2)
{
  *((_DWORD *)a2 + 6) = 0;
  uint64_t v2 = (uint64_t **)*a2;
  if ((uint64_t *)*a2 != result)
  {
    do
    {
      unint64_t v3 = *v2;
      if (*((_DWORD *)v2 + 6) == 1 || v3 == result) {
        break;
      }
      *((_DWORD *)v3 + 6) = 0;
      long long v5 = (uint64_t **)v3[1];
      uint64_t v6 = v5;
      if (v2 == v5) {
        uint64_t v6 = (uint64_t **)v3[2];
      }
      if (!v6 || *((_DWORD *)v6 + 6))
      {
        uint64_t v7 = v2[1];
        if (v2 == v5)
        {
          if (v7 == a2)
          {
            a2 = (uint64_t *)v2;
          }
          else
          {
            long long v8 = (uint64_t *)a2[1];
            v2[2] = v8;
            if (v8) {
              uint64_t *v8 = (uint64_t)v2;
            }
            a2[1] = (uint64_t)v2;
            *uint64_t v2 = a2;
          }
          uint64_t v10 = (uint64_t **)*v3;
          int v13 = *(uint64_t **)(*v3 + 8);
          uint64_t v14 = (uint64_t **)a2[2];
          v3[1] = (uint64_t)v14;
          if (v14) {
            *uint64_t v14 = v3;
          }
          a2[2] = (uint64_t)v3;
          *unint64_t v3 = (uint64_t)a2;
          *a2 = (uint64_t)v10;
          BOOL v12 = v13 == v3;
        }
        else
        {
          if (v7 == a2)
          {
            uint64_t v9 = (uint64_t *)a2[2];
            v2[1] = v9;
            if (v9) {
              *uint64_t v9 = (uint64_t)v2;
            }
            a2[2] = (uint64_t)v2;
            *uint64_t v2 = a2;
            uint64_t v7 = (uint64_t *)a2[1];
          }
          else
          {
            a2 = (uint64_t *)v2;
          }
          uint64_t v10 = (uint64_t **)*v3;
          uint64_t v11 = *(uint64_t **)(*v3 + 8);
          v3[2] = (uint64_t)v7;
          if (v7) {
            uint64_t *v7 = (uint64_t)v3;
          }
          *unint64_t v3 = (uint64_t)a2;
          *a2 = (uint64_t)v10;
          a2[1] = (uint64_t)v3;
          BOOL v12 = v11 == v3;
        }
        uint64_t v15 = 2;
        if (v12) {
          uint64_t v15 = 1;
        }
        if (v10 == (uint64_t **)result) {
          uint64_t v15 = 0;
        }
        v10[v15] = a2;
        *((_DWORD *)a2 + 6) = 1;
        break;
      }
      *((_DWORD *)v6 + 6) = 1;
      *((_DWORD *)v2 + 6) = 1;
      uint64_t v2 = (uint64_t **)*v3;
      a2 = v3;
    }
    while ((uint64_t *)*v3 != result);
  }
  *(_DWORD *)(*result + 24) = 1;
  return result;
}

BOOL sub_1000255F0(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (const void **)*a1;
  if (*a1)
  {
    uint64_t v10 = 0;
    do
    {
      if (!a2) {
        sub_1000F9970();
      }
      uint64_t v11 = v9;
      ++v10;
      if (sub_1000185FC((uint64_t)&v14, (const void **)(a2 + 32), v9 + 4)) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = 2;
      }
      uint64_t v9 = (const void **)v11[v12];
    }
    while (v9);
    if (a5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = a1;
    if (a5) {
LABEL_9:
    }
      *a5 = v10;
  }
  if (v11 == a1)
  {
    BOOL result = 1;
  }
  else
  {
    if (!a2) {
      sub_1000F9970();
    }
    BOOL result = sub_1000185FC((uint64_t)&v15, (const void **)(a2 + 32), v11 + 4);
  }
  *(unsigned char *)a4 = result;
  *(void *)(a4 + 8) = v11;
  return result;
}

void *sub_10002570C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *(void **)(a3 + 8);
  if (!v3) {
    __assert_rtn("insert_commit", "bstree_algorithms.hpp", 1774, "commit_data.node != node_ptr()");
  }
  if (v3 == a1)
  {
    *a1 = a2;
    a1[2] = a2;
    BOOL result = a1 + 1;
LABEL_8:
    *BOOL result = a2;
    goto LABEL_9;
  }
  if (*(unsigned char *)a3)
  {
    v3[1] = a2;
    uint64_t v6 = (void *)a1[1];
    BOOL result = a1 + 1;
    long long v5 = v6;
  }
  else
  {
    v3[2] = a2;
    uint64_t v7 = (void *)a1[2];
    BOOL result = a1 + 2;
    long long v5 = v7;
  }
  if (v3 == v5) {
    goto LABEL_8;
  }
LABEL_9:
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v3;
  return result;
}

void sub_100025798(uint64_t a1, unint64_t *a2)
{
}

void sub_1000257A4(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[7];
  if (!v3) {
    sub_100027A78();
  }
  uint64_t v5 = *(void *)(a2 + 72);
  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v3 + 48))(v3, a2 + 32, a2 + 56);
  sub_100025F3C(a1 + 12, a2);
  a1[1] -= v5;
}

uint64_t sub_100025824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_100025834@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = *(void **)(*a2 + 16);
  if (v6)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)v6[1];
    }
    while (v6);
  }
  else
  {
    long long v8 = (void *)*a2;
    do
    {
      uint64_t v9 = v8;
      long long v8 = (void *)*v8;
    }
    while (v9 == (void *)v8[2]);
    if ((void *)v9[2] == v8) {
      uint64_t v7 = v9;
    }
    else {
      uint64_t v7 = v8;
    }
  }
  if (!*v5) {
    __assert_rtn("erase", "bstree.hpp", 1418, "!safemode_or_autounlink || !node_algorithms::unique(to_erase)");
  }
  uint64_t result = sub_1000258F4(a1 + 1, *a2);
  --*a1;
  *uint64_t v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  *a3 = v7;
  return result;
}

uint64_t sub_1000258F4(uint64_t *a1, uint64_t a2)
{
  memset(v6, 170, sizeof(v6));
  sub_1000259A4(a1, (void *)a2, v6);
  if (v6[2] == (uint64_t *)a2)
  {
    if (!*(_DWORD *)(a2 + 24)) {
      return a2;
    }
    goto LABEL_3;
  }
  int v4 = *((_DWORD *)v6[2] + 6);
  *((_DWORD *)v6[2] + 6) = *(_DWORD *)(a2 + 24);
  if (v4) {
LABEL_3:
  }
    sub_100025C04(a1, v6[0], v6[1]);
  return a2;
}

void sub_100025998(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_1000259A4(void *result, void *a2, void *a3)
{
  int v4 = (void *)a2[1];
  uint64_t v3 = (void *)a2[2];
  uint64_t v5 = v3;
  if (v4 && (uint64_t v5 = (void *)a2[1], v3))
  {
    uint64_t v6 = (void *)a2[2];
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)v6[1];
    }
    while (v6);
    uint64_t v5 = (void *)v7[2];
    long long v8 = (void *)*a2;
    uint64_t v9 = (void *)(*a2 + 8);
    uint64_t v10 = (void *)*v9;
    BOOL v11 = *v9 == (void)a2;
    if (v7 != a2)
    {
      *int v4 = v7;
      v7[1] = v4;
      if (v7 != v3)
      {
        v7[2] = v3;
        *uint64_t v3 = v7;
        uint64_t v3 = (void *)*v7;
        if (*(void **)(*v7 + 8) != v7) {
          sub_1000F9A20();
        }
        if (v5) {
          *uint64_t v5 = v3;
        }
        v3[1] = v5;
      }
      void *v7 = v8;
      uint64_t v12 = 2;
      if (v10 == a2) {
        uint64_t v12 = 1;
      }
      if (v8 == result) {
        uint64_t v12 = 0;
      }
      v8[v12] = v7;
      long long v8 = v3;
      goto LABEL_35;
    }
  }
  else
  {
    long long v8 = (void *)*a2;
    uint64_t v9 = (void *)(*a2 + 8);
    BOOL v11 = *v9 == (void)a2;
  }
  if (v5) {
    *uint64_t v5 = v8;
  }
  int v13 = v8 + 2;
  if (v11) {
    int v13 = v9;
  }
  if (v8 == result) {
    int v13 = v8;
  }
  *int v13 = v5;
  if ((void *)result[1] == a2)
  {
    if (v4) {
      sub_1000F99F4();
    }
    char v14 = v8;
    if (v3)
    {
      char v15 = v3;
      do
      {
        char v14 = v15;
        char v15 = (void *)v15[1];
      }
      while (v15);
    }
    result[1] = v14;
  }
  if ((void *)result[2] == a2)
  {
    if (v3) {
      sub_1000F99C8();
    }
    for (i = v8; v4; int v4 = (void *)v4[2])
      uint64_t i = v4;
    result[2] = i;
  }
  uint64_t v7 = a2;
LABEL_35:
  *a3 = v5;
  a3[2] = v7;
  if (v5 && (void *)*v5 != v8) {
    sub_1000F999C();
  }
  a3[1] = v8;
  return result;
}

uint64_t sub_100025B10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEBUG)) {
    sub_1000F97A8(a2, v3);
  }
  return (*(uint64_t (**)(void))(*(void *)*a2 + 40))();
}

uint64_t sub_100025B88(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) && *(void *)(a1 + 192))
  {
    uint64_t result = sub_100025FE0(a1);
    if (!result) {
      return result;
    }
    sub_10001EAF0(a1 + 136, *(void ***)(a1 + 136));
    sub_10001C900((uint64_t *)(a1 + 192), 0);
  }
  return 1;
}

uint64_t *sub_100025C04(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  if (a3 == result) {
    goto LABEL_73;
  }
  while (1)
  {
    uint64_t v3 = a3;
    if (a2 && *((_DWORD *)a2 + 6) != 1)
    {
      uint64_t v3 = a2;
      goto LABEL_74;
    }
    int v4 = (uint64_t **)a3[1];
    if (a2 == (uint64_t *)v4) {
      break;
    }
    if (!*((_DWORD *)v4 + 6))
    {
      *((_DWORD *)v4 + 6) = 1;
      *((_DWORD *)a3 + 6) = 0;
      uint64_t v5 = (uint64_t *)*a3;
      uint64_t v6 = *(uint64_t **)(*a3 + 8);
      uint64_t v7 = (uint64_t **)v4[2];
      a3[1] = (uint64_t)v7;
      if (v7) {
        void *v7 = a3;
      }
      void v4[2] = a3;
      *a3 = (uint64_t)v4;
      *int v4 = v5;
      if (v6 == a3) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = 2;
      }
      if (v5 == result) {
        uint64_t v8 = 0;
      }
      v5[v8] = (uint64_t)v4;
      int v4 = (uint64_t **)a3[1];
      if (!v4)
      {
        int v31 = 516;
        goto LABEL_79;
      }
    }
    uint64_t v9 = v4[1];
    uint64_t v10 = v4[2];
    if (v10 && *((_DWORD *)v10 + 6) != 1)
    {
      if (v9 && *((_DWORD *)v9 + 6) != 1)
      {
LABEL_47:
        *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = 1;
        goto LABEL_48;
      }
      *((_DWORD *)v10 + 6) = 1;
      *((_DWORD *)v4 + 6) = 0;
      int v17 = *v4;
      long long v18 = (uint64_t **)(*v4)[1];
      uint64_t v19 = (uint64_t *)v10[1];
      void v4[2] = v19;
      if (v19) {
        *uint64_t v19 = (uint64_t)v4;
      }
      *int v4 = v10;
      uint64_t *v10 = (uint64_t)v17;
      v10[1] = (uint64_t)v4;
      BOOL v20 = v18 == v4;
      uint64_t v21 = 2;
      if (v20) {
        uint64_t v21 = 1;
      }
      if (v17 == result) {
        uint64_t v21 = 0;
      }
      v17[v21] = (uint64_t)v10;
      int v4 = (uint64_t **)a3[1];
      if (v4)
      {
        uint64_t v9 = v4[1];
        *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = 1;
        if (!v9)
        {
LABEL_49:
          int v22 = (uint64_t *)*a3;
          int v23 = *(uint64_t **)(*a3 + 8);
          uint64_t v24 = (uint64_t **)v4[2];
          a3[1] = (uint64_t)v24;
          if (v24) {
            *uint64_t v24 = a3;
          }
          void v4[2] = a3;
          *a3 = (uint64_t)v4;
          goto LABEL_68;
        }
LABEL_48:
        *((_DWORD *)v9 + 6) = 1;
        goto LABEL_49;
      }
      int v31 = 532;
      goto LABEL_79;
    }
    if (v9 && *((_DWORD *)v9 + 6) != 1) {
      goto LABEL_47;
    }
LABEL_33:
    *((_DWORD *)v4 + 6) = 0;
    a3 = (uint64_t *)*a3;
    a2 = v3;
    if ((uint64_t *)*v3 == result) {
      goto LABEL_74;
    }
  }
  int v4 = (uint64_t **)a3[2];
  if (!v4)
  {
    int v31 = 475;
    goto LABEL_79;
  }
  if (!*((_DWORD *)v4 + 6))
  {
    *((_DWORD *)v4 + 6) = 1;
    *((_DWORD *)a3 + 6) = 0;
    BOOL v11 = (uint64_t *)*a3;
    uint64_t v12 = *(uint64_t **)(*a3 + 8);
    int v13 = (uint64_t **)v4[1];
    a3[2] = (uint64_t)v13;
    if (v13) {
      *int v13 = a3;
    }
    *a3 = (uint64_t)v4;
    *int v4 = v11;
    v4[1] = a3;
    if (v12 == a3) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = 2;
    }
    if (v11 == result) {
      uint64_t v14 = 0;
    }
    v11[v14] = (uint64_t)v4;
    int v4 = (uint64_t **)a3[2];
    if (!v4)
    {
      int v31 = 481;
      goto LABEL_79;
    }
  }
  char v15 = v4[1];
  uint64_t v16 = v4[2];
  if (!v15 || *((_DWORD *)v15 + 6) == 1)
  {
    if (v16 && *((_DWORD *)v16 + 6) != 1) {
      goto LABEL_63;
    }
    goto LABEL_33;
  }
  if (!v16 || *((_DWORD *)v16 + 6) == 1)
  {
    *((_DWORD *)v15 + 6) = 1;
    *((_DWORD *)v4 + 6) = 0;
    __int16 v25 = *v4;
    unsigned int v26 = (uint64_t **)(*v4)[1];
    unsigned int v27 = (uint64_t *)v15[2];
    v4[1] = v27;
    if (v27) {
      *unsigned int v27 = (uint64_t)v4;
    }
    _OWORD v15[2] = (uint64_t)v4;
    *int v4 = v15;
    *char v15 = (uint64_t)v25;
    BOOL v20 = v26 == v4;
    uint64_t v28 = 2;
    if (v20) {
      uint64_t v28 = 1;
    }
    if (v25 == result) {
      uint64_t v28 = 0;
    }
    v25[v28] = (uint64_t)v15;
    int v4 = (uint64_t **)a3[2];
    if (v4)
    {
      uint64_t v16 = v4[2];
      *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = 1;
      if (!v16) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    int v31 = 497;
LABEL_79:
    __assert_rtn("rebalance_after_erasure_restore_invariants", "rbtree_algorithms.hpp", v31, "w");
  }
LABEL_63:
  *((_DWORD *)v4 + 6) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 1;
LABEL_64:
  *((_DWORD *)v16 + 6) = 1;
LABEL_65:
  int v22 = (uint64_t *)*a3;
  int v23 = *(uint64_t **)(*a3 + 8);
  int v29 = (uint64_t **)v4[1];
  a3[2] = (uint64_t)v29;
  if (v29) {
    std::__shared_weak_count *v29 = a3;
  }
  *a3 = (uint64_t)v4;
  v4[1] = a3;
LABEL_68:
  *int v4 = v22;
  uint64_t v30 = 2;
  if (v23 == a3) {
    uint64_t v30 = 1;
  }
  if (v22 == result) {
    uint64_t v30 = 0;
  }
  v22[v30] = (uint64_t)v4;
LABEL_73:
  uint64_t v3 = a2;
  if (a2) {
LABEL_74:
  }
    *((_DWORD *)v3 + 6) = 1;
  return result;
}

void sub_100025F3C(unint64_t *a1, unint64_t a2)
{
  int v4 = *(std::__shared_weak_count **)(a2 + 64);
  if (v4) {
    sub_1000147D8(v4);
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(void *)a2) {
    __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
  }
  uint64_t v5 = (unint64_t *)*a1;
  if (*a1 && (unint64_t)v5 <= a2)
  {
    do
    {
      a1 = v5;
      uint64_t v5 = (unint64_t *)*v5;
      if (v5) {
        BOOL v6 = (unint64_t)v5 > a2;
      }
      else {
        BOOL v6 = 1;
      }
    }
    while (!v6);
  }
  *(void *)a2 = v5;
  *a1 = a2;
}

uint64_t sub_100025FE0(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("persistToStore", "AggregatingTransform.cpp", 178, "initialized()");
  }
  unsigned __int8 v5 = 0;
  sub_100015438(__p, "persisting to store");
  v6[0] = off_100157E18;
  v6[1] = a1;
  _OWORD v6[2] = &v5;
  void v6[3] = v6;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v6);
  sub_10001266C(v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_1000260E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_1000260F8(uint64_t a1, const void **a2)
{
  sub_1000213D8(a1, a2);
  v5[0] = off_100152870;
  v5[1] = a1;
  void v5[3] = v5;
  sub_100023F30(a1, a2, (uint64_t)v5);
  return sub_100023EAC(v5);
}

void sub_100026190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100023EAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000261A8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_100026268(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    return sub_1000C1CC0((uint64_t)a1, a2);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v17 = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_1000171B0(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    *(void *)&long long v15 = v13;
    *((void *)&v15 + 1) = &v13[16 * v10];
    *(void *)&long long v16 = *((void *)&v15 + 1);
    *((void *)&v16 + 1) = &v13[16 * v12];
    sub_1000263F0((uint64_t)&v15, a2);
    sub_1000171E8(a1, &v15);
    return sub_100017390((uint64_t)&v15);
  }
}

void sub_1000263AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1000263C0(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = (result[1] - *result) >> 4;
  if (a2 > v2) {
    return (uint64_t *)sub_100026268(result, a2 - v2);
  }
  if (a2 < v2) {
    return (uint64_t *)sub_100016AC4((uint64_t)result, *result + 16 * a2);
  }
  return result;
}

uint64_t sub_1000263F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v4 = v3 + 16 * a2;
    do
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      sub_100016EAC(v3);
      uint64_t result = sub_100016EAC(v3);
      v3 += 16;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 16) = v3;
  return result;
}

uint64_t sub_100026450(_DWORD *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
  if ((result & 1) == 0) {
    __assert_rtn("updateStorageBudget", "Transform.cpp", 261, "initialized()");
  }
  a1[25] = (a1[25] + a2) & ~((a1[25] + a2) >> 63);
  return result;
}

void sub_1000264D8(uint64_t a1)
{
  uint64_t v2 = sub_100024914(a1);
  uint64_t v3 = sub_100026820(a1);
  if (sub_100012B9C((_DWORD *)a1))
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v14 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10004595C((uint64_t)&v21, "uuid");
    int v23 = &v21;
    char v24 = 1;
    uint64_t v26 = sub_1000168C0((uint64_t)v25, v2);
    char v27 = 1;
    sub_10001200C((uint64_t)__p, (uint64_t)&v21, 2, 1, 2);
    *(void *)&void v30[2] = __p;
    LOBYTE(v31) = 1;
    sub_10004595C((uint64_t)v15, "name");
    long long v16 = v15;
    char v17 = 1;
    sub_1000168C0((uint64_t)v18, v3);
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v33 = sub_10001200C((uint64_t)v32, (uint64_t)v15, 2, 1, 2);
    char v34 = 1;
    sub_10001200C((uint64_t)&v13, (uint64_t)__p, 2, 1, 2);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      sub_100016EAC((uint64_t)&v32[i]);
      sub_100016B28((uint64_t **)&v32[i + 8], v32[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      sub_100016EAC((uint64_t)&v18[j]);
      sub_100016B28((uint64_t **)&v18[j + 8], v18[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      sub_100016EAC((uint64_t)&v25[k]);
      sub_100016B28((uint64_t **)&v25[k + 8], v25[k]);
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    sub_100015438(__p, "com.apple.coreanalytics.meta.TransformBudgetExceeded");
    sub_10008D90C((long long *)__p, (uint64_t)&v13, &v21);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, &v21);
    if (v22) {
      sub_1000147D8(v22);
    }
    if ((v30[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v8 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v2 + 23) >= 0) {
        uint64_t v9 = v2;
      }
      else {
        uint64_t v9 = *(void *)v2;
      }
      uint64_t v10 = sub_100026820(a1);
      if (*(char *)(v10 + 23) >= 0) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = *(void *)v10;
      }
      int v12 = *(_DWORD *)(a1 + 100);
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v9;
      __int16 v29 = 2082;
      *(void *)uint64_t v30 = v11;
      *(_WORD *)&v30[8] = 1024;
      int v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[Transform] WARNING: Transform budget exceeded for %{public}s with uuid %{public}s (storage budget used %u)", __p, 0x1Cu);
    }
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 40) + 40) + 16))(*(void *)(*(void *)(a1 + 40) + 40), v2);
    sub_100016EAC((uint64_t)&v13);
    sub_100016B28(&v14, v13);
  }
}

void sub_100026814(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100026820(uint64_t a1)
{
  uint64_t v1 = sub_100024940(a1 + 56, "name");
  return sub_100013DF0(v1);
}

uint64_t sub_10002684C(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    sub_100103060();
  }
  uint64_t v4 = *(unsigned char **)a2;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  if (*(unsigned char **)a2 == v5)
  {
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    do
    {
      v6 += sub_100026934(v4);
      v4 += 16;
    }
    while (v4 != v5);
  }
  uint64_t v8 = *(unsigned char **)(a2 + 24);
  uint64_t v7 = *(unsigned char **)(a2 + 32);
  while (v8 != v7)
  {
    v6 += sub_100026934(v8);
    v8 += 16;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 80);

  return v9(a1, v6);
}

uint64_t sub_100026934(unsigned char *a1)
{
  uint64_t i = 1;
  switch(*a1)
  {
    case 1:
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v3;
      long long v21 = v3;
      sub_1000136C8(__p, (uint64_t)a1);
      sub_100014064((unsigned __int8 **)__p);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v17 = v4;
      long long v18 = v4;
      sub_1000136C8(&v17, (uint64_t)a1);
      sub_100013648((unsigned __int8 **)&v17);
      for (uint64_t i = 0; !sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&v17); uint64_t i = (v6 + i + v8))
      {
        uint64_t v5 = sub_10006FFA4(__p);
        sub_1000168C0((uint64_t)v15, v5);
        int v6 = sub_100026934(v15);
        uint64_t v7 = sub_100013AAC((unsigned __int8 **)__p);
        int v8 = sub_100026934(v7);
        sub_100016EAC((uint64_t)v15);
        sub_100016B28(&v16, v15[0]);
        sub_100013C64((unsigned __int8 **)__p);
      }
      break;
    case 2:
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v9;
      long long v21 = v9;
      sub_1000136C8(__p, (uint64_t)a1);
      sub_100014064((unsigned __int8 **)__p);
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v17 = v10;
      long long v18 = v10;
      sub_1000136C8(&v17, (uint64_t)a1);
      sub_100013648((unsigned __int8 **)&v17);
      for (uint64_t i = 0; !sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&v17); uint64_t i = (v12 + i))
      {
        uint64_t v11 = sub_100013AAC((unsigned __int8 **)__p);
        int v12 = sub_100026934(v11);
        sub_100013C64((unsigned __int8 **)__p);
      }
      break;
    case 3:
      sub_100015064((uint64_t)a1, (std::string *)__p);
      if (SBYTE7(v21) < 0)
      {
        int v13 = (int)__p[1];
        operator delete(__p[0]);
      }
      else
      {
        int v13 = BYTE7(v21);
      }
      uint64_t i = (v13 + 1);
      break;
    case 4:
      return i;
    case 7:
      uint64_t i = 8;
      break;
    default:
      uint64_t i = 8 * (*a1 - 5 < 3);
      break;
  }
  return i;
}

void sub_100026B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void sub_100026B7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v13 = 0.0;
  if (sub_100026CE8(a2, &v13))
  {
    if (*a1 - 5 >= 3)
    {
      long long v3 = (uint64_t **)&v12;
      v11[0] = 7;
      double v12 = v13;
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      sub_100016EAC((uint64_t)v11);
      unsigned __int8 v7 = *a1;
      *a1 = v11[0];
      v11[0] = v7;
      double v8 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v12;
      double v12 = v8;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v11);
      int v6 = v11[0];
    }
    else
    {
      double v14 = NAN;
      sub_100026DA0(a1, &v14);
      long long v3 = (uint64_t **)&v10;
      v9[0] = 7;
      double v10 = v14 + v13;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v9);
      unsigned __int8 v4 = *a1;
      *a1 = v9[0];
      v9[0] = v4;
      double v5 = *((double *)a1 + 1);
      *((double *)a1 + 1) = v10;
      double v10 = v5;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v9);
      int v6 = v9[0];
    }
    sub_100016B28(v3, v6);
  }
}

uint64_t sub_100026CE8(unsigned __int8 *a1, double *a2)
{
  int v3 = *a1;
  if ((v3 - 5) <= 2)
  {
    uint64_t v6 = -1;
    sub_100026DA0(a1, (double *)&v6);
    double v4 = *(double *)&v6;
LABEL_6:
    *a2 = v4;
    return 1;
  }
  if (v3 == 4)
  {
    LOBYTE(v6) = -86;
    sub_100072884((char *)a1, &v6);
    double v4 = 0.0;
    if ((_BYTE)v6) {
      double v4 = 1.0;
    }
    goto LABEL_6;
  }
  return 0;
}

unsigned __int8 *sub_100026DA0(unsigned __int8 *result, double *a2)
{
  uint64_t v2 = (char *)result;
  int v3 = *result;
  switch(v3)
  {
    case 5:
      double v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      double v4 = *((double *)result + 1);
      break;
    case 6:
      double v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v6 = (char *)sub_100029400(v2);
      sub_100015438(&v9, v6);
      unsigned __int8 v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v10, exception);
  }
  *a2 = v4;
  return result;
}

void sub_100026EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_100026F20(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    v17[0] = 0;
    long long v18 = 0;
    sub_100016EAC((uint64_t)v17);
    sub_100016EAC((uint64_t)v17);
    uint64_t v8 = *a1;
    sub_100016EAC((uint64_t)v17);
    unsigned __int8 v9 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = v17[0];
    v17[0] = v9;
    long long v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + 8) = v18;
    long long v18 = v10;
    sub_100016EAC(v8);
    sub_100016EAC((uint64_t)v17);
    sub_100016B28(&v18, v17[0]);
    return *a1;
  }
  else
  {
    int v3 = *(unsigned __int8 **)(v2 - 8);
    int v4 = *v3;
    if (v4 == 2)
    {
      double v5 = (uint64_t *)*((void *)v3 + 1);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = sub_1000270EC(v5);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        sub_100016EAC(v6);
        sub_100016EAC(v6);
        uint64_t v7 = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v4 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      v15[0] = 0;
      long long v16 = 0;
      sub_100016EAC((uint64_t)v15);
      sub_100016EAC((uint64_t)v15);
      uint64_t v12 = a1[4];
      sub_100016EAC((uint64_t)v15);
      unsigned __int8 v13 = *(unsigned char *)v12;
      *(unsigned char *)uint64_t v12 = v15[0];
      v15[0] = v13;
      double v14 = *(uint64_t **)(v12 + 8);
      *(void *)(v12 + 8) = v16;
      long long v16 = v14;
      sub_100016EAC(v12);
      sub_100016EAC((uint64_t)v15);
      sub_100016B28(&v16, v15[0]);
      return a1[4];
    }
  }
}

uint64_t sub_1000270EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  uint64_t v8 = (char *)sub_1000171B0(v5, v7);
  uint64_t v9 = (uint64_t)&v8[16 * v3];
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v9;
  *((void *)&v14 + 1) = &v8[16 * v10];
  *(unsigned char *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  sub_100016EAC(v9);
  sub_100016EAC(v9);
  *(void *)&long long v14 = v9 + 16;
  sub_1000171E8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100017390((uint64_t)&v13);
  return v11;
}

void sub_1000271E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000271F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      void *v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      void v8[2] = *(void *)(v9 + 16);
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      void v8[3] = 0;
      _OWORD v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(v9 + 24);
      v8[5] = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      v8 += 6;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1000272C8((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_1000272C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      sub_100012330((void **)(a4 + v7 - 48));
      *(_OWORD *)(v9 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 + v7 - 32);
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      sub_100012330((void **)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_100027370(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v14 = 0;
  if (sub_10001C67C(a2, &v14))
  {
    if (*a1 - 5 >= 3)
    {
      unint64_t v4 = (uint64_t **)&v13;
      v12[0] = 5;
      uint64_t v13 = v14;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      unsigned __int8 v8 = *a1;
      *a1 = v12[0];
      v12[0] = v8;
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v13;
      uint64_t v13 = v9;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v12);
      int v7 = v12[0];
    }
    else
    {
      uint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      sub_10001C724(a1, &v15);
      uint64_t v3 = v15;
      unint64_t v4 = (uint64_t **)&v11;
      if (v15 <= v14) {
        uint64_t v3 = v14;
      }
      v10[0] = 5;
      uint64_t v11 = v3;
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      unsigned __int8 v5 = *a1;
      *a1 = v10[0];
      v10[0] = v5;
      uint64_t v6 = *((void *)a1 + 1);
      *((void *)a1 + 1) = v11;
      uint64_t v11 = v6;
      sub_100016EAC((uint64_t)a1);
      sub_100016EAC((uint64_t)v10);
      int v7 = v10[0];
    }
    sub_100016B28(v4, v7);
  }
}

uint64_t sub_1000274E0(uint64_t a1)
{
  uint64_t v1 = a1 + 152;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 == a1 + 152) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    memset(__p, 170, sizeof(__p));
    uint64_t v4 = *(void *)(v2 + 16);
    if (*(char *)(v4 + 55) < 0)
    {
      sub_100017424(__p, *(void **)(v4 + 32), *(void *)(v4 + 40));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 32);
      __p[2] = *(void **)(v4 + 48);
    }
    char v5 = HIBYTE(__p[2]);
    uint64_t v6 = v1;
    if (v2 != v1)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        int v7 = (void *)HIBYTE(__p[2]);
      }
      else {
        int v7 = __p[1];
      }
      if (SHIBYTE(__p[2]) >= 0) {
        unsigned __int8 v8 = __p;
      }
      else {
        unsigned __int8 v8 = (void **)__p[0];
      }
      while (1)
      {
        uint64_t v9 = *(void *)(v2 + 16);
        uint64_t v10 = *(unsigned __int8 *)(v9 + 55);
        size_t v11 = *(void *)(v9 + 40);
        uint64_t v12 = (v10 & 0x80u) == 0 ? (void *)*(unsigned __int8 *)(v9 + 55) : *(void **)(v9 + 40);
        if (v12 != v7) {
          break;
        }
        uint64_t v13 = (const void **)(v9 + 32);
        if ((v10 & 0x80) != 0)
        {
          if (memcmp(*v13, v8, v11)) {
            break;
          }
        }
        else if (v10)
        {
          uint64_t v14 = v8;
          while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v14)
          {
            uint64_t v13 = (const void **)((char *)v13 + 1);
            uint64_t v14 = (void **)((char *)v14 + 1);
            if (!--v10) {
              goto LABEL_24;
            }
          }
          break;
        }
LABEL_24:
        uint64_t v2 = *(void *)(v2 + 8);
        if (v2 == v1)
        {
          uint64_t v6 = v1;
          goto LABEL_27;
        }
      }
      uint64_t v6 = v2;
    }
LABEL_27:
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    ++v3;
    uint64_t v2 = v6;
  }
  while (v6 != v1);
  return v3;
}

void sub_100027664(int a1)
{
  if (sub_100027758())
  {
    unint64_t v2 = sub_1000C27D0();
    int v3 = v2;
    unint64_t v4 = HIDWORD(v2);
    char v5 = qword_10015EF88;
    if (a1)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_DEBUG)) {
        sub_10010308C(v3, v4, v5);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF88, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109376;
      v6[1] = v3;
      __int16 v7 = 1024;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MemoryUtils] Memory Footprint: {Current: %d, Peak: %d}", (uint8_t *)v6, 0xEu);
    }
  }
}

BOOL sub_100027758()
{
  sub_100027824(v2);
  if (v3 < 0)
  {
    BOOL v0 = v2[1] == (void *)8 && *(void *)v2[0] == 0x6C616E7265746E49;
    operator delete(v2[0]);
  }
  else
  {
    return v3 == 8 && v2[0] == (void *)0x6C616E7265746E49;
  }
  return v0;
}

void sub_100027824(void *a1@<X8>)
{
  id v3 = +[OSASystemConfiguration sharedInstance];
  id v2 = [v3 targetAudience];
  sub_100015438(a1, (char *)[v2 UTF8String]);
}

void sub_100027898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000278B8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000278F4(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 136);
}

void *sub_100027904(uint64_t a1)
{
  return sub_10000E708(**(void **)(a1 + 40), (long long *)(*(void *)(a1 + 40) + 8));
}

id sub_100027910(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleCellMonitorUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

uint64_t sub_100027920(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10002793C(uint64_t a1, void **a2, uint64_t *a3)
{
  char v5 = *a2;
  *(void *)a1 = *a2;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *(void *)a1 = xpc_null_create();
  }
  uint64_t v6 = *a3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a3 + 32))
  {
    long long v7 = *(_OWORD *)(a3 + 1);
    *(void *)(a1 + 32) = a3[3];
    *(_OWORD *)(a1 + 16) = v7;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 64) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  return a1;
}

uint64_t sub_1000279E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = xpc_null_create();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return a1;
}

void sub_100027A78()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = &off_100151BD8;
}

uint64_t **sub_100027AC4(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ ((unint64_t)*a2 >> 32));
  unint64_t v6 = (0x9DDFEA08EB382D69 * (((unint64_t)*a2 >> 32) ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69
                                                                                    * (((unint64_t)*a2 >> 32) ^ (v5 >> 47) ^ v5)) >> 47);
  unint64_t v7 = 0x9DDFEA08EB382D69 * v6;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69 * v6;
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
    }
    else
    {
      unint64_t v12 = v7 & (v8 - 1);
    }
    uint64_t v13 = *(uint64_t ****)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v7)
        {
          if (xpc_equal(i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v8) {
              v15 %= v8;
            }
          }
          else
          {
            v15 &= v8 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  long long v16 = operator new(0x58uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *long long v16 = 0;
  v16[1] = v7;
  sub_1000279E0((uint64_t)(v16 + 2), a3);
  LOBYTE(v27) = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_1000400E0(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v12 = v7 % v8;
      }
      else {
        unint64_t v12 = v7;
      }
    }
    else
    {
      unint64_t v12 = (v8 - 1) & v7;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v12);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v24 >= v8) {
          v24 %= v8;
        }
      }
      else
      {
        v24 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (uint64_t **)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100027DA4((uint64_t)v26, 0);
  return i;
}

void sub_100027D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100027DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100097824((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100027DFC()
{
  __assert_rtn("operator-", "iter_impl.hpp", 560, "m_object != nullptr");
}

void sub_100027E28(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1 == -1)
  {
    *(void *)a2 = xpc_null_create();
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    sub_1000029CC((uint64_t)a1, (xpc_object_t *)a2);
  }
}

void sub_100027E80()
{
}

uint64_t sub_100027EAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), a2, 1);
}

void sub_100027ED8(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3;
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  void v5[2] = &v6;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100002C6C;
  block[3] = &unk_1001568E8;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_100027F8C(uint64_t a1@<X8>)
{
  uint64_t v2 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[HeartBeatActivity] Will fetch ScreenLocked events from Biome.", buf, 2u);
  }
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 0;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  *(void *)long long buf = 0;
  std::string::size_type v56 = buf;
  uint64_t v57 = 0x2020000000;
  char v58 = 0;
  uint64_t v50 = 0;
  char v51 = (double *)&v50;
  uint64_t v52 = 0x2020000000;
  uint64_t v53 = 0;
  uint64_t v3 = +[NSDate now];
  [v3 timeIntervalSince1970];
  double v5 = v4;

  uint64_t v46 = 0;
  unint64_t v47 = (double *)&v46;
  uint64_t v48 = 0x2020000000;
  double v49 = v5 + -7200.0;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x2020000000;
  char v45 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  int v41 = -1;
  if (objc_opt_class() && objc_opt_class())
  {
    char v6 = BiomeLibrary();
    unint64_t v7 = [v6 Device];
    unint64_t v8 = [v7 ScreenLocked];

    id v9 = objc_alloc((Class)BMPublisherOptions);
    id v10 = [objc_alloc((Class)NSDate) initWithTimeIntervalSince1970:v5 + -7200.0];
    id v11 = [objc_alloc((Class)NSDate) initWithTimeIntervalSince1970:v5];
    id v12 = [v9 initWithStartDate:v10 endDate:v11 maxEvents:0 lastN:0 reversed:0];

    uint64_t v13 = [v8 publisherWithOptions:v12];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100028648;
    v39[3] = &unk_100151448;
    v39[4] = v40;
    v39[5] = &v50;
    *(double *)&v39[8] = v5;
    v39[6] = &v46;
    v39[7] = buf;
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_1000287F4;
    v38[3] = &unk_100151470;
    v38[4] = &v42;
    v38[5] = buf;
    v38[6] = v40;
    v38[7] = &v50;
    v38[8] = &v46;
    id v14 = [v13 sinkWithCompletion:v39 receiveInput:v38];
    if (*((unsigned char *)v43 + 24))
    {
      id v15 = v12;
    }
    else
    {
      long long v16 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[HeartBeatActivity] Found no events in the last 2 hour window. Checking the previous 2 hour window.", v54, 2u);
      }
      id v17 = objc_alloc((Class)BMPublisherOptions);
      id v18 = [objc_alloc((Class)NSDate) initWithTimeIntervalSince1970:v5 + -14400.0];
      id v19 = objc_alloc((Class)NSDate);
      id v20 = [v19 initWithTimeIntervalSince1970:v47[3]];
      id v15 = [v17 initWithStartDate:v18 endDate:v20 maxEvents:1 lastN:1 reversed:0];

      unint64_t v21 = [v8 publisherWithOptions:v15];

      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_100028A14;
      v37[3] = &unk_100151498;
      v37[4] = buf;
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_100028B7C;
      v36[3] = &unk_1001514C0;
      v36[4] = buf;
      v36[5] = &v50;
      uint64_t v13 = v21;
      id v22 = [v21 sinkWithCompletion:v37 receiveInput:v36];
    }
    if (v56[24])
    {
      unint64_t v23 = vcvtmd_s64_f64(v51[3]);
      v34[0] = 5;
      unint64_t v35 = v23;
      sub_100016EAC((uint64_t)v34);
      sub_100016EAC((uint64_t)v34);
      unint64_t v24 = sub_10000D104((unsigned __int8 *)a1, "activeTime");
      __int16 v25 = (uint64_t **)&v35;
      sub_100016EAC((uint64_t)v34);
      unsigned __int8 v26 = *(unsigned char *)v24;
      *(unsigned char *)unint64_t v24 = v34[0];
      v34[0] = v26;
      uint64_t v27 = v24[1];
      v24[1] = v35;
      unint64_t v35 = v27;
      sub_100016EAC((uint64_t)v24);
      sub_100016EAC((uint64_t)v34);
      int v28 = v34[0];
    }
    else
    {
      v32[0] = 5;
      uint64_t v33 = 0;
      sub_100016EAC((uint64_t)v32);
      sub_100016EAC((uint64_t)v32);
      __int16 v29 = sub_10000D104((unsigned __int8 *)a1, "activeTime");
      __int16 v25 = (uint64_t **)&v33;
      sub_100016EAC((uint64_t)v32);
      unsigned __int8 v30 = *(unsigned char *)v29;
      *(unsigned char *)__int16 v29 = v32[0];
      v32[0] = v30;
      uint64_t v31 = v29[1];
      v29[1] = v33;
      uint64_t v33 = v31;
      sub_100016EAC((uint64_t)v29);
      sub_100016EAC((uint64_t)v32);
      int v28 = v32[0];
    }
    sub_100016B28(v25, v28);
  }
  _Block_object_dispose(v40, 8);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100028548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_100028D64(&a10);

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v51 - 240), 8);
  _Block_object_dispose((const void *)(v51 - 208), 8);
  _Block_object_dispose((const void *)(v51 - 160), 8);
  sub_100028D64(v47);
  _Unwind_Resume(a1);
}

void sub_100028648(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    double v4 = (id)qword_10015EF18;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      char v6 = [v3 error];
      id v7 = [v6 description];
      int v8 = 136315138;
      id v9 = [v7 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[HeartBeatActivity] Error: %s\n", (uint8_t *)&v8, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  else
  {
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(double *)(a1 + 64)
    }
                                                                  - *(double *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                              + 24)
                                                                  + *(double *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                              + 24);
    double v5 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEBUG)) {
      sub_1000F7D40(v5);
    }
  }
}

void sub_1000287B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000287F4(void *a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  double v4 = [v3 eventBody];
  unsigned __int8 v5 = [v4 hasStarting];

  if (v5)
  {
    id v6 = objc_alloc((Class)NSDate);
    [v3 timestamp];
    id v7 = objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:");
    [v7 timeIntervalSince1970];
    double v9 = v8;

    id v10 = [v3 eventBody];
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = [v10 starting];

    uint64_t v11 = *(void *)(a1[8] + 8);
    if (*(_DWORD *)(*(void *)(a1[6] + 8) + 24) == 1) {
      *(double *)(*(void *)(a1[7] + 8) + 24) = v9
    }
                                                   - *(double *)(v11 + 24)
                                                   + *(double *)(*(void *)(a1[7] + 8) + 24);
    else {
      *(double *)(v11 + 24) = v9;
    }
    id v12 = (id)qword_10015EF18;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = [v3 eventBody];
      int v14 = 134218240;
      double v15 = v9;
      __int16 v16 = 1024;
      unsigned int v17 = [v13 starting];
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[HeartBeatActivity] Processed event in window: eventTimestamp:%f, starting: %d", (uint8_t *)&v14, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
}

void sub_1000289C4(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100028A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 state];
  unsigned __int8 v5 = qword_10015EF18;
  if (v4)
  {
    id v6 = (id)qword_10015EF18;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = [v3 error];
      id v8 = [v7 description];
      int v9 = 136315138;
      id v10 = [v8 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[HeartBeatActivity] Error: %s\n", (uint8_t *)&v9, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEBUG))
  {
    sub_1000F7D40(v5);
  }
}

void sub_100028B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 eventBody];
  unsigned __int8 v5 = [v4 hasStarting];

  if (v5)
  {
    id v6 = objc_alloc((Class)NSDate);
    [v3 timestamp];
    id v7 = objc_msgSend(v6, "initWithTimeIntervalSinceReferenceDate:");
    [v7 timeIntervalSince1970];
    uint64_t v9 = v8;

    id v10 = [v3 eventBody];
    unsigned int v11 = [v10 starting];

    double v12 = 7200.0;
    if (v11) {
      double v12 = 0.0;
    }
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v12;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    uint64_t v13 = (id)qword_10015EF18;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = [v3 eventBody];
      int v15 = 134218240;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      unsigned int v18 = [v14 starting];
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[HeartBeatActivity] No event inside window: eventTimestamp:%f, starting: %d", (uint8_t *)&v15, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100028D14(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t **sub_100028D64(uint64_t **a1)
{
  return a1;
}

void sub_100028DD8(void *a1)
{
}

void sub_100028DEC()
{
}

void sub_100028E04(const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100028E60(exception, a1);
}

void sub_100028E4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100028E60(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100028E94()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_100028EC8(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  unsigned __int8 v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_100028F40(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_100028F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    sub_100016EAC((uint64_t)i);
    uint64_t result = sub_100016B28(i + 8, *i);
    uint64_t i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

void sub_100028FA8(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1000290F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100029160(uint64_t a1, int a2, char *a3)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), a3);
  return a1;
}

void sub_1000291B0(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *sub_1000291C4(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_1000291CC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_100029220(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

void sub_100029288(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_100015438(&__p, "type_error");
  sub_100028FA8(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = (char *)v15;
  }
  else {
    uint64_t v11 = (char *)v15[0];
  }
  sub_100029160((uint64_t)a3, a1, v11);
  *a3 = off_100151548;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1000293B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100029400(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return off_100151560[v1];
  }
}

void sub_100029428(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_10002947C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

void sub_1000294E8()
{
}

void sub_100029590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_1000295DC(void *a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v3 = dispatch_queue_create("analyticsd.PowerStateResolverQueue", v2);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v3;

  *a1 = off_1001515C0;
  operator new();
}

void sub_100029690(_Unwind_Exception *a1)
{
  sub_1000296A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000296A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  dispatch_queue_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_1000296E8(void *a1)
{
  *a1 = off_1001515C0;
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(a1[4] + 16)];

  dispatch_queue_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_1000147D8(v3);
  }
  sub_10002AA84(a1 + 4, 0);
  sub_1000296A4((uint64_t)(a1 + 1));
  return a1;
}

void sub_100029780(void *a1)
{
  sub_1000296E8(a1);

  operator delete();
}

uint64_t sub_1000297B8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (void *)sub_10002AAE4(a1, &off_10015E570);
  dispatch_queue_t v3 = v2;
  unint64_t v4 = a1[2];
  a1[1] = (uint64_t)v2;
  if ((unint64_t)v2 >= v4)
  {
    long long v5 = (void *)sub_10002AAE4(a1, &off_10015E578);
  }
  else
  {
    sub_100015438(v2, off_10015E578);
    long long v5 = v3 + 3;
    a1[1] = (uint64_t)v5;
  }
  a1[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[2])
  {
    int v6 = (void *)sub_10002AAE4(a1, &off_10015E580);
  }
  else
  {
    sub_100015438(v5, off_10015E580);
    int v6 = v5 + 3;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  if ((unint64_t)v6 >= a1[2])
  {
    uint64_t result = sub_10002AAE4(a1, &off_10015E588);
  }
  else
  {
    sub_100015438(v6, off_10015E588);
    uint64_t result = (uint64_t)(v6 + 3);
    a1[1] = (uint64_t)(v6 + 3);
  }
  a1[1] = result;
  return result;
}

void sub_1000298F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  a9 = (void **)v9;
  sub_10002A71C(&a9);
  _Unwind_Resume(a1);
}

void sub_10002991C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100029A30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100029A48(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(int **)(a1 + 32);
  dispatch_queue_t v3 = sub_10000FD1C((id *)(a1 + 24));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100029B50;
  handler[3] = &unk_1001515E0;
  handler[4] = a1;
  notify_register_dispatch(kOSThermalNotificationPressureLevelName, v2, v3, handler);

  sub_100029B5C(&v5, **(_DWORD **)(a1 + 32), 1);
}

void sub_100029B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100029B50(uint64_t a1, int a2)
{
}

void sub_100029B5C(uint64_t *a1, int token, char a3)
{
  uint64_t v4 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F7E60();
    }
  }
  else
  {
    memset(v13, 170, sizeof(v13));
    sub_100029D70(state64, v13);
    uint64_t v5 = *(void *)(v4 + 40);
    sub_100015438(__p, off_10015E570);
    v9[0] = 0;
    uint64_t v10 = 0;
    sub_100016EAC((uint64_t)v9);
    sub_100016EAC((uint64_t)v9);
    sub_1000168C0((uint64_t)v7, (uint64_t)v13);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, __p, v9, v7, -1, 1);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    int v6 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F7DB0((uint64_t *)v13, a3, v6);
    }
    if (SHIBYTE(v13[2]) < 0) {
      operator delete(v13[0]);
    }
  }
}

void sub_100029D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void *sub_100029D70@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1 > 29)
  {
    switch(a1)
    {
      case 30:
        uint64_t v2 = "Heavy";
        return sub_100015438(a2, v2);
      case 40:
        uint64_t v2 = "Trapping";
        return sub_100015438(a2, v2);
      case 50:
        uint64_t v2 = "Sleeping";
        return sub_100015438(a2, v2);
    }
LABEL_15:
    uint64_t v2 = "<unknown>";
    return sub_100015438(a2, v2);
  }
  if (!a1)
  {
    uint64_t v2 = "Nominal";
    return sub_100015438(a2, v2);
  }
  if (a1 == 10)
  {
    uint64_t v2 = "Light";
    return sub_100015438(a2, v2);
  }
  if (a1 != 20) {
    goto LABEL_15;
  }
  uint64_t v2 = "Moderate";
  return sub_100015438(a2, v2);
}

void sub_100029DFC(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_queue_t v3 = sub_10000FD1C((id *)(a1 + 24));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100029F00;
  handler[3] = &unk_1001515E0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.springboard.pluggedin", (int *)(v2 + 4), v3, handler);

  sub_100029F0C(&v5, *(_DWORD *)(*(void *)(a1 + 32) + 4));
}

void sub_100029EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100029F00(uint64_t a1, int a2)
{
}

void sub_100029F0C(uint64_t *a1, int token)
{
  uint64_t v2 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F7F54();
    }
  }
  else
  {
    BOOL v3 = state64 == 1;
    uint64_t v4 = *(void *)(v2 + 40);
    sub_100015438(__p, off_10015E578);
    v7[0] = 0;
    std::string::size_type v8 = 0;
    sub_100016EAC((uint64_t)v7);
    sub_100016EAC((uint64_t)v7);
    v5[0] = 4;
    int v6 = (uint64_t *)v3;
    sub_100016EAC((uint64_t)v5);
    sub_100016EAC((uint64_t)v5);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, __p, v7, v5, -1, 1);
    sub_100016EAC((uint64_t)v5);
    sub_100016B28(&v6, v5[0]);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F7ED8();
    }
  }
}

void sub_10002A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10002A104(uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  BOOL v3 = +[NSOperationQueue currentQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002A240;
  void v7[3] = &unk_100151600;
  v7[4] = a1;
  uint64_t v4 = [v2 addObserverForName:NSProcessInfoPowerStateDidChangeNotification object:0 queue:v3 usingBlock:v7];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = v4;

  sub_10002A24C(&v8);
}

void sub_10002A21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002A240(uint64_t a1)
{
}

void sub_10002A24C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = +[NSProcessInfo processInfo];
  unsigned int v3 = [v2 isLowPowerModeEnabled];

  uint64_t v4 = *(void *)(v1 + 40);
  sub_100015438(__p, off_10015E580);
  v7[0] = 0;
  uint64_t v8 = 0;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v7);
  v5[0] = 4;
  unint64_t v6 = v3;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v5);
  (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, __p, v7, v5, -1, 1);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28((uint64_t **)&v6, v5[0]);
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000F7FCC();
  }
}

void sub_10002A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10002A414(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = sub_10000FD1C((id *)(a1 + 24));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10002A518;
  handler[3] = &unk_1001515E0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.springboard.hasBlankedScreen", (int *)(v2 + 8), v3, handler);

  sub_10002A524(&v5, *(_DWORD *)(*(void *)(a1 + 32) + 8));
}

void sub_10002A500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002A518(uint64_t a1, int a2)
{
}

void sub_10002A524(uint64_t *a1, int token)
{
  uint64_t v2 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F80C4();
    }
  }
  else
  {
    BOOL v3 = state64 != 1;
    uint64_t v4 = *(void *)(v2 + 40);
    sub_100015438(__p, off_10015E588);
    v7[0] = 0;
    uint64_t v8 = 0;
    sub_100016EAC((uint64_t)v7);
    sub_100016EAC((uint64_t)v7);
    v5[0] = 4;
    unint64_t v6 = (uint64_t *)v3;
    sub_100016EAC((uint64_t)v5);
    sub_100016EAC((uint64_t)v5);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, void))(*(void *)v4 + 24))(v4, __p, v7, v5, -1, 0);
    sub_100016EAC((uint64_t)v5);
    sub_100016B28(&v6, v5[0]);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F8048();
    }
  }
}

void sub_10002A6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10002A71C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002A770((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void sub_10002A770(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10002A7C0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10002A874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10002A8BC((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10002A8BC(uint64_t a1, id *a2)
{
  BOOL v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_10002AA58);
}

void sub_10002A924(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002A95C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  uint64_t v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_10002AA58);
}

uint64_t sub_10002A9C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL sub_10002AA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t sub_10002AA58(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_10002AA84(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

uint64_t sub_10002AAE4(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_10002AC98(v7, v9);
  }
  else {
    char v10 = 0;
  }
  char v13 = v10;
  std::string v14 = &v10[24 * v4];
  uint64_t v15 = v14;
  int64_t v16 = &v10[24 * v9];
  sub_100015438(v14, *a2);
  uint64_t v15 = v14 + 24;
  sub_10002AC20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10002AE30((uint64_t)&v13);
  return v11;
}

void sub_10002AC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10002AC20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10002ACE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10002AC98(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100028E94();
  }
  return operator new(24 * a2);
}

uint64_t sub_10002ACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v13 + 1) = v9;
  }
  LOBYTE(v15) = 1;
  sub_10002ADB0((uint64_t)v14);
  return a6;
}

uint64_t sub_10002ADB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10002ADE8(a1);
  }
  return a1;
}

void sub_10002ADE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_10002AE30(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002AE68(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10002AEC0()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void sub_10002AF0C(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = **a1;
  uint64_t v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[PowerResolver] Initializing notification states", buf, 2u);
    uint64_t v2 = qword_10015EF78;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1000F825C();
  }
  sub_100029A48(v1);
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000F81FC();
  }
  sub_100029DFC(v1);
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000F819C();
  }
  sub_10002A104(v1);
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000F813C();
  }
  sub_10002A414(v1);
  operator delete();
}

void sub_10002B068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10002B0DC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void sub_10002B0FC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_10002B11C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t sub_10002B144(uint64_t a1)
{
  unsigned int v1 = 1 << -(char)__clz(((unint64_t)a1 >> 30) - 1);
  if (a1 >= 1) {
    return v1;
  }
  else {
    return 0;
  }
}

double sub_10002B168(uint64_t a1)
{
  double result = (double)((unint64_t)(a1 + 0x10000000) >> 29) * 0.5;
  if (!a1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002B190(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_10002B7C8(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  if (v3)
  {
    sub_1000147D8(v3);
    if (*((void *)&v5 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  return a1;
}

void sub_10002B220(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_1000147D8(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002B244@<X0>(void *a1@<X8>)
{
  return sub_10002B90C(a1);
}

void sub_10002B294(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4) {
    sub_1000147D8(v4);
  }
}

BOOL sub_10002B2B4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_10002B720();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_10002B370(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100151700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002B390(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100151700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002B3E4()
{
}

uint64_t sub_10002B410(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = *(_WORD *)&a00010203040506[2 * (a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = *(_WORD *)&a00010203040506[2 * a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

void sub_10002B4EC(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_100015438(&__p, "invalid_iterator");
  sub_100028FA8(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = (char *)v15;
  }
  else {
    uint64_t v11 = (char *)v15[0];
  }
  sub_100029160((uint64_t)a3, a1, v11);
  *a3 = off_1001517C0;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_10002B614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002B664(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_10002B6B8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

void sub_10002B720()
{
}

void sub_10002B738(const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10002B794(exception, a1);
}

void sub_10002B780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10002B794(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_10002B7C8@<X0>(void *a1@<X8>)
{
  unsigned int v2 = operator new(0x9E8uLL);
  double result = sub_10002B814(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10002B800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002B814(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001517E8;
  sub_10005A448(a1 + 3);
  return a1;
}

void sub_10002B85C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002B870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001517E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002B890(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001517E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10002B8E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10002B90C@<X0>(void *a1@<X8>)
{
  unsigned int v2 = operator new(0x38uLL);
  double result = sub_10002B958(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10002B944(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002B958(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100151838;
  sub_10002B190((uint64_t)(a1 + 3));
  return a1;
}

void sub_10002B9A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002B9B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100151838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002B9D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100151838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002BA28(uint64_t a1)
{
  char v1 = -86;
  sub_10002BA88((uint64_t)&v1, a1 + 24);
}

void sub_10002BA88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    sub_1000147D8(v3);
  }
  size_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    sub_1000147D8(v4);
  }
}

uint64_t sub_10002BAD8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_100007460(a1, -1, 0x20u, 0, 1, (uint64_t *)va);
}

void sub_10002BB00(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_error_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

void *sub_10002BB40@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100015438(a2, off_100151A38[a1]);
}

uint64_t sub_10002BB54(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    uint64_t v3 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 0xA:
        if (*a1 != 0x656C706D6F437372 || *((_WORD *)a1 + 4) != 25972) {
          goto LABEL_87;
        }
        return 0;
      case 0xC:
        goto LABEL_59;
      case 0xD:
        goto LABEL_83;
      case 0x12:
        goto LABEL_75;
      case 0x13:
        if (*a1 == 0x6C6F526572507372
          && a1[1] == 0x6576457265766F6CLL
          && *(uint64_t *)((char *)a1 + 11) == 0x73746E6576457265)
        {
          return 1;
        }
        if (v2 == 18) {
          goto LABEL_75;
        }
        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        if (v2 != 12) {
          goto LABEL_87;
        }
LABEL_59:
        if (*a1 != 0x6567676972547372 || *((_DWORD *)a1 + 2) != 1735347314) {
          goto LABEL_87;
        }
        return 2;
      case 0x16:
        if (*a1 == 0x6574656C65447372
          && a1[1] == 0x726F66736E617254
          && *(uint64_t *)((char *)a1 + 14) == 0x65746174536D726FLL)
        {
          return 3;
        }
        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        if (v2 != 18) {
          goto LABEL_87;
        }
LABEL_75:
        if (*a1 == 0x74617267694D7372 && a1[1] == 0x7361626174614465 && *((_WORD *)a1 + 8) == 29541) {
          return 4;
        }
        uint64_t v3 = a1;
        if (v2 == 13) {
          goto LABEL_83;
        }
        goto LABEL_87;
      default:
        goto LABEL_87;
    }
  }
  uint64_t v5 = a1[1];
  if (v5 == 10 && *(void *)*a1 == 0x656C706D6F437372 && *(_WORD *)(*a1 + 8) == 25972) {
    return 0;
  }
  if (v5 == 19)
  {
    if (*(void *)*a1 == 0x6C6F526572507372
      && *(void *)(*a1 + 8) == 0x6576457265766F6CLL
      && *(void *)(*a1 + 11) == 0x73746E6576457265)
    {
      return 1;
    }
    uint64_t v5 = a1[1];
  }
  if (v5 == 12)
  {
    if (*(void *)*a1 == 0x6567676972547372 && *(_DWORD *)(*a1 + 8) == 1735347314) {
      return 2;
    }
    uint64_t v5 = a1[1];
  }
  if (v5 == 22)
  {
    if (*(void *)*a1 == 0x6574656C65447372
      && *(void *)(*a1 + 8) == 0x726F66736E617254
      && *(void *)(*a1 + 14) == 0x65746174536D726FLL)
    {
      return 3;
    }
    uint64_t v5 = a1[1];
  }
  if (v5 == 18)
  {
    if (*(void *)*a1 == 0x74617267694D7372
      && *(void *)(*a1 + 8) == 0x7361626174614465
      && *(_WORD *)(*a1 + 16) == 29541)
    {
      return 4;
    }
    uint64_t v5 = a1[1];
  }
  if (v5 != 13) {
    goto LABEL_87;
  }
  uint64_t v3 = (uint64_t *)*a1;
LABEL_83:
  uint64_t v22 = *v3;
  uint64_t v23 = *(uint64_t *)((char *)v3 + 5);
  if (v22 == 0x666E6F6365527372 && v23 == 0x6572756769666E6FLL) {
    return 5;
  }
LABEL_87:
  if (sub_10002B2B4(a1, "rsPostRolloverEvents")) {
    return 6;
  }
  if (sub_10002B2B4(a1, "rsSaveNewCadence")) {
    return 7;
  }
  return 0;
}

void sub_10002BF60()
{
}

void sub_10002C020()
{
}

void sub_10002C04C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  dispatch_queue_t v17 = dispatch_queue_create("analyticsd.RolloverManagerQueue", 0);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v17;
  *a1 = &off_100151888;
  a1[4] = *a2;
  uint64_t v18 = a2[1];
  a1[5] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = *a3;
  uint64_t v19 = a3[1];
  a1[7] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  a1[8] = *a4;
  uint64_t v20 = a4[1];
  a1[9] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  a1[10] = *a6;
  uint64_t v21 = a6[1];
  a1[11] = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  a1[12] = *a7;
  uint64_t v22 = a7[1];
  a1[13] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  a1[14] = *a8;
  uint64_t v23 = a8[1];
  a1[15] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  a1[16] = *a9;
  uint64_t v24 = a9[1];
  a1[17] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  a1[18] = *a5;
  uint64_t v25 = a5[1];
  a1[19] = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_10002C338(_Unwind_Exception *exception_object)
{
}

void sub_10002C410(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, dispatch_group_t *a4@<X8>)
{
  dispatch_group_t v8 = dispatch_group_create();
  *a4 = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_100016A10((uint64_t)v10, a3);
  dispatch_group_t group = v8;
  if (group) {
    dispatch_group_enter(group);
  }
  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v12, (void *)(a1 + 8));
  operator new();
}

void sub_10002C630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_10002C694(v16);
  _Unwind_Resume(a1);
}

id *sub_10002C694(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  return a1;
}

void sub_10002C6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  void v5[2] = a3;
  size_t v4 = sub_10000FD1C((id *)(a1 + 24));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002F2D8;
  block[3] = &unk_1001519A8;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_10002C790(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  char v7 = a2;
  uint64_t v4 = a1 + 8;
  v6[0] = a1;
  v6[1] = &v7;
  _DWORD v6[2] = &v9;
  void v6[3] = a4;
  uint64_t v5 = sub_10000FD1C((id *)(a1 + 24));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002F32C;
  block[3] = &unk_1001519A8;
  block[4] = v4;
  block[5] = v6;
  dispatch_sync(v5, block);
}

void sub_10002C864(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_10002C978(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10002C990(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v6 = a1;
  id v2 = sub_10000FD1C((id *)(a1 + 24));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002F538;
  void v7[3] = &unk_1001519C8;
  v7[4] = v1;
  void v7[5] = &v6;
  uint64_t v3 = objc_retainBlock(v7);
  unsigned __int8 v10 = -86;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002F550;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  uint64_t v4 = v10;

  return v4;
}

void sub_10002CAC4(uint64_t a1)
{
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v27 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B2A98((uint64_t)"rollover", &v26);
  if (!(_BYTE)v26)
  {
    sub_10001200C((uint64_t)v24, 0, 0, 0, 1);
    sub_100016EAC((uint64_t)v24);
    char v2 = v26;
    LOBYTE(v26) = v24[0];
    v24[0] = v2;
    uint64_t v3 = v27;
    uint64_t v27 = v25;
    uint64_t v25 = v3;
    sub_100016EAC((uint64_t)&v26);
    sub_100016EAC((uint64_t)v24);
    sub_100016B28(&v25, v24[0]);
  }
  uint64_t v33 = "rolloverId";
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v4;
  long long v35 = v4;
  sub_1000135DC((uint64_t)&v26, &v33, (uint64_t)__dst);
  int v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  sub_100013648(&v28);
  if (sub_100013964((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v5 = sub_1000155C8();
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t)sub_100013AAC((unsigned __int8 **)__dst);
  }
  if (*(unsigned char *)v5 == 3)
  {
    uint64_t v6 = *(long long **)(v5 + 8);
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v6 = 0;
LABEL_10:
  uint64_t v33 = "lastStep";
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v7;
  long long v35 = v7;
  sub_1000135DC((uint64_t)&v26, &v33, (uint64_t)__dst);
  int v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  sub_100013648(&v28);
  if (sub_100013964((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v8 = sub_1000155C8();
    if (!v8) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)sub_100013AAC((unsigned __int8 **)__dst);
  }
  if (*(unsigned char *)v8 == 3)
  {
    uint64_t v9 = *(long long **)(v8 + 8);
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = 0;
LABEL_17:
  uint64_t v33 = "reason";
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v10;
  long long v35 = v10;
  sub_1000135DC((uint64_t)&v26, &v33, (uint64_t)__dst);
  int v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  sub_100013648(&v28);
  if (sub_100013964((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v11 = sub_1000155C8();
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)sub_100013AAC((unsigned __int8 **)__dst);
  }
  if (*(unsigned char *)v11 == 3)
  {
    long long v12 = *(long long **)(v11 + 8);
    goto LABEL_24;
  }
LABEL_23:
  long long v12 = 0;
LABEL_24:
  uint64_t v33 = "options";
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v13;
  long long v35 = v13;
  sub_1000135DC((uint64_t)&v26, &v33, (uint64_t)__dst);
  int v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  sub_100013648(&v28);
  if (!sub_100013964((unsigned __int8 **)__dst, &v28))
  {
    uint64_t v14 = sub_100013AAC((unsigned __int8 **)__dst);
LABEL_28:
    if (*v14 == 1) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v14 = (unsigned char *)sub_1000155C8();
  if (v14) {
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v14 = 0;
LABEL_30:
  uint64_t v33 = "stepRetries";
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v15;
  long long v35 = v15;
  sub_1000135DC((uint64_t)&v26, &v33, (uint64_t)__dst);
  int v28 = (unsigned __int8 *)&v26;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0x8000000000000000;
  sub_100013648(&v28);
  if (!sub_100013964((unsigned __int8 **)__dst, &v28))
  {
    int64_t v16 = sub_100013AAC((unsigned __int8 **)__dst);
LABEL_34:
    if (*v16 - 5 < 3) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  int64_t v16 = (unsigned char *)sub_1000155C8();
  if (v16) {
    goto LABEL_34;
  }
LABEL_35:
  int64_t v16 = 0;
LABEL_36:
  if (v6)
  {
    if (*((char *)v6 + 23) < 0)
    {
      sub_100017424(__dst, *(void **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v17 = *v6;
      *(void *)&long long v35 = *((void *)v6 + 2);
      *(_OWORD *)__dst = v17;
    }
  }
  else
  {
    sub_100015438(__dst, "<unknown>");
  }
  if (v9)
  {
    if (*((char *)v9 + 23) < 0)
    {
      sub_100017424(v22, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v18 = *v9;
      uint64_t v23 = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v22 = v18;
    }
    int v19 = sub_10002BB54((uint64_t *)v22);
  }
  else
  {
    int v19 = 0;
  }
  DWORD2(v35) = v19;
  if (v12)
  {
    if (*((char *)v12 + 23) < 0)
    {
      sub_100017424(&__p, *(void **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v20 = *v12;
      uint64_t v37 = *((void *)v12 + 2);
      long long __p = v20;
    }
  }
  else
  {
    sub_100015438(&__p, "");
  }
  if (v14) {
    sub_100016A10((uint64_t)v38, (uint64_t)v14);
  }
  else {
    sub_10001200C((uint64_t)v38, 0, 0, 0, 1);
  }
  if (v16)
  {
    LODWORD(v28) = -1431655766;
    sub_10002F58C(v16, (unsigned int *)&v28);
    int v21 = (int)v28;
  }
  else
  {
    int v21 = 0;
  }
  int v40 = v21;
  sub_10002D068(a1 + 192, (long long *)__dst);
  sub_100016EAC((uint64_t)v38);
  sub_100016B28(&v39, v38[0]);
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v35) < 0) {
    operator delete(__dst[0]);
  }
  if (v9 && SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
}

void sub_10002CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D068(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  uint64_t v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  char v7 = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  v11[0] = v7;
  long long v12 = (uint64_t *)*((void *)a2 + 8);
  sub_100016EAC((uint64_t)a2 + 56);
  *((unsigned char *)a2 + 56) = 0;
  *((void *)a2 + 8) = 0;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v11);
  char v8 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v11[0];
  v11[0] = v8;
  uint64_t v9 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  long long v12 = v9;
  sub_100016EAC(a1 + 56);
  sub_100016EAC((uint64_t)v11);
  sub_100016B28(&v12, v11[0]);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  return a1;
}

uint64_t sub_10002D1A8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002D200(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v70 = v4;
  long long v71 = v4;
  long long v68 = v4;
  long long v69 = v4;
  long long __dst = v4;
  uint64_t v5 = (std::string *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
  {
    sub_100017424(&__dst, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }
  else
  {
    long long __dst = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(void *)&long long v68 = *(void *)(a1 + 208);
  }
  DWORD2(v68) = *(_DWORD *)(a1 + 216);
  if (*(char *)(a1 + 247) < 0)
  {
    sub_100017424(&v69, *(void **)(a1 + 224), *(void *)(a1 + 232));
  }
  else
  {
    long long v69 = *(_OWORD *)(a1 + 224);
    *(void *)&long long v70 = *(void *)(a1 + 240);
  }
  sub_100016A10((uint64_t)&v70 + 8, a1 + 248);
  DWORD2(v71) = *(_DWORD *)(a1 + 264);
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  v66 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v65, 0, 0, 0, 1);
  sub_1000168C0((uint64_t)v63, a2);
  long long v6 = sub_10000D104((unsigned __int8 *)&v65, "rolloverId");
  sub_100016EAC((uint64_t)v63);
  char v7 = *(unsigned char *)v6;
  *(unsigned char *)long long v6 = v63[0];
  v63[0] = v7;
  char v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v64;
  v64 = v8;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)v63);
  sub_100016B28(&v64, v63[0]);
  sub_1000168C0((uint64_t)v61, a2 + 32);
  uint64_t v9 = sub_10000D104((unsigned __int8 *)&v65, "reason");
  sub_100016EAC((uint64_t)v61);
  char v10 = *(unsigned char *)v9;
  *(unsigned char *)uint64_t v9 = v61[0];
  v61[0] = v10;
  uint64_t v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v62;
  uint64_t v62 = v11;
  sub_100016EAC((uint64_t)v9);
  sub_100016EAC((uint64_t)v61);
  sub_100016B28(&v62, v61[0]);
  sub_100016A10((uint64_t)v59, a2 + 56);
  long long v12 = sub_10000D104((unsigned __int8 *)&v65, "options");
  sub_100016EAC((uint64_t)v59);
  char v13 = *(unsigned char *)v12;
  *(unsigned char *)long long v12 = v59[0];
  v59[0] = v13;
  uint64_t v14 = (uint64_t *)v12[1];
  v12[1] = (uint64_t)v60;
  uint64_t v60 = v14;
  sub_100016EAC((uint64_t)v12);
  sub_100016EAC((uint64_t)v59);
  sub_100016B28(&v60, v59[0]);
  sub_10002BB40(*(_DWORD *)(a2 + 24), &__p);
  sub_10001C898((uint64_t)v57, (uint64_t)&__p);
  long long v15 = sub_10000D104((unsigned __int8 *)&v65, "lastStep");
  sub_100016EAC((uint64_t)v57);
  char v16 = *(unsigned char *)v15;
  *(unsigned char *)long long v15 = v57[0];
  v57[0] = v16;
  long long v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v58;
  char v58 = v17;
  sub_100016EAC((uint64_t)v15);
  sub_100016EAC((uint64_t)v57);
  sub_100016B28(&v58, v57[0]);
  if (v56 < 0) {
    operator delete(__p);
  }
  long long v18 = (uint64_t *)*(unsigned int *)(a2 + 72);
  v52[0] = 6;
  uint64_t v53 = v18;
  sub_100016EAC((uint64_t)v52);
  sub_100016EAC((uint64_t)v52);
  int v19 = sub_10000D104((unsigned __int8 *)&v65, "stepRetries");
  sub_100016EAC((uint64_t)v52);
  unsigned __int8 v20 = *(unsigned char *)v19;
  *(unsigned char *)int v19 = v52[0];
  v52[0] = v20;
  int v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v53;
  uint64_t v53 = v21;
  sub_100016EAC((uint64_t)v19);
  sub_100016EAC((uint64_t)v52);
  sub_100016B28(&v53, v52[0]);
  sub_1000B2C84((uint64_t)"rollover", (uint64_t)&v65);
  std::string::operator=(v5, (const std::string *)a2);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 32));
  sub_100016A10((uint64_t)&__p, a2 + 56);
  sub_100016EAC((uint64_t)&__p);
  char v22 = *(unsigned char *)(a1 + 248);
  *(unsigned char *)(a1 + 248) = (_BYTE)__p;
  LOBYTE(__p) = v22;
  uint64_t v23 = *(uint64_t **)(a1 + 256);
  *(void *)(a1 + 256) = v55;
  char v55 = (std::__shared_weak_count *)v23;
  sub_100016EAC(a1 + 248);
  sub_100016EAC((uint64_t)&__p);
  sub_100016B28((uint64_t **)&v55, __p);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 72);
  if (DWORD2(v68))
  {
    unint64_t v50 = 0xAAAAAAAAAAAAAA00;
    uint64_t v51 = 0;
    sub_100016EAC((uint64_t)&v50);
    sub_100016EAC((uint64_t)&v50);
    sub_10002F72C((uint64_t)v48, "rollover");
    uint64_t v24 = sub_10000D104((unsigned __int8 *)&v50, "type");
    sub_100016EAC((uint64_t)v48);
    char v25 = *(unsigned char *)v24;
    *(unsigned char *)uint64_t v24 = v48[0];
    v48[0] = v25;
    unint64_t v26 = (uint64_t *)v24[1];
    v24[1] = (uint64_t)v49;
    double v49 = v26;
    sub_100016EAC((uint64_t)v24);
    sub_100016EAC((uint64_t)v48);
    sub_100016B28(&v49, v48[0]);
    sub_1000168C0((uint64_t)v46, (uint64_t)&__dst);
    uint64_t v27 = sub_10000D104((unsigned __int8 *)&v50, "id");
    sub_100016EAC((uint64_t)v46);
    char v28 = *(unsigned char *)v27;
    *(unsigned char *)uint64_t v27 = v46[0];
    v46[0] = v28;
    uint64_t v29 = (uint64_t *)v27[1];
    v27[1] = (uint64_t)v47;
    unint64_t v47 = v29;
    sub_100016EAC((uint64_t)v27);
    sub_100016EAC((uint64_t)v46);
    sub_100016B28(&v47, v46[0]);
    sub_1000168C0((uint64_t)v44, (uint64_t)&v69);
    uint64_t v30 = sub_10000D104((unsigned __int8 *)&v50, "reason");
    sub_100016EAC((uint64_t)v44);
    char v31 = *(unsigned char *)v30;
    *(unsigned char *)uint64_t v30 = v44[0];
    v44[0] = v31;
    unint64_t v32 = (uint64_t *)v30[1];
    v30[1] = (uint64_t)v45;
    char v45 = v32;
    sub_100016EAC((uint64_t)v30);
    sub_100016EAC((uint64_t)v44);
    sub_100016B28(&v45, v44[0]);
    sub_10002BB40(SDWORD2(v68), &__p);
    sub_10001C898((uint64_t)v42, (uint64_t)&__p);
    uint64_t v33 = sub_10000D104((unsigned __int8 *)&v50, "step");
    sub_100016EAC((uint64_t)v42);
    char v34 = *(unsigned char *)v33;
    *(unsigned char *)uint64_t v33 = v42[0];
    v42[0] = v34;
    long long v35 = (uint64_t *)v33[1];
    v33[1] = (uint64_t)v43;
    uint64_t v43 = v35;
    sub_100016EAC((uint64_t)v33);
    sub_100016EAC((uint64_t)v42);
    sub_100016B28(&v43, v42[0]);
    if (v56 < 0) {
      operator delete(__p);
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = 1000 * (std::chrono::system_clock::now().__d_.__rep_ - *(void *)(a1 + 176));
    v40[0] = 5;
    int v41 = (uint64_t *)v36;
    sub_100016EAC((uint64_t)v40);
    sub_100016EAC((uint64_t)v40);
    uint64_t v37 = sub_10000D104((unsigned __int8 *)&v50, "duration");
    sub_100016EAC((uint64_t)v40);
    unsigned __int8 v38 = *(unsigned char *)v37;
    *(unsigned char *)uint64_t v37 = v40[0];
    v40[0] = v38;
    int v39 = (uint64_t *)v37[1];
    v37[1] = (uint64_t)v41;
    int v41 = v39;
    sub_100016EAC((uint64_t)v37);
    sub_100016EAC((uint64_t)v40);
    sub_100016B28(&v41, v40[0]);
    long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
    char v55 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    sub_10002F7C4("com.apple.analyticsd.perf.rollover", (uint64_t)&v50, &__p);
    (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &__p);
    if (v55) {
      sub_1000147D8(v55);
    }
    sub_100016EAC((uint64_t)&v50);
    sub_100016B28(&v51, v50);
  }
  *(std::chrono::system_clock::time_point *)(a1 + 176) = std::chrono::system_clock::now();
  sub_100016EAC((uint64_t)&v65);
  sub_100016B28(&v66, v65);
  sub_100016EAC((uint64_t)&v70 + 8);
  sub_100016B28((uint64_t **)&v71, BYTE8(v70));
  if (SBYTE7(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SBYTE7(v68) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_10002D964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  if (*(char *)(v37 - 153) < 0) {
    operator delete(*(void **)(v37 - 176));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002DAAC(uint64_t a1, unsigned int a2)
{
  if (a2 >= 8) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = a2;
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v32 = v5;
  long long v33 = v5;
  long long v30 = v5;
  *(_OWORD *)char v31 = v5;
  *(_OWORD *)long long __dst = v5;
  if (*(char *)(a1 + 215) < 0)
  {
    sub_100017424(__dst, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 192);
    *(void *)&long long v30 = *(void *)(a1 + 208);
  }
  DWORD2(v3sub_100027DA4((uint64_t)&a9, 0) = *(_DWORD *)(a1 + 216);
  if (*(char *)(a1 + 247) < 0)
  {
    sub_100017424(v31, *(void **)(a1 + 224), *(void *)(a1 + 232));
  }
  else
  {
    *(_OWORD *)char v31 = *(_OWORD *)(a1 + 224);
    *(void *)&long long v32 = *(void *)(a1 + 240);
  }
  sub_100016A10((uint64_t)&v32 + 8, a1 + 248);
  unsigned int v6 = *(_DWORD *)(a1 + 264);
  DWORD2(v33) = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 216);
  if (v7 >= 8) {
    LOBYTE(v7) = 0;
  }
  if (a2 && v4 <= v7)
  {
    if (v4 != v7)
    {
      long long v17 = (id)qword_10015EF20;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        sub_10002BB40(a2, __p);
        int v19 = v28;
        unsigned __int8 v20 = (void **)__p[0];
        sub_10002BB40(*(_DWORD *)(a1 + 216), buf);
        int v21 = __p;
        if (v19 < 0) {
          int v21 = v20;
        }
        if (v37 >= 0) {
          char v22 = buf;
        }
        else {
          char v22 = *(unsigned char **)buf;
        }
        *(_DWORD *)unsigned __int8 v38 = 136446466;
        int v39 = v21;
        __int16 v40 = 2082;
        int v41 = v22;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[RolloverManager::RolloverStep] Skipping rollover step %{public}s as it has already successfuly completed (current step: %{public}s)", v38, 0x16u);
        if (v37 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    long long v17 = (id)qword_10015EF20;
    BOOL v8 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (v6 >= 2)
    {
      if (v8)
      {
        sub_10002BB40(*(_DWORD *)(a1 + 216), __p);
        if (v28 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        int v10 = *(_DWORD *)(a1 + 264);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v9;
        __int16 v35 = 1026;
        int v36 = v10;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[RolloverManager::RolloverStep] Exceeded max retries for rollover step %{public}s (retries: %{public}d). Skipping step", buf, 0x12u);
LABEL_41:
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_43:

      uint64_t v23 = 0;
      goto LABEL_52;
    }
    if (v8)
    {
      sub_10002BB40(*(_DWORD *)(a1 + 216), __p);
      uint64_t v24 = v28 >= 0 ? __p : (void **)__p[0];
      int v25 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v35 = 1026;
      int v36 = v25;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[RolloverManager::RolloverStep] Retrying rollover step %{public}s (retries: %{public}d)", buf, 0x12u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = DWORD2(v33) + 1;
  }
  else
  {
    uint64_t v11 = (id)qword_10015EF20;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      sub_10002BB40(*(_DWORD *)(a1 + 216), __p);
      int v12 = v28;
      char v13 = (void **)__p[0];
      sub_10002BB40(a2, buf);
      uint64_t v14 = __p;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v37 >= 0) {
        long long v15 = buf;
      }
      else {
        long long v15 = *(unsigned char **)buf;
      }
      *(_DWORD *)unsigned __int8 v38 = 136446466;
      int v39 = v14;
      __int16 v40 = 2082;
      int v41 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[RolloverManager::RolloverStep] Executing new rollover step. Progressing from %{public}s --> %{public}s", v38, 0x16u);
      if (v37 < 0) {
        operator delete(*(void **)buf);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = 0;
    DWORD2(v3sub_100027DA4((uint64_t)&a9, 0) = a2;
  }
  DWORD2(v33) = v16;
  sub_10002D200(a1, (uint64_t)__dst);
  uint64_t v23 = 1;
LABEL_52:
  sub_100016EAC((uint64_t)&v32 + 8);
  sub_100016B28((uint64_t **)&v33, BYTE8(v32));
  if (SBYTE7(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SBYTE7(v30) < 0) {
    operator delete(__dst[0]);
  }
  return v23;
}

void sub_10002DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_10002D1A8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10002DF8C(uint64_t a1, unsigned __int8 *a2)
{
  int v16 = "skipLogWriting";
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v3;
  long long v18 = v3;
  sub_1000135DC((uint64_t)a2, &v16, (uint64_t)buf);
  v15[0] = a2;
  memset(&v15[1], 0, 24);
  v15[4] = (unsigned __int8 *)0x8000000000000000;
  sub_100013648(v15);
  if (sub_100013964((unsigned __int8 **)buf, v15))
  {
    unsigned __int8 v4 = (unsigned char *)sub_1000155C8();
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned __int8 v4 = sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*v4 == 4 && v4[8])
  {
    uint64_t v5 = qword_10015EF20;
    if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      unsigned int v6 = "[RolloverManager] Log writing: SKIP (rollover contains skipLogWriting flag";
      unsigned int v7 = v5;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v6, buf, 2u);
    }
    return 0;
  }
LABEL_9:
  if (!os_variant_is_darwinos())
  {
    uint64_t v11 = +[OSASystemConfiguration sharedInstance];
    unsigned int v12 = [v11 optInApple];

    BOOL v8 = qword_10015EF20;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO);
    if (v12)
    {
      if (!v13) {
        return 1;
      }
      *(_WORD *)long long buf = 0;
      int v10 = "[RolloverManager] Log writing: PROCEED (device IS opted in";
      uint64_t v9 = 1;
      goto LABEL_15;
    }
    if (v13)
    {
      *(_WORD *)long long buf = 0;
      unsigned int v6 = "[RolloverManager] Log writing: SKIP (device IS NOT opted in)";
      unsigned int v7 = v8;
      goto LABEL_18;
    }
    return 0;
  }
  BOOL v8 = qword_10015EF20;
  uint64_t v9 = 1;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    int v10 = "[RolloverManager] Log writing: SKIP (OS variant is darwinOS)";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, buf, 2u);
  }
  return v9;
}

void sub_10002E198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002E1B4(uint64_t a1)
{
  sub_10002E254(a1);

  operator delete();
}

id *sub_10002E1EC(id *a1)
{
  char v2 = sub_10000FD1C(a1);

  if (v2)
  {
    long long v3 = sub_10000FD1C(a1);
    dispatch_group_leave(v3);
  }
  id v4 = *a1;
  *a1 = 0;

  return a1;
}

uint64_t sub_10002E254(uint64_t a1)
{
  *(void *)a1 = &off_100151888;
  sub_10002E36C((void *)(a1 + 272));
  sub_100016EAC(a1 + 248);
  sub_100016B28((uint64_t **)(a1 + 256), *(unsigned __int8 *)(a1 + 248));
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  sub_10001C900((uint64_t *)(a1 + 184), 0);
  char v2 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v2) {
    sub_10002E8B4(a1 + 168, v2);
  }
  long long v3 = *(void **)(a1 + 160);
  *(void *)(a1 + 16sub_100027DA4((uint64_t)&a9, 0) = 0;
  if (v3) {
    sub_10002E8B4(a1 + 160, v3);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    sub_1000147D8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    sub_1000147D8(v5);
  }
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (v6) {
    sub_1000147D8(v6);
  }
  unsigned int v7 = *(std::__shared_weak_count **)(a1 + 104);
  if (v7) {
    sub_1000147D8(v7);
  }
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8) {
    sub_1000147D8(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (v9) {
    sub_1000147D8(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 56);
  if (v10) {
    sub_1000147D8(v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11) {
    sub_1000147D8(v11);
  }
  sub_1000296A4(a1 + 8);
  return a1;
}

void *sub_10002E36C(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10002E3F0(uint64_t a1, uint64_t a2)
{
  sub_100016EAC(a2 + 24);
  sub_100016B28((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    long long v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_10002E44C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_10002E3F0(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_10002E4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    unsigned int v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      sub_100016EAC(v6);
      int v8 = *v7;
      v7 -= 16;
      sub_100016B28((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

void *sub_10002E524(uint64_t a1)
{
  char v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = 0;
  sub_10002E584(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_10002E570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002E584(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    double result = sub_10002E600(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10002E5E4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002E600(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_100028DEC();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10002E644(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10002E6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10002E740((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10002E740(uint64_t a1, id *a2)
{
  long long v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_10002E888);
}

void sub_10002E7A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002E7E0(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  char v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_10002E888);
}

uint64_t sub_10002E844(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10002E888(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_10002E8B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    long long v3 = (std::__shared_weak_count *)a2[9];
    if (v3) {
      sub_1000147D8(v3);
    }
    id v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      sub_1000147D8(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[5];
    if (v5) {
      sub_1000147D8(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)a2[3];
    if (v6) {
      sub_1000147D8(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    if (v7) {
      sub_1000147D8(v7);
    }
    operator delete();
  }
}

void sub_10002E93C(uint64_t a1)
{
}

void sub_10002E948(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  char v2 = (id)qword_10015EF20;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    long long v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      long long v3 = (void *)*v3;
    }
    sub_100007460(v1 + 32, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      id v4 = __p;
    }
    else {
      id v4 = (void **)__p[0];
    }
    int buf = 136446466;
    *(void *)buf_4 = v3;
    __int16 v11 = 2082;
    unsigned int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RolloverManager] *** BEGINNING PERFORM ROLLOVER (reason: %{public}s, options: %{public}s)", (uint8_t *)&buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  operator new();
}

void sub_10002F1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_10002F264(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002F264(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_10002E1EC((id *)(v1 + 48));
    sub_100016EAC(v1 + 32);
    sub_100016B28((uint64_t **)(v1 + 40), *(unsigned __int8 *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_10002F2D8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  sub_100041538(*(void *)(*v1 + 48));
  uint64_t v5 = *(uint64_t **)(v3 + 160);

  sub_10006A978(v5, v2, v4);
}

void *sub_10002F32C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  (*(void (**)(void))(**(void **)(*v1 + 48) + 56))(*(void *)(*v1 + 48));
  uint64_t v3 = *(void *)(v2 + 160);
  char v4 = *(unsigned char *)v1[1];
  uint64_t v5 = *(void *)v1[2];
  uint64_t v6 = v1[3];

  return sub_10006C91C(v3, v4, v5, v6);
}

void sub_10002F39C(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = **a1;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v7 = v2;
  long long v8 = v2;
  long long v5 = v2;
  *(_OWORD *)long long __p = v2;
  *(_OWORD *)char v4 = v2;
  sub_100015438(v4, "<unknown>");
  DWORD2(v5) = 0;
  sub_100015438(__p, "");
  sub_10001200C((uint64_t)&v7 + 8, 0, 0, 0, 1);
  DWORD2(v8) = 0;
  sub_10002D200(v1, (uint64_t)v4);
  sub_100016EAC((uint64_t)&v7 + 8);
  sub_100016B28((uint64_t **)&v8, BYTE8(v7));
  if (SBYTE7(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v5) < 0) {
    operator delete(v4[0]);
  }
  operator delete();
}

void sub_10002F4C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,unsigned __int8 a24)
{
  sub_100016EAC(v24);
  sub_100016B28((uint64_t **)(v25 + 64), a24);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  operator delete();
}

BOOL sub_10002F538(uint64_t a1)
{
  return *(_DWORD *)(**(void **)(a1 + 40) + 216) != 0;
}

uint64_t sub_10002F550(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

unsigned char *sub_10002F58C(unsigned char *result, unsigned int *a2)
{
  long long v2 = result;
  switch(*result)
  {
    case 4:
      unsigned int v3 = result[8];
      break;
    case 5:
    case 6:
      unsigned int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      unsigned int v3 = *((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      long long v5 = (char *)sub_100029400(v2);
      sub_100015438(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_10002F6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_10002F72C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_10002F778(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_10002F778(char *a1)
{
  long long v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_10002F7B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10002F7C4(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  sub_10002F840(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000106D4((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_10002F82C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10002F840(void *a1, char *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001519F8;
  char v5 = -86;
  sub_10002F95C((int)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10002F8D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10002F8E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001519F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002F908(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001519F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10002F95C(int a1, uint64_t a2, char *__s, uint64_t a4)
{
  sub_100015438(__p, __s);
  sub_100016A10((uint64_t)v6, a4);
  sub_100010910(a2, (long long *)__p, (uint64_t)v6, 0, 0);
  sub_100016EAC((uint64_t)v6);
  sub_100016B28(&v7, v6[0]);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10002FA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10002FA40@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x50uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_100151AC0;
  *((void *)v6 + 3) = off_100151A88;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  *((void *)v6 + 6) = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *a2;
  *(__n128 *)(v6 + 56) = *a2;
  *((void *)v6 + 9) = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

__n128 sub_10002FAF0(uint64_t a1, long long *a2, __n128 *a3)
{
  *(void *)a1 = off_100151A88;
  long long v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *a3;
  *(void *)(a1 + 48) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 32) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_10002FB40(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v5 = 0;
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(a2);
  if (!*a2)
  {
    char v4 = qword_10015ED90;
    if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F14(&v5, a1, v4);
    }
  }
}

void sub_10002FC0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a3 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a3, 0, 0, 0, 1);
  sub_1000168C0((uint64_t)v42, a1 + 8);
  uint64_t v6 = sub_10000D104((unsigned __int8 *)a3, "name");
  sub_100016EAC((uint64_t)v42);
  char v7 = *(unsigned char *)v6;
  *(unsigned char *)uint64_t v6 = v42[0];
  v42[0] = v7;
  std::string v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v43;
  uint64_t v43 = v8;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)v42);
  sub_100016B28(&v43, v42[0]);
  sub_1000168C0((uint64_t)v40, a1 + 32);
  char v9 = sub_10000D104((unsigned __int8 *)a3, "path");
  sub_100016EAC((uint64_t)v40);
  char v10 = *(unsigned char *)v9;
  *(unsigned char *)char v9 = v40[0];
  v40[0] = v10;
  __int16 v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v41;
  int v41 = v11;
  sub_100016EAC((uint64_t)v9);
  sub_100016EAC((uint64_t)v40);
  sub_100016B28(&v41, v40[0]);
  unsigned __int8 v38 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  int v39 = 0;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, char **))(*(void *)a1 + 16))(&v37, a1, &v39);
  if (v37)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v37 + 16))(&v35);
    unsigned int v12 = sub_10000D104((unsigned __int8 *)a3, "header");
    sub_100016EAC((uint64_t)&v35);
    char v13 = *(unsigned char *)v12;
    *(unsigned char *)unsigned int v12 = v35;
    LOBYTE(v35) = v13;
    uint64_t v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v36;
    int v36 = v14;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)&v35);
    sub_100016B28(&v36, v35);
    uint64_t v15 = *(void *)(a2 + 24);
    if (!v15) {
      goto LABEL_8;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 48))(&v33);
    int v16 = sub_10000D104((unsigned __int8 *)a3, "status");
    sub_100016EAC((uint64_t)&v33);
    char v17 = *(unsigned char *)v16;
    *(unsigned char *)int v16 = v33;
    LOBYTE(v33) = v17;
    long long v18 = (uint64_t **)&v34;
    uint64_t v19 = v16[1];
    v16[1] = v34;
    uint64_t v34 = v19;
    sub_100016EAC((uint64_t)v16);
    sub_100016EAC((uint64_t)&v33);
    int v20 = v33;
  }
  else
  {
    v31[0] = 4;
    long long v32 = 0;
    sub_100016EAC((uint64_t)v31);
    sub_100016EAC((uint64_t)v31);
    int v21 = sub_10000D104((unsigned __int8 *)a3, "usable");
    sub_100016EAC((uint64_t)v31);
    unsigned __int8 v22 = *(unsigned char *)v21;
    *(unsigned char *)int v21 = v31[0];
    v31[0] = v22;
    uint64_t v23 = (uint64_t *)v21[1];
    v21[1] = (uint64_t)v32;
    long long v32 = v23;
    sub_100016EAC((uint64_t)v21);
    sub_100016EAC((uint64_t)v31);
    sub_100016B28(&v32, v31[0]);
    uint64_t v24 = v39;
    if (!v39) {
      uint64_t v24 = "unknown";
    }
    char v28 = v24;
    sub_100030238((uint64_t)v29, &v28);
    uint64_t v25 = sub_10000D104((unsigned __int8 *)a3, "loadError");
    sub_100016EAC((uint64_t)v29);
    char v26 = *(unsigned char *)v25;
    *(unsigned char *)uint64_t v25 = v29[0];
    v29[0] = v26;
    long long v18 = (uint64_t **)&v30;
    uint64_t v27 = v25[1];
    v25[1] = v30;
    uint64_t v30 = v27;
    sub_100016EAC((uint64_t)v25);
    sub_100016EAC((uint64_t)v29);
    int v20 = v29[0];
  }
  sub_100016B28(v18, v20);
LABEL_8:
  if (v38) {
    sub_1000147D8(v38);
  }
}

void sub_10002FFD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10002FFE4(uint64_t a1@<X0>, const char **a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_10009E5A4((const char *)(a1 + 32), a2, &v5);
  if (v5)
  {
    char v4 = v6;
    *a3 = v5;
    a3[1] = v4;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (v6) {
      sub_1000147D8(v6);
    }
  }
}

void sub_100030070(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100030080(uint64_t a1)
{
  sub_1000300B8(a1);

  operator delete();
}

uint64_t sub_1000300B8(uint64_t a1)
{
  *(void *)a1 = off_100151A88;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100030118(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100151AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100030138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100151AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003018C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000301B4(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100030238(uint64_t a1, char **a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100030284(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100030284(char **a1)
{
  long long v2 = operator new(0x18uLL);
  sub_100015438(v2, *a1);
  return v2;
}

void sub_1000302BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000302D0(uint64_t a1@<X8>)
{
  sub_100015438(__p, "rollover");
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v2 = sub_10005D0AC();
  __darwin_time_t v3 = sub_10005D148();
  sub_100030388((uint64_t)__p, v2, v3, a1);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100030364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100030388(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC(a4);
  sub_100016EAC(a4);
  sub_1000168C0((uint64_t)v21, a1);
  std::string v8 = sub_10000D104((unsigned __int8 *)a4, "reason");
  sub_100016EAC((uint64_t)v21);
  char v9 = *(unsigned char *)v8;
  *(unsigned char *)std::string v8 = v21[0];
  v21[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v22;
  unsigned __int8 v22 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v21);
  sub_100016B28(&v22, v21[0]);
  if ((a2 & 0x8000000000000000) == 0)
  {
    v19[0] = 5;
    int v20 = sub_1000316C0((uint64_t *)(a2 / 0xE10));
    sub_100016EAC((uint64_t)v19);
    sub_100016EAC((uint64_t)v19);
    __int16 v11 = sub_10000D104((unsigned __int8 *)a4, "wallUptime");
    sub_100016EAC((uint64_t)v19);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)__int16 v11 = v19[0];
    v19[0] = v12;
    char v13 = (uint64_t *)v11[1];
    v11[1] = (uint64_t)v20;
    int v20 = (void **)v13;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v19);
    sub_100016B28((uint64_t **)&v20, v19[0]);
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v17[0] = 5;
    long long v18 = sub_1000316C0((uint64_t *)(a3 / 0xE10));
    sub_100016EAC((uint64_t)v17);
    sub_100016EAC((uint64_t)v17);
    uint64_t v14 = sub_10000D104((unsigned __int8 *)a4, "cpuUptime");
    sub_100016EAC((uint64_t)v17);
    unsigned __int8 v15 = *(unsigned char *)v14;
    *(unsigned char *)uint64_t v14 = v17[0];
    v17[0] = v15;
    int v16 = (uint64_t *)v14[1];
    v14[1] = (uint64_t)v18;
    long long v18 = (void **)v16;
    sub_100016EAC((uint64_t)v14);
    sub_100016EAC((uint64_t)v17);
    sub_100016B28((uint64_t **)&v18, v17[0]);
  }
}

void sub_1000305C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  sub_100028D64(v2);
  _Unwind_Resume(a1);
}

void sub_100030604(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100015438(__p, "reboot");
  sub_100030388((uint64_t)__p, a1, a2, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10003069C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000306C0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC(a4);
  sub_100016EAC(a4);
  sub_1000168C0((uint64_t)v21, a1);
  std::string v8 = sub_10000D104((unsigned __int8 *)a4, "currentOS");
  sub_100016EAC((uint64_t)v21);
  char v9 = *(unsigned char *)v8;
  *(unsigned char *)std::string v8 = v21[0];
  v21[0] = v9;
  char v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v22;
  unsigned __int8 v22 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v21);
  sub_100016B28(&v22, v21[0]);
  sub_1000168C0((uint64_t)v19, a2);
  __int16 v11 = sub_10000D104((unsigned __int8 *)a4, "lastOS");
  sub_100016EAC((uint64_t)v19);
  char v12 = *(unsigned char *)v11;
  *(unsigned char *)__int16 v11 = v19[0];
  v19[0] = v12;
  char v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v20;
  int v20 = v13;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v19);
  sub_100016B28(&v20, v19[0]);
  v17[0] = 4;
  unint64_t v18 = a3;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v17);
  uint64_t v14 = sub_10000D104((unsigned __int8 *)a4, "rolloverPerformed");
  sub_100016EAC((uint64_t)v17);
  unsigned __int8 v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v17[0];
  v17[0] = v15;
  int v16 = (uint64_t *)v14[1];
  v14[1] = v18;
  unint64_t v18 = (unint64_t)v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28((uint64_t **)&v18, v17[0]);
}

void sub_1000308A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  sub_100028D64(v2);
  _Unwind_Resume(a1);
}

void sub_1000308E0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)a3 = 0;
  sub_100016EAC(a3);
  sub_100016EAC(a3);
  sub_1000168C0((uint64_t)v17, a1);
  uint64_t v6 = sub_10000D104((unsigned __int8 *)a3, "reason");
  sub_100016EAC((uint64_t)v17);
  char v7 = *(unsigned char *)v6;
  *(unsigned char *)uint64_t v6 = v17[0];
  v17[0] = v7;
  std::string v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v18;
  unint64_t v18 = v8;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  unsigned __int8 v22 = "skipLogWriting";
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v9;
  v20[1] = v9;
  sub_1000135DC((uint64_t)a2, &v22, (uint64_t)v20);
  v19[0] = a2;
  memset(&v19[1], 0, 24);
  v19[4] = (unsigned __int8 *)0x8000000000000000;
  sub_100013648(v19);
  if (sub_100013964((unsigned __int8 **)v20, v19))
  {
    char v10 = (unsigned char *)sub_1000155C8();
    if (!v10) {
      return;
    }
  }
  else
  {
    char v10 = sub_100013AAC((unsigned __int8 **)v20);
  }
  if (*v10 == 4)
  {
    __int16 v11 = (uint64_t *)v10[8];
    v15[0] = 4;
    int v16 = v11;
    sub_100016EAC((uint64_t)v15);
    sub_100016EAC((uint64_t)v15);
    char v12 = sub_10000D104((unsigned __int8 *)a3, "skipLogWriting");
    sub_100016EAC((uint64_t)v15);
    unsigned __int8 v13 = *(unsigned char *)v12;
    *(unsigned char *)char v12 = v15[0];
    v15[0] = v13;
    uint64_t v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v16;
    int v16 = v14;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v15);
    sub_100016B28(&v16, v15[0]);
  }
}

void sub_100030AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  sub_100028D64(v2);
  _Unwind_Resume(a1);
}

void sub_100030AF4(int *a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC(a4);
  sub_100016EAC(a4);
  int v8 = *a1;
  int v9 = a1[1] + *a1;
  if (v9 >= 1)
  {
    v126[0] = 5;
    v127 = (uint64_t *)llround((double)(100 * v8 / v9));
    sub_100016EAC((uint64_t)v126);
    sub_100016EAC((uint64_t)v126);
    char v10 = sub_10000D104((unsigned __int8 *)a4, "cacheHitPercent");
    sub_100016EAC((uint64_t)v126);
    unsigned __int8 v11 = *(unsigned char *)v10;
    *(unsigned char *)char v10 = v126[0];
    v126[0] = v11;
    char v12 = (uint64_t *)v10[1];
    v10[1] = (uint64_t)v127;
    v127 = v12;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v126);
    sub_100016B28(&v127, v126[0]);
  }
  unsigned __int8 v13 = (uint64_t *)*((void *)a1 + 1);
  v124[0] = 6;
  v125 = v13;
  sub_100016EAC((uint64_t)v124);
  sub_100016EAC((uint64_t)v124);
  uint64_t v14 = sub_10000D104((unsigned __int8 *)a4, "cacheSize");
  sub_100016EAC((uint64_t)v124);
  unsigned __int8 v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v124[0];
  v124[0] = v15;
  int v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v125;
  v125 = v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v124);
  sub_100016B28(&v125, v124[0]);
  char v17 = (uint64_t *)*((void *)a1 + 2);
  v122[0] = 6;
  v123 = v17;
  sub_100016EAC((uint64_t)v122);
  sub_100016EAC((uint64_t)v122);
  unint64_t v18 = sub_10000D104((unsigned __int8 *)a4, "cacheCapacity");
  sub_100016EAC((uint64_t)v122);
  unsigned __int8 v19 = *(unsigned char *)v18;
  *(unsigned char *)unint64_t v18 = v122[0];
  v122[0] = v19;
  int v20 = (uint64_t *)v18[1];
  v18[1] = (uint64_t)v123;
  v123 = v20;
  sub_100016EAC((uint64_t)v18);
  sub_100016EAC((uint64_t)v122);
  sub_100016B28(&v123, v122[0]);
  unint64_t v21 = (uint64_t *)*((void *)a1 + 3);
  v120[0] = 6;
  v121 = v21;
  sub_100016EAC((uint64_t)v120);
  sub_100016EAC((uint64_t)v120);
  unsigned __int8 v22 = sub_10000D104((unsigned __int8 *)a4, "cacheEventsCount");
  sub_100016EAC((uint64_t)v120);
  unsigned __int8 v23 = *(unsigned char *)v22;
  *(unsigned char *)unsigned __int8 v22 = v120[0];
  v120[0] = v23;
  uint64_t v24 = (uint64_t *)v22[1];
  v22[1] = (uint64_t)v121;
  v121 = v24;
  sub_100016EAC((uint64_t)v22);
  sub_100016EAC((uint64_t)v120);
  sub_100016B28(&v121, v120[0]);
  uint64_t v25 = (uint64_t *)*((void *)a1 + 4);
  v118[0] = 6;
  v119 = v25;
  sub_100016EAC((uint64_t)v118);
  sub_100016EAC((uint64_t)v118);
  char v26 = sub_10000D104((unsigned __int8 *)a4, "cacheXformCount");
  sub_100016EAC((uint64_t)v118);
  unsigned __int8 v27 = *(unsigned char *)v26;
  *(unsigned char *)char v26 = v118[0];
  v118[0] = v27;
  char v28 = (uint64_t *)v26[1];
  v26[1] = (uint64_t)v119;
  v119 = v28;
  sub_100016EAC((uint64_t)v26);
  sub_100016EAC((uint64_t)v118);
  sub_100016B28(&v119, v118[0]);
  uint64_t v29 = (uint64_t *)*a1;
  v116[0] = 5;
  v117 = v29;
  sub_100016EAC((uint64_t)v116);
  sub_100016EAC((uint64_t)v116);
  uint64_t v30 = sub_10000D104((unsigned __int8 *)a4, "cacheHits");
  sub_100016EAC((uint64_t)v116);
  unsigned __int8 v31 = *(unsigned char *)v30;
  *(unsigned char *)uint64_t v30 = v116[0];
  v116[0] = v31;
  long long v32 = (uint64_t *)v30[1];
  v30[1] = (uint64_t)v117;
  v117 = v32;
  sub_100016EAC((uint64_t)v30);
  sub_100016EAC((uint64_t)v116);
  sub_100016B28(&v117, v116[0]);
  uint64_t v33 = (uint64_t *)a1[1];
  v114[0] = 5;
  v115 = v33;
  sub_100016EAC((uint64_t)v114);
  sub_100016EAC((uint64_t)v114);
  uint64_t v34 = sub_10000D104((unsigned __int8 *)a4, "cacheMisses");
  sub_100016EAC((uint64_t)v114);
  unsigned __int8 v35 = *(unsigned char *)v34;
  *(unsigned char *)uint64_t v34 = v114[0];
  v114[0] = v35;
  int v36 = (uint64_t *)v34[1];
  v34[1] = (uint64_t)v115;
  v115 = v36;
  sub_100016EAC((uint64_t)v34);
  sub_100016EAC((uint64_t)v114);
  sub_100016B28(&v115, v114[0]);
  unint64_t v37 = (uint64_t *)a1[10];
  v112[0] = 5;
  v113 = v37;
  sub_100016EAC((uint64_t)v112);
  sub_100016EAC((uint64_t)v112);
  unsigned __int8 v38 = sub_10000D104((unsigned __int8 *)a4, "XformsInserted");
  sub_100016EAC((uint64_t)v112);
  unsigned __int8 v39 = *(unsigned char *)v38;
  *(unsigned char *)unsigned __int8 v38 = v112[0];
  v112[0] = v39;
  __int16 v40 = (uint64_t *)v38[1];
  v38[1] = (uint64_t)v113;
  v113 = v40;
  sub_100016EAC((uint64_t)v38);
  sub_100016EAC((uint64_t)v112);
  sub_100016B28(&v113, v112[0]);
  int64_t v41 = sub_1000C27D0();
  v110[0] = 5;
  int v111 = (uint64_t *)(int)v41;
  sub_100016EAC((uint64_t)v110);
  sub_100016EAC((uint64_t)v110);
  uint64_t v42 = sub_10000D104((unsigned __int8 *)a4, "physFootprint");
  sub_100016EAC((uint64_t)v110);
  unsigned __int8 v43 = *(unsigned char *)v42;
  *(unsigned char *)uint64_t v42 = v110[0];
  v110[0] = v43;
  uint64_t v44 = (uint64_t *)v42[1];
  v42[1] = (uint64_t)v111;
  int v111 = v44;
  sub_100016EAC((uint64_t)v42);
  sub_100016EAC((uint64_t)v110);
  sub_100016B28(&v111, v110[0]);
  v108[0] = 5;
  uint64_t v109 = v41 >> 32;
  sub_100016EAC((uint64_t)v108);
  sub_100016EAC((uint64_t)v108);
  char v45 = sub_10000D104((unsigned __int8 *)a4, "physFootprintPeak");
  sub_100016EAC((uint64_t)v108);
  unsigned __int8 v46 = *(unsigned char *)v45;
  *(unsigned char *)char v45 = v108[0];
  v108[0] = v46;
  unint64_t v47 = (uint64_t *)v45[1];
  v45[1] = v109;
  uint64_t v109 = (uint64_t)v47;
  sub_100016EAC((uint64_t)v45);
  sub_100016EAC((uint64_t)v108);
  sub_100016B28((uint64_t **)&v109, v108[0]);
  time_t v48 = sub_10005CFD4();
  if (v48 != -1)
  {
    v106[0] = 5;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = std::chrono::system_clock::from_time_t(v48).__d_.__rep_ / 3600000000;
    sub_100016EAC((uint64_t)v106);
    sub_100016EAC((uint64_t)v106);
    double v49 = sub_10000D104((unsigned __int8 *)a4, "procUptime");
    sub_100016EAC((uint64_t)v106);
    unsigned __int8 v50 = *(unsigned char *)v49;
    *(unsigned char *)double v49 = v106[0];
    v106[0] = v50;
    uint64_t v51 = (uint64_t *)v49[1];
    v49[1] = v107;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v107 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v51;
    sub_100016EAC((uint64_t)v49);
    sub_100016EAC((uint64_t)v106);
    sub_100016B28((uint64_t **)&v107, v106[0]);
  }
  __darwin_time_t v52 = sub_10005D148();
  if (v52 != -1)
  {
    v104[0] = 5;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = std::chrono::system_clock::from_time_t(v52).__d_.__rep_ / 3600000000;
    sub_100016EAC((uint64_t)v104);
    sub_100016EAC((uint64_t)v104);
    uint64_t v53 = sub_10000D104((unsigned __int8 *)a4, "cpuUptime");
    sub_100016EAC((uint64_t)v104);
    unsigned __int8 v54 = *(unsigned char *)v53;
    *(unsigned char *)uint64_t v53 = v104[0];
    v104[0] = v54;
    char v55 = (uint64_t *)v53[1];
    v53[1] = v105;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v55;
    sub_100016EAC((uint64_t)v53);
    sub_100016EAC((uint64_t)v104);
    sub_100016B28((uint64_t **)&v105, v104[0]);
  }
  char v56 = *a2;
  v102[0] = 6;
  v103 = v56;
  sub_100016EAC((uint64_t)v102);
  sub_100016EAC((uint64_t)v102);
  uint64_t v57 = sub_10000D104((unsigned __int8 *)a4, "configEstimatedBytesWritten");
  sub_100016EAC((uint64_t)v102);
  unsigned __int8 v58 = *(unsigned char *)v57;
  *(unsigned char *)uint64_t v57 = v102[0];
  v102[0] = v58;
  uint64_t v59 = (uint64_t *)v57[1];
  v57[1] = (uint64_t)v103;
  v103 = v59;
  sub_100016EAC((uint64_t)v57);
  sub_100016EAC((uint64_t)v102);
  sub_100016B28(&v103, v102[0]);
  uint64_t v60 = a2[1];
  v100[0] = 6;
  v101 = v60;
  sub_100016EAC((uint64_t)v100);
  sub_100016EAC((uint64_t)v100);
  uint64_t v61 = sub_10000D104((unsigned __int8 *)a4, "configEstimatedBytesRead");
  sub_100016EAC((uint64_t)v100);
  unsigned __int8 v62 = *(unsigned char *)v61;
  *(unsigned char *)uint64_t v61 = v100[0];
  v100[0] = v62;
  long long v63 = (uint64_t *)v61[1];
  v61[1] = (uint64_t)v101;
  v101 = v63;
  sub_100016EAC((uint64_t)v61);
  sub_100016EAC((uint64_t)v100);
  sub_100016B28(&v101, v100[0]);
  v64 = a2[2];
  v98[0] = 5;
  v99 = v64;
  sub_100016EAC((uint64_t)v98);
  sub_100016EAC((uint64_t)v98);
  unint64_t v65 = sub_10000D104((unsigned __int8 *)a4, "configRowsWritten");
  sub_100016EAC((uint64_t)v98);
  unsigned __int8 v66 = *(unsigned char *)v65;
  *(unsigned char *)unint64_t v65 = v98[0];
  v98[0] = v66;
  unint64_t v67 = (uint64_t *)v65[1];
  v65[1] = (uint64_t)v99;
  v99 = v67;
  sub_100016EAC((uint64_t)v65);
  sub_100016EAC((uint64_t)v98);
  sub_100016B28(&v99, v98[0]);
  long long v68 = a2[3];
  v96[0] = 5;
  v97 = v68;
  sub_100016EAC((uint64_t)v96);
  sub_100016EAC((uint64_t)v96);
  long long v69 = sub_10000D104((unsigned __int8 *)a4, "configRowsRead");
  sub_100016EAC((uint64_t)v96);
  unsigned __int8 v70 = *(unsigned char *)v69;
  *(unsigned char *)long long v69 = v96[0];
  v96[0] = v70;
  long long v71 = (uint64_t *)v69[1];
  v69[1] = (uint64_t)v97;
  v97 = v71;
  sub_100016EAC((uint64_t)v69);
  sub_100016EAC((uint64_t)v96);
  sub_100016B28(&v97, v96[0]);
  uint64_t v72 = *a3;
  v94[0] = 6;
  v95 = v72;
  sub_100016EAC((uint64_t)v94);
  sub_100016EAC((uint64_t)v94);
  v73 = sub_10000D104((unsigned __int8 *)a4, "stateEstimatedBytesWritten");
  sub_100016EAC((uint64_t)v94);
  unsigned __int8 v74 = *(unsigned char *)v73;
  *(unsigned char *)v73 = v94[0];
  v94[0] = v74;
  v75 = (uint64_t *)v73[1];
  v73[1] = (uint64_t)v95;
  v95 = v75;
  sub_100016EAC((uint64_t)v73);
  sub_100016EAC((uint64_t)v94);
  sub_100016B28(&v95, v94[0]);
  v76 = a3[1];
  v92[0] = 6;
  v93 = v76;
  sub_100016EAC((uint64_t)v92);
  sub_100016EAC((uint64_t)v92);
  char v77 = sub_10000D104((unsigned __int8 *)a4, "stateEstimatedBytesRead");
  sub_100016EAC((uint64_t)v92);
  unsigned __int8 v78 = *(unsigned char *)v77;
  *(unsigned char *)char v77 = v92[0];
  v92[0] = v78;
  char v79 = (uint64_t *)v77[1];
  v77[1] = (uint64_t)v93;
  v93 = v79;
  sub_100016EAC((uint64_t)v77);
  sub_100016EAC((uint64_t)v92);
  sub_100016B28(&v93, v92[0]);
  v80 = a3[2];
  v90[0] = 5;
  v91 = v80;
  sub_100016EAC((uint64_t)v90);
  sub_100016EAC((uint64_t)v90);
  v81 = sub_10000D104((unsigned __int8 *)a4, "stateRowsWritten");
  sub_100016EAC((uint64_t)v90);
  unsigned __int8 v82 = *(unsigned char *)v81;
  *(unsigned char *)v81 = v90[0];
  v90[0] = v82;
  v83 = (uint64_t *)v81[1];
  v81[1] = (uint64_t)v91;
  v91 = v83;
  sub_100016EAC((uint64_t)v81);
  sub_100016EAC((uint64_t)v90);
  sub_100016B28(&v91, v90[0]);
  v84 = a3[3];
  v88[0] = 5;
  char v89 = v84;
  sub_100016EAC((uint64_t)v88);
  sub_100016EAC((uint64_t)v88);
  uint64_t v85 = sub_10000D104((unsigned __int8 *)a4, "stateRowsRead");
  sub_100016EAC((uint64_t)v88);
  unsigned __int8 v86 = *(unsigned char *)v85;
  *(unsigned char *)uint64_t v85 = v88[0];
  v88[0] = v86;
  char v87 = (uint64_t *)v85[1];
  v85[1] = (uint64_t)v89;
  char v89 = v87;
  sub_100016EAC((uint64_t)v85);
  sub_100016EAC((uint64_t)v88);
  sub_100016B28(&v89, v88[0]);
}

void sub_1000315B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26)
{
  sub_100028D64(&a26);
  sub_100028D64(v26);
  _Unwind_Resume(a1);
}

void **sub_1000316C0(uint64_t *a1)
{
  uint64_t v6 = (uint64_t)a1;
  char v7 = &off_100159680;
  int v12 = -1431655766;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  LOBYTE(v5) = 5;
  sub_100016EAC((uint64_t)&v5);
  sub_100016EAC((uint64_t)&v5);
  *(void *)&long long v10 = sub_100019524((uint64_t *)&v9 + 1, (uint64_t)&v5);
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28((uint64_t **)&v6, v5);
  LOBYTE(v5) = 5;
  uint64_t v6 = 2;
  sub_100016EAC((uint64_t)&v5);
  sub_100016EAC((uint64_t)&v5);
  uint64_t v1 = v10;
  if ((unint64_t)v10 >= *((void *)&v10 + 1))
  {
    uint64_t v2 = sub_100019524((uint64_t *)&v9 + 1, (uint64_t)&v5);
  }
  else
  {
    *(unsigned char *)long long v10 = (_BYTE)v5;
    *(void *)(v1 + 8) = v6;
    sub_100016EAC((uint64_t)&v5);
    LOBYTE(v5) = 0;
    uint64_t v6 = 0;
    sub_100016EAC(v1);
    uint64_t v2 = v1 + 16;
  }
  *(void *)&long long v10 = v2;
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28((uint64_t **)&v6, v5);
  sub_1000D61E4((uint64_t)&v7, (uint64_t *)&v8);
  char v5 = (void **)0xAAAAAAAAAAAAAAAALL;
  sub_10001C724(*((unsigned __int8 **)&v9 + 1), (uint64_t *)&v5);
  __darwin_time_t v3 = v5;
  if (*(void *)&v11[16]) {
    sub_1000147D8(*(std::__shared_weak_count **)&v11[16]);
  }
  char v5 = (void **)&v9 + 1;
  sub_100016F68(&v5);
  char v5 = (void **)&v8;
  sub_100014738(&v5);
  nullsub_13(&v7);
  return v3;
}

void sub_100031878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  __darwin_time_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  sub_100028D64((uint64_t **)va);
  sub_1000318A8((uint64_t)va2);
  nullsub_13((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000318A8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000147D8(v2);
  }
  char v4 = (void **)(a1 + 24);
  sub_100016F68(&v4);
  char v4 = (void **)a1;
  sub_100014738(&v4);
  return a1;
}

void sub_10003192C()
{
}

void sub_1000319A4()
{
}

uint64_t sub_100031A08(uint64_t a1, void *a2)
{
  dispatch_queue_t v4 = dispatch_queue_create("analyticsd.CadenceManagerQueue", 0);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 232) = *a2;
  *(void *)(a1 + 24sub_100027DA4((uint64_t)&a9, 0) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 28sub_100027DA4((uint64_t)&a9, 0) = 0;
  return a1;
}

unint64_t sub_100031A98(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100033B90;
  void v7[3] = &unk_100151B70;
  v7[4] = a1;
  void v7[5] = &v6;
  __darwin_time_t v3 = objc_retainBlock(v7);
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033CB4;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  unint64_t v4 = v10;

  return v4;
}

void sub_100031BCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100031BD8(void *a1, uint64_t a2)
{
  void v3[3] = a1;
  sub_100033CF0((uint64_t)&v4, a2);
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, a1);
  operator new();
}

void sub_100031D1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100031D34(void *a1, uint64_t a2)
{
  void v3[3] = a1;
  sub_1000341D4((uint64_t)&v4, a2);
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, a1);
  operator new();
}

void sub_100031E78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100031E90(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034414;
  void v7[3] = &unk_1001519C8;
  v7[4] = a1;
  void v7[5] = &v6;
  __darwin_time_t v3 = objc_retainBlock(v7);
  char v10 = -86;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034424;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_100031FCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100031FD8(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034460;
  void v7[3] = &unk_100151B90;
  v7[4] = a1;
  void v7[5] = &v6;
  __darwin_time_t v3 = objc_retainBlock(v7);
  uint64_t v10 = 0;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000278B8;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  uint64_t v4 = v10;

  return v4;
}

void sub_100032108(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100032114(void *a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, a1);
  operator new();
}

void sub_100032228(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100032240(void *a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, a1);
  operator new();
}

void sub_100032354(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10003236C(void *a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, a1);
  operator new();
}

void sub_100032480(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100032498(void *a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, a1);
  operator new();
}

void sub_1000325AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000325C4(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034C68;
  block[3] = &unk_1001519A8;
  block[4] = a1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_100032688(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100032694(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034C9C;
  void v7[3] = &unk_1001519C8;
  v7[4] = a1;
  void v7[5] = &v6;
  uint64_t v3 = objc_retainBlock(v7);
  char v10 = -86;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034424;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_1000327D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000327DC(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034CA8;
  void v7[3] = &unk_1001519C8;
  v7[4] = a1;
  void v7[5] = &v6;
  uint64_t v3 = objc_retainBlock(v7);
  char v10 = -86;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034424;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_100032918(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100032924(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034CF0;
  void v7[3] = &unk_1001519C8;
  v7[4] = a1;
  void v7[5] = &v6;
  uint64_t v3 = objc_retainBlock(v7);
  char v10 = -86;
  id v8 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034424;
  block[3] = &unk_1001519A8;
  block[4] = &v10;
  block[5] = &v8;
  dispatch_sync(v2, block);
  BOOL v4 = v10 != 0;

  return v4;
}

void sub_100032A60(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100032A6C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v7[0] = a2;
  v7[1] = a1;
  uint64_t v5 = sub_10000FD1C((id *)(a1 + 16));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100034D40;
  void v8[3] = &unk_100151BF0;
  _OWORD v8[4] = a1;
  v8[5] = v7;
  long long v9 = objc_retainBlock(v8);
  uint64_t v6 = v5;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034E08;
  block[3] = &unk_1001519A8;
  block[4] = a3;
  block[5] = &v9;
  dispatch_sync(v6, block);
}

void sub_100032BAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100032BB8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  BOOL v4 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100034E9C;
  void v7[3] = &unk_100151BF0;
  v7[4] = a1;
  void v7[5] = &v6;
  id v8 = objc_retainBlock(v7);
  uint64_t v5 = v4;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034E08;
  block[3] = &unk_1001519A8;
  block[4] = a2;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_100032CF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100032D04(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  BOOL v4 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100034ECC;
  void v7[3] = &unk_100151BF0;
  v7[4] = a1;
  void v7[5] = &v6;
  id v8 = objc_retainBlock(v7);
  uint64_t v5 = v4;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034E08;
  block[3] = &unk_1001519A8;
  block[4] = a2;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_100032E44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100032E50(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  BOOL v4 = sub_10000FD1C((id *)(a1 + 16));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100034EFC;
  void v7[3] = &unk_100151BF0;
  v7[4] = a1;
  void v7[5] = &v6;
  id v8 = objc_retainBlock(v7);
  uint64_t v5 = v4;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034E08;
  block[3] = &unk_1001519A8;
  block[4] = a2;
  block[5] = &v8;
  dispatch_sync(v5, block);
}

void sub_100032F90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100032F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100057570();
  memset(&__str, 170, sizeof(__str));
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 232) + 40))(&__str);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 31);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v6 == size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      LODWORD(v5) = memcmp(*(const void **)(a2 + 8), p_str, *(void *)(a2 + 16)) != 0;
    }
    else if (*(unsigned char *)(a2 + 31))
    {
      uint64_t v9 = v5 - 1;
      char v10 = (unsigned __int8 *)(a2 + 8);
      do
      {
        int v12 = *v10++;
        int v11 = v12;
        int v13 = p_str->__r_.__value_.__s.__data_[0];
        p_str = (std::string *)((char *)p_str + 1);
        BOOL v14 = v11 == v13;
        LODWORD(v5) = v11 != v13;
        BOOL v14 = !v14 || v9-- == 0;
      }
      while (!v14);
    }
  }
  else
  {
    LODWORD(v5) = 1;
  }
  if (!*(void *)(a2 + 192)) {
    LODWORD(v5) = 1;
  }
  if (v5) {
    uint64_t v15 = v4;
  }
  else {
    uint64_t v15 = *(void *)(a2 + 192);
  }
  BOOL v16 = sub_100033274(a1, a2);
  BOOL v17 = v16;
  if (*(void *)(a2 + 200)) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v16;
  }
  if (v18) {
    *(void *)(a1 + 224) = 1;
  }
  *(void *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 32))(*(void *)(a1 + 232));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), &__str);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 56));
  sub_10005CA9C(&v25);
  unsigned __int8 v19 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)unsigned __int8 v19 = v25;
  *(void *)(a1 + 96) = v26;
  *(void *)(a1 + 128) = *(void *)(a2 + 104);
  *(void *)(a1 + 136) = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 48))(*(void *)(a1 + 232));
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 120);
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 152));
  *(void *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = *(void *)(a2 + 176);
  if (*(void *)(a2 + 184)) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = *(void *)a2 == 0;
  }
  if (v20) {
    uint64_t v21 = *(void *)(a2 + 184);
  }
  else {
    uint64_t v21 = v4 - v17;
  }
  *(void *)(a1 + 208) = v21;
  *(void *)(a1 + 216) = v15;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = *(void *)(a1 + 128);
  if (!rep) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  }
  *(void *)(a1 + 248) = rep;
  uint64_t v23 = sub_100033378(a1, (uint64_t *)a2);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v17 | (unint64_t)(v23 << 32);
}

void sub_100033244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100033274(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 48))(*(void *)(a1 + 232));
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v5 = qword_10015EF18;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT);
  if (v4 == v3)
  {
    if (v6)
    {
      __int16 v10 = 0;
      char v7 = "[CadenceManager] ==== STARTUP ROLLOVER PERIOD: RESUME (same period) ====";
      id v8 = (uint8_t *)&v10;
      goto LABEL_6;
    }
  }
  else if (v6)
  {
    __int16 v11 = 0;
    char v7 = "[CadenceManager] ==== STARTUP ROLLOVER PERIOD: PAST DUE ====";
    id v8 = (uint8_t *)&v11;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
  }
  return v4 != v3;
}

uint64_t sub_100033378(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v22 = 136446210;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CadenceManager] ==== OS BUILD: %{public}s ====", (uint8_t *)&v22, 0xCu);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    char v7 = (unsigned __int8 **)(a1 + 32);
    uint64_t v8 = *((unsigned __int8 *)a2 + 31);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 31);
    }
    else {
      uint64_t v9 = a2[2];
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a1 + 40);
    }
    if (v9 == v10)
    {
      if (v11 >= 0) {
        int v12 = (unsigned __int8 *)(a1 + 32);
      }
      else {
        int v12 = *v7;
      }
      if ((v8 & 0x80) == 0)
      {
        if (*((unsigned char *)a2 + 31))
        {
          int v13 = (unsigned __int8 *)(a2 + 1);
          while (*v13 == *v12)
          {
            ++v13;
            ++v12;
            if (!--v8) {
              goto LABEL_33;
            }
          }
          goto LABEL_24;
        }
LABEL_33:
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v20 = qword_10015EF18;
        BOOL v21 = os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT);
        if (v6 == v19)
        {
          if (v21)
          {
            LOWORD(v22) = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[CadenceManager] ==== BOOT STATE: AFTER RESTART ====", (uint8_t *)&v22, 2u);
          }
          return 3;
        }
        else if (v21)
        {
          LOWORD(v22) = 0;
          uint64_t v15 = 2;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[CadenceManager] ==== BOOT STATE: AFTER REBOOT ====", (uint8_t *)&v22, 2u);
        }
        else
        {
          return 2;
        }
        return v15;
      }
      if (!memcmp((const void *)a2[1], v12, a2[2])) {
        goto LABEL_33;
      }
    }
LABEL_24:
    BOOL v16 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 31) >= 0) {
        BOOL v17 = a2 + 1;
      }
      else {
        BOOL v17 = (void *)a2[1];
      }
      if (*(char *)(a1 + 55) < 0) {
        char v7 = (unsigned __int8 **)*v7;
      }
      int v22 = 136446466;
      uint64_t v23 = v17;
      __int16 v24 = 2082;
      long long v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[CadenceManager] ==== BOOT STATE: OS UPDATE (previous: %{public}s, current: %{public}s) ====", (uint8_t *)&v22, 0x16u);
    }
    return 1;
  }
  BOOL v14 = qword_10015EF18;
  uint64_t v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[CadenceManager] ==== BOOT STATE: NO DATA ====", (uint8_t *)&v22, 2u);
    return 0;
  }
  return v15;
}

uint64_t sub_100033618(uint64_t a1)
{
  if (*(void *)(a1 + 224) != 1)
  {
    uint64_t v3 = *(void *)(a1 + 280);
    if (!v3) {
      sub_100027A78();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v3 + 48))(__p);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 175);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = (void *)*(unsigned __int8 *)(a1 + 175);
    }
    else {
      uint64_t v5 = *(void **)(a1 + 160);
    }
    unint64_t v6 = v17;
    int v7 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      unint64_t v6 = (unint64_t)__p[1];
    }
    if (v5 == (void *)v6)
    {
      uint64_t v8 = (const void **)(a1 + 152);
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v4 & 0x80) != 0)
      {
        BOOL v1 = memcmp(*v8, v9, *(void *)(a1 + 160)) != 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 175))
        {
          BOOL v1 = 0;
          if (((char)v17 & 0x80000000) == 0) {
            return v1;
          }
          goto LABEL_26;
        }
        uint64_t v10 = v4 - 1;
        do
        {
          int v12 = *(unsigned __int8 *)v8;
          uint64_t v8 = (const void **)((char *)v8 + 1);
          int v11 = v12;
          int v13 = *(unsigned __int8 *)v9;
          uint64_t v9 = (void **)((char *)v9 + 1);
          BOOL v1 = v11 != v13;
        }
        while (v11 == v13 && v10-- != 0);
      }
      if ((v7 & 0x80000000) == 0) {
        return v1;
      }
    }
    else
    {
      BOOL v1 = 1;
      if (((char)v17 & 0x80000000) == 0) {
        return v1;
      }
    }
LABEL_26:
    operator delete(__p[0]);
    return v1;
  }
  return 1;
}

void *sub_100033760(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1000337E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100033868(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100033914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10003395C((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10003395C(uint64_t a1, id *a2)
{
  uint64_t v3 = sub_10000FD1C(a2 + 2);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_100033AA8);
}

void sub_1000339C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000339FC(uint64_t a1)
{
  BOOL v1 = *(id **)(a1 + 24);
  uint64_t v2 = sub_10000FD1C(v1 + 2);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_100033AA8);
}

uint64_t sub_100033A64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100033AA8(uint64_t result)
{
  if (result)
  {
    sub_100033AE8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100033AE8(uint64_t a1)
{
  sub_100033760((void *)(a1 + 256));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 240);
  if (v2) {
    sub_1000147D8(v2);
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  return sub_1000296A4(a1);
}

unint64_t sub_100033B90(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  (*(void (**)(void **__return_ptr))(**(void **)(v1 + 232) + 16))(v4);
  unint64_t v2 = sub_100032F9C(v1, (uint64_t)v4);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4[1]);
  }
  return v2;
}

void sub_100033C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_1000F8FC0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100033CB4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100033CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_100033D70(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_100033E50((void *)(*(void *)v1 + 256), v1 + 8);
  sub_100033E00(&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_100033DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100033E00((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100033E00(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100033760((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100033E50(void *a1, uint64_t a2)
{
  sub_100033EC4((uint64_t)v4, a2);
  sub_100033F5C(v4, a1);
  sub_100033760(v4);
  return a1;
}

uint64_t sub_100033EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100033F5C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1000341C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000341D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_100034254(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  sub_10003437C((uint64_t)v6, v1 + 8);
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 56))(v2, v6);
  sub_1000337E4(v6);
  sub_10003432C(&v5);
  return sub_100024E7C((uint64_t *)&v4);
}

void sub_100034300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_1000337E4((uint64_t *)va2);
  sub_10003432C((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003432C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1000337E4((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10003437C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100034414(uint64_t a1)
{
  return *(unsigned __int8 *)(**(void **)(a1 + 40) + 144);
}

uint64_t sub_100034424(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100034460(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 248);
}

void sub_100034470(uint64_t **a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = **a1;
  int v2 = *(unsigned __int8 *)(v1 + 144);
  *(unsigned char *)(v1 + 144) = 1;
  uint64_t v3 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = "true";
    if (!v2) {
      uint64_t v4 = "false";
    }
    *(_DWORD *)int buf = 136446210;
    char v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CadenceManager] Partial data flag enabled {prior: %{public}s}", buf, 0xCu);
  }
  operator delete();
}

void sub_10003456C(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = **a1;
  if (sub_100033618(v1))
  {
    int v2 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CadenceManager] Resetting partial data flag", buf, 2u);
    }
    *(unsigned char *)(v1 + 144) = 0;
  }
  operator delete();
}

void sub_100034648()
{
}

void sub_100034678(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_1000346B0(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!sub_100033618(v1))
  {
LABEL_34:
    *(void *)(v1 + 224) = 2;
    operator delete();
  }
  memset(&__str, 170, sizeof(__str));
  uint64_t v2 = *(void *)(v1 + 280);
  if (!v2) {
    sub_100027A78();
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)v2 + 48))(&__str);
  uint64_t v3 = (const void **)(v1 + 152);
  char v4 = *(unsigned char *)(v1 + 175);
  if (v4 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v1 + 175);
  }
  else {
    uint64_t v5 = *(void *)(v1 + 160);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (v5 == size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((*(unsigned char *)(v1 + 175) & 0x80) == 0)
    {
      if (*(unsigned char *)(v1 + 175))
      {
        char v9 = (unsigned __int8 *)(v1 + 152);
        uint64_t v10 = *(unsigned __int8 *)(v1 + 175);
        do
        {
          if (*v9 != p_str->__r_.__value_.__s.__data_[0]) {
            goto LABEL_19;
          }
          ++v9;
          p_str = (std::string *)((char *)p_str + 1);
          --v10;
        }
        while (v10);
        char v11 = qword_10015EF18;
        if (!os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
      }
      else
      {
        char v11 = qword_10015EF18;
        if (!os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
      }
      int v12 = (const void *)(v1 + 152);
LABEL_36:
      *(_DWORD *)int buf = 136380675;
      BOOL v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[CadenceManager] NO day boundary change. Keeping cached day boundary key: %{private}s", buf, 0xCu);
LABEL_32:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      goto LABEL_34;
    }
    int v12 = *v3;
    int v13 = memcmp(*v3, p_str, *(void *)(v1 + 160));
    char v11 = qword_10015EF18;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
    if (!v14)
    {
LABEL_31:
      std::string::operator=((std::string *)(v1 + 152), &__str);
      goto LABEL_32;
    }
  }
  else
  {
LABEL_19:
    char v11 = qword_10015EF18;
    if (!os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO)) {
      goto LABEL_31;
    }
    if (v4 < 0) {
      int v12 = *v3;
    }
    else {
      int v12 = (const void *)(v1 + 152);
    }
  }
  char v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v7 >= 0) {
    char v15 = &__str;
  }
  *(_DWORD *)int buf = 136380931;
  BOOL v18 = v12;
  __int16 v19 = 2081;
  BOOL v20 = v15;
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[CadenceManager] Daily key changed. Rotating day boundary key: {prior: %{private}s, new: %{private}s}", buf, 0x16u);
  goto LABEL_31;
}

void sub_10003496C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1000349B0(uint64_t **a1)
{
  uint64_t v1 = **a1;
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3 = (*(uint64_t (**)(void))(**(void **)(v1 + 232) + 48))(*(void *)(v1 + 232));
  char v4 = (id)qword_10015EF18;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = &v15;
    sub_10001C968(*(void *)(v1 + 128), (uint64_t)"%Y-%m-%dT%TZ");
    if (v16 < 0) {
      uint64_t v5 = v15;
    }
    unint64_t v6 = &v13;
    sub_10001C968(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%TZ");
    if (v14 < 0) {
      unint64_t v6 = v13;
    }
    sub_10001C968(*(void *)(v1 + 136), (uint64_t)"%Y-%m-%dT%TZ");
    sub_10001C968(v3, (uint64_t)"%Y-%m-%dT%TZ");
    int v7 = &v11;
    if (v12 < 0) {
      int v7 = v11;
    }
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)int buf = 136446978;
    BOOL v18 = v5;
    __int16 v19 = 2082;
    BOOL v20 = v6;
    __int16 v21 = 2082;
    int v22 = v7;
    __int16 v23 = 2082;
    __int16 v24 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CadenceManager] Rollover deadlines changed. lastRollover: {prior: %{public}s, new: %{public}s}. nextDeadline: {prior: %{public}s, new: %{public}s}.", buf, 0x2Au);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
  }

  *(std::chrono::system_clock::time_point *)(v1 + 128) = v2;
  *(void *)(v1 + 136) = v3;
  *(std::chrono::system_clock::time_point *)(v1 + 248) = v2;
  operator delete();
}

void sub_100034BE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }

  operator delete();
}

uint64_t sub_100034C68(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(**(void **)(a1 + 40) + 232) + 24))(*(void *)(**(void **)(a1 + 40) + 232), **(void **)(a1 + 40) + 24);
}

uint64_t sub_100034C9C(uint64_t a1)
{
  return sub_100033618(**(void **)(a1 + 40));
}

BOOL sub_100034CA8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  return *(void *)(v1 + 224) == 1 || sub_100057570() == *(void *)(v1 + 208);
}

BOOL sub_100034CF0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  if (*(void *)(v1 + 224) == 1) {
    return 1;
  }
  uint64_t v3 = sub_100057570() - *(void *)(v1 + 200);
  if (v3 < 0) {
    uint64_t v3 = -v3;
  }
  return (unint64_t)v3 < 0x5B;
}

std::string *sub_100034D40@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (uint64_t **)result[1].__r_.__value_.__r.__words[2];
  char v4 = v3[1];
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = *v3;
  int v6 = *((char *)v5 + 23);
  if (v6 < 0)
  {
    if (v5[1] != 5) {
      return result;
    }
    uint64_t v5 = (uint64_t *)*v5;
  }
  else if (v6 != 5)
  {
    return result;
  }
  if (*(_DWORD *)v5 == 1818845508 && *((unsigned char *)v5 + 4) == 121)
  {
    char v11 = (const std::string *)(v4 + 19);
    return std::string::operator=(a2, v11);
  }
  int v8 = *(_DWORD *)v5;
  int v9 = *((unsigned __int8 *)v5 + 4);
  if (v8 == 1631858745 && v9 == 121)
  {
    char v11 = (const std::string *)(v4 + 22);
    return std::string::operator=(a2, v11);
  }
  return result;
}

void sub_100034DEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100034E08(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 16) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void **sub_100034E9C@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  if (*(char *)(v2 + 55) < 0) {
    return (void **)sub_100017424((unsigned char *)a2, *(void **)(v2 + 32), *(void *)(v2 + 40));
  }
  long long v3 = *(_OWORD *)(v2 + 32);
  *(void *)(a2 + 16) = *(void *)(v2 + 48);
  *(_OWORD *)a2 = v3;
  return result;
}

void **sub_100034ECC@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  if (*(char *)(v2 + 79) < 0) {
    return (void **)sub_100017424((unsigned char *)a2, *(void **)(v2 + 56), *(void *)(v2 + 64));
  }
  long long v3 = *(_OWORD *)(v2 + 56);
  *(void *)(a2 + 16) = *(void *)(v2 + 72);
  *(_OWORD *)a2 = v3;
  return result;
}

void **sub_100034EFC@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result[5];
  if (*(char *)(v2 + 127) < 0) {
    return (void **)sub_100017424((unsigned char *)a2, *(void **)(v2 + 104), *(void *)(v2 + 112));
  }
  long long v3 = *(_OWORD *)(v2 + 104);
  *(void *)(a2 + 16) = *(void *)(v2 + 120);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_100034F30()
{
}

void sub_100034FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100035024(uint64_t a1, uint64_t a2)
{
  __n128 v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v5 = dispatch_queue_create("analyticsd.MotionStateResolverQueue.myQueue", v4);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;

  *(void *)a1 = off_100151C20;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  operator new();
}

void sub_100035454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000147D8(a12);
  }
  uint64_t v16 = *v14;
  *char v14 = 0;
  if (v16) {
    sub_100037A78((uint64_t)v14, v16);
  }
  unsigned __int8 v17 = *(std::__shared_weak_count **)(v12 + 40);
  if (v17) {
    sub_1000147D8(v17);
  }
  sub_1000296A4(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000354D8(uint64_t *result, unsigned __int8 *a2, uint64_t a3)
{
  __n128 v4 = result;
  int v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  unsigned int v7 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (void *)v5;
        unsigned int v9 = *(unsigned __int8 *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = (uint64_t **)(v8 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = result + 1;
LABEL_9:
    char v10 = (char *)operator new(0x38uLL);
    v10[32] = v7;
    *(_OWORD *)(v10 + 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)char v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *int v6 = (uint64_t *)v10;
    uint64_t v11 = *(void *)*v4;
    if (v11)
    {
      *__n128 v4 = v11;
      uint64_t v12 = *v6;
    }
    else
    {
      uint64_t v12 = (uint64_t *)v10;
    }
    __n128 result = sub_100018808((uint64_t *)v4[1], v12);
    ++v4[2];
  }
  return result;
}

void *sub_1000355AC(void *a1)
{
  *a1 = off_100151C20;
  long long v3 = a1 + 6;
  uint64_t v2 = a1[6];
  __n128 v4 = *(void **)(v2 + 16);
  if (!v4)
  {
    *long long v3 = 0;
    goto LABEL_5;
  }
  [v4 stopActivityUpdates];
  uint64_t v2 = *v3;
  *long long v3 = 0;
  if (v2) {
LABEL_5:
  }
    sub_100037A78((uint64_t)v3, v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4((uint64_t)(a1 + 1));
  return a1;
}

void sub_100035638(void *a1)
{
  sub_1000355AC(a1);

  operator delete();
}

void sub_100035670(char **a1@<X8>)
{
  sub_100015438(&v4, "motionState");
  sub_100015438(v5, "rawDeviceOrientation");
  sub_100015438(v6, "deviceOrientation");
  sub_100015438(v7, "deviceOrientationLock");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x60uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 96;
  uint64_t v3 = 0;
  a1[1] = sub_100037BCC((uint64_t)(a1 + 2), &v4, &v8, v2);
  do
  {
    if (SHIBYTE(v7[v3 + 2]) < 0) {
      operator delete((void *)v7[v3]);
    }
    v3 -= 3;
  }
  while (v3 != -12);
}

void sub_10003578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  sub_10002A71C(&a10);
  uint64_t v15 = 0;
  while (1)
  {
    if (*(&a12 + v15 + 95) < 0) {
      operator delete(*(void **)(&a12 + v15 + 72));
    }
    v15 -= 24;
    if (v15 == -96) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_100035804(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100035918(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100035930(void *a1)
{
  uint64_t v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MotionStateResolver] Initializing CoreMotion activity", buf, 2u);
  }
  uint64_t v3 = a1[6];
  if (!*(void *)(v3 + 16))
  {
    uint64_t v11 = qword_10015EF78;
    if (!os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)int buf = 0;
    uint64_t v12 = "[MotionStateResolver] WARNING: CoreMotionActivityManager instance not found.";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v12, buf, 2u);
    return;
  }
  if (!*(void *)(v3 + 8))
  {
    uint64_t v11 = qword_10015EF78;
    if (!os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)int buf = 0;
    uint64_t v12 = "[MotionStateResolver] WARNING: Operation queue instance not found.";
    goto LABEL_21;
  }
  uint64_t v4 = a1[4];
  sub_100015438(buf, "motionState");
  v17[0] = 0;
  BOOL v18 = 0;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v17);
  sub_100030238((uint64_t)v15, &off_100151C40);
  (*(void (**)(uint64_t, uint8_t *, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v4 + 24))(v4, buf, v17, v15, -1, 0);
  sub_100016EAC((uint64_t)v15);
  sub_100016B28(&v16, v15[0]);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MotionStateResolver] Starting updates for motion activity", buf, 2u);
  }
  sub_10000FB4C(buf, a1 + 1);
  unsigned int v7 = *(void **)buf;
  int v6 = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000147D8(v6);
  }
  uint64_t v8 = a1[6];
  uint64_t v10 = *(void *)(v8 + 8);
  unsigned int v9 = *(void **)(v8 + 16);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  _OWORD v13[2] = sub_100035C5C;
  void v13[3] = &unk_100151C48;
  v13[4] = a1;
  v13[5] = v7;
  char v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v9 startActivityUpdatesToQueue:v10 withHandler:v13];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100035C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100035C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      if (v6)
      {
        unsigned int v7 = (id *)(v6 + 24);
        id v8 = v3;
        sub_10000FD1C(v7);
        id v9 = (id)objc_claimAutoreleasedReturnValue();
        operator new();
      }
      sub_1000147D8(v5);
    }
  }
}

void sub_100035D60(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100035D74(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_100027DA4((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100035D90(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100035DA0(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id *)(a1 + 24);
  uint64_t v4 = sub_10000FD1C((id *)(a1 + 24));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100035FD8;
  handler[3] = &unk_1001515E0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.backboardd.rawOrientation", (int *)(v2 + 60), v4, handler);

  sub_100035FE4(&v14, *(_DWORD *)(*(void *)(a1 + 48) + 60));
  uint64_t v12 = a1;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = sub_10000FD1C(v3);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  __n128 v11[2] = sub_100036204;
  v11[3] = &unk_1001515E0;
  void v11[4] = a1;
  notify_register_dispatch("com.apple.backboardd.orientation", (int *)(v5 + 64), v6, v11);

  sub_100036210(&v12, *(_DWORD *)(*(void *)(a1 + 48) + 64));
  uint64_t v10 = a1;
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = sub_10000FD1C(v3);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100036430;
  void v9[3] = &unk_1001515E0;
  void v9[4] = a1;
  notify_register_dispatch("com.apple.backboardd.orientationlock", (int *)(v7 + 68), v8, v9);

  sub_10003643C(&v10, *(_DWORD *)(*(void *)(a1 + 48) + 68), 1);
}

void sub_100035FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035FD8(uint64_t a1, int a2)
{
}

void sub_100035FE4(uint64_t *a1, int token)
{
  uint64_t v3 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F90AC();
    }
  }
  else
  {
    notify_get_state(token, &state64);
    memset(&v11, 170, sizeof(v11));
    sub_1000375B4(state64, &v11);
    uint64_t v4 = *(void *)(v3 + 32);
    sub_100015438(__p, "rawDeviceOrientation");
    v7[0] = 0;
    id v8 = 0;
    sub_100016EAC((uint64_t)v7);
    sub_100016EAC((uint64_t)v7);
    sub_1000168C0((uint64_t)v5, (uint64_t)&v11);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v4 + 24))(v4, __p, v7, v5, -1, 0);
    sub_100016EAC((uint64_t)v5);
    sub_100016B28(&v6, v5[0]);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F9030();
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1000361B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_100036204(uint64_t a1, int a2)
{
}

void sub_100036210(uint64_t *a1, int token)
{
  uint64_t v3 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F91A0();
    }
  }
  else
  {
    notify_get_state(token, &state64);
    memset(&v11, 170, sizeof(v11));
    sub_1000375B4(state64, &v11);
    uint64_t v4 = *(void *)(v3 + 32);
    sub_100015438(__p, "deviceOrientation");
    v7[0] = 0;
    id v8 = 0;
    sub_100016EAC((uint64_t)v7);
    sub_100016EAC((uint64_t)v7);
    sub_1000168C0((uint64_t)v5, (uint64_t)&v11);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v4 + 24))(v4, __p, v7, v5, -1, 0);
    sub_100016EAC((uint64_t)v5);
    sub_100016B28(&v6, v5[0]);
    sub_100016EAC((uint64_t)v7);
    sub_100016B28(&v8, v7[0]);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F9124();
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1000363DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_100036430(uint64_t a1, int a2)
{
}

void sub_10003643C(uint64_t *a1, int token, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t state64 = 0;
  if (notify_get_state(token, &state64))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000F92C0();
    }
  }
  else
  {
    notify_get_state(token, &state64);
    uint64_t v6 = state64;
    BOOL v7 = state64 == 1;
    uint64_t v8 = *(void *)(v5 + 32);
    sub_100015438(__p, "deviceOrientationLock");
    v12[0] = 0;
    uint64_t v13 = 0;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    v10[0] = 4;
    std::string v11 = (uint64_t *)v7;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    (*(void (**)(uint64_t, void **, unsigned char *, unsigned __int8 *, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, __p, v12, v10, -1, 1);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    id v9 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
      sub_1000F9218(v6 == 1, a3, v9);
    }
  }
}

void sub_10003660C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100036640(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 56);
  if ((v1 - 2) >= 4)
  {
    if (v1 == 1)
    {
      sub_10003680C(a1);
    }
    else if (!*(unsigned char *)(*(void *)(a1 + 48) + 56))
    {
      sub_100036670(a1);
    }
  }
  else
  {
    sub_100036A90(a1);
  }
}

void sub_100036670(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) == 0)
  {
    if (sub_100036E6C(a1)) {
      int v2 = 1;
    }
    else {
      int v2 = sub_100036EF4(a1);
    }
    uint64_t v3 = (id)qword_10015EF78;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v9);
      int v4 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
      std::string::size_type v5 = v9.__r_.__value_.__r.__words[0];
      sub_100036F8C(v2, &__p);
      uint64_t v6 = &v9;
      if (v4 < 0) {
        uint64_t v6 = (std::string *)v5;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315394;
      std::string v11 = v6;
      __int16 v12 = 2080;
      uint64_t v13 = p_p;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] state is updated from %s to %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }

    *(unsigned char *)(*(void *)(a1 + 48) + 56) = v2;
  }
}

void sub_1000367DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10003680C(uint64_t a1)
{
  if ((sub_100036E6C(a1) & 1) == 0 && sub_10003700C(a1))
  {
    unsigned int v2 = sub_100036EF4(a1);
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] <= 1)
    {
      if ((v2 & 6) == 4) {
        float v4 = 60.0;
      }
      else {
        float v4 = 30.0;
      }
      if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] < 1)
      {
        if (((unint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] & 0x8000000000000000) == 0)
        {
          sub_1000372F0(a1, v2, v4);
        }
      }
      else
      {
        sub_1000370AC(a1, v2, v4);
      }
    }
    else
    {
      uint64_t v3 = (id)qword_10015EF78;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v10);
        int v5 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
        std::string::size_type v6 = v10.__r_.__value_.__r.__words[0];
        sub_100036F8C(v2, &__p);
        BOOL v7 = &v10;
        if (v5 < 0) {
          BOOL v7 = (std::string *)v6;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315394;
        __int16 v12 = v7;
        __int16 v13 = 2080;
        uint64_t v14 = p_p;
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
      }

      *(unsigned char *)(*(void *)(a1 + 48) + 56) = v2;
    }
  }
}

void sub_100036A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100036A90(uint64_t a1)
{
  if (sub_100036E6C(a1))
  {
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] > 1)
    {
      unsigned int v2 = (id)qword_10015EF78;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v20);
        int v11 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
        std::string::size_type v12 = v20.__r_.__value_.__r.__words[0];
        sub_100036F8C(1, &__p);
        __int16 v13 = &v20;
        if (v11 < 0) {
          __int16 v13 = (std::string *)v12;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315394;
        int v22 = v13;
        __int16 v23 = 2080;
        __int16 v24 = p_p;
        _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }

      *(unsigned char *)(*(void *)(a1 + 48) + 56) = 1;
      return;
    }
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] >= 1)
    {
      float v5 = 30.0;
      uint64_t v6 = a1;
      unsigned int v7 = 1;
LABEL_16:
      sub_1000370AC(v6, v7, v5);
      return;
    }
    if (((unint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] & 0x8000000000000000) != 0) {
      return;
    }
    float v8 = 30.0;
    uint64_t v9 = a1;
    unsigned int v10 = 1;
LABEL_21:
    sub_1000372F0(v9, v10, v8);
    return;
  }
  if (!sub_10003700C(a1) || !sub_100037550(a1)) {
    return;
  }
  int v3 = sub_100036EF4(a1);
  if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] <= 1)
  {
    if ((uint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] >= 1)
    {
      float v5 = 30.0;
      uint64_t v6 = a1;
      unsigned int v7 = v3;
      goto LABEL_16;
    }
    if (((unint64_t)[*(id *)(*(void *)(a1 + 48) + 24) confidence] & 0x8000000000000000) != 0) {
      return;
    }
    float v8 = 30.0;
    uint64_t v9 = a1;
    unsigned int v10 = v3;
    goto LABEL_21;
  }
  float v4 = (id)qword_10015EF78;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v20);
    int v15 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = v20.__r_.__value_.__r.__words[0];
    sub_100036F8C(v3, &__p);
    unsigned __int8 v17 = &v20;
    if (v15 < 0) {
      unsigned __int8 v17 = (std::string *)v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v18 = &__p;
    }
    else {
      BOOL v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315394;
    int v22 = v17;
    __int16 v23 = 2080;
    __int16 v24 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] ConfidenceHigh, state is updated from %s to %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }

  *(unsigned char *)(*(void *)(a1 + 48) + 56) = v3;
}

void sub_100036E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_100036E6C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 48) + 24) stationary];
  if (result)
  {
    if (([*(id *)(*(void *)(a1 + 48) + 24) walking] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) running] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) automotive] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) != 0)
    {
      return 0;
    }
    else
    {
      return (id)([*(id *)(*(void *)(a1 + 48) + 24) cycling] ^ 1);
    }
  }
  return result;
}

uint64_t sub_100036EF4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 48) + 24) stationary]) {
    return 1;
  }
  if ([*(id *)(*(void *)(a1 + 48) + 24) walking]) {
    return 2;
  }
  if ([*(id *)(*(void *)(a1 + 48) + 24) running]) {
    return 3;
  }
  if ([*(id *)(*(void *)(a1 + 48) + 24) automotive]) {
    return 4;
  }
  if ([*(id *)(*(void *)(a1 + 48) + 24) cycling]) {
    return 5;
  }
  return 0;
}

std::string *sub_100036F8C@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  memset(a2, 170, sizeof(std::string));
  id result = (std::string *)sub_100015438(a2, "Unknown");
  if ((a1 - 1) < 5) {
    return std::string::assign(a2, off_100151D88[(char)(a1 - 1)]);
  }
  return result;
}

void sub_100036FF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003700C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 48) + 24) stationary] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) unknown] & 1) != 0)
  {
    return 0;
  }
  if (([*(id *)(*(void *)(a1 + 48) + 24) walking] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) running] & 1) != 0
    || ([*(id *)(*(void *)(a1 + 48) + 24) automotive] & 1) != 0)
  {
    return 1;
  }
  int v3 = *(void **)(*(void *)(a1 + 48) + 24);

  return (uint64_t)[v3 cycling];
}

void sub_1000370AC(uint64_t a1, unsigned int a2, float a3)
{
  unsigned __int8 v26 = a2;
  time_t v6 = time(0);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = v10;
  if (v10)
  {
    time_t v11 = v6;
    uint64_t v12 = v8;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        int v15 = (uint64_t *)v9;
      }
      else {
        int v15 = (uint64_t *)(v9 + 8);
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      uint64_t v9 = *v15;
    }
    while (*v15);
    if (v12 != v8 && *(unsigned __int8 *)(v12 + 32) <= a2)
    {
      std::string::size_type v16 = sub_10003762C(v8 - 8, &v26);
      uint64_t v18 = *v16;
      unsigned __int8 v17 = (std::__shared_weak_count *)v16[1];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((float)(v11 - *(void *)(v18 + 16)) >= a3)
      {
        *(void *)(v18 + 16) = v11;
        if (v17) {
LABEL_17:
        }
          sub_1000147D8(v17);
      }
      else
      {
        __int16 v19 = (id)qword_10015EF78;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v25);
          int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
          std::string::size_type v21 = v25.__r_.__value_.__r.__words[0];
          sub_100036F8C(a2, &__p);
          int v22 = &v25;
          if (v20 < 0) {
            int v22 = (std::string *)v21;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int buf = 136315394;
          char v28 = v22;
          __int16 v29 = 2080;
          uint64_t v30 = p_p;
          _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] ConfidenceMedium, state is updated from %s to %s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
        }

        *(unsigned char *)(*(void *)(a1 + 48) + 56) = a2;
        *(void *)(v18 + 16) = 0;
        sub_100037684(a1, a2);
        if (v17) {
          goto LABEL_17;
        }
      }
    }
  }
}

void sub_1000372AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  if (v18) {
    sub_1000147D8(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1000372F0(uint64_t a1, unsigned int a2, float a3)
{
  unsigned __int8 v28 = a2;
  time_t v6 = time(0);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = v10;
  if (v10)
  {
    time_t v11 = v6;
    uint64_t v12 = v8;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        int v15 = (uint64_t *)v9;
      }
      else {
        int v15 = (uint64_t *)(v9 + 8);
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      uint64_t v9 = *v15;
    }
    while (*v15);
    if (v12 != v8 && *(unsigned __int8 *)(v12 + 32) <= a2)
    {
      std::string::size_type v16 = sub_10003762C(v8 - 8, &v28);
      uint64_t v18 = (void *)*v16;
      unsigned __int8 v17 = (std::__shared_weak_count *)v16[1];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      time_t v19 = v18[1];
      float v20 = (float)(v11 - v19);
      if ((float)(v11 - *v18) >= a3)
      {
        if (v20 >= a3)
        {
          time_t v19 = v11;
          time_t v11 = 0;
        }
        void *v18 = v19;
      }
      else if (v20 < a3)
      {
        std::string::size_type v21 = (id)qword_10015EF78;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          sub_100036F8C(*(unsigned __int8 *)(*(void *)(a1 + 48) + 56), &v27);
          int v22 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
          std::string::size_type v23 = v27.__r_.__value_.__r.__words[0];
          sub_100036F8C(a2, &__p);
          __int16 v24 = &v27;
          if (v22 < 0) {
            __int16 v24 = (std::string *)v23;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int buf = 136315394;
          uint64_t v30 = v24;
          __int16 v31 = 2080;
          long long v32 = p_p;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[MotionStateResolver] ConfidenceLow, state is updated from %s to %s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
        }

        *(unsigned char *)(*(void *)(a1 + 48) + 56) = a2;
        void *v18 = 0;
        v18[1] = 0;
        sub_100037684(a1, a2);
        goto LABEL_22;
      }
      v18[1] = v11;
LABEL_22:
      if (v17) {
        sub_1000147D8(v17);
      }
    }
  }
}

void sub_10003750C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  if (v18) {
    sub_1000147D8(v18);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100037550(uint64_t a1)
{
  int v2 = sub_100036EF4(a1);
  int v3 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 56);
  if (v3 == 2 && v2 != 2) {
    return 1;
  }
  if (v3 == 3 && v2 != 3) {
    return 1;
  }
  if (v3 == 4 && v2 != 4) {
    return 1;
  }
  return v3 == 5 && v2 != 5;
}

std::string *sub_1000375B4@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  memset(a2, 170, sizeof(std::string));
  id result = (std::string *)sub_100015438(a2, "<unknown>");
  if (a1 < 7) {
    return std::string::assign(a2, off_100151DB0[a1]);
  }
  return result;
}

void sub_100037610(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003762C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10002B738("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4) {
        break;
      }
      int v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    int v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void sub_100037684(uint64_t a1, int a2)
{
  unsigned int v4 = (char *)operator new(5uLL);
  float v5 = (unsigned __int8 *)v4;
  uint64_t v6 = 0;
  *(_DWORD *)unsigned int v4 = 84083201;
  uint64_t v7 = (unsigned __int8 *)(v4 + 5);
  void v4[4] = 4;
  uint64_t v8 = (unsigned __int8 *)(v4 + 4);
  while (v4[v6] != a2)
  {
    if (++v6 == 5)
    {
      uint64_t v9 = v4 + 5;
      goto LABEL_6;
    }
  }
  uint64_t v9 = &v4[v6];
LABEL_6:
  int64_t v10 = v9 - (char *)v5;
  if (v9 - (char *)v5 != 5)
  {
    if (v10 != 4) {
      memmove(v9, v9 + 1, 4 - v10);
    }
    uint64_t v7 = v8;
  }
  time_t v11 = v5;
  do
  {
    unsigned int v12 = *v11;
    unsigned __int8 v22 = *v11;
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(v13 + 40);
    uint64_t v14 = v13 + 40;
    uint64_t v15 = v16;
    if (v16)
    {
      uint64_t v17 = v14;
      do
      {
        unsigned int v18 = *(unsigned __int8 *)(v15 + 32);
        BOOL v19 = v18 >= v12;
        if (v18 >= v12) {
          float v20 = (uint64_t *)v15;
        }
        else {
          float v20 = (uint64_t *)(v15 + 8);
        }
        if (v19) {
          uint64_t v17 = v15;
        }
        uint64_t v15 = *v20;
      }
      while (*v20);
      if (v17 != v14 && v12 >= *(unsigned __int8 *)(v17 + 32))
      {
        std::string::size_type v21 = (void *)*sub_10003762C(v14 - 8, &v22);
        *std::string::size_type v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
      }
    }
    ++v11;
  }
  while (v11 != v7);

  operator delete(v5);
}

void sub_1000377F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100037804(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000378B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_100037900((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_100037900(uint64_t a1, id *a2)
{
  unsigned int v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_100037A4C);
}

void sub_100037968(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000379A0(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  int v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_100037A4C);
}

uint64_t sub_100037A08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100037A4C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100037A78(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100037AF8(*(void **)(a2 + 40));

    id v3 = *(id *)a2;
    *(void *)a2 = 0;

    operator delete();
  }
}

void sub_100037AF8(void *a1)
{
  if (a1)
  {
    sub_100037AF8(*a1);
    sub_100037AF8(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      sub_1000147D8(v2);
    }
    operator delete(a1);
  }
}

void sub_100037B50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100151D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100037B70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100151D48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

char *sub_100037BCC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unsigned int v4 = __dst;
  uint64_t v9 = __dst;
  int64_t v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  __n128 v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100017424(v4, *(void **)v6, *((void *)v6 + 1));
        unsigned int v4 = v10;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unsigned int v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int64_t v10 = v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v12) = 1;
  sub_100037CBC((uint64_t)v11);
  return v4;
}

void sub_100037CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100037CBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100037CBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100037CF4(a1);
  }
  return a1;
}

void sub_100037CF4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_100037D3C(void ***a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  sub_100035DA0((uint64_t)v1);
  sub_100035930(v1);
  operator delete();
}

void sub_100037DC8()
{
}

uint64_t *sub_100037DF4(uint64_t *result)
{
  uint64_t v1 = *result;
  *id result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

uint64_t *sub_100037E44(id *a1)
{
  unsigned int v4 = a1;
  uint64_t v1 = (uint64_t)*a1;
  objc_storeStrong((id *)(*((void *)*a1 + 6) + 24), a1[1]);
  sub_100036640(v1);
  memset(&v11, 170, sizeof(v11));
  sub_100036F8C(*(unsigned __int8 *)(*(void *)(v1 + 48) + 56), &v11);
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000F9338();
  }
  uint64_t v2 = *(void *)(v1 + 32);
  sub_100015438(__p, "motionState");
  v7[0] = 0;
  uint64_t v8 = 0;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v7);
  sub_1000168C0((uint64_t)v5, (uint64_t)&v11);
  (*(void (**)(uint64_t, void **, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v2 + 24))(v2, __p, v7, v5, -1, 0);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
  sub_100016EAC((uint64_t)v7);
  sub_100016B28(&v8, v7[0]);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return sub_100037DF4((uint64_t *)&v4);
}

void sub_100037FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100016EAC((uint64_t)&a10);
  sub_100016B28((uint64_t **)(v26 + 8), a10);
  sub_100016EAC((uint64_t)&a12);
  sub_100016B28(v25, a12);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_100037DF4(&a9);
  _Unwind_Resume(a1);
}

void sub_10003804C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100038060(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1000380A0()
{
}

void sub_100038108()
{
}

void sub_100038134(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v7 = dispatch_queue_create("analyticsd.TrialStateResolverQueue.myQueue", v6);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v7;

  *a1 = off_100151DF8;
  a1[4] = off_100151E38;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  a1[5] = off_100151E78;
  a1[6] = v9;
  a1[7] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a3[1];
  a1[8] = *a3;
  a1[9] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_100038254(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    sub_1000147D8(v4);
  }
  float v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    sub_1000147D8(v5);
  }
  sub_1000296A4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100038280@<X0>(uint64_t *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (void *)sub_1000392A0(a1, off_100151E90);
  id v3 = v2;
  unint64_t v4 = a1[2];
  a1[1] = (uint64_t)v2;
  if ((unint64_t)v2 >= v4)
  {
    float v5 = (void *)sub_1000392A0(a1, off_100151E98);
  }
  else
  {
    sub_100015438(v2, "trialDeployment");
    float v5 = v3 + 3;
    a1[1] = (uint64_t)v5;
  }
  a1[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[2])
  {
    uint64_t v6 = (void *)sub_1000392A0(a1, off_100151EA0);
  }
  else
  {
    sub_100015438(v5, "trialExperiment");
    uint64_t v6 = v5 + 3;
    a1[1] = (uint64_t)v6;
  }
  a1[1] = (uint64_t)v6;
  if ((unint64_t)v6 >= a1[2])
  {
    uint64_t result = sub_1000392A0(a1, &off_100151EA8);
  }
  else
  {
    sub_100015438(v6, "trialTreatment");
    uint64_t result = (uint64_t)(v6 + 3);
    a1[1] = (uint64_t)(v6 + 3);
  }
  a1[1] = result;
  return result;
}

void sub_1000383B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  a9 = (void **)v9;
  sub_10002A71C(&a9);
  _Unwind_Resume(a1);
}

void sub_1000383E4(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_1000384F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100038510(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, dispatch_group_t *a7@<X8>)
{
  dispatch_group_t v14 = dispatch_group_create();
  *a7 = v14;
  void v16[3] = a1;
  uint64_t v15 = v14;
  v16[4] = v15;
  if (v15) {
    dispatch_group_enter(v15);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100017424(v17, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
    _OWORD v17[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100017424(v18, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unsigned int v18 = *(_OWORD *)a4;
    _OWORD v18[2] = *(void **)(a4 + 16);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_100017424(v19, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)BOOL v19 = *(_OWORD *)a5;
    _OWORD v19[2] = *(void **)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a6;
    __p[2] = *(void **)(a6 + 16);
  }
  char v21 = a2;
  v16[0] = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v16, (void *)(a1 + 8));
  operator new();
}

void sub_10003884C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    if (v32[87] < 0) {
      operator delete(*v35);
    }
    if (v32[63] < 0) {
      operator delete(*v34);
    }
    if (v32[39] < 0) {
      operator delete(*v36);
    }
    sub_10002E1EC(v33);
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100038934(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, dispatch_group_t *a7@<X8>)
{
}

void sub_10003893C(uint64_t a1)
{
}

void sub_10003897C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100038A90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100038AA8(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  [**(id **)(a1 + 48) unsubscribeAllUpdateHandlers];
  sub_10003897C(v1);
}

uint64_t sub_100038AE8(uint64_t a1)
{
  *(void *)a1 = off_100151DF8;
  *(void *)(a1 + 32) = off_100151E38;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = off_100151E78;
  sub_100038FD0((id **)(a1 + 80), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000147D8(v3);
  }
  sub_1000296A4(a1 + 8);
  return a1;
}

void sub_100038B94(uint64_t a1)
{
  *(void *)a1 = off_100151DF8;
  *(void *)(a1 + 32) = off_100151E38;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = off_100151E78;
  sub_100038FD0((id **)(a1 + 80), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000147D8(v3);
  }
  sub_1000296A4(a1 + 8);

  operator delete();
}

uint64_t sub_100038C60(uint64_t a1)
{
  *(void *)(a1 - 32) = off_100151DF8;
  *(void *)a1 = off_100151E38;
  *(void *)(a1 + 8) = off_100151E78;
  sub_100038FD0((id **)(a1 + 48), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_1000147D8(v3);
  }

  return sub_1000296A4(a1 - 24);
}

void sub_100038D14(uint64_t a1)
{
  *(void *)(a1 - 32) = off_100151DF8;
  *(void *)a1 = off_100151E38;
  *(void *)(a1 + 8) = off_100151E78;
  sub_100038FD0((id **)(a1 + 48), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_1000147D8(v3);
  }
  sub_1000296A4(a1 - 24);

  operator delete();
}

dispatch_group_t sub_100038DE0@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

dispatch_group_t sub_100038E08@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

dispatch_group_t sub_100038E30@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

uint64_t sub_100038E58(uint64_t a1)
{
  *(void *)(a1 - 4sub_100027DA4((uint64_t)&a9, 0) = off_100151DF8;
  *(void *)(a1 - 8) = off_100151E38;
  *(void *)a1 = off_100151E78;
  sub_100038FD0((id **)(a1 + 40), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1000147D8(v3);
  }

  return sub_1000296A4(a1 - 32);
}

void sub_100038F08(uint64_t a1)
{
  *(void *)(a1 - 4sub_100027DA4((uint64_t)&a9, 0) = off_100151DF8;
  *(void *)(a1 - 8) = off_100151E38;
  *(void *)a1 = off_100151E78;
  sub_100038FD0((id **)(a1 + 40), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1000147D8(v3);
  }
  sub_1000296A4(a1 - 32);

  operator delete();
}

id **sub_100038FD0(id **result, id *a2)
{
  uint64_t v2 = *result;
  *dispatch_group_t result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

void sub_100039030(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000390E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    sub_10003912C((uint64_t)&a12, v12);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10003912C(uint64_t a1, id *a2)
{
  id v3 = sub_10000FD1C(a2 + 3);
  dispatch_barrier_async_f(v3, a2, (dispatch_function_t)sub_100039274);
}

void sub_100039194(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000391CC(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  uint64_t v2 = sub_10000FD1C(v1 + 3);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_100039274);
}

uint64_t sub_100039230(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100039274(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1000392A0(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10002AC98(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  dispatch_group_t v14 = &v10[24 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[24 * v9];
  sub_100015438(v14, *a2);
  uint64_t v15 = v14 + 24;
  sub_10002AC20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10002AE30((uint64_t)&v13);
  return v11;
}

void sub_1000393C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000393DC(uint64_t **a1)
{
  unint64_t v5 = a1;
  uint64_t v1 = **a1;
  if (!**(void **)(v1 + 80))
  {
    uint64_t v2 = -[TrialStateRelay initWithMonitoring:]([TrialStateRelay alloc], "initWithMonitoring:", v1 + 40, v5);
    uint64_t v3 = *(void ***)(v1 + 80);
    unint64_t v4 = *v3;
    *uint64_t v3 = v2;
  }
  sub_10003897C(v1);
}

void sub_100039490()
{
}

uint64_t *sub_1000394BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(v1 + 112))
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001DD00((uint64_t)__p, "namespace");
    unsigned int v18 = __p;
    char v19 = 1;
    uint64_t v21 = sub_1000168C0((uint64_t)v20, v1 + 16);
    char v22 = 1;
    sub_10001200C((uint64_t)v23, (uint64_t)__p, 2, 1, 2);
    v24[1] = (uint64_t *)v23;
    char v25 = 1;
    sub_10001200C((uint64_t)&v15, (uint64_t)v23, 1, 1, 2);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(v24, v23[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      sub_100016EAC((uint64_t)&v20[i]);
      sub_100016B28((uint64_t **)&v20[i + 8], v20[i]);
    }
    uint64_t v4 = *(void *)(v2 + 48);
    sub_100015438(__p, "trial");
    sub_1000168C0((uint64_t)v23, v1 + 16);
    (*(void (**)(uint64_t, void **, unint64_t *, unsigned char *, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, __p, &v15, v23, -1, 1);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(v24, v23[0]);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialExperiment");
    sub_1000168C0((uint64_t)v23, v1 + 40);
    (*(void (**)(uint64_t, void **, unint64_t *, unsigned char *, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, __p, &v15, v23, -1, 1);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(v24, v23[0]);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialDeployment");
    sub_1000168C0((uint64_t)v23, v1 + 64);
    (*(void (**)(uint64_t, void **, unint64_t *, unsigned char *, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, __p, &v15, v23, -1, 1);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(v24, v23[0]);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialTreatment");
    sub_1000168C0((uint64_t)v23, v1 + 88);
    (*(void (**)(uint64_t, void **, unint64_t *, unsigned char *, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, __p, &v15, v23, -1, 1);
    sub_100016EAC((uint64_t)v23);
    sub_100016B28(v24, v23[0]);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    sub_100016EAC((uint64_t)&v15);
    sub_100016B28(&v16, v15);
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 48);
    sub_100015438(__p, "trial");
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialExperiment");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialDeployment");
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100015438(__p, "trialTreatment");
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100039A94(&v14);
  return sub_100024E7C((uint64_t *)&v13);
}

void sub_100039964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_100039A94(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100039A94(uint64_t *result)
{
  uint64_t v1 = *result;
  *dispatch_group_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 111) < 0) {
      operator delete(*(void **)(v1 + 88));
    }
    if (*(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    sub_10002E1EC((id *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100039B48(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100039B80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100039B94(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

void sub_100039BE8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

void sub_100039C50(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = **a1;
  memset(v6, 0, sizeof(v6));
  unint64_t v7 = 0xAAAAAAAA3F800000;
  uint64_t v2 = *(void *)(v1 + 64);
  sub_100015438(__p, "queried_states");
  v8[0] = off_100152000;
  v8[1] = v6;
  void v8[2] = v1;
  void v8[3] = v8;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v2 + 208))(v2, __p, v8);
  sub_10000642C(v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_10004038C((uint64_t)v6);
  operator delete();
}

void sub_100039D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10004038C((uint64_t)va);
  operator delete();
}

void sub_100039DB0()
{
}

__n128 sub_100039DC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100152000;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100039E10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100152000;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100039E40(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  char v5 = *a4;
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_100015438(__p, v5);
  uint64_t v25 = 0;
  sub_10000D450((uint64_t)__p, (uint64_t)v24, 1, &v22);
  sub_10000DE9C(v24);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  v24[0] = (unsigned __int8 *)&v22;
  v24[1] = 0;
  v24[2] = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0x8000000000000000;
  sub_10001D3E4(v24);
  __p[0] = &v22;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0x8000000000000000;
  sub_1000157EC((unsigned __int8 **)__p);
  while (!sub_1000205D8(v24, (unsigned __int8 **)__p))
  {
    unint64_t v7 = sub_10001EE40(v24);
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v8;
    v16[1] = v8;
    uint64_t v9 = sub_10003A164(v7, 2uLL);
    sub_10003A370(v9, "namespace", (uint64_t)v16);
    uint64_t v10 = sub_10003A164(v7, 2uLL);
    uint64_t v14 = 0;
    *(_OWORD *)&__s1.__r_.__value_.__r.__words[1] = 0uLL;
    __s1.__r_.__value_.__r.__words[0] = v10;
    unint64_t v15 = 0x8000000000000000;
    sub_1000157EC((unsigned __int8 **)&__s1);
    if (sub_1000205D8((unsigned __int8 **)v16, (unsigned __int8 **)&__s1)) {
      goto LABEL_16;
    }
    memset(&__s1, 170, sizeof(__s1));
    uint64_t v11 = sub_10001EE40((unsigned __int8 **)v16);
    sub_100015064((uint64_t)v11, &__s1);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__s1.__r_.__value_.__l.__size_ != 65) {
        goto LABEL_12;
      }
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) != 65) {
        goto LABEL_12;
      }
      p_s1 = &__s1;
    }
    if (memcmp(p_s1, "WIRELESS_DATA_ANALYTICS_CELLULAR_PRODUCT_EXPERIMENTATION_INTERNAL", 0x41uLL))
    {
LABEL_12:
      if (!sub_100010388(*(void **)(a1 + 8), (unsigned __int8 *)&__s1))
      {
        sub_10003FD50(*(void *)(a1 + 8), (unsigned __int8 *)&__s1, (uint64_t)&__s1);
        sub_10003A3DC(*(void ***)(v6 + 80), (uint64_t *)&__s1);
      }
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
LABEL_16:
    sub_100013C64(v24);
  }
  sub_100016EAC((uint64_t)&v22);
  sub_100016B28(&v23, v22);
}

void sub_10003A068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  sub_10000DE9C((void *)(v32 - 128));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    a31 = 0;
    a32 = 0;
    sub_100016EAC((uint64_t)&a31);
    sub_100016EAC((uint64_t)&a31);
    __cxa_end_catch();
    JUMPOUT(0x100039EB0);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003A118(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10003A158()
{
}

uint64_t sub_10003A164(unsigned __int8 *a1, unint64_t a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 2;
    char v5 = operator new(0x18uLL);
    v5[1] = 0;
    void v5[2] = 0;
    *char v5 = 0;
    *((void *)a1 + 1) = v5;
    sub_100016EAC((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v13 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v16, v13);
    uint64_t v14 = std::string::insert(&v16, 0, "cannot use operator[] with a numeric argument with ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v14->__r_.__value_.__r.__words[2];
    long long v17 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(305, (uint64_t)&v17, exception);
  }
  uint64_t v6 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  unint64_t v9 = (uint64_t)(v8 - *v6) >> 4;
  if (v9 <= a2)
  {
    unint64_t v10 = a2 - v9 + 1;
    LOBYTE(v17) = 0;
    *((void *)&v17 + 1) = 0;
    sub_100016EAC((uint64_t)&v17);
    sub_100016EAC((uint64_t)&v17);
    sub_10003F764(v6, v8, v10, (unint64_t)&v17);
    sub_100016EAC((uint64_t)&v17);
    sub_100016B28((uint64_t **)&v17 + 1, v17);
    uint64_t v7 = **((void **)a1 + 1);
  }
  return v7 + 16 * a2;
}

void sub_10003A300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10003A370@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_10001586C((void *)a3, a1);
  uint64_t result = (uint64_t)sub_1000157EC(v7);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_100023A50(*(void *)(a1 + 8), a2);
    *(void *)(a3 + 8) = result;
  }
  return result;
}

void sub_10003A3DC(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  objc_msgSend(v2, "subscribeToTrialNamespace:");
}

void sub_10003A448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003A8C0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 117) {
    sub_1000F9540();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_100117A00;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    sub_100017EBC((unsigned __int8 **)a1);
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    sub_1000F9514();
  }
  return v3;
}

uint64_t sub_10003A9B4(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    sub_1000F956C();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  uint64_t v7 = &a2[a3];
  while (1)
  {
    sub_100017EBC((unsigned __int8 **)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t sub_10003AA6C(uint64_t a1, uint64_t *a2)
{
  __int16 v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        sub_10003E154(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        sub_10003E7DC(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10003EB0C(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_10003E494(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          sub_10003DAC0(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v39);
        sub_10003B59C(v5, &v33);
        __int16 v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        __int16 v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned __int8 v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v35, &v37);
        uint64_t v17 = sub_10003B420((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        sub_10003CC54(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!sub_10003C6EC(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10003C980(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        sub_1000181AC((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((sub_10003C0C4(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!sub_10003C56C(a2, v4)) {
            goto LABEL_56;
          }
          int v16 = sub_10001AAC8(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          sub_1000181AC((uint64_t)&v40, &v37);
          int v15 = sub_10001AAC8(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = sub_10003C358(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = sub_10001AAC8(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              sub_10003B59C(v5, &v39);
              *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              sub_100015438(&v33, "array");
              sub_10003B954(a1, 0xAu, (uint64_t)&v33, &__p);
              sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
              uint64_t v23 = sub_10003B420((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!sub_10003C980(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            sub_10003B59C(v5, &v39);
            *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            sub_100015438(&v33, "object");
            sub_10003B954(a1, 0xBu, (uint64_t)&v33, &__p);
            sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
            uint64_t v23 = sub_10003B420((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!sub_10003C358(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          sub_10003B59C(v5, &v39);
          *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          sub_100015438(&v33, "object key");
          sub_10003B954(a1, 4u, (uint64_t)&v33, &__p);
          sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
          uint64_t v23 = sub_10003B420((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!sub_10003C56C(a2, v4)) {
          goto LABEL_56;
        }
        int v14 = sub_10001AAC8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_10001AAC8(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "object separator");
        sub_10003B954(a1, 0xCu, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v23 = sub_10003B420((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        sub_10003BD98(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "value");
        sub_10003B954(a1, 0, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_10003B59C(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "value");
        sub_10003B954(a1, 0x10u, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_10003B29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  long long v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003B420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)sub_10003EE54((uint64_t)exception, a4);
        int v8 = (void (*)(void *))sub_10003BD98;
        break;
      case 1:
        uint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EF40((uint64_t)v9, a4);
        int v8 = (void (*)(void *))sub_10002B664;
        break;
      case 2:
        int v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EFB0((uint64_t)v10, a4);
        int v8 = (void (*)(void *))sub_100029428;
        break;
      case 3:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EED0((uint64_t)v11, a4);
        int v8 = (void (*)(void *))sub_10003CC54;
        break;
      case 4:
        int v12 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003F020((uint64_t)v12, a4);
        int v8 = (void (*)(void *))sub_100039B94;
        break;
      default:
        sub_1000F9598();
    }
    __cxa_throw(v6, v7, v8);
  }
  return 0;
}

void sub_10003B59C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)std::string __str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_10003B660(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B680(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  memset(v30, 170, sizeof(v30));
  sub_100015438(&v24, "parse_error");
  sub_100028FA8(a1, &v26);
  int v8 = std::string::append(&v26, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_10003F0F8((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v28, ": ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(void *)&v30[16] = *((void *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v21 = *a2;
  if (v30[23] >= 0) {
    uint64_t v22 = v30;
  }
  else {
    uint64_t v22 = *(char **)v30;
  }
  sub_100029160((uint64_t)a4, a1, v22);
  *a4 = off_1001520D8;
  a4[4] = v21;
  if ((v30[23] & 0x80000000) != 0) {
    operator delete(*(void **)v30);
  }
}

void sub_10003B8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_10003B954(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(a4, 170, sizeof(std::string));
  sub_100015438(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100015438(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_10003B59C(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  char v25 = (char *)sub_10003F2A8(v13);
  sub_100015438(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  uint64_t v30 = (char *)sub_10003F2A8(a2);
  sub_100015438(&v38, v30);
  __int16 v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_10003BCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003BD98(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

uint64_t sub_10003BE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exceptiouint64_t n = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)sub_10003EE54((uint64_t)exception, a4);
        uint64_t v8 = (void (*)(void *))sub_10003BD98;
        break;
      case 1:
        long long v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EF40((uint64_t)v9, a4);
        uint64_t v8 = (void (*)(void *))sub_10002B664;
        break;
      case 2:
        long long v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EFB0((uint64_t)v10, a4);
        uint64_t v8 = (void (*)(void *))sub_100029428;
        break;
      case 3:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003EED0((uint64_t)v11, a4);
        uint64_t v8 = (void (*)(void *))sub_10003CC54;
        break;
      case 4:
        std::string::size_type v12 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)sub_10003F020((uint64_t)v12, a4);
        uint64_t v8 = (void (*)(void *))sub_100039B94;
        break;
      default:
        sub_1000F95C4();
    }
    __cxa_throw(v6, v7, v8);
  }
  return 0;
}

uint64_t sub_10003BFA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  sub_10000DC80(a1 + 96, a3);
  *(unsigned char *)(a1 + 136) = 9;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  sub_100016EAC(a1 + 136);
  char v8 = 1;
  sub_1000181AC(v6, &v8);
  return a1;
}

void sub_10003C074(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  sub_100028D64(v4);
  sub_10000DE9C(v6);
  char v8 = *(void **)(v1 + 56);
  if (v8) {
    operator delete(v8);
  }
  if (*v2) {
    operator delete(*v2);
  }
  long long v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10003C0C4(uint64_t *a1, unint64_t a2)
{
  int v4 = (void **)(a1 + 2);
  unsigned int v5 = (char **)(a1 + 1);
  char v31 = sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  sub_1000181AC((uint64_t)(v4 + 2), &v31);
  LOBYTE(v29) = 1;
  sub_10003CD30(a1, (unsigned __int8 *)&v29, 1);
  uint64_t v7 = v6;
  char v8 = *v4;
  unint64_t v9 = a1[3];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = ((char *)v8 - *v5) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v12 = v9 - (void)*v5;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      long long v15 = (char *)sub_100019978((uint64_t)(a1 + 3), v14);
    }
    else {
      long long v15 = 0;
    }
    int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)int v16 = v7;
    long long v10 = v16 + 8;
    long long v19 = (char *)a1[1];
    std::string::size_type v18 = (char *)a1[2];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      std::string::size_type v18 = *v5;
    }
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)v10;
    a1[3] = (uint64_t)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v8 = v6;
    long long v10 = v8 + 1;
  }
  a1[2] = (uint64_t)v10;
  if (a2 != -1)
  {
    long long v21 = (char *)*(v10 - 1);
    if (v21)
    {
      unint64_t v22 = *v21;
      if (v22 > 2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = qword_100117DC0[v22];
      }
      if (v23 < a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        std::string v26 = std::string::insert(&v28, 0, "excessive object size: ");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v30 = v26->__r_.__value_.__r.__words[2];
        long long v29 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(408, (uint64_t)&v29, exception);
      }
    }
  }
  return 1;
}

void sub_10003C2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10003C358(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (sub_10003CCA8((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    uint64_t v3 = sub_100016A10((uint64_t)v25, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    sub_100016EAC(v3);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v25[0];
    v25[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v26;
    std::string v26 = v6;
    sub_100016EAC(v4);
    sub_100016EAC((uint64_t)v25);
    sub_100016B28(&v26, v25[0]);
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    sub_1000F95F0();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    sub_1000F961C();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    long long v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        *(void *)&v24[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)int v24 = v11;
        *(_OWORD *)&v24[16] = v11;
        sub_10001586C(v24, (uint64_t)v10);
        sub_10001D3E4((unsigned __int8 **)v24);
        uint64_t v12 = *(void *)(a1[2] - 8);
        *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v21 = v13;
        long long v22 = v13;
        unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
        sub_10001586C(&v21, v12);
        sub_1000157EC((unsigned __int8 **)&v21);
        if (!sub_1000205D8((unsigned __int8 **)v24, (unsigned __int8 **)&v21))
        {
          while (*sub_10003D074((unsigned __int8 **)v24) != 9)
          {
            sub_100013C64((unsigned __int8 **)v24);
            uint64_t v14 = *(void *)(a1[2] - 8);
            *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v21 = v15;
            long long v22 = v15;
            unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
            sub_10001586C(&v21, v14);
            sub_1000157EC((unsigned __int8 **)&v21);
            if (sub_1000205D8((unsigned __int8 **)v24, (unsigned __int8 **)&v21)) {
              return 1;
            }
          }
          int v16 = *(unsigned __int8 **)(a1[2] - 8);
          uint64_t v18 = *(void *)v24;
          long long v19 = *(_OWORD *)&v24[8];
          long long v20 = *(_OWORD *)&v24[24];
          sub_10003D1D4(v16, (uint64_t)&v18, (uint64_t)&v21);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_10003C56C(void *a1, long long *a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  long long v13 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000168C0((uint64_t)&v12, (uint64_t)a2);
  char v11 = sub_10003CCA8((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  sub_1000181AC((uint64_t)(a1 + 7), &v11);
  if (v11 && *(void *)(a1[2] - 8))
  {
    sub_100016A10((uint64_t)v9, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8) + 8);
    uint64_t v14 = a2;
    char v5 = sub_100016548(v4, (const void **)a2, (uint64_t)&unk_100117318, &v14);
    sub_100016EAC((uint64_t)v9);
    char v6 = *((unsigned char *)v5 + 56);
    v5 += 7;
    *(unsigned char *)char v5 = v9[0];
    v9[0] = v6;
    uint64_t v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    long long v10 = v7;
    sub_100016EAC((uint64_t)v5);
    a1[10] = v5;
    sub_100016EAC((uint64_t)v9);
    sub_100016B28(&v10, v9[0]);
  }
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  return 1;
}

void sub_10003C6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
}

uint64_t sub_10003C6EC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (void **)(a1 + 2);
  char v5 = (char **)(a1 + 1);
  char v31 = sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  sub_1000181AC((uint64_t)(v4 + 2), &v31);
  LOBYTE(v29) = 2;
  sub_10003CD30(a1, (unsigned __int8 *)&v29, 1);
  uint64_t v7 = v6;
  uint64_t v8 = *v4;
  unint64_t v9 = a1[3];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = ((char *)v8 - *v5) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v12 = v9 - (void)*v5;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      long long v15 = (char *)sub_100019978((uint64_t)(a1 + 3), v14);
    }
    else {
      long long v15 = 0;
    }
    int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)int v16 = v7;
    long long v10 = v16 + 8;
    long long v19 = (char *)a1[1];
    uint64_t v18 = (char *)a1[2];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = *v5;
    }
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)v10;
    a1[3] = (uint64_t)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v8 = v6;
    long long v10 = v8 + 1;
  }
  a1[2] = (uint64_t)v10;
  if (a2 != -1)
  {
    long long v21 = (char *)*(v10 - 1);
    if (v21)
    {
      unint64_t v22 = *v21;
      if (v22 > 2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = qword_100117DC0[v22];
      }
      if (v23 < a2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        std::string v26 = std::string::insert(&v28, 0, "excessive array size: ");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v30 = v26->__r_.__value_.__r.__words[2];
        long long v29 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(408, (uint64_t)&v29, exception);
      }
    }
  }
  return 1;
}

void sub_10003C918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_10003C980(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (sub_10003CCA8((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    sub_100016A10((uint64_t)v12, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    sub_100016EAC((uint64_t)v12);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v12[0];
    v12[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v13;
    uint64_t v13 = v6;
    sub_100016EAC(v4);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    sub_1000F9648();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    sub_1000F9674();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (*(unsigned char *)v10 == 2) {
      sub_100016AC4(*(void *)(v10 + 8), *(void *)(*(void *)(v10 + 8) + 8) - 16);
    }
  }
  return 1;
}

void sub_10003CADC(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_100015438(&__p, "out_of_range");
  sub_100028FA8(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = (char *)v15;
  }
  else {
    uint64_t v11 = (char *)v15[0];
  }
  sub_100029160((uint64_t)a3, a1, v11);
  *a3 = off_100152098;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_10003CC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003CC54(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);

  std::exception::~exception(a1);
}

uint64_t sub_10003CCA8(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_10003CD30(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    char v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v6 = *a2;
    LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = v6;
    sub_10001946C(&v31, v6);
    sub_100016EAC((uint64_t)&v30);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        long long v29 = v31;
        sub_100016EAC((uint64_t)&v30);
        LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
        char v31 = 0;
        sub_100016EAC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_100016EAC((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        long long v29 = v16;
        sub_100016EAC(v14);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100019524(v10, (uint64_t)&v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30;
            *(void *)(v11 + 8) = v31;
            sub_100016EAC((uint64_t)&v30);
            LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
            char v31 = 0;
            sub_100016EAC(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              long long v27 = v31;
              sub_100016EAC((uint64_t)&v30);
              LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
              char v31 = 0;
              sub_100016EAC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_100016EAC((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              unint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              long long v27 = v22;
              sub_100016EAC(v20);
              sub_100016EAC((uint64_t)v26);
              sub_100016B28(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    return v13;
  }
  return 0;
}

void sub_10003D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10003D074(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    sub_1000F96CC();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    char v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      sub_1000F9724();
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      sub_1000F96F8();
    }
    return v4 + 56;
  }
  else if (a1[4])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v7, "cannot get value");
    sub_10002B4EC(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_10003D194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_10003D1D4@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned __int8 **)a2 != a1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(&v24, "iterator does not fit current value");
    sub_10002B4EC(202, (uint64_t)&v24, exception);
  }
  *(void *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  uint64_t v7 = (unsigned __int8 **)sub_10001586C((void *)a3, (uint64_t)a1);
  sub_1000157EC(v7);
  int v8 = *a1;
  if ((v8 - 3) < 6)
  {
    if (*(void *)(a2 + 32))
    {
      unint64_t v18 = __cxa_allocate_exception(0x20uLL);
      sub_100015438(&v24, "iterator out of range");
      sub_10002B4EC(205, (uint64_t)&v24, v18);
    }
    if (v8 == 8)
    {
      long long v10 = (void **)(a1 + 8);
      int v9 = (void **)*((void *)a1 + 1);
      int64_t v16 = *v9;
      if (*v9)
      {
        v9[1] = v16;
        unint64_t v11 = v16;
        goto LABEL_13;
      }
    }
    else
    {
      if (v8 != 3)
      {
LABEL_15:
        *a1 = 0;
        return sub_100016EAC((uint64_t)a1);
      }
      long long v10 = (void **)(a1 + 8);
      int v9 = (void **)*((void *)a1 + 1);
      if (*((char *)v9 + 23) < 0)
      {
        unint64_t v11 = *v9;
LABEL_13:
        operator delete(v11);
        int v9 = (void **)*v10;
      }
    }
    operator delete(v9);
    uint64_t *v10 = 0;
    goto LABEL_15;
  }
  if (v8 == 1)
  {
    uint64_t result = (uint64_t)sub_10003D514(*((uint64_t ***)a1 + 1), *(uint64_t **)(a2 + 8));
    *(void *)(a3 + 8) = result;
  }
  else
  {
    if (v8 != 2)
    {
      unint64_t v19 = __cxa_allocate_exception(0x20uLL);
      uint64_t v20 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v23, v20);
      char v21 = std::string::insert(&v23, 0, "cannot use erase() with ");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
      long long v24 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(307, (uint64_t)&v24, v19);
    }
    uint64_t v12 = *((void *)a1 + 1);
    uint64_t v13 = *(void *)(a2 + 16);
    sub_10003D958((uint64_t)&v24, v13 + 16, *(void *)(v12 + 8), v13);
    uint64_t result = sub_100016AC4(v12, v14);
    *(void *)(a3 + 16) = v13;
  }
  return result;
}

void sub_10003D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10003D514(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = sub_10003D560(a1, a2);
  sub_10002E3F0((uint64_t)(a1 + 1), (uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t *sub_10003D560(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  long long v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10003D5D4(v6, a2);
  return v3;
}

uint64_t *sub_10003D5D4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  long long v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *long long v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _OWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _OWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        int64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      long long v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *long long v24 = v23;
      goto LABEL_72;
    }
    int64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    _OWORD v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10003D958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    v10[0] = *(unsigned char *)v5;
    uint64_t v11 = *(uint64_t **)(v5 + 8);
    sub_100016EAC(v5);
    *(unsigned char *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    sub_100016EAC((uint64_t)v10);
    sub_100016EAC((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    int v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t v11 = v8;
    sub_100016EAC(a4);
    sub_100016EAC((uint64_t)v10);
    sub_100016B28(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

void sub_10003DA58(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_10003DAC0(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v6 = *a2;
    LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 7;
    char v31 = v6;
    sub_100016EAC((uint64_t)&v30);
    sub_100016EAC((uint64_t)&v30);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        long long v29 = v31;
        sub_100016EAC((uint64_t)&v30);
        LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
        char v31 = 0;
        sub_100016EAC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_100016EAC((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        long long v29 = v16;
        sub_100016EAC(v14);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100019524(v10, (uint64_t)&v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30;
            *(void *)(v11 + 8) = v31;
            sub_100016EAC((uint64_t)&v30);
            LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
            char v31 = 0;
            sub_100016EAC(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_100016EAC((uint64_t)&v30);
              LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
              char v31 = 0;
              sub_100016EAC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_100016EAC((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              sub_100016EAC(v20);
              sub_100016EAC((uint64_t)v26);
              sub_100016B28(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          long long v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    return v13;
  }
  return 0;
}

void sub_10003DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003DE0C(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = (uint64_t *)*a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA04;
    char v31 = v6;
    sub_100016EAC((uint64_t)&v30);
    sub_100016EAC((uint64_t)&v30);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        long long v29 = v31;
        sub_100016EAC((uint64_t)&v30);
        LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
        char v31 = 0;
        sub_100016EAC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_100016EAC((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        long long v29 = v16;
        sub_100016EAC(v14);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          uint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100019524(v10, (uint64_t)&v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30;
            *(void *)(v11 + 8) = v31;
            sub_100016EAC((uint64_t)&v30);
            LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
            char v31 = 0;
            sub_100016EAC(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_100016EAC((uint64_t)&v30);
              LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
              char v31 = 0;
              sub_100016EAC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_100016EAC((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              sub_100016EAC(v20);
              sub_100016EAC((uint64_t)v26);
              sub_100016B28(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          long long v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    return v13;
  }
  return 0;
}

void sub_10003E134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E154(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAA00;
    unint64_t v30 = 0;
    sub_100016EAC((uint64_t)&v29);
    sub_100016EAC((uint64_t)&v29);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29;
        std::string v28 = v30;
        sub_100016EAC((uint64_t)&v29);
        LOBYTE(v29) = 0;
        unint64_t v30 = 0;
        sub_100016EAC((uint64_t)v27);
        uint64_t v13 = *a1;
        sub_100016EAC((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        char v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        std::string v28 = v15;
        sub_100016EAC(v13);
        sub_100016EAC((uint64_t)v27);
        sub_100016B28(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = sub_100019524(v9, (uint64_t)&v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29;
            *(void *)(v10 + 8) = v30;
            sub_100016EAC((uint64_t)&v29);
            LOBYTE(v29) = 0;
            unint64_t v30 = 0;
            sub_100016EAC(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29;
              uint64_t v26 = v30;
              sub_100016EAC((uint64_t)&v29);
              LOBYTE(v29) = 0;
              unint64_t v30 = 0;
              sub_100016EAC((uint64_t)v25);
              uint64_t v19 = a1[10];
              sub_100016EAC((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              char v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              uint64_t v26 = v21;
              sub_100016EAC(v19);
              sub_100016EAC((uint64_t)v25);
              sub_100016B28(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v29);
    sub_100016B28(&v30, v29);
    return v12;
  }
  return 0;
}

void sub_10003E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E494(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA05;
    char v31 = v6;
    sub_100016EAC((uint64_t)&v30);
    sub_100016EAC((uint64_t)&v30);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        unint64_t v29 = v31;
        sub_100016EAC((uint64_t)&v30);
        LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
        char v31 = 0;
        sub_100016EAC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_100016EAC((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        unint64_t v29 = v16;
        sub_100016EAC(v14);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100019524(v10, (uint64_t)&v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30;
            *(void *)(v11 + 8) = v31;
            sub_100016EAC((uint64_t)&v30);
            LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
            char v31 = 0;
            sub_100016EAC(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_100016EAC((uint64_t)&v30);
              LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
              char v31 = 0;
              sub_100016EAC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_100016EAC((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              sub_100016EAC(v20);
              sub_100016EAC((uint64_t)v26);
              sub_100016B28(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    return v13;
  }
  return 0;
}

void sub_10003E7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E7DC(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_1000168C0((uint64_t)&v29, a2);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29;
        std::string v28 = v30;
        sub_100016EAC((uint64_t)&v29);
        LOBYTE(v29) = 0;
        unint64_t v30 = 0;
        sub_100016EAC((uint64_t)v27);
        uint64_t v13 = *a1;
        sub_100016EAC((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        char v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        std::string v28 = v15;
        sub_100016EAC(v13);
        sub_100016EAC((uint64_t)v27);
        sub_100016B28(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = sub_100019524(v9, (uint64_t)&v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29;
            *(void *)(v10 + 8) = v30;
            sub_100016EAC((uint64_t)&v29);
            LOBYTE(v29) = 0;
            unint64_t v30 = 0;
            sub_100016EAC(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29;
              uint64_t v26 = v30;
              sub_100016EAC((uint64_t)&v29);
              LOBYTE(v29) = 0;
              unint64_t v30 = 0;
              sub_100016EAC((uint64_t)v25);
              uint64_t v19 = a1[10];
              sub_100016EAC((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              char v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              uint64_t v26 = v21;
              sub_100016EAC(v19);
              sub_100016EAC((uint64_t)v25);
              sub_100016B28(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          uint64_t v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v29);
    sub_100016B28(&v30, v29);
    return v12;
  }
  return 0;
}

void sub_10003EAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EB0C(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_1000F96A0();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    unint64_t v30 = 0xAAAAAAAAAAAAAA06;
    char v31 = v6;
    sub_100016EAC((uint64_t)&v30);
    sub_100016EAC((uint64_t)&v30);
    if (a3 & 1) != 0 || (sub_10003CCA8((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5))
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30;
        unint64_t v29 = v31;
        sub_100016EAC((uint64_t)&v30);
        LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
        char v31 = 0;
        sub_100016EAC((uint64_t)v28);
        uint64_t v14 = *a1;
        sub_100016EAC((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        unint64_t v29 = v16;
        sub_100016EAC(v14);
        sub_100016EAC((uint64_t)v28);
        sub_100016B28(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = sub_100019524(v10, (uint64_t)&v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30;
            *(void *)(v11 + 8) = v31;
            sub_100016EAC((uint64_t)&v30);
            LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
            char v31 = 0;
            sub_100016EAC(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30;
              uint64_t v27 = v31;
              sub_100016EAC((uint64_t)&v30);
              LOBYTE(v3sub_100027DA4((uint64_t)&a9, 0) = 0;
              char v31 = 0;
              sub_100016EAC((uint64_t)v26);
              uint64_t v20 = a1[10];
              sub_100016EAC((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              uint64_t v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              uint64_t v27 = v22;
              sub_100016EAC(v20);
              sub_100016EAC((uint64_t)v26);
              sub_100016B28(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    sub_100016EAC((uint64_t)&v30);
    sub_100016B28(&v31, v30);
    return v13;
  }
  return 0;
}

void sub_10003EE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EE54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_1001520D8;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t sub_10003EED0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100152098;
  return a1;
}

uint64_t sub_10003EF40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_1001517C0;
  return a1;
}

uint64_t sub_10003EFB0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100151548;
  return a1;
}

uint64_t sub_10003F020(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100151508;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_100151FD8;
  return a1;
}

void sub_10003F090(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_100151508;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);

  operator delete();
}

void sub_10003F0F8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_10003F23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10003F2A8(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return off_100152100[a1];
  }
}

uint64_t sub_10003F2CC(uint64_t a1)
{
  sub_100016EAC(a1 + 136);
  sub_100016B28((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  sub_10000DE9C((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10003F334(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  unint64_t v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 4;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_10003F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003F458(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    unint64_t v10 = (uint64_t *)*a2;
    v21[0] = 5;
    uint64_t v22 = v10;
    sub_100016EAC((uint64_t)v21);
    sub_100016EAC((uint64_t)v21);
    uint64_t v11 = *a1;
    sub_100016EAC((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    uint64_t v22 = v13;
    sub_100016EAC(v11);
    sub_100016EAC((uint64_t)v21);
    sub_100016B28(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = sub_10003F640(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 5;
        *(void *)(v7 + 8) = v8;
        sub_100016EAC(v7);
        sub_100016EAC(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        sub_1000F9750();
      }
      if (!a1[4]) {
        sub_1000F977C();
      }
      char v15 = (uint64_t *)*a2;
      v19[0] = 5;
      uint64_t v20 = v15;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v19);
      uint64_t v16 = a1[4];
      sub_100016EAC((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      unint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      uint64_t v20 = v18;
      sub_100016EAC(v16);
      sub_100016EAC((uint64_t)v19);
      sub_100016B28(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t sub_10003F640(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  unint64_t v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v11;
  *((void *)&v17 + 1) = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 5;
  *(void *)(v11 + 8) = v13;
  sub_100016EAC(v11);
  sub_100016EAC(v11);
  *(void *)&long long v17 = v11 + 16;
  sub_1000171E8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100017390((uint64_t)&v16);
  return v14;
}

void sub_10003F750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_10003F764(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  if (a3)
  {
    uint64_t v10 = a1[2];
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = v10;
    unint64_t v11 = *(void *)(v8 - 8);
    if (a3 <= (uint64_t)(v10 - v11) >> 4)
    {
      uint64_t v19 = v11 - a2;
      uint64_t v20 = a3;
      if (a3 <= (uint64_t)(v11 - a2) >> 4) {
        goto LABEL_15;
      }
      uint64_t v21 = 0;
      uint64_t v20 = v19 >> 4;
      unint64_t v22 = v11 + 16 * (a3 - (v19 >> 4));
      uint64_t v23 = 16 * a3 - 16 * (v19 >> 4);
      do
      {
        sub_100016A10(v11 + v21, a4);
        v21 += 16;
      }
      while (v23 != v21);
      a1[1] = v22;
      if (v11 != v4)
      {
LABEL_15:
        sub_10003F9CC((uint64_t)a1, v4, v11, v4 + 16 * a3);
        if (v4 <= a4)
        {
          if (a1[1] <= a4) {
            unint64_t v24 = 0;
          }
          else {
            unint64_t v24 = a3;
          }
          a4 += 16 * v24;
        }
        uint64_t v25 = v4;
        do
        {
          sub_100016A10((uint64_t)&v32, a4);
          sub_100016EAC((uint64_t)&v32);
          char v26 = *(unsigned char *)v25;
          *(unsigned char *)uint64_t v25 = v32;
          LOBYTE(v32) = v26;
          uint64_t v27 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = *((void *)&v32 + 1);
          *((void *)&v32 + 1) = v27;
          sub_100016EAC(v25);
          sub_100016EAC((uint64_t)&v32);
          sub_100016B28((uint64_t **)&v32 + 1, v32);
          v25 += 16;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      long long v32 = 0u;
      long long v33 = 0u;
      unint64_t v13 = a3 + ((uint64_t)(v11 - v12) >> 4);
      if (v13 >> 60) {
        sub_100028DEC();
      }
      uint64_t v14 = (uint64_t)(a2 - v12) >> 4;
      uint64_t v15 = v9 - v12;
      uint64_t v16 = v15 >> 3;
      if (v15 >> 3 <= v13) {
        uint64_t v16 = v13;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v34 = v8;
      if (v17) {
        unint64_t v18 = (char *)sub_1000171B0(v8, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v28 = (uint64_t)&v18[16 * v14];
      *(void *)&long long v32 = v18;
      *((void *)&v32 + 1) = v28;
      *(void *)&long long v33 = v28;
      *((void *)&v33 + 1) = &v18[16 * v17];
      uint64_t v29 = 16 * a3;
      unint64_t v30 = v28 + 16 * a3;
      do
      {
        sub_100016A10(v28, a4);
        v28 += 16;
        v29 -= 16;
      }
      while (v29);
      *(void *)&long long v33 = v30;
      unint64_t v4 = sub_10003FAB4(a1, &v32, v4);
      sub_100017390((uint64_t)&v32);
    }
  }
  return v4;
}

void sub_10003F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003F9CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(unsigned char *)uint64_t v8 = *(unsigned char *)v10;
      *(void *)(v8 + 8) = *(void *)(v10 + 8);
      sub_100016EAC(v10);
      *(unsigned char *)unint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      sub_100016EAC(v8);
      v8 += 16;
      v10 += 16;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10003FB68((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_10003FAB4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100017260((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10003FC78(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10003FB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      v12[0] = *(unsigned char *)(a3 + v7 - 16);
      unint64_t v13 = *(uint64_t **)(a3 + v7 - 8);
      sub_100016EAC(a3 + v7 - 16);
      *(unsigned char *)(a3 + v7 - 16) = 0;
      *(void *)(a3 + v7 - 8) = 0;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v12);
      char v9 = *(unsigned char *)(a4 + v7 - 16);
      uint64_t v8 = a4 + v7 - 16;
      *(unsigned char *)uint64_t v8 = v12[0];
      v12[0] = v9;
      uint64_t v10 = *(uint64_t **)(a4 + v7 - 8);
      *(void *)(v8 + 8) = v13;
      unint64_t v13 = v10;
      sub_100016EAC(v8);
      sub_100016EAC((uint64_t)v12);
      sub_100016B28(&v13, v12[0]);
      v7 -= 16;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_10003FC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v10[0] = a1;
  v10[1] = &v8;
  _OWORD v10[2] = &v9;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(unsigned char *)uint64_t v4 = *(unsigned char *)v6;
      *(void *)(v4 + 8) = *(void *)(v6 + 8);
      sub_100016EAC(v6);
      *(unsigned char *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      sub_100016EAC(v4);
      uint64_t v4 = v9 + 16;
      v9 += 16;
      v6 += 16;
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  sub_100018480((uint64_t)v10);
  return v4;
}

unsigned __int8 *sub_10003FD50(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v25 = a3;
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (sub_100014470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
      a3 = v25;
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
  memset(v26, 170, sizeof(v26));
  sub_10004002C(a1, v8, a3, v26);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if ((((float)(v17 * (float)v9) >= v16) & ~(v9 == 0)) == 0)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_1000400E0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v26[0] = *v22;
    void *v22 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v23 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v6;
  return i;
}

void sub_100040004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **__p)
{
  if (__p) {
    sub_10004032C(v11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004002C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x28uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_100017424(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1000400C4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10004032C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1000400E0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1000401D0(a1, prime);
    }
  }
}

void sub_1000401D0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100028E94();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_10004032C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_10004038C(uint64_t a1)
{
  sub_1000403C8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000403C8(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100040414()
{
}

void sub_1000404BC()
{
}

uint64_t sub_1000404E8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  float v16 = dispatch_queue_create("analyticsd.TransformManagerQueue", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v16;
  if (v16)
  {
    float v17 = v16;
    dispatch_retain(v16);
    dispatch_release(v17);
  }
  *(void *)a1 = off_1001521D0;
  *(void *)(a1 + 32) = off_100152230;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = off_100152258;
  *(void *)(a1 + 48) = off_100152288;
  *(void *)(a1 + 56) = *a2;
  uint64_t v18 = a2[1];
  *(void *)(a1 + 64) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 88) = *a3;
  uint64_t v19 = a3[1];
  *(void *)(a1 + 96) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 104) = *a4;
  uint64_t v20 = a4[1];
  *(void *)(a1 + 112) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = *a5;
  uint64_t v21 = a5[1];
  *(void *)(a1 + 128) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 136) = *a6;
  uint64_t v22 = a6[1];
  *(void *)(a1 + 144) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 152) = *a7;
  uint64_t v23 = a7[1];
  *(void *)(a1 + 16sub_100027DA4((uint64_t)&a9, 0) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 168) = *a8;
  uint64_t v24 = a8[1];
  *(void *)(a1 + 176) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v25 = sub_1000B2DCC();
  v28[0] = off_1001523D0;
  v28[1] = sub_1000243D4;
  uint64_t v28[3] = v28;
  v27[0] = off_100152480;
  v27[1] = sub_100025B10;
  v27[3] = v27;
  sub_100042180(a1 + 184, v25, (uint64_t)v28, (uint64_t)v27);
  sub_1000420FC(v27);
  sub_100041FA0(v28);
  *(void *)(a1 + 40sub_100027DA4((uint64_t)&a9, 0) = std::chrono::system_clock::now().__d_.__rep_ + 60000000;
  *(_DWORD *)(a1 + 408) = 100000;
  return a1;
}

void sub_1000407C0(_Unwind_Exception *a1)
{
  sub_100042608(v3);
  unint64_t v5 = (std::__shared_weak_count *)v1[22];
  if (v5) {
    sub_1000147D8(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[20];
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[18];
  if (v7) {
    sub_1000147D8(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)v1[16];
  if (v8) {
    sub_1000147D8(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)v1[14];
  if (v9) {
    sub_1000147D8(v9);
  }
  uint8x8_t v10 = (std::__shared_weak_count *)v1[12];
  if (v10) {
    sub_1000147D8(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v1[10];
  if (v11) {
    sub_1000147D8(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)v1[8];
  if (v12) {
    sub_1000147D8(v12);
  }
  sub_10004085C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10004085C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_100040898(void *a1)
{
  *a1 = off_1001521D0;
  a1[4] = off_100152230;
  a1[5] = off_100152258;
  a1[6] = off_100152288;
  uint64_t v2 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[Transform Manager] Destructor called", v12, 2u);
  }
  sub_100040A3C(a1 + 23);
  sub_100042608(a1 + 23);
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_1000147D8(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)a1[20];
  if (v4) {
    sub_1000147D8(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[18];
  if (v5) {
    sub_1000147D8(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[14];
  if (v7) {
    sub_1000147D8(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)a1[12];
  if (v8) {
    sub_1000147D8(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9) {
    sub_1000147D8(v9);
  }
  uint8x8_t v10 = (std::__shared_weak_count *)a1[8];
  if (v10) {
    sub_1000147D8(v10);
  }
  sub_10004085C((uint64_t)(a1 + 1));
  return a1;
}

void sub_100040A30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100040A3C(void *a1)
{
  sub_100042694((uint64_t)(a1 + 22));
  while (a1[21])
  {
    sub_1000257A4(a1, *(void *)(a1[20] + 16));
    uint64_t v2 = (uint64_t *)a1[20];
    uint64_t v3 = a1[21];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = v2[1];
    *(void *)v2[1] = v4;
    a1[21] = v3 - 1;
    operator delete(v2);
  }
  a1[1] = 0;
}

void *sub_100040AA8(uint64_t a1)
{
  return sub_100040898((void *)(a1 - 32));
}

void *sub_100040AB0(uint64_t a1)
{
  return sub_100040898((void *)(a1 - 40));
}

void *sub_100040AB8(uint64_t a1)
{
  return sub_100040898((void *)(a1 - 48));
}

void sub_100040AC0(void *a1)
{
  sub_100040898(a1);

  operator delete();
}

void sub_100040AF8(uint64_t a1)
{
  sub_100040898((void *)(a1 - 32));

  operator delete();
}

void sub_100040B34(uint64_t a1)
{
  sub_100040898((void *)(a1 - 40));

  operator delete();
}

void sub_100040B70(uint64_t a1)
{
  sub_100040898((void *)(a1 - 48));

  operator delete();
}

void sub_100040BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, (void *)(a1 + 8));
  operator new();
}

void sub_100040CE8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100040CF8(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_100040E1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100040E2C(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  unint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_100040F50(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100040F60(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000449E8;
  void v5[3] = &unk_1001528F0;
  void v5[4] = v2;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100044CA8;
  block[3] = &unk_100152910;
  block[4] = a2;
  block[5] = &v6;
  dispatch_sync(v3, block);
}

uint64_t sub_100041058(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100044E10;
  void v6[3] = &unk_100152930;
  void v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000064E0;
  block[3] = &unk_100152950;
  block[4] = &v9;
  block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100041158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100044F44;
  void v6[3] = &unk_100152970;
  void v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000064E0;
  block[3] = &unk_100152950;
  block[4] = &v9;
  block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

void sub_100041258(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = a2;
  char v6 = a3;
  uint64_t v3 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v8;
  void v5[2] = &v6;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100045040;
  block[3] = &unk_100152990;
  block[4] = v3;
  block[5] = v5;
  dispatch_sync(v4, block);
}

void sub_100041314(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100045058;
  void v6[3] = &unk_1001529B0;
  void v6[4] = a1 + 8;
  v6[5] = v5;
  uint64_t v7 = v6;
  *a3 = 0xAAAAAAAAAAAAAA00;
  a3[1] = 0;
  sub_100016EAC((uint64_t)a3);
  sub_100016EAC((uint64_t)a3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000044F0;
  block[3] = &unk_1001529D0;
  block[4] = a3;
  block[5] = &v7;
  dispatch_sync(v4, block);
}

void sub_100041438(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  char v7 = a2;
  uint64_t v3 = a1 + 8;
  v6[0] = a1;
  v6[1] = &v7;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  void v8[2] = sub_100045BBC;
  void v8[3] = &unk_1001529F0;
  void v8[4] = v3;
  v8[5] = v6;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = v5;
  a3[2] = v5;
  *a3 = v5;
  unsigned __int8 v9 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100045BD0;
  block[3] = &unk_100152A10;
  block[4] = a3;
  block[5] = &v9;
  dispatch_sync(v4, block);
}

void sub_100041538(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100045C54;
  block[3] = &unk_100152A30;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_1000415E0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v4, (void *)(a1 + 8));
  operator new();
}

void sub_100041750(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100041760(uint64_t a1, uint64_t a2)
{
}

void sub_100041768(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100045E00;
  block[3] = &unk_100152A50;
  block[4] = v1;
  block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_100041810(uint64_t a1)
{
}

uint64_t sub_100041818(uint64_t a1)
{
  uint64_t v2 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Transform Manager] re-enabling all budgeted transform", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 144))(*(void *)(a1 + 88));
}

uint64_t sub_1000418DC(uint64_t a1, uint64_t a2, int a3)
{
  char v6 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Transform Manager] cleanup expired transform state", v11, 2u);
    char v6 = qword_10015EF48;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Transform Manager] purging all in-memory transforms", v11, 2u);
  }
  sub_100040A3C((void *)(a1 + 184));
  char v7 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Transform Manager] removing expired, persisted transform state", v11, 2u);
  }
  uint64_t v8 = **(void (****)(void))(a1 + 104);
  if ((a2 & 0xFF00000000) != 0)
  {
    v8[18]();
  }
  else if (a3)
  {
    v8[16]();
  }
  else
  {
    v8[17]();
  }
  unsigned __int8 v9 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[Transform Manager] resetting all budget usage", v11, 2u);
  }
  return sub_100041818(a1);
}

uint64_t sub_100041AC8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  memset((void *)(a3 + 24), 170, 24);
  *(int32x2_t *)a3 = vrev64_s32(*(int32x2_t *)(a1 + 16));
  *(int8x16_t *)(a3 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  uint64_t result = sub_1000274E0(a1);
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = v7;
  *(_DWORD *)(a3 + 4sub_100027DA4((uint64_t)&a9, 0) = *(_DWORD *)(a1 + 24);
  if (a2)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_100041B3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + 336;
  uint64_t v5 = *(void *)(result + 344);
  if (v5 == result + 336)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t result = sub_100026820(*(void *)(v7 + 56));
    uint64_t v8 = *(unsigned __int8 *)(result + 23);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *(unsigned __int8 *)(result + 23);
    }
    else {
      uint64_t v9 = *(void *)(result + 8);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v9 != v10) {
      goto LABEL_17;
    }
    unint64_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)result == *v12)
    {
      ++result;
      ++v12;
      if (!--v8) {
        goto LABEL_19;
      }
    }
LABEL_17:
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_18;
    }
  }
  uint64_t result = memcmp(*(const void **)result, v12, *(void *)(result + 8));
  if (result) {
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v13 = *(void *)(v7 + 64);
  *a3 = *(void *)(v7 + 56);
  a3[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100041C2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + 336;
  uint64_t v5 = *(void *)(result + 344);
  if (v5 == result + 336)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t result = sub_100024914(*(void *)(v7 + 56));
    uint64_t v8 = *(unsigned __int8 *)(result + 23);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *(unsigned __int8 *)(result + 23);
    }
    else {
      uint64_t v9 = *(void *)(result + 8);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v9 != v10) {
      goto LABEL_17;
    }
    unint64_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)result == *v12)
    {
      ++result;
      ++v12;
      if (!--v8) {
        goto LABEL_19;
      }
    }
LABEL_17:
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_18;
    }
  }
  uint64_t result = memcmp(*(const void **)result, v12, *(void *)(result + 8));
  if (result) {
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v13 = *(void *)(v7 + 64);
  *a3 = *(void *)(v7 + 56);
  a3[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

dispatch_group_t sub_100041D1C@<X0>(dispatch_group_t *a1@<X8>)
{
  dispatch_group_t result = dispatch_group_create();
  *a1 = result;
  return result;
}

void sub_100041D44(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100041DC4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100041E9C);
  __cxa_rethrow();
}

void sub_100041DEC(_Unwind_Exception *a1)
{
}

void sub_100041E04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100041E3C(uint64_t a1)
{
}

uint64_t sub_100041E58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100041E9C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100041ECC()
{
}

void *sub_100041EE0(uint64_t a1)
{
  dispatch_group_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *dispatch_group_t result = off_1001523D0;
  result[1] = v3;
  return result;
}

uint64_t sub_100041F28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001523D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100041F54(uint64_t a1, uint64_t a2)
{
  if (sub_10002AA08(a2, (uint64_t)&off_100152450)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100041F94()
{
  return &off_100152450;
}

void *sub_100041FA0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100042028()
{
}

void *sub_10004203C(uint64_t a1)
{
  dispatch_group_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *dispatch_group_t result = off_100152480;
  result[1] = v3;
  return result;
}

uint64_t sub_100042084(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100152480;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000420B0(uint64_t a1, uint64_t a2)
{
  if (sub_10002AA08(a2, (uint64_t)&off_100152500)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000420F0()
{
  return &off_100152500;
}

void *sub_1000420FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100042180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 24) = 0;
  sub_100042298(a1 + 32, a4);
  sub_100042318(a1 + 64, a3);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = xmmword_100117E10;
  *(_OWORD *)(a1 + 136) = xmmword_100117E20;
  *(void *)(a1 + 152) = a1 + 152;
  *(void *)(a1 + 16sub_100027DA4((uint64_t)&a9, 0) = a1 + 152;
  *(_OWORD *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(void *)(a1 + 192) = a1 + 184;
  *(void *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = a1 + 184;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  if (!a2) {
    __assert_rtn("LruCache", "LruCache.h", 115, "nodeCapacity > 0");
  }
  return a1;
}

void sub_100042258(_Unwind_Exception *a1)
{
  if (*(void *)v5) {
    sub_1000F9878(*(void **)v5);
  }
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_100042398(v4);
  sub_1000423FC(v3);
  sub_100041FA0(v2);
  sub_1000420FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_100042318(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100042398(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    dispatch_group_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    void v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        dispatch_group_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t *sub_1000423FC(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = a1[3];
    if (v3 <= 8) {
      unint64_t v3 = 8;
    }
    unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = a1[2];
      if (v2 != v2 + v6 - 16)
      {
        uint64_t v7 = 0;
        uint64_t v8 = v6 - 16;
        do
        {
          uint64_t v9 = (uint64_t *)(v2 + v7);
          if (v2 + v7 == v5)
          {
            uint64_t v5 = *v9;
          }
          else
          {
            uint64_t v10 = (std::__shared_weak_count *)v9[8];
            if (v10) {
              sub_1000147D8(v10);
            }
            if (*(char *)(v2 + v7 + 55) < 0) {
              operator delete(*(void **)(v2 + v7 + 32));
            }
            if (*v9) {
              __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
            }
          }
          v7 += v4;
        }
        while (v8 != v7);
      }
      operator delete[]();
    }
    __assert_rtn("alloc_size", "pool.hpp", 353, "s >= min_alloc_size");
  }
  sub_100042598((uint64_t)a1);
  return a1;
}

void *sub_100042554(void *result)
{
  if (*result) {
    __assert_rtn("destructor_impl", "generic_hook.hpp", 48, "!hook.is_linked()");
  }
  return result;
}

uint64_t sub_100042598(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator delete[]();
  }
  return 0;
}

void *sub_100042608(void *a1)
{
  sub_100040A3C(a1);
  uint64_t v2 = (void *)a1[23];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)v2[1];
      if (v3)
      {
        v2[1] = v3[2];
        void v3[2] = v2;
      }
      else
      {
        unint64_t v3 = (void *)v2[2];
        *uint64_t v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      uint64_t v2 = v3;
    }
    while (v3);
  }
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  sub_100042398(a1 + 19);
  sub_1000423FC(a1 + 12);
  sub_100041FA0(a1 + 8);
  sub_1000420FC(a1 + 4);
  return a1;
}

uint64_t sub_100042694(uint64_t result)
{
  uint64_t v1 = result + 8;
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)v2[1];
      if (v3)
      {
        v2[1] = v3[2];
        void v3[2] = v2;
      }
      else
      {
        unint64_t v3 = (void *)v2[2];
        *uint64_t v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  *(void *)dispatch_group_t result = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t *sub_1000426DC(void **a1)
{
  uint64_t v1 = *a1;
  long long v32 = a1;
  long long v33 = v1;
  uint64_t v2 = (void *)*v1;
  unint64_t v3 = operator new(0x80uLL);
  v3[1] = 0;
  void v3[2] = 0;
  *unint64_t v3 = off_100152530;
  unint64_t v4 = (char *)(v3 + 3);
  void v3[3] = off_100152580;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)v2[10];
  v2[9] = v3 + 3;
  v2[10] = v3;
  if (v5)
  {
    sub_1000147D8(v5);
    unint64_t v4 = (char *)v2[9];
  }
  uint64_t v7 = v1[1];
  uint64_t v6 = v1[2];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 2);
  *((void *)v4 + 1) = v7;
  *((void *)v4 + 2) = v6;
  if (v8) {
    sub_1000147D8(v8);
  }
  uint64_t v9 = v2[9];
  uint64_t v11 = v2[21];
  uint64_t v10 = v2[22];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(v9 + 32);
  *(void *)(v9 + 24) = v11;
  *(void *)(v9 + 32) = v10;
  if (v12) {
    sub_1000147D8(v12);
  }
  sub_10000FB4C(&v34, v2 + 1);
  uint64_t v13 = v2[9];
  uint64_t v14 = *((void *)&v34 + 1);
  if ((void)v34) {
    uint64_t v15 = v34 + 32;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v34 = 0uLL;
  float v16 = *(std::__shared_weak_count **)(v13 + 48);
  *(void *)(v13 + 4sub_100027DA4((uint64_t)&a9, 0) = v15;
  *(void *)(v13 + 48) = v14;
  if (v16)
  {
    sub_1000147D8(v16);
    if (*((void *)&v34 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
  sub_10000FB4C(&v34, v2 + 1);
  uint64_t v17 = v2[9];
  uint64_t v18 = *((void *)&v34 + 1);
  if ((void)v34) {
    uint64_t v19 = v34 + 40;
  }
  else {
    uint64_t v19 = 0;
  }
  long long v34 = 0uLL;
  uint64_t v20 = *(std::__shared_weak_count **)(v17 + 64);
  *(void *)(v17 + 56) = v19;
  *(void *)(v17 + 64) = v18;
  if (v20)
  {
    sub_1000147D8(v20);
    if (*((void *)&v34 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
  uint64_t v21 = v2[9];
  uint64_t v23 = v2[13];
  uint64_t v22 = v2[14];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v21 + 80);
  *(void *)(v21 + 72) = v23;
  *(void *)(v21 + 8sub_100027DA4((uint64_t)&a9, 0) = v22;
  if (v24) {
    sub_1000147D8(v24);
  }
  uint64_t v25 = v2[9];
  uint64_t v27 = v2[19];
  uint64_t v26 = v2[20];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v25 + 96);
  *(void *)(v25 + 88) = v27;
  *(void *)(v25 + 96) = v26;
  if (v28) {
    sub_1000147D8(v28);
  }
  uint64_t v29 = v2[7];
  uint64_t v30 = v2[10];
  *(void *)&long long v34 = v2[9];
  *((void *)&v34 + 1) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10002B294(v29, &v34);
  if (*((void *)&v34 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v34 + 1));
  }
  sub_100042938((uint64_t *)&v33);
  return sub_100024E7C((uint64_t *)&v32);
}

void sub_100042908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000147D8(a13);
  }
  sub_100042938(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100042938(uint64_t *result)
{
  uint64_t v1 = *result;
  *dispatch_group_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_1000147D8(v2);
    }
    operator delete();
  }
  return result;
}

void sub_10004298C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100152530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000429AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100152530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100042A00(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100042A2C(void *a1)
{
  sub_100042A64(a1);

  operator delete();
}

void *sub_100042A64(void *a1)
{
  *a1 = off_100152580;
  uint64_t v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_1000147D8(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_1000147D8(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_1000147D8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5) {
    sub_1000147D8(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7) {
    sub_1000147D8(v7);
  }
  return a1;
}

void sub_100042AEC(uint64_t **a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  unint64_t v3 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Transform Manager] Pre-configuration activation: inserting new aggregation sessions", buf, 2u);
  }
  (*(void (**)(void))(**(void **)(v2 + 120) + 72))(*(void *)(v2 + 120));
  unint64_t v4 = v1[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v1[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete();
}

uint64_t *sub_100042BF8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = qword_10015EF58;
  if (*(void *)(*(void *)v1 + 88))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Transform Manager] Pre-reconfiguration: Clearing transform cache before configuration conditions change", buf, 2u);
    }
    sub_100040A3C((void *)(v2 + 184));
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR))
  {
    sub_1000F98A8(v3);
  }
  sub_100042CF8(&v6);
  return sub_100024E7C((uint64_t *)&v5);
}

void sub_100042CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t *sub_100042CF8(uint64_t *result)
{
  uint64_t v1 = *result;
  *dispatch_group_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(v1 + 8);
    if (v2)
    {
      dispatch_group_leave(v2);
      unint64_t v3 = *(NSObject **)(v1 + 8);
      if (v3) {
        dispatch_release(v3);
      }
    }
    operator delete();
  }
  return result;
}

void sub_100042D5C()
{
}

__n128 sub_100042D70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1001525D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100042DBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001525D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100042DE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100042E28()
{
}

void sub_100042E38()
{
}

void *sub_100042E4C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100152660;
  result[1] = v3;
  return result;
}

uint64_t sub_100042E94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100152660;
  a2[1] = v2;
  return result;
}

uint64_t sub_100042EBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100042EFC()
{
}

void sub_100042F0C()
{
}

__n128 sub_100042F20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1001526E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100042F74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001526E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100042FA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100042FE8()
{
}

void sub_100042FF8()
{
}

__n128 sub_10004300C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_100152770;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4sub_100027DA4((uint64_t)&a9, 0) = result;
  return result;
}

__n128 sub_100043068(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100152770;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000430A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000430E4()
{
}

uint64_t sub_100043554(uint64_t a1, uint64_t *a2)
{
  int64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v4 = (long long *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        sub_10003DE0C(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        sub_10003E154(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        sub_10003E7DC(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_10003EB0C(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_10003E494(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          sub_10003DAC0(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v39);
        sub_100043F08(v5, &v33);
        uint64_t v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        char v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned __int8 v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        sub_10003CADC(406, (uint64_t)v35, &v37);
        uint64_t v17 = sub_10003B420((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        sub_10003CC54(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!sub_10003C6EC(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_56;
        }
        int v6 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_10003C980(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        sub_1000181AC((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((sub_10003C0C4(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_56;
        }
        int v8 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!sub_10003C56C(a2, v4)) {
            goto LABEL_56;
          }
          int v16 = sub_1000162FC(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          sub_1000181AC((uint64_t)&v40, &v37);
          int v15 = sub_1000162FC(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = sub_10003C358(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = sub_1000162FC(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              sub_100043F08(v5, &v39);
              *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              sub_100015438(&v33, "array");
              sub_100043FEC(a1, 0xAu, (uint64_t)&v33, &__p);
              sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
              uint64_t v23 = sub_10003B420((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!sub_10003C980(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            sub_100043F08(v5, &v39);
            *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            sub_100015438(&v33, "object");
            sub_100043FEC(a1, 0xBu, (uint64_t)&v33, &__p);
            sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
            uint64_t v23 = sub_10003B420((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!sub_10003C358(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          sub_100043F08(v5, &v39);
          *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          sub_100015438(&v33, "object key");
          sub_100043FEC(a1, 4u, (uint64_t)&v33, &__p);
          sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
          uint64_t v23 = sub_10003B420((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!sub_10003C56C(a2, v4)) {
          goto LABEL_56;
        }
        int v14 = sub_1000162FC(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = sub_1000162FC(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "object separator");
        sub_100043FEC(a1, 0xCu, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v23 = sub_10003B420((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        sub_10003BD98(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "value");
        sub_100043FEC(a1, 0, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        sub_100043F08(v5, &v39);
        *(_OWORD *)unsigned __int8 v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        sub_100015438(&v33, "value");
        sub_100043FEC(a1, 0x10u, (uint64_t)&v33, &__p);
        sub_10003B680(101, (uint64_t *)v35, (uint64_t)&__p, &v37);
        uint64_t v20 = sub_10003B420((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::runtime_error_vtbl *)off_100151508;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_100043D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30)
{
  sub_10003BD98(&a30);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  long long v32 = *(void **)(v30 - 96);
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_100043F08(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  long long v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)std::string __str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_100043FCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100043FEC(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(a4, 170, sizeof(std::string));
  sub_100015438(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    sub_100015438(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_100043F08(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v25 = (char *)sub_10003F2A8(v13);
  sub_100015438(&v38, v25);
  uint64_t v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    uint64_t v28 = (const std::string::value_type *)&v39;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  uint64_t v30 = (char *)sub_10003F2A8(a2);
  sub_100015438(&v38, v30);
  char v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_100044350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_100044468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000444C0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1000444C0(uint64_t a1)
{
  sub_100016EAC(a1 + 24);
  sub_100016B28((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100044520()
{
}

void *sub_100044534()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001527F0;
  return result;
}

void sub_10004456C(uint64_t a1, void *a2)
{
  *a2 = off_1001527F0;
}

uint64_t sub_100044590(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000445D0()
{
}

uint64_t *sub_1000445DC(uint64_t a1, uint64_t a2)
{
  unsigned int v13 = (uint64_t *)(a1 + 184);
  uint64_t v14 = a1 + 184;
  __n128 result = sub_10002188C(&v13, (const void **)(a2 + 32), (const void **)(a2 + 32), (uint64_t)&v14, 1, 1);
  int v6 = v5;
  if (result != v5)
  {
    char v7 = (void *)(a1 + 176);
    do
    {
      uint64_t v8 = result[2];
      uint64_t v9 = result;
      if (v8)
      {
        do
        {
          long long v10 = (uint64_t *)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
        if (!result) {
          goto LABEL_16;
        }
      }
      else
      {
        do
        {
          uint64_t v11 = v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v11 == (uint64_t *)v9[2]);
        if ((uint64_t *)v11[2] == v9) {
          long long v10 = v11;
        }
        else {
          long long v10 = v9;
        }
        if (!result) {
LABEL_16:
        }
          sub_1000F9970();
      }
      if (result == (uint64_t *)a2)
      {
        uint64_t v12 = a2;
        sub_100025834(v7, &v12, &v14);
      }
      __n128 result = v10;
    }
    while (v10 != v6);
  }
  return result;
}

void sub_1000446EC()
{
}

void *sub_100044700(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100152870;
  result[1] = v3;
  return result;
}

uint64_t sub_100044748(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100152870;
  a2[1] = v2;
  return result;
}

uint64_t sub_100044770(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000447B0()
{
}

void *sub_1000447BC(void **a1)
{
  unint64_t v1 = (unint64_t)a1[3];
  uint64_t v2 = 8;
  if (v1 > 8) {
    uint64_t v2 = (uint64_t)a1[3];
  }
  unint64_t v3 = (v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v3) {
    sub_1000F9A4C();
  }
  unint64_t v5 = (unint64_t)a1[4];
  size_t v6 = v5 * v3 + 16;
  __n128 result = operator new[](v6, &std::nothrow);
  if (result) {
    goto LABEL_5;
  }
  if (v5 < 5) {
    return 0;
  }
  v5 >>= 1;
  a1[4] = (void *)v5;
  size_t v6 = v5 * v3 + 16;
  __n128 result = operator new[](v6, &std::nothrow);
  if (result)
  {
LABEL_5:
    uint64_t v8 = result;
    unint64_t v9 = (unint64_t)a1[6];
    if (v9)
    {
      if (v5 * v3 / v1 >= v9) {
        goto LABEL_15;
      }
      unint64_t v10 = v9 * v1 / v3;
      if (v10 >= 2 * v5) {
        unint64_t v10 = 2 * v5;
      }
    }
    else
    {
      unint64_t v10 = 2 * v5;
    }
    a1[4] = (void *)v10;
LABEL_15:
    sub_10004492C(a1, result, v6 - 16, v3);
    uint64_t v12 = (char *)(a1 + 1);
    uint64_t v11 = a1[1];
    if (v11 && v11 <= v8)
    {
      unsigned int v13 = (size_t *)(a1 + 2);
      do
      {
        uint64_t v14 = (char *)v11 + *v13;
        uint64_t v11 = (void *)*((void *)v14 - 2);
        unsigned int v13 = (size_t *)(v14 - 8);
        if (v11) {
          BOOL v15 = v11 > v8;
        }
        else {
          BOOL v15 = 1;
        }
      }
      while (!v15);
      uint64_t v12 = v14 - 16;
      int v16 = (void *)*((void *)v14 - 1);
      *(void *)((char *)v8 + v6 - 16) = v11;
    }
    else
    {
      *(void *)((char *)v8 + v6 - 16) = v11;
      unsigned int v13 = (size_t *)(a1 + 2);
      int v16 = a1[2];
    }
    *(void *)((char *)v8 + v6 - 8) = v16;
    *(void *)uint64_t v12 = v8;
    *unsigned int v13 = v6;
    __n128 result = *a1;
    *a1 = (void *)**a1;
  }
  return result;
}

void **sub_10004492C(void **result, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = *result;
  if (*result) {
    BOOL v5 = v4 > a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    size_t v6 = (void *)((char *)a2 + (a3 - a4) / a4 * a4);
    *size_t v6 = v4;
    if (a3 - a4 != (a3 - a4) % a4)
    {
      for (uint64_t i = (void *)((char *)v6 - a4); i != a2; uint64_t i = (void *)((char *)i - a4))
      {
        *(void *)((char *)v6 - a4) = v6;
        size_t v6 = i;
      }
      goto LABEL_18;
    }
  }
  else
  {
    do
    {
      __n128 result = (void **)v4;
      unint64_t v4 = (void *)*v4;
      if (v4) {
        BOOL v8 = v4 > a2;
      }
      else {
        BOOL v8 = 1;
      }
    }
    while (!v8);
    size_t v6 = (void *)((char *)a2 + (a3 - a4) / a4 * a4);
    *size_t v6 = v4;
    if (a3 - a4 != (a3 - a4) % a4)
    {
      for (uint64_t j = (void *)((char *)v6 - a4); j != a2; uint64_t j = (void *)((char *)j - a4))
      {
        *(void *)((char *)v6 - a4) = v6;
        size_t v6 = j;
      }
LABEL_18:
      *a2 = v6;
    }
  }
  *__n128 result = a2;
  return result;
}

void sub_1000449E8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  a2[2] = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = v3 + 336;
  uint64_t v5 = *(void *)(v3 + 344);
  if (v5 != v3 + 336)
  {
    do
    {
      uint64_t v6 = *(void *)(v5 + 16);
      uint64_t v7 = sub_100024914(*(void *)(v6 + 56));
      BOOL v8 = (char *)v7;
      if (*(char *)(v7 + 23) >= 0) {
        size_t v9 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        size_t v9 = *(void *)(v7 + 8);
      }
      memset(&v30, 170, sizeof(v30));
      sub_100044D88((uint64_t)&v30, v9 + 3);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v10 = &v30;
      }
      else {
        unint64_t v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if (v9)
      {
        if (v8[23] >= 0) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = *(char **)v8;
        }
        memmove(v10, v11, v9);
      }
      *(_DWORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 2108704;
      uint64_t v12 = sub_100026820(*(void *)(v6 + 56));
      int v13 = *(char *)(v12 + 23);
      if (v13 >= 0) {
        uint64_t v14 = (const std::string::value_type *)v12;
      }
      else {
        uint64_t v14 = *(const std::string::value_type **)v12;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v12 + 8);
      }
      int v16 = std::string::append(&v30, v14, v15);
      std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
      v32[0] = v16->__r_.__value_.__l.__size_;
      *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      unint64_t v19 = a2[1];
      unint64_t v20 = a2[2];
      if (v19 >= v20)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a2) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100028DEC();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a2) >> 3);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v24;
        }
        v31[4] = a2 + 2;
        if (v26) {
          long long v27 = (char *)sub_10002AC98((uint64_t)(a2 + 2), v26);
        }
        else {
          long long v27 = 0;
        }
        uint64_t v28 = &v27[24 * v23];
        v31[0] = v27;
        v31[1] = v28;
        v31[3] = &v27[24 * v26];
        uint64_t v29 = v32[0];
        *(void *)uint64_t v28 = v17;
        *((void *)v28 + 1) = v29;
        *(void *)(v28 + 15) = *(void *)((char *)v32 + 7);
        v28[23] = v18;
        void v31[2] = v28 + 24;
        sub_10002AC20(a2, v31);
        uint64_t v22 = a2[1];
        sub_10002AE30((uint64_t)v31);
      }
      else
      {
        uint64_t v21 = v32[0];
        *(void *)unint64_t v19 = v17;
        *(void *)(v19 + 8) = v21;
        *(void *)(v19 + 15) = *(void *)((char *)v32 + 7);
        *(unsigned char *)(v19 + 23) = v18;
        uint64_t v22 = v19 + 24;
        a2[1] = v19 + 24;
      }
      a2[1] = v22;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_100044C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v17 < 0) {
    operator delete(v16);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10002A71C((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100044CA8(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_100044D4C(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  sub_10002A71C(&v5);
}

void sub_100044D4C(uint64_t *a1)
{
  if (*a1)
  {
    sub_10002A770(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100044D88(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001C950();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_100044E10(uint64_t a1)
{
  unint64_t v1 = *(uint64_t **)(a1 + 40);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = *v1;
  sub_100041B3C(*v1, v1[1], &v13);
  uint64_t v3 = v13;
  if (!v13)
  {
    sub_100041C2C(v2, v1[1], &v11);
    uint64_t v3 = (uint64_t)v11;
    uint64_t v4 = v12;
    uint64_t v5 = (std::__shared_weak_count *)v14;
    unint64_t v14 = (unint64_t)v12;
    if (v5) {
      sub_1000147D8(v5);
    }
    if (!v3)
    {
      uint64_t v9 = 0;
      if (!v4) {
        return v9;
      }
      goto LABEL_9;
    }
  }
  sub_1000A6930(v3, (uint64_t *)&v11);
  uint64_t v6 = v11;
  uint64_t v7 = (const void **)&v12->__vftable;
  if (v11 != (const void **)v12)
  {
    uint64_t v8 = v2 + 184;
    do
    {
      sub_1000260F8(v8, v6);
      v6 += 3;
    }
    while (v6 != v7);
  }
  std::string::size_type v15 = &v11;
  sub_10002A71C((void ***)&v15);
  uint64_t v9 = 1;
  uint64_t v4 = (std::__shared_weak_count *)v14;
  if (v14) {
LABEL_9:
  }
    sub_1000147D8(v4);
  return v9;
}

void sub_100044F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15)
{
  a15 = (void **)&a10;
  sub_10002A71C(&a15);
  if (a14) {
    sub_1000147D8(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100044F44(uint64_t a1)
{
  unint64_t v1 = *(uint64_t **)(a1 + 40);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = *v1;
  sub_100041B3C(*v1, v1[1], &v9);
  uint64_t v3 = v9;
  if (v9) {
    goto LABEL_5;
  }
  sub_100041C2C(v2, v1[1], &v7);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  uint64_t v5 = (std::__shared_weak_count *)v10;
  unint64_t v10 = (unint64_t)v8;
  if (v5) {
    sub_1000147D8(v5);
  }
  if (v3)
  {
LABEL_5:
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    uint64_t v4 = (std::__shared_weak_count *)v10;
  }
  if (v4) {
    sub_1000147D8(v4);
  }
  return v3;
}

void sub_100045028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000147D8(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100045040(uint64_t a1)
{
  return sub_1000418DC(**(void **)(a1 + 40), **(void **)(*(void *)(a1 + 40) + 8), **(unsigned __int8 **)(*(void *)(a1 + 40) + 16));
}

void sub_100045058(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *v3;
  sub_100041B3C(*v3, v3[1], &v24);
  uint64_t v5 = v24;
  if (!(void)v24)
  {
    sub_100041C2C(v4, v3[1], &v70);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    uint64_t v7 = v70;
    long long v24 = v70;
    if (v6)
    {
      uint64_t v21 = v70;
      sub_1000147D8(v6);
      uint64_t v7 = v21;
    }
    uint64_t v5 = v7;
  }
  *a2 = 0xAAAAAAAAAAAAAA00;
  a2[1] = 0;
  sub_100016EAC((uint64_t)a2);
  sub_100016EAC((uint64_t)a2);
  if (v5)
  {
    uint64_t v8 = sub_100026820(v5);
    uint64_t v9 = sub_100024914(v5);
    sub_10004595C((uint64_t)v61, "Name");
    unsigned __int8 v62 = v61;
    char v63 = 1;
    uint64_t v65 = sub_1000168C0((uint64_t)v64, v8);
    char v66 = 1;
    sub_10001200C((uint64_t)v67, (uint64_t)v61, 2, 1, 2);
    v68[1] = (uint64_t *)v67;
    char v69 = 1;
    sub_10001200C((uint64_t)&v70, (uint64_t)v67, 1, 1, 2);
    long long v71 = &v70;
    char v72 = 1;
    sub_10004595C((uint64_t)v52, "uuid");
    uint64_t v53 = v52;
    char v54 = 1;
    uint64_t v56 = sub_1000168C0((uint64_t)v55, v9);
    char v57 = 1;
    sub_10001200C((uint64_t)v58, (uint64_t)v52, 2, 1, 2);
    v59[1] = (uint64_t *)v58;
    char v60 = 1;
    sub_10001200C((uint64_t)v73, (uint64_t)v58, 1, 1, 2);
    v73[2] = v73;
    char v74 = 1;
    sub_1000459F4((uint64_t)v43, "Enabled");
    uint64_t v44 = v43;
    char v45 = 1;
    unsigned int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 88) + 120))(*(void *)(v4 + 88), v9);
    v46[0] = 4;
    v47[0] = v10;
    sub_100016EAC((uint64_t)v46);
    sub_100016EAC((uint64_t)v46);
    v47[1] = v46;
    char v48 = 1;
    sub_10001200C((uint64_t)v49, (uint64_t)v43, 2, 1, 2);
    v50[1] = (uint64_t *)v49;
    char v51 = 1;
    sub_10001200C((uint64_t)v75, (uint64_t)v49, 1, 1, 2);
    v75[2] = v75;
    char v76 = 1;
    sub_100045A8C((uint64_t)v34, "Budget (bytes)");
    unsigned __int8 v35 = v34;
    char v36 = 1;
    unsigned int v11 = sub_1000A5500(v5);
    v37[0] = 6;
    v38[0] = v11;
    sub_100016EAC((uint64_t)v37);
    sub_100016EAC((uint64_t)v37);
    v38[1] = v37;
    char v39 = 1;
    sub_10001200C((uint64_t)v40, (uint64_t)v34, 2, 1, 2);
    v41[1] = (uint64_t *)v40;
    char v42 = 1;
    sub_10001200C((uint64_t)v77, (uint64_t)v40, 1, 1, 2);
    v77[2] = v77;
    char v78 = 1;
    sub_100045B24((uint64_t)v25, "Budget Usage (bytes)");
    unint64_t v26 = v25;
    char v27 = 1;
    unsigned int v12 = sub_1000A54E8(v5);
    v28[0] = 6;
    v29[0] = v12;
    sub_100016EAC((uint64_t)v28);
    sub_100016EAC((uint64_t)v28);
    v29[1] = v28;
    char v30 = 1;
    sub_10001200C((uint64_t)v31, (uint64_t)v25, 2, 1, 2);
    v32[1] = (uint64_t *)v31;
    char v33 = 1;
    sub_10001200C((uint64_t)v79, (uint64_t)v31, 1, 1, 2);
    v80 = v79;
    char v81 = 1;
    sub_10001200C((uint64_t)v22, (uint64_t)&v70, 5, 1, 2);
    sub_100016EAC((uint64_t)v22);
    unsigned __int8 v13 = *(unsigned char *)a2;
    *(unsigned char *)a2 = v22[0];
    v22[0] = v13;
    unint64_t v14 = (uint64_t *)a2[1];
    a2[1] = v23;
    unint64_t v23 = v14;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)v22);
    sub_100016B28(&v23, v22[0]);
    for (uint64_t i = 0; i != -160; i -= 32)
    {
      sub_100016EAC((uint64_t)&v79[i]);
      sub_100016B28((uint64_t **)&v79[i + 8], v79[i]);
    }
    sub_100016EAC((uint64_t)v31);
    sub_100016B28(v32, v31[0]);
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      sub_100016EAC((uint64_t)&v28[j * 8]);
      sub_100016B28((uint64_t **)&v29[j], v28[j * 8]);
    }
    sub_100016EAC((uint64_t)v40);
    sub_100016B28(v41, v40[0]);
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      sub_100016EAC((uint64_t)&v37[k * 8]);
      sub_100016B28((uint64_t **)&v38[k], v37[k * 8]);
    }
    sub_100016EAC((uint64_t)v49);
    sub_100016B28(v50, v49[0]);
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      sub_100016EAC((uint64_t)&v46[m * 8]);
      sub_100016B28((uint64_t **)&v47[m], v46[m * 8]);
    }
    sub_100016EAC((uint64_t)v58);
    sub_100016B28(v59, v58[0]);
    for (uint64_t n = 0; n != -64; n -= 32)
    {
      sub_100016EAC((uint64_t)&v55[n]);
      sub_100016B28((uint64_t **)&v55[n + 8], v55[n]);
    }
    sub_100016EAC((uint64_t)v67);
    sub_100016B28(v68, v67[0]);
    for (iuint64_t i = 0; ii != -64; ii -= 32)
    {
      sub_100016EAC((uint64_t)&v64[ii]);
      sub_100016B28((uint64_t **)&v64[ii + 8], v64[ii]);
    }
  }
  if (*((void *)&v24 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_100045668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 a35,uint64_t *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned __int8 a47,uint64_t *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,unsigned __int8 a59,uint64_t *a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_1000F9A78(v74 + 160, v75 - 256);
  sub_100016EAC((uint64_t)&a23);
  sub_100016B28(&a24, a23);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    sub_100016EAC((uint64_t)(&a15 + i + 32));
    sub_100016B28((uint64_t **)(&a15 + i + 40), *(&a15 + i + 32));
  }
  sub_100016EAC((uint64_t)&a35);
  sub_100016B28(&a36, a35);
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    sub_100016EAC((uint64_t)(&a27 + j + 32));
    sub_100016B28((uint64_t **)(&a27 + j + 40), *(&a27 + j + 32));
  }
  sub_100016EAC((uint64_t)&a47);
  sub_100016B28(&a48, a47);
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    sub_100016EAC((uint64_t)(&a39 + k + 32));
    sub_100016B28((uint64_t **)(&a39 + k + 40), *(&a39 + k + 32));
  }
  sub_100016EAC((uint64_t)&a59);
  sub_100016B28(&a60, a59);
  for (uint64_t m = 0; m != -64; m -= 32)
  {
    sub_100016EAC((uint64_t)(&a51 + m + 32));
    sub_100016B28((uint64_t **)(&a51 + m + 40), *(&a51 + m + 32));
  }
  sub_100016EAC((uint64_t)&a71);
  sub_100016B28(&a72, a71);
  for (uint64_t n = 0; n != -64; n -= 32)
  {
    sub_100016EAC((uint64_t)(&a63 + n + 32));
    sub_100016B28((uint64_t **)(&a63 + n + 40), *(&a63 + n + 32));
  }
  sub_100016EAC((uint64_t)v72);
  sub_100016B28(v73, *v72);
  if (a14) {
    sub_1000147D8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1000458C0()
{
}

void sub_1000458CC()
{
}

void sub_1000458DC()
{
}

void sub_1000458E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unsigned __int8 a51,uint64_t *a52)
{
}

void sub_100045914()
{
}

void sub_100045924()
{
}

void sub_100045934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,unsigned __int8 a63)
{
  sub_100016EAC((uint64_t)&a63);
  sub_100016B28(&a64, a63);
  JUMPOUT(0x100045898);
}

void sub_100045954()
{
}

uint64_t sub_10004595C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000459A8(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000459A8(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000459E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000459F4(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100045A40(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100045A40(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100045A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100045A8C(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100045AD8(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100045AD8(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100045B10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100045B24(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100045B70(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100045B70(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100045BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100045BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100041AC8(**(void **)(a1 + 40) + 184, **(unsigned __int8 **)(*(void *)(a1 + 40) + 8), a2);
}

__n128 sub_100045BD0(uint64_t a1)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 40) + 16))(v5);
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = (__n128)v5[0];
  long long v4 = v5[2];
  *(_OWORD *)(v2 + 16) = v5[1];
  *(_OWORD *)(v2 + 32) = v4;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

void sub_100045C54(uint64_t a1)
{
}

uint64_t *sub_100045C64(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v3 = *v1++;
  uint64_t v2 = v3;
  (*(void (**)(void, uint64_t *))(**(void **)(v3 + 88) + 136))(*(void *)(v3 + 88), v1);
  uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v13 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_100041C2C(v3, (uint64_t)v1, &v12);
  if (v12)
  {
    sub_1000A6930(v12, (uint64_t *)&v10);
    long long v4 = v10;
    uint64_t v5 = v11;
    if (v10 != v11)
    {
      uint64_t v6 = v2 + 184;
      do
      {
        sub_1000260F8(v6, v4);
        v4 += 3;
      }
      while (v4 != v5);
    }
    unint64_t v14 = &v10;
    sub_10002A71C((void ***)&v14);
  }
  if (v13) {
    sub_1000147D8(v13);
  }
  sub_100045DA8((uint64_t *)&v9);
  return sub_100024E7C((uint64_t *)&v8);
}

void sub_100045D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  *(void *)(v16 - 48) = &a12;
  sub_10002A71C((void ***)(v16 - 48));
  if (a16) {
    sub_1000147D8(a16);
  }
  sub_100045DA8(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100045DA8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

std::chrono::system_clock::time_point sub_100045E00(uint64_t a1)
{
  return sub_100024ED8(**(void **)(a1 + 40), 1);
}

double sub_100045E10@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_100152AF8;
  void v2[3] = off_100152A80;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

uint64_t sub_100045E90(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100045ED8(uint64_t result, uint64_t a2)
{
  for (uint64_t i = (void *)(result + 24);
        ;
        double result = (*(uint64_t (**)(uint64_t, void *, void *, void *))(*(void *)v4 + 48))(v4, i + 2, i + 5, i + 7))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      sub_100027A78();
    }
  }
  return result;
}

uint64_t sub_100045F50(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  sub_10001E46C(a2, a3, __p);
  std::string::size_type v15 = __p;
  uint64_t v6 = sub_1000465D8(a1 + 8, (long long *)__p, (uint64_t)&unk_100117318, (long long **)&v15);
  sub_100016A10((uint64_t)&v15, a4);
  sub_100016EAC((uint64_t)&v15);
  unsigned __int8 v7 = v6[56];
  v6 += 56;
  *uint64_t v6 = v15;
  LOBYTE(v15) = v7;
  uint64_t v8 = (uint64_t *)*((void *)v6 + 1);
  *((void *)v6 + 1) = v16;
  uint64_t v16 = v8;
  sub_100016EAC((uint64_t)v6);
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
  long long v9 = *(_OWORD *)(a4 + 16);
  v6[32] = *(unsigned char *)(a4 + 32);
  *((_OWORD *)v6 + 1) = v9;
  sub_100016EAC((uint64_t)v13);
  sub_100016B28(&v14, v13[0]);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_10004607C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004608C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  if (v2)
  {
    char v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)v2 + 39);
      }
      else {
        uint64_t v7 = v2[3];
      }
      uint64_t v8 = a2[23];
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)a2 + 1);
      }
      if (v7 == v8)
      {
        unsigned int v10 = (const void **)(v2 + 2);
        if (v9 >= 0) {
          unsigned int v11 = a2;
        }
        else {
          unsigned int v11 = *(unsigned __int8 **)a2;
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(*v10, v11, v2[3]))
          {
LABEL_19:
            char v12 = (uint64_t *)*v2;
            sub_100046A6C(v5, v2, (uint64_t)v14);
            sub_100046A14((uint64_t)v14, 0);
            char v4 = 1;
            goto LABEL_20;
          }
        }
        else
        {
          if (!*((unsigned char *)v2 + 39)) {
            goto LABEL_19;
          }
          while (*(unsigned __int8 *)v10 == *v11)
          {
            unsigned int v10 = (const void **)((char *)v10 + 1);
            ++v11;
            if (!--v6) {
              goto LABEL_19;
            }
          }
        }
      }
      char v12 = (uint64_t *)*v2;
LABEL_20:
      uint64_t v2 = v12;
      if (!v12) {
        return v4 & 1;
      }
    }
  }
  char v4 = 0;
  return v4 & 1;
}

uint64_t sub_1000461B8(uint64_t a1)
{
  return 1;
}

void *sub_1000461D8(void *a1)
{
  *a1 = off_100152A80;
  sub_100046280((uint64_t)(a1 + 1));
  return a1;
}

void sub_10004621C(void *a1)
{
  *a1 = off_100152A80;
  sub_100046280((uint64_t)(a1 + 1));

  operator delete();
}

uint64_t sub_100046280(uint64_t a1)
{
  sub_1000462BC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000462BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100046300((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100046300(uint64_t a1)
{
  sub_100016EAC(a1 + 40);
  sub_100016B28((uint64_t **)(a1 + 48), *(unsigned __int8 *)(a1 + 40));
  sub_100016EAC(a1 + 24);
  sub_100016B28((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100046370(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100152AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046390(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100152AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000463E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10004640C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5)) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v4)
  {
    unsigned int v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:

  return sub_10001F600(a2 + 24, a3 + 24);
}

BOOL sub_1000464F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100046590((uint64_t)&v6, (const void ***)a2, (uint64_t *)a3)
      && **(unsigned __int8 **)(a2 + 8) == **(unsigned __int8 **)(a3 + 8)
      && **(unsigned __int8 **)(a2 + 16) == **(unsigned __int8 **)(a3 + 16);
}

BOOL sub_100046590(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **a2;
  size_t v5 = (unsigned char *)(*a2)[1] - v4;
  return v5 == *(void *)(v3 + 8) - *(void *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

unsigned __int8 *sub_1000465D8(uint64_t a1, long long *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10001E1F0(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_10004640C(a1 + 32, i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
    a4 = v26;
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  memset(v27, 170, sizeof(v27));
  sub_1000468D0(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_1000400E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    void *v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  sub_100046A14((uint64_t)v27, 0);
  return i;
}

void sub_1000468B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100046A14((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1000468D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x60uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  double result = sub_10004694C(v8 + 2, *a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_100046934(_Unwind_Exception *a1)
{
  sub_100046A14(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10004694C(void *a1, long long *a2)
{
  uint64_t v3 = sub_10004699C(a1, a2);
  v3[9] = 0;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  uint64_t v4 = (uint64_t)(v3 + 5);
  sub_100016EAC((uint64_t)(v3 + 5));
  sub_100016EAC(v4);
  a1[7] = 0;
  return a1;
}

void *sub_10004699C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100016A10((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1000469F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100046A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100046300((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_100046A6C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    char v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100046BA0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000462BC(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_100046BF8@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEBUG)) {
    sub_1000F9AC8();
  }
  return sub_100047048(a1, a2, a3, a4);
}

void *sub_100046CB4(void *a1, uint64_t *a2, long long *a3, void *a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  *a1 = off_100152B48;
  a1[1] = v7;
  a1[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = a1 + 3;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100017424(v8, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    a1[5] = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v8 = v9;
  }
  a1[6] = *a4;
  return a1;
}

void sub_100046D40(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046D58(uint64_t a1)
{
  *(void *)a1 = off_100152B48;
  if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_DEBUG)) {
    sub_1000F9B54();
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100046DE8(uint64_t a1)
{
  sub_100046D58(a1);

  operator delete();
}

void sub_100046E20(uint64_t a1, void *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAA00;
  unint64_t v20 = 0;
  sub_100016EAC((uint64_t)&v19);
  sub_100016EAC((uint64_t)&v19);
  sub_1000168C0((uint64_t)v17, *a2 + 16);
  unint64_t v4 = sub_10000D104((unsigned __int8 *)&v19, "name");
  sub_100016EAC((uint64_t)v17);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)unint64_t v4 = v17[0];
  v17[0] = v5;
  uint64_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v18;
  float v18 = v6;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v17);
  sub_100016B28(&v18, v17[0]);
  sub_100016A10((uint64_t)v15, *a2 + 40);
  uint64_t v7 = sub_10000D104((unsigned __int8 *)&v19, "message");
  sub_100016EAC((uint64_t)v15);
  char v8 = *(unsigned char *)v7;
  *(unsigned char *)uint64_t v7 = v15[0];
  v15[0] = v8;
  long long v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v16;
  unint64_t v16 = v9;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v15);
  sub_100016B28(&v16, v15[0]);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    unint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      unint64_t v12 = v11;
      uint64_t v13 = *(void *)(a1 + 8);
      if (v13)
      {
        (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v13 + 16))(&object);
        if (object) {
          dispatch_release(object);
        }
      }
      sub_1000147D8(v12);
    }
  }
  sub_100016EAC((uint64_t)&v19);
  sub_100016B28(&v20, v19);
}

void sub_100047000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000147D8(v6);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100047040(uint64_t a1)
{
  return a1 + 24;
}

void *sub_100047048@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x50uLL);
  double result = sub_1000470BC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000470A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000470BC(void *a1, uint64_t *a2, long long *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100152B98;
  char v6 = -86;
  sub_100047204((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_100047154(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047168(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100152B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047188(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100152B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000471DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100047204(uint64_t a1, void *a2, uint64_t *a3, long long *a4, void *a5)
{
  char v5 = (std::__shared_weak_count *)a3[1];
  v6[0] = *a3;
  v6[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100046CB4(a2, v6, a4, a5);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1000472C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000472F0()
{
}

void sub_100047370()
{
}

void sub_10004739C(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  *(void *)a1 = off_100152D40;
  *(void *)(a1 + 8) = off_100152D78;
  *(void *)(a1 + 16) = off_100152DA8;
  uint64_t v10 = dispatch_queue_create("analyticsd.EventBrokerQueue", 0);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v10;
  if (v10)
  {
    unint64_t v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }
  *(void *)a1 = off_100152BE8;
  *(void *)(a1 + 8) = off_100152C38;
  *(void *)(a1 + 16) = off_100152C68;
  *(void *)(a1 + 48) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 56) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 64) = v14;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 96) = v16;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 112) = *a5;
  uint64_t v17 = a5[1];
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16sub_100027DA4((uint64_t)&a9, 0) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = 0u;
  operator new();
}

void sub_1000475DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 192);
  sub_10004926C(&a9);
  sub_100049148(&a9);
  sub_100049054(v14);
  uint64_t v16 = *(std::__shared_weak_count **)(v9 + 120);
  if (v16) {
    sub_1000147D8(v16);
  }
  sub_1000F9BF4(v13, v9, v12, v11);
  sub_10004085C(v10);
  _Unwind_Resume(a1);
}

void sub_10004763C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, (void *)(a1 + 24));
  operator new();
}

void sub_100047778(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100047788(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  int v4 = a4;
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a3 + 8) != 1) {
      goto LABEL_9;
    }
    uint64_t v7 = *(unsigned char **)a3;
  }
  else
  {
    uint64_t v7 = (unsigned char *)a3;
    if (v6 != 1) {
      goto LABEL_9;
    }
  }
  if (*v7 == 42) {
    int v4 = 2;
  }
  else {
    int v4 = a4;
  }
LABEL_9:
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  void v10[3] = a1;
  v10[4] = v9;
  v10[5] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    LOBYTE(v6) = *(unsigned char *)(a3 + 23);
  }
  if ((v6 & 0x80) != 0)
  {
    sub_100017424(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  int v12 = v4;
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v10, (void *)(a1 + 24));
  operator new();
}

void sub_100047974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a2)
  {
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 16);
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000479BC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
}

void sub_1000479C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 24));
  operator new();
}

void sub_100047B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a2)
  {
    uint64_t v13 = *(std::__shared_weak_count **)(v11 + 16);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100047BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100047BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 24);
  void v3[3] = a1;
  sub_100053AEC((uint64_t)&v4, a2);
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, v2);
  operator new();
}

void sub_100047CE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100047CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 24);
  void v3[3] = a1;
  sub_100053AEC((uint64_t)&v4, a2);
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, v2);
  operator new();
}

void sub_100047E24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100047E34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v8 = dispatch_group_create();
  *a4 = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_100016A10((uint64_t)v10, a3);
  dispatch_group_t group = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v8);
  }
  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v12, (void *)(a1 + 24));
  operator new();
}

void sub_10004803C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000480A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
}

void sub_1000480A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 24;
  v4[0] = a1;
  v4[1] = a2;
  int8x8_t v3 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000540D0;
  block[3] = &unk_100153588;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_100048150(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, (void *)(a1 + 24));
  operator new();
}

void sub_10004828C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10004829C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 24));
  operator new();
}

void sub_100048398(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000483A8(uint64_t a1)
{
  uint64_t v1 = qword_10015EF28;
  if (!*(void *)(a1 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v2) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[EventBroker] event processing paused. Events will be queued.", (uint8_t *)&v2, 2u);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
    sub_1000F9C54(v1);
  }
}

void sub_1000484A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  if (v1)
  {
    *(void *)(a1 + 216) = 0;
    uint64_t v8 = (void **)v1;
    int8x8_t v3 = qword_10015EF28;
    if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 4;
      *(_DWORD *)int buf = 134217984;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[EventBroker] event processing resumed; %zd events queued.",
        buf,
        0xCu);
    }
    char v5 = *(uint64_t **)v1;
    int v6 = *(uint64_t **)(v1 + 8);
    while (v5 != v6)
    {
      sub_10000E9E0(a1, v5);
      v5 += 2;
    }
    sub_100048FD4(&v8, 0);
  }
  else
  {
    uint64_t v7 = qword_10015EF28;
    if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
      sub_1000F9CC4(v7);
    }
  }
}

void sub_1000485C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1000485E8(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v8 = dispatch_group_create();
  *a4 = v8;
  if ((sub_1000A3020(*(void *)(a1 + 96)) & 1) == 0)
  {
    uint64_t v12 = qword_10015EF20;
    if (!os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO)) {
      return;
    }
    LOWORD(__p[0]) = 0;
    uint64_t v10 = " *** DAILY ROLLOVER EXPIRATION SKIPPED: daemon restart is in progress";
    uint64_t v11 = v12;
    goto LABEL_7;
  }
  uint64_t v9 = qword_10015EF20;
  if (!*(void *)(a1 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " *** DAILY ROLLOVER EXPIRATION ***", (uint8_t *)__p, 2u);
      uint64_t v9 = qword_10015EF20;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *((char *)a2 + 23);
      uint64_t v14 = (uint64_t **)*a2;
      sub_100007460(a3, -1, 0x20u, 0, 1, __p);
      uint64_t v15 = (uint64_t)(v13 >= 0 ? a2 : v14);
      uint64_t v16 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v21 = 2080;
      size_t v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " *** Rollover configured with {reason: '%{public}s', options: %s}", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v17 = *(void *)(a1 + 248);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
    }
    sub_1000483A8(a1);
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 80) + 16))(buf);
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(v8);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    uint64_t v10 = " *** DAILY ROLLOVER EXPIRATION SKIPPED: rollover is currently in progress ***";
    uint64_t v11 = v9;
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, (uint8_t *)__p, 2u);
  }
}

void sub_1000488B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000488E8(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)sub_1000171B0((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    _OWORD v19[2] = v15 + 16;
    sub_100014994(a1, v19);
    uint64_t v9 = (void *)a1[1];
    sub_100014B08(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100048A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void *sub_100048A34@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) <= a2) {
    uint64_t v3 = (uint64_t)(result + 3);
  }
  else {
    uint64_t v3 = *result + 24 * a2;
  }
  if (*(unsigned char *)(v3 + 16)) {
    return sub_1000500B4(a3, *(char **)v3, *(char **)(v3 + 8), *(void *)(v3 + 8) - *(void *)v3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t sub_100048A84(char *a1, const void **a2, unsigned int *a3)
{
  if (*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v10 = (char *)sub_100029400(a1);
    sub_100015438(v13, v10);
    unint64_t v11 = std::string::insert((std::string *)v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v11->__r_.__value_.__l + 2);
    long long v15 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(306, (uint64_t)&v15, exception);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v5;
  long long v16 = v5;
  sub_100014610((uint64_t)a1, a2, (uint64_t)&v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v6;
  v13[1] = v6;
  sub_1000136C8(v13, (uint64_t)a1);
  sub_100013648((unsigned __int8 **)v13);
  if (sub_100013964((unsigned __int8 **)&v15, (unsigned __int8 **)v13)) {
    return *a3;
  }
  uint64_t v8 = sub_100013AAC((unsigned __int8 **)&v15);
  LODWORD(v13[0]) = -1431655766;
  sub_100056798(v8, (int *)v13);
  return LODWORD(v13[0]);
}

void sub_100048BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_100048C54(uint64_t a1)
{
  sub_100048D14(a1);

  operator delete();
}

uint64_t sub_100048C8C(uint64_t a1)
{
  return sub_100048D14(a1 - 8);
}

void sub_100048C94(uint64_t a1)
{
  sub_100048D14(a1 - 8);

  operator delete();
}

uint64_t sub_100048CD0(uint64_t a1)
{
  return sub_100048D14(a1 - 16);
}

void sub_100048CD8(uint64_t a1)
{
  sub_100048D14(a1 - 16);

  operator delete();
}

uint64_t sub_100048D14(uint64_t a1)
{
  *(void *)a1 = off_100152BE8;
  *(void *)(a1 + 8) = off_100152C38;
  *(void *)(a1 + 16) = off_100152C68;
  sub_10001266C((void *)(a1 + 256));
  sub_10001266C((void *)(a1 + 224));
  sub_100048FD4((void ***)(a1 + 216), 0);
  uint64_t v8 = (void **)(a1 + 192);
  sub_10004926C(&v8);
  uint64_t v8 = (void **)(a1 + 168);
  sub_100049148(&v8);
  sub_100049054(a1 + 128);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4) {
    sub_1000147D8(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    sub_1000147D8(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6) {
    sub_1000147D8(v6);
  }
  sub_10004085C(a1 + 24);
  return a1;
}

void sub_100048E50(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100048ED0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[5], v1, (dispatch_function_t)sub_100048FA8);
  __cxa_rethrow();
}

void sub_100048EF8(_Unwind_Exception *a1)
{
}

void sub_100048F10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100048F48(uint64_t a1)
{
}

uint64_t sub_100048F64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100048FA8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ***sub_100048FD4(void ***result, void **a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100014738(&v3);
    operator delete();
  }
  return result;
}

uint64_t sub_100049054(uint64_t a1)
{
  sub_100049090(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100049090(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1000490D4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1000490D4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_10004926C(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100049148(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::locale *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        sub_1000491E0(v1 + 16, v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000491E0(int a1, std::locale *this)
{
  locale = (std::__shared_weak_count *)this[9].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_weak(locale);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[6].__locale_;
  if (v4) {
    sub_1000147D8(v4);
  }

  std::locale::~locale(this);
}

void sub_10004922C(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_1000147D8(locale);
  }

  std::locale::~locale(this);
}

void sub_10004926C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000492C0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000492C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void sub_10004930C(uint64_t **a1)
{
  uint64_t v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(std::__shared_weak_count **)(v2 + 88);
  *(void *)(v2 + 8sub_100027DA4((uint64_t)&a9, 0) = v3;
  *(void *)(v2 + 88) = v4;
  if (v5) {
    sub_1000147D8(v5);
  }
  long long v6 = (std::__shared_weak_count *)v1[2];
  if (v6) {
    sub_1000147D8(v6);
  }
  operator delete();
}

uint64_t *sub_1000493B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 48);
  switch(v3)
  {
    case 2:
      uint64_t v4 = (uint64_t *)(v2 + 192);
      goto LABEL_7;
    case 1:
      sub_10004A29C(&v8, v1 + 24, 0);
    case 0:
      v9.__locale_ = (std::locale::__imp *)(v1 + 24);
      uint64_t v4 = (uint64_t *)(sub_100049758(v2 + 128, (unsigned __int8 *)(v1 + 24), (uint64_t)&unk_100117318, (long long **)&v9)
                     + 40);
LABEL_7:
      sub_10004960C(v4, (long long *)(v1 + 8));
      break;
  }
  sub_1000495A8(&v7);
  return sub_100024E7C((uint64_t *)&v6);
}

void sub_100049510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  sub_1000F9E58(&a20, &a12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    char v33 = qword_10015EF28;
    if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
      sub_1000F9DD0(v29, v30, v33);
    }
    __cxa_end_catch();
    JUMPOUT(0x1000494CCLL);
  }
  sub_1000495A8(&a11);
  sub_100024E7C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000495A8(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_10004960C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    unint64_t v14 = (char *)sub_1000171B0((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    _OWORD v19[2] = v15 + 16;
    sub_100049B58(a1, v19);
    std::locale v9 = (void *)a1[1];
    sub_100049D10(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    std::locale v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100049744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unsigned __int8 *sub_100049758(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v26 = a4;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_100014470(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
    a4 = v26;
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  memset(v27, 170, sizeof(v27));
  sub_100049A50(a1, v9, a4, v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if ((((float)(v18 * (float)v10) >= v17) & ~(v10 == 0)) == 0)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_1000400E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    void *v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  sub_100049B00((uint64_t)v27, 0);
  return i;
}

void sub_100049A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100049B00((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_100049A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  memset(a4, 170, 24);
  unint64_t v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  double result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    double result = sub_100017424(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)double result = v11;
  }
  v8[5] = 0;
  void v8[6] = 0;
  v8[7] = 0;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_100049AE8(_Unwind_Exception *a1)
{
  sub_100049B00(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100049B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000490D4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100049B58(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100049BD0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100049BD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_100049C94((uint64_t)v14);
  return v10;
}

uint64_t sub_100049C94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100049CCC(a1);
  }
  return a1;
}

void sub_100049CCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **sub_100049D10(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100049D44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

__n128 sub_100049D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::locale::locale(*(std::locale **)(a1 + 8), (const std::locale *)a2);
  *(_OWORD *)&v4[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v4[3].__locale_ = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v4[5].__locale_ = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)&v4[7].__locale_ = result;
  v4[9].__locale_ = *(std::locale::__imp **)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 8) = v4 + 10;
  return result;
}

uint64_t sub_100049DFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100049FDC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v15 = 0;
  long long v11 = &v10[80 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v16 = &v10[80 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  unint64_t v15 = v11 + 80;
  sub_100049F64(a1, v14);
  uint64_t v12 = a1[1];
  sub_10004A1BC(v14);
  return v12;
}

void sub_100049F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_100049F64(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004A024((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100049FDC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_100028E94();
  }
  return operator new(80 * a2);
}

uint64_t sub_10004A024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 80), (const std::locale *)(v9 - 80));
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v9 - 72);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v9 - 56);
      *(_OWORD *)(v7 - 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(v9 - 40);
      *(void *)(v9 - 4sub_100027DA4((uint64_t)&a9, 0) = 0;
      *(void *)(v9 - 32) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - 8) = *(void *)(v9 - 8);
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 80;
      *((void *)&v13 + 1) -= 80;
      v9 -= 80;
    }
    while (v9 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_10004A130((uint64_t)v14);
  return v10;
}

uint64_t sub_10004A130(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10004A168((uint64_t *)a1);
  }
  return a1;
}

void sub_10004A168(uint64_t *a1)
{
  uint64_t v1 = *(std::locale **)(a1[2] + 8);
  uint64_t v2 = *(std::locale **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1000491E0(v3, v1);
      v1 += 10;
    }
    while (v1 != v2);
  }
}

void **sub_10004A1BC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10004A1F0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_1000491E0(v4, (std::locale *)(i - 80));
  }
}

std::locale *sub_10004A238(std::locale *a1, uint64_t a2, std::locale::__imp **a3)
{
  uint64_t result = std::locale::locale(a1, (const std::locale *)a2);
  *(_OWORD *)&result[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&result[3].__locale_ = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&result[5].__locale_ = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v7 = *a3;
  uint64_t v6 = (atomic_ullong *)a3[1];
  result[7].__locale_ = *(std::locale::__imp **)(a2 + 56);
  result[8].__locale_ = v7;
  result[9].__locale_ = (std::locale::__imp *)v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10004A29C(std::locale *a1, uint64_t a2, int a3)
{
  uint64_t v4 = sub_10004A33C(a1);
  LODWORD(v4[3].__locale_) = a3;
  *(_OWORD *)((char *)&v4[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v4[5].__locale_ + 4) = 0u;
  HIDWORD(v4[7].__locale_) = 0;
  sub_10004A39C();
}

void sub_10004A31C(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    sub_1000147D8(locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_10004A33C(std::locale *a1)
{
  uint64_t v2 = std::locale::locale(a1);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, &std::ctype<char>::id);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, &std::collate<char>::id);
  return a1;
}

void sub_10004A388(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_10004A39C()
{
}

void sub_10004A55C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_10004A590()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_10004A5D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004A5E8(uint64_t a1, uint64_t a2)
{
  sub_10004AC3C(&v2, a2);
}

unsigned __int8 *sub_10004A65C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = sub_10004AF70(a1, a2, a3);
  if (v6 == a2) {
    operator new();
  }
  if (v6 == (unsigned __int8 *)a3) {
    return (unsigned __int8 *)a3;
  }
  if (*v6 == 124)
  {
    if (v6 + 1 == sub_10004AF70(a1, v6 + 1, a3)) {
      operator new();
    }
    sub_10004AFBC();
  }
  return v6;
}

unsigned __int8 *sub_10004A794(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94) {
    sub_10004B908();
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = sub_100052CE4(a1, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36) {
        sub_10004B98C();
      }
      sub_100052C8C();
    }
  }
  return v4;
}

char *sub_10004A844(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = sub_1000533B0(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
LABEL_8:
  }
    sub_100052C8C();
  uint64_t v7 = v6;
  if (v6 == (unsigned __int8 *)a3) {
    return a3;
  }
  if (*v6 == 124)
  {
    if (v6 + 1 != sub_1000533B0(a1, (char *)v6 + 1, a3)) {
      sub_10004AFBC();
    }
    goto LABEL_8;
  }
  return (char *)v7;
}

unsigned __int8 *sub_10004A8E8(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_10004A794(a1, __s, v7);
  if (v7 == a3) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    uint64_t v8 = (unsigned __int8 *)memchr(v10, 10, a3 - v10);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a3;
    }
    if (v9 != v10)
    {
      sub_10004A794(a1, v10, v9);
      sub_10004AFBC();
    }
    operator new();
  }
  return a3;
}

char *sub_10004AA50(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_10004A844(a1, __s, v7);
  if (v7 == a3) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    uint64_t v8 = (char *)memchr(v10, 10, a3 - v10);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a3;
    }
    if (v9 != v10)
    {
      sub_10004A844(a1, v10, v9);
      sub_10004AFBC();
    }
    operator new();
  }
  return a3;
}

void sub_10004ABB8()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_10004ABFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004AC14()
{
}

void sub_10004AC28(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_10004AC3C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10004ACA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000F9EA4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004ACC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004ACF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10004AD28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_10004AD6C(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004ADD8(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_10004AE64(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + 8);
  return result;
}

void *sub_10004AE78(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004AEE4(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

unsigned __int8 *sub_10004AF70(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = sub_10004B0C4(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void sub_10004AFBC()
{
}

unsigned __int8 *sub_10004B0C4(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)sub_10004B16C(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    uint64_t v7 = sub_10004B3D0(a1, (unsigned __int8 *)a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v7 != (unsigned __int8 *)a2)
    {
      return sub_10004B5C8(a1, v7, (unsigned __int8 *)a3);
    }
  }
  return result;
}

char *sub_10004B16C(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v10 = a2[1];
          if (v10 == 66 || v10 == 98) {
            sub_10004BA10();
          }
        }
      }
      else if (v6 == 94)
      {
        sub_10004B908();
      }
    }
    else
    {
      if (v6 == 36) {
        sub_10004B98C();
      }
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v13[1] = v11;
          _OWORD v13[2] = v11;
          long long v12 = v11;
          v13[0] = v11;
          sub_10004A33C((std::locale *)&v12);
          memset((char *)v13 + 8, 0, 40);
          DWORD2(v13[0]) = *(_DWORD *)(a1 + 24);
          sub_10004A39C(&v12, a2 + 3, a3);
          sub_10004BAA4();
        }
        if (v7 == 61)
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v13[1] = v8;
          _OWORD v13[2] = v8;
          long long v12 = v8;
          v13[0] = v8;
          sub_10004A33C((std::locale *)&v12);
          memset((char *)v13 + 8, 0, 40);
          DWORD2(v13[0]) = *(_DWORD *)(a1 + 24);
          sub_10004A39C(&v12, a2 + 3, a3);
          sub_10004BAA4();
        }
      }
    }
  }
  return a2;
}

void sub_10004B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_10004B3D0(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46) {
          operator new();
        }
        if ((v6 - 42) >= 2) {
          return sub_10004D894(a1, a2, a3);
        }
LABEL_28:
        sub_10004D83C();
      }
      long long v8 = a2 + 1;
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        if (a2 + 2 != (unsigned __int8 *)a3 && *v8 == 63 && a2[2] == 58)
        {
          ++*(_DWORD *)(a1 + 36);
          uint64_t v9 = (char *)sub_10004A65C(a1, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --*(_DWORD *)(a1 + 36);
            return (unsigned __int8 *)(v9 + 1);
          }
        }
        else
        {
          sub_10004D73C(a1);
          ++*(_DWORD *)(a1 + 36);
          int v10 = (char *)sub_10004A65C(a1, v8, a3);
          if (v10 != a3)
          {
            long long v11 = v10;
            if (*v10 == 41)
            {
              sub_10004D7C0(a1);
              --*(_DWORD *)(a1 + 36);
              return (unsigned __int8 *)(v11 + 1);
            }
          }
        }
      }
      sub_10004BB4C();
    }
    if (v6 > 91)
    {
      if (v6 == 92) {
        return sub_10004D584(a1, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 == 91) {
        return sub_10004D628(a1, a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }
    return sub_10004D894(a1, a2, a3);
  }
  return v3;
}

unsigned __int8 *sub_10004B5C8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v5 = (char)*a2;
  if (v5 <= 62)
  {
    if (v5 == 42 || (int v6 = a2, v5 == 43)) {
LABEL_18:
    }
      sub_100052638();
    return v6;
  }
  if (v5 == 63) {
    goto LABEL_18;
  }
  int v6 = a2;
  if (v5 == 123)
  {
    int v14 = -1431655766;
    int v7 = a2 + 1;
    long long v8 = sub_1000527C8(a1, a2 + 1, a3, &v14);
    if (v7 == v8) {
      goto LABEL_24;
    }
    if (v8 != a3)
    {
      int v9 = (char)*v8;
      if (v9 != 44)
      {
        if (v9 == 125) {
          goto LABEL_18;
        }
LABEL_24:
        sub_100052868();
      }
      int v10 = v8 + 1;
      if (v8 + 1 == a3) {
        goto LABEL_24;
      }
      if (*v10 == 125) {
        goto LABEL_18;
      }
      int v13 = -1;
      long long v12 = sub_1000527C8(a1, v10, a3, &v13);
      if (v10 != v12 && v12 != a3 && *v12 == 125)
      {
        if (v13 >= v14) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
    }
    sub_1000528C0();
  }
  return v6;
}

void sub_10004B908()
{
}

void sub_10004B98C()
{
}

void sub_10004BA10()
{
}

void sub_10004BAA4()
{
}

void sub_10004BB28()
{
}

void sub_10004BB4C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_10004BB90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_10004BBA4(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004BC10(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_10004BC9C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v4;
  return result;
}

void *sub_10004BCFC(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004BD68(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_10004BDF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v5;
  return result;
}

std::locale *sub_10004BE44(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153038;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10004BED0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153038;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_10004BF7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v12;
  return result;
}

uint64_t sub_10004C090(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = off_100153080;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_10004C120(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153080;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_1000147D8(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_10004C1C0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153080;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_1000147D8(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }

  operator delete();
}

void sub_10004C280(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = 0xAAAAAAAAAAAAAA00;
  long long v27 = v4;
  uint64_t v24 = 0;
  long long v26 = 0uLL;
  LOBYTE(v27) = 0;
  BYTE8(v27) = 0;
  uint64_t v28 = 0;
  std::string __p = 0;
  unint64_t v20 = 0;
  unint64_t v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v21 = 0;
  *(void *)&long long v22 = v6;
  *((void *)&v22 + 1) = v6;
  LOBYTE(v23) = 0;
  sub_10004C96C((char **)&__p, v5, &v22);
  *((void *)&v23 + 1) = v7;
  uint64_t v24 = v7;
  LOBYTE(v25) = 0;
  long long v26 = v22;
  LOBYTE(v27) = v23;
  uint64_t v28 = v7;
  BYTE8(v27) = 1;
  uint64_t v8 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v9 = v8 == *(void *)(a2 + 8);
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  if (*(unsigned __int8 *)(a1 + 84) == sub_10004C4B8(a1 + 16, v8, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v10))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = 0;
    int v11 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(a1 + 8);
  int v11 = (char *)__p;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)__p) >> 3);
  if (v12 < 2)
  {
LABEL_13:
    if (!v11) {
      return;
    }
    goto LABEL_14;
  }
  int v13 = 0;
  int v14 = *(_DWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a2 + 32);
  unint64_t v16 = 1;
  do
  {
    float v17 = &v11[24 * v16];
    uint64_t v18 = v15 + 24 * (v14 + v13);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
    *(unsigned char *)(v18 + 16) = v17[16];
    unint64_t v16 = (v13 + 2);
    ++v13;
  }
  while (v12 > v16);
LABEL_14:
  unint64_t v20 = v11;
  operator delete(v11);
}

void sub_10004C424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10004C444(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  uint64_t v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  uint64_t result = sub_10004C96C((char **)a1, a2, (long long *)(a1 + 24));
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_10004C4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  std::string v38 = 0;
  char v39 = 0;
  unint64_t v40 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *((void *)&v42 + 1) = a3;
    unint64_t v43 = 0xAAAAAAAAAAAAAA00;
    *(void *)&long long v42 = a3;
    *(_DWORD *)uint64_t v41 = 0;
    memset(&v41[8], 0, 85);
    char v39 = (_OWORD *)sub_10004CC98((uint64_t *)&v38, (uint64_t)v41);
    if (*(void *)&v41[56])
    {
      *(void *)&v41[64] = *(void *)&v41[56];
      operator delete(*(void **)&v41[56]);
    }
    if (*(void *)&v41[32])
    {
      *(void *)&v41[40] = *(void *)&v41[32];
      operator delete(*(void **)&v41[32]);
    }
    char v36 = a4;
    unint64_t v12 = v39;
    *((_DWORD *)v39 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 1sub_100027DA4((uint64_t)&a9, 0) = a2;
    *((void *)v12 - 9) = a3;
    sub_10004CB7C((uint64_t)(v12 - 4), *(unsigned int *)(a1 + 28), &v42);
    sub_10004CBB8((uint64_t)v39 - 40, *(unsigned int *)(a1 + 32));
    int v13 = v39;
    *((void *)v39 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        sub_10004CBE8();
      }
      unint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      float v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          uint64_t v18 = *((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v27 = *v36;
          *(void *)uint64_t v27 = a2;
          *(void *)(v27 + 8) = v18;
          *(unsigned char *)(v27 + 16) = 1;
          uint64_t v28 = *((void *)v13 - 8);
          uint64_t v29 = *((void *)v13 - 7) - v28;
          if (v29)
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            char v31 = (unsigned char *)(v28 + 16);
            unsigned int v32 = 1;
            do
            {
              uint64_t v33 = v27 + 24 * v32;
              *(_OWORD *)uint64_t v33 = *((_OWORD *)v31 - 1);
              char v34 = *v31;
              v31 += 24;
              *(unsigned char *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          BOOL v19 = v39 - 6;
          sub_10004D07C((uint64_t)&v40, (void *)v39 - 12);
          char v39 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v41[64] = v20;
          *(_OWORD *)&v41[80] = v20;
          *(_OWORD *)&v41[32] = v20;
          *(_OWORD *)&v41[48] = v20;
          *(_OWORD *)uint64_t v41 = v20;
          *(_OWORD *)&unsigned char v41[16] = v20;
          long long v21 = *(v13 - 5);
          *(_OWORD *)uint64_t v41 = *v17;
          *(_OWORD *)&unsigned char v41[16] = v21;
          memset(&v41[32], 0, 24);
          sub_10004D3F8(&v41[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          memset(&v41[56], 0, 24);
          sub_10004D478(&v41[56], *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v22 = *v16;
          *(void *)&v41[85] = *(void *)((char *)v13 - 11);
          *(void *)&v41[80] = v22;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(**(void **)&v41[80] + 24))(*(void *)&v41[80], 0, v41);
          long long v23 = v39;
          if ((unint64_t)v39 >= v40)
          {
            char v39 = (_OWORD *)sub_10004CC98((uint64_t *)&v38, (uint64_t)v41);
            if (*(void *)&v41[56])
            {
              *(void *)&v41[64] = *(void *)&v41[56];
              operator delete(*(void **)&v41[56]);
            }
          }
          else
          {
            long long v24 = *(_OWORD *)&v41[16];
            *char v39 = *(_OWORD *)v41;
            v23[1] = v24;
            *((void *)v23 + 4) = 0;
            *((void *)v23 + 5) = 0;
            *((void *)v23 + 6) = 0;
            *((void *)v23 + 7) = 0;
            v23[2] = *(_OWORD *)&v41[32];
            *((void *)v23 + 6) = *(void *)&v41[48];
            memset(&v41[32], 0, 24);
            *((void *)v23 + 8) = 0;
            *((void *)v23 + 9) = 0;
            *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)&v41[56];
            *((void *)v23 + 9) = *(void *)&v41[72];
            memset(&v41[56], 0, 24);
            uint64_t v25 = *(void *)&v41[80];
            *(void *)((char *)v23 + 85) = *(void *)&v41[85];
            *((void *)v23 + 1sub_100027DA4((uint64_t)&a9, 0) = v25;
            char v39 = v23 + 6;
          }
          if (*(void *)&v41[32])
          {
            *(void *)&v41[40] = *(void *)&v41[32];
            operator delete(*(void **)&v41[32]);
          }
LABEL_23:
          int v13 = v39;
          ++v14;
          if (v38 != v39) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          sub_10004CC40();
      }
      break;
    }
  }
  *(void *)uint64_t v41 = &v38;
  sub_10004D4EC((void ***)v41);
  return v6;
}

void sub_10004C8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a15 = &a12;
  sub_10004D4EC((void ***)&a15);
  _Unwind_Resume(a1);
}

char *sub_10004C96C(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    uint64_t v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        unsigned char v18[16] = *((unsigned char *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      BOOL v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        long long v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100028DEC();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_10004CAE4(a1, v10);
    int v11 = a1[1];
    unint64_t v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      long long v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)int v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *sub_10004CAE4(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100028DEC();
  }
  uint64_t result = (char *)sub_10002AC98((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_10004CB38(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10004CB7C(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_10004D150((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_10004CBB8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_10004D2D8((void **)a1, a2 - v2);
  }
}

void sub_10004CBE8()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_10004CC2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004CC40()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_10004CC84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004CC98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v19 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10004CE94(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v17 = 0;
  int v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v18 = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1sub_100027DA4((uint64_t)&a9, 0) = v13;
  uint64_t v17 = v11 + 96;
  sub_10004CE1C(a1, v16);
  uint64_t v14 = a1[1];
  sub_10004D0D4(v16);
  return v14;
}

void sub_10004CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_10004CE1C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004CEDC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10004CE94(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_100028E94();
  }
  return operator new(96 * a2);
}

uint64_t sub_10004CEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8sub_100027DA4((uint64_t)&a9, 0) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 4sub_100027DA4((uint64_t)&a9, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4sub_100027DA4((uint64_t)&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v13 + 1) - 96;
      *((void *)&v13 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_10004CFF0((uint64_t)v14);
  return v10;
}

uint64_t sub_10004CFF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10004D028((uint64_t *)a1);
  }
  return a1;
}

void sub_10004D028(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  unint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10004D07C(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_10004D07C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_10004D0D4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10004D108(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_10004D07C(v4, (void *)(i - 96));
  }
}

void sub_10004D150(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        _DWORD v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100028DEC();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_10002AC98(v6, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    BOOL v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    long long v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    long long v23 = &v14[24 * v13];
    uint64_t v25 = (char *)*a1;
    long long v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      long long v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_10004D2D8(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_1000171B0(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    unint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

char *sub_10004D3F8(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10004CAE4(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_10004D45C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10004D478(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100018368(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_10004D4D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004D4EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_10004D07C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_10004D584(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_10004DA00();
  }
  uint64_t result = sub_10004DA58(a1, a2 + 1, a3);
  if (v5 == result)
  {
    uint64_t result = (unsigned __int8 *)sub_10004DB10(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      uint64_t result = sub_10004DBE0(a1, (char *)a2 + 1, (char *)a3, 0);
      if (v5 == result) {
        return a2;
      }
    }
  }
  return result;
}

unsigned char *sub_10004D628(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      sub_10004ECEC();
    }
    sub_1000502BC();
  }
  return a2;
}

uint64_t sub_10004D73C(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

uint64_t sub_10004D7C0(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

void sub_10004D83C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_10004D880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10004D894(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    int v3 = (char)*a2;
    BOOL v4 = (v3 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v4 && (v3 - 123) >= 3) {
      sub_10004DEF4(a1);
    }
  }
  return a2;
}

void *sub_10004D908(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004D974(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_10004DA00()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_10004DA44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10004DA58(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48) {
      sub_10004DEF4(a1);
    }
    if ((v4 - 49) <= 8)
    {
      uint64_t v6 = a2 + 1;
      if (v6 == a3) {
        goto LABEL_10;
      }
      do
      {
        int v7 = *v6;
        if ((v7 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_13;
        }
        ++v6;
        unsigned int v5 = v7 + 10 * v5 - 48;
      }
      while (v6 != a3);
      if (v5)
      {
LABEL_10:
        if (v5 <= *(_DWORD *)(a1 + 28)) {
          sub_10004E08C(a1);
        }
      }
LABEL_13:
      sub_10004E034();
    }
  }
  return a2;
}

char *sub_10004DB10(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *a2;
  if (v3 > 99)
  {
    if (v3 == 119) {
      goto LABEL_12;
    }
    if (v3 == 115) {
LABEL_13:
    }
      sub_10004ECEC();
    if (v3 != 100) {
      return a2;
    }
LABEL_10:
    sub_10004ECEC();
  }
  switch(v3)
  {
    case 'D':
      goto LABEL_10;
    case 'S':
      goto LABEL_13;
    case 'W':
LABEL_12:
      sub_10004ECEC();
  }
  return a2;
}

unsigned __int8 *sub_10004DBE0(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  int v5 = *a2;
  if (v5 > 109)
  {
    char v6 = 0;
    switch(*a2)
    {
      case 'n':
        if (!this) {
          goto LABEL_54;
        }
        int v7 = this;
        std::string::value_type v8 = 10;
        goto LABEL_52;
      case 'r':
        if (!this) {
          goto LABEL_54;
        }
        int v7 = this;
        std::string::value_type v8 = 13;
        goto LABEL_52;
      case 't':
        if (!this) {
          goto LABEL_54;
        }
        int v7 = this;
        std::string::value_type v8 = 9;
        goto LABEL_52;
      case 'u':
        if (a2 + 1 == a3) {
          goto LABEL_57;
        }
        int v9 = a2[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
          goto LABEL_57;
        }
        int v4 = a2 + 2;
        if (a2 + 2 == a3) {
          goto LABEL_57;
        }
        int v10 = *v4;
        char v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
          goto LABEL_24;
        }
        v10 |= 0x20u;
        if ((v10 - 97) >= 6) {
          goto LABEL_57;
        }
        char v11 = -87;
LABEL_24:
        char v6 = 16 * (v11 + v10);
LABEL_25:
        if (v4 + 1 == a3) {
          goto LABEL_57;
        }
        int v12 = v4[1];
        char v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
          goto LABEL_30;
        }
        v12 |= 0x20u;
        if ((v12 - 97) >= 6) {
          goto LABEL_57;
        }
        char v13 = -87;
LABEL_30:
        if (v4 + 2 == a3) {
          goto LABEL_57;
        }
        int v14 = v4[2];
        char v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
          goto LABEL_35;
        }
        v14 |= 0x20u;
        if ((v14 - 97) >= 6) {
          goto LABEL_57;
        }
        char v15 = -87;
LABEL_35:
        if (!this) {
          sub_10004DEF4(a1);
        }
        std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
        v4 += 3;
        break;
      case 'v':
        if (!this) {
          goto LABEL_54;
        }
        int v7 = this;
        std::string::value_type v8 = 11;
        goto LABEL_52;
      case 'x':
        goto LABEL_25;
      default:
        goto LABEL_47;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      int v7 = this;
      std::string::value_type v8 = 0;
      goto LABEL_52;
    }
LABEL_54:
    sub_10004DEF4(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        int v7 = this;
        std::string::value_type v8 = 12;
LABEL_52:
        std::string::operator=(v7, v8);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_54;
    }
LABEL_47:
    if (*a2 != 95
      && ((v5 & 0x80) != 0
       || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
    {
      std::string::value_type v8 = *a2;
      if (this)
      {
        int v7 = this;
        goto LABEL_52;
      }
      goto LABEL_54;
    }
LABEL_57:
    sub_10004DA00();
  }
  if (a2 + 1 == a3) {
    goto LABEL_57;
  }
  if (a2[1] < 65) {
    goto LABEL_57;
  }
  unsigned int v16 = a2[1];
  if (v16 >= 0x5B && (v16 - 97) > 0x19u) {
    goto LABEL_57;
  }
  if (!this) {
    sub_10004DEF4(a1);
  }
  std::string::operator=(this, v16 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_10004DEF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_10004E010()
{
}

void sub_10004E034()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_10004E078(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004E08C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t sub_10004E1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_100153110;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_10004E250(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  void *v1 = off_100152F78;
  uint64_t v4 = v1[1];
  if (v4) {
    sub_1000F9EA4(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_10004E290(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153110;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10004E31C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153110;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_10004E3C8(uint64_t result, uint64_t a2)
{
  int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v5;
  return result;
}

std::locale *sub_10004E45C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153158;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10004E4E8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153158;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_10004E594(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v3;
  return result;
}

void *sub_10004E5DC(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004E648(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_10004E6D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v3;
  return result;
}

std::locale *sub_10004E71C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1001531E8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10004E7A8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1001531E8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_10004E854(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v6;
  return result;
}

std::locale *sub_10004E96C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153230;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_10004E9F8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_100153230;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_10004EAA4(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v8;
  return result;
}

void *sub_10004EB34(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10004EBA0(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

unsigned int *sub_10004EC2C(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_10004E034();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v10;
  return result;
}

void sub_10004ECEC()
{
}

void sub_10004ED64()
{
}

void sub_10004ED88(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        long long v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100028DEC();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        long long v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          char v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  long long v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t sub_10004EFD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = off_1001532C0;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17sub_100027DA4((uint64_t)&a9, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_10004F144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *a11)
{
  std::locale::~locale(&a10);
  a11 = v11 + 17;
  sub_10002A71C((void ***)&a11);
  unint64_t v16 = (void *)v11[14];
  if (v16)
  {
    v11[15] = v16;
    operator delete(v16);
  }
  sub_10004FB80((void ***)&a11);
  unint64_t v17 = (void *)v11[8];
  if (v17)
  {
    v11[9] = v17;
    operator delete(v17);
  }
  size_t v18 = *v14;
  if (*v14)
  {
    v11[6] = v18;
    operator delete(v18);
  }
  std::locale::~locale(v13);
  *size_t v11 = v12;
  uint64_t v19 = v11[1];
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  _Unwind_Resume(a1);
}

void sub_10004F1E0(std::locale *a1)
{
  sub_10004FCB4(a1);

  operator delete();
}

void sub_10004F218(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(signed __int8 **)(a2 + 16);
  unsigned int v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0;
    int v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  signed __int8 v6 = *v4;
  unsigned __int8 v122 = *v4;
  signed __int8 v7 = v4[1];
  unsigned __int8 v123 = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v122 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    unsigned __int8 v123 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  uint64_t v8 = a1 + 16;
  sub_10004FEC8(a1 + 16, (char *)&v122, (char *)&v124, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__p[2])) {
      goto LABEL_8;
    }
LABEL_58:
    int v36 = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  std::string v38 = __p[1];
  operator delete(__p[0]);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v12 = (unsigned char *)(v9 + 1);
    while (v122 != *(v12 - 1) || v123 != *v12)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_218;
  }
LABEL_17:
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v36 = 0;
  }
  else
  {
    memset(__p, 170, sizeof(__p));
    sub_10004FDC8(a1 + 16, (char *)&v122, (char *)&v124);
    uint64_t v14 = *(void *)(a1 + 88);
    char v15 = HIBYTE(__p[2]);
    uint64_t v16 = *(void *)(a1 + 96) - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v112 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v19 = (void *)HIBYTE(__p[2]);
      }
      else {
        uint64_t v19 = __p[1];
      }
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v20 = __p;
      }
      else {
        uint64_t v20 = (void **)__p[0];
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = *(char *)(v14 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v24 = *(void *)(v14 + 8);
        }
        if (v23 >= 0) {
          uint64_t v25 = (const void *)v14;
        }
        else {
          uint64_t v25 = *(const void **)v14;
        }
        if (v24 >= (unint64_t)v19) {
          size_t v26 = (size_t)v19;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(v20, v25, v26);
        BOOL v28 = (unint64_t)v19 >= v24;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = *(char *)(v14 + 47);
          if (v29 >= 0) {
            size_t v30 = *(unsigned __int8 *)(v14 + 47);
          }
          else {
            size_t v30 = *(void *)(v14 + 32);
          }
          if (v29 >= 0) {
            char v31 = (const void *)(v14 + 24);
          }
          else {
            char v31 = *(const void **)(v14 + 24);
          }
          if ((unint64_t)v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = (size_t)v19;
          }
          int v33 = memcmp(v31, v20, v32);
          BOOL v34 = v30 >= (unint64_t)v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          int v35 = 0;
          int v36 = 0;
          goto LABEL_163;
        }
      }
      int v36 = 1;
      int v35 = 5;
LABEL_163:
      uint64_t v8 = a1 + 16;
      char v15 = v112;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      int v36 = 0;
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_200;
  }
  memset(__p, 170, sizeof(__p));
  sub_10005015C(v8, (char *)&v122, (char *)&v124, __p);
  uint64_t v88 = *(void *)(a1 + 136);
  uint64_t v89 = HIBYTE(__p[2]);
  uint64_t v90 = *(void *)(a1 + 144) - v88;
  if (v90)
  {
    int v117 = v36;
    uint64_t v91 = 0;
    unint64_t v92 = v90 / 24;
    v93 = __p[0];
    v94 = __p[1];
    if (SHIBYTE(__p[2]) >= 0) {
      v95 = (unsigned __int8 *)HIBYTE(__p[2]);
    }
    else {
      v95 = (unsigned __int8 *)__p[1];
    }
    if (v92 <= 1) {
      uint64_t v96 = 1;
    }
    else {
      uint64_t v96 = v90 / 24;
    }
    BOOL v97 = 1;
    while (1)
    {
      v98 = (unsigned __int8 **)(v88 + 24 * v91);
      v99 = (unsigned __int8 *)*((unsigned __int8 *)v98 + 23);
      int v100 = (char)v99;
      if ((char)v99 < 0) {
        v99 = v98[1];
      }
      if (v95 == v99)
      {
        if (v100 >= 0) {
          v101 = (unsigned __int8 *)(v88 + 24 * v91);
        }
        else {
          v101 = *v98;
        }
        if ((v89 & 0x80) != 0)
        {
          uint64_t v120 = v88;
          int v104 = memcmp(v93, v101, (size_t)v94);
          uint64_t v88 = v120;
          if (!v104)
          {
            int v35 = 5;
            int v36 = 1;
            goto LABEL_193;
          }
        }
        else
        {
          if (!v89)
          {
            int v36 = 1;
            if (v97) {
              goto LABEL_220;
            }
            goto LABEL_200;
          }
          v102 = __p;
          uint64_t v103 = v89;
          while (*(unsigned __int8 *)v102 == *v101)
          {
            v102 = (void **)((char *)v102 + 1);
            ++v101;
            if (!--v103)
            {
              int v36 = 1;
              int v35 = 5;
              goto LABEL_192;
            }
          }
        }
      }
      BOOL v97 = ++v91 < v92;
      if (v91 == v96)
      {
        int v35 = 0;
        int v36 = v117;
        goto LABEL_192;
      }
    }
  }
  BOOL v97 = 0;
  int v35 = 0;
LABEL_192:
  if ((v89 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p[0]);
  if (!v97)
  {
LABEL_200:
    if ((char)v122 < 0)
    {
      int v108 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      int v105 = *(_DWORD *)(a1 + 160);
      uint64_t v106 = *(void *)(*(void *)(a1 + 24) + 16);
      int v107 = *(_DWORD *)(v106 + 4 * v122);
      if (((v107 & v105) != 0 || v122 == 95 && (v105 & 0x80) != 0)
        && ((char)v123 & 0x80000000) == 0
        && ((*(_DWORD *)(v106 + 4 * v123) & v105) != 0 || (v105 & 0x80) != 0 && v123 == 95))
      {
        goto LABEL_218;
      }
      int v108 = *(_DWORD *)(a1 + 164);
      if ((v107 & v108) != 0 || v122 == 95 && (v108 & 0x80) != 0)
      {
LABEL_217:
        int v109 = v36;
LABEL_219:
        int v36 = v109;
        goto LABEL_220;
      }
    }
    if (((char)v123 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v123) & v108) == 0)
      {
        int v109 = 1;
        if (v123 != 95 || (v108 & 0x80) == 0) {
          goto LABEL_219;
        }
      }
      goto LABEL_217;
    }
LABEL_218:
    int v109 = 1;
    goto LABEL_219;
  }
LABEL_195:
  if (v35)
  {
LABEL_220:
    uint64_t v37 = 2;
    goto LABEL_221;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = **(unsigned char **)(a2 + 16);
  unsigned __int8 v122 = v39;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v39);
    unsigned __int8 v122 = v39;
  }
  unint64_t v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    do
    {
      int v42 = *v40++;
      if (v42 == v39) {
        goto LABEL_77;
      }
    }
    while (--v41);
  }
  unsigned int v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    char v45 = *(void **)(a1 + 72);
    unsigned __int8 v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    unint64_t v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45)
    {
LABEL_77:
      int v36 = 1;
      goto LABEL_221;
    }
  }
  uint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    memset(__p, 170, sizeof(__p));
    if (*(unsigned char *)(a1 + 170))
    {
      sub_10004FDC8(a1 + 16, (char *)&v122, (char *)&v123);
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }
    else
    {
      HIBYTE(__p[2]) = 1;
      LOWORD(__p[0]) = v39;
    }
    uint64_t v50 = v48 - v49;
    if (v50)
    {
      uint64_t v118 = v37;
      int v115 = v36;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v113 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v53 = (void *)HIBYTE(__p[2]);
      }
      else {
        uint64_t v53 = __p[1];
      }
      if (SHIBYTE(__p[2]) >= 0) {
        char v54 = __p;
      }
      else {
        char v54 = (void **)__p[0];
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          size_t v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          uint64_t v59 = (const void *)v49;
        }
        else {
          uint64_t v59 = *(const void **)v49;
        }
        if (v58 >= (unint64_t)v53) {
          size_t v60 = (size_t)v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = (unint64_t)v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            size_t v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            size_t v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            uint64_t v65 = (const void *)(v49 + 24);
          }
          else {
            uint64_t v65 = *(const void **)(v49 + 24);
          }
          if ((unint64_t)v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = (size_t)v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= (unint64_t)v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          int v36 = v115;
          goto LABEL_123;
        }
      }
      int v36 = 1;
LABEL_123:
      uint64_t v37 = v118;
      if ((v113 & 0x80) == 0)
      {
LABEL_125:
        if (v56) {
          goto LABEL_221;
        }
        goto LABEL_126;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((HIBYTE(__p[2]) & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p[0]);
    goto LABEL_125;
  }
LABEL_126:
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_155;
  }
  memset(__p, 170, sizeof(__p));
  sub_10005015C(a1 + 16, (char *)&v122, (char *)&v123, __p);
  uint64_t v69 = *(void *)(a1 + 136);
  uint64_t v70 = HIBYTE(__p[2]);
  uint64_t v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    uint64_t v119 = v37;
    int v116 = v36;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    uint64_t v75 = __p[0];
    uint64_t v74 = __p[1];
    if (SHIBYTE(__p[2]) >= 0) {
      char v76 = (unsigned __int8 *)HIBYTE(__p[2]);
    }
    else {
      char v76 = (unsigned __int8 *)__p[1];
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    do
    {
      char v79 = (unsigned __int8 **)(v69 + 24 * v72);
      v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      int v81 = (char)v80;
      if ((char)v80 < 0) {
        v80 = v79[1];
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          unsigned __int8 v82 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          unsigned __int8 v82 = *v79;
        }
        if ((v70 & 0x80) != 0)
        {
          uint64_t v114 = v69;
          int v85 = memcmp(v75, v82, (size_t)v74);
          uint64_t v69 = v114;
          if (!v85)
          {
            int v36 = 1;
            uint64_t v37 = v119;
            goto LABEL_153;
          }
        }
        else
        {
          if (!v70)
          {
            int v36 = 1;
            uint64_t v37 = v119;
            if (!v78) {
              goto LABEL_155;
            }
            goto LABEL_221;
          }
          v83 = __p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              int v36 = 1;
              goto LABEL_150;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
    }
    while (v72 != v77);
    int v36 = v116;
LABEL_150:
    uint64_t v37 = v119;
    if ((v70 & 0x80) == 0) {
      goto LABEL_154;
    }
  }
  else
  {
    BOOL v78 = 0;
    if ((HIBYTE(__p[2]) & 0x80) == 0) {
      goto LABEL_154;
    }
  }
LABEL_153:
  operator delete(__p[0]);
LABEL_154:
  if (v78) {
    goto LABEL_221;
  }
LABEL_155:
  if (((char)v122 & 0x80000000) == 0)
  {
    unsigned int v86 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v122) & v86) != 0) {
      goto LABEL_77;
    }
    int v87 = (v86 >> 7) & 1;
    if (v122 != 95) {
      int v87 = 0;
    }
    if (v87 == 1) {
      goto LABEL_77;
    }
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v110 = 0;
    int v111 = -993;
  }
  else
  {
    *(void *)(a2 + 16) += v37;
    uint64_t v110 = *(void *)(a1 + 8);
    int v111 = -995;
  }
  *(_DWORD *)a2 = v111;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v110;
}

void sub_10004FB80(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_10004FC18((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10004FC18(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_10004FC70(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *sub_10004FCB4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_1001532C0;
  signed __int8 v7 = a1 + 17;
  sub_10002A71C((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  sub_10004FB80((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_100152F78;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_10004FDC8(uint64_t a1, char *a2, char *a3)
{
  memset(__p, 170, sizeof(__p));
  sub_1000500B4(__p, a2, a3, a3 - a2);
  uint64_t v4 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v4 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, &v4[(void)v5]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10004FEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004FEC8(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__s, 170, sizeof(__s));
  sub_1000500B4(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_8;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_16;
    }
LABEL_10:
    operator delete(p_s);
    return;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_16:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v11;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v10 = *(void *)(a4 + 8);
      if (v10 != 1 && v10 != 12)
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a4 + 23);
      if (v9 != 12 && v9 != 1)
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
LABEL_8:
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_10;
      }
    }
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_8;
  }
}

void sub_100050078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000500B4(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001C950();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_10005015C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  memset(__p, 170, sizeof(__p));
  sub_1000500B4(__p, a2, a3, a3 - a2);
  memset(a4, 170, 24);
  signed __int8 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    signed __int8 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = a4;
      }
      else {
        char v10 = (unsigned char *)*a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a4 = 0;
      a4[1] = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *((unsigned char *)a4 + 23) = 0;
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100050298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000502BC()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_100050300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_100050314(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      char v10 = sub_10005093C(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      char v10 = sub_100050704(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  uint64_t v19 = sub_1000509F0(a1, a2 + 2, a3, (uint64_t)&v26);
  uint64_t v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_100050C34(a1, v13, a3, &v26);
        }
        else
        {
          uint64_t v14 = (char *)sub_100050B0C(a1, v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          sub_100051298(v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        uint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_40;
      }
LABEL_25:
      sub_10004ED88(v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    char v21 = 1;
    uint64_t v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  uint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    uint64_t v18 = sub_1000509F0(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    uint64_t v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if (v17 == 92)
    {
      if (v11) {
        uint64_t v18 = sub_100050C34(a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v18 = (char *)sub_100050B0C(a1, v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  std::string v24 = v26;
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  memset(&v26, 0, sizeof(v26));
  sub_100050E3C(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v21) {
    return v4;
  }
  return (char *)v6;
}

void sub_10005068C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100050704(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = a3 - 2;
  unint64_t v7 = a2;
  uint64_t v8 = a2;
  for (i = a2; ; uint64_t v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && *i == 93) {
      break;
    }
    if (a2 == v6) {
      goto LABEL_33;
    }
    ++v7;
    --v6;
  }
  if (v8 == a3) {
LABEL_33:
  }
    sub_1000502BC();
  memset(v18, 170, sizeof(v18));
  sub_100051590(a1, a2, v7, (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = (char *)v18;
      goto LABEL_14;
    }
LABEL_34:
    sub_1000514F4();
  }
  int v11 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_34;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (char *)v18[0];
LABEL_14:
  sub_10005177C(a1, v12, &v11[(void)v12], __p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1]) {
      goto LABEL_16;
    }
  }
  else if (HIBYTE(__p[2]))
  {
LABEL_16:
    sub_10005154C(a4, (long long *)__p);
    goto LABEL_28;
  }
  unint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    unint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    int v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      int v15 = (void **)v18[0];
    }
    sub_100051298((uint64_t)a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      sub_1000514F4();
    }
    uint64_t v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v14 = (void **)v18[0];
    }
    sub_10004ED88((uint64_t)a4, *(char *)v14);
  }
LABEL_28:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  return v7 + 2;
}

void sub_1000508FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10005093C(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_11;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_11:
  }
    sub_1000502BC();
  int v10 = sub_100051AEC(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    sub_100051A94();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *sub_1000509F0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    sub_1000502BC();
  sub_100051590(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    sub_1000514F4();
  }
  return v6 + 2;
}

unsigned __int8 *sub_100050B0C(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_10004DA00();
  }
  int v6 = *a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return sub_10004DBE0(a1, a2, a3, this);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_10004ED88(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        unint64_t v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v6 != 100) {
        return sub_10004DBE0(a1, a2, a3, this);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16sub_100027DA4((uint64_t)&a9, 0) = v8;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned __int8 *)(a2 + 1);
      }
      return sub_10004DBE0(a1, a2, a3, this);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_100051C0C(a5, 95);
    return (unsigned __int8 *)(a2 + 1);
  }
  return sub_10004DBE0(a1, a2, a3, this);
}

char *sub_100050C34(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_45:
  }
    sub_10004DA00();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_10004DEF4(a1);
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_45;
  }
  std::string::value_type v7 = v5 - 48;
  unint64_t v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    unint64_t v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    std::string::value_type v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v8 = a2[2];
      int v9 = v8 & 0xF8;
      std::string::value_type v10 = v8 + 8 * v7 - 48;
      if (v9 == 48) {
        unint64_t v11 = a2 + 3;
      }
      else {
        unint64_t v11 = a2 + 2;
      }
      if (v9 == 48) {
        std::string::value_type v7 = v10;
      }
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this) {
    sub_10004DEF4(a1);
  }
  std::string::operator=(this, v7);
  return v11;
}

void sub_100050E3C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        char v8 = v4;
        if (v4[23] < 0) {
          char v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        std::string::value_type v10 = v4;
        if (v4[23] < 0) {
          std::string::value_type v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        long long v13 = v3;
        if (v3[23] < 0) {
          long long v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        uint64_t v19 = a2;
        if (a2[23] < 0) {
          uint64_t v19 = *(char **)a2;
        }
        uint64_t v20 = a2;
        if (a2[23] < 0) {
          uint64_t v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    sub_100051FEC(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      BOOL v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    sub_100051FEC(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)unint64_t v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    sub_100051E54((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      sub_1000520EC();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      unsigned char *v35 = v34;
    }
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    sub_100051E54((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_100051244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_100051298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    std::string::value_type v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_1000523AC(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        BOOL v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_1000523AC(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        BOOL v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        unint64_t v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_100028DEC();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  std::string::value_type v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_1000523AC(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  BOOL v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = v26;
}

void sub_1000514F4()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_100051538(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005154C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = sub_10005193C(v3, a2);
  }
  else
  {
    sub_1000518DC(v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_100051590(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__s, 170, sizeof(__s));
  sub_1000500B4(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_8;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_16;
    }
LABEL_10:
    operator delete(p_s);
    return;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_16:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v11;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v10 = *(void *)(a4 + 8);
      if (v10 != 1 && v10 != 12)
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a4 + 23);
      if (v9 != 12 && v9 != 1)
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
LABEL_8:
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_10;
      }
    }
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_8;
  }
}

void sub_100051740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005177C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  memset(__p, 170, sizeof(__p));
  sub_1000500B4(__p, a2, a3, a3 - a2);
  memset(a4, 170, 24);
  __int16 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = (unsigned char *)*a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a4 = 0;
      a4[1] = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *((unsigned char *)a4 + 23) = 0;
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000518B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000518DC(void *result, long long *a2)
{
  char v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_100017424((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100051934(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10005193C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10002AC98(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v11, *(void **)a2, *((void *)a2 + 1));
    std::string v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_10002AC20(a1, v15);
  uint64_t v13 = a1[1];
  sub_10002AE30((uint64_t)v15);
  return v13;
}

void sub_100051A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100051A94()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_100051AD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100051AEC(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  memset(__p, 170, sizeof(__p));
  sub_1000500B4(__p, a2, a3, a3 - a2);
  __int16 v6 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    __int16 v6 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, &v6[(void)v7]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_100051BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100051C0C(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      __int16 v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      unint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          long long v12 = operator new(v11);
        }
        else {
          long long v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_100028DEC();
    }
    goto LABEL_22;
  }
  __int16 v6 = (unint64_t *)(a1 + 64);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          long long v12 = operator new(v28);
        }
        else {
          long long v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unint64_t v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    long long v12 = operator new(v18);
  }
  else {
    long long v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  long long v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void **sub_100051E54(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_100028DEC();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)sub_10002019C((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    _OWORD v19[2] = v16 + 48;
    sub_100052144(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_100052330(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4sub_100027DA4((uint64_t)&a9, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_100051FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_100051FEC(uint64_t a1, char *a2, char *a3)
{
  memset(__p, 170, sizeof(__p));
  sub_1000500B4(__p, a2, a3, a3 - a2);
  unint64_t v4 = (char *)__p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v4 = (char *)HIBYTE(__p[2]);
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, &v4[(void)v5]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000520C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000520EC()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_100052130(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052144(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000521BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000521BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v15[0] = a1;
  v15[1] = &v13;
  void v15[2] = &v14;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 4sub_100027DA4((uint64_t)&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v14 + 1) = v9;
  }
  LOBYTE(v16) = 1;
  sub_1000522A4((uint64_t)v15);
  return a6;
}

uint64_t sub_1000522A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000522DC((uint64_t *)a1);
  }
  return a1;
}

void sub_1000522DC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10004FC18(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_100052330(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100052364(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_10004FC18(v4, i - 48);
  }
}

void *sub_1000523AC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100028E94();
  }
  return operator new(2 * a2);
}

void *sub_1000523E0(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10005244C(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_1000524D8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + 8);
  return result;
}

void *sub_100052508(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100052574(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_100052600(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + 8);
  return result;
}

void sub_100052638()
{
}

void sub_100052790(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000527C8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            sub_100052868();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void sub_100052868()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_1000528AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000528C0()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_100052904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10005291C(void *a1)
{
  sub_100052A74(a1);

  operator delete();
}

unsigned int *sub_100052954(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_100052B28(result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *sub_100052A08(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return sub_100052B28(result, a3);
  }
  return result;
}

void sub_100052A3C(void *a1)
{
  sub_100052A74(a1);

  operator delete();
}

void *sub_100052A74(void *a1)
{
  *a1 = off_1001533F8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_100152F78;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unsigned int *sub_100052B28(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_100052B80()
{
}

uint64_t sub_100052B94(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + 8);
  return result;
}

void sub_100052BAC(void *a1)
{
  sub_100052A74(a1);

  operator delete();
}

void sub_100052BE4(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_100052BF0(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + v3);
  return result;
}

void sub_100052C18()
{
}

uint64_t sub_100052C2C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = *(void *)(result + 8);
  return result;
}

uint64_t sub_100052C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = sub_100052CE4(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void sub_100052C8C()
{
  exceptiouint64_t n = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_100052CD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100052CE4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = sub_100052D80(a1, a2, a3);
  if (v6 == a2) {
    return a2;
  }

  return sub_100052E94(a1, v6, a3);
}

unsigned char *sub_100052D80(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = sub_100053064(a1, a2, a3);
  uint64_t v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*a2 == 92) {
      uint64_t v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    }
    if ((unsigned char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        int v11 = sub_100053350(a1, a2[1]);
        uint64_t v12 = 2;
        if (!v11) {
          uint64_t v12 = 0;
        }
        return &a2[v12];
      }
    }
    else
    {
      sub_10004D73C(a1);
      uint64_t v10 = (unsigned char *)sub_100052C40(a1, v9, (uint64_t)a3);
      if (v10 == a3 || v10 + 1 == a3 || *v10 != 92 || v10[1] != 41) {
        sub_10004BB4C();
      }
      uint64_t v7 = v10 + 2;
      sub_10004D7C0(a1);
    }
  }
  return v7;
}

unsigned __int8 *sub_100052E94(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if (v4 == 42) {
      sub_100052638();
    }
    if (a2 + 1 != a3 && v4 == 92 && a2[1] == 123)
    {
      uint64_t v6 = a2 + 2;
      int v13 = 0;
      uint64_t v7 = sub_1000527C8(a1, a2 + 2, a3, &v13);
      if (v6 == v7) {
        goto LABEL_16;
      }
      if (v7 != a3)
      {
        BOOL v8 = v7 + 1;
        int v9 = *v7;
        if (v9 == 44)
        {
          int v12 = -1;
          uint64_t v10 = sub_1000527C8(a1, v8, a3, &v12);
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v12 != -1 && v12 < v13) {
LABEL_16:
            }
              sub_100052868();
LABEL_20:
            sub_100052638();
          }
        }
        else if (v8 != a3 && v9 == 92 && *v8 == 125)
        {
          goto LABEL_20;
        }
      }
      sub_1000528C0();
    }
  }
  return a2;
}

unsigned char *sub_100053064(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_10005319C(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    goto LABEL_12;
  }
  int v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_10004DEF4(a1);
  }
  uint64_t result = sub_10005319C(a1, a2, a3);
  if (result == a2)
  {
    if (*a2 == 46) {
      operator new();
    }
LABEL_12:
    return sub_10004D628(a1, a2, a3);
  }
  return result;
}

unsigned char *sub_10005319C(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3
    && a2 + 1 != a3
    && *a2 == 92
    && ((char)a2[1] - 36) <= 0x3A
    && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
  {
    sub_10004DEF4(a1);
  }
  return a2;
}

void *sub_100053218(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100053284(void *a1)
{
  *a1 = off_100152F78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_100053310(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_100027DA4((uint64_t)&a9, 0) = v3;
  return result;
}

uint64_t sub_100053350(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_10004E08C(a1);
    }
    sub_10004E034();
  }
  return 0;
}

unsigned __int8 *sub_1000533B0(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_100053410(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    sub_100052C8C();
  }
  do
  {
    uint64_t v7 = v6;
    int v6 = sub_100053410(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *sub_100053410(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_100053554(a1, a2, a3);
  uint64_t v7 = (unsigned __int8 *)v6;
  if (v6 == a2 && v6 != a3)
  {
    int v8 = *a2;
    if (v8 == 36) {
      sub_10004B98C();
    }
    if (v8 != 40)
    {
      if (v8 == 94) {
        sub_10004B908();
      }
      return (unsigned __int8 *)a2;
    }
    sub_10004D73C(a1);
    ++*(_DWORD *)(a1 + 36);
    int v9 = (char *)sub_10004A844(a1, a2 + 1, a3);
    if (v9 == a3 || (uint64_t v10 = v9, *v9 != 41)) {
      sub_10004BB4C();
    }
    sub_10004D7C0(a1);
    --*(_DWORD *)(a1 + 36);
    uint64_t v7 = (unsigned __int8 *)(v10 + 1);
  }
  if (v7 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }

  return sub_10004B5C8(a1, v7, (unsigned __int8 *)a3);
}

char *sub_100053554(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_10005363C(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_1000536C8(a1, a2, a3);
    if (result == a2)
    {
      if (a2 != a3 && *a2 == 46) {
        operator new();
      }
      return sub_10004D628(a1, a2, a3);
    }
  }
  return result;
}

char *sub_10005363C(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    uint64_t v4 = (v3 - 36);
    if (v4 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (v3 - 36)) & 0x5800000080004D1) != 0) {
      return a2;
    }
    if (v4 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        return a2;
      }
    }
    else
    {
LABEL_8:
      if ((v3 - 123) < 2) {
        return a2;
      }
    }
    sub_10004DEF4(a1);
  }
  return a2;
}

char *sub_1000536C8(uint64_t a1, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 != a3)
  {
    uint64_t v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      int v5 = *v4;
      BOOL v6 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (!v6 || (v5 - 123) < 3) {
        sub_10004DEF4(a1);
      }
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        return sub_100050C34(a1, v4, a3, 0);
      }
      else
      {
        int v8 = sub_100053350(a1, *v4);
        uint64_t v9 = 2;
        if (!v8) {
          uint64_t v9 = 0;
        }
        v3 += v9;
      }
    }
  }
  return v3;
}

uint64_t *sub_100053790(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = (void *)(*(void *)v1 + 128);
  int v3 = sub_100010388(v2, (unsigned __int8 *)(v1 + 24));
  uint64_t v4 = v3;
  if (v3)
  {
    int v5 = (uint64_t *)*((void *)v3 + 5);
    BOOL v6 = (uint64_t *)*((void *)v4 + 6);
    uint64_t v7 = *(std::__shared_weak_count **)(v1 + 16);
    uint64_t v12 = *(void *)(v1 + 8);
    int v13 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = sub_100053920(v5, v6, (uint64_t)&v12);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    sub_1000539CC((uint64_t)(v4 + 40), (uint64_t)v8, *((long long **)v4 + 6));
    if (*((void *)v4 + 5) == *((void *)v4 + 6))
    {
      sub_100046A6C(v2, v4, (uint64_t)v14);
      sub_100049B00((uint64_t)v14, 0);
    }
  }
  sub_1000538BC(&v11);
  return sub_100024E7C((uint64_t *)&v10);
}

void sub_10005388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  sub_1000538BC(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000538BC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100053920(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 2; *(i - 1) != *(void *)(a3 + 8); i += 2)
  {
    if (i == a2) {
      return a2;
    }
  }
  uint64_t v7 = i - 2;
  if (i - 2 == a2) {
    return a2;
  }
  while (i != a2)
  {
    uint64_t v8 = i[1];
    if (v8 != *(void *)(a3 + 8))
    {
      uint64_t v9 = *i;
      uint64_t *i = 0;
      i[1] = 0;
      uint64_t v10 = (std::__shared_weak_count *)v7[1];
      uint64_t *v7 = v9;
      v7[1] = v8;
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      v7 += 2;
    }
    i += 2;
  }
  return v7;
}

uint64_t sub_1000539CC(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    int v5 = (uint64_t *)(a1 + 8);
    sub_100053A80((uint64_t)&v11, a3, *(long long **)(a1 + 8), a2);
    uint64_t v7 = v6;
    for (uint64_t i = *v5; i != v7; i -= 16)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(i - 8);
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *(void *)(a1 + 8) = v7;
  }
  return a2;
}

long long *sub_100053A80(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)int v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100053AEC(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void sub_100053B6C(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = (void *)(*(void *)a1 + 8);
  sub_100053C0C((void *)(**(void **)a1 + 256), (uint64_t)v1);
  sub_10001266C(v1);
  operator delete();
}

void sub_100053C00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_100053C0C(void *a1, uint64_t a2)
{
  sub_100053C90(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100053C90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100053D18(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = (void *)(*(void *)a1 + 8);
  sub_100053C0C((void *)(**(void **)a1 + 224), (uint64_t)v1);
  sub_10001266C(v1);
  operator delete();
}

void sub_100053DAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t *sub_100053DB8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v3 = a1;
  uint64_t v4 = v1;
  sub_1000485E8(*(void *)v1, (uint64_t **)(v1 + 8), v1 + 32, &object);
  sub_100053F00((dispatch_object_t *)(v1 + 48), &object);
  if (object) {
    dispatch_release(object);
  }
  sub_100053E7C(&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_100053E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  sub_100053E7C(&a10);
  sub_100024E7C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100053E7C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(v1 + 48);
    if (v2)
    {
      dispatch_group_leave(v2);
      int v3 = *(NSObject **)(v1 + 48);
      if (v3) {
        dispatch_release(v3);
      }
    }
    sub_100016EAC(v1 + 32);
    sub_100016B28((uint64_t **)(v1 + 40), *(unsigned __int8 *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100053F00(dispatch_object_t *a1, NSObject **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    dispatch_retain(*a1);
    dispatch_group_enter(v2);
    int v5 = *a2;
    global_queue = dispatch_get_global_queue(0, 0);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1174405120;
    void v7[2] = nullsub_35;
    void v7[3] = &unk_100153538;
    dispatch_group_t group = v2;
    dispatch_retain(v2);
    if (v2) {
      dispatch_group_enter(v2);
    }
    dispatch_group_notify(v5, global_queue, v7);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_10005402C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void sub_100054080(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    BOOL v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t sub_1000540D0(uint64_t a1)
{
  return sub_10000E9E0(**(void **)(a1 + 40), *(uint64_t **)(*(void *)(a1 + 40) + 8));
}

uint64_t *sub_1000540DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v3 = a1;
  uint64_t v4 = v1;
  sub_10000E708(*(void *)v1, (long long *)(v1 + 8));
  sub_100042938(&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_10005414C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100042938((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100054168(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_1000484A4(**a1);
  operator delete();
}

void sub_1000541E8()
{
}

void sub_100054214(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1000147D8(v3);
    }
    v1 += 16;
  }
}

uint64_t sub_100054258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&_OWORD v13[3] = 0xAAAAAAAAAAAAAAAALL;
  void v13[6] = 0xAAAAAAAAAAAAAA00;
  long long v15 = v9;
  v13[5] = 0;
  long long v14 = 0uLL;
  LOBYTE(v15) = 0;
  BYTE8(v15) = 0;
  uint64_t v16 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, 24);
  int v10 = sub_100054390(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_10005456C(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v10) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_100054374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100054390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_10004C444(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_1000546FC(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      int v10 = (uint64_t *)(a4 + 24);
    }
    else {
      int v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(unsigned char *)(a4 + 88) = v12 != *(void *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_10004C96C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
        int v16 = sub_1000546FC(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_10004C96C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (long long *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }
      if (v17 == v18) {
        int v10 = (uint64_t *)(a4 + 24);
      }
      else {
        int v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
LABEL_14:
    sub_10004C96C((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
    if (sub_1000546FC(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        int v10 = (uint64_t *)(a4 + 24);
      }
      else {
        int v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  *(void *)(a4 + 8) = *(void *)a4;
  return result;
}

void sub_10005456C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_1000565E0(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        uint64_t v19 = a4 + 3;
      }
      else {
        uint64_t v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        uint64_t v20 = a4 + 3;
      }
      else {
        uint64_t v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((unsigned char *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_1000546FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_10004C4B8(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_100054D0C(a1, a2, a3, a4, a5, a6);
  }
  return sub_10005471C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10005471C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v61 = 0;
    memset(&v61[8], 0, 85);
    sub_100055324(&v58, (uint64_t)v61);
    if (*(void *)&v61[56])
    {
      *(void *)&v61[64] = *(void *)&v61[56];
      operator delete(*(void **)&v61[56]);
    }
    if (*(void *)&v61[32])
    {
      *(void *)&v61[40] = *(void *)&v61[32];
      operator delete(*(void **)&v61[32]);
    }
    uint64_t v12 = *((void *)&v58 + 1);
    unint64_t v13 = *((void *)&v60 + 1) + v60 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v58 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_10004CBB8(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    uint64_t v54 = 0;
    uint64_t v55 = a2;
    char v56 = 0;
    unsigned int v18 = 0;
    uint64_t v19 = *((void *)&v60 + 1);
    uint64_t v20 = *((void *)&v58 + 1);
    unint64_t v21 = *((void *)&v60 + 1) + v60 - 1;
    unint64_t v22 = v21 / 0x2A;
    unint64_t v23 = 3 * (v21 % 0x2A);
    *(void *)(*(void *)(*((void *)&v58 + 1) + 8 * v22) + 32 * v23 + 8sub_100027DA4((uint64_t)&a9, 0) = v6;
    uint64_t v53 = a3;
    uint64_t v24 = a3 - a2;
    uint64_t v25 = *(void *)(v20 + 8 * v22) + 32 * v23;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v24) {
        sub_10004CBE8();
      }
      unint64_t v27 = v19 + v60 - 1;
      uint64_t v28 = *(void *)(*((void *)&v58 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == v53;
          BOOL v36 = v33 != v55 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v54;
          if ((v56 & (v54 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v24)
          {
            uint64_t v54 = v38;
            sub_100055428(&v58);
            char v56 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v58 + 1);
          uint64_t v40 = v59;
          if ((void)v59 == *((void *)&v58 + 1))
          {
            uint64_t v40 = *((void *)&v58 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v58 + 1) + 8 * ((unint64_t)v60 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v60 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v58 + 1) + 8 * ((*((void *)&v60 + 1) + (void)v60) / 0x2AuLL))
                + 96 * ((*((void *)&v60 + 1) + (void)v60) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_10004D07C((uint64_t)&v60 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v58 + 1);
              uint64_t v40 = v59;
            }
          }
          *((void *)&v60 + 1) = 0;
          unint64_t v48 = v40 - (void)v39;
          if (v48 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v58 + 1) + 8);
              *((void *)&v58 + 1) = v39;
              unint64_t v48 = v59 - (void)v39;
            }
            while ((void)v59 - (void)v39 > 0x10uLL);
          }
          if (v48 >> 3 == 1)
          {
            uint64_t v49 = 21;
          }
          else
          {
            if (v48 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v49 = 42;
          }
          *(void *)&long long v60 = v49;
LABEL_53:
          char v56 = 1;
          uint64_t v54 = v24;
LABEL_38:
          uint64_t v19 = *((void *)&v60 + 1);
          if (*((void *)&v60 + 1)) {
            continue;
          }
          if ((v56 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v50 = *a4;
          *(void *)uint64_t v50 = v55;
          *(void *)(v50 + 8) = v55 + v54;
          uint64_t v51 = 1;
          *(unsigned char *)(v50 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_1000554BC((uint64_t)&v58, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_100055428(&v58);
          goto LABEL_38;
        case 0xFFFFFC20:
          *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v61[64] = v45;
          *(_OWORD *)&v61[80] = v45;
          *(_OWORD *)&v61[32] = v45;
          *(_OWORD *)&v61[48] = v45;
          *(_OWORD *)int v61 = v45;
          *(_OWORD *)&unsigned char v61[16] = v45;
          long long v46 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v61 = *(_OWORD *)v30;
          *(_OWORD *)&unsigned char v61[16] = v46;
          memset(&v61[32], 0, 24);
          sub_10004D3F8(&v61[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          memset(&v61[56], 0, 24);
          sub_10004D478(&v61[56], *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v47 = *v32;
          *(void *)&v61[85] = *(void *)(v30 + 85);
          *(void *)&v61[80] = v47;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(**(void **)&v61[80] + 24))(*(void *)&v61[80], 0, v61);
          sub_100055324(&v58, (uint64_t)v61);
          if (*(void *)&v61[56])
          {
            *(void *)&v61[64] = *(void *)&v61[56];
            operator delete(*(void **)&v61[56]);
          }
          if (*(void *)&v61[32])
          {
            *(void *)&v61[40] = *(void *)&v61[32];
            operator delete(*(void **)&v61[32]);
          }
          goto LABEL_38;
        default:
          sub_10004CC40();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v51 = 0;
  }
  sub_100056130(&v58);
  return v51;
}

void sub_100054C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
}

uint64_t sub_100054D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  *(_DWORD *)&v57[36] = -1431655766;
  *(void *)uint64_t v55 = 0xAAAAAAAA00000000;
  memset(&v55[8], 0, 32);
  long long v56 = 0u;
  memset(v57, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_43;
  }
  *((void *)&v53 + 1) = a3;
  unint64_t v54 = 0xAAAAAAAAAAAAAA00;
  *(void *)&long long v53 = a3;
  *(_DWORD *)unint64_t v52 = 0;
  memset(&v52[8], 0, 85);
  uint64_t v50 = (_OWORD *)sub_10004CC98((uint64_t *)&v49, (uint64_t)v52);
  if (*(void *)&v52[56])
  {
    *(void *)&v52[64] = *(void *)&v52[56];
    operator delete(*(void **)&v52[56]);
  }
  if (*(void *)&v52[32])
  {
    *(void *)&v52[40] = *(void *)&v52[32];
    operator delete(*(void **)&v52[32]);
  }
  int v44 = a4;
  uint64_t v11 = v50;
  *((_DWORD *)v50 - 24) = 0;
  *((void *)v11 - 11) = a2;
  *((void *)v11 - 1sub_100027DA4((uint64_t)&a9, 0) = a2;
  *((void *)v11 - 9) = a3;
  sub_10004CB7C((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v53);
  sub_10004CBB8((uint64_t)v50 - 40, *(unsigned int *)(a1 + 32));
  uint64_t v45 = a3;
  uint64_t v46 = 0;
  char v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = a3 - a2;
  uint64_t v15 = v50;
  *((void *)v50 - 2) = v6;
  *((_DWORD *)v15 - 2) = a5;
  *((unsigned char *)v15 - 4) = a6;
  do
  {
    BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
    if (!v16) {
      sub_10004CBE8();
    }
    unsigned int v18 = v15 - 1;
    uint64_t v17 = *((void *)v15 - 2);
    uint64_t v19 = v15 - 6;
    if (v17) {
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
    }
    switch(*(_DWORD *)v19)
    {
      case 0xFFFFFC18:
        uint64_t v20 = *((void *)v15 - 10);
        if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v45) {
          goto LABEL_19;
        }
        char v28 = v12;
        uint64_t v29 = v20 - *((void *)v15 - 11);
        uint64_t v30 = v46;
        if ((v28 & (v46 >= v29)) == 0)
        {
          long long v31 = *(v15 - 5);
          *(_OWORD *)uint64_t v55 = *(_OWORD *)v19;
          *(_OWORD *)&unsigned char v55[16] = v31;
          if (v55 != v19)
          {
            sub_1000562D8(&v55[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
            sub_100056490(v57, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          }
          uint64_t v32 = *v18;
          *(void *)&v57[29] = *(void *)((char *)v15 - 11);
          *(void *)&v57[24] = v32;
          uint64_t v30 = v29;
        }
        uint64_t v33 = v50;
        if (v30 == v14)
        {
          uint64_t v34 = (uint64_t)v49;
          while (v33 != (void *)v34)
          {
            v33 -= 12;
            sub_10004D07C((uint64_t)&v51, v33);
          }
          uint64_t v50 = (_OWORD *)v34;
          char v12 = 1;
          uint64_t v46 = v14;
        }
        else
        {
          uint64_t v46 = v30;
          BOOL v35 = v50 - 6;
          sub_10004D07C((uint64_t)&v51, (void *)v50 - 12);
          uint64_t v50 = v35;
          char v12 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        unint64_t v21 = v50 - 6;
        sub_10004D07C((uint64_t)&v51, (void *)v50 - 12);
        uint64_t v50 = v21;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v52[64] = v22;
        *(_OWORD *)&v52[80] = v22;
        *(_OWORD *)&v52[32] = v22;
        *(_OWORD *)&v52[48] = v22;
        *(_OWORD *)unint64_t v52 = v22;
        *(_OWORD *)&unsigned char v52[16] = v22;
        long long v23 = *(v15 - 5);
        *(_OWORD *)unint64_t v52 = *(_OWORD *)v19;
        *(_OWORD *)&unsigned char v52[16] = v23;
        memset(&v52[32], 0, 24);
        sub_10004D3F8(&v52[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
        memset(&v52[56], 0, 24);
        sub_10004D478(&v52[56], *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
        uint64_t v24 = *v18;
        *(void *)&v52[85] = *(void *)((char *)v15 - 11);
        *(void *)&v52[80] = v24;
        (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v52[80] + 24))(*(void *)&v52[80], 0, v52);
        uint64_t v25 = v50;
        if ((unint64_t)v50 >= v51)
        {
          uint64_t v50 = (_OWORD *)sub_10004CC98((uint64_t *)&v49, (uint64_t)v52);
          if (*(void *)&v52[56])
          {
            *(void *)&v52[64] = *(void *)&v52[56];
            operator delete(*(void **)&v52[56]);
          }
        }
        else
        {
          long long v26 = *(_OWORD *)&v52[16];
          *uint64_t v50 = *(_OWORD *)v52;
          v25[1] = v26;
          *((void *)v25 + 4) = 0;
          *((void *)v25 + 5) = 0;
          *((void *)v25 + 6) = 0;
          *((void *)v25 + 7) = 0;
          v25[2] = *(_OWORD *)&v52[32];
          *((void *)v25 + 6) = *(void *)&v52[48];
          memset(&v52[32], 0, 24);
          *((void *)v25 + 8) = 0;
          *((void *)v25 + 9) = 0;
          *(_OWORD *)((char *)v25 + 56) = *(_OWORD *)&v52[56];
          *((void *)v25 + 9) = *(void *)&v52[72];
          memset(&v52[56], 0, 24);
          uint64_t v27 = *(void *)&v52[80];
          *(void *)((char *)v25 + 85) = *(void *)&v52[85];
          *((void *)v25 + 1sub_100027DA4((uint64_t)&a9, 0) = v27;
          uint64_t v50 = v25 + 6;
        }
        if (*(void *)&v52[32])
        {
          *(void *)&v52[40] = *(void *)&v52[32];
          operator delete(*(void **)&v52[32]);
        }
        break;
      default:
        sub_10004CC40();
    }
    uint64_t v15 = v50;
  }
  while (v49 != v50);
  if (v12)
  {
    uint64_t v36 = *v44;
    *(void *)uint64_t v36 = a2;
    *(void *)(v36 + 8) = a2 + v46;
    *(unsigned char *)(v36 + 16) = 1;
    if ((void)v56 != *(void *)&v55[32])
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *(void *)&v55[32]) >> 3);
      uint64_t v38 = (unsigned char *)(*(void *)&v55[32] + 16);
      unsigned int v39 = 1;
      do
      {
        uint64_t v40 = v36 + 24 * v39;
        *(_OWORD *)uint64_t v40 = *((_OWORD *)v38 - 1);
        char v41 = *v38;
        v38 += 24;
        *(unsigned char *)(v40 + 16) = v41;
        BOOL v16 = v37 > v39++;
      }
      while (v16);
    }
    uint64_t v42 = 1;
  }
  else
  {
LABEL_43:
    uint64_t v42 = 0;
  }
  if (*(void *)v57)
  {
    *(void *)&unsigned char v57[8] = *(void *)v57;
    operator delete(*(void **)v57);
  }
  if (*(void *)&v55[32])
  {
    *(void *)&long long v56 = *(void *)&v55[32];
    operator delete(*(void **)&v55[32]);
  }
  *(void *)uint64_t v55 = &v49;
  sub_10004D4EC((void ***)v55);
  return v42;
}

void sub_1000552A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  sub_10004CB38(&a21);
  char v28 = (void ***)sub_10004CB38((void *)(v26 - 208));
  *(void *)(v26 - 208) = &a18;
  sub_10004D4EC(v28);
  _Unwind_Resume(a1);
}

__n128 sub_100055324(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1000555B0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8sub_100027DA4((uint64_t)&a9, 0) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_100055428(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  sub_10004D07C((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return sub_100055D68(a1, 1);
}

int64x2_t sub_1000554BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100055DE0((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8sub_100027DA4((uint64_t)&a9, 0) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4sub_100027DA4((uint64_t)&a9, 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_100119010);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_1000555B0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019978(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_1000558FC(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_100055A14((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100019978((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_100019978((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_100055B34(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100055C4C((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000558A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
}

void sub_1000558FC(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_100019978(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_100055A14(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_100019978(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100055B34(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_100019978(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_100055C4C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_100019978(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_100055D68(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100055DE0(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_100019978(v7, v11);
      unint64_t v43 = (char *)__p;
      int v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0xFC0uLL);
      sub_100055B34(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_100019978((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              int v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              unint64_t v43 = v22;
              int v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      unint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      int v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        int v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        sub_1000558FC(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      sub_100055A14((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100055A14((uint64_t)a1, &__p);
  }
}

void sub_1000560DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100056130(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_10004D07C((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return sub_100056288((uint64_t)a1);
}

uint64_t sub_100056288(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *sub_1000562D8(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100028DEC();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = sub_10004CAE4(a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *uint64_t v14 = &v13[v18];
  return result;
}

char *sub_100056490(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_100018368(a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_1000565E0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10005661C((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_10005661C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_100028DEC();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_10002AC98(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = &v12[24 * v8];
    long long v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      unsigned char v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = &v12[24 * v11];
    uint64_t v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

unsigned char *sub_100056798(unsigned char *result, int *a2)
{
  unint64_t v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unint64_t v5 = (char *)sub_100029400(v2);
      sub_100015438(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1000568C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t *sub_100056938(uint64_t *a1)
{
  unint64_t v5 = a1;
  uint64_t v1 = *a1;
  unint64_t v2 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " *** DAILY ROLLOVER EXPIRATION COMPLETE ***", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 280);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  sub_1000484A4(v1);
  sub_1000A311C(*(void *)(v1 + 96));
  return sub_100042CF8((uint64_t *)&v5);
}

void sub_100056A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100042CF8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100056A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0;
  *(unsigned char *)a5 = 0;
  sub_100016EAC((uint64_t)a5);
  sub_100016EAC((uint64_t)a5);
  sub_10000DC80((uint64_t)v11, a3);
  sub_10000E49C(a1, a2, (uint64_t)v11, a4, (uint64_t)v12);
  sub_10000DF64((uint64_t)v12, 1, (uint64_t)a5);
  sub_10000DF20((uint64_t)&v13);
  sub_10000DE9C(v12);
  return sub_10000DE9C(v11);
}

void sub_100056B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10000DF20(v14 + 40);
  sub_10000DE9C(&a13);
  sub_10000DE9C(&a9);
  sub_100028D64(v13);
  _Unwind_Resume(a1);
}

void sub_100056B4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  errorString[0] = 0;
  uint64_t v4 = (void *)IOCFUnserializeWithSize((const char *)(a1 + 72), *(unsigned int *)(a1 + 4), kCFAllocatorDefault, 0, errorString);
  unint64_t v5 = qword_10015EF98;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEBUG)) {
      sub_1000F9F58(a1, (uint64_t)v4, v5);
    }
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_1000712F4(v4, (uint64_t)a2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000F9EC8(a1, (uint64_t *)errorString, v5);
    }
    *(unsigned char *)a2 = 0;
    a2[1] = 0;
    sub_100016EAC((uint64_t)a2);
    sub_100016EAC((uint64_t)a2);
  }
}

void sub_100056C60(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, __int16 a14, void *a15)
{
  if (a2 == 1)
  {
    id v21 = objc_begin_catch(a1);
    int v22 = *(id *)(v18 + 128);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = [v21 name];
      long long v24 = [v21 reason];
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = v16 + 8;
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v23;
      a14 = 2114;
      a15 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[KernelEventToJson] Error: Unable to convert deserialized event %s to json: %{public}@ (%{public}@)", (uint8_t *)&buf, 0x20u);
    }
    *(unsigned char *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    sub_100016EAC(v15);
    sub_100016EAC(v15);

    objc_end_catch();
    JUMPOUT(0x100056C2CLL);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100056D68(const char *a1)
{
  return !strcmp(a1, "Time")
      || !strcmp(a1, "TimeNanoSec")
      || !strcmp(a1, "ASLMessageID")
      || !strcmp(a1, "Message")
      || !strcmp(a1, "Facility")
      || !strcmp(a1, "Sender")
      || !strcmp(a1, "PID")
      || strncmp(a1, "com.apple.message.", 0x12uLL) == 0;
}

void sub_100056E34(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = (unsigned __int8 *)&v16;
  uint64_t v18 = 0x3802000000;
  unint64_t v19 = sub_1000570B4;
  unint64_t v20 = sub_10005710C;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  int v22 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v21, 0, 0, 0, 1);
  string = xpc_dictionary_get_string(a1, "com.apple.message.summarize");
  if (string) {
    BOOL v5 = strncmp(string, "YES", 3uLL) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_10005714C;
  applier[3] = &unk_1001535B0;
  BOOL v15 = v5;
  applier[4] = &v16;
  xpc_dictionary_apply(a1, applier);
  uint64_t v6 = (char *)xpc_dictionary_get_string(a1, "Message");
  uint64_t v13 = v6;
  if (v6)
  {
    if (*v6)
    {
      sub_100030238((uint64_t)v11, &v13);
      long long v7 = sub_10000D104(v17 + 40, "Message");
      sub_100016EAC((uint64_t)v11);
      char v8 = *(unsigned char *)v7;
      *(unsigned char *)long long v7 = v11[0];
      v11[0] = v8;
      long long v9 = (uint64_t *)v7[1];
      v7[1] = (uint64_t)v12;
      unint64_t v12 = v9;
      sub_100016EAC((uint64_t)v7);
      sub_100016EAC((uint64_t)v11);
      sub_100016B28(&v12, v11[0]);
      std::string::size_type v10 = qword_10015EF28;
      if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEBUG)) {
        sub_1000F9FE4((uint64_t *)&v13, v10);
      }
    }
  }
  sub_100016A10(a2, (uint64_t)(v17 + 40));
  _Block_object_dispose(&v16, 8);
  sub_100016EAC((uint64_t)&v21);
  sub_100016B28(&v22, v21);
}

void sub_100057074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, uint64_t *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100028D64((uint64_t **)va);
  _Block_object_dispose(va1, 8);
  sub_100028D64(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000570B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_100016EAC(a2 + 40);
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;

  return sub_100016EAC(v3);
}

void sub_10005710C(uint64_t a1)
{
  sub_100016EAC(a1 + 40);
  int v2 = *(unsigned __int8 *)(a1 + 40);

  sub_100016B28((uint64_t **)(a1 + 48), v2);
}

uint64_t sub_10005714C(uint64_t a1, char *a2, void *a3)
{
  if (sub_100056D68(a2))
  {
    string_ptr = (char *)xpc_string_get_string_ptr(a3);
    unint64_t v23 = string_ptr;
    if (string_ptr)
    {
      uint64_t v7 = string_ptr;
      if (strncmp(a2, "com.apple.message.domain", 0x18uLL))
      {
        if (*(unsigned char *)(a1 + 40) && !strncmp(a2, "com.apple.message.value", 0x17uLL))
        {
          double v13 = strtod(v7, 0);
          uint64_t v14 = qword_10015EF28;
          if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEBUG)) {
            sub_1000FA060((uint64_t)v7, v14, v13);
          }
          v21[0] = 7;
          double v22 = v13;
          sub_100016EAC((uint64_t)v21);
          sub_100016EAC((uint64_t)v21);
          BOOL v15 = sub_10000D104((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
          uint64_t v10 = (uint64_t **)&v22;
          sub_100016EAC((uint64_t)v21);
          unsigned __int8 v16 = *(unsigned char *)v15;
          *(unsigned char *)BOOL v15 = v21[0];
          v21[0] = v16;
          uint64_t v17 = v15[1];
          *((double *)v15 + 1) = v22;
          double v22 = *(double *)&v17;
          sub_100016EAC((uint64_t)v15);
          sub_100016EAC((uint64_t)v21);
          int v12 = v21[0];
        }
        else
        {
          sub_100030238((uint64_t)v19, &v23);
          uint64_t v8 = sub_10000D104((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
          sub_100016EAC((uint64_t)v19);
          char v9 = *(unsigned char *)v8;
          *(unsigned char *)uint64_t v8 = v19[0];
          v19[0] = v9;
          uint64_t v10 = (uint64_t **)&v20;
          uint64_t v11 = v8[1];
          v8[1] = v20;
          uint64_t v20 = v11;
          sub_100016EAC((uint64_t)v8);
          sub_100016EAC((uint64_t)v19);
          int v12 = v19[0];
        }
        sub_100016B28(v10, v12);
      }
    }
  }
  return 1;
}

void sub_100057340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057368(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10005746C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_100057570()
{
  int v3 = -1431655766;
  sub_100059660(&v3, 0x7B2u, 1u, 1u);
  unsigned int v2 = -1431655766;
  unint64_t v0 = sub_1000598FC();
  int v4 = v0;
  __int16 v5 = WORD2(v0);
  sub_10005A1B4(&v2, &v4);
  return sub_100057608(&v2, &v3);
}

uint64_t sub_100057608(unsigned int *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((v2 + 2) >= 3 && (v3 + 2) >= 3) {
    return v2 - v3;
  }
  int v8 = *a2;
  unsigned int v9 = v2;
  int v5 = sub_100059878(&v9, &v8);
  unint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
  if (!v5) {
    unint64_t v6 = 0x8000000000000000;
  }
  if (v5 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

unint64_t sub_1000576A0(uint64_t a1, uint64_t a2)
{
  return (unint64_t)fabs((double)(a1 - a2) / 1000000.0) / 0x15180 + 1;
}

__n128 sub_1000576DC@<Q0>(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1@<X0>, uint64_t a2@<X8>)
{
  __t.__d_.__rep_ = a1;
  time_t v6 = std::chrono::system_clock::to_time_t(&__t);
  uint64_t v3 = gmtime(&v6);
  long long v4 = *(_OWORD *)&v3->tm_mon;
  *(_OWORD *)a2 = *(_OWORD *)&v3->tm_sec;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)&v3->tm_isdst;
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = v3->tm_zone;
  return result;
}

std::chrono::system_clock::time_point sub_100057760(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(_OWORD *)&v4.tm_mouint64_t n = v1;
  *(_OWORD *)&v4.tm_isdst = *(_OWORD *)(a1 + 32);
  v4.tm_zone = *(char **)(a1 + 48);
  v4.tm_hour = 0;
  ++v4.tm_mday;
  *(void *)&v4.tm_sec = 0;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_1000577EC(uint64_t a1)
{
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(void *)&v4.tm_mouint64_t n = *(void *)(a1 + 16);
  int v1 = (8 - *(_DWORD *)(a1 + 24)) % 7;
  if (!v1) {
    int v1 = 7;
  }
  v4.tm_wday = *(_DWORD *)(a1 + 24);
  *(_OWORD *)&v4.tm_yday = *(_OWORD *)(a1 + 28);
  *(_OWORD *)&v4.tm_gmtoff = *(_OWORD *)(a1 + 40);
  v4.tm_hour = 0;
  v4.tm_mday += v1;
  *(void *)&v4.tm_sec = 0;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_1000578BC(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_sec = *(_OWORD *)a1;
  *(_OWORD *)&v4.tm_mouint64_t n = v1;
  *(_OWORD *)&v4.tm_isdst = *(_OWORD *)(a1 + 32);
  v4.tm_zone = *(char **)(a1 + 48);
  v4.tm_mouint64_t n = v1 + 1;
  if ((int)v1 >= 11)
  {
    v4.tm_mouint64_t n = 0;
    ++v4.tm_year;
  }
  *(_OWORD *)&v4.tm_sec = xmmword_100119730;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

std::chrono::system_clock::time_point sub_100057964(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  *(_OWORD *)&v4.tm_year = *(_OWORD *)(a1 + 20);
  *(_OWORD *)(&v4.tm_isdst + 1) = *(_OWORD *)(a1 + 36);
  HIDWORD(v4.tm_zone) = *(_DWORD *)(a1 + 52);
  v4.tm_mouint64_t n = 3 * ((v1 + 3) / 3);
  if (v4.tm_mon >= 12)
  {
    v4.tm_mouint64_t n = 0;
    ++v4.tm_year;
  }
  *(_OWORD *)&v4.tm_sec = xmmword_100119730;
  time_t v2 = mktime(&v4);
  return std::chrono::system_clock::from_time_t(v2 - timezone);
}

_WORD *sub_100057A28(_WORD *result, unsigned int a2)
{
  if (a2 <= 0x577 || a2 >> 4 >= 0x271) {
    sub_100057A5C();
  }
  *__n128 result = a2;
  return result;
}

void sub_100057A5C()
{
  sub_100058358(&v0);
  sub_100057AB0(&v0);
}

void sub_100057A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_100057AB0(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100057B10((uint64_t)exception, a1);
}

void sub_100057AF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100057B10(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100153660;
  *(void *)(a1 + 8) = off_100153690;
  *(void *)(a1 + 24) = off_1001536B8;
  return a1;
}

uint64_t sub_100057BBC(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

void sub_100057C10()
{
}

void sub_100057E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_100058128((uint64_t *)va);
  sub_100058128((uint64_t *)va1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

void sub_100057E80(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100058184((uint64_t)exception, a1);
}

void sub_100057EC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100057EDC(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));

  operator delete();
}

void sub_100057F50(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));

  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_100057FAC(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);

  operator delete();
}

void sub_100058024(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);

  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_10005807C(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);

  operator delete();
}

void sub_1000580F0(std::out_of_range *a1)
{
  std::out_of_range::~out_of_range(a1);

  operator delete();
}

uint64_t *sub_100058128(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_100058184(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_100153708;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100153730;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v5;
  *(void *)a1 = &off_100153660;
  *(void *)(a1 + 8) = off_100153690;
  *(void *)(a1 + 24) = off_1001536B8;
  return a1;
}

void sub_1000582AC(_Unwind_Exception *a1)
{
  std::out_of_range::~out_of_range(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000582C0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

std::logic_error *sub_100058358(std::logic_error *a1)
{
  sub_100015438(&__p, "Year is out of valid range: 1400..9999");
  std::logic_error::logic_error(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&off_100153708;
  return a1;
}

void sub_100058414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_100058438(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0xD) {
    sub_100058464();
  }
  *uint64_t result = a2;
  return result;
}

void sub_100058464()
{
  sub_100058C6C(&v0);
  sub_1000584B8(&v0);
}

void sub_10005849C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_1000584B8(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100058518((uint64_t)exception, a1);
}

void sub_100058500(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058518(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_1001537B0;
  *(void *)(a1 + 8) = off_1001537E0;
  *(void *)(a1 + 24) = off_100153808;
  return a1;
}

uint64_t sub_1000585C4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

void sub_100058618()
{
}

void sub_100058810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_100058128((uint64_t *)va);
  sub_100058128((uint64_t *)va1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

void sub_100058888(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100058B30((uint64_t)exception, a1);
}

void sub_1000588D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000588E4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));

  operator delete();
}

void sub_100058958(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));

  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_1000589B4(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);

  operator delete();
}

void sub_100058A2C(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);

  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_100058A84(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);

  operator delete();
}

void sub_100058AF8(std::out_of_range *a1)
{
  std::out_of_range::~out_of_range(a1);

  operator delete();
}

uint64_t sub_100058B30(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_100153828;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100153730;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v5;
  *(void *)a1 = &off_1001537B0;
  *(void *)(a1 + 8) = off_1001537E0;
  *(void *)(a1 + 24) = off_100153808;
  return a1;
}

void sub_100058C58(_Unwind_Exception *a1)
{
  std::out_of_range::~out_of_range(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100058C6C(std::logic_error *a1)
{
  sub_100015438(&__p, "Month number is out of range 1..12");
  std::logic_error::logic_error(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&off_100153828;
  return a1;
}

void sub_100058D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_100058D4C(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x20) {
    sub_100058D78();
  }
  *uint64_t result = a2;
  return result;
}

void sub_100058D78()
{
  sub_100059580(&v0);
  sub_100058DCC(&v0);
}

void sub_100058DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10)
{
}

void sub_100058DCC(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100058E2C((uint64_t)exception, a1);
}

void sub_100058E14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100058E2C(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_1001538B0;
  *(void *)(a1 + 8) = off_1001538E0;
  *(void *)(a1 + 24) = off_100153908;
  return a1;
}

uint64_t sub_100058ED8(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));
  return a1;
}

void sub_100058F2C()
{
}

void sub_100059124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_100058128((uint64_t *)va);
  sub_100058128((uint64_t *)va1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

void sub_10005919C(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100059444((uint64_t)exception, a1);
}

void sub_1000591E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000591F8(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::out_of_range::~out_of_range((std::out_of_range *)(a1 + 8));

  operator delete();
}

void sub_10005926C(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));

  std::out_of_range::~out_of_range((std::out_of_range *)a1);
}

void sub_1000592C8(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));
  std::out_of_range::~out_of_range((std::out_of_range *)a1);

  operator delete();
}

void sub_100059340(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);

  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);
}

void sub_100059398(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);
  std::out_of_range::~out_of_range((std::out_of_range *)a1 - 1);

  operator delete();
}

void sub_10005940C(std::out_of_range *a1)
{
  std::out_of_range::~out_of_range(a1);

  operator delete();
}

uint64_t sub_100059444(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001536D8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_100153928;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100153730;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v5;
  *(void *)a1 = &off_1001538B0;
  *(void *)(a1 + 8) = off_1001538E0;
  *(void *)(a1 + 24) = off_100153908;
  return a1;
}

void sub_10005956C(_Unwind_Exception *a1)
{
  std::out_of_range::~out_of_range(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100059580(std::logic_error *a1)
{
  sub_100015438(&__p, "Day of month value is out of range 1..31");
  std::logic_error::logic_error(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&off_100153928;
  return a1;
}

void sub_10005963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_100059660(_DWORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t result = sub_1000597D4(a1, a2, a3, a4);
  if (a3 > 0xBu) {
    goto LABEL_14;
  }
  if (((1 << a3) & 0xA50) != 0)
  {
    unsigned __int16 v8 = 30;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    unsigned __int16 v8 = 28;
    if ((a2 & 3) == 0)
    {
      HIDWORD(v1sub_100027DA4((uint64_t)&a9, 0) = -1030792151 * a2;
      LODWORD(v1sub_100027DA4((uint64_t)&a9, 0) = HIDWORD(v10);
      unsigned int v9 = v10 >> 2;
      LODWORD(v1sub_100027DA4((uint64_t)&a9, 0) = HIDWORD(v10);
      if ((v10 >> 4) < 0xA3D70B || v9 > 0x28F5C28) {
        unsigned __int16 v8 = 29;
      }
      else {
        unsigned __int16 v8 = 28;
      }
    }
  }
  else
  {
LABEL_14:
    unsigned __int16 v8 = 31;
  }
LABEL_4:
  if (v8 < a4)
  {
    sub_100015438(&v12, "Day of month is not valid for year");
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)&off_100153928;
    sub_100058DCC(&v13);
  }
  return result;
}

void sub_1000597A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::out_of_range a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_1000597D4(_DWORD *result, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v4 = (14 - a3) / 12;
  *uint64_t result = 365 * (unsigned __int16)(a2 - v4 + 4800)
          + a4
          + ((unsigned __int16)(a2 - v4 + 4800) >> 2)
          - (unsigned __int16)(a2 - v4 + 4800) / 0x64u
          + (unsigned __int16)(a2 - v4 + 4800) / 0x190u
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(a3 + 12 * v4 - 3) + 2)) >> 32)
          - 32045;
  return result;
}

uint64_t sub_100059878(unsigned int *a1, int *a2)
{
  uint64_t result = *a1;
  if ((result + 2) >= 3)
  {
    int v3 = *a2;
    if ((*a2 + 2) >= 3) {
      return (result - v3);
    }
  }
  else
  {
    if (result == -2) {
      return result;
    }
    int v3 = *a2;
  }
  if (v3 == -2) {
    return 4294967294;
  }
  if (!result)
  {
    if (!v3) {
      return 4294967294;
    }
    return result;
  }
  if (result != -1)
  {
    if (v3 == -1) {
      return 0;
    }
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
    return (result - v3);
  }
  if (v3 == -1) {
    return 4294967294;
  }
  return result;
}

unint64_t sub_1000598FC()
{
  v9.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v9.tm_mouint64_t n = v0;
  *(_OWORD *)&v9.tm_isdst = v0;
  *(_OWORD *)&v9.tm_sec = v0;
  int v1 = (unsigned __int16 *)sub_1000599C8(&v9);
  unsigned __int16 v2 = v1[10] + 1900;
  unsigned __int16 v8 = 1400;
  sub_100057A28(&v8, v2);
  unsigned __int16 v3 = v1[8] + 1;
  unsigned __int16 v7 = 1;
  sub_100058438(&v7, v3);
  unsigned int v4 = v1[6];
  unsigned __int16 v6 = 1;
  sub_100058D4C(&v6, v4);
  return v8 | ((unint64_t)v7 << 16) | ((unint64_t)v6 << 32);
}

tm *sub_1000599C8(tm *a1)
{
  time_t v3 = 0xAAAAAAAAAAAAAAAALL;
  time(&v3);
  uint64_t result = gmtime_r(&v3, a1);
  if (!result)
  {
    std::runtime_error::runtime_error(&v4, "could not convert calendar time to UTC time");
    sub_100059A74(&v4);
  }
  return result;
}

void sub_100059A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

void sub_100059A74(const std::runtime_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_100059AD0((uint64_t)exception, a1);
}

void sub_100059ABC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100059AD0(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &off_1001536D8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100153998;
  *(void *)(a1 + 8) = off_1001539C8;
  *(void *)(a1 + 24) = off_1001539F0;
  return a1;
}

uint64_t sub_100059B7C(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_100059BD0()
{
}

void sub_100059DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_100058128((uint64_t *)va);
  sub_100058128((uint64_t *)va1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

void sub_100059E24(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  sub_10005A094((uint64_t)exception, a1);
}

void sub_100059E6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100059E80(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete();
}

void sub_100059EF4(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_100059F50(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_100153730;
  sub_100058128((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  operator delete();
}

void sub_100059FC8(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_10005A020(void *a1)
{
  *a1 = &off_100153730;
  sub_100058128(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  operator delete();
}

uint64_t sub_10005A094(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001536D8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100153730;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v5;
  *(void *)a1 = &off_100153998;
  *(void *)(a1 + 8) = off_1001539C8;
  *(void *)(a1 + 24) = off_1001539F0;
  return a1;
}

void sub_10005A1A0(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10005A1B4(_DWORD *result, _WORD *a2)
{
  int v2 = (unsigned __int16)a2[1];
  int v3 = (14 - v2) / 12;
  *uint64_t result = (unsigned __int16)a2[2]
          + 365 * (unsigned __int16)(*a2 - v3 + 4800)
          + ((unsigned __int16)(*a2 - v3 + 4800) >> 2)
          - (unsigned __int16)(*a2 - v3 + 4800) / 0x64u
          + (unsigned __int16)(*a2 - v3 + 4800) / 0x190u
          - 32045
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(v2 + 12 * v3 - 3) + 2)) >> 32);
  return result;
}

uint64_t sub_10005A25C(uint64_t a1)
{
  *(void *)a1 = off_100153A10;
  unsigned int v2 = 5489;
  *(_DWORD *)(a1 + 8) = 5489;
  int v3 = (void *)(a1 + 8);
  uint64_t v4 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v6 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v6 + v4;
    *(_DWORD *)(a1 + 4 * i) = i + v6 - 2;
    ++v4;
  }
  *(void *)(a1 + 2504) = 0;
  v10.__padding_ = -1431655766;
  sub_10005A3A0(&v10);
  std::random_device::result_type v7 = std::random_device::operator()(&v10);
  LODWORD(__src[0]) = v7;
  for (uint64_t j = 1; j != 624; ++j)
  {
    std::random_device::result_type v7 = j + 1812433253 * (v7 ^ (v7 >> 30));
    *((_DWORD *)__src + j) = v7;
  }
  __src[312] = 0;
  memcpy(v3, __src, 0x9C8uLL);
  std::random_device::~random_device(&v10);
  return a1;
}

void sub_10005A384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

std::random_device *sub_10005A3A0(std::random_device *a1)
{
  sub_100015438(&__p, "/dev/urandom");
  std::random_device::random_device(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_10005A424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005A44C(uint64_t a1, int a2, int a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_10005A4C0((uint64_t)v4, a1 + 8, v4);
}

void sub_10005A4AC()
{
}

uint64_t sub_10005A4C0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if (result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_10005A584(a2);
    }
    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_10005A584(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

uint64_t sub_10005A584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_10005A624(int a1, sqlite3 *a2)
{
  if (a2) {
    return sqlite3_close(a2);
  }
  return result;
}

uint64_t sub_10005A634(int a1, sqlite3_stmt *pStmt)
{
  if (pStmt) {
    return sqlite3_finalize(pStmt);
  }
  return result;
}

BOOL sub_10005A644(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 9) || *(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (!sqlite3_exec(*(sqlite3 **)a1, "ROLLBACK;", 0, 0, 0))
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  unsigned int v3 = *(sqlite3 **)a1;
  int v4 = qword_10015EF60;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (result)
    {
      unsigned int v12 = sqlite3_errmsg(v3);
      sub_1000FA1F0((uint64_t)v12, (uint64_t)&v13, v4);
      return 0;
    }
  }
  else if (result)
  {
    sub_1000FA18C(v4, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void sub_10005A728(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10005A734(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10005A750(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_10005A76C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *sub_10005A7A0()
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  return &xmmword_10015ED00;
}

void *sub_10005A7E4@<X0>(void *a1@<X8>)
{
  return sub_100015438(a1, "/AppleInternal/Library/CoreAnalytics/defaultConfig.json");
}

void sub_10005A7F4(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "devTaskedConfig.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED17 < 0)
  {
    sub_100017424(a1, (void *)xmmword_10015ED00, *((unint64_t *)&xmmword_10015ED00 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_10015ED00;
    a1->__r_.__value_.__r.__words[2] = unk_10015ED10;
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005A8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005A920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_100027A78();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_10005A970(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "events.allowlist");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005AA9C(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "events.whitelist");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005ABC8(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "currentConfiguration.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005ACB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005ACF4(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "journals");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005ADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005AE20(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "state");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005AF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005AF4C(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "identity/budget_info.json");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005B078(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "identity/budget_info.stage");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED00[23] < 0)
  {
    sub_100017424(a1, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)byte_10015ED00;
    a1->__r_.__value_.__r.__words[2] = *(void *)&byte_10015ED00[16];
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005B168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005B1A4(char **a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(v8, "aggregates");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&__dst, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&__dst, (uint64_t)v8);
  sub_100015438(v6, "reservoirs");
  memset(&v13, 170, sizeof(v13));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v13, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v13 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v13, (uint64_t)v6);
  sub_100015438(__p, "identity");
  memset(&v14, 170, sizeof(v14));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v14, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v14 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v14, (uint64_t)__p);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = a1;
  unint64_t v11 = 0xAAAAAAAAAAAAAA00;
  unint64_t v2 = (char *)operator new(0x48uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 72;
  uint64_t v3 = 0;
  a1[1] = sub_10005D2D4((uint64_t)(a1 + 2), (long long *)&__dst, &v15, v2);
  do
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v14.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3;
  }
  while (v3 != -9);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_10005B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  for (; v47 != &a30; v47 -= 3)
  {
    if (*((char *)v47 - 1) < 0) {
      operator delete(*(v47 - 3));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10005B500()
{
}

void sub_10005B508(char **a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(v46, "aggregates");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&__dst, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&__dst, (uint64_t)v46);
  sub_100015438(v44, "Daily");
  sub_1000F6B38(&__dst, (uint64_t)v44);
  v51[0] = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_100015438(v41, "aggregates");
  memset(&v43, 170, sizeof(v43));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v43, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v43 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v43, (uint64_t)v41);
  sub_100015438(v39, "90Day");
  sub_1000F6B38(&v43, (uint64_t)v39);
  v51[1] = v43;
  memset(&v43, 0, sizeof(v43));
  sub_100015438(v36, "aggregates");
  memset(&v38, 170, sizeof(v38));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v38, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v38 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v38, (uint64_t)v36);
  sub_100015438(v34, "Never");
  sub_1000F6B38(&v38, (uint64_t)v34);
  v51[2] = v38;
  memset(&v38, 0, sizeof(v38));
  sub_100015438(v31, "reservoirs");
  memset(&v33, 170, sizeof(v33));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v33, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v33 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v33, (uint64_t)v31);
  sub_100015438(v29, "Daily");
  sub_1000F6B38(&v33, (uint64_t)v29);
  v51[3] = v33;
  memset(&v33, 0, sizeof(v33));
  sub_100015438(v26, "reservoirs");
  memset(&v28, 170, sizeof(v28));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v28, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v28 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v28, (uint64_t)v26);
  sub_100015438(v24, "90Day");
  sub_1000F6B38(&v28, (uint64_t)v24);
  v51[4] = v28;
  memset(&v28, 0, sizeof(v28));
  sub_100015438(v21, "reservoirs");
  memset(&v23, 170, sizeof(v23));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v23, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v23 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v23, (uint64_t)v21);
  sub_100015438(v19, "Never");
  sub_1000F6B38(&v23, (uint64_t)v19);
  v51[5] = v23;
  memset(&v23, 0, sizeof(v23));
  sub_100015438(v16, "identity");
  memset(&v18, 170, sizeof(v18));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v18, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v18 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v18, (uint64_t)v16);
  sub_100015438(v14, "Daily");
  sub_1000F6B38(&v18, (uint64_t)v14);
  v51[6] = v18;
  memset(&v18, 0, sizeof(v18));
  sub_100015438(v11, "identity");
  memset(&v13, 170, sizeof(v13));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v13, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v13 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v13, (uint64_t)v11);
  sub_100015438(v9, "90Day");
  sub_1000F6B38(&v13, (uint64_t)v9);
  v51[7] = v13;
  memset(&v13, 0, sizeof(v13));
  sub_100015438(v6, "identity");
  memset(&v8, 170, sizeof(v8));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v8, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v8 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v8, (uint64_t)v6);
  sub_100015438(__p, "Never");
  sub_1000F6B38(&v8, (uint64_t)__p);
  std::string v52 = v8;
  memset(&v8, 0, sizeof(v8));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v50 = 0xAAAAAAAAAAAAAA00;
  uint64_t v49 = a1;
  unint64_t v2 = (char *)operator new(0xD8uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 216;
  uint64_t v3 = 0;
  a1[1] = sub_10005D2D4((uint64_t)(a1 + 2), (long long *)v51, &v53, v2);
  do
  {
    if (SHIBYTE(v52.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v52.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3;
  }
  while (v3 != -27);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
}

void sub_10005BCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a85 < 0) {
    operator delete(a84);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a87 < 0) {
    operator delete(a86);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(a88);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  for (; v88 != &STACK[0x2E0]; v88 -= 3)
  {
    if (*((char *)v88 - 1) < 0) {
      operator delete((void *)*(v88 - 3));
    }
  }
  _Unwind_Resume(a1);
}

void sub_10005BFE8()
{
}

void sub_10005BFF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10005BEB0);
}

void sub_10005C010()
{
}

void sub_10005C020()
{
}

void sub_10005C02C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10005BEE0);
}

void sub_10005C048()
{
}

void sub_10005C058()
{
}

void sub_10005C064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10005BF10);
}

void sub_10005C080()
{
}

void sub_10005C090()
{
}

void sub_10005C09C()
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  JUMPOUT(0x10005BF40);
}

void sub_10005C0B8()
{
}

void sub_10005C0C8()
{
}

void sub_10005C0D4()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x10005BF70);
}

void sub_10005C0F0()
{
}

void sub_10005C0FC()
{
}

void sub_10005C10C()
{
}

void sub_10005C11C()
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  JUMPOUT(0x10005BFA0);
}

void sub_10005C13C()
{
}

void sub_10005C144(char **a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(v12, "aggregate_persist_temp");
  memset(&__dst, 170, sizeof(__dst));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&__dst, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&__dst, (uint64_t)v12);
  sub_100015438(v10, "aggregate_resume_stage");
  memset(&v17, 170, sizeof(v17));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v17, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v17 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v17, (uint64_t)v10);
  sub_100015438(v8, "reservoir_persist_temp");
  memset(&v18, 170, sizeof(v18));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v18, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v18 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v18, (uint64_t)v8);
  sub_100015438(v6, "reservoir_resume_stage");
  memset(&v19, 170, sizeof(v19));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v19, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v19 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v19, (uint64_t)v6);
  sub_100015438(__p, "identity_persist_temp");
  memset(&v20, 170, sizeof(v20));
  if (byte_10015ED00[23] < 0) {
    sub_100017424(&v20, *(void **)byte_10015ED00, *(unint64_t *)&byte_10015ED00[8]);
  }
  else {
    std::string v20 = *(std::string *)byte_10015ED00;
  }
  sub_1000F6B38(&v20, (uint64_t)__p);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string v14 = a1;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00;
  unint64_t v2 = (char *)operator new(0x78uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 120;
  uint64_t v3 = 0;
  a1[1] = sub_10005D2D4((uint64_t)(a1 + 2), (long long *)&__dst, &v21, v2);
  do
  {
    if (SHIBYTE(v20.__r_.__value_.__r.__words[v3 + 2]) < 0) {
      operator delete(*(void **)((char *)&v20.__r_.__value_.__l.__data_ + v3 * 8));
    }
    v3 -= 3;
  }
  while (v3 != -15);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_10005C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  for (; v42 != &a42; v42 -= 3)
  {
    if (*((char *)v42 - 1) < 0) {
      operator delete(*(v42 - 3));
    }
  }
  _Unwind_Resume(a1);
}

void sub_10005C5E8()
{
}

void sub_10005C5F0(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "config.sqlite");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED17 < 0)
  {
    sub_100017424(a1, (void *)xmmword_10015ED00, *((unint64_t *)&xmmword_10015ED00 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_10015ED00;
    a1->__r_.__value_.__r.__words[2] = unk_10015ED10;
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005C6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005C71C(std::string *a1@<X8>)
{
  if (qword_10015ED18 != -1) {
    dispatch_once(&qword_10015ED18, &stru_100153A50);
  }
  sub_100015438(__p, "state.sqlite");
  memset(a1, 170, sizeof(std::string));
  if (byte_10015ED17 < 0)
  {
    sub_100017424(a1, (void *)xmmword_10015ED00, *((unint64_t *)&xmmword_10015ED00 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_10015ED00;
    a1->__r_.__value_.__r.__words[2] = unk_10015ED10;
  }
  sub_1000F6B38(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10005C80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005C848(std::string *a1@<X8>)
{
  unint64_t v2 = +[OSASystemConfiguration sharedInstance];
  char v3 = [v2 pathCATasking];

  if (v3)
  {
    memset(v7, 170, sizeof(v7));
    sub_100015438(v7, (char *)[v3 fileSystemRepresentation]);
    sub_100015438(__p, "taskedConfig.json");
    memset(a1, 170, sizeof(std::string));
    if (SHIBYTE(v7[2]) < 0)
    {
      sub_100017424(a1, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
      a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[2];
    }
    sub_1000F6B38(a1, (uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7[2]) < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    int v4 = qword_10015EDA0;
    if (os_log_type_enabled((os_log_t)qword_10015EDA0, OS_LOG_TYPE_FAULT)) {
      sub_1000FA2CC(v4);
    }
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_10005C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_10005CA08(void *a1@<X8>)
{
  id v3 = +[OSASystemConfiguration sharedInstance];
  id v2 = [v3 buildVersion];
  sub_100015438(a1, (char *)[v2 UTF8String]);
}

void sub_10005CA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005CA9C(void *a1@<X8>)
{
  id v6 = +[OSASystemConfiguration sharedInstance];
  id v2 = [v6 productName];
  id v3 = +[OSASystemConfiguration sharedInstance];
  int v4 = [v3 productVersion];
  id v5 = +[NSString stringWithFormat:@"%@ %@", v2, v4];
  sub_100015438(a1, (char *)[v5 UTF8String]);
}

void sub_10005CB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10005CBB0(void *a1@<X8>)
{
  id v6 = +[OSASystemConfiguration sharedInstance];
  id v2 = [v6 buildVersion];
  id v3 = +[OSASystemConfiguration sharedInstance];
  int v4 = [v3 targetAudience];
  id v5 = +[NSString stringWithFormat:@"%@-%@", v2, v4];
  sub_100015438(a1, (char *)[v5 UTF8String]);
}

void sub_10005CC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10005CCC4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = a1;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    char v10 = +[NSString stringWithUTF8String:v4];
    goto LABEL_8;
  }
  if (a1[1])
  {
    int v4 = (uint64_t *)*a1;
    goto LABEL_6;
  }
LABEL_7:
  char v10 = @"??? ???";
LABEL_8:
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
    {
LABEL_15:
      std::string v8 = @"???";
      goto LABEL_17;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    goto LABEL_15;
  }
  id v6 = +[NSString stringWithUTF8String:a2];
  if ([(__CFString *)v6 containsString:@"-"])
  {
    char v7 = [(__CFString *)v6 componentsSeparatedByString:@"-"];
    std::string v8 = [v7 firstObject];
  }
  else
  {
    std::string v8 = v6;
  }
LABEL_17:
  id v9 = +[NSString stringWithFormat:@"%@ (%@)", v10, v8];
  sub_100015438(a3, (char *)[v9 UTF8String]);
}

void sub_10005CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005CE6C(const std::chrono::system_clock::time_point *a1)
{
  std::chrono::system_clock::to_time_t(a1);
  OSATimeIntervalApproximate();
  v2.__d_.__rep_ = std::chrono::system_clock::from_time_t((uint64_t)v1).__d_.__rep_;

  return sub_10001C968(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%TZ");
}

uint64_t sub_10005CEBC()
{
  memset(&v2, 0, sizeof(v2));
  time_t v1 = time(0);
  localtime_r(&v1, &v2);
  return v2.tm_gmtoff;
}

uint64_t sub_10005CF30()
{
  *(void *)id v6 = 0x1500000001;
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  size_t v3 = 16;
  int v0 = sysctl(v6, 2u, &v4, &v3, 0, 0);
  if (v4) {
    BOOL v1 = v0 == -1;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 0;
  }
  else {
    return (int)v5 + 1000000 * v4;
  }
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep sub_10005CFD4()
{
  *(void *)unint64_t v4 = 0xE00000001;
  int v5 = 1;
  pid_t v6 = getpid();
  memset(__b, 170, sizeof(__b));
  size_t v2 = 648;
  if (sysctl(v4, 4u, __b, &v2, 0, 0) < 0) {
    return -1;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  return (rep - std::chrono::system_clock::from_time_t(__b[0]).__d_.__rep_) / 1000000;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep sub_10005D0AC()
{
  uint64_t v0 = sub_10005CF30();
  if (v0 < 1)
  {
    unint64_t v4 = qword_10015EDA0;
    if (os_log_type_enabled((os_log_t)qword_10015EDA0, OS_LOG_TYPE_ERROR)) {
      sub_1000FA33C(v4);
    }
    return -1;
  }
  else
  {
    unint64_t v1 = v0;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    return (rep - std::chrono::system_clock::from_time_t(v1 / 0xF4240).__d_.__rep_) / 1000000;
  }
}

__darwin_time_t sub_10005D148()
{
  __tp.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  __tp.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  int v0 = clock_gettime(_CLOCK_UPTIME_RAW, &__tp);
  if (!v0) {
    return __tp.tv_sec;
  }
  int v1 = v0;
  size_t v2 = qword_10015EDA0;
  if (os_log_type_enabled((os_log_t)qword_10015EDA0, OS_LOG_TYPE_ERROR)) {
    sub_1000FA3AC(v1, v2);
  }
  return -1;
}

uint64_t sub_10005D1F0()
{
  size_t v2 = 8;
  uint64_t v3 = 0;
  if (sysctlbyname("hw.memsize", &v3, &v2, 0, 0) == -1)
  {
    int v0 = qword_10015EDA0;
    if (os_log_type_enabled((os_log_t)qword_10015EDA0, OS_LOG_TYPE_ERROR)) {
      sub_1000FA424(v0);
    }
  }
  return v3;
}

void sub_10005D29C(id a1)
{
  uid_t v1 = getuid();
  pw_dir = getpwuid(v1)->pw_dir;

  std::string::assign((std::string *)&xmmword_10015ED00, pw_dir);
}

char *sub_10005D2D4(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  id v9 = __dst;
  char v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  __n128 v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    pid_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100017424(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v10;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      pid_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      char v10 = v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v12) = 1;
  sub_10005D3C4((uint64_t)v11);
  return v4;
}

void sub_10005D3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10005D3C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D3C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100037CF4(a1);
  }
  return a1;
}

void sub_10005D3FC()
{
  unk_10015ED10 = 0;
  xmmword_10015ED00 = 0uLL;
  __cxa_atexit((void (*)(void *))sub_10005A76C, &xmmword_10015ED00, (void *)&_mh_execute_header);
}

uint64_t sub_10005D460(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  v9[0] = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000BD220(v9, a1);
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10005FE5C(v8, a1);
  v7[0] = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10005DDE0(v7, a1);
  sub_1000BD290((uint64_t)v9, a2, (uint64_t)a3);
  sub_10005FECC((uint64_t)v8, a2, a3);
  sub_10005DE50(v7, a2, a3);
  j_nullsub_13(v7);
  j_nullsub_13_0(v8);
  return j_nullsub_13_2(v9);
}

void sub_10005D544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  j_nullsub_13_0((uint64_t *)va);
  j_nullsub_13_2(va1);
  _Unwind_Resume(a1);
}

double sub_10005D580@<D0>(long long *a1@<X0>, __n128 *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  sub_10005DC1C(a1, a2, a3, v6);
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void sub_10005D5F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10005D600(uint64_t a1@<X0>, const char **a2@<X1>, long long *a3@<X8>)
{
  unint64_t v4 = a3;
  if (!*(void *)(a1 + 56))
  {
    *a2 = "no parent config candidate present to load for tasked config";
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    return;
  }
  *(void *)&long long v41 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_10009E5A4((const char *)(a1 + 32), a2, (unint64_t *)&v41);
  if ((void)v41)
  {
    unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
    char v40 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v6 = *(void *)(a1 + 56);
    if (*(char *)(v6 + 55) < 0)
    {
      sub_100017424(&__dst, *(void **)(v6 + 32), *(void *)(v6 + 40));
    }
    else
    {
      long long __dst = *(_OWORD *)(v6 + 32);
      *(void *)&long long v48 = *(void *)(v6 + 48);
    }
    sub_10009E5A4((const char *)&__dst, a2, &v39);
    if (SBYTE7(v48) < 0) {
      operator delete((void *)__dst);
    }
    if (!v39)
    {
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      goto LABEL_47;
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
    std::string v38 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v41 + 16))(&v37);
    unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v36 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v39 + 16))(&v35);
    unint64_t v50 = "parentUuid";
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long __dst = v7;
    long long v48 = v7;
    sub_1000135DC((uint64_t)&v37, &v50, (uint64_t)&__dst);
    char v42 = (unsigned __int8 *)&v37;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    unint64_t v46 = 0x8000000000000000;
    sub_100013648(&v42);
    if (sub_100013964((unsigned __int8 **)&__dst, &v42))
    {
      uint64_t v8 = sub_1000155C8();
      if (!v8) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v8 = (uint64_t)sub_100013AAC((unsigned __int8 **)&__dst);
    }
    if (*(unsigned char *)v8 == 3)
    {
      id v9 = *(unsigned __int8 **)(v8 + 8);
      goto LABEL_19;
    }
LABEL_18:
    id v9 = 0;
LABEL_19:
    unint64_t v50 = "uuid";
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long __dst = v10;
    long long v48 = v10;
    sub_1000135DC((uint64_t)&v35, &v50, (uint64_t)&__dst);
    char v42 = (unsigned __int8 *)&v35;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    unint64_t v46 = 0x8000000000000000;
    sub_100013648(&v42);
    if (sub_100013964((unsigned __int8 **)&__dst, &v42))
    {
      uint64_t v11 = sub_1000155C8();
      if (!v11) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)sub_100013AAC((unsigned __int8 **)&__dst);
    }
    if (*(unsigned char *)v11 == 3)
    {
      unint64_t v12 = *(unsigned __int8 **)(v11 + 8);
      if (v9) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
LABEL_26:
    unint64_t v12 = 0;
    if (v9)
    {
LABEL_27:
      if (!v12)
      {
        char v13 = "parent config does not have a uuid?!";
        goto LABEL_45;
      }
      uint64_t v14 = v9[23];
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = v9[23];
      }
      else {
        uint64_t v15 = *((void *)v9 + 1);
      }
      uint64_t v16 = v12[23];
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *((void *)v12 + 1);
      }
      if (v15 == v16)
      {
        if (v17 >= 0) {
          std::string v18 = v12;
        }
        else {
          std::string v18 = *(unsigned __int8 **)v12;
        }
        if ((v14 & 0x80) == 0)
        {
          if (v9[23])
          {
            while (*v9 == *v18)
            {
              ++v9;
              ++v18;
              if (!--v14) {
                goto LABEL_52;
              }
            }
            goto LABEL_44;
          }
LABEL_52:
          unint64_t v50 = "builtOnDate";
          unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long __dst = v19;
          long long v48 = v19;
          sub_1000135DC((uint64_t)&v37, &v50, (uint64_t)&__dst);
          char v42 = (unsigned __int8 *)&v37;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          unint64_t v46 = 0x8000000000000000;
          sub_100013648(&v42);
          if (sub_100013964((unsigned __int8 **)&__dst, &v42))
          {
            uint64_t v20 = sub_1000155C8();
            if (!v20) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v20 = (uint64_t)sub_100013AAC((unsigned __int8 **)&__dst);
          }
          if (*(unsigned char *)v20 == 3)
          {
            long long v21 = *(long long **)(v20 + 8);
            goto LABEL_59;
          }
LABEL_58:
          long long v21 = 0;
LABEL_59:
          unint64_t v50 = "builtOnDate";
          unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long __dst = v22;
          long long v48 = v22;
          sub_1000135DC((uint64_t)&v35, &v50, (uint64_t)&__dst);
          char v42 = (unsigned __int8 *)&v35;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          unint64_t v46 = 0x8000000000000000;
          sub_100013648(&v42);
          if (sub_100013964((unsigned __int8 **)&__dst, &v42))
          {
            uint64_t v23 = sub_1000155C8();
            if (!v23) {
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v23 = (uint64_t)sub_100013AAC((unsigned __int8 **)&__dst);
          }
          if (*(unsigned char *)v23 == 3)
          {
            long long v24 = *(long long **)(v23 + 8);
            goto LABEL_66;
          }
LABEL_65:
          long long v24 = 0;
LABEL_66:
          if (v21)
          {
            if (v24)
            {
              if (*((char *)v21 + 23) < 0)
              {
                sub_100017424(&__p, *(void **)v21, *((void *)v21 + 1));
              }
              else
              {
                long long v25 = *v21;
                __p.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
              }
              int64_t v26 = sub_100009188(&__p, (uint64_t)"%m-%d-%Y %H:%M:%S");
              char v28 = v27;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*((char *)v24 + 23) < 0)
              {
                sub_100017424(&v33, *(void **)v24, *((void *)v24 + 1));
              }
              else
              {
                long long v29 = *v24;
                v33.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
                *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
              }
              int64_t v30 = sub_100009188(&v33, (uint64_t)"%m-%d-%Y %H:%M:%S");
              char v32 = v31;
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              if (v28)
              {
                if (v32)
                {
                  if (v26 >= v30)
                  {
                    *unint64_t v4 = v41;
                    unint64_t v4 = &v41;
                    goto LABEL_46;
                  }
                  char v13 = "tasked config has an older builtOnDate than the parent config";
                }
                else
                {
                  char v13 = "parent config builtOnDate could not be parsed";
                }
              }
              else
              {
                char v13 = "tasked config builtOnDate could not be parsed";
              }
            }
            else
            {
              char v13 = "parent config does not have builtOnDate?!";
            }
          }
          else
          {
            char v13 = "tasked config does not have builtOnDate?!";
          }
LABEL_45:
          *a2 = v13;
LABEL_46:
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          sub_100016EAC((uint64_t)&v35);
          sub_100016B28(&v36, v35);
          sub_100016EAC((uint64_t)&v37);
          sub_100016B28(&v38, v37);
LABEL_47:
          if (v40) {
            sub_1000147D8(v40);
          }
          goto LABEL_49;
        }
        if (!memcmp(*(const void **)v9, v18, *((void *)v9 + 1))) {
          goto LABEL_52;
        }
      }
LABEL_44:
      char v13 = "parent config uuid and tasked config parentUuid do not match";
      goto LABEL_45;
    }
LABEL_25:
    char v13 = "tasked config does not have a parentUuid";
    goto LABEL_45;
  }
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
LABEL_49:
  if (*((void *)&v41 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v41 + 1));
  }
}

void sub_10005DB7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10005DB88(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000147D8(v2);
  }

  return sub_1000300B8(a1);
}

void sub_10005DBC8(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_1000300B8(a1);

  operator delete();
}

void *sub_10005DC1C@<X0>(long long *a1@<X1>, __n128 *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x60uLL);
  double result = sub_10005DC90(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10005DC7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10005DC90(void *a1, long long *a2, __n128 *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100153AC0;
  sub_10002FAF0((uint64_t)(a1 + 3), a2, a3);
  a1[3] = off_100153A80;
  uint64_t v6 = a4[1];
  a1[10] = *a4;
  a1[11] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_10005DD10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10005DD24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100153AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005DD44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100153AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10005DDA0(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    sub_1000147D8(v2);
  }

  return sub_1000300B8(a1 + 24);
}

void *sub_10005DDE0(void *a1, uint64_t a2)
{
  double result = sub_100089038(a1, a2);
  *double result = &off_100153B10;
  return result;
}

void sub_10005DE18(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

uint64_t sub_10005DE54(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t result = sub_100089060(a1, (uint64_t)"RegexCheckingConfigPass", a2, (uint64_t)a3);
  if (result)
  {
    uint64_t v5 = sub_10000D104(a3, "transforms");
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v28[0] = v6;
    v28[1] = v6;
    long long v7 = (unsigned __int8 **)sub_10001586C(v28, (uint64_t)v5);
    sub_10001D3E4(v7);
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v26[0] = v8;
    v26[1] = v8;
    sub_10001586C(v26, (uint64_t)v5);
    sub_1000157EC((unsigned __int8 **)v26);
    uint64_t result = sub_1000205D8((unsigned __int8 **)v28, (unsigned __int8 **)v26);
    if ((result & 1) == 0)
    {
      while (1)
      {
        id v9 = sub_10001EE40((unsigned __int8 **)v28);
        if ((sub_100089484((uint64_t)v9) & 0xFFFFFFFD) == 0)
        {
          *(void *)&v24[0] = "inputs";
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v30[0].__locale_ = v10;
          long long v31 = v10;
          sub_1000135DC((uint64_t)v9, (const std::string::value_type **)v24, (uint64_t)v30);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v35 = 0;
          uint64_t v34 = v9;
          unint64_t v38 = 0x8000000000000000;
          sub_100013648(&v34);
          if (sub_100013964((unsigned __int8 **)v30, &v34))
          {
            uint64_t v11 = sub_1000155C8();
            if (!v11) {
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t v11 = (uint64_t)sub_100013AAC((unsigned __int8 **)v30);
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v24[0] = v12;
          v24[1] = v12;
          sub_1000136C8(v24, v11);
          sub_100014064((unsigned __int8 **)v24);
          unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v22[0] = v13;
          v22[1] = v13;
          sub_1000136C8(v22, v11);
          sub_100013648((unsigned __int8 **)v22);
          if (!sub_100013964((unsigned __int8 **)v24, (unsigned __int8 **)v22)) {
            break;
          }
        }
LABEL_5:
        sub_100013C64((unsigned __int8 **)v28);
        uint64_t result = sub_1000205D8((unsigned __int8 **)v28, (unsigned __int8 **)v26);
        if (result) {
          return result;
        }
      }
      while (1)
      {
        uint64_t v14 = sub_100013AAC((unsigned __int8 **)v24);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"matching";
        *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v30[0].__locale_ = v15;
        long long v31 = v15;
        sub_1000135DC((uint64_t)v14, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t)v30);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v35 = 0;
        uint64_t v34 = v14;
        unint64_t v38 = 0x8000000000000000;
        sub_100013648(&v34);
        if (sub_100013964((unsigned __int8 **)v30, &v34))
        {
          uint64_t v16 = (unsigned __int8 *)sub_1000155C8();
          if (!v16) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v16 = sub_100013AAC((unsigned __int8 **)v30);
        }
        if ((sub_10005E5D4(v16, "regex") & 1) == 0)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"event";
          *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v30[0].__locale_ = v17;
          long long v31 = v17;
          sub_1000135DC((uint64_t)v14, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t)v30);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v35 = 0;
          uint64_t v34 = v14;
          unint64_t v38 = 0x8000000000000000;
          sub_100013648(&v34);
          if (!sub_100013964((unsigned __int8 **)v30, &v34))
          {
            std::string v18 = sub_100013AAC((unsigned __int8 **)v30);
LABEL_21:
            if (*v18 == 3)
            {
              memset(&__p, 170, sizeof(__p));
              sub_100015064((uint64_t)v18, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__p.__r_.__value_.__l.__size_ != 1) {
                  goto LABEL_28;
                }
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
                  goto LABEL_28;
                }
                p_p = &__p;
              }
              if (p_p->__r_.__value_.__s.__data_[0] != 42)
              {
LABEL_28:
                *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v32 = v20;
                long long v33 = v20;
                *(_OWORD *)&v30[0].__locale_ = v20;
                long long v31 = v20;
                sub_10004A29C(v30, (uint64_t)&__p, 0);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_31;
          }
          std::string v18 = (unsigned char *)sub_1000155C8();
          if (v18) {
            goto LABEL_21;
          }
        }
LABEL_31:
        sub_100013C64((unsigned __int8 **)v24);
        if (sub_100013964((unsigned __int8 **)v24, (unsigned __int8 **)v22)) {
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

void sub_10005E4E0()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  JUMPOUT(0x10005E5CCLL);
}

void sub_10005E4E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_100028D64(&a25);
  sub_10005E9FC((uint64_t **)(v34 - 136));
  for (uint64_t i = 32; i != -32; i -= 32)
    sub_10005E9FC((uint64_t **)(v34 - 208 + i));
  sub_100028D64(&a27);
  if (a34 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x10005E580);
}

void sub_10005E598(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005E5D4(unsigned __int8 *a1, char *a2)
{
  long long v6 = a2;
  sub_100030238((uint64_t)v4, &v6);
  LODWORD(a1) = sub_10001F600(a1, v4);
  sub_100016EAC((uint64_t)v4);
  sub_100016B28(&v5, v4[0]);
  return a1 ^ 1;
}

void sub_10005E664(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10005E670(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, unsigned __int8 *a6)
{
  uint64_t v36 = a5;
  uint64_t v37 = a2;
  sub_100030238((uint64_t)v34, &v36);
  long long v10 = sub_10000D104(a6, "message");
  sub_100016EAC((uint64_t)v34);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)long long v10 = v34[0];
  v34[0] = v11;
  long long v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v35;
  uint64_t v35 = v12;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v34);
  sub_100016B28(&v35, v34[0]);
  sub_100030238((uint64_t)v32, &v37);
  long long v13 = sub_10000D104(a6, "source");
  sub_100016EAC((uint64_t)v32);
  char v14 = *(unsigned char *)v13;
  *(unsigned char *)long long v13 = v32[0];
  v32[0] = v14;
  long long v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v33;
  long long v33 = v15;
  sub_100016EAC((uint64_t)v13);
  sub_100016EAC((uint64_t)v32);
  sub_100016B28(&v33, v32[0]);
  sub_100015438(v27, "name");
  sub_100024AD0("<unknown>", a4, (const void **)v27, &__p);
  sub_10001C898((uint64_t)v30, (uint64_t)&__p);
  uint64_t v16 = sub_10000D104(a6, "transformName");
  sub_100016EAC((uint64_t)v30);
  char v17 = *(unsigned char *)v16;
  *(unsigned char *)uint64_t v16 = v30[0];
  v30[0] = v17;
  std::string v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  long long v31 = v18;
  sub_100016EAC((uint64_t)v16);
  sub_100016EAC((uint64_t)v30);
  sub_100016B28(&v31, v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_100016A10((uint64_t)v25, a3);
  long long v19 = sub_10000D104(a6, "transformUuid");
  sub_100016EAC((uint64_t)v25);
  char v20 = *(unsigned char *)v19;
  *(unsigned char *)long long v19 = v25[0];
  v25[0] = v20;
  long long v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v26;
  int64_t v26 = v21;
  sub_100016EAC((uint64_t)v19);
  sub_100016EAC((uint64_t)v25);
  sub_100016B28(&v26, v25[0]);
  uint64_t v22 = *(void *)(a1 + 8);
  sub_100016A10((uint64_t)v23, (uint64_t)a6);
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v22 + 40))(v22, "RegexCheckingConfigPass", v23);
  sub_100016EAC((uint64_t)v23);
  sub_100016B28(&v24, v23[0]);
}

void sub_10005E938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
}

uint64_t sub_10005E9B8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

uint64_t **sub_10005E9FC(uint64_t **a1)
{
  return a1;
}

uint64_t sub_10005EA30(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_10005EA7C(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_10005EA7C(char *a1)
{
  size_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_10005EAB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10005EAC8()
{
}

void *sub_10005EB2C(void *a1, void *a2)
{
  unint64_t v4 = dispatch_queue_create("analyticsd.DefaultQueriedStateCacheQueue", 0);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    dispatch_release(v5);
  }
  *a1 = off_100153B50;
  uint64_t v6 = a2[1];
  a1[4] = *a2;
  a1[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_10005EBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10005F804;
  block[3] = &unk_100153C58;
  block[4] = v2;
  block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_10005EC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v3, (void *)(a1 + 8));
  operator new();
}

void sub_10005ED84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10005ED94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = a5;
  char v9 = a6;
  uint64_t v6 = a1 + 8;
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  void v8[3] = a4;
  void v8[4] = &v10;
  v8[5] = &v9;
  long long v7 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10005FB90;
  block[3] = &unk_100153CB8;
  block[4] = v6;
  block[5] = v8;
  dispatch_sync(v7, block);
}

void sub_10005EE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = v11;
  long long v13 = v11;
  sub_100016A10((uint64_t)&v12, a4);
  *(std::chrono::system_clock::time_point *)&long long v13 = std::chrono::system_clock::now();
  *((void *)&v13 + 1) = 1000000 * a5;
  LOBYTE(v14) = a6;
  (*(void (**)(void, uint64_t, uint64_t, long long *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, a3, &v12);
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28((uint64_t **)&v12 + 1, v12);
}

void sub_10005EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void sub_10005EF64(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v4, (void *)(a1 + 8));
  operator new();
}

void sub_10005F0D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005F0E4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_DEBUG)) {
    sub_1000FA494(a2, v4);
  }
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a2);
}

void sub_10005F16C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_10005F268(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005F278(uint64_t a1)
{
  uint64_t v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[StateCache] Invalidating all cache entries", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32));
}

void sub_10005F33C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10005FCC4;
  _OWORD v5[3] = &unk_100153CD8;
  void v5[4] = v2;
  v5[5] = &v4;
  uint64_t v6 = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10005FCD0;
  block[3] = &unk_100153CF8;
  block[4] = a2;
  block[5] = &v6;
  dispatch_sync(v3, block);
}

void sub_10005F434(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  for (uint64_t i = *(void *)(a1 + 56); v3 != i; v3 += 16)
  {
    memset(v5, 170, sizeof(v5));
    (*(void (**)(long long **__return_ptr))(**(void **)v3 + 24))(v5);
    sub_10005FD74(v5[0], v5[1], a2);
    uint64_t v6 = v5;
    sub_10002A71C((void ***)&v6);
  }
}

void sub_10005F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  a13 = &a10;
  sub_10002A71C((void ***)&a13);
  sub_10002A71C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10005F53C(uint64_t a1)
{
  *(void *)a1 = off_100153B50;
  uint64_t v4 = (void **)(a1 + 48);
  sub_100014738(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_10004085C(a1 + 8);
  return a1;
}

void sub_10005F5D4(uint64_t a1)
{
  *(void *)a1 = off_100153B50;
  uint64_t v3 = (void **)(a1 + 48);
  sub_100014738(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_10004085C(a1 + 8);
  operator delete();
}

void sub_10005F680(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10005F700(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10005F7D8);
  __cxa_rethrow();
}

void sub_10005F728(_Unwind_Exception *a1)
{
}

void sub_10005F740(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10005F778(uint64_t a1)
{
}

uint64_t sub_10005F794(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10005F7D8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10005F804(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 40) + 32) + 56))(*(void *)(**(void **)(a1 + 40) + 32), *(void *)(*(void *)(a1 + 40) + 8));
}

uint64_t *sub_10005F834(void **a1)
{
  char v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  if (v1[1])
  {
    uint64_t v2 = *v1;
    sub_10005F8FC((uint64_t *)(*v1 + 48), (uint64_t)(v1 + 1));
    (*(void (**)(void))(**(void **)(*(void *)(v2 + 56) - 16) + 16))(*(void *)(*(void *)(v2 + 56) - 16));
  }
  sub_100042938((uint64_t *)&v5);
  return sub_100024E7C((uint64_t *)&v4);
}

void sub_10005F8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100042938((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_10005F8FC(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  long long v7 = (_OWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v17[4] = v4;
    long long v13 = (char *)sub_1000171B0((uint64_t)v4, v12);
    unint64_t v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    _OWORD v17[2] = v14 + 16;
    sub_10005FA1C(a1, v17);
    long long v8 = (_OWORD *)a1[1];
    sub_100014B08(v17);
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    long long v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_10005FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_10005FA1C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10005FA94((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10005FA94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_10005FB58((uint64_t)v14);
  return v10;
}

uint64_t sub_10005FB58(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054214(a1);
  }
  return a1;
}

void sub_10005FB90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  sub_10005EE54(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), **(void **)(v1 + 32), **(unsigned char **)(v1 + 40));
}

void sub_10005FBAC(uint64_t **a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = *a1;
  sub_10005F0E4(**a1, *a1 + 1);
  if (*((char *)v1 + 31) < 0) {
    operator delete((void *)v1[1]);
  }
  operator delete();
}

void sub_10005FC44(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_10005F278(**a1);
  operator delete();
}

void sub_10005FCC4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10005FCD0(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  sub_100044D4C(v2);
  *(_OWORD *)uint64_t v2 = v3;
  v2[2] = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  sub_10002A71C(&v5);
}

long long *sub_10005FD74(long long *a1, long long *a2, uint64_t *a3)
{
  long long v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_10005FE08(&v6, v3);
    long long v3 = (long long *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

uint64_t **sub_10005FE08(uint64_t **a1, long long *a2)
{
  long long v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_10005193C(v6, a2);
  }
  else
  {
    sub_1000518DC(v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void *sub_10005FE5C(void *a1, uint64_t a2)
{
  uint64_t result = sub_100089038(a1, a2);
  *uint64_t result = &off_100153D28;
  return result;
}

void sub_10005FE94(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_10005FECC(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  memset(v37, 170, sizeof(v37));
  sub_1000625C0((uint64_t)a3, v50);
  sub_100062C00(v50, v37);
  sub_10001700C((uint64_t)v50, (char *)v50[1]);
  uint64_t v3 = v37[0];
  uint64_t v27 = v37[1];
  if (v37[0] != v37[1])
  {
    while ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      unsigned int v4 = *(unsigned __int8 *)(v3 + 23);
      if (v4 <= 9)
      {
        unint64_t v5 = (unsigned __int8 *)v3;
        if (v4 != 5)
        {
          if (v4 != 6) {
            goto LABEL_55;
          }
          if (*(_DWORD *)v3 != 1684104552 || *(_WORD *)(v3 + 4) != 29285) {
            goto LABEL_55;
          }
          goto LABEL_66;
        }
        goto LABEL_45;
      }
      if (v4 == 10)
      {
        if (*(void *)v3 != 0x726F66736E617274 || *(_WORD *)(v3 + 8) != 29549)
        {
LABEL_55:
          uint64_t v18 = *(void *)(a1 + 8);
          sub_1000459F4((uint64_t)v44, "message");
          uint64_t v45 = v44;
          char v46 = 1;
          std::operator+<char>();
          long long v19 = std::string::append(&v30, "'");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          std::string::size_type v32 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          sub_10001C898((uint64_t)v33, (uint64_t)__p);
          v47[0] = v33[0];
          v48[0] = v34;
          sub_100016EAC((uint64_t)v33);
          v33[0] = 0;
          uint64_t v34 = 0;
          sub_100016EAC((uint64_t)v47);
          v48[1] = v47;
          char v49 = 1;
          sub_10001200C((uint64_t)v50, (uint64_t)v44, 2, 1, 2);
          v50[2] = (void **)v50;
          char v51 = 1;
          sub_100063038((uint64_t)v38, "source");
          unint64_t v39 = v38;
          char v40 = 1;
          sub_100062FA0((uint64_t)v28, "configSource");
          v41[0] = v28[0];
          v42[0] = v29;
          sub_100016EAC((uint64_t)v28);
          v28[0] = 0;
          unint64_t v29 = 0;
          sub_100016EAC((uint64_t)v41);
          v42[1] = v41;
          char v43 = 1;
          sub_10001200C((uint64_t)v52, (uint64_t)v38, 2, 1, 2);
          long long v53 = v52;
          char v54 = 1;
          sub_10001200C((uint64_t)v35, (uint64_t)v50, 2, 0, 1);
          (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v18 + 32))(v18, "SyntaxCheckingConfigPass", v35);
          sub_100016EAC((uint64_t)v35);
          sub_100016B28(&v36, v35[0]);
          for (uint64_t i = 0; i != -64; i -= 32)
          {
            sub_100016EAC((uint64_t)&v52[i]);
            sub_100016B28((uint64_t **)&v52[i + 8], v52[i]);
          }
          for (uint64_t j = 0; j != -8; j -= 4)
          {
            sub_100016EAC((uint64_t)&v41[j * 8]);
            sub_100016B28((uint64_t **)&v42[j], v41[j * 8]);
          }
          sub_100016EAC((uint64_t)v28);
          sub_100016B28(&v29, v28[0]);
          for (uint64_t k = 0; k != -8; k -= 4)
          {
            sub_100016EAC((uint64_t)&v47[k * 8]);
            sub_100016B28((uint64_t **)&v48[k], v47[k * 8]);
          }
          sub_100016EAC((uint64_t)v33);
          sub_100016B28(&v34, v33[0]);
          if (SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          sub_100060E10((uint64_t)a3, (const void **)v3);
          goto LABEL_66;
        }
LABEL_68:
        sub_1000605B8(a1, a2, a3);
        goto LABEL_66;
      }
      if (v4 != 22) {
        goto LABEL_55;
      }
      BOOL v12 = *(void *)v3 == 0x6C616E7265747865 && *(void *)(v3 + 8) == 0x72756769666E6F43;
      if (!v12 || *(void *)(v3 + 14) != 0x736E6F6974617275) {
        goto LABEL_55;
      }
LABEL_66:
      v3 += 24;
      if (v3 == v27) {
        goto LABEL_69;
      }
    }
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7 == 6)
    {
      if (**(_DWORD **)v3 == 1684104552 && *(_WORD *)(*(void *)v3 + 4) == 29285) {
        goto LABEL_66;
      }
      uint64_t v7 = *(void *)(v3 + 8);
    }
    else if (v7 == 10 && **(void **)v3 == 0x726F66736E617274 && *(_WORD *)(*(void *)v3 + 8) == 29549)
    {
      goto LABEL_68;
    }
    if (v7 == 22)
    {
      if (**(void **)v3 == 0x6C616E7265747865
        && *(void *)(*(void *)v3 + 8) == 0x72756769666E6F43
        && *(void *)(*(void *)v3 + 14) == 0x736E6F6974617275)
      {
        goto LABEL_66;
      }
      uint64_t v7 = *(void *)(v3 + 8);
    }
    if (v7 != 5) {
      goto LABEL_55;
    }
    unint64_t v5 = *(unsigned __int8 **)v3;
LABEL_45:
    int v14 = *(_DWORD *)v5;
    int v15 = v5[4];
    if (v14 != 1802398067 || v15 != 115) {
      goto LABEL_55;
    }
    goto LABEL_66;
  }
LABEL_69:
  v50[0] = (void **)v37;
  sub_10002A71C(v50);
}

void sub_100060428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_10001700C(v37 - 160, *(char **)(v37 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1000605B8(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t result = sub_100089060(a1, (uint64_t)"SyntaxCheckingConfigPass", a2, (uint64_t)a3);
  if (result)
  {
    uint64_t v7 = sub_10000D104(a3, "transforms");
    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v68[0] = v8;
    v68[1] = v8;
    long long v9 = (unsigned __int8 **)sub_10001586C(v68, (uint64_t)v7);
    sub_10001D3E4(v9);
    unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v66[0] = v10;
    v66[1] = v10;
    sub_10001586C(v66, (uint64_t)v7);
    sub_1000157EC((unsigned __int8 **)v66);
    for (uint64_t result = sub_1000205D8((unsigned __int8 **)v68, (unsigned __int8 **)v66);
          (result & 1) == 0;
          uint64_t result = sub_1000205D8((unsigned __int8 **)v68, (unsigned __int8 **)v66))
    {
      uint64_t v11 = sub_10001EE40((unsigned __int8 **)v68);
      memset(&__p, 170, sizeof(__p));
      sub_100015438(&v70, "uuid");
      sub_100024AD0("", (char *)v11, (const void **)&v70, &__p);
      if (SBYTE7(v71) < 0) {
        operator delete((void *)v70);
      }
      unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v63[0] = v12;
      v63[1] = v12;
      sub_10003A370((uint64_t)v11, "type", (uint64_t)v63);
      v72[0] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v70 = v13;
      long long v71 = v13;
      int v14 = (unsigned __int8 **)sub_10001586C(&v70, (uint64_t)v11);
      sub_1000157EC(v14);
      if (sub_1000205D8((unsigned __int8 **)v63, (unsigned __int8 **)&v70))
      {
        sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
        sub_10001200C((uint64_t)v61, 0, 0, 0, 1);
        sub_100060F74(a1, a2, (uint64_t)&v70, (char *)v11, "Transform has no type", v61);
        sub_100016EAC((uint64_t)v61);
        int v15 = v61[0];
        uint64_t v16 = (uint64_t **)&v62;
      }
      else
      {
        char v28 = sub_10001EE40((unsigned __int8 **)v63);
        if (sub_1000612BC(v28, "aggregate"))
        {
          uint64_t v29 = sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
          char v32 = sub_100061358(v29, v30, v31, v11);
          sub_100016EAC((uint64_t)&v70);
          sub_100016B28((uint64_t **)&v70 + 1, v70);
          if (v32) {
            goto LABEL_10;
          }
          sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
          sub_10001200C((uint64_t)v59, 0, 0, 0, 1);
          sub_100060F74(a1, a2, (uint64_t)&v70, (char *)v11, "Aggregate syntax error", v59);
          sub_100016EAC((uint64_t)v59);
          int v15 = v59[0];
          uint64_t v16 = (uint64_t **)&v60;
        }
        else
        {
          long long v33 = sub_10001EE40((unsigned __int8 **)v63);
          if (sub_1000612BC(v33, "identity"))
          {
            uint64_t v34 = sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
            char v37 = sub_1000619C0(v34, v35, v36, (uint64_t)v11);
            sub_100016EAC((uint64_t)&v70);
            sub_100016B28((uint64_t **)&v70 + 1, v70);
            if (v37) {
              goto LABEL_10;
            }
            sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
            sub_10001200C((uint64_t)v57, 0, 0, 0, 1);
            sub_100060F74(a1, a2, (uint64_t)&v70, (char *)v11, "Identity syntax error", v57);
            sub_100016EAC((uint64_t)v57);
            int v15 = v57[0];
            uint64_t v16 = (uint64_t **)&v58;
          }
          else
          {
            unint64_t v38 = sub_10001EE40((unsigned __int8 **)v63);
            if (!sub_1000612BC(v38, "markov"))
            {
              sub_1000168C0((uint64_t)v53, (uint64_t)&__p);
              sub_10002F72C((uint64_t)&v70, "typeSeen");
              *(void *)&long long v71 = &v70;
              BYTE8(v71) = 1;
              char v43 = sub_10001EE40((unsigned __int8 **)v63);
              sub_100016A10((uint64_t)v72, (uint64_t)v43);
              v72[2] = v72;
              char v73 = 1;
              sub_10001200C((uint64_t)v74, (uint64_t)&v70, 2, 1, 2);
              v75[1] = (uint64_t *)v74;
              char v76 = 1;
              sub_10001200C((uint64_t)v51, (uint64_t)v74, 1, 1, 2);
              sub_100060F74(a1, a2, (uint64_t)v53, (char *)v11, "Transform type not supported", v51);
              sub_100016EAC((uint64_t)v51);
              sub_100016B28(&v52, v51[0]);
              sub_100016EAC((uint64_t)v74);
              sub_100016B28(v75, v74[0]);
              for (uint64_t i = 0; i != -8; i -= 4)
              {
                sub_100016EAC((uint64_t)&v72[i]);
                sub_100016B28((uint64_t **)&v72[i + 1], LOBYTE(v72[i]));
              }
              sub_100016EAC((uint64_t)v53);
              int v17 = v53[0];
              uint64_t v18 = (uint64_t **)&v54;
              goto LABEL_9;
            }
            uint64_t v39 = sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
            BOOL v42 = sub_100061F54(v39, v40, v41, v11);
            sub_100016EAC((uint64_t)&v70);
            sub_100016B28((uint64_t **)&v70 + 1, v70);
            if (v42) {
              goto LABEL_10;
            }
            sub_1000168C0((uint64_t)&v70, (uint64_t)&__p);
            sub_10001200C((uint64_t)v55, 0, 0, 0, 1);
            sub_100060F74(a1, a2, (uint64_t)&v70, (char *)v11, "Markov syntax error", v55);
            sub_100016EAC((uint64_t)v55);
            int v15 = v55[0];
            uint64_t v16 = (uint64_t **)&v56;
          }
        }
      }
      sub_100016B28(v16, v15);
      sub_100016EAC((uint64_t)&v70);
      int v17 = v70;
      uint64_t v18 = (uint64_t **)&v70 + 1;
LABEL_9:
      sub_100016B28(v18, v17);
      v49[0] = 4;
      unint64_t v50 = 0;
      sub_100016EAC((uint64_t)v49);
      sub_100016EAC((uint64_t)v49);
      long long v19 = sub_10000D104(v11, "_ca_transformEnabled");
      sub_100016EAC((uint64_t)v49);
      unsigned __int8 v20 = *(unsigned char *)v19;
      *(unsigned char *)long long v19 = v49[0];
      v49[0] = v20;
      long long v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v50;
      unint64_t v50 = v21;
      sub_100016EAC((uint64_t)v19);
      sub_100016EAC((uint64_t)v49);
      sub_100016B28(&v50, v49[0]);
      v47[0] = 5;
      uint64_t v48 = 1;
      sub_100016EAC((uint64_t)v47);
      sub_100016EAC((uint64_t)v47);
      uint64_t v22 = sub_10000D104(v11, "_ca_transformEnabledPriority");
      sub_100016EAC((uint64_t)v47);
      unsigned __int8 v23 = *(unsigned char *)v22;
      *(unsigned char *)uint64_t v22 = v47[0];
      v47[0] = v23;
      long long v24 = (uint64_t *)v22[1];
      v22[1] = v48;
      uint64_t v48 = (uint64_t)v24;
      sub_100016EAC((uint64_t)v22);
      sub_100016EAC((uint64_t)v47);
      sub_100016B28((uint64_t **)&v48, v47[0]);
      *(void *)&long long v70 = "syntaxCheck";
      sub_100030238((uint64_t)v45, (char **)&v70);
      unint64_t v25 = sub_10000D104(v11, "_ca_transformEnabledBy");
      sub_100016EAC((uint64_t)v45);
      char v26 = *(unsigned char *)v25;
      *(unsigned char *)unint64_t v25 = v45[0];
      v45[0] = v26;
      uint64_t v27 = (uint64_t *)v25[1];
      v25[1] = (uint64_t)v46;
      char v46 = v27;
      sub_100016EAC((uint64_t)v25);
      sub_100016EAC((uint64_t)v45);
      sub_100016B28(&v46, v45[0]);
LABEL_10:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100013C64((unsigned __int8 **)v68);
    }
  }
  return result;
}

void sub_100060CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t *a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  sub_100028D64(&a33);
  sub_100028D64((uint64_t **)(v51 - 192));
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100060E10(uint64_t a1, const void **a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v6 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v9, v6);
    uint64_t v7 = std::string::insert(&v9, 0, "cannot use erase() with ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(307, (uint64_t)&v10, exception);
  }
  uint64_t v3 = *(uint64_t ***)(a1 + 8);

  return sub_1000630D0(v3, a2);
}

void sub_100060F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_100060F74(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, unsigned __int8 *a6)
{
  uint64_t v36 = a5;
  char v37 = a2;
  sub_100030238((uint64_t)v34, &v36);
  long long v10 = sub_10000D104(a6, "message");
  sub_100016EAC((uint64_t)v34);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)long long v10 = v34[0];
  v34[0] = v11;
  long long v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v35;
  uint64_t v35 = v12;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v34);
  sub_100016B28(&v35, v34[0]);
  sub_100030238((uint64_t)v32, &v37);
  long long v13 = sub_10000D104(a6, "source");
  sub_100016EAC((uint64_t)v32);
  char v14 = *(unsigned char *)v13;
  *(unsigned char *)long long v13 = v32[0];
  v32[0] = v14;
  int v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v33;
  long long v33 = v15;
  sub_100016EAC((uint64_t)v13);
  sub_100016EAC((uint64_t)v32);
  sub_100016B28(&v33, v32[0]);
  sub_100015438(v27, "name");
  sub_100024AD0("<unknown>", a4, (const void **)v27, &__p);
  sub_10001C898((uint64_t)v30, (uint64_t)&__p);
  uint64_t v16 = sub_10000D104(a6, "transformName");
  sub_100016EAC((uint64_t)v30);
  char v17 = *(unsigned char *)v16;
  *(unsigned char *)uint64_t v16 = v30[0];
  v30[0] = v17;
  uint64_t v18 = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v31;
  uint64_t v31 = v18;
  sub_100016EAC((uint64_t)v16);
  sub_100016EAC((uint64_t)v30);
  sub_100016B28(&v31, v30[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  sub_100016A10((uint64_t)v25, a3);
  long long v19 = sub_10000D104(a6, "transformUuid");
  sub_100016EAC((uint64_t)v25);
  char v20 = *(unsigned char *)v19;
  *(unsigned char *)long long v19 = v25[0];
  v25[0] = v20;
  long long v21 = (uint64_t *)v19[1];
  v19[1] = (uint64_t)v26;
  char v26 = v21;
  sub_100016EAC((uint64_t)v19);
  sub_100016EAC((uint64_t)v25);
  sub_100016B28(&v26, v25[0]);
  uint64_t v22 = *(void *)(a1 + 8);
  sub_100016A10((uint64_t)v23, (uint64_t)a6);
  (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v22 + 40))(v22, "SyntaxCheckingConfigPass", v23);
  sub_100016EAC((uint64_t)v23);
  sub_100016B28(&v24, v23[0]);
}

void sub_10006123C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
}

uint64_t sub_1000612BC(unsigned __int8 *a1, char *a2)
{
  uint64_t v7 = a2;
  sub_100030238((uint64_t)v5, &v7);
  uint64_t v3 = sub_10001F600(a1, v5);
  sub_100016EAC((uint64_t)v5);
  sub_100016B28(&v6, v5[0]);
  return v3;
}

void sub_10006134C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100061358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v37 = "inputs";
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v5;
  long long v42 = v5;
  sub_1000135DC((uint64_t)a4, &v37, (uint64_t)&v41);
  long long v47 = (unint64_t)a4;
  long long v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v47);
  if (!sub_100013964((unsigned __int8 **)&v41, (unsigned __int8 **)&v47)
    && *sub_100063118((unsigned __int8 **)&v41) == 2)
  {
    uint64_t v6 = sub_100063118((unsigned __int8 **)&v41);
    unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v38 = v7;
    long long v39 = v7;
    sub_1000136C8(v38, (uint64_t)v6);
    sub_100014064((unsigned __int8 **)v38);
    long long v8 = sub_100063118((unsigned __int8 **)&v41);
    unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v35[0] = v9;
    v35[1] = v9;
    sub_1000136C8(v35, (uint64_t)v8);
    sub_100013648((unsigned __int8 **)v35);
    if (sub_100013964((unsigned __int8 **)v38, (unsigned __int8 **)v35))
    {
LABEL_4:
      *(void *)&v35[0] = "outputs";
      unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v47 = v10;
      long long v48 = v10;
      sub_1000135DC((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
      __p[0] = a4;
      __p[1] = 0;
      long long v45 = 0uLL;
      unint64_t v46 = 0x8000000000000000;
      sub_100013648((unsigned __int8 **)__p);
      if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
        && *sub_100063118((unsigned __int8 **)&v47) == 2)
      {
        char v11 = sub_100063118((unsigned __int8 **)&v47);
        unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v41 = v12;
        long long v42 = v12;
        sub_1000136C8(&v41, (uint64_t)v11);
        sub_100014064((unsigned __int8 **)&v41);
        long long v13 = sub_100063118((unsigned __int8 **)&v47);
        unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)unint64_t v38 = v14;
        long long v39 = v14;
        sub_1000136C8(v38, (uint64_t)v13);
        sub_100013648((unsigned __int8 **)v38);
        if (sub_100013964((unsigned __int8 **)&v41, (unsigned __int8 **)v38))
        {
LABEL_11:
          *(void *)&v35[0] = "dimensions";
          unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v47 = v16;
          long long v48 = v16;
          sub_1000135DC((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
          __p[0] = a4;
          __p[1] = 0;
          long long v45 = 0uLL;
          unint64_t v46 = 0x8000000000000000;
          sub_100013648((unsigned __int8 **)__p);
          if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
            && *sub_100063118((unsigned __int8 **)&v47) == 2)
          {
            char v17 = sub_100063118((unsigned __int8 **)&v47);
            unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v41 = v18;
            long long v42 = v18;
            sub_1000136C8(&v41, (uint64_t)v17);
            sub_100014064((unsigned __int8 **)&v41);
            long long v19 = sub_100063118((unsigned __int8 **)&v47);
            unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)unint64_t v38 = v20;
            long long v39 = v20;
            sub_1000136C8(v38, (uint64_t)v19);
            sub_100013648((unsigned __int8 **)v38);
            if (sub_100013964((unsigned __int8 **)&v41, (unsigned __int8 **)v38))
            {
LABEL_14:
              *(void *)&v35[0] = "measures";
              unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
              *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
              long long v47 = v21;
              long long v48 = v21;
              sub_1000135DC((uint64_t)a4, (const std::string::value_type **)v35, (uint64_t)&v47);
              __p[0] = a4;
              __p[1] = 0;
              long long v45 = 0uLL;
              unint64_t v46 = 0x8000000000000000;
              sub_100013648((unsigned __int8 **)__p);
              if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)__p)
                && *sub_100063118((unsigned __int8 **)&v47) == 2)
              {
                uint64_t v22 = sub_100063118((unsigned __int8 **)&v47);
                unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)std::string __p = v23;
                long long v45 = v23;
                sub_1000136C8(__p, (uint64_t)v22);
                sub_100014064((unsigned __int8 **)__p);
                long long v24 = sub_100063118((unsigned __int8 **)&v47);
                unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v41 = v25;
                long long v42 = v25;
                sub_1000136C8(&v41, (uint64_t)v24);
                sub_100013648((unsigned __int8 **)&v41);
                if (sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&v41)) {
                  return 1;
                }
                while (1)
                {
                  uint64_t v31 = sub_100013AAC((unsigned __int8 **)__p);
                  if (!sub_100063278((uint64_t)v31, "name")
                    || !sub_100063278((uint64_t)v31, "type")
                    || !sub_100063278((uint64_t)v31, "function"))
                  {
                    break;
                  }
                  char v32 = (unsigned __int8 *)sub_100024940((uint64_t)v31, "function");
                  if (!sub_1000612BC(v32, "count"))
                  {
                    LOBYTE(v5sub_100027DA4((uint64_t)&a9, 0) = sub_100063278((uint64_t)v31, "field");
                    BYTE1(v5sub_100027DA4((uint64_t)&a9, 0) = sub_100063464((uint64_t)v31);
                    sub_10006352C(v38, &v50, 2);
                    BOOL v33 = sub_1000633F8((uint64_t)v38);
                    if (v38[0])
                    {
                      operator delete(v38[0]);
                      if (!v33) {
                        return 0;
                      }
                    }
                    else if (!v33)
                    {
                      return 0;
                    }
                  }
                  sub_100013C64((unsigned __int8 **)__p);
                  BOOL v34 = sub_100013964((unsigned __int8 **)__p, (unsigned __int8 **)&v41);
                  uint64_t result = 1;
                  if (v34) {
                    return result;
                  }
                }
              }
            }
            else
            {
              while (1)
              {
                uint64_t v29 = sub_100013AAC((unsigned __int8 **)&v41);
                if (!sub_100063278((uint64_t)v29, "name") || !sub_100063278((uint64_t)v29, "type")) {
                  break;
                }
                LOBYTE(v5sub_100027DA4((uint64_t)&a9, 0) = sub_100063278((uint64_t)v29, "field");
                BYTE1(v5sub_100027DA4((uint64_t)&a9, 0) = sub_100063464((uint64_t)v29);
                sub_10006352C(__p, &v50, 2);
                BOOL v30 = sub_1000633F8((uint64_t)__p);
                if (__p[0])
                {
                  operator delete(__p[0]);
                  if (!v30) {
                    return 0;
                  }
                }
                else if (!v30)
                {
                  return 0;
                }
                sub_100013C64((unsigned __int8 **)&v41);
                if (sub_100013964((unsigned __int8 **)&v41, (unsigned __int8 **)v38)) {
                  goto LABEL_14;
                }
              }
            }
          }
        }
        else
        {
          while (1)
          {
            int v15 = sub_100013AAC((unsigned __int8 **)&v41);
            if (!sub_100063278((uint64_t)v15, "event")
              && (!sub_100063278((uint64_t)v15, "message") || !sub_100063278((uint64_t)v15, "sink")))
            {
              break;
            }
            sub_100013C64((unsigned __int8 **)&v41);
            if (sub_100013964((unsigned __int8 **)&v41, (unsigned __int8 **)v38)) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v27 = sub_100013AAC((unsigned __int8 **)v38);
        if (!sub_100063278((uint64_t)v27, "event")) {
          break;
        }
        if (!sub_100063338((uint64_t)v27, "ignoreIf")) {
          break;
        }
        unint64_t v50 = "transformation";
        unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v47 = v28;
        long long v48 = v28;
        sub_1000135DC((uint64_t)v27, &v50, (uint64_t)&v47);
        long long v45 = 0uLL;
        __p[1] = 0;
        __p[0] = v27;
        unint64_t v46 = 0x8000000000000000;
        sub_100013648((unsigned __int8 **)__p);
        if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)__p)) {
          break;
        }
        sub_100013C64((unsigned __int8 **)v38);
        if (sub_100013964((unsigned __int8 **)v38, (unsigned __int8 **)v35)) {
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1000619C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v42 = "inputs";
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[0] = v5;
  v40[1] = v5;
  sub_1000135DC(a4, &v42, (uint64_t)v40);
  long long v50 = (unint64_t)a4;
  long long v51 = 0uLL;
  unint64_t v52 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v50);
  if (sub_100013964((unsigned __int8 **)v40, (unsigned __int8 **)&v50) || *sub_100063118((unsigned __int8 **)v40) != 2) {
    return 0;
  }
  uint64_t v6 = sub_100063118((unsigned __int8 **)v40);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[0] = v7;
  v38[1] = v7;
  sub_1000136C8(v38, (uint64_t)v6);
  sub_100014064((unsigned __int8 **)v38);
  long long v8 = sub_100063118((unsigned __int8 **)v40);
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v9;
  v36[1] = v9;
  sub_1000136C8(v36, (uint64_t)v8);
  sub_100013648((unsigned __int8 **)v36);
  while (!sub_100013964((unsigned __int8 **)v38, (unsigned __int8 **)v36))
  {
    long long v23 = sub_100013AAC((unsigned __int8 **)v38);
    if (!sub_100063278((uint64_t)v23, "event")
      || !sub_100063338((uint64_t)v23, "transformation")
      || !sub_100063338((uint64_t)v23, "ignoreIf"))
    {
      return 0;
    }
    unint64_t v43 = "queryStates";
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v50 = v24;
    long long v51 = v24;
    sub_1000135DC((uint64_t)v23, &v43, (uint64_t)&v50);
    long long v48 = 0uLL;
    long long v47 = (unint64_t)v23;
    unint64_t v49 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v47);
    if (!sub_100013964((unsigned __int8 **)&v50, (unsigned __int8 **)&v47))
    {
      if (*sub_100063118((unsigned __int8 **)&v50) != 2) {
        return 0;
      }
      long long v25 = sub_100063118((unsigned __int8 **)&v50);
      unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v44 = v26;
      long long v45 = v26;
      sub_1000136C8(&v44, (uint64_t)v25);
      sub_100014064((unsigned __int8 **)&v44);
      uint64_t v27 = sub_100063118((unsigned __int8 **)&v50);
      unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v53 = v28;
      long long v54 = v28;
      uint64_t v29 = (unsigned __int8 **)sub_1000136C8(&v53, (uint64_t)v27);
      sub_100013648(v29);
      while (!sub_100013964((unsigned __int8 **)&v44, (unsigned __int8 **)&v53))
      {
        BOOL v30 = sub_100013AAC((unsigned __int8 **)&v44);
        if (!sub_100063278((uint64_t)v30, "state")) {
          return 0;
        }
        sub_100013C64((unsigned __int8 **)&v44);
      }
    }
    sub_100013C64((unsigned __int8 **)v38);
  }
  *(void *)&v40[0] = "outputs";
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v10;
  long long v51 = v10;
  sub_1000135DC(a4, (const std::string::value_type **)v40, (uint64_t)&v50);
  long long v47 = (unint64_t)a4;
  long long v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v47);
  if (sub_100013964((unsigned __int8 **)&v50, (unsigned __int8 **)&v47)
    || *sub_100063118((unsigned __int8 **)&v50) != 2)
  {
    return 0;
  }
  char v11 = sub_100063118((unsigned __int8 **)&v50);
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v12;
  long long v45 = v12;
  sub_1000136C8(&v44, (uint64_t)v11);
  sub_100014064((unsigned __int8 **)&v44);
  long long v13 = sub_100063118((unsigned __int8 **)&v50);
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v14;
  long long v54 = v14;
  int v15 = (unsigned __int8 **)sub_1000136C8(&v53, (uint64_t)v13);
  sub_100013648(v15);
  while (!sub_100013964((unsigned __int8 **)&v44, (unsigned __int8 **)&v53))
  {
    long long v16 = sub_100013AAC((unsigned __int8 **)&v44);
    if (!sub_100063278((uint64_t)v16, "event")
      && (!sub_100063278((uint64_t)v16, "message") || !sub_100063278((uint64_t)v16, "sink")))
    {
      return 0;
    }
    sub_100013C64((unsigned __int8 **)&v44);
  }
  *(void *)&v38[0] = "outputs";
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v17;
  long long v51 = v17;
  sub_1000135DC(a4, (const std::string::value_type **)v38, (uint64_t)&v50);
  long long v47 = (unint64_t)a4;
  long long v48 = 0uLL;
  unint64_t v49 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v47);
  if (sub_100013964((unsigned __int8 **)&v50, (unsigned __int8 **)&v47)
    || *sub_100063118((unsigned __int8 **)&v50) != 2)
  {
    return 0;
  }
  long long v18 = sub_100063118((unsigned __int8 **)&v50);
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v47 = v19;
  long long v48 = v19;
  sub_1000136C8(&v47, (uint64_t)v18);
  sub_100014064((unsigned __int8 **)&v47);
  long long v20 = sub_100063118((unsigned __int8 **)&v50);
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v21;
  long long v45 = v21;
  sub_1000136C8(&v44, (uint64_t)v20);
  sub_100013648((unsigned __int8 **)&v44);
  if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)&v44))
  {
    while (1)
    {
      uint64_t v31 = sub_100013AAC((unsigned __int8 **)&v47);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      *(void *)&long long v53 = "event";
      *((void *)&v53 + 1) = "message";
      do
      {
        *(void *)&v40[0] = *(void *)((char *)&v53 + v32);
        if (*v31 == 1) {
          uint64_t v34 = sub_100063628(*((void *)v31 + 1), (const std::string::value_type **)v40);
        }
        else {
          uint64_t v34 = 0;
        }
        v33 += v34;
        v32 += 8;
      }
      while (v32 != 16);
      if (v33 != 1
        || !sub_100063278((uint64_t)v31, "event")
        && (!sub_100063278((uint64_t)v31, "message") || !sub_100063278((uint64_t)v31, "sink")))
      {
        break;
      }
      BOOL v22 = sub_100063338((uint64_t)v31, "transformation");
      if (v22)
      {
        sub_100013C64((unsigned __int8 **)&v47);
        if (!sub_100013964((unsigned __int8 **)&v47, (unsigned __int8 **)&v44)) {
          continue;
        }
      }
      return v22;
    }
    return 0;
  }
  return 1;
}

BOOL sub_100061F54(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  *(void *)&v55[0] = "inputs";
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v5;
  long long v70 = v5;
  sub_1000135DC((uint64_t)a4, (const std::string::value_type **)v55, (uint64_t)&v69);
  unint64_t v64 = a4;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0x8000000000000000;
  sub_100013648(&v64);
  if (sub_100013964((unsigned __int8 **)&v69, &v64) || *sub_100063118((unsigned __int8 **)&v69) != 2) {
    return 0;
  }
  uint64_t v6 = sub_100063118((unsigned __int8 **)&v69);
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v7;
  long long v62 = v7;
  long long v8 = (unsigned __int8 **)sub_1000136C8(&v61, (uint64_t)v6);
  sub_100014064(v8);
  long long v9 = sub_100063118((unsigned __int8 **)&v69);
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v58 = v10;
  long long v59 = v10;
  sub_1000136C8(&v58, (uint64_t)v9);
  sub_100013648((unsigned __int8 **)&v58);
  while (!sub_100013964((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
  {
    char v11 = sub_100013AAC((unsigned __int8 **)&v61);
    if (!sub_100063278((uint64_t)v11, "event") || !sub_100063338((uint64_t)v11, "ignoreIf")) {
      return 0;
    }
    sub_100013C64((unsigned __int8 **)&v61);
  }
  *(void *)&v55[0] = "states";
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v12;
  long long v70 = v12;
  sub_1000135DC((uint64_t)a4, (const std::string::value_type **)v55, (uint64_t)&v69);
  unint64_t v64 = a4;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0x8000000000000000;
  sub_100013648(&v64);
  if (sub_100013964((unsigned __int8 **)&v69, &v64) || *sub_100063118((unsigned __int8 **)&v69) != 2) {
    return 0;
  }
  long long v13 = sub_100063118((unsigned __int8 **)&v69);
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v14;
  long long v62 = v14;
  int v15 = (unsigned __int8 **)sub_1000136C8(&v61, (uint64_t)v13);
  sub_100014064(v15);
  long long v16 = sub_100063118((unsigned __int8 **)&v69);
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v58 = v17;
  long long v59 = v17;
  sub_1000136C8(&v58, (uint64_t)v16);
  sub_100013648((unsigned __int8 **)&v58);
  while (!sub_100013964((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
  {
    long long v18 = sub_100013AAC((unsigned __int8 **)&v61);
    if (!sub_100063278((uint64_t)v18, "name")) {
      return 0;
    }
    sub_100013C64((unsigned __int8 **)&v61);
  }
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = "edges";
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48[0] = v19;
  v48[1] = v19;
  sub_1000135DC((uint64_t)a4, &v50, (uint64_t)v48);
  long long v69 = (unint64_t)a4;
  long long v70 = 0uLL;
  unint64_t v71 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)&v69);
  if (sub_100013964((unsigned __int8 **)v48, (unsigned __int8 **)&v69) || *sub_100063118((unsigned __int8 **)v48) != 2) {
    return 0;
  }
  long long v20 = sub_100063118((unsigned __int8 **)v48);
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46[0] = v21;
  v46[1] = v21;
  sub_1000136C8(v46, (uint64_t)v20);
  sub_100014064((unsigned __int8 **)v46);
  BOOL v22 = sub_100063118((unsigned __int8 **)v48);
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[0] = v23;
  v44[1] = v23;
  sub_1000136C8(v44, (uint64_t)v22);
  sub_100013648((unsigned __int8 **)v44);
  if (sub_100013964((unsigned __int8 **)v46, (unsigned __int8 **)v44)) {
    return 1;
  }
  do
  {
    long long v25 = sub_100013AAC((unsigned __int8 **)v46);
    BOOL result = sub_100063750((uint64_t)v25, "startingState");
    if (!result) {
      break;
    }
    BOOL result = sub_100063750((uint64_t)v25, "targetState");
    if (!result) {
      break;
    }
    BOOL result = sub_100063750((uint64_t)v25, "event");
    if (!result) {
      break;
    }
    unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
    int v57 = "actions";
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v55[0] = v26;
    v55[1] = v26;
    sub_1000135DC((uint64_t)v25, &v57, (uint64_t)v55);
    long long v70 = 0uLL;
    long long v69 = (unint64_t)v25;
    unint64_t v71 = 0x8000000000000000;
    sub_100013648((unsigned __int8 **)&v69);
    if (!sub_100013964((unsigned __int8 **)v55, (unsigned __int8 **)&v69))
    {
      if (*sub_100063118((unsigned __int8 **)v55) != 2) {
        return 0;
      }
      uint64_t v27 = sub_100063118((unsigned __int8 **)v55);
      unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v53[0] = v28;
      v53[1] = v28;
      sub_1000136C8(v53, (uint64_t)v27);
      sub_100014064((unsigned __int8 **)v53);
      uint64_t v29 = sub_100063118((unsigned __int8 **)v55);
      unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v51[0] = v30;
      v51[1] = v30;
      sub_1000136C8(v51, (uint64_t)v29);
      sub_100013648((unsigned __int8 **)v51);
      while (!sub_100013964((unsigned __int8 **)v53, (unsigned __int8 **)v51))
      {
        uint64_t v32 = sub_100013AAC((unsigned __int8 **)v53);
        uint64_t v33 = v32;
        if (*v32 != 1 || !sub_100063278((uint64_t)v32, "action")) {
          return 0;
        }
        uint64_t v34 = (unsigned __int8 *)sub_100024940((uint64_t)v33, "action");
        if (sub_1000612BC(v34, "sendEvent"))
        {
          if (!sub_100063278((uint64_t)v33, "event")) {
            return 0;
          }
          unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v72 = "fields";
          *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v69 = v35;
          long long v70 = v35;
          sub_1000135DC((uint64_t)v33, &v72, (uint64_t)&v69);
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          uint64_t v65 = 0;
          unint64_t v64 = v33;
          unint64_t v68 = 0x8000000000000000;
          sub_100013648(&v64);
          if (sub_100013964((unsigned __int8 **)&v69, &v64) || *sub_100063118((unsigned __int8 **)&v69) != 2) {
            return 0;
          }
          unint64_t v36 = sub_100063118((unsigned __int8 **)&v69);
          unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v61 = v37;
          long long v62 = v37;
          unint64_t v38 = (unsigned __int8 **)sub_1000136C8(&v61, (uint64_t)v36);
          sub_100014064(v38);
          unint64_t v39 = sub_100063118((unsigned __int8 **)&v69);
          unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v58 = v40;
          long long v59 = v40;
          sub_1000136C8(&v58, (uint64_t)v39);
          sub_100013648((unsigned __int8 **)&v58);
          for (BOOL i = sub_100013964((unsigned __int8 **)&v61, (unsigned __int8 **)&v58);
                !i;
                BOOL i = sub_100013964((unsigned __int8 **)&v61, (unsigned __int8 **)&v58))
          {
            long long v42 = sub_100013AAC((unsigned __int8 **)&v61);
            if (!sub_100063278((uint64_t)v42, "name")
              || !sub_100063278((uint64_t)v42, "type")
              || !sub_100063338((uint64_t)v42, "expression"))
            {
              return 0;
            }
            sub_100013C64((unsigned __int8 **)&v61);
          }
        }
        else
        {
          unint64_t v43 = (unsigned __int8 *)sub_100024940((uint64_t)v33, "action");
          if (!sub_1000612BC(v43, "updateLocalState") || !sub_100063338((uint64_t)v33, "expression")) {
            return 0;
          }
        }
        sub_100013C64((unsigned __int8 **)v53);
      }
    }
    sub_100013C64((unsigned __int8 **)v46);
    BOOL v31 = sub_100013964((unsigned __int8 **)v46, (unsigned __int8 **)v44);
    BOOL result = 1;
  }
  while (!v31);
  return result;
}

void sub_1000625C0(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  sub_10006260C(a1, (uint64_t)a2);
}

void sub_1000625F4(_Unwind_Exception *a1)
{
  sub_10001700C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10006260C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    long long v8 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v11, v8);
    long long v9 = std::string::insert(&v11, 0, "type must be object, but is ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(302, (uint64_t)&v12, exception);
  }
  *((void *)&v12 + 1) = 0;
  std::string::size_type v13 = 0;
  *(void *)&long long v12 = (char *)&v12 + 8;
  sub_1000627E0(**(long long ***)(a1 + 8), (long long *)(*(void *)(a1 + 8) + 8), (uint64_t)&v12, (uint64_t)&v12 + 8);
  uint64_t v4 = a2 + 8;
  sub_10001700C(a2, *(char **)(a2 + 8));
  uint64_t v5 = *((void *)&v12 + 1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v5;
  std::string::size_type v6 = v13;
  *(void *)(a2 + 16) = v13;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    *(void *)&long long v12 = (char *)&v12 + 8;
    *((void *)&v12 + 1) = 0;
    std::string::size_type v13 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    *(void *)a2 = v4;
  }
  sub_10001700C((uint64_t)&v12, (char *)v5);
}

void sub_10006276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, char *a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_1000627E0(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_100016A10((uint64_t)v15, (uint64_t)v5 + 56);
      sub_1000629A4(__p, v5 + 2, (uint64_t)v15);
      sub_100016EAC((uint64_t)v15);
      sub_100016B28(&v16, v15[0]);
      sub_100062938((uint64_t)v14, (const void **)__p);
      sub_100016EAC((uint64_t)v12);
      sub_100016B28(&v13, v12[0]);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      std::string::size_type v6 = (long long *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          std::string::size_type v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (long long *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
    return v14[0];
  }
  return a3;
}

void sub_10006290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100062938(uint64_t a1, const void **a2)
{
  uint64_t v3 = sub_100062A2C(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (long long *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void *sub_1000629A4(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((unsigned char *)__dst + 24) = *(unsigned char *)a3;
  __dst[4] = *(void *)(a3 + 8);
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  sub_100016EAC((uint64_t)(__dst + 3));
  return __dst;
}

uint64_t *sub_100062A2C(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = (const void **)0xAAAAAAAAAAAAAAAALL;
  BOOL v6 = (uint64_t **)sub_100018A34(a1, a2, &v9, &v8, a3);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v10, 170, sizeof(v10));
    sub_100062AE8((uint64_t)a1, a4, v10);
    sub_1000187B0(a1, (uint64_t)v9, v6, v10[0]);
    return v10[0];
  }
  return result;
}

void *sub_100062AE8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  BOOL v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  BOOL result = sub_100062B7C(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100062B60(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10002E44C(v2, v3);
  _Unwind_Resume(a1);
}

void *sub_100062B7C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  char v6 = *((unsigned char *)a2 + 24);
  uint64_t v5 = (uint64_t)a2 + 24;
  *((unsigned char *)__dst + 24) = v6;
  __dst[4] = *(void *)(v5 + 8);
  sub_100016EAC(v5);
  *(unsigned char *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  sub_100016EAC((uint64_t)(__dst + 3));
  return __dst;
}

uint64_t sub_100062C00@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_100062D08(a2, a1[2]);
  long long v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  char v6 = v7;
  if (v7 != v5)
  {
    unint64_t v8 = a2[1];
    do
    {
      long long v9 = (long long *)(v6 + 4);
      if (v8 >= a2[2])
      {
        uint64_t result = sub_100062E48(a2, v9);
        unint64_t v8 = result;
      }
      else
      {
        uint64_t result = (uint64_t)sub_100062DE8(a2, v9);
        v8 += 24;
      }
      a2[1] = v8;
      long long v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          char v6 = v11;
        }
        while (!v12);
      }
      char v6 = v11;
    }
    while (v11 != v5);
  }
  return result;
}

void sub_100062CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_100062D08(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100028DEC();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_10002AC98(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    sub_10002AC20(a1, v7);
    return sub_10002AE30((uint64_t)v7);
  }
  return result;
}

void sub_100062DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100062DE8(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_100017424((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100062E40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100062E48(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10002AC98(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  char v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  long long v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v11, *(void **)a2, *((void *)a2 + 1));
    char v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v12;
  }
  long long v16 = v11 + 24;
  sub_10002AC20(a1, v15);
  uint64_t v13 = a1[1];
  sub_10002AE30((uint64_t)v15);
  return v13;
}

void sub_100062F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100062FA0(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100062FEC(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100062FEC(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100063024(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100063038(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100063084(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100063084(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_1000630BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000630D0(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_1000184CC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_10003D514(a1, v3);
  return 1;
}

unsigned __int8 *sub_100063118(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    sub_1000F96CC();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      sub_1000F9724();
    }
  }
  else if (v3 == 1)
  {
    unint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      sub_1000F96F8();
    }
    return v4 + 56;
  }
  else if (a1[4])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v7, "cannot get value");
    sub_10002B4EC(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_100063238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

BOOL sub_100063278(uint64_t a1, const std::string::value_type *a2)
{
  long long v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_1000135DC(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_1000136C8(v6, a1);
  sub_100013648((unsigned __int8 **)v6);
  return !sub_100013964((unsigned __int8 **)v8, (unsigned __int8 **)v6) && *sub_100063118((unsigned __int8 **)v8) == 3;
}

BOOL sub_100063338(uint64_t a1, const std::string::value_type *a2)
{
  long long v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_1000135DC(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_1000136C8(v6, a1);
  sub_100013648((unsigned __int8 **)v6);
  return sub_100013964((unsigned __int8 **)v8, (unsigned __int8 **)v6) || *sub_100063118((unsigned __int8 **)v8) == 2;
}

BOOL sub_1000633F8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  int v2 = v1 & 0x3F;
  if (v1 <= 0x3F && v2 == 0) {
    return 0;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)a1 + 8 * (v1 >> 6);
  do
  {
    v5 += (*v6 >> v4) & 1;
    v6 += v4 == 63;
    if (v4 == 63) {
      int v4 = 0;
    }
    else {
      ++v4;
    }
  }
  while (v4 != v2 || v6 != (void *)v7);
  return v5 == 1;
}

BOOL sub_100063464(uint64_t a1)
{
  unint64_t v9 = "expression";
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[0] = v2;
  v7[1] = v2;
  sub_1000135DC(a1, &v9, (uint64_t)v7);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[0] = v3;
  v5[1] = v3;
  sub_1000136C8(v5, a1);
  sub_100013648((unsigned __int8 **)v5);
  return !sub_100013964((unsigned __int8 **)v7, (unsigned __int8 **)v5) && *sub_100063118((unsigned __int8 **)v7) == 2;
}

void *sub_10006352C(void *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_100019930(a1, a3);
    sub_10006358C(a1, a2, &a2[a3], a3);
  }
  return a1;
}

void *sub_10006358C(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    unint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      uint64_t *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_100063628(uint64_t a1, const std::string::value_type **a2)
{
  long long v2 = (void *)(a1 + 8);
  long long v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    long long v2 = v3;
LABEL_6:
    long long v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  int v7 = v3;
  if (*v3)
  {
    int v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        uint64_t v9 = (uint64_t *)v6;
        int v7 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      long long v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        long long v12 = (uint64_t *)v10;
        long long v2 = (void *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        long long v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        long long v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        int v7 = v14;
      }
      while (!v15);
    }
    ++result;
    int v7 = v14;
  }
  while (v14 != v2);
  return result;
}

BOOL sub_100063750(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v10 = a2;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v3;
  v8[1] = v3;
  sub_1000135DC(a1, &v10, (uint64_t)v8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  sub_1000136C8(v6, a1);
  sub_100013648((unsigned __int8 **)v6);
  if (sub_100013964((unsigned __int8 **)v8, (unsigned __int8 **)v6)) {
    return 0;
  }
  if (*sub_100063118((unsigned __int8 **)v8) == 3) {
    return 1;
  }
  return *sub_100063118((unsigned __int8 **)v8) == 0;
}

void sub_100063AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100063B44(id a1, BPSCompletion *a2)
{
  long long v2 = a2;
  id v3 = [(BPSCompletion *)v2 state];
  long long v4 = qword_10015EF18;
  if (v3)
  {
    unint64_t v5 = (id)qword_10015EF18;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = [(BPSCompletion *)v2 error];
      id v7 = [v6 description];
      int v8 = 136315138;
      id v9 = [v7 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "HighEngagementDevices Error: %s\n", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "HighEngagementDevices Complete\n\n", (uint8_t *)&v8, 2u);
  }
}

void sub_100063C78(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100063CB8(uint64_t a1, void *a2)
{
  id v23 = a2;
  id v3 = [v23 eventBody];
  uint64_t v4 = [v3 topCategory1];
  unint64_t v5 = (void *)v4;
  if (v4) {
    CFStringRef v6 = (const __CFString *)v4;
  }
  else {
    CFStringRef v6 = &stru_10015AE90;
  }
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"TopCategory1"];

  id v7 = [v23 eventBody];
  uint64_t v8 = [v7 topCategory2];
  id v9 = (void *)v8;
  if (v8) {
    CFStringRef v10 = (const __CFString *)v8;
  }
  else {
    CFStringRef v10 = &stru_10015AE90;
  }
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"TopCategory2"];

  int v11 = [v23 eventBody];
  uint64_t v12 = [v11 topCategory3];
  uint64_t v13 = (void *)v12;
  if (v12) {
    CFStringRef v14 = (const __CFString *)v12;
  }
  else {
    CFStringRef v14 = &stru_10015AE90;
  }
  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:@"TopCategory3"];

  BOOL v15 = [v23 eventBody];
  uint64_t v16 = [v15 highEngagementCategory1];
  long long v17 = (void *)v16;
  if (v16) {
    CFStringRef v18 = (const __CFString *)v16;
  }
  else {
    CFStringRef v18 = &stru_10015AE90;
  }
  [*(id *)(a1 + 32) setObject:v18 forKeyedSubscript:@"HighEngagementCategory1"];

  long long v19 = [v23 eventBody];
  uint64_t v20 = [v19 highEngagementCategory2];
  long long v21 = (void *)v20;
  if (v20) {
    CFStringRef v22 = (const __CFString *)v20;
  }
  else {
    CFStringRef v22 = &stru_10015AE90;
  }
  [*(id *)(a1 + 32) setObject:v22 forKeyedSubscript:@"HighEngagementCategory2"];
}

void sub_100063E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100063E80(uint64_t *a1, uint64_t *a2, NSObject **a3, long long *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  id v9 = a1 + 1;
  CFStringRef v10 = *a3;
  void v9[2] = *a3;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 88)) = a2[1];
  a1[4] = 0;
  uint64_t v12 = a1 + 5;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100017424(v12, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    a1[7] = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v12 = v13;
  }
  a1[8] = *a5;
  uint64_t v14 = a5[1];
  a1[9] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v15 = a1[3];
  long long v17 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100065350;
  block[3] = &unk_100153E30;
  block[4] = v9;
  block[5] = &v17;
  dispatch_sync(v15, block);
  return a1;
}

void sub_100064038(_Unwind_Exception *a1)
{
  sub_100065324(v2, 0);
  sub_10004085C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100064058(uint64_t a1)
{
  if (sqlite3_exec(*(sqlite3 **)(a1 + 32), "PRAGMA journal_mode=WAL", 0, 0, 0))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = qword_10015EF60;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v2)
    {
      if (v4)
      {
        sub_1000F7408((unsigned char *)(a1 + 40), __p);
        int v5 = v21;
        CFStringRef v6 = (void **)__p[0];
        id v7 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
        uint64_t v8 = __p;
        if (v5 < 0) {
          uint64_t v8 = v6;
        }
        *(_DWORD *)int buf = 136446466;
        id v23 = v8;
        __int16 v24 = 2080;
        long long v25 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] Failed to set journaling mode; %s",
          buf,
          0x16u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (v4)
    {
      sub_1000F7408((unsigned char *)(a1 + 40), __p);
      sub_1000FA5A4();
    }
    return 0;
  }
  else
  {
    int v19 = 0;
    int v9 = sqlite3_db_config(*(sqlite3 **)(a1 + 32), 1012, &v19, 0);
    BOOL v10 = v9 == 0;
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = qword_10015EF60;
      BOOL v13 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v13)
        {
          sub_1000F7408((unsigned char *)(a1 + 40), __p);
          int v14 = v21;
          BOOL v15 = (void **)__p[0];
          uint64_t v16 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          long long v17 = __p;
          if (v14 < 0) {
            long long v17 = v15;
          }
          *(_DWORD *)int buf = 136446466;
          id v23 = v17;
          __int16 v24 = 2080;
          long long v25 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] Failed to disable legacy alter table; %s",
            buf,
            0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (v13)
      {
        sub_1000F7408((unsigned char *)(a1 + 40), __p);
        sub_1000FA550();
      }
    }
  }
  return v10;
}

void sub_100064298(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000642A4(uint64_t a1)
{
  unsigned int v5 = 0;
  uint64_t v1 = a1 + 8;
  v4[0] = (char *)&v5 + 3;
  v4[1] = a1;
  void v4[2] = (char *)&v5 + 1;
  v4[3] = (char *)&v5 + 2;
  void v4[4] = &v5;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000654C8;
  block[3] = &unk_100153E50;
  block[4] = v1;
  block[5] = v4;
  dispatch_sync(v2, block);
  return _byteswap_ulong(v5);
}

void sub_100064388(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  char v7 = a2;
  uint64_t v3 = a1 + 8;
  v6[0] = a1;
  v6[1] = &v7;
  BOOL v4 = *(NSObject **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100065938;
  void v8[3] = &unk_100153E70;
  void v8[4] = v3;
  v8[5] = v6;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *a3 = v5;
  a3[1] = v5;
  int v9 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100065960;
  block[3] = &unk_100153E90;
  block[4] = a3;
  block[5] = &v9;
  dispatch_sync(v4, block);
}

void sub_100064484(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1000659DC;
  v4[3] = &unk_100153EB0;
  void v4[4] = v1;
  void v4[5] = &v3;
  char v7 = -86;
  long long v5 = v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10000651C;
  block[3] = &unk_100153ED0;
  block[4] = &v7;
  block[5] = &v5;
  dispatch_sync(v2, block);
}

uint64_t sub_10006457C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _OWORD v5[2] = sub_1000659E8;
  _OWORD v5[3] = &unk_100153EF0;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  CFStringRef v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10000651C;
  block[3] = &unk_100153ED0;
  block[4] = &v8;
  block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100064678(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _OWORD v5[2] = sub_100065A00;
  _OWORD v5[3] = &unk_100153F10;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned int v8 = -1431655766;
  CFStringRef v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100065A0C;
  block[3] = &unk_100153F30;
  block[4] = &v8;
  block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100064774(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 40);
  int v3 = _sqlite3_integrity_check();
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    long long v5 = qword_10015EF60;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (v6)
      {
        sub_1000F7408(v2, buf);
        sub_1000FA5F8();
      }
      return 1;
    }
    if (!v6) {
      return 1;
    }
    sub_1000F7408(v2, v20);
    int v7 = v21;
    unsigned int v8 = *(uint8_t **)v20;
    int v9 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    BOOL v10 = v20;
    *(_DWORD *)int buf = 136446722;
    if (v7 < 0) {
      BOOL v10 = v8;
    }
    *(void *)&uint8_t buf[4] = v10;
    __int16 v23 = 1026;
    int v24 = v3;
    __int16 v25 = 2080;
    long long v26 = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] State database is corrupted! DB Integrity check failed. Status = %{public}d; %s",
      buf,
      0x1Cu);
LABEL_13:
    if (v21 < 0)
    {
      uint64_t v16 = *(void **)v20;
LABEL_26:
      operator delete(v16);
    }
    return 1;
  }
  int v11 = sub_100064A50(a1);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 88)) + 56))(a1 + *(void *)(*(void *)a1 - 88));
  if (v11 > v12)
  {
    int v13 = v12;
    int v14 = qword_10015EF60;
    if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_FAULT)) {
      return 1;
    }
    sub_1000F7408(v2, v20);
    if (v21 >= 0) {
      BOOL v15 = v20;
    }
    else {
      BOOL v15 = *(uint8_t **)v20;
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v23 = 1026;
    int v24 = v11;
    __int16 v25 = 1026;
    LODWORD(v26) = v13;
    _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[Sqlite Store %{public}s] Stored database version is greater than expected version (Stored Version: V%{public}d, Expected Version: V%{public}d)?!!", buf, 0x18u);
    goto LABEL_13;
  }
  if (!v11)
  {
    CFStringRef v18 = qword_10015EF60;
    if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    sub_1000F7408(v2, buf);
    int v19 = SBYTE3(v26) >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)&void v20[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[State Store %{public}s] Stored config database version is not currently set", v20, 0xCu);
    if ((SBYTE3(v26) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v16 = *(void **)buf;
    goto LABEL_26;
  }
  return 0;
}

void sub_100064A44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100064A50(uint64_t a1)
{
  uint64_t v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "PRAGMA user_version;", 0, &v20);
  if (!v20)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = qword_10015EF60;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v3)
    {
      if (v5)
      {
        sub_1000F7408((unsigned char *)(a1 + 40), __p);
        sub_1000FA654();
      }
      goto LABEL_20;
    }
    if (v5)
    {
      sub_1000F7408((unsigned char *)(a1 + 40), __p);
      int v6 = v19;
      int v7 = (void **)__p[0];
      unsigned int v8 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
      int v9 = __p;
      if (v6 < 0) {
        int v9 = v7;
      }
      *(_DWORD *)int buf = 136446466;
      CFStringRef v22 = v9;
      __int16 v23 = 2080;
      int v24 = v8;
      BOOL v10 = "[Sqlite Store %{public}s] Error preparing database version query; %s";
      goto LABEL_14;
    }
LABEL_20:
    uint64_t v2 = 0;
    goto LABEL_21;
  }
  if (sub_1000090A4(a1, &v20) != 100)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v4 = qword_10015EF60;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v11)
    {
      if (v12)
      {
        sub_1000F7408((unsigned char *)(a1 + 40), __p);
        sub_1000FA6A8();
      }
      goto LABEL_20;
    }
    if (v12)
    {
      sub_1000F7408((unsigned char *)(a1 + 40), __p);
      int v13 = v19;
      int v14 = (void **)__p[0];
      BOOL v15 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
      uint64_t v16 = __p;
      if (v13 < 0) {
        uint64_t v16 = v14;
      }
      *(_DWORD *)int buf = 136446466;
      CFStringRef v22 = v16;
      __int16 v23 = 2080;
      int v24 = v15;
      BOOL v10 = "[Sqlite Store %{public}s] Failed to retrieve database version query; %s";
LABEL_14:
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  uint64_t v2 = sub_100064D30(a1, &v20, 0);
LABEL_21:
  sub_1000650BC(&v20, 0);
  return v2;
}

void sub_100064C7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100064C88(int a1, sqlite3_stmt **a2, int a3, sqlite3_int64 *a4)
{
  return sqlite3_bind_int64(*a2, a3, *a4);
}

uint64_t sub_100064CB4(int a1, sqlite3_stmt **a2, int a3, double *a4, void *a5)
{
  uint64_t result = sqlite3_bind_double(*a2, a3, *a4);
  *a5 += 8;
  return result;
}

uint64_t sub_100064CF4(int a1, sqlite3_stmt **a2, int a3, void *a4)
{
  uint64_t result = sqlite3_bind_null(*a2, a3);
  ++*a4;
  return result;
}

uint64_t sub_100064D30(uint64_t a1, sqlite3_stmt **a2, int iCol)
{
  uint64_t result = sqlite3_column_int(*a2, iCol);
  *(void *)(a1 + 88) += 4;
  return result;
}

sqlite3_stmt **sub_100064D6C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, sqlite3_stmt **a4@<X8>)
{
  *a4 = 0;
  uint64_t result = *(sqlite3_stmt ***)(a1 + 32);
  if (result)
  {
    int v7 = 0;
    if (a3) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = 2;
    }
    uint64_t result = (sqlite3_stmt **)sqlite3_prepare_v3((sqlite3 *)result, a2, -1, v6, &v7, 0);
    if (!result) {
      return sub_1000650BC(a4, v7);
    }
  }
  return result;
}

void sub_100064DFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100064E08(uint64_t a1, int a2)
{
  uint64_t v4 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = __p;
    sub_1000F7408((unsigned char *)(a1 + 40), __p);
    if (SHIBYTE(__p[2]) < 0) {
      BOOL v5 = (void **)__p[0];
    }
    int v6 = sub_100064A50(a1);
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Sqlite Store %{public}s] DATABASE MIGRATE VERSION: Version migration from schema version V%{public}d to V%{public}d", buf, 0x18u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  memset(__p, 170, 24);
  std::to_string(&v23, a2);
  int v7 = std::string::insert(&v23, 0, "PRAGMA user_version = ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)int buf = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = std::string::append((std::string *)buf, ";");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p[2] = (void *)v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  int v12 = sqlite3_exec(*(sqlite3 **)(a1 + 32), (const char *)v11, 0, 0, 0);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = qword_10015EF60;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v13)
    {
      if (v15)
      {
        sub_1000F7408((unsigned char *)(a1 + 40), &v23);
        int v16 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
        std::string::size_type v17 = v23.__r_.__value_.__r.__words[0];
        CFStringRef v18 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
        char v19 = &v23;
        *(_DWORD *)int buf = 136446722;
        if (v16 < 0) {
          char v19 = (std::string *)v17;
        }
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = a2;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] Failed to update schema version to V%{public}d; %s",
          buf,
          0x1Cu);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (v15)
    {
      sub_1000F7408((unsigned char *)(a1 + 40), buf);
      sub_1000FA6FC();
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v12 == 0;
}

void sub_1000650B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3_stmt **sub_1000650BC(sqlite3_stmt **result, sqlite3_stmt *a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (sqlite3_stmt **)sub_10005A634((int)result, v3);
  }
  return result;
}

BOOL sub_1000650E8(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
  {
    sub_1000F7408((unsigned char *)(a1 + 40), v17);
    sub_1000FA800();
  }
  if (_sqlite3_db_truncate())
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = qword_10015EF60;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v2)
    {
      if (!result) {
        return result;
      }
      sub_1000F7408((unsigned char *)(a1 + 40), __p);
      sub_1000FA7AC();
      return 0;
    }
    if (!result) {
      return result;
    }
    sub_1000F7408((unsigned char *)(a1 + 40), __p);
    int v5 = v16;
    int v6 = (void **)__p[0];
    int v7 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    long long v8 = __p;
    if (v5 < 0) {
      long long v8 = v6;
    }
    *(_DWORD *)int buf = 136446466;
    char v19 = v8;
    __int16 v20 = 2080;
    char v21 = v7;
    int v9 = "[Sqlite Store %{public}s] Failed to truncate database during clear; %s";
    goto LABEL_15;
  }
  if (!_sqlite3_integrity_check()) {
    return sub_100064058(a1);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v3 = qword_10015EF60;
  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (!result) {
      return result;
    }
    sub_1000F7408((unsigned char *)(a1 + 40), __p);
    int v11 = v16;
    int v12 = (void **)__p[0];
    uint64_t v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
    int v14 = __p;
    if (v11 < 0) {
      int v14 = v12;
    }
    *(_DWORD *)int buf = 136446466;
    char v19 = v14;
    __int16 v20 = 2080;
    char v21 = v13;
    int v9 = "[Sqlite Store %{public}s] Failed to check database integrity after database clear; %s";
LABEL_15:
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, v9, buf, 0x16u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  if (!result) {
    return result;
  }
  sub_1000F7408((unsigned char *)(a1 + 40), __p);
  sub_1000FA758();
  return 0;
}

void sub_100065318(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

sqlite3 **sub_100065324(sqlite3 **result, sqlite3 *a2)
{
  uint64_t v3 = *result;
  *BOOL result = a2;
  if (v3) {
    return (sqlite3 **)sub_10005A624((int)result, v3);
  }
  return result;
}

BOOL sub_100065350(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  ppDb = 0;
  uint64_t v2 = (const char *)(v1 + 40);
  if (*(char *)(v1 + 63) < 0) {
    uint64_t v2 = *(const char **)(v1 + 40);
  }
  int v3 = sqlite3_open_v2(v2, &ppDb, 6, 0);
  sub_100065324((sqlite3 **)(v1 + 32), ppDb);
  if (v3)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
    {
      sub_1000F7408((unsigned char *)(v1 + 40), __p);
      int v6 = v11;
      int v7 = (void **)__p[0];
      long long v8 = sqlite3_errstr(v3);
      int v9 = __p;
      *(_DWORD *)int buf = 136446722;
      if (v6 < 0) {
        int v9 = v7;
      }
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v3;
      __int16 v17 = 2082;
      CFStringRef v18 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] Failed to open database; err=%d (%{public}s)",
        buf,
        0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return sub_100064058(v1);
}

void sub_1000654A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000654C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000EDE8(&v19, "com.apple.analyticsd.database-migration");
  int v3 = sub_100064774(v2);
  **(unsigned char **)uint64_t v1 = v3;
  if (v3)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000F7408((unsigned char *)(v2 + 40), __p);
      int v5 = v26 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Sqlite Store %{public}s] ## DATABASE WIPE: Attempting wipe", buf, 0xCu);
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL v6 = sub_1000650E8(v2);
    **(unsigned char **)(v1 + 16) = v6;
    int v7 = qword_10015EF60;
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR))
      {
        sub_1000F7408((unsigned char *)(v2 + 40), __p);
        sub_1000FA854();
      }
      return sub_10000EE20(&v19);
    }
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000F7408((unsigned char *)(v2 + 40), __p);
      long long v8 = v26 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Sqlite Store %{public}s] ## DATABASE WIPE: Wipe succeeded", buf, 0xCu);
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  int v9 = sub_100064A50(v2);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + *(void *)(*(void *)v2 - 88)) + 56))(v2 + *(void *)(*(void *)v2 - 88));
  **(unsigned char **)(v1 + 24) = v9 != v10;
  if (v9 != v10)
  {
    int v11 = v10;
    int v12 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000F7408((unsigned char *)(v2 + 40), buf);
      uint64_t v13 = v21 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v23 = 1026;
      int v24 = v9;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Attempting migration (Stored version: V%{public}d, Expected version: V%{public}d)", __p, 0x18u);
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
    }
    **(unsigned char **)(v1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + *(void *)(*(void *)v2 - 88))
                                                               + 64))(v2 + *(void *)(*(void *)v2 - 88));
    int v14 = sub_100064A50(v2);
    __int16 v15 = qword_10015EF60;
    if (**(unsigned char **)(v1 + 32))
    {
      if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT)) {
        return sub_10000EE20(&v19);
      }
      sub_1000F7408((unsigned char *)(v2 + 40), buf);
      if (v21 >= 0) {
        int v16 = buf;
      }
      else {
        int v16 = *(unsigned char **)buf;
      }
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v16;
      __int16 v23 = 1026;
      int v24 = v14;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Migration complete (Stored version: V%{public}d, Expected version: V%{public}d)", __p, 0x18u);
    }
    else
    {
      if (!os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR)) {
        return sub_10000EE20(&v19);
      }
      sub_1000F7408((unsigned char *)(v2 + 40), buf);
      if (v21 >= 0) {
        CFStringRef v18 = buf;
      }
      else {
        CFStringRef v18 = *(unsigned char **)buf;
      }
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v18;
      __int16 v23 = 1026;
      int v24 = v14;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[Sqlite Store %{public}s] ## DATABASE MIGRATION: Migration failed (Stored version: V%{public}d, Expected version: V%{public}d)", __p, 0x18u);
    }
    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
  }
  return sub_10000EE20(&v19);
}

void sub_100065908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000EE20(va);
  _Unwind_Resume(a1);
}

double sub_100065938@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = (unsigned char *)v2[1];
  long long v6 = *(_OWORD *)(v3 + 80);
  int8x16_t v7 = *(int8x16_t *)(v3 + 96);
  int v5 = (_OWORD *)(v3 + 80);
  *(_OWORD *)a2 = v6;
  *(int8x16_t *)(a2 + 16) = vextq_s8(v7, v7, 8uLL);
  if (*v4)
  {
    *(void *)&long long v6 = 0;
    *int v5 = 0u;
    v5[1] = 0u;
  }
  return *(double *)&v6;
}

double sub_100065960(uint64_t a1)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 40) + 16))(v5);
  uint64_t v2 = *(_OWORD **)(a1 + 32);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

BOOL sub_1000659DC(uint64_t a1)
{
  return sub_1000650E8(**(void **)(a1 + 40));
}

BOOL sub_1000659E8(uint64_t a1)
{
  return *(void *)(**(void **)(a1 + 40) + 32) != 0;
}

uint64_t sub_100065A00(uint64_t a1)
{
  return sub_100064A50(**(void **)(a1 + 40));
}

uint64_t sub_100065A0C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void *sub_100065A60(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    int v5 = result;
  }
  else {
    int v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = v5;
  *(_WORD *)(a2 + 12) = 1026;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void sub_100065A84(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

uint64_t sub_100065AA4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2 != (void *)-1)
  {
    munmap(v2, *(void *)(a1 + 8));
    *(void *)a1 = -1;
  }
  return a1;
}

FILE *sub_100065AEC@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = fopen(a1, "rb");
  int v4 = result;
  if (result)
  {
    int v5 = fileno(result);
    if (v5 < 0) {
      goto LABEL_4;
    }
    int v6 = v5;
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v10.st_blkstd::string::size_type size = v7;
    *(timespec *)v10.st_qspare = v7;
    v10.st_birthtimespec = v7;
    *(timespec *)&v10.st_std::string::size_type size = v7;
    v10.st_mtimespec = v7;
    v10.st_ctimespec = v7;
    *(timespec *)&v10.st_uid = v7;
    v10.st_atimespec = v7;
    *(timespec *)&v10.st_dev = v7;
    if (fstat(v5, &v10) || (st_size = v10.st_size, int v9 = mmap(0, v10.st_size, 1, 1025, v6, 0), v9 == (void *)-1))
    {
LABEL_4:
      *a2 = -1;
      a2[1] = 0;
    }
    else
    {
      *a2 = v9;
      a2[1] = st_size;
    }
    return (FILE *)fclose(v4);
  }
  else
  {
    *a2 = -1;
    a2[1] = 0;
  }
  return result;
}

void sub_100065BDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_100065BE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = xpc_get_type(*(xpc_object_t *)a1);
  if (result != &_xpc_type_null && (uint64_t result = xpc_get_type(*(xpc_object_t *)a1), result == &_xpc_type_shmem))
  {
    uint64_t v7 = 0;
    uint64_t result = (void *)xpc_shmem_map(*(xpc_object_t *)a1, (void **)&v7);
    uint64_t v5 = v7;
    if (v7 != 0 && result != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v5 = -1;
      uint64_t v6 = 0;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    *a2 = -1;
    a2[1] = 0;
  }
  return result;
}

void sub_100065CB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100065E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100065F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WiFiStateRelay;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *sub_100065FA4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[8])
  {
    [result deregisterForCWEventTypes];
    [*(id *)(*(void *)(a1 + 32) + 64) invalidate];
    uint64_t result = *(void **)(a1 + 32);
  }
  if (result[2])
  {
    return _[result teardownSCDynamicStore];
  }
  return result;
}

void sub_10006618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006632C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  obuint64_t j = a2;
  id v5 = [obj countByEnumeratingWithState:&v23 objects:v22 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v24;
    uint64_t v7 = kSCEntNetLinkQuality;
    do
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        int v9 = [*(id *)(*((void *)&v23 + 1) + 8 * (void)v8) componentsSeparatedByString:@"/"];
        stat v10 = +[NSMutableArray arrayWithArray:v9];

        if ([v10 count] == (id)5)
        {
          int v11 = [v10 objectAtIndex:4];
          unsigned int v12 = [v11 isEqualToString:v7];

          if (v12)
          {
            uint64_t v13 = [v10 objectAtIndex:3];
            if (v4)
            {
              [v4 getQueue];
              int v14 = v21;
            }
            else
            {
              int v14 = 0;
              char v21 = 0;
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000671F8;
            block[3] = &unk_100153FA8;
            id v19 = v4;
            id v20 = v13;
            id v15 = v13;
            dispatch_async(v14, block);
            int v16 = v21;
            char v21 = 0;
          }
        }

        long long v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v22 count:16];
    }
    while (v5);
  }
}

void sub_1000665A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000666EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000667B4(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshWiFiLQM];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 refreshWiFiRadioTech];
}

void sub_100066874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {

  }
  _Unwind_Resume(exception_object);
}

void sub_1000669D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066B34(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_100066B58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    if ((char *)[v3 type] - 1 < (char *)3)
    {
      if (WeakRetained)
      {
        [WeakRetained getQueue];
        id v5 = v9;
      }
      else
      {
        id v5 = 0;
        int v9 = 0;
      }
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100066CA0;
      block[3] = &unk_100153F58;
      id v8 = WeakRetained;
      dispatch_async(v5, block);
      uint64_t v6 = v9;
      int v9 = 0;
    }
  }
}

void sub_100066C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100066CA0(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshWiFiLQM];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 refreshWiFiRadioTech];
}

void sub_100066D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100066EB0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100066EEC(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100017424(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

std::string *sub_100066F58(std::string *a1, std::string::value_type **a2)
{
  long long v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::assign(a1, v3);
  }
  else
  {
    sub_100015438(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_10006709C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006715C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000671F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshWiFiLQM:*(void *)(a1 + 40)];
}

char *sub_100067204(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_100028DEC();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_100067310(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      CFStringRef v18 = v9;
      id v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    CFStringRef v18 = v9;
    id v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  NSObject *v12 = &v9[v17];
  return result;
}

char *sub_100067310(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100028DEC();
  }
  uint64_t result = (char *)sub_100019978((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_100067354()
{
  sub_100015438(qword_10015ED20, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015ED20, (void *)&_mh_execute_header);
  sub_100015438(qword_10015ED38, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015ED38, (void *)&_mh_execute_header);
  sub_100015438(qword_10015ED50, "OFF");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015ED50, (void *)&_mh_execute_header);
  sub_100015438(qword_10015ED68, "DISCONNECTED");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015ED68, (void *)&_mh_execute_header);
}

void sub_10006744C()
{
}

void sub_10006758C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000147D8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000675C4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[KernelClient] Starting up kernel listener.", buf, 2u);
  }
  a1[1] = a2;
  if (a2)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = (std::__shared_weak_count *)a1[40];
    a1[39] = v7;
    a1[40] = v8;
    if (v9)
    {
      sub_1000147D8(v9);
      uint64_t v7 = a1[39];
    }
    if (v7)
    {
      mach_error_t v10 = sub_10007FF80((uint64_t)a1, a1[1]);
      if (v10) {
        return 1;
      }
      mach_error_t v12 = v10;
      if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
        sub_1000FAAD8(v12);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR))
    {
      sub_1000FAA78();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR))
  {
    sub_1000FAA18();
  }
  uint64_t v13 = qword_10015EF98;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v14)
  {
    v15[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[KernelClient] initWithCFRunLoop Failed", (uint8_t *)v15, 2u);
    return 0;
  }
  return result;
}

void sub_100067778(uint64_t a1, io_service_t a2)
{
  uint64_t v4 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::servicePublished", (uint8_t *)&v8, 2u);
  }
  if (a2)
  {
    mach_error_t v5 = sub_1000678AC(a1, a2);
  }
  else
  {
    mach_error_t v5 = -536870201;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FAB50();
    }
  }
  uint64_t v6 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = mach_error_string(v5);
    int v8 = 136446210;
    int v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::servicePublished done %{public}s", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t sub_1000678AC(uint64_t a1, io_service_t a2)
{
  uint64_t v4 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::Start", buf, 2u);
  }
  if (a2)
  {
    *(_DWORD *)(a1 + 276) = a2;
    uint64_t v5 = IOServiceOpen(a2, mach_task_self_, 0, (io_connect_t *)(a1 + 272));
    if (v5)
    {
      uint64_t v8 = v5;
      if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
        sub_1000FAC28(v8);
      }
    }
    else
    {
      uint64_t v6 = sub_100067C4C(a1);
      if (!v6)
      {
        *(void *)(a1 + 304) = dispatch_semaphore_create(0);
        uint64_t v7 = qword_10015EF98;
        if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::Start complete", v13, 2u);
        }
        return 0;
      }
      uint64_t v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
        sub_1000FABB0(v8);
      }
    }
  }
  else
  {
    uint64_t v8 = 3758097095;
    mach_error_t v10 = qword_10015EF98;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[KernelClient] Start no io_service_t", v14, 2u);
    }
  }
  io_connect_t v11 = *(_DWORD *)(a1 + 272);
  if (v11)
  {
    IOServiceClose(v11);
    *(_DWORD *)(a1 + 272) = 0;
  }
  mach_error_t v12 = *(NSObject **)(a1 + 304);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(a1 + 304) = 0;
  }
  return v8;
}

void sub_100067A94(uint64_t a1)
{
  sub_100067B30(a1);
  uint64_t v1 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::serviceTerminated completed", v2, 2u);
  }
}

uint64_t sub_100067B30(uint64_t a1)
{
  uint64_t v2 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[KernelClient] CoreAnalyticsClient::Stop", buf, 2u);
  }
  mach_port_name_t v3 = *(_DWORD *)(a1 + 88);
  if (v3)
  {
    mach_port_mod_refs(mach_task_self_, v3, 1u, -1);
    *(_DWORD *)(a1 + 88) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 304);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 304) = 0;
  }
  *(_DWORD *)(a1 + 276) = 0;
  uint64_t v5 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[KernelClient]  CoreAnalyticsClient::Stop complete", v7, 2u);
  }
  return 0;
}

uint64_t sub_100067C4C(uint64_t a1)
{
  mach_vm_size_t v14 = 0;
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  mach_port_t NotificationPort = IODataQueueAllocateNotificationPort();
  *(_DWORD *)(a1 + 88) = NotificationPort;
  if (!NotificationPort)
  {
    uint64_t v11 = 3758097086;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FACA0();
    }
    goto LABEL_23;
  }
  dispatch_queue_t v4 = dispatch_queue_create("ControllerResponseQueue", v2);
  *(void *)(a1 + 28sub_100027DA4((uint64_t)&a9, 0) = v4;
  if (!v4)
  {
    uint64_t v11 = 3758097086;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FAD00();
    }
    goto LABEL_23;
  }
  uint64_t v5 = IOConnectSetNotificationPort(*(_DWORD *)(a1 + 272), 0, *(_DWORD *)(a1 + 88), 0);
  if (v5)
  {
    uint64_t v11 = v5;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FABB0(v11);
    }
    goto LABEL_23;
  }
  IONotificationPortRef v6 = IONotificationPortCreate(kIOMainPortDefault);
  *(void *)(a1 + 96) = v6;
  if (v6)
  {
    uint64_t v7 = dispatch_queue_create("ControllerNotificationQueue", v2);
    *(void *)(a1 + 288) = v7;
    if (v7)
    {
      IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), v7);
      uint64_t v8 = IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 96), *(_DWORD *)(a1 + 276), "IOGeneralInterest", (IOServiceInterestCallback)sub_100067F2C, (void *)a1, (io_object_t *)(a1 + 104));
      if (v8)
      {
        uint64_t v11 = v8;
        goto LABEL_23;
      }
      uint64_t v9 = IOConnectMapMemory(*(_DWORD *)(a1 + 272), 0, mach_task_self_, (mach_vm_address_t *)(a1 + 72), &v14, 1u);
      if (v9)
      {
        uint64_t v11 = v9;
        if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
          sub_1000FABB0(v11);
        }
        goto LABEL_23;
      }
      mach_error_t v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_mach_recv, *(unsigned int *)(a1 + 88), 0, *(dispatch_queue_t *)(a1 + 280));
      *(void *)(a1 + 296) = v10;
      if (v10)
      {
        dispatch_set_context(v10, (void *)a1);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 296), (dispatch_function_t)sub_100067F34);
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 296), (dispatch_function_t)sub_100068024);
        dispatch_resume(*(dispatch_object_t *)(a1 + 296));
        return 0;
      }
      if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
        sub_1000FAD60();
      }
    }
  }
  uint64_t v11 = 3758097086;
LABEL_23:
  mach_port_name_t v13 = *(_DWORD *)(a1 + 88);
  if (v13)
  {
    mach_port_mod_refs(mach_task_self_, v13, 1u, -1);
    *(_DWORD *)(a1 + 88) = 0;
  }
  return v11;
}

void sub_100067F2C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100067F34(IODataQueueEntry *a1)
{
  mach_msg_return_t v5;
  uint64_t vars8;

  mach_msg_size_t v2 = 92;
  mach_port_name_t v3 = (mach_msg_header_t *)CFAllocatorAllocate(kCFAllocatorDefault, 92, 0);
  for (v3->msgh_mach_port_name_t size = 92; ; v3->msgh_mach_port_name_t size = v2)
  {
    v3->msgh_bits = 0;
    mach_port_name_t size = a1[11].size;
    v3->msgh_remote_port = 0;
    v3->msgh_local_port = size;
    v3->msgh_id = 0;
    uint64_t v5 = mach_msg(v3, 117440518, 0, v2, size, 0, 0);
    if (v5 != 268451844) {
      break;
    }
    mach_msg_size_t v2 = (v3->msgh_size + 71) & 0xFFFFFFFC;
    mach_port_name_t v3 = (mach_msg_header_t *)CFAllocatorReallocate(kCFAllocatorDefault, v3, v2, 0);
  }
  if (!v5) {
    sub_100068028(a1);
  }

  CFAllocatorDeallocate(kCFAllocatorSystemDefault, v3);
}

IODataQueueEntry *sub_100068028(IODataQueueEntry *result)
{
  uint64_t v1 = (IODataQueueMemory *)result[9];
  if (v1)
  {
    mach_msg_size_t v2 = result;
    uint32_t dataSize = -1431655766;
    uint64_t result = IODataQueuePeek(v1);
    if (result)
    {
      mach_port_name_t v3 = result;
      do
      {
        UInt32 size = v3->size;
        uint64_t v5 = qword_10015EF98;
        if (v3->size)
        {
          if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 67109120;
            UInt32 v10 = size;
            _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[KernelClient] Got data from _queueAddr %u\n", buf, 8u);
          }
          if (v3->data[0] == 1) {
            (*(void (**)(void, UInt8 *, void))(**(void **)&v2[39] + 32))(*(void *)&v2[39], v3->data, v3->size);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR))
        {
          sub_1000FADC0(&v7, v8, v5);
        }
        uint32_t dataSize = 0;
        IODataQueueDequeue(v1, 0, &dataSize);
        uint64_t result = IODataQueuePeek(v1);
        mach_port_name_t v3 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1000681C0(uint64_t a1)
{
  mach_msg_size_t v2 = *(NSObject **)(a1 + 280);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 28sub_100027DA4((uint64_t)&a9, 0) = 0;
  }
  mach_port_name_t v3 = *(NSObject **)(a1 + 288);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 288) = 0;
  }
  mach_vm_address_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    IOConnectUnmapMemory(*(_DWORD *)(a1 + 272), 0, mach_task_self_, v4);
    *(void *)(a1 + 72) = 0;
  }
  io_connect_t v5 = *(_DWORD *)(a1 + 272);
  if (v5)
  {
    if (*(void *)(a1 + 96))
    {
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 96));
      io_connect_t v5 = *(_DWORD *)(a1 + 272);
    }
    IOServiceClose(v5);
    *(void *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 272) = 0;
  }
  mach_port_name_t v6 = *(_DWORD *)(a1 + 88);
  if (v6)
  {
    mach_port_mod_refs(mach_task_self_, v6, 1u, -1);
    *(_DWORD *)(a1 + 88) = 0;
  }
  uint8_t v7 = *(IONotificationPort **)(a1 + 96);
  if (v7) {
    IONotificationPortDestroy(v7);
  }
  *(_DWORD *)(a1 + 276) = 0;
}

void sub_100068278(uint64_t a1, int a2)
{
  if (!a2)
  {
    mach_port_name_t v3 = qword_10015EF98;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[KernelClient] Received notice of data availability.", buf, 2u);
    }
    mach_vm_address_t v4 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100068368;
    block[3] = &unk_100153FC8;
    void block[4] = a1;
    dispatch_sync(v4, block);
  }
}

IODataQueueEntry *sub_100068368(uint64_t a1)
{
  return sub_100068028(*(IODataQueueEntry **)(a1 + 32));
}

void *sub_100068370(void *a1)
{
  *a1 = off_100153FF8;
  mach_msg_size_t v2 = (std::__shared_weak_count *)a1[40];
  if (v2) {
    sub_1000147D8(v2);
  }

  return sub_10007FE94(a1);
}

void sub_1000683CC(void *a1)
{
  *a1 = off_100153FF8;
  mach_msg_size_t v2 = (std::__shared_weak_count *)a1[40];
  if (v2) {
    sub_1000147D8(v2);
  }
  sub_10007FE94(a1);

  operator delete();
}

void sub_10006843C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

double sub_100068468@<D0>(long long *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10006878C(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_1000684D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_1000684E4(uint64_t a1@<X0>, const char **a2@<X1>, long long *a3@<X8>)
{
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_10009E5A4((const char *)(a1 + 32), a2, (unint64_t *)&v17);
  if (!(void)v17)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    goto LABEL_21;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  int v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v17 + 16))(&v15);
  long long v26 = "parentUuid";
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v23 = v5;
  long long v24 = v5;
  sub_1000135DC((uint64_t)&v15, &v26, (uint64_t)&v23);
  CFStringRef v18 = (unsigned __int8 *)&v15;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0x8000000000000000;
  sub_100013648(&v18);
  if (sub_100013964((unsigned __int8 **)&v23, &v18))
  {
    uint64_t v6 = sub_1000155C8();
    if (!v6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v23);
  }
  if (*(unsigned char *)v6 == 3 && *(void *)(v6 + 8))
  {
    uint8_t v7 = "parent config has a parentUuid but it should NOT!";
    goto LABEL_19;
  }
LABEL_10:
  long long v26 = "builtOnDate";
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v23 = v8;
  long long v24 = v8;
  sub_1000135DC((uint64_t)&v15, &v26, (uint64_t)&v23);
  CFStringRef v18 = (unsigned __int8 *)&v15;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0x8000000000000000;
  sub_100013648(&v18);
  if (sub_100013964((unsigned __int8 **)&v23, &v18))
  {
    uint64_t v9 = sub_1000155C8();
    if (!v9)
    {
LABEL_18:
      uint8_t v7 = "base config does not have builtOnDate?!";
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)sub_100013AAC((unsigned __int8 **)&v23);
  }
  if (*(unsigned char *)v9 != 3) {
    goto LABEL_18;
  }
  uint64_t v10 = *(long long **)(v9 + 8);
  if (!v10) {
    goto LABEL_18;
  }
  if (*((char *)v10 + 23) < 0)
  {
    sub_100017424(&__p, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }
  sub_100009188(&__p, (uint64_t)"%m-%d-%Y %H:%M:%S");
  char v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13)
  {
    *a3 = v17;
    a3 = &v17;
    goto LABEL_20;
  }
  uint8_t v7 = "base config builtOnDate could not be parsed";
LABEL_19:
  *a2 = v7;
LABEL_20:
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100016EAC((uint64_t)&v15);
  sub_100016B28(&v16, v15);
LABEL_21:
  if (*((void *)&v17 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v17 + 1));
  }
}

void sub_100068744(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100068754(uint64_t a1)
{
  sub_1000300B8(a1);

  operator delete();
}

void *sub_10006878C@<X0>(long long *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  double result = sub_1000687F0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1000687DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000687F0(void *a1, long long *a2, __n128 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100154080;
  sub_10002FAF0((uint64_t)(a1 + 3), a2, a3);
  a1[3] = &off_100154040;
  return a1;
}

void sub_100068854(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100068868(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100154080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100068888(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100154080;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000688DC(uint64_t a1)
{
  return sub_1000300B8(a1 + 24);
}

BOOL sub_1000688E8(void *a1)
{
  id v1 = a1;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  if (os_variant_is_darwinos())
  {
    mach_msg_size_t v2 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[AppUsage] WARNING: Ignoring AppUsage::iteratePayloads on darwinOS.", buf, 2u);
    }
    int v3 = *((unsigned __int8 *)v10 + 24);
  }
  else
  {
    if (qword_10015ED88 != -1) {
      dispatch_once(&qword_10015ED88, &stru_1001540C0);
    }
    mach_vm_address_t v4 = qword_10015ED80;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100068ADC;
    void v6[3] = &unk_1001540E8;
    long long v8 = &v9;
    id v7 = v1;
    dispatch_sync(v4, v6);
    int v3 = *((unsigned __int8 *)v10 + 24);
  }
  _Block_object_dispose(&v9, 8);

  return v3 != 0;
}

void sub_100068A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_100068A9C(id a1)
{
  qword_10015ED80 = (uint64_t)dispatch_queue_create("analyticsd.AppUsageQueue", 0);

  _objc_release_x1();
}

void sub_100068ADC(uint64_t a1)
{
  double v1 = sub_1000B3468();
  if (v1 <= 0.0)
  {
    int v16 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_ERROR)) {
      sub_1000FAF94(v16);
    }
  }
  else
  {
    double v2 = v1;
    int v87 = +[NSDate now];
    [v87 timeIntervalSince1970];
    double v4 = v3;
    if (v3 - v2 > 86400.0)
    {
      double v2 = v3 + -86400.0;
      long long v5 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEBUG)) {
        sub_1000FAF24(v5);
      }
    }
    uint64_t v6 = +[NSDate dateWithTimeIntervalSince1970:v2];
    id v7 = *(void **)(a1 + 32);
    id v88 = v6;
    id v92 = v87;
    uint64_t v91 = v7;
    if (objc_opt_class())
    {
      uint64_t v89 = objc_opt_new();
      long long v8 = +[_DKSystemEventStreams appInFocusStream];
      v125 = v8;
      uint64_t v9 = +[NSArray arrayWithObjects:&v125 count:1];
      [v89 setEventStreams:v9];

      uint64_t v10 = +[_DKQuery predicateForEventsIntersectingDateRangeFrom:v88 to:v92];
      [v89 setPredicate:v10];

      uint64_t v11 = +[_DKQuery startDateSortDescriptorAscending:1];
      v124[0] = v11;
      char v12 = +[_DKQuery endDateSortDescriptorAscending:1];
      v124[1] = v12;
      char v13 = +[NSArray arrayWithObjects:v124 count:2];
      [v89 setSortDescriptors:v13];

      mach_vm_size_t v14 = +[_DKKnowledgeStore knowledgeStore];
      id v115 = 0;
      uint64_t v84 = [v14 executeQuery:v89 error:&v115];
      id v86 = v115;

      BOOL v85 = v86 == 0;
      if (v86)
      {
        obuint64_t j = (id)qword_10015EF18;
        if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
        {
          unint64_t v15 = [v86 description];
          sub_1000FAECC(v15, buf, obj);
        }
      }
      else
      {
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        obuint64_t j = v84;
        id v18 = [obj countByEnumeratingWithState:&v120 objects:buf count:16];
        if (v18)
        {
          uint64_t v95 = *(void *)v121;
          *(void *)&long long v19 = 138412546;
          long long v83 = v19;
          while (2)
          {
            for (BOOL i = 0; i != v18; BOOL i = (char *)i + 1)
            {
              if (*(void *)v121 != v95) {
                objc_enumerationMutation(obj);
              }
              uint64_t v21 = *(void **)(*((void *)&v120 + 1) + 8 * i);
              unint64_t v22 = objc_msgSend(v21, "startDate", v83);
              if (!v22
                || ([v21 endDate],
                    long long v23 = objc_claimAutoreleasedReturnValue(),
                    BOOL v24 = v23 == 0,
                    v23,
                    v22,
                    v24))
              {
                uint64_t v29 = (id)qword_10015EF18;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v31 = [v21 stringValue];
                  sub_1000FAE00(v31, v117, &v118, v29);
                }
              }
              else
              {
                unint64_t v25 = [v21 endDate];
                long long v26 = [v21 startDate];
                [v25 timeIntervalSinceDate:v26];
                double v28 = v27;

                if (v28 >= 0.0)
                {
                  uint64_t v32 = [v21 endDate];
                  [v92 timeIntervalSinceDate:v32];
                  BOOL v34 = v33 < 0.0;

                  if (v34)
                  {
                    v80 = (id)qword_10015EF18;
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
                    {
                      int v81 = [v21 stringValue];
                      unsigned __int8 v82 = [v21 endDate];
                      sub_1000FAE5C(v81, v82, v116, v80);
                    }

                    goto LABEL_50;
                  }
                  long long v35 = [v21 stringValue];
                  id v36 = [v35 copy];

                  if ([v36 containsString:@"/"])
                  {
                    id v94 = [v36 lastPathComponent];
                    uint64_t v29 = 0;
                  }
                  else
                  {
                    uint64_t v29 = v36;
                    id v94 = 0;
                  }
                  long long v37 = [v21 metadata];
                  unint64_t v38 = +[_DKApplicationMetadataKey dyldPlatform];
                  unint64_t v39 = [v37 objectForKeyedSubscript:v38];

                  long long v40 = [v21 metadata];
                  unint64_t v41 = +[_DKApplicationMetadataKey isNativeArchitecture];
                  long long v42 = [v40 objectForKeyedSubscript:v41];

                  unint64_t v43 = [v21 metadata];
                  long long v44 = +[_DKApplicationMetadataKey shortVersionString];
                  unint64_t v45 = [v43 objectForKeyedSubscript:v44];

                  unint64_t v46 = [v21 metadata];
                  unint64_t v47 = +[_DKApplicationMetadataKey exactBundleVersion];
                  long long v48 = [v46 objectForKeyedSubscript:v47];

                  *(void *)int v116 = 0xAAAAAAAAAAAAAA00;
                  *(void *)&unsigned __int8 v116[8] = 0;
                  sub_100016EAC((uint64_t)v116);
                  sub_100016EAC((uint64_t)v116);
                  if (v29) {
                    unint64_t v49 = (char *)[v29 UTF8String];
                  }
                  else {
                    unint64_t v49 = "<unknown>";
                  }
                  char v112 = v49;
                  sub_100030238((uint64_t)v113, &v112);
                  long long v50 = sub_10000D104(v116, "bundleID");
                  sub_100016EAC((uint64_t)v113);
                  char v51 = *(unsigned char *)v50;
                  *(unsigned char *)long long v50 = v113[0];
                  v113[0] = v51;
                  unint64_t v52 = (uint64_t *)v50[1];
                  v50[1] = (uint64_t)v114;
                  uint64_t v114 = v52;
                  sub_100016EAC((uint64_t)v50);
                  sub_100016EAC((uint64_t)v113);
                  sub_100016B28(&v114, v113[0]);
                  sub_100069C10((uint64_t)v110, "foreground");
                  long long v53 = sub_10000D104(v116, "state");
                  sub_100016EAC((uint64_t)v110);
                  char v54 = *(unsigned char *)v53;
                  *(unsigned char *)long long v53 = v110[0];
                  v110[0] = v54;
                  unint64_t v55 = (uint64_t *)v53[1];
                  v53[1] = (uint64_t)v111;
                  int v111 = v55;
                  sub_100016EAC((uint64_t)v53);
                  sub_100016EAC((uint64_t)v110);
                  sub_100016B28(&v111, v110[0]);
                  sub_100069C10((uint64_t)v108, "activation");
                  unint64_t v56 = sub_10000D104(v116, "reason");
                  sub_100016EAC((uint64_t)v108);
                  char v57 = *(unsigned char *)v56;
                  *(unsigned char *)unint64_t v56 = v108[0];
                  v108[0] = v57;
                  long long v58 = (uint64_t *)v56[1];
                  v56[1] = (uint64_t)v109;
                  int v109 = v58;
                  sub_100016EAC((uint64_t)v56);
                  sub_100016EAC((uint64_t)v108);
                  sub_100016B28(&v109, v108[0]);
                  LODWORD(v59) = vcvtmd_u64_f64(v28);
                  v106[0] = 6;
                  int v107 = v59;
                  sub_100016EAC((uint64_t)v106);
                  sub_100016EAC((uint64_t)v106);
                  unint64_t v60 = sub_10000D104(v116, "duration");
                  sub_100016EAC((uint64_t)v106);
                  unsigned __int8 v61 = *(unsigned char *)v60;
                  *(unsigned char *)unint64_t v60 = v106[0];
                  v106[0] = v61;
                  long long v62 = (uint64_t *)v60[1];
                  v60[1] = (uint64_t)v107;
                  int v107 = v62;
                  sub_100016EAC((uint64_t)v60);
                  sub_100016EAC((uint64_t)v106);
                  sub_100016B28(&v107, v106[0]);
                  if (v94)
                  {
                    char v112 = (char *)[v94 UTF8String];
                    sub_100030238((uint64_t)v104, &v112);
                    unint64_t v63 = sub_10000D104(v116, "executableName");
                    sub_100016EAC((uint64_t)v104);
                    char v64 = *(unsigned char *)v63;
                    *(unsigned char *)unint64_t v63 = v104[0];
                    v104[0] = v64;
                    uint64_t v65 = (uint64_t *)v63[1];
                    v63[1] = (uint64_t)v105;
                    int v105 = v65;
                    sub_100016EAC((uint64_t)v63);
                    sub_100016EAC((uint64_t)v104);
                    sub_100016B28(&v105, v104[0]);
                  }
                  if (v39)
                  {
                    signed int v66 = [v39 intValue];
                    v102[0] = 5;
                    uint64_t v103 = (uint64_t *)v66;
                    sub_100016EAC((uint64_t)v102);
                    sub_100016EAC((uint64_t)v102);
                    uint64_t v67 = sub_10000D104(v116, "dyldPlatform");
                    sub_100016EAC((uint64_t)v102);
                    unsigned __int8 v68 = *(unsigned char *)v67;
                    *(unsigned char *)uint64_t v67 = v102[0];
                    v102[0] = v68;
                    long long v69 = (uint64_t *)v67[1];
                    v67[1] = (uint64_t)v103;
                    uint64_t v103 = v69;
                    sub_100016EAC((uint64_t)v67);
                    sub_100016EAC((uint64_t)v102);
                    sub_100016B28(&v103, v102[0]);
                  }
                  if (v42)
                  {
                    unsigned int v70 = [v42 BOOLValue];
                    v100[0] = 4;
                    unint64_t v101 = v70;
                    sub_100016EAC((uint64_t)v100);
                    sub_100016EAC((uint64_t)v100);
                    unint64_t v71 = sub_10000D104(v116, "isNativeArch");
                    sub_100016EAC((uint64_t)v100);
                    unsigned __int8 v72 = *(unsigned char *)v71;
                    *(unsigned char *)unint64_t v71 = v100[0];
                    v100[0] = v72;
                    char v73 = (uint64_t *)v71[1];
                    v71[1] = v101;
                    unint64_t v101 = (unint64_t)v73;
                    sub_100016EAC((uint64_t)v71);
                    sub_100016EAC((uint64_t)v100);
                    sub_100016B28((uint64_t **)&v101, v100[0]);
                  }
                  if (v45)
                  {
                    char v112 = (char *)[v45 UTF8String];
                    sub_100030238((uint64_t)v98, &v112);
                    uint64_t v74 = sub_10000D104(v116, "shortVersion");
                    sub_100016EAC((uint64_t)v98);
                    char v75 = *(unsigned char *)v74;
                    *(unsigned char *)uint64_t v74 = v98[0];
                    v98[0] = v75;
                    char v76 = (uint64_t *)v74[1];
                    v74[1] = (uint64_t)v99;
                    v99 = v76;
                    sub_100016EAC((uint64_t)v74);
                    sub_100016EAC((uint64_t)v98);
                    sub_100016B28(&v99, v98[0]);
                  }
                  if (v48)
                  {
                    char v112 = (char *)[v48 UTF8String];
                    sub_100030238((uint64_t)v96, &v112);
                    uint64_t v77 = sub_10000D104(v116, "exactBundleVersion");
                    sub_100016EAC((uint64_t)v96);
                    char v78 = *(unsigned char *)v77;
                    *(unsigned char *)uint64_t v77 = v96[0];
                    v96[0] = v78;
                    char v79 = (uint64_t *)v77[1];
                    v77[1] = (uint64_t)v97;
                    BOOL v97 = v79;
                    sub_100016EAC((uint64_t)v77);
                    sub_100016EAC((uint64_t)v96);
                    sub_100016B28(&v97, v96[0]);
                  }
                  v91[2](v91, v116);
                  sub_100016EAC((uint64_t)v116);
                  sub_100016B28((uint64_t **)&v116[8], v116[0]);
                }
                else
                {
                  uint64_t v29 = (id)qword_10015EF18;
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                  {
                    long long v30 = [v21 stringValue];
                    *(_DWORD *)int v116 = v83;
                    *(void *)&v116[4] = v30;
                    *(_WORD *)&v116[12] = 2048;
                    *(double *)&v116[14] = v28;
                    _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[AppUsage] Skipping event for %@ with negative time interval of %f", v116, 0x16u);
                  }
                }
              }
            }
            id v18 = [obj countByEnumeratingWithState:&v120 objects:buf count:16];
            if (v18) {
              continue;
            }
            break;
          }
        }
      }
LABEL_50:
    }
    else
    {
      long long v17 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[AppUsage] WARNING: Failed to get _DKEventQuery class", buf, 2u);
      }
      BOOL v85 = 0;
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v85;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
      sub_1000B3540(v4);
    }
  }
}

void sub_100069740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1000699E4(int a1)
{
  if (os_variant_is_darwinos())
  {
    double v2 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[AppUsage] WARNING: Ignoring AppUsage::initializeSyncTime on darwinOS.", buf, 2u);
    }
  }
  else if (a1 == 1 && sub_1000B3468() <= 0.0)
  {
    double v3 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)double v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[AppUsage] Setting app usage sync time after an OS update", v4, 2u);
    }
    sub_100069AF4();
  }
}

void sub_100069AF4()
{
  if (os_variant_is_darwinos())
  {
    int v0 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "[AppUsage] WARNING: Ignoring AppUsage::resetSyncTime on darwinOS.", buf, 2u);
    }
  }
  else
  {
    id v2 = +[NSDate now];
    [v2 timeIntervalSince1970];
    sub_1000B3540(v1);
  }
}

void sub_100069BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_100069C10(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100069C5C(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100069C5C(char *a1)
{
  id v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100069C94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100069CA8@<X0>(void *a1@<X8>)
{
  double result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = off_100154168;
  result[3] = off_100154118;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_100069D14(uint64_t *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v10 = 0uLL;
  if (sub_100027758())
  {
    sub_100015438(v7, "file:internal-defaultConfig");
    sub_10005A7E4(&__p);
    sub_100068468((long long *)v7, (__n128 *)&__p, &v9);
    long long v2 = v9;
    long long v9 = 0uLL;
    double v3 = (std::__shared_weak_count *)*((void *)&v10 + 1);
    long long v10 = v2;
    if (v3)
    {
      sub_1000147D8(v3);
      if (*((void *)&v9 + 1)) {
        sub_1000147D8(*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if ((void)v10)
    {
      sub_100069F90(a1, &v10);
      if ((void)v10) {
        goto LABEL_20;
      }
    }
  }
  sub_100015438(v7, "file:external-defaultConfig");
  sub_100089930(&__p);
  sub_100068468((long long *)v7, (__n128 *)&__p, &v9);
  long long v4 = v9;
  long long v9 = 0uLL;
  long long v5 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  long long v10 = v4;
  if (v5)
  {
    sub_1000147D8(v5);
    if (*((void *)&v9 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if ((void)v10)
  {
    sub_100069F90(a1, &v10);
    if ((void)v10)
    {
LABEL_20:
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      sub_100015438(v7, "file:tasking");
      sub_10005C848(&__p);
      sub_10005D580((long long *)v7, (__n128 *)&__p, &v10, &v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      if ((void)v9) {
        sub_100069F90(a1, &v9);
      }
      if (*((void *)&v9 + 1)) {
        sub_1000147D8(*((std::__shared_weak_count **)&v9 + 1));
      }
    }
  }
  if (sub_100027758())
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    sub_100015438(v7, "file:developer");
    sub_10005A7F4(&__p);
    sub_10002FA40((uint64_t)v7, (__n128 *)&__p, &v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if ((void)v9) {
      sub_100069F90(a1, &v9);
    }
    if (*((void *)&v9 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (*((void *)&v10 + 1)) {
    sub_1000147D8(*((std::__shared_weak_count **)&v10 + 1));
  }
}

void sub_100069F84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void *sub_100069F90(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  long long v4 = a1 + 2;
  unint64_t v5 = v6;
  id v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_100028DEC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    mach_vm_size_t v14 = (char *)sub_1000171B0((uint64_t)v4, v13);
    unint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    _OWORD v19[2] = v15 + 16;
    sub_10006A190(a1, v19);
    long long v9 = (void *)a1[1];
    sub_100014B08(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_10006A0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_10006A0E0()
{
}

void sub_10006A0F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100154168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006A114(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100154168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10006A168(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10006A190(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10006A208((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10006A208(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v14[0] = a1;
  v14[1] = &v12;
  void v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v13 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v13;
  }
  LOBYTE(v15) = 1;
  sub_10006A2CC((uint64_t)v14);
  return v10;
}

uint64_t sub_10006A2CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100054214(a1);
  }
  return a1;
}

BOOL sub_10006A304(int **a1)
{
  double v1 = *a1;
  if (*a1 == (int *)-1)
  {
    uint64_t v7 = qword_10015ED90;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1000FB004(v7);
    return 0;
  }
  a1[2] = v1;
  int v2 = *v1;
  if (*v1 != -258926936)
  {
    uint64_t v8 = qword_10015ED90;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000FB180(v2, v8);
    return 0;
  }
  if (v1[1] != 1)
  {
    long long v9 = qword_10015ED90;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000FB0FC(v9);
    return 0;
  }
  unint64_t v3 = v1[5];
  unint64_t v4 = (unint64_t)a1[1];
  if (v4 < v3)
  {
    uint64_t v5 = qword_10015ED90;
    BOOL result = os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1000FB074(v3, v4, v5);
    return 0;
  }
  a1[3] = (int *)((char *)v1 + v3 + 1);
  return 1;
}

void sub_10006A438()
{
}

void sub_10006A570()
{
}

uint64_t sub_10006A5A8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100065AE8(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_10006A5F8(uint64_t *a1, const char *a2)
{
  *a1 = -1;
  a1[1] = 0;
  a1[3] = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sub_100065AEC(a2, &v8);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  uint64_t v8 = -1;
  uint64_t v9 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  v10[0] = v5;
  v10[1] = v6;
  sub_100065AE8(v10);
  sub_100065AE8(&v8);
  return a1;
}

uint64_t sub_10006A698(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v3 = *a1;
  if (*a1 == -1) {
    uint64_t v3 = 0;
  }
  uint64_t v19 = v3;
  unsigned int v4 = *(_DWORD *)(a1[2] + 8);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  if (!v4) {
    return 0;
  }
  unsigned int v7 = 1;
  while (1)
  {
    unsigned int v8 = (v7 + v4) >> 1;
    sub_100015438(&v21, (char *)(v19 + *(unsigned int *)(a1[2] + 4 * (v8 - 1) + 24)));
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v21;
    uint64_t v9 = (void *)v21;
    uint64_t v24 = v22;
    int v10 = SHIBYTE(v22);
    size_t v11 = v22 >= 0 ? HIBYTE(v22) : *((void *)&v21 + 1);
    long long v12 = v22 >= 0 ? __p : (void **)v21;
    if (a3 == v11 && !memcmp(a2, v12, a3)) {
      break;
    }
    if (v11 >= a3) {
      size_t v13 = a3;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(a2, v12, v13);
    BOOL v15 = a3 < v11;
    if (a3 == v11 || v14 != 0) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      unsigned int v4 = v8 - 1;
    }
    else {
      unsigned int v7 = v8 + 1;
    }
    if (v7 > v4)
    {
      uint64_t v17 = 0;
      if ((v10 & 0x80000000) == 0) {
        return v17;
      }
      goto LABEL_31;
    }
  }
  uint64_t v17 = 1;
  if ((v10 & 0x80000000) == 0) {
    return v17;
  }
LABEL_31:
  operator delete(v9);
  return v17;
}

void sub_10006A824(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10006A834(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10006A86C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_100065AE8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10006A8B4(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_10006A8F8(void *result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = a2[1];
  *uint64_t result = *a2;
  result[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a3[1];
  result[2] = *a3;
  result[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a4[1];
  result[4] = *a4;
  result[5] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a5[1];
  result[6] = *a5;
  result[7] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a6[1];
  result[8] = *a6;
  result[9] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10006A978(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = sub_100031FD8(a1[2]);
  unint64_t v49 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v50.__d_.__rep_ = v6;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  sub_10006B24C(a1, a2, &v50, (uint64_t)&v48);
  sub_10006B7BC((uint64_t)a1, (unsigned __int8 *)&v48);
  uint64_t v7 = (id)qword_10015EF70;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (void *)a2;
    }
    else {
      uint64_t v8 = *(void **)a2;
    }
    sub_100007460(a3, -1, 0x20u, 0, 1, v55);
    int v9 = v55[23];
    uint64_t v10 = *(unsigned char **)v55;
    sub_100007460((uint64_t)&v48, -1, 0x20u, 0, 1, &__p);
    size_t v11 = v55;
    if (v9 < 0) {
      size_t v11 = v10;
    }
    if (v46 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v11;
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&unsigned char buf[24] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[DefaultSink] Triggering CA log with reason: %{public}s, options: %{public}s, public header elements: %{public}s", buf, 0x20u);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p);
    }
    if ((v55[23] & 0x80000000) != 0) {
      operator delete(*(void **)v55);
    }
  }

  sub_10006BAC4((uint64_t)a1, (unsigned __int8 *)&v48);
  unint64_t v41 = objc_opt_new();
  int v13 = *(char *)(a2 + 23);
  if (v13 < 0)
  {
    if (*(void *)(a2 + 8) != 8) {
      goto LABEL_20;
    }
    int v14 = *(void **)a2;
  }
  else
  {
    int v14 = (void *)a2;
    if (v13 != 8) {
      goto LABEL_20;
    }
  }
  if (*v14 != 0x657461647055736FLL) {
    goto LABEL_20;
  }
  std::string __p = "overrideOSBuildString";
  long long v59 = (void (*)(uint64_t))0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int buf = v37;
  *(_OWORD *)&uint8_t buf[16] = v37;
  sub_1000135DC(a3, (const std::string::value_type **)&__p, (uint64_t)buf);
  *(void *)unint64_t v55 = a3;
  memset(&v55[8], 0, 24);
  *(void *)&long long v56 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)v55);
  if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)v55))
  {
    uint64_t v38 = sub_1000155C8();
    if (!v38) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v38 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v38 == 3)
  {
    unint64_t v39 = *(uint64_t **)(v38 + 8);
    if (v39)
    {
      if (*((char *)v39 + 23) < 0) {
        unint64_t v39 = (uint64_t *)*v39;
      }
      long long v40 = +[NSString stringWithUTF8String:v39];
      [v41 setObject:v40 forKeyedSubscript:@"os_version"];
    }
  }
LABEL_20:
  std::string __p = "aggPeriod";
  long long v59 = (void (*)(uint64_t))0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int buf = v15;
  *(_OWORD *)&uint8_t buf[16] = v15;
  sub_1000135DC(a3, (const std::string::value_type **)&__p, (uint64_t)buf);
  *(void *)unint64_t v55 = a3;
  memset(&v55[8], 0, 24);
  *(void *)&long long v56 = 0x8000000000000000;
  sub_100013648((unsigned __int8 **)v55);
  unint64_t v16 = 0xAAAAAA0000000000;
  unsigned int v17 = -1431655936;
  if (sub_100013964((unsigned __int8 **)buf, (unsigned __int8 **)v55))
  {
    uint64_t v18 = sub_1000155C8();
    if (!v18) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v18 = (uint64_t)sub_100013AAC((unsigned __int8 **)buf);
  }
  if (*(unsigned char *)v18 == 3)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    if (v19)
    {
      int v20 = sub_100023B14(v19);
      unsigned __int8 v21 = v20;
      char v22 = 0;
      unsigned int v17 = v20 & 0xFFFFFF00;
      unint64_t v16 = 0xAAAAAA0100000000;
      goto LABEL_28;
    }
  }
LABEL_27:
  unsigned __int8 v21 = 0;
  char v22 = 1;
LABEL_28:
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v24 = *(void *)(a2 + 8);
    if (v24 != 3)
    {
      if (v24 == 8 && **(void **)a2 == 0x657461647055736FLL) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    a2 = *(void *)a2;
  }
  else
  {
    int v23 = *(unsigned __int8 *)(a2 + 23);
    if (v23 != 3)
    {
      if (v23 == 8 && *(void *)a2 == 0x657461647055736FLL) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }
  if (*(_WORD *)a2 != 28769 || *(unsigned char *)(a2 + 2) != 105) {
LABEL_42:
  }
    char v22 = 0;
LABEL_43:
  uint64_t v63 = kOSALogOptionOverrideFilePrefix;
  CFStringRef v64 = @"Analytics";
  long long v26 = +[NSDictionary dictionaryWithObjects:&v64 forKeys:&v63 count:1];
  id v42 = [v26 mutableCopy];

  sub_1000899D4(buf);
  if (buf[23] >= 0) {
    double v27 = buf;
  }
  else {
    double v27 = *(unsigned char **)buf;
  }
  double v28 = +[NSString stringWithUTF8String:v27];
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ([v28 length]) {
    [v42 setObject:v28 forKeyedSubscript:kOSALogOptionOverrideFileExtension];
  }
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4012000000;
  *(void *)&unsigned char buf[24] = sub_10006C434;
  long long v59 = sub_10006C48C;
  unint64_t v60 = &unk_1001455B2;
  unint64_t v61 = 0xAAAAAAAAAAAAAA00;
  long long v62 = 0;
  sub_100016EAC((uint64_t)&v61);
  sub_100016EAC((uint64_t)&v61);
  std::string __p = 0;
  unint64_t v45 = &__p;
  uint64_t v46 = 0x2020000000;
  uint64_t v47 = 0;
  id v43 = 0;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3321888768;
  _OWORD v51[2] = sub_10006C4CC;
  v51[3] = &unk_100154270;
  v51[6] = a1;
  sub_100016A10((uint64_t)v52, (uint64_t)&v48);
  char v54 = v22;
  v53[1] = (uint64_t *)v50.__d_.__rep_;
  _OWORD v53[2] = (uint64_t *)(v16 | v17 | v21);
  v51[4] = buf;
  v51[5] = &__p;
  uint64_t v29 = +[OSALog createForSubmission:@"211" metadata:v41 options:v42 error:&v43 writing:v51];
  id v30 = v43;
  BOOL v31 = qword_10015EF70;
  if (v29)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = v45[3];
      *(_DWORD *)unint64_t v55 = 134218242;
      *(void *)&v55[4] = v32;
      *(_WORD *)&v55[12] = 2114;
      *(void *)&v55[14] = v41;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[DefaultSink] Successfully wrote CA log with %llu messages and metadata %{public}@", v55, 0x16u);
    }
    unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&unsigned char v55[16] = v33;
    long long v56 = v33;
    *(_OWORD *)unint64_t v55 = v33;
    id v34 = [v29 filepath];
    sub_100015438(v55, (char *)[v34 UTF8String]);
    *(std::chrono::system_clock::time_point *)&v55[24] = v50;
    *(std::chrono::system_clock::time_point *)&long long v56 = std::chrono::system_clock::now();
    uint64_t v35 = *(void *)&buf[8] + 48;
    BYTE8(v56) = *(unsigned char *)(*(void *)&buf[8] + 48);
    unint64_t v57 = *(void *)(*(void *)&buf[8] + 56);
    sub_100016EAC(*(void *)&buf[8] + 48);
    *(unsigned char *)uint64_t v35 = 0;
    *(void *)(v35 + 8) = 0;
    sub_100016EAC((uint64_t)&v56 + 8);

    sub_10006D61C(v36, (uint64_t)v55);
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_ERROR)) {
    sub_1000FB1F8((uint64_t)v30, v31);
  }

  sub_100016EAC((uint64_t)v52);
  sub_100016B28(v53, v52[0]);

  _Block_object_dispose(&__p, 8);
  _Block_object_dispose(buf, 8);
  sub_100016EAC((uint64_t)&v61);
  sub_100016B28(&v62, v61);

  sub_100016EAC((uint64_t)&v48);
  sub_100016B28(&v49, v48);
}

void sub_10006B120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_100028D64(&a18);
  _Unwind_Resume(a1);
}

void sub_10006B24C(uint64_t *a1@<X0>, uint64_t a2@<X1>, const std::chrono::system_clock::time_point *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)a4 = 0;
  sub_100016EAC(a4);
  sub_100016EAC(a4);
  sub_100069C10((uint64_t)v52, "<metadata>");
  uint64_t v8 = sub_10000D104((unsigned __int8 *)a4, "_marker");
  sub_100016EAC((uint64_t)v52);
  char v9 = *(unsigned char *)v8;
  *(unsigned char *)uint64_t v8 = v52[0];
  v52[0] = v9;
  uint64_t v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v53;
  long long v53 = v10;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v52);
  sub_100016B28(&v53, v52[0]);
  sub_10006DE94((uint64_t)v50, "2.4");
  size_t v11 = sub_10000D104((unsigned __int8 *)a4, "version");
  sub_100016EAC((uint64_t)v50);
  char v12 = *(unsigned char *)v11;
  *(unsigned char *)size_t v11 = v50[0];
  v50[0] = v12;
  int v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v51;
  char v51 = v13;
  sub_100016EAC((uint64_t)v11);
  sub_100016EAC((uint64_t)v50);
  sub_100016B28(&v51, v50[0]);
  sub_10005CE6C(a3);
  sub_10001C898((uint64_t)v48, (uint64_t)&__p);
  int v14 = sub_10000D104((unsigned __int8 *)a4, "startTimestamp");
  sub_100016EAC((uint64_t)v48);
  char v15 = *(unsigned char *)v14;
  *(unsigned char *)int v14 = v48[0];
  v48[0] = v15;
  unint64_t v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v49;
  unint64_t v49 = v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v48);
  sub_100016B28(&v49, v48[0]);
  if (v47 < 0) {
    operator delete(__p);
  }
  sub_1000168C0((uint64_t)v44, a2);
  unsigned int v17 = sub_10000D104((unsigned __int8 *)a4, "rolloverReason");
  sub_100016EAC((uint64_t)v44);
  char v18 = *(unsigned char *)v17;
  *(unsigned char *)unsigned int v17 = v44[0];
  v44[0] = v18;
  uint64_t v19 = (uint64_t *)v17[1];
  v17[1] = (uint64_t)v45;
  unint64_t v45 = v19;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v44);
  sub_100016B28(&v45, v44[0]);
  if (sub_100031E90(a1[2]))
  {
    v42[0] = 4;
    uint64_t v43 = 1;
    sub_100016EAC((uint64_t)v42);
    sub_100016EAC((uint64_t)v42);
    int v20 = sub_10000D104((unsigned __int8 *)a4, "partialDataFromDay");
    sub_100016EAC((uint64_t)v42);
    unsigned __int8 v21 = *(unsigned char *)v20;
    *(unsigned char *)int v20 = v42[0];
    v42[0] = v21;
    char v22 = (uint64_t *)v20[1];
    v20[1] = v43;
    uint64_t v43 = (uint64_t)v22;
    sub_100016EAC((uint64_t)v20);
    sub_100016EAC((uint64_t)v42);
    sub_100016B28((uint64_t **)&v43, v42[0]);
  }
  sub_100063038((uint64_t)v40, "sqlite");
  int v23 = sub_10000D104((unsigned __int8 *)a4, "stateDbType");
  sub_100016EAC((uint64_t)v40);
  char v24 = *(unsigned char *)v23;
  *(unsigned char *)int v23 = v40[0];
  v40[0] = v24;
  unint64_t v25 = (uint64_t *)v23[1];
  v23[1] = (uint64_t)v41;
  unint64_t v41 = v25;
  sub_100016EAC((uint64_t)v23);
  sub_100016EAC((uint64_t)v40);
  sub_100016B28(&v41, v40[0]);
  uint64_t v26 = a1[6] + *(void *)(*(void *)a1[6] - 88);
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
  v38[0] = 5;
  unint64_t v39 = (uint64_t *)v27;
  sub_100016EAC((uint64_t)v38);
  sub_100016EAC((uint64_t)v38);
  double v28 = sub_10000D104((unsigned __int8 *)a4, "stateDbVersion");
  sub_100016EAC((uint64_t)v38);
  unsigned __int8 v29 = *(unsigned char *)v28;
  *(unsigned char *)double v28 = v38[0];
  v38[0] = v29;
  id v30 = (uint64_t *)v28[1];
  v28[1] = (uint64_t)v39;
  unint64_t v39 = v30;
  sub_100016EAC((uint64_t)v28);
  sub_100016EAC((uint64_t)v38);
  sub_100016B28(&v39, v38[0]);
  uint64_t v31 = a1[4] + *(void *)(*(void *)a1[4] - 88);
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  v36[0] = 5;
  long long v37 = (uint64_t *)v32;
  sub_100016EAC((uint64_t)v36);
  sub_100016EAC((uint64_t)v36);
  long long v33 = sub_10000D104((unsigned __int8 *)a4, "configDbVersion");
  sub_100016EAC((uint64_t)v36);
  unsigned __int8 v34 = *(unsigned char *)v33;
  *(unsigned char *)long long v33 = v36[0];
  v36[0] = v34;
  uint64_t v35 = (uint64_t *)v33[1];
  v33[1] = (uint64_t)v37;
  long long v37 = v35;
  sub_100016EAC((uint64_t)v33);
  sub_100016EAC((uint64_t)v36);
  sub_100016B28(&v37, v36[0]);
}

void sub_10006B724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t *a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  sub_100028D64(&a15);
  sub_100028D64(v25);
  _Unwind_Resume(a1);
}

void sub_10006B7BC(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  int v20 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 32) + 96))(&v19);
  if (v19 == 1)
  {
    double v28 = "uuid";
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v3;
    *(_OWORD *)&__p[16] = v3;
    sub_1000135DC((uint64_t)&v19, &v28, (uint64_t)__p);
    unsigned __int8 v21 = (unsigned __int8 *)&v19;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0x8000000000000000;
    sub_100013648(&v21);
    if (sub_100013964((unsigned __int8 **)__p, &v21)) {
      uint64_t v4 = sub_1000155C8();
    }
    else {
      uint64_t v4 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
    }
    uint64_t v5 = (unsigned char *)v4;
    double v28 = "parentUuid";
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v6;
    *(_OWORD *)&__p[16] = v6;
    sub_1000135DC((uint64_t)&v19, &v28, (uint64_t)__p);
    unsigned __int8 v21 = (unsigned __int8 *)&v19;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0x8000000000000000;
    sub_100013648(&v21);
    if (sub_100013964((unsigned __int8 **)__p, &v21)) {
      uint64_t v7 = sub_1000155C8();
    }
    else {
      uint64_t v7 = (uint64_t)sub_100013AAC((unsigned __int8 **)__p);
    }
    uint64_t v8 = (unsigned char *)v7;
    memset(__p, 170, 24);
    sub_100007460((uint64_t)&v19, -1, 0x20u, 0, 0, __p);
    if (*v5 == 3)
    {
      sub_100016A10((uint64_t)v17, (uint64_t)v5);
      char v9 = sub_10000D104(a2, "configUuid");
      sub_100016EAC((uint64_t)v17);
      char v10 = *(unsigned char *)v9;
      *(unsigned char *)char v9 = v17[0];
      v17[0] = v10;
      size_t v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v18;
      char v18 = v11;
      sub_100016EAC((uint64_t)v9);
      sub_100016EAC((uint64_t)v17);
      sub_100016B28(&v18, v17[0]);
    }
    if (*v8 == 3)
    {
      sub_100016A10((uint64_t)v15, (uint64_t)v8);
      char v12 = sub_10000D104(a2, "configParentUuid");
      sub_100016EAC((uint64_t)v15);
      char v13 = *(unsigned char *)v12;
      *(unsigned char *)char v12 = v15[0];
      v15[0] = v13;
      int v14 = (uint64_t *)v12[1];
      v12[1] = (uint64_t)v16;
      unint64_t v16 = v14;
      sub_100016EAC((uint64_t)v12);
      sub_100016EAC((uint64_t)v15);
      sub_100016B28(&v16, v15[0]);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  sub_100016EAC((uint64_t)&v19);
  sub_100016B28(&v20, v19);
}

void sub_10006BA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_100028D64(&a14);
  _Unwind_Resume(a1);
}

void sub_10006BAC4(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v99 = 0xAAAAAAAAAAAAAAAALL;
  int v100 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B2F3C(&v99);
  uint64_t v4 = sub_10000D104((unsigned __int8 *)&v99, "preferred-user-interface-language");
  sub_100016A10((uint64_t)v97, (uint64_t)v4);
  uint64_t v5 = sub_10000D104(a2, "_preferredUserInterfaceLanguage");
  sub_100016EAC((uint64_t)v97);
  char v6 = *(unsigned char *)v5;
  *(unsigned char *)uint64_t v5 = v97[0];
  v97[0] = v6;
  uint64_t v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v98;
  v98 = v7;
  sub_100016EAC((uint64_t)v5);
  sub_100016EAC((uint64_t)v97);
  sub_100016B28(&v98, v97[0]);
  uint64_t v8 = sub_10000D104((unsigned __int8 *)&v99, "user-interface-language");
  sub_100016A10((uint64_t)v95, (uint64_t)v8);
  char v9 = sub_10000D104(a2, "_userInterfaceLanguage");
  sub_100016EAC((uint64_t)v95);
  char v10 = *(unsigned char *)v9;
  *(unsigned char *)char v9 = v95[0];
  v95[0] = v10;
  size_t v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v96;
  uint64_t v96 = v11;
  sub_100016EAC((uint64_t)v9);
  sub_100016EAC((uint64_t)v95);
  sub_100016B28(&v96, v95[0]);
  char v12 = sub_10000D104((unsigned __int8 *)&v99, "user-set-region-format");
  sub_100016A10((uint64_t)v93, (uint64_t)v12);
  char v13 = sub_10000D104(a2, "_userSetRegionFormat");
  sub_100016EAC((uint64_t)v93);
  char v14 = *(unsigned char *)v13;
  *(unsigned char *)char v13 = v93[0];
  v93[0] = v14;
  char v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v94;
  id v94 = v15;
  sub_100016EAC((uint64_t)v13);
  sub_100016EAC((uint64_t)v93);
  sub_100016B28(&v94, v93[0]);
  unint64_t v16 = +[OSASystemConfiguration sharedInstance];
  v91[0] = 4;
  unint64_t v92 = [v16 optIn3rdParty];
  sub_100016EAC((uint64_t)v91);
  sub_100016EAC((uint64_t)v91);
  unsigned int v17 = sub_10000D104(a2, "optIn3rdParty");
  sub_100016EAC((uint64_t)v91);
  unsigned __int8 v18 = *(unsigned char *)v17;
  *(unsigned char *)unsigned int v17 = v91[0];
  v91[0] = v18;
  unint64_t v19 = (uint64_t *)v17[1];
  v17[1] = v92;
  unint64_t v92 = (unint64_t)v19;
  sub_100016EAC((uint64_t)v17);
  sub_100016EAC((uint64_t)v91);
  sub_100016B28((uint64_t **)&v92, v91[0]);

  char v90 = -86;
  v88[0] = 5;
  uint64_t v89 = (uint64_t *)(int)sub_1000B8614();
  sub_100016EAC((uint64_t)v88);
  sub_100016EAC((uint64_t)v88);
  int v20 = sub_10000D104(a2, "deviceCapacity");
  sub_100016EAC((uint64_t)v88);
  unsigned __int8 v21 = *(unsigned char *)v20;
  *(unsigned char *)int v20 = v88[0];
  v88[0] = v21;
  uint64_t v22 = (uint64_t *)v20[1];
  v20[1] = (uint64_t)v89;
  uint64_t v89 = v22;
  sub_100016EAC((uint64_t)v20);
  sub_100016EAC((uint64_t)v88);
  sub_100016B28(&v89, v88[0]);
  unint64_t v86 = 0xAAAAAAAAAAAAAAAALL;
  int v87 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B86E4((uint64_t)&v86);
  if ((_BYTE)v86)
  {
    if (v86 == 2)
    {
      if (*v87 == v87[1]) {
        goto LABEL_8;
      }
    }
    else if (v86 == 1 && !v87[2])
    {
      goto LABEL_8;
    }
    v80 = (unsigned __int8 *)&v86;
    long long v81 = 0uLL;
    *(void *)&long long v82 = 0;
    *((void *)&v82 + 1) = 0x8000000000000000;
    sub_10001D3E4(&v80);
    long long v83 = v80;
    long long v84 = v81;
    long long v85 = v82;
    uint64_t v74 = (unsigned __int8 *)&v86;
    long long v75 = 0uLL;
    *(void *)&long long v76 = 0;
    *((void *)&v76 + 1) = 0x8000000000000000;
    sub_1000157EC(&v74);
    uint64_t v77 = v74;
    long long v78 = v75;
    long long v79 = v76;
    sub_10006D958((uint64_t)a2, &v83, &v77);
  }
LABEL_8:
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  char v73 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v23 = (uint64_t *)(a1 + 64);
  sub_1000B8940(v23, (uint64_t)&v72);
  v80 = (unsigned __int8 *)&v72;
  long long v81 = 0uLL;
  *(void *)&long long v82 = 0;
  *((void *)&v82 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v80);
  long long v69 = v80;
  long long v70 = v81;
  long long v71 = v82;
  uint64_t v74 = (unsigned __int8 *)&v72;
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0x8000000000000000;
  sub_1000157EC(&v74);
  signed int v66 = v74;
  long long v67 = v75;
  long long v68 = v76;
  sub_10006D958((uint64_t)a2, &v69, &v66);
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v65 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B9E18((uint64_t)&v64);
  v80 = (unsigned __int8 *)&v64;
  long long v81 = 0uLL;
  *(void *)&long long v82 = 0;
  *((void *)&v82 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v80);
  unint64_t v61 = v80;
  long long v62 = v81;
  long long v63 = v82;
  uint64_t v74 = (unsigned __int8 *)&v64;
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0x8000000000000000;
  sub_1000157EC(&v74);
  long long v58 = v74;
  long long v59 = v75;
  long long v60 = v76;
  sub_10006D958((uint64_t)a2, &v61, &v58);
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v57 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000B36D4(&v56);
  v80 = (unsigned __int8 *)&v56;
  long long v81 = 0uLL;
  *(void *)&long long v82 = 0;
  *((void *)&v82 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v80);
  long long v53 = v80;
  long long v54 = v81;
  long long v55 = v82;
  uint64_t v74 = (unsigned __int8 *)&v56;
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0x8000000000000000;
  sub_1000157EC(&v74);
  std::chrono::system_clock::time_point v50 = v74;
  long long v51 = v75;
  long long v52 = v76;
  sub_10006D958((uint64_t)a2, &v53, &v50);
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v49 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000BA0DC(v23, (uint64_t)&v48);
  v80 = (unsigned __int8 *)&v48;
  long long v81 = 0uLL;
  *(void *)&long long v82 = 0;
  *((void *)&v82 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v80);
  unint64_t v45 = v80;
  long long v46 = v81;
  long long v47 = v82;
  uint64_t v74 = (unsigned __int8 *)&v48;
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0x8000000000000000;
  sub_1000157EC(&v74);
  id v42 = v74;
  long long v43 = v75;
  long long v44 = v76;
  sub_10006D958((uint64_t)a2, &v45, &v42);
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000BAB60((uint64_t)&v40);
  v80 = (unsigned __int8 *)&v40;
  long long v81 = 0uLL;
  *(void *)&long long v82 = 0;
  *((void *)&v82 + 1) = 0x8000000000000000;
  sub_10001D3E4(&v80);
  long long v37 = v80;
  long long v38 = v81;
  long long v39 = v82;
  uint64_t v74 = (unsigned __int8 *)&v40;
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + 1) = 0x8000000000000000;
  sub_1000157EC(&v74);
  unsigned __int8 v34 = v74;
  long long v35 = v75;
  long long v36 = v76;
  sub_10006D958((uint64_t)a2, &v37, &v34);
  v32[0] = 4;
  long long v33 = (uint64_t *)sub_1000B3034();
  sub_100016EAC((uint64_t)v32);
  sub_100016EAC((uint64_t)v32);
  uint64_t v24 = sub_10000D104(a2, "isGreyMatterAvailable");
  sub_100016EAC((uint64_t)v32);
  unsigned __int8 v25 = *(unsigned char *)v24;
  *(unsigned char *)uint64_t v24 = v32[0];
  v32[0] = v25;
  uint64_t v26 = (uint64_t *)v24[1];
  v24[1] = (uint64_t)v33;
  long long v33 = v26;
  sub_100016EAC((uint64_t)v24);
  sub_100016EAC((uint64_t)v32);
  sub_100016B28(&v33, v32[0]);
  v30[0] = 7;
  double v31 = sub_1000BAB28();
  sub_100016EAC((uint64_t)v30);
  sub_100016EAC((uint64_t)v30);
  unint64_t v27 = sub_10000D104(a2, "dramSize");
  sub_100016EAC((uint64_t)v30);
  unsigned __int8 v28 = *(unsigned char *)v27;
  *(unsigned char *)unint64_t v27 = v30[0];
  v30[0] = v28;
  unsigned __int8 v29 = (uint64_t *)v27[1];
  *((double *)v27 + 1) = v31;
  double v31 = *(double *)&v29;
  sub_100016EAC((uint64_t)v27);
  sub_100016EAC((uint64_t)v30);
  sub_100016B28((uint64_t **)&v31, v30[0]);
  sub_100016EAC((uint64_t)&v40);
  sub_100016B28(&v41, v40);
  sub_100016EAC((uint64_t)&v48);
  sub_100016B28(&v49, v48);
  sub_100016EAC((uint64_t)&v56);
  sub_100016B28(&v57, v56);
  sub_100016EAC((uint64_t)&v64);
  sub_100016B28(&v65, v64);
  sub_100016EAC((uint64_t)&v72);
  sub_100016B28(&v73, v72);
  sub_100016EAC((uint64_t)&v86);
  sub_100016B28(&v87, v86);
  sub_100016EAC((uint64_t)&v99);
  sub_100016B28(&v100, v99);
}

void sub_10006C328(_Unwind_Exception *a1)
{
  sub_100028D64((uint64_t **)(v1 - 192));
  sub_100028D64((uint64_t **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10006C434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 48;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v3 = a1 + 48;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100016EAC(a2 + 48);
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;

  return sub_100016EAC(v3);
}

void sub_10006C48C(uint64_t a1)
{
  sub_100016EAC(a1 + 48);
  int v2 = *(unsigned __int8 *)(a1 + 48);

  sub_100016B28((uint64_t **)(a1 + 56), v2);
}

void sub_10006C4CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  void v6[2] = sub_10006C654;
  void v6[3] = &unk_100154238;
  uint64_t v9 = v4;
  id v5 = v3;
  id v7 = v5;
  sub_100016A10((uint64_t)v10, a1 + 56);
  char v13 = *(unsigned char *)(a1 + 88);
  long long v12 = *(_OWORD *)(a1 + 72);
  long long v8 = *(_OWORD *)(a1 + 32);
  char v15 = 0;
  v14[0] = off_100154340;
  v14[1] = objc_retainBlock(v6);
  char v15 = v14;
  sub_10005A920((uint64_t)v14);
  sub_10001266C(v14);
  sub_100016EAC((uint64_t)v10);
  sub_100016B28(&v11, v10[0]);
}

void sub_10006C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_10001266C((void *)(v15 - 72));
  sub_100028D64(v14);

  _Unwind_Resume(a1);
}

void sub_10006C654(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) fileDescriptor];
  int v4 = (int)v3;
  sub_10006C7E8((uint64_t)v3, a1 + 64, (int)v3);
  char v5 = *(unsigned char *)(a1 + 96) != 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10006CAAC;
  void v9[3] = &unk_100154210;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v11 = v2;
  uint64_t v12 = v6;
  int v13 = v4;
  long long v10 = *(_OWORD *)(a1 + 40);
  unint64_t v16 = 0;
  char v14 = off_1001542B0;
  uint64_t v15 = objc_retainBlock(v9);
  unint64_t v16 = &v14;
  sub_10006C91C(v2, v5, v7, (uint64_t)&v14);
  sub_10006DCDC(&v14);
  long long v8 = sub_10006D4FC(&v14);
  sub_10006C7E8((uint64_t)v8, (uint64_t)&v14, v4);
  sub_100016EAC((uint64_t)&v14);
  sub_100016B28(&v15, v14);
}

void sub_10006C7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C7E8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 0)
  {
    long long v8 = qword_10015EF70;
    if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_ERROR)) {
      sub_1000FB270(v8);
    }
    return -1;
  }
  else
  {
    memset(__p, 170, sizeof(__p));
    sub_100007460(a2, -1, 0x20u, 0, 0, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v5 = HIBYTE(__p[2]);
    }
    else {
      size_t v5 = (size_t)__p[1];
    }
    ssize_t v6 = write(a3, v4, v5);
    ssize_t v7 = write(a3, "\n", 1uLL) + v6;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  return v7;
}

void sub_10006C8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_10006C91C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v11 = a2;
  ssize_t v7 = qword_10015EF48;
  if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[DefaultSink] emitting messages for persisted xform states", buf, 2u);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  *(void *)int buf = &v11;
  p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = &rep;
  uint64_t v14 = a1;
  uint64_t v15 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  if ((a3 & 0xFF00000000) != 0)
  {
    unint64_t v16 = off_1001543D0;
    unsigned int v17 = buf;
    unsigned __int8 v18 = &rep;
    unint64_t v19 = &v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t (***)()))(*(void *)v8 + 104))(v8, a3, &v16);
    return sub_10006EB00(&v16);
  }
  else
  {
    unint64_t v16 = off_100154550;
    unsigned int v17 = buf;
    unint64_t v19 = &v16;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v8 + 112))(v8, &v16);
    return sub_10006EC64(&v16);
  }
}

void sub_10006CAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 55);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 40);
  }
  if (v5 >= 0) {
    ssize_t v6 = (char *)(a2 + 32);
  }
  else {
    ssize_t v6 = *(char **)(a2 + 32);
  }
  if (v4 >= 36)
  {
    ssize_t v7 = &v6[v4];
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 98, v4 - 35);
      if (!v9) {
        break;
      }
      long long v10 = v9;
      if (!memcmp(v9, "b5427173-7342-4a02-b223-56969d089ca1", 0x24uLL))
      {
        if (v10 != v7 && v10 - v6 != -1)
        {
          sub_100015438(&__p, "Count");
          unsigned int v21 = 0;
          int v11 = sub_100048A84((char *)(a2 + 56), (const void **)&__p, &v21);
          v25[0] = 5;
          uint64_t v26 = (uint64_t *)v11;
          sub_100016EAC((uint64_t)v25);
          sub_100016EAC((uint64_t)v25);
          uint64_t v12 = sub_10000D104((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), "Total_CA_Heartbeats");
          sub_100016EAC((uint64_t)v25);
          unsigned __int8 v13 = *(unsigned char *)v12;
          *(unsigned char *)uint64_t v12 = v25[0];
          v25[0] = v13;
          uint64_t v14 = (uint64_t *)v12[1];
          v12[1] = (uint64_t)v26;
          uint64_t v26 = v14;
          sub_100016EAC((uint64_t)v12);
          sub_100016EAC((uint64_t)v25);
          sub_100016B28(&v26, v25[0]);
          if (v24 < 0) {
            operator delete(__p);
          }
          sub_10001C968(*(void *)(a1 + 56), (uint64_t)"%Y-%m-%dT%TZ");
          sub_10001C898((uint64_t)v19, (uint64_t)&__p);
          uint64_t v15 = sub_10000D104((unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), "datestamp");
          sub_100016EAC((uint64_t)v19);
          unsigned __int8 v16 = *(unsigned char *)v15;
          *(unsigned char *)uint64_t v15 = v19[0];
          v19[0] = v16;
          unsigned int v17 = (uint64_t *)v15[1];
          v15[1] = (uint64_t)v20;
          int v20 = v17;
          sub_100016EAC((uint64_t)v15);
          sub_100016EAC((uint64_t)v19);
          sub_100016B28(&v20, v19[0]);
          if (v24 < 0) {
            operator delete(__p);
          }
        }
        break;
      }
      uint64_t v8 = v10 + 1;
      uint64_t v4 = v7 - (v10 + 1);
    }
    while (v4 >= 36);
  }
  sub_10006CD84(a2, (uint64_t)&__p);
  sub_10006C7E8(v18, (uint64_t)&__p, *(_DWORD *)(a1 + 64));
  sub_100016EAC((uint64_t)&__p);
  sub_100016B28(&v23, __p);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_10006CD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10006CD84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  sub_10001200C(a2, 0, 0, 0, 1);
  sub_1000168C0((uint64_t)v63, a1 + 8);
  uint64_t v4 = sub_10000D104((unsigned __int8 *)a2, "name");
  sub_100016EAC((uint64_t)v63);
  char v5 = *(unsigned char *)v4;
  *(unsigned char *)uint64_t v4 = v63[0];
  v63[0] = v5;
  ssize_t v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v64;
  unint64_t v64 = v6;
  sub_100016EAC((uint64_t)v4);
  sub_100016EAC((uint64_t)v63);
  sub_100016B28(&v64, v63[0]);
  sub_1000168C0((uint64_t)v61, a1 + 32);
  ssize_t v7 = sub_10000D104((unsigned __int8 *)a2, "uuid");
  sub_100016EAC((uint64_t)v61);
  char v8 = *(unsigned char *)v7;
  *(unsigned char *)ssize_t v7 = v61[0];
  v61[0] = v8;
  uint64_t v9 = (uint64_t *)v7[1];
  v7[1] = (uint64_t)v62;
  long long v62 = v9;
  sub_100016EAC((uint64_t)v7);
  sub_100016EAC((uint64_t)v61);
  sub_100016B28(&v62, v61[0]);
  sub_100016A10((uint64_t)v59, a1 + 56);
  long long v10 = sub_10000D104((unsigned __int8 *)a2, "message");
  sub_100016EAC((uint64_t)v59);
  char v11 = *(unsigned char *)v10;
  *(unsigned char *)long long v10 = v59[0];
  v59[0] = v11;
  uint64_t v12 = (uint64_t *)v10[1];
  v10[1] = (uint64_t)v60;
  long long v60 = v12;
  sub_100016EAC((uint64_t)v10);
  sub_100016EAC((uint64_t)v59);
  sub_100016B28(&v60, v59[0]);
  unsigned __int8 v13 = *(uint64_t **)(a1 + 128);
  v57[0] = 7;
  long long v58 = v13;
  sub_100016EAC((uint64_t)v57);
  sub_100016EAC((uint64_t)v57);
  uint64_t v14 = sub_10000D104((unsigned __int8 *)a2, "sampling");
  sub_100016EAC((uint64_t)v57);
  unsigned __int8 v15 = *(unsigned char *)v14;
  *(unsigned char *)uint64_t v14 = v57[0];
  v57[0] = v15;
  unsigned __int8 v16 = (uint64_t *)v14[1];
  v14[1] = (uint64_t)v58;
  long long v58 = v16;
  sub_100016EAC((uint64_t)v14);
  sub_100016EAC((uint64_t)v57);
  sub_100016B28(&v58, v57[0]);
  unsigned int v17 = (uint64_t *)*(unsigned int *)(a1 + 120);
  if (v17 && *(_DWORD *)a1 == 2)
  {
    v55[0] = 6;
    unint64_t v56 = v17;
    sub_100016EAC((uint64_t)v55);
    sub_100016EAC((uint64_t)v55);
    uint64_t v18 = sub_10000D104((unsigned __int8 *)a2, "eventCount");
    sub_100016EAC((uint64_t)v55);
    unsigned __int8 v19 = *(unsigned char *)v18;
    *(unsigned char *)uint64_t v18 = v55[0];
    v55[0] = v19;
    int v20 = (uint64_t *)v18[1];
    v18[1] = (uint64_t)v56;
    unint64_t v56 = v20;
    sub_100016EAC((uint64_t)v18);
    sub_100016EAC((uint64_t)v55);
    sub_100016B28(&v56, v55[0]);
  }
  unsigned int v21 = (uint64_t *)*(unsigned __int8 *)(a1 + 136);
  if (*(unsigned char *)(a1 + 136))
  {
    v53[0] = 4;
    long long v54 = v21;
    sub_100016EAC((uint64_t)v53);
    sub_100016EAC((uint64_t)v53);
    uint64_t v22 = sub_10000D104((unsigned __int8 *)a2, "budgeted");
    sub_100016EAC((uint64_t)v53);
    unsigned __int8 v23 = *(unsigned char *)v22;
    *(unsigned char *)uint64_t v22 = v53[0];
    v53[0] = v23;
    char v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v54;
    long long v54 = v24;
    sub_100016EAC((uint64_t)v22);
    sub_100016EAC((uint64_t)v53);
    sub_100016B28(&v54, v53[0]);
  }
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(void *)(a1 + 96)) {
        goto LABEL_12;
      }
    }
    else if (!*(unsigned char *)(a1 + 111))
    {
      goto LABEL_12;
    }
    sub_1000168C0((uint64_t)v51, a1 + 88);
    unsigned __int8 v25 = sub_10000D104((unsigned __int8 *)a2, "deviceId");
    sub_100016EAC((uint64_t)v51);
    char v26 = *(unsigned char *)v25;
    *(unsigned char *)unsigned __int8 v25 = v51[0];
    v51[0] = v26;
    unint64_t v27 = (uint64_t *)v25[1];
    v25[1] = (uint64_t)v52;
    long long v52 = v27;
    sub_100016EAC((uint64_t)v25);
    sub_100016EAC((uint64_t)v51);
    sub_100016B28(&v52, v51[0]);
  }
LABEL_12:
  unsigned int v28 = *(_DWORD *)(a1 + 72) - 1;
  if (v28 > 2) {
    unsigned __int8 v29 = "Daily";
  }
  else {
    unsigned __int8 v29 = off_1001545D0[v28];
  }
  sub_100015438(&v69, v29);
  sub_10001C898((uint64_t)v49, (uint64_t)&v69);
  id v30 = sub_10000D104((unsigned __int8 *)a2, "aggregationPeriod");
  sub_100016EAC((uint64_t)v49);
  char v31 = *(unsigned char *)v30;
  *(unsigned char *)id v30 = v49[0];
  v49[0] = v31;
  int v32 = (uint64_t *)v30[1];
  v30[1] = (uint64_t)v50;
  std::chrono::system_clock::time_point v50 = v32;
  sub_100016EAC((uint64_t)v30);
  sub_100016EAC((uint64_t)v49);
  sub_100016B28(&v50, v49[0]);
  if (SBYTE7(v70) < 0) {
    operator delete((void *)v69);
  }
  if (*(_DWORD *)(a1 + 72))
  {
    sub_10005CE6C((const std::chrono::system_clock::time_point *)(a1 + 80));
    sub_10001C898((uint64_t)v47, (uint64_t)&v69);
    long long v33 = sub_10000D104((unsigned __int8 *)a2, "aggregationPeriodStartTimestamp");
    sub_100016EAC((uint64_t)v47);
    char v34 = *(unsigned char *)v33;
    *(unsigned char *)long long v33 = v47[0];
    v47[0] = v34;
    long long v35 = (uint64_t *)v33[1];
    v33[1] = (uint64_t)v48;
    unint64_t v48 = v35;
    sub_100016EAC((uint64_t)v33);
    sub_100016EAC((uint64_t)v47);
    sub_100016B28(&v48, v47[0]);
    if (SBYTE7(v70) < 0) {
      operator delete((void *)v69);
    }
  }
  v36.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v37 = *(_DWORD *)(a1 + 72);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = *(void *)(a1 + 80);
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v70 = v39;
  long long v71 = v39;
  long long v69 = v39;
  sub_1000576DC(v38, (uint64_t)&v69);
  switch(v37)
  {
    case 0:
      long long v65 = v69;
      long long v66 = v70;
      long long v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_100057760((uint64_t)&v65).__d_.__rep_;
      break;
    case 1:
      long long v65 = v69;
      long long v66 = v70;
      long long v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_1000577EC((uint64_t)&v65).__d_.__rep_;
      break;
    case 2:
      long long v65 = v69;
      long long v66 = v70;
      long long v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_1000578BC((uint64_t)&v65).__d_.__rep_;
      break;
    case 3:
      long long v65 = v69;
      long long v66 = v70;
      long long v67 = v71;
      unint64_t v68 = v72;
      v40.__d_.__rep_ = sub_100057964((uint64_t)&v65).__d_.__rep_;
      break;
    default:
      v40.__d_.__rep_ = 0;
      break;
  }
  if (v36.__d_.__rep_ < v40.__d_.__rep_) {
    v40.__d_.__rep_ = v36.__d_.__rep_;
  }
  unint64_t v41 = (uint64_t *)sub_1000576A0(v40.__d_.__rep_, *(void *)(a1 + 80));
  v45[0] = 6;
  long long v46 = v41;
  sub_100016EAC((uint64_t)v45);
  sub_100016EAC((uint64_t)v45);
  id v42 = sub_10000D104((unsigned __int8 *)a2, "numDaysAggregated");
  sub_100016EAC((uint64_t)v45);
  unsigned __int8 v43 = *(unsigned char *)v42;
  *(unsigned char *)id v42 = v45[0];
  v45[0] = v43;
  long long v44 = (uint64_t *)v42[1];
  v42[1] = (uint64_t)v46;
  long long v46 = v44;
  sub_100016EAC((uint64_t)v42);
  sub_100016EAC((uint64_t)v45);
  sub_100016B28(&v46, v45[0]);
}

void sub_10006D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100028D64((uint64_t **)va);
  sub_100028D64(v11);
  _Unwind_Resume(a1);
}

void *sub_10006D4FC@<X0>(void *a1@<X8>)
{
  void v2[3] = 0;
  sub_100056A30((uint64_t)"{\"_marker\":\"<end-of-file>\"}", (uint64_t)"", (uint64_t)v2, 1, a1);
  return sub_10000DE9C(v2);
}

void sub_10006D570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000DE9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D584(uint64_t a1, uint64_t a2)
{
  return sub_100016A10(a1 + 64, a2 + 64);
}

void sub_10006D590(uint64_t a1)
{
  sub_100016EAC(a1 + 64);
  int v2 = *(unsigned __int8 *)(a1 + 64);

  sub_100016B28((uint64_t **)(a1 + 72), v2);
}

uint64_t sub_10006D5D0(uint64_t a1, uint64_t a2)
{
  return sub_100016A10(a1 + 56, a2 + 56);
}

void sub_10006D5DC(uint64_t a1)
{
  sub_100016EAC(a1 + 56);
  int v2 = *(unsigned __int8 *)(a1 + 56);

  sub_100016B28((uint64_t **)(a1 + 64), v2);
}

void sub_10006D61C(uint64_t a1, uint64_t a2)
{
  id v3 = dispatch_get_global_queue(0, 0);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100017424(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  sub_100016A10((uint64_t)v8, a2 + 40);
  id v4 = v3;
  operator new();
}

void sub_10006D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_10006D7F0(uint64_t a1, uint64_t a2)
{
  int v2 = (unsigned __int8 *)(a2 + 40);
  id v3 = qword_10015EF70;
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[DefaultSink] Sending debug heartbeat event to RTCReporting", (uint8_t *)__p, 2u);
    }
    sub_100015438(__p, "analyticsd_hb");
    id v4 = sub_10007193C(v2);
    sub_1000B6DA8((uint64_t)__p, 1001, 1002, v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_10015EF70, OS_LOG_TYPE_ERROR))
  {
    sub_1000FB2E0(v3);
  }
}

void sub_10006D8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_10006D910(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_10006D958(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)sub_100029400((char *)a1);
    sub_100015438(&v14, v9);
    long long v10 = std::string::insert(&v14, 0, "cannot use insert() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v10->__r_.__value_.__r.__words[2];
    long long v15 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(309, (uint64_t)&v15, exception);
  }
  if (*a2 != *a3)
  {
    uint64_t v12 = __cxa_allocate_exception(0x20uLL);
    sub_100015438(&v15, "iterators do not fit");
    sub_10002B4EC(210, (uint64_t)&v15, v12);
  }
  if (*(unsigned char *)*a2 != 1)
  {
    unsigned __int8 v13 = __cxa_allocate_exception(0x20uLL);
    sub_100015438(&v15, "iterators first and last must point to objects");
    sub_10002B4EC(202, (uint64_t)&v15, v13);
  }
  id v4 = *(uint64_t **)(a1 + 8);
  char v5 = (const void **)a2[1];
  char v6 = (const void ***)a3[1];

  return sub_100018668(v4, v5, v6);
}

void sub_10006DB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006DBA8(uint64_t a1)
{
  return a1;
}

void sub_10006DBD4(uint64_t a1)
{
  operator delete();
}

uint64_t sub_10006DC20()
{
  return 0;
}

id sub_10006DC28(uint64_t a1, void *a2)
{
  *a2 = off_1001542B0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t sub_10006DC70(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return _objc_release_x1();
}

uint64_t sub_10006DC80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_10006DC90(uint64_t a1, uint64_t a2)
{
  if (sub_10002AA08(a2, (uint64_t)&off_100154320)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10006DCD0()
{
  return &off_100154320;
}

void *sub_10006DCDC(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10006DD60(uint64_t a1)
{
  return a1;
}

void sub_10006DD8C(uint64_t a1)
{
  operator delete();
}

uint64_t sub_10006DDD8()
{
  return 0;
}

id sub_10006DDE0(uint64_t a1, void *a2)
{
  *a2 = off_100154340;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t sub_10006DE28(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return _objc_release_x1();
}

uint64_t sub_10006DE38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_10006DE48(uint64_t a1, uint64_t a2)
{
  if (sub_10002AA08(a2, (uint64_t)&off_1001543B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10006DE88()
{
  return &off_1001543B0;
}

uint64_t sub_10006DE94(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_10006DEE0(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_10006DEE0(char *a1)
{
  int v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_10006DF18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10006DF2C(uint64_t *result)
{
  uint64_t v1 = *result;
  *id result = 0;
  if (v1)
  {
    sub_100016EAC(v1 + 40);
    sub_100016B28((uint64_t **)(v1 + 48), *(unsigned __int8 *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10006DF98(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = (unsigned __int8 *)(a1 + 40);
  uint64_t v14 = a1;
  __p[0] = "Total_CA_Heartbeats";
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v22 = v3;
  long long v23 = v3;
  sub_1000135DC(a1 + 40, (const std::string::value_type **)__p, (uint64_t)&v22);
  unsigned int v17 = v2;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0x8000000000000000;
  sub_100013648(&v17);
  if (sub_100013964((unsigned __int8 **)&v22, &v17))
  {
    id v4 = (unsigned char *)sub_1000155C8();
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    id v4 = sub_100013AAC((unsigned __int8 **)&v22);
  }
  if (*v4 - 5 <= 2)
  {
    LODWORD(v22) = -1431655766;
    sub_10002F58C(v4, (unsigned int *)&v22);
    uint64_t v5 = v22;
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v5 = 0;
LABEL_8:
  uint64_t v6 = *(void *)(v1 + 32);
  unsigned int v17 = (unsigned __int8 *)OSAStateMonitorEventCALogWrittenStartTimestampKey;
  sub_10005CE6C((const std::chrono::system_clock::time_point *)(v1 + 24));
  if (v16 >= 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = (void **)__p[0];
  }
  char v8 = +[NSString stringWithUTF8String:v7];
  *(void *)&long long v22 = v8;
  uint64_t v18 = OSAStateMonitorEventCALogWrittenTotalHeartbeatCountKey;
  uint64_t v9 = +[NSNumber numberWithLongLong:v5];
  *((void *)&v22 + 1) = v9;
  uint64_t v19 = OSAStateMonitorEventCALogWrittenEndTimestampKey;
  long long v10 = +[NSDate dateWithTimeIntervalSince1970:(double)(v6 / 1000000)];
  *(void *)&long long v23 = v10;
  uint64_t v20 = OSAStateMonitorEventCALogWrittenLogPathKey;
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v1 = *(void *)v1;
  }
  long long v11 = +[NSString stringWithUTF8String:v1];
  *((void *)&v23 + 1) = v11;
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v17 count:4];
  +[OSAStateMonitor recordEvent:OSAStateMonitorEventCALogWritten with:v12];

  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return sub_10006DF2C(&v14);
}

void sub_10006E200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unint64_t v21 = v17;

  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10006DF2C(&a10);
  _Unwind_Resume(a1);
}

void sub_10006E278()
{
}

__n128 sub_10006E28C(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = off_1001543D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10006E2D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001543D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10006E308(uint64_t a1, char *a2, void *a3)
{
}

uint64_t sub_10006E314(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10006E354()
{
}

void sub_10006E360(uint64_t a1, char *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 16);
  if (**(unsigned char **)a1 || **(void **)(a1 + 8) >= *a4)
  {
    memset(v18, 170, sizeof(v18));
    double v19 = NAN;
    uint64_t v8 = *(void *)(v7 + 32);
    if (a2[23] < 0) {
      a2 = *(char **)a2;
    }
    sub_100015438(__p, a2);
    (*(void (**)(void **__return_ptr, uint64_t, unsigned char *))(*(void *)v8 + 224))(v18, v8, __p);
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v9 = (void *)HIBYTE(v18[2]);
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v9 = v18[1];
    }
    long long v10 = qword_10015EF48;
    if (v9)
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_DEBUG))
      {
        if (v5[23] >= 0) {
          uint64_t v14 = v5;
        }
        else {
          uint64_t v14 = *(char **)v5;
        }
        long long v15 = (void *)HIBYTE(v18[2]);
        if (SHIBYTE(v18[2]) < 0) {
          long long v15 = v18[1];
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v14;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[DefaultSink] Retrieved transform definition for %{public}s with %zu bytes", __p, 0x16u);
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
      unsigned int v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v23 = 0;
      sub_1000062F0((uint64_t)v18, (uint64_t)__p, 1, &v16);
      sub_10000DE9C(__p);
      sub_100022410(*(unsigned __int8 ***)v7, (uint64_t)&v16, a3, __p, v19);
      uint64_t v12 = *(void *)__p;
      long long v11 = *(std::__shared_weak_count **)&__p[8];
      if (*(void *)__p)
      {
        sub_10006E6D8((uint64_t)v20, *(void *)(a1 + 24));
        sub_10006E770((uint64_t)__p, (uint64_t)v20);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 48))(v12, __p);
        sub_10006EA7C(__p);
        sub_10006DCDC(v20);
      }
      sub_100016EAC((uint64_t)&v16);
      sub_100016B28(&v17, v16);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_INFO))
      {
        if (v5[23] >= 0) {
          unsigned __int8 v13 = v5;
        }
        else {
          unsigned __int8 v13 = *(char **)v5;
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[DefaultSink] WARNING: found transform state for %s but no definition in config. Is the correct config active?", __p, 0xCu);
      }
      long long v11 = 0;
    }
    if (SHIBYTE(v18[2]) < 0) {
      operator delete(v18[0]);
    }
    if (v11) {
      sub_1000147D8(v11);
    }
  }
}

void sub_10006E628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10006EA7C(&a24);
  sub_10006DCDC(&a20);
  sub_100028D64(&a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v24) {
    sub_1000147D8(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006E6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10006E770(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (*(void *)(a2 + 24))
  {
    id v4 = operator new(0x28uLL);
    *id v4 = off_100154450;
    sub_10006E9FC((uint64_t)(v4 + 1), a2);
    *(void *)(a1 + 24) = v4;
  }
  return a1;
}

void *sub_10006E7E0(void *a1)
{
  *a1 = off_100154450;
  sub_10006DCDC(a1 + 1);
  return a1;
}

void sub_10006E824(void *a1)
{
  *a1 = off_100154450;
  sub_10006DCDC(a1 + 1);

  operator delete();
}

void *sub_10006E888(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = off_100154450;
  sub_10006E6D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10006E8DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E8F0(uint64_t a1, void *a2)
{
  *a2 = off_100154450;
  return sub_10006E6D8((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10006E91C(uint64_t a1)
{
  return sub_10006DCDC((void *)(a1 + 8));
}

void sub_10006E924(void *a1)
{
  sub_10006DCDC(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10006E960(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_100027A78();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10006E9B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10006E9F0()
{
}

uint64_t sub_10006E9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_10006EA7C(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10006EB00(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10006EB88()
{
}

void *sub_10006EB9C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100154550;
  result[1] = v3;
  return result;
}

uint64_t sub_10006EBE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100154550;
  a2[1] = v2;
  return result;
}

void sub_10006EC10(uint64_t a1, char *a2, void *a3, void *a4)
{
}

uint64_t sub_10006EC18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10006EC58()
{
}

void *sub_10006EC64(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

os_log_t sub_10006ECE8()
{
  qword_10015ED90 = (uint64_t)os_log_create("com.apple.CoreAnalytics.Shared.critical", "config");
  qword_10015ED98 = (uint64_t)os_log_create("com.apple.CoreAnalytics.Shared.critical", "evaluator");
  os_log_t result = os_log_create("com.apple.CoreAnalytics.Shared.critical", "utils");
  qword_10015EDA0 = (uint64_t)result;
  return result;
}

void sub_10006ED50(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8 = a6;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_1000700B8(a1, &v8, a2, a3, a4, &v7);
  if ((*(unsigned int (**)(void))(*(void *)v7 + 56))(v7))
  {
    *(_OWORD *)a5 = v7;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    if (*((void *)&v7 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

uint64_t sub_10006EE18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v8 = sub_1000236A4(a1, a2, a3, a4, a6);
  *(void *)uint64_t v8 = off_100154600;
  *(unsigned char *)(v8 + 12sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(unsigned char *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 16sub_100027DA4((uint64_t)&a9, 0) = *a5;
  uint64_t v9 = a5[1];
  *(void *)(v8 + 168) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 176) = sub_10006EF0C(a1);
  return a1;
}

void sub_10006EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  long long v11 = *(std::__shared_weak_count **)(v9 + 168);
  if (v11) {
    sub_1000147D8(v11);
  }
  if (*(unsigned char *)(v9 + 144)) {
    sub_100016F68(&a9);
  }
  sub_10002094C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006EF0C(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v2;
  v14[1] = v2;
  sub_1000239E4(a1 + 56, "reservoirSize", (uint64_t)v14);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[0] = v3;
  v12[1] = v3;
  sub_1000136C8(v12, v1);
  sub_100013648((unsigned __int8 **)v12);
  if (!sub_100013964((unsigned __int8 **)v14, (unsigned __int8 **)v12)
    && *sub_100063118((unsigned __int8 **)v14) - 5 <= 1)
  {
    uint64_t v4 = sub_100013AAC((unsigned __int8 **)v14);
    LOBYTE(v1sub_100027DA4((uint64_t)&a9, 0) = 5;
    long long v11 = 0;
    sub_100016EAC((uint64_t)&v10);
    sub_100016EAC((uint64_t)&v10);
    if (sub_10001F364(&v10, v4))
    {
      uint64_t v5 = (double *)sub_100013AAC((unsigned __int8 **)v14);
      v8[0] = 5;
      uint64_t v9 = 0xFFFFLL;
      sub_100016EAC((uint64_t)v8);
      sub_100016EAC((uint64_t)v8);
      LOBYTE(v5) = sub_10001F364(v5, v8);
      sub_100016EAC((uint64_t)v8);
      sub_100016B28((uint64_t **)&v9, v8[0]);
      sub_100016EAC((uint64_t)&v10);
      sub_100016B28(&v11, LOBYTE(v10));
      if (v5)
      {
        uint64_t v6 = sub_100013AAC((unsigned __int8 **)v14);
        LOWORD(v12[0]) = -21846;
        sub_100070658((char *)v6, v12);
        return LOWORD(v12[0]);
      }
    }
    else
    {
      sub_100016EAC((uint64_t)&v10);
      sub_100016B28(&v11, LOBYTE(v10));
    }
  }
  return 10;
}

void sub_10006F0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F0D8()
{
  return 2;
}

BOOL sub_10006F100(uint64_t a1)
{
  BOOL result = sub_1000233E8(a1);
  if (result)
  {
    uint64_t v8 = "fields";
    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = v3;
    v6[1] = v3;
    sub_1000135DC(a1 + 56, &v8, (uint64_t)v6);
    v5[0] = (unsigned __int8 *)(a1 + 56);
    memset(&v5[1], 0, 24);
    void v5[4] = (unsigned __int8 *)0x8000000000000000;
    sub_100013648(v5);
    if (sub_100013964((unsigned __int8 **)v6, v5))
    {
      uint64_t v4 = (unsigned char *)sub_1000155C8();
      if (!v4) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v4 = sub_100013AAC((unsigned __int8 **)v6);
    }
    if (*v4 == 2)
    {
LABEL_8:
      *(void *)(a1 + 152) = v4;
      return v4 != 0;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  return result;
}

void sub_10006F1E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10006F1F0(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    return 1;
  }

  return sub_10006F25C(a1);
}

uint64_t sub_10006F25C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("persistToStore", "ReservoirTransform.cpp", 74, "initialized()");
  }
  unsigned __int8 v5 = 0;
  sub_100015438(__p, "persist to store");
  v6[0] = off_1001546D8;
  v6[1] = a1;
  _OWORD v6[2] = &v5;
  void v6[3] = v6;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v6);
  sub_10001266C(v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_10006F364(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10006F370(void *a1@<X0>, void *a2@<X8>)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    __assert_rtn("serialize", "ReservoirTransform.cpp", 89, "initialized()");
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_10001200C((uint64_t)&v6, 0, 0, 0, 2);
  uint64_t v4 = a1[15];
  for (uint64_t i = a1[16]; v4 != i; v4 += 16)
  {
    sub_100016A10((uint64_t)v8, v4);
    sub_1000210E0((uint64_t)&v6, (uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
  }
  sub_100011C74((uint64_t)&v6, a2);
  sub_100016EAC((uint64_t)&v6);
  sub_100016B28(&v7, v6);
}

void sub_10006F4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_10006F4DC(uint64_t a1, long long *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (!sub_100012B9C((_DWORD *)a1) && (sub_100012D20(a1, *(unsigned char **)(a1 + 24), a2) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    unsigned int v4 = *(_DWORD *)(a1 + 108);
    if (*(unsigned char *)(a1 + 112) && v4 > *(unsigned __int16 *)(a1 + 176))
    {
      unsigned int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 16))(*(void *)(a1 + 160), 0);
      if (v5 >= *(unsigned __int16 *)(a1 + 176)) {
        return;
      }
    }
    else
    {
      LOWORD(v5) = v4 - 1;
    }
    sub_10006F5E8((uint64_t *)a1, a2, (unsigned __int16)v5);
  }
}

void sub_10006F5E8(uint64_t *a1, long long *a2, unsigned int a3)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1) & 1) == 0) {
    sub_1000FB350();
  }
  memset(v15, 170, 24);
  sub_100011C74(a1[19], v14);
  sub_100011AA4((uint64_t)a1, (uint64_t *)v14, a2, v15);
  unint64_t v16 = v14;
  sub_100016F68((void ***)&v16);
  sub_10006F814(a1, (uint64_t *)v15, a3);
  unint64_t v6 = a1[16];
  if (a3 >= (unint64_t)((uint64_t)(v6 - a1[15]) >> 4))
  {
    if (v6 >= a1[17])
    {
      uint64_t v11 = sub_100070BB8(a1 + 15, (uint64_t)v15);
    }
    else
    {
      sub_100070B6C((uint64_t)(a1 + 15), (uint64_t)v15);
      uint64_t v11 = v6 + 16;
    }
    a1[16] = v11;
  }
  else
  {
    v12[0] = 2;
    unint64_t v7 = (uint64_t *)operator new(0x18uLL);
    *(_OWORD *)unint64_t v7 = v15[0];
    _OWORD v7[2] = *(void *)&v15[1];
    memset(v15, 0, 24);
    unint64_t v13 = v7;
    sub_100016EAC((uint64_t)v12);
    sub_100016EAC((uint64_t)v12);
    uint64_t v8 = a1[15] + 16 * a3;
    sub_100016EAC((uint64_t)v12);
    unsigned __int8 v9 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = v12[0];
    v12[0] = v9;
    double v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + 8) = v13;
    unint64_t v13 = v10;
    sub_100016EAC(v8);
    sub_100016EAC((uint64_t)v12);
    sub_100016B28(&v13, v12[0]);
  }
  sub_1000264D8((uint64_t)a1);
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  v14[0] = (void **)v15;
  sub_100016F68(v14);
}

void sub_10006F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100016F68((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F814(void *a1, uint64_t *a2, unsigned int a3)
{
  if (((*(uint64_t (**)(void *))(*a1 + 72))(a1) & 1) == 0) {
    sub_1000FB37C();
  }
  sub_10001F9A0((uint64_t)v9, a2);
  uint64_t v6 = sub_100026934(v9);
  sub_100016EAC((uint64_t)v9);
  sub_100016B28(&v10, v9[0]);
  uint64_t v7 = a1[15];
  if (a3 < (unint64_t)((a1[16] - v7) >> 4)) {
    v6 -= sub_100026934((unsigned char *)(v7 + 16 * a3));
  }
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 80))(a1, v6);
}

void sub_10006F924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_10006F95C(uint64_t a1)
{
  sub_1000A54CC(a1);
  if (*(unsigned char *)(a1 + 144))
  {
    long long v2 = (void **)(a1 + 120);
    sub_100016F68(&v2);
    *(unsigned char *)(a1 + 144) = 0;
  }
}

void sub_10006F9D0(uint64_t a1)
{
  sub_1000126F0(a1);
  sub_100015438(__p, "initializing samples");
  v4[0] = off_100154758;
  v4[1] = a1;
  v4[3] = v4;
  sub_1000127AC(a1, (uint64_t)__p, (uint64_t)v4);
  sub_10001266C(v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10006FA84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10006FA90(uint64_t a1)
{
  BOOL result = sub_100012C5C(a1);
  if (result) {
    return *(unsigned char *)(a1 + 144) != 0;
  }
  return result;
}

void sub_10006FAC4(void *a1, uint64_t a2)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  memset(v19, 170, sizeof(v19));
  sub_1000A6B60(a1[19], (uint64_t)v19);
  char v3 = (unsigned __int8 *)a1[15];
  unsigned int v4 = (unsigned __int8 *)a1[16];
  if (v3 != v4)
  {
    while (*v3 != 2)
    {
LABEL_22:
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_23;
      }
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_10001200C((uint64_t)&v17, 0, 0, 0, 1);
    int v5 = *v3;
    if (*v3)
    {
      if (v5 == 1)
      {
        uint64_t v6 = *(void *)(*((void *)v3 + 1) + 16);
        if (!v6) {
          goto LABEL_13;
        }
      }
      else if (v5 == 2)
      {
        uint64_t v6 = (uint64_t)(*(void *)(*((void *)v3 + 1) + 8) - **((void **)v3 + 1)) >> 4;
        if (!v6) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v6 = 1;
      }
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v8 = sub_100012450((uint64_t)v3, i);
        sub_100016A10((uint64_t)v15, v8);
        unsigned __int8 v9 = sub_10000D104((unsigned __int8 *)&v17, *((char **)v19[0] + i));
        sub_100016EAC((uint64_t)v15);
        char v10 = *(unsigned char *)v9;
        *(unsigned char *)unsigned __int8 v9 = v15[0];
        v15[0] = v10;
        uint64_t v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v16;
        unint64_t v16 = v11;
        sub_100016EAC((uint64_t)v9);
        sub_100016EAC((uint64_t)v15);
        sub_100016B28(&v16, v15[0]);
      }
    }
LABEL_13:
    int v12 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    sub_1000A5E7C((uint64_t)a1, v12, (uint64_t)&v17, (uint64_t)v20);
    uint64_t v13 = *(void *)(a2 + 24);
    if (!v13) {
      sub_100027A78();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 48))(v13, v20);
    if (v28 && v27 < 0) {
      operator delete(v26[3]);
    }
    sub_100016EAC((uint64_t)v25);
    sub_100016B28(v26, v25[0]);
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    sub_100016EAC((uint64_t)&v17);
    sub_100016B28(&v18, v17);
    goto LABEL_22;
  }
LABEL_23:
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_10006FD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_10006FDE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_100016EAC(a1 + 56);
  sub_100016B28((uint64_t **)(a1 + 64), *(unsigned __int8 *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10006FE54(uint64_t a1)
{
  *(void *)a1 = off_100154600;
  long long v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    sub_1000147D8(v2);
  }
  if (*(unsigned char *)(a1 + 144))
  {
    unsigned int v4 = (void **)(a1 + 120);
    sub_100016F68(&v4);
  }
  sub_10002094C(a1);
  return a1;
}

void sub_10006FEF4(uint64_t a1)
{
  *(void *)a1 = off_100154600;
  long long v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    sub_1000147D8(v2);
  }
  if (*(unsigned char *)(a1 + 144))
  {
    char v3 = (void **)(a1 + 120);
    sub_100016F68(&v3);
  }
  sub_10002094C(a1);
  operator delete();
}

uint64_t sub_10006FFA4(void *a1)
{
  if (!*a1) {
    sub_1000FB3A8();
  }
  if (*(unsigned char *)*a1 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_100015438(v3, "cannot use key() for non-object iterators");
    sub_10002B4EC(207, (uint64_t)v3, exception);
  }
  return a1[1] + 32;
}

void sub_100070078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_1000700B8(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0xD0uLL);
  sub_10007015C(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1000106D4((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_100070148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10007015C(void *a1, uint64_t a2, double *a3, void *a4, uint64_t a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100154688;
  char v8 = -86;
  sub_1000702AC((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1000701FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100070210(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100154688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100070230(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100154688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100070284(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000702AC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, uint64_t a6, void *a7)
{
  double v7 = *a4;
  char v8 = (std::__shared_weak_count *)a7[1];
  v9[0] = *a7;
  v9[1] = v8;
  *a7 = 0;
  a7[1] = 0;
  sub_10006EE18(a2, a3, a5, a6, v9, v7);
  if (v8)
  {
    sub_1000147D8(v8);
  }
}

void sub_100070368(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000147D8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4) {
    return 0;
  }
  uint64_t v5 = a3;
  while (a1 != a2 && (sub_10001F364(a1, v5) & 1) == 0)
  {
    char v8 = sub_10001F364(v5, a1);
    uint64_t result = 0;
    if ((v8 & 1) == 0)
    {
      a1 += 16;
      v5 += 16;
      if (v5 != a4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

uint64_t sub_100070410(void *a1, void *a2, void *a3, void *a4)
{
  if (a3 == a4) {
    return 0;
  }
  unsigned int v4 = a3;
  while (a1 != a2)
  {
    size_t v6 = *((unsigned __int8 *)v4 + 55);
    unsigned __int8 v7 = *((unsigned char *)a1 + 55);
    unsigned __int8 v40 = v7;
    size_t v44 = v7;
    unint64_t v45 = (const void *)a1[4];
    size_t v41 = v4[5];
    size_t v42 = a1[5];
    if ((v7 & 0x80u) == 0) {
      size_t v8 = *((unsigned __int8 *)a1 + 55);
    }
    else {
      size_t v8 = a1[5];
    }
    if ((v7 & 0x80u) == 0) {
      unsigned __int8 v9 = a1 + 4;
    }
    else {
      unsigned __int8 v9 = (const void *)a1[4];
    }
    if ((v6 & 0x80u) == 0) {
      size_t v10 = *((unsigned __int8 *)v4 + 55);
    }
    else {
      size_t v10 = v4[5];
    }
    unsigned __int8 v43 = (const void *)v4[4];
    if ((v6 & 0x80u) == 0) {
      uint64_t v11 = v4 + 4;
    }
    else {
      uint64_t v11 = (const void *)v4[4];
    }
    if (v10 >= v8) {
      size_t v12 = v8;
    }
    else {
      size_t v12 = v10;
    }
    int v13 = memcmp(v9, v11, v12);
    BOOL v14 = v8 < v10;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    if (v14) {
      break;
    }
    int v15 = memcmp(v11, v9, v12);
    BOOL v16 = v10 < v8;
    if (v15) {
      BOOL v16 = v15 < 0;
    }
    if (v16)
    {
      size_t v18 = v44;
      unint64_t v17 = v45;
      size_t v20 = v42;
      double v19 = v43;
      size_t v21 = v41;
      unsigned __int8 v23 = v40;
      char v22 = v6;
    }
    else
    {
      if (sub_10001F364(a1 + 7, v4 + 7)) {
        return 1;
      }
      size_t v18 = *((unsigned __int8 *)a1 + 55);
      unint64_t v17 = (const void *)a1[4];
      size_t v20 = a1[5];
      size_t v6 = *((unsigned __int8 *)v4 + 55);
      double v19 = (const void *)v4[4];
      size_t v21 = v4[5];
      char v22 = *((unsigned char *)v4 + 55);
      unsigned __int8 v23 = *((unsigned char *)a1 + 55);
    }
    if (v22 >= 0)
    {
      char v24 = v4 + 4;
    }
    else
    {
      size_t v6 = v21;
      char v24 = v19;
    }
    if ((v23 & 0x80u) == 0) {
      size_t v25 = v18;
    }
    else {
      size_t v25 = v20;
    }
    if ((v23 & 0x80u) == 0) {
      char v26 = a1 + 4;
    }
    else {
      char v26 = v17;
    }
    if (v25 >= v6) {
      size_t v27 = v6;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v6 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29)
    {
      int v30 = memcmp(v26, v24, v27);
      BOOL v31 = v25 < v6;
      if (v30) {
        BOOL v31 = v30 < 0;
      }
      if (v31 || (sub_10001F364(v4 + 7, a1 + 7) & 1) == 0)
      {
        int v32 = (void *)a1[1];
        if (v32)
        {
          do
          {
            long long v33 = v32;
            int v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            long long v33 = (void *)a1[2];
            BOOL v34 = *v33 == (void)a1;
            a1 = v33;
          }
          while (!v34);
        }
        long long v35 = (void *)v4[1];
        if (v35)
        {
          do
          {
            std::chrono::system_clock::time_point v36 = v35;
            long long v35 = (void *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            std::chrono::system_clock::time_point v36 = (void *)v4[2];
            BOOL v34 = *v36 == (void)v4;
            unsigned int v4 = v36;
          }
          while (!v34);
        }
        a1 = v33;
        unsigned int v4 = v36;
        if (v36 != a4) {
          continue;
        }
      }
    }
    return 0;
  }
  return 1;
}

char *sub_100070658(char *result, _WORD *a2)
{
  long long v2 = result;
  switch(*result)
  {
    case 4:
      LOWORD(v3) = result[8];
      break;
    case 5:
    case 6:
      LOWORD(v3) = *((_WORD *)result + 4);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)sub_100029400(v2);
      sub_100015438(&v8, v5);
      size_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_100070788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1000707FC()
{
}

__n128 sub_100070810(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = off_1001546D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10007085C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001546D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10007088C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = sub_100024914(v2);
  memset(v15, 170, sizeof(v15));
  sub_10006F370((void *)v2, v15);
  if (v15[0] == v15[1])
  {
    long long v9 = qword_10015EF48;
    if (os_log_type_enabled((os_log_t)qword_10015EF48, OS_LOG_TYPE_ERROR))
    {
      sub_1000A5458(v2, &__p);
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (*(char *)(v3 + 23) >= 0) {
        uint64_t v11 = v3;
      }
      else {
        uint64_t v11 = *(void *)v3;
      }
      *(_DWORD *)int buf = 136446466;
      unint64_t v17 = p_p;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[%{public}sTransform] transform '%s' has no data to persist", buf, 0x16u);
      if (v14 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 40) + 72);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v6 = *(unsigned int *)(v2 + 100);
    uint64_t v7 = *(unsigned int *)(v2 + 108);
    uint64_t v8 = *(unsigned int *)(v2 + 80);
    sub_10001F9A0((uint64_t)&__p, v15);
    **(unsigned char **)(a1 + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v4 + 152))(v4, v5, v3, v6, v7, v8, v2 + 88, &__p);
    sub_100016EAC((uint64_t)&__p);
    sub_100016B28(&v13, __p);
  }
  std::string __p = v15;
  sub_100016F68((void ***)&__p);
}

void sub_100070A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100016F68(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100070ABC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100070AFC()
{
}

uint64_t sub_100070B08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  uint64_t v4 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 8) = v4;

  return sub_100016EAC(a1);
}

uint64_t sub_100070B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  sub_100070B08(v3, a2);
  uint64_t result = sub_100016EAC(v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_100070BB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100070BB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  std::string::size_type v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = v11;
  *(void *)&long long v16 = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  sub_100070B08(v11, a2);
  sub_100016EAC(v11);
  *(void *)&long long v16 = v16 + 16;
  sub_1000171E8(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100017390((uint64_t)&v15);
  return v13;
}

void sub_100070CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100070CDC()
{
}

void *sub_100070CF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100154758;
  result[1] = v3;
  return result;
}

uint64_t sub_100070D38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100154758;
  a2[1] = v2;
  return result;
}

void *sub_100070D64(void *result)
{
  uint64_t v1 = result[1];
  if (!*(unsigned char *)(v1 + 144))
  {
    v4[0] = 2;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v5 = sub_10001220C((uint64_t *)&v7, &v6);
    sub_100016EAC((uint64_t)v4);
    sub_100011C74((uint64_t)v4, &v8);
    LOBYTE(v9) = 1;
    sub_100070F28(v1 + 120, &v8);
    if ((_BYTE)v9)
    {
      uint64_t v7 = &v8;
      sub_100016F68((void ***)&v7);
    }
    sub_100016EAC((uint64_t)v4);
    sub_100016B28(&v5, v4[0]);
    uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 72);
    uint64_t v3 = sub_100024914(v1);
    v8.n128_u64[0] = (unint64_t)off_1001547C8;
    v8.n128_u64[1] = v1;
    unint64_t v9 = &v8;
    (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)v2 + 80))(v2, v3, &v8);
    return sub_100071270(&v8);
  }
  return result;
}

void sub_100070EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_100028DD8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070EDC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100070F1C()
{
}

__n128 sub_100070F28(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      sub_100012330((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v5 = (void **)a1;
    sub_100016F68(&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void sub_100070FFC()
{
}

void *sub_100071010(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001547C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100071058(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001547C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100071084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  unint64_t v5 = v4[16];
  if (v5 >= v4[17])
  {
    uint64_t result = sub_100071148(v4 + 15, a3);
  }
  else
  {
    *(unsigned char *)unint64_t v5 = *(unsigned char *)a3;
    *(void *)(v5 + 8) = *(void *)(a3 + 8);
    sub_100016EAC(a3);
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    sub_100016EAC(v5);
    uint64_t result = v5 + 16;
  }
  uint8_t v4[16] = result;
  return result;
}

uint64_t sub_1000710FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10007113C()
{
}

uint64_t sub_100071148(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_100028DEC();
  }
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  std::string::size_type v10 = (char *)sub_1000171B0(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = v11;
  *((void *)&v16 + 1) = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  sub_100016EAC(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC(v11);
  *(void *)&long long v16 = v11 + 16;
  sub_1000171E8(a1, &v15);
  uint64_t v13 = a1[1];
  sub_100017390((uint64_t)&v15);
  return v13;
}

void sub_10007125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100071270(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000712F4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1000712FC(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  if (a2 >= 0xB) {
    +[NSException raise:NSInvalidArgumentException format:@"Object exceeded the max depth"];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)[v5 UTF8String];
    if (!__p.__r_.__value_.__r.__words[0]) {
      +[NSException raise:NSInvalidArgumentException format:@"Invalid non-UTF8 character(s) in string value"];
    }
    sub_100030238(a3, &__p.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = v5;
    CFTypeID v7 = CFGetTypeID(v6);
    if (v7 == CFBooleanGetTypeID())
    {
      unsigned int v8 = [v6 BOOLValue];
      *(unsigned char *)a3 = 4;
      *(void *)(a3 + 8) = v8;
LABEL_40:
      sub_100016EAC(a3);
      sub_100016EAC(a3);

      goto LABEL_41;
    }
    id v9 = v6;
    int v10 = *(char *)[v9 objCType];
    if (v10 <= 80)
    {
      if (v10 > 72)
      {
        if (v10 == 73 || v10 == 76) {
          goto LABEL_38;
        }
        goto LABEL_42;
      }
      if (v10 != 66)
      {
        if (v10 == 67)
        {
LABEL_38:
          id v15 = [v9 unsignedLongLongValue];
          char v16 = 6;
          goto LABEL_39;
        }
LABEL_42:
        +[NSException raise:format:](NSException, "raise:format:", NSInvalidArgumentException, @"Invalid number type in JSON write (%c)", *(char *)[v9 objCType]);
        *(unsigned char *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        goto LABEL_40;
      }
    }
    else
    {
      if ((v10 - 99) > 0x10) {
        goto LABEL_36;
      }
      if (((1 << (v10 - 99)) & 0x14241) == 0)
      {
        if (v10 == 100)
        {
          [v9 doubleValue];
          double v18 = v17;
          if (fabs(v17) == INFINITY) {
            +[NSException raise:NSInvalidArgumentException format:@"Invalid number value (infinite) in JSON write"];
          }
          *(unsigned char *)a3 = 7;
          *(double *)(a3 + 8) = v18;
          goto LABEL_40;
        }
        if (v10 == 102)
        {
          [v9 floatValue];
          float v12 = v11;
          if (fabsf(v11) == INFINITY) {
            +[NSException raise:NSInvalidArgumentException format:@"Invalid number value (infinite) in JSON conversion"];
          }
          *(unsigned char *)a3 = 7;
          *(double *)(a3 + 8) = v12;
          goto LABEL_40;
        }
LABEL_36:
        if (v10 == 81 || v10 == 83) {
          goto LABEL_38;
        }
        goto LABEL_42;
      }
    }
    id v15 = [v9 longLongValue];
    char v16 = 5;
LABEL_39:
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    goto LABEL_40;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000723C0;
    v21[3] = &unk_100154858;
    v21[4] = &__p;
    char v22 = a2;
    [v5 enumerateKeysAndObjectsUsingBlock:v21];
    sub_1000727D8(a3, &__p);
    sub_10001700C((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      memset(&__p, 0, sizeof(__p));
      sub_1000170F0((uint64_t *)&__p, (unint64_t)[v5 count]);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      _OWORD v19[2] = sub_100072524;
      v19[3] = &unk_100154878;
      v19[4] = &__p;
      char v20 = a2;
      [v5 enumerateObjectsUsingBlock:v19];
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)a3 = 2;
      uint64_t v13 = (std::string *)operator new(0x18uLL);
      *uint64_t v13 = __p;
      memset(&__p, 0, sizeof(__p));
      *(void *)(a3 + 8) = v13;
      sub_100016EAC(a3);
      sub_100016EAC(a3);
      p_p = &__p;
      sub_100016F68((void ***)&p_p);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v14 = v5;
        sub_1000C2724((unsigned __int8 *)[v14 bytes], (uint64_t)objc_msgSend(v14, "length"), &__p);
        sub_10001C898(a3, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          +[NSException raise:NSInvalidArgumentException, @"Invalid type in JSON write (%@)", objc_opt_class() format];
        }
        *(unsigned char *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        sub_100016EAC(a3);
        sub_100016EAC(a3);
      }
    }
  }
LABEL_41:
}

void sub_1000718B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

id sub_10007193C(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (v2 == 6)
  {
    __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    sub_10001BEF8(a1, (unint64_t *)&__p);
    uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:__p.__r_.__value_.__r.__words[0]];
    goto LABEL_7;
  }
  if (v2 == 4)
  {
    __p.__r_.__value_.__s.__data_[0] = -86;
    sub_100072884((char *)a1, &__p);
    uint64_t v3 = +[NSNumber numberWithBool:__p.__r_.__value_.__s.__data_[0]];
LABEL_7:
    uint64_t v4 = (void *)v3;
    goto LABEL_8;
  }
  if ((v2 - 5) <= 1)
  {
    __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    sub_10001C724(a1, (uint64_t *)&__p);
    uint64_t v3 = +[NSNumber numberWithLongLong:__p.__r_.__value_.__r.__words[0]];
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  switch(*a1)
  {
    case 0u:
      uint64_t v3 = +[NSNull null];
      goto LABEL_7;
    case 1u:
      int64x2_t v65 = 0uLL;
      v66[0] = 0;
      unint64_t v64 = 0;
      int64x2_t v63 = 0uLL;
      sub_100072104((char **)&v65, *(void *)(*((void *)a1 + 1) + 16));
      unint64_t v7 = *a1;
      if (*a1)
      {
        if (v7 == 1)
        {
          unint64_t v7 = *(void *)(*((void *)a1 + 1) + 16);
        }
        else if (v7 == 2)
        {
          unint64_t v7 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
        }
        else
        {
          unint64_t v7 = 1;
        }
      }
      sub_100072104((char **)&v63, v7);
      unsigned __int8 v43 = &v64;
      long long v62 = a1;
      sub_1000721EC((uint64_t *)&v62, (uint64_t)&__p);
      sub_100072270((uint64_t *)&v62, (uint64_t)v51);
      while (!sub_100013964((unsigned __int8 **)&__p, v51))
      {
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)std::chrono::system_clock::time_point v50 = v9;
        *(_OWORD *)&unsigned char v50[16] = v9;
        long long v49 = v9;
        std::string v46 = __p;
        long long v47 = v56;
        long long v48 = v57;
        if (SHIBYTE(v59) < 0)
        {
          sub_100017424(&v49, (void *)v58, *((unint64_t *)&v58 + 1));
        }
        else
        {
          long long v49 = v58;
          *(void *)std::chrono::system_clock::time_point v50 = v59;
        }
        if (SHIBYTE(v61) < 0)
        {
          sub_100017424(&v50[8], (void *)v60, *((unint64_t *)&v60 + 1));
        }
        else
        {
          *(_OWORD *)&unsigned char v50[8] = v60;
          *(void *)&v50[24] = v61;
        }
        uint64_t v10 = sub_1000722F4((unsigned __int8 **)&v46);
        if (*(char *)(v10 + 23) >= 0) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = *(void *)v10;
        }
        uint64_t v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11, v43);
        uint64_t v13 = v12;
        uint64_t v14 = v65.i64[1];
        if (v65.i64[1] >= v66[0])
        {
          uint64_t v16 = (v65.i64[1] - v65.i64[0]) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_100028DEC();
          }
          unint64_t v17 = (v66[0] - v65.i64[0]) >> 2;
          if (v17 <= v16 + 1) {
            unint64_t v17 = v16 + 1;
          }
          if (v66[0] - v65.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          long long v70 = (char **)v66;
          if (v18) {
            uint64_t v19 = (char *)sub_100019978((uint64_t)v66, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          char v20 = (uint64_t *)&v19[8 * v16];
          size_t v21 = &v19[8 * v18];
          long long v69 = v21;
          *char v20 = v13;
          id v15 = v20 + 1;
          v68.i64[1] = (uint64_t)(v20 + 1);
          char v22 = (void *)v65.i64[1];
          unsigned __int8 v23 = (void *)v65.i64[0];
          if (v65.i64[1] == v65.i64[0])
          {
            int64x2_t v25 = vdupq_n_s64(v65.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v24 = *--v22;
              void *v22 = 0;
              *--char v20 = v24;
            }
            while (v22 != v23);
            int64x2_t v25 = v65;
            id v15 = (void *)v68.i64[1];
            size_t v21 = v69;
          }
          v65.i64[0] = (uint64_t)v20;
          v65.i64[1] = (uint64_t)v15;
          int64x2_t v68 = v25;
          char v26 = (char *)v66[0];
          v66[0] = v21;
          long long v69 = v26;
          uint64_t v67 = v25.i64[0];
          sub_100072A5C((uint64_t)&v67);
        }
        else
        {
          *(void *)v65.i64[1] = v12;
          id v15 = (void *)(v14 + 8);
        }
        v65.i64[1] = (uint64_t)v15;
        size_t v27 = sub_100013AAC((unsigned __int8 **)&v46);
        uint64_t v28 = sub_10007193C(v27);
        uint64_t v29 = v28;
        uint64_t v30 = v63.i64[1];
        if (v63.i64[1] >= (unint64_t)v64)
        {
          uint64_t v32 = (v63.i64[1] - v63.i64[0]) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_100028DEC();
          }
          unint64_t v33 = (uint64_t)&v64[-v63.i64[0]] >> 2;
          if (v33 <= v32 + 1) {
            unint64_t v33 = v32 + 1;
          }
          if ((unint64_t)&v64[-v63.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          long long v70 = v43;
          if (v34) {
            long long v35 = (char *)sub_100019978((uint64_t)v43, v34);
          }
          else {
            long long v35 = 0;
          }
          std::chrono::system_clock::time_point v36 = (uint64_t *)&v35[8 * v32];
          int v37 = &v35[8 * v34];
          long long v69 = v37;
          uint64_t *v36 = v29;
          BOOL v31 = v36 + 1;
          v68.i64[1] = (uint64_t)(v36 + 1);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = (void *)v63.i64[1];
          long long v39 = (void *)v63.i64[0];
          if (v63.i64[1] == v63.i64[0])
          {
            int64x2_t v41 = vdupq_n_s64(v63.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v40 = *--v38;
              *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = 0;
              *--std::chrono::system_clock::time_point v36 = v40;
            }
            while (v38 != v39);
            int64x2_t v41 = v63;
            BOOL v31 = (void *)v68.i64[1];
            int v37 = v69;
          }
          v63.i64[0] = (uint64_t)v36;
          v63.i64[1] = (uint64_t)v31;
          int64x2_t v68 = v41;
          size_t v42 = v64;
          unint64_t v64 = v37;
          long long v69 = v42;
          uint64_t v67 = v41.i64[0];
          sub_100072A5C((uint64_t)&v67);
        }
        else
        {
          *(void *)v63.i64[1] = v28;
          BOOL v31 = (void *)(v30 + 8);
        }
        v63.i64[1] = (uint64_t)v31;
        if ((v50[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v50[8]);
        }
        if ((v50[7] & 0x80000000) != 0) {
          operator delete((void *)v49);
        }
        sub_100013C64((unsigned __int8 **)&__p);
        *(void *)&long long v57 = v57 + 1;
      }
      if (v54 < 0) {
        operator delete(v53);
      }
      if (v52 < 0) {
        operator delete(v51[7]);
      }
      if (SHIBYTE(v61) < 0) {
        operator delete((void *)v60);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58);
      }
      uint64_t v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      sub_1000729DC((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
      sub_1000729DC((void ***)&__p);
      break;
    case 2u:
      memset(&__p, 0, sizeof(__p));
      sub_100072104(&__p.__r_.__value_.__l.__data_, (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4);
      v45[0] = a1;
      memset(&v45[1], 0, 24);
      v45[4] = (unsigned __int8 *)0x8000000000000000;
      sub_100014064(v45);
      v44[0] = a1;
      memset(&v44[1], 0, 24);
      v44[4] = (unsigned __int8 *)0x8000000000000000;
      sub_100013648(v44);
      v51[0] = (unsigned __int8 *)&__p;
      while (!sub_100013964(v45, v44))
      {
        id v6 = sub_100013AAC(v45);
        v46.__r_.__value_.__r.__words[0] = sub_10007193C(v6);
        sub_100072B98((char ***)v51, (uint64_t *)&v46);

        sub_100013C64(v45);
      }
      uint64_t v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:");
      v51[0] = (unsigned __int8 *)&__p;
      sub_1000729DC((void ***)v51);
      break;
    case 3u:
      sub_100015064((uint64_t)a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v4 = +[NSString stringWithUTF8String:p_p];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 7u:
      __p.__r_.__value_.__r.__words[0] = -1;
      sub_100026DA0(a1, (double *)&__p);
      uint64_t v3 = +[NSNumber numberWithDouble:*(double *)&__p.__r_.__value_.__l.__data_];
      goto LABEL_7;
    default:
      break;
  }
LABEL_8:

  return v4;
}

void sub_100072008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100072104(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100028DEC();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    id v6 = (char *)sub_100019978(result, a2);
    long long v9 = *a1;
    unsigned int v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)unsigned int v8 = 0;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[8 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_100072A5C((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_1000721EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v6, v3);
  sub_100014064((unsigned __int8 **)v6);
  return sub_100072AB0(a2, (uint64_t)v6);
}

uint64_t sub_100072270@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[0] = v4;
  v6[1] = v4;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  sub_1000136C8(v6, v3);
  sub_100013648((unsigned __int8 **)v6);
  return sub_100072AB0(a2, (uint64_t)v6);
}

uint64_t sub_1000722F4(unsigned __int8 **a1)
{
  if (!*a1) {
    sub_1000064B4();
  }
  int v2 = **a1;
  if (v2 == 1)
  {
    return sub_10006FFA4(a1);
  }
  else if (v2 == 2)
  {
    unint64_t v3 = (unint64_t)a1[5];
    if ((unsigned __int8 *)v3 != a1[6])
    {
      sub_100072B14((uint64_t)(a1 + 7), v3);
      a1[6] = a1[5];
    }
    return (uint64_t)(a1 + 7);
  }
  else
  {
    return (uint64_t)(a1 + 10);
  }
}

uint64_t sub_10007237C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void sub_1000723C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v10 = (char *)[v5 UTF8String];
    if (!v10) {
      +[NSException raise:NSInvalidArgumentException format:@"Invalid non-UTF8 character(s) in dictionary key"];
    }
    unint64_t v7 = *(uint64_t ***)(a1 + 32);
    sub_1000712FC(&v8, v6, (*(unsigned char *)(a1 + 40) + 1));
    sub_100072614(v7, &v10, (uint64_t)&v8);
    sub_100016EAC((uint64_t)&v8);
    sub_100016B28(&v9, v8);
  }
  else
  {
    +[NSException raise:NSInvalidArgumentException format:@"Invalid (non-string) key in JSON dictionary"];
  }
}

void sub_1000724F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  sub_100028D64(&a9);

  _Unwind_Resume(a1);
}

void sub_100072524(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t **)(a1 + 32);
  sub_1000712FC(&v5, a2, (*(unsigned char *)(a1 + 40) + 1));
  unint64_t v3 = v2[1];
  if (v3 >= v2[2])
  {
    uint64_t v4 = sub_100071148(v2, (uint64_t)&v5);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = v5;
    *(void *)(v3 + 8) = v6;
    sub_100016EAC((uint64_t)&v5);
    LOBYTE(v5) = 0;
    id v6 = 0;
    sub_100016EAC(v3);
    uint64_t v4 = v3 + 16;
  }
  v2[1] = v4;
  sub_100016EAC((uint64_t)&v5);
  sub_100016B28(&v6, v5);
}

void sub_1000725F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100072614(uint64_t **a1, char **a2, uint64_t a3)
{
  memset(v8, 170, sizeof(v8));
  sub_1000726F4((uint64_t)a1, a2, a3, v8);
  uint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (uint64_t **)sub_10001855C((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    sub_1000187B0(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  sub_100044468((uint64_t)v8, 0);
  return v5;
}

void sub_1000726D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100044468((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1000726F4@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  memset(a4, 170, 24);
  uint64_t v8 = operator new(0x48uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t result = sub_100072774(v8 + 4, a2, a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_10007275C(_Unwind_Exception *a1)
{
  sub_100044468(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100072774(void *a1, char **a2, uint64_t a3)
{
  uint64_t v5 = sub_100015438(a1, *a2);
  *((unsigned char *)v5 + 24) = *(unsigned char *)a3;
  uint64_t v6 = (uint64_t)(v5 + 3);
  void v5[4] = *(void *)(a3 + 8);
  sub_100016EAC(a3);
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  sub_100016EAC(v6);
  return a1;
}

uint64_t sub_1000727D8(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = sub_100072824(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100072824(void *a1)
{
  uint64_t result = operator new(0x18uLL);
  unint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  *uint64_t result = *a1;
  result[1] = v4;
  uint64_t v5 = result + 1;
  uint64_t v6 = a1[2];
  result[2] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *a1 = v3;
    *unint64_t v3 = 0;
    a1[2] = 0;
  }
  else
  {
    *uint64_t result = v5;
  }
  return result;
}

char *sub_100072884(char *result, unsigned char *a2)
{
  int v2 = result;
  if (*result != 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v4 = (char *)sub_100029400(v2);
    sub_100015438(&v7, v4);
    uint64_t v5 = std::string::insert(&v7, 0, "type must be BOOLean, but is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_100029288(302, (uint64_t)&v8, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_10007297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1000729DC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100072A5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100072AB0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_100015438((void *)(a1 + 56), "0");
  sub_100015438((void *)(a1 + 80), "");
  return a1;
}

double sub_100072B14(uint64_t a1, unint64_t __val)
{
  std::to_string(&v4, __val);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v4;
  return result;
}

char ***sub_100072B98(char ***a1, uint64_t *a2)
{
  std::string v4 = *a1;
  uint64_t v5 = (*a1)[1];
  long long v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = (v5 - *v4) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_100028DEC();
    }
    uint64_t v13 = v8 - (void)*v4;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v29 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_100019978(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    unint64_t v18 = &v16[8 * v15];
    uint64_t v28 = v18;
    uint64_t v19 = *a2;
    *a2 = 0;
    *(void *)uint64_t v17 = v19;
    uint64_t v11 = v17 + 8;
    size_t v27 = v17 + 8;
    size_t v21 = *v4;
    char v20 = v4[1];
    if (v20 == *v4)
    {
      unsigned __int8 v23 = v4[1];
    }
    else
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *(void *)char v20 = 0;
        *((void *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      unsigned __int8 v23 = *v4;
      char v20 = v4[1];
      uint64_t v11 = v27;
      unint64_t v18 = v28;
    }
    *std::string v4 = v17;
    v26[0] = v23;
    v26[1] = v23;
    v4[1] = v11;
    size_t v27 = v20;
    uint64_t v24 = v4[2];
    void v4[2] = v18;
    uint64_t v28 = v24;
    sub_100072A5C((uint64_t)v26);
  }
  else
  {
    uint64_t v10 = *a2;
    *a2 = 0;
    *(void *)uint64_t v5 = v10;
    uint64_t v11 = v5 + 8;
  }
  v4[1] = v11;
  return a1;
}

id sub_100072CF0(void *a1, void *a2)
{
  int v2 = sub_100072D20(a1, a2, 1);

  return v2;
}

id sub_100072D20(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v17 = v5;
  uint64_t v7 = sub_100073754(v5, v6, a3);
  if (sub_100073630(v7))
  {
    unint64_t v8 = sub_100073960(v17, v6, a3);
    unint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = [v8 uppercaseString];
      uint64_t v11 = +[NSString stringWithFormat:@"%@ %@", v7, v10];

      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        goto LABEL_13;
      }
      uint64_t v14 = v9;
      if (!a3) {
        goto LABEL_8;
      }
LABEL_6:
      uint64_t v15 = sub_100073270(v17, (uint64_t)v6);
      uint64_t v13 = sub_10007342C(v17, (uint64_t)v6);
      uint64_t v12 = (void *)v15;
      goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
  if (a3) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v12 = sub_100073484(v17, (uint64_t)v6);
  uint64_t v13 = sub_1000735D8(v17, (uint64_t)v6);
LABEL_9:
  uint64_t v11 = 0;
  if (v12 && v13)
  {
    uint64_t v11 = +[NSString stringWithFormat:@"Unknown (mcc=%@, mnc=%@)", v12, v13];
  }
  unint64_t v9 = v14;
LABEL_13:

  return v11;
}

void sub_100072F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_100072F7C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [objc_alloc((Class)CTBundle) initWithBundleType:1];
  id v12 = 0;
  id v6 = [v3 copyBundleVersion:v4 bundleType:v5 error:&v12];
  id v7 = v12;

  if (v7)
  {
    unint64_t v8 = (id)qword_10015EF78;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v10 = [v7 description];
      id v11 = [v10 UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v14 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the CarrierBundle version: %s", buf, 0xCu);
    }
  }

  return v6;
}

void sub_1000730D4(_Unwind_Exception *a1)
{
  id v7 = v6;

  _Unwind_Resume(a1);
}

id sub_100073120(void *a1, void *a2)
{
  int v2 = sub_100073150(a1, a2, 1);

  return v2;
}

id sub_100073150(void *a1, void *a2, int a3)
{
  id v3 = sub_100073960(a1, a2, a3);
  if (v3)
  {
    id v4 = +[NSLocale systemLocale];
    id v5 = v4;
    if (v4)
    {
      id v6 = [v4 localizedStringForCountryCode:v3];
    }
    else
    {
      id v6 = 0;
    }
    unint64_t v8 = sub_100073B6C(v6);
  }
  else
  {
    id v7 = qword_10015EF78;
    if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_ERROR)) {
      sub_1000FB3D4(v7);
    }
    unint64_t v8 = 0;
  }

  return v8;
}

void sub_100073220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100073240(void *a1, void *a2)
{
  int v2 = sub_100072D20(a1, a2, 0);

  return v2;
}

id sub_100073270(void *a1, uint64_t a2)
{
  id v10 = 0;
  id v2 = [a1 copyMobileSubscriberCountryCode:a2 error:&v10];
  id v3 = v10;
  if (v3)
  {
    id v4 = (id)qword_10015EF78;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v8 = [v3 description];
      id v9 = [v8 UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v12 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the subscriber MCC: %s", buf, 0xCu);
    }
  }
  if (sub_1000733C4(v2)) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

void sub_10007338C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1000733C4(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 && [v1 length]) {
    unsigned int v3 = [v2 isEqualToString:@"65535"];
  }
  else {
    unsigned int v3 = 1;
  }
  uint64_t v4 = v3 ^ 1;

  return v4;
}

void sub_10007341C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007342C(void *a1, uint64_t a2)
{
  id v2 = [a1 copyMobileSubscriberNetworkCode:a2 error:0];
  if (sub_1000733C4(v2)) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 0;
  }
  id v4 = v3;

  return v4;
}

void sub_100073474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100073484(void *a1, uint64_t a2)
{
  id v10 = 0;
  id v2 = [a1 copyMobileCountryCode:a2 error:&v10];
  id v3 = v10;
  if (v3)
  {
    id v4 = (id)qword_10015EF78;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v8 = [v3 description];
      id v9 = [v8 UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v12 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the serving MCC: %s", buf, 0xCu);
    }
  }
  if (sub_1000733C4(v2)) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

void sub_1000735A0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

id sub_1000735D8(void *a1, uint64_t a2)
{
  id v2 = [a1 copyMobileNetworkCode:a2 error:0];
  if (sub_1000733C4(v2)) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

void sub_100073620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100073630(void *a1)
{
  id v1 = a1;
  id v2 = +[NSSet setWithArray:&off_10015B890];
  id v3 = v2;
  if (v1) {
    uint64_t v4 = [v2 containsObject:v1] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1000736A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000736BC(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if (([v1 isEqualToString:kCTRegistrationStatusRegisteredHome] & 1) != 0
      || ([v2 isEqualToString:kCTRegistrationStatusRegisteredRoaming] & 1) != 0)
    {
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = (uint64_t)[v2 isEqualToString:kCTRegistrationStatusEmergencyOnly];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100073744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *sub_100073754(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = objc_alloc((Class)CTBundle);
  if (a3) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 2;
  }
  id v9 = [v7 initWithBundleType:v8];
  id v18 = 0;
  id v10 = [v5 copyCarrierBundleValue:v6 key:@"CarrierName" bundleType:v9 error:&v18];
  id v11 = v18;
  if (v11)
  {
    id v12 = (id)qword_10015EF78;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v16 = [v11 description];
      id v17 = [v16 UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v20 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the CarrierName from the bundle: %s", buf, 0xCu);
    }
LABEL_7:

    goto LABEL_8;
  }
  if (v10)
  {
    uint64_t v15 = [v5 getEnglishCarrierNameFor:v10 error:0];
    id v12 = v15;
    if (v15)
    {
      id v12 = v15;

      id v10 = v12;
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v13 = v10;

  return v13;
}

void sub_100073908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100073960(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = objc_alloc((Class)CTBundle);
  if (a3) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = 6;
  }
  id v9 = [v7 initWithBundleType:v8];
  id v17 = 0;
  id v10 = [v5 copyCarrierBundleValue:v6 key:@"ISOAlpha2CountryCode" bundleType:v9 error:&v17];
  id v11 = v17;
  if (v11)
  {
    id v12 = (id)qword_10015EF78;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v15 = [v11 description];
      id v16 = [v15 UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v19 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[TelephonyStateHelpers]: Failed to get the ISOAlpha2CountryCode from country bundle: %s", buf, 0xCu);
    }
  }
  if (v10 && [v10 count])
  {
    uint64_t v13 = [v10 objectAtIndex:0];
    if ([v13 length] == (id)2) {
      goto LABEL_13;
    }
  }
  uint64_t v13 = 0;
LABEL_13:

  return v13;
}

void sub_100073B1C(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

__CFString *sub_100073B6C(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([(__CFString *)v1 isEqualToString:@"China"])
    {
      CFStringRef v3 = @"China mainland";
    }
    else if ([(__CFString *)v2 isEqualToString:@"Taiwan (China)"])
    {
      CFStringRef v3 = @"Taiwan";
    }
    else if ([(__CFString *)v2 isEqualToString:@"Hong Kong (China)"])
    {
      CFStringRef v3 = @"Hong Kong";
    }
    else
    {
      if (![(__CFString *)v2 isEqualToString:@"Macao (China)"]) {
        goto LABEL_11;
      }
      CFStringRef v3 = @"Macao";
    }

    id v2 = (__CFString *)v3;
  }
LABEL_11:

  return v2;
}

void sub_100073C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void start()
{
  sub_1000B28FC();
  sub_10006ECE8();
  int v0 = getenv("USER");
  if (!v0) {
    int v0 = "";
  }
  if (strcmp(v0, "_analyticsd"))
  {
    uint64_t v24 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_ERROR)) {
      sub_1000FB5B4(v24);
    }
    int64x2_t v25 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_ERROR)) {
      sub_1000FB550(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    exit(1);
  }
  sub_100089718();
  memset(&v41, 0, sizeof(v41));
  uid_t v1 = getuid();
  int v2 = 10;
  while (1)
  {
    CFStringRef v3 = sub_10005A7A0();
    if (*((char *)v3 + 23) < 0) {
      CFStringRef v3 = *(long long **)v3;
    }
    BOOL v4 = !stat((const char *)v3, &v41) && v41.st_uid == v1;
    if (v4 && (~v41.st_mode & 0x1C0) == 0) {
      break;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000FB50C(&v33, v34);
    }
    sleep(0xAu);
    if (!--v2)
    {
      uid_t st_uid = v41.st_uid;
      BOOL v6 = (~v41.st_mode & 0x1C0) == 0;
LABEL_18:
      if (st_uid != v1 || !v6)
      {
        id v7 = sub_10005A7A0();
        if (*((char *)v7 + 23) >= 0) {
          uint64_t v8 = (const char *)v7;
        }
        else {
          uint64_t v8 = *(const char **)v7;
        }
        memset(&v41, 0, sizeof(v41));
        *__error() = 0;
        stat(v8, &v41);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
        {
          uid_t v19 = v41.st_uid;
          int st_mode = v41.st_mode;
          int v21 = *__error();
          uint64_t v22 = __error();
          unsigned __int8 v23 = strerror(*v22);
          *(_DWORD *)long long v35 = 67110146;
          *(_DWORD *)&v35[4] = v19;
          *(_WORD *)&unsigned char v35[8] = 1024;
          *(_DWORD *)&v35[10] = st_mode;
          *(_WORD *)&v35[14] = 1024;
          int v36 = v21;
          __int16 v37 = 2082;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = v23;
          __int16 v39 = 2082;
          *(void *)&long long v40 = v8;
          _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "==== DEACTIVATING! Home directory uid: %d mode: 0x%X errno: %d errno string: %{public}s path: %{public}s ====", v35, 0x28u);
        }
        id v9 = xpc_connection_create_mach_service("com.apple.analyticsd", 0, 1uLL);
        id v10 = v9;
        if (!v9) {
          id v10 = (_xpc_connection_s *)xpc_null_create();
        }

        xpc_connection_set_event_handler(v10, &stru_1001548B8);
        id v11 = xpc_connection_create_mach_service("com.apple.analyticsd.messagetracer", 0, 1uLL);
        id v12 = v11;
        if (!v11) {
          id v12 = (_xpc_connection_s *)xpc_null_create();
        }

        xpc_connection_set_event_handler(v12, &stru_1001548D8);
        xpc_connection_activate(v10);
        xpc_connection_activate(v12);
        CFRunLoopRun();
      }
      sub_100089940();
      dispatch_source_t v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
      id v14 = (void *)qword_10015EE08;
      qword_10015EE08 = (uint64_t)v13;

      if (qword_10015EE08)
      {
        dispatch_source_set_event_handler((dispatch_source_t)qword_10015EE08, &stru_1001548F8);
        dispatch_resume((dispatch_object_t)qword_10015EE08);
      }
      id v15 = (id)qword_10015EF18;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v41.st_dev) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "==== START ====", (uint8_t *)&v41, 2u);
      }

      id v16 = dispatch_queue_create("analyticsd.MTShim ConnectionAnalyticsStartupQueue", 0);
      id v17 = v16;

      id v18 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
      dispatch_queue_create("analyticsd.MessageTracerShimQueue", v18);

      sub_10003192C();
    }
  }
  BOOL v6 = 1;
  uid_t st_uid = v1;
  goto LABEL_18;
}

void sub_100076664(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100076C14(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[29];
  if (v2) {
    sub_1000147D8(v2);
  }
  CFStringRef v3 = (std::__shared_weak_count *)a1[27];
  if (v3) {
    sub_1000147D8(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[25];
  if (v4) {
    sub_1000147D8(v4);
  }
  id v5 = (std::__shared_weak_count *)a1[23];
  if (v5) {
    sub_1000147D8(v5);
  }
  BOOL v6 = (std::__shared_weak_count *)a1[21];
  if (v6) {
    sub_1000147D8(v6);
  }
  id v7 = (std::__shared_weak_count *)a1[19];
  if (v7) {
    sub_1000147D8(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[17];
  if (v8) {
    sub_1000147D8(v8);
  }
  id v9 = (std::__shared_weak_count *)a1[15];
  if (v9) {
    sub_1000147D8(v9);
  }
  id v10 = (std::__shared_weak_count *)a1[13];
  if (v10) {
    sub_1000147D8(v10);
  }
  id v11 = (std::__shared_weak_count *)a1[11];
  if (v11) {
    sub_1000147D8(v11);
  }
  id v12 = (std::__shared_weak_count *)a1[9];
  if (v12) {
    sub_1000147D8(v12);
  }
  dispatch_source_t v13 = (std::__shared_weak_count *)a1[7];
  if (v13) {
    sub_1000147D8(v13);
  }
  id v14 = (std::__shared_weak_count *)a1[5];
  if (v14) {
    sub_1000147D8(v14);
  }
  id v15 = (std::__shared_weak_count *)a1[3];
  if (v15) {
    sub_1000147D8(v15);
  }
  id v16 = (std::__shared_weak_count *)a1[1];
  if (v16) {
    sub_1000147D8(v16);
  }
  return a1;
}

uint64_t sub_100076CEC(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2) {
    sub_1000147D8(v2);
  }
  CFStringRef v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (v3) {
    sub_1000147D8(v3);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 120);
  if (v4) {
    sub_1000147D8(v4);
  }
  id v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (v5) {
    sub_1000147D8(v5);
  }
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6) {
    sub_1000147D8(v6);
  }
  id v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7) {
    sub_1000147D8(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    sub_1000147D8(v8);
  }
  id v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    sub_1000147D8(v9);
  }
  id v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10) {
    sub_1000147D8(v10);
  }
  id v11 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

void sub_100076D90(id *a1, id *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    BOOL v4 = *a1;
    dispatch_group_enter(v4);
    id v5 = sub_10000FD1C(a2);
    BOOL v6 = dispatch_get_global_queue(0, 0);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    void v9[2] = nullsub_50;
    void v9[3] = &unk_100154918;
    id v7 = v4;
    dispatch_group_t group = v7;
    dispatch_group_enter(v7);
    dispatch_group_notify(v5, v6, v9);

    if (group) {
      dispatch_group_leave(group);
    }
    dispatch_group_t v8 = group;
    dispatch_group_t group = 0;

    dispatch_group_leave(v7);
  }
}

void sub_100076EE8(id a1, OS_xpc_object *a2)
{
  xdict = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_get_remote_connection(xdict);
  CFStringRef v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message(v3, reply);
}

void sub_100076F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void sub_100076F80(id a1)
{
  uid_t v1 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "=== SIGTERM captured: Restart started", v3, 2u);
  }
  Maiuint64_t n = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void sub_100077024(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  CFStringRef v3 = (id *)(a1 + 32);
  BOOL v4 = sub_10000FD1C(v3);

  if (v4)
  {
    id v5 = sub_10000FD1C(v3);
    dispatch_group_enter(v5);
  }
}

void sub_1000770A8(uint64_t a1)
{
  uid_t v1 = (id *)(a1 + 32);
  BOOL v2 = sub_10000FD1C((id *)(a1 + 32));

  if (v2)
  {
    CFStringRef v3 = sub_10000FD1C(v1);
    dispatch_group_leave(v3);
  }
  id v4 = *v1;
  id *v1 = 0;

  id v5 = *v1;
}

void *sub_100077118(void *a1)
{
  *a1 = off_100154958;
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000147D8(v2);
  }
  return a1;
}

void sub_100077164(void *a1)
{
  *a1 = off_100154958;
  uid_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000147D8(v1);
  }

  operator delete();
}

void *sub_1000771D0(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_100154958;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10007722C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_100154958;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100077264(uint64_t a1)
{
  uid_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_1000147D8(v1);
  }
}

void sub_100077274(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_1000147D8(v2);
  }

  operator delete(__p);
}

uint64_t sub_1000772B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_1000772DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10007731C()
{
}

void sub_10007732C()
{
}

void *sub_100077340()
{
  double result = operator new(0x10uLL);
  *double result = off_1001549E8;
  return result;
}

void sub_100077378(uint64_t a1, void *a2)
{
  *a2 = off_1001549E8;
}

void sub_1000773A0()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100077490;
  block[3] = &unk_100154A48;
  void block[4] = &v0;
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_100077444(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100077484()
{
}

void sub_100077490()
{
  char v0 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "[DaemonPerf] Restart started after perf check", v2, 2u);
  }
  Maiuint64_t n = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void *sub_100077530(void *a1)
{
  *a1 = off_100154A88;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000147D8(v2);
  }
  return a1;
}

void sub_10007757C(void *a1)
{
  *a1 = off_100154A88;
  uid_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000147D8(v1);
  }

  operator delete();
}

void *sub_1000775E8(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_100154A88;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100077644(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_100154A88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10007767C(uint64_t a1)
{
  uid_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_1000147D8(v1);
  }
}

void sub_10007768C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_1000147D8(v2);
  }

  operator delete(__p);
}

uint64_t sub_1000776CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_1000776F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100077734()
{
}

void *sub_100077740(void *a1)
{
  *a1 = off_100154B08;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000147D8(v2);
  }
  return a1;
}

void sub_10007778C(void *a1)
{
  *a1 = off_100154B08;
  uid_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000147D8(v1);
  }

  operator delete();
}

void *sub_1000777F8(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_100154B08;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100077854(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_100154B08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10007788C(uint64_t a1)
{
  uid_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_1000147D8(v1);
  }
}

void sub_10007789C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_1000147D8(v2);
  }

  operator delete(__p);
}

uint64_t sub_1000778DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_100077904(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100077944()
{
}

void sub_100077950(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100154B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100077970(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100154B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1000779CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100154BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000779EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100154BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100077A48(uint64_t a1)
{
  sub_100076C14((void *)(a1 + 8));
  uint64_t v2 = sub_10000FD1C((id *)a1);

  if (v2)
  {
    uint64_t v3 = sub_10000FD1C((id *)a1);
    dispatch_group_leave(v3);
  }
  id v4 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

void sub_100077AB8(uint64_t a1)
{
  **(void **)(a1 + 224) = sub_100031A98(*(void *)(a1 + 16));
  sub_1000B6064();
  sub_1000B5FCC();
  sub_1000642A4(*(void *)(a1 + 48));
  sub_1000642A4(*(void *)(a1 + 64));
  uint64_t v2 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==== STARTUP: Starting mtShimServer early", buf, 2u);
  }
  (***(void (****)(void))a1)();
  if (*(_DWORD *)(*(void *)(a1 + 224) + 4) == 1) {
    sub_10002C864(*(void *)(a1 + 32));
  }
  if (sub_1000B3B4C())
  {
    sub_1000CB714(*(void *)(a1 + 80), 1);
    sub_1000CB7C4(*(void **)(a1 + 80), &v5);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)int buf = *(void *)(a1 + 112);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10005EC6C(v3, (uint64_t)buf);
}

void sub_100078050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100028D64((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10007809C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_100077A48(v2);
    operator delete();
  }
  return a1;
}

void sub_1000780E4(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_100077AB8(a1 + 8);
}

void sub_100078148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10007815C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    sub_1000147D8(v4);
  }
  id v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    sub_1000147D8(v5);
  }
  BOOL v6 = sub_10000FD1C((id *)a1);

  if (v6)
  {
    uint64_t v7 = sub_10000FD1C((id *)a1);
    dispatch_group_leave(v7);
  }
  id v8 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t *sub_1000781F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10007815C(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_10007823C(uint64_t a1)
{
  uint64_t v4 = a1;
  id v5 = 0xAAAAAAAAAAAAAAAALL;
  sub_100078304((void *)(a1 + 8), &v5);
  sub_100053F00((dispatch_object_t *)a1, &v5);
  uint64_t v2 = v5;
  id v5 = 0;

  return sub_1000781F4(&v4);
}

void sub_1000782CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11)
{
  id v12 = a11;
  a11 = 0;

  sub_1000781F4(&a10);
  _Unwind_Resume(a1);
}

void sub_100078304(void *a1@<X0>, dispatch_group_t *a2@<X8>)
{
  if (*(unsigned char *)a1[4])
  {
    uint64_t v3 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "==== STARTUP ROLLOVER BEGINNING ===", (uint8_t *)&buf, 2u);
    }
    memset(&buf, 170, sizeof(buf));
    sub_100015438(&buf, "scheduled");
    unint64_t v20 = 0xAAAAAAAAAAAAAA00;
    int v21 = 0;
    sub_100016EAC((uint64_t)&v20);
    sub_100016EAC((uint64_t)&v20);
    if (*(_DWORD *)(a1[6] + 4) == 1)
    {
      std::string::assign(&buf, "osUpdate");
      sub_100032E50(a1[2], v14);
      sub_100032D04(a1[2], v12);
      sub_10005CCC4((uint64_t *)v14, (uint64_t *)v12, __p);
      sub_10001C898((uint64_t)v18, (uint64_t)__p);
      uint64_t v4 = sub_10000D104((unsigned __int8 *)&v20, "overrideOSBuildString");
      sub_100016EAC((uint64_t)v18);
      char v5 = *(unsigned char *)v4;
      *(unsigned char *)uint64_t v4 = v18[0];
      v18[0] = v5;
      BOOL v6 = (uint64_t *)v4[1];
      v4[1] = (uint64_t)v19;
      uid_t v19 = v6;
      sub_100016EAC((uint64_t)v4);
      sub_100016EAC((uint64_t)v18);
      sub_100016B28(&v19, v18[0]);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      v10[0] = 4;
      uint64_t v11 = 1;
      sub_100016EAC((uint64_t)v10);
      sub_100016EAC((uint64_t)v10);
      uint64_t v7 = sub_10000D104((unsigned __int8 *)&v20, "skipConfigurationActivation");
      sub_100016EAC((uint64_t)v10);
      unsigned __int8 v8 = *(unsigned char *)v7;
      *(unsigned char *)uint64_t v7 = v10[0];
      v10[0] = v8;
      id v9 = (uint64_t *)v7[1];
      v7[1] = v11;
      uint64_t v11 = (uint64_t)v9;
      sub_100016EAC((uint64_t)v7);
      sub_100016EAC((uint64_t)v10);
      sub_100016B28((uint64_t **)&v11, v10[0]);
    }
    (*(void (**)(void, std::string *, unint64_t *))(*(void *)*a1 + 16))(*a1, &buf, &v20);
    sub_100016EAC((uint64_t)&v20);
    sub_100016B28(&v21, v20);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = dispatch_group_create();
  }
}

void sub_1000785C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_100028D64(&a10);
  sub_100028D64((uint64_t **)(v30 - 96));
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10007865C(uint64_t a1)
{
  uint64_t v4 = a1;
  char v5 = 0xAAAAAAAAAAAAAAAALL;
  sub_100078304((void *)(a1 + 8), &v5);
  sub_100053F00((dispatch_object_t *)a1, &v5);
  uint64_t v2 = v5;
  char v5 = 0;

  return sub_1000781F4(&v4);
}

void sub_1000786EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11)
{
  id v12 = a11;
  a11 = 0;

  sub_1000781F4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100078724(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    sub_1000147D8(v4);
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    sub_1000147D8(v5);
  }
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    sub_1000147D8(v7);
  }
  unsigned __int8 v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    sub_1000147D8(v8);
  }
  id v9 = sub_10000FD1C((id *)a1);

  if (v9)
  {
    id v10 = sub_10000FD1C((id *)a1);
    dispatch_group_leave(v10);
  }
  id v11 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t *sub_1000787E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_100078724(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_100078828(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_1000788A0(a1 + 8);
  return sub_1000787E0(&v2);
}

void sub_10007888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000788A0(uint64_t result)
{
  uint64_t v1 = result;
  if (**(unsigned char **)(result + 96) || *(_DWORD *)(*(void *)(result + 80) + 4) == 1)
  {
    uint64_t v2 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = "true";
      if (**(unsigned char **)(v1 + 96)) {
        uint64_t v4 = "true";
      }
      else {
        uint64_t v4 = "false";
      }
      if (*(_DWORD *)(*(void *)(v1 + 80) + 4) != 1) {
        uint64_t v3 = "false";
      }
      *(_DWORD *)std::string buf = 136446466;
      id v11 = v4;
      __int16 v12 = 2082;
      char v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==== WIPE STATE BEGINNING (abnormal-state: %{public}s, os-update: %{public}s)", buf, 0x16u);
    }
    if (*(_DWORD *)(*(void *)(v1 + 80) + 4))
    {
      char v5 = qword_10015EF18;
      if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "==== WIPE: Marking partial data flag. Data wipe is occurring but device did not do a clean install", buf, 2u);
      }
      sub_100032114(*(void **)v1);
    }
    BOOL v6 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "==== WIPE: Recreating configuration database", buf, 2u);
    }
    sub_100064484(*(void *)(v1 + 48));
    sub_1000642A4(*(void *)(v1 + 48));
    uint64_t v7 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "==== WIPE: Recreating state database", buf, 2u);
    }
    sub_100064484(*(void *)(v1 + 64));
    sub_1000642A4(*(void *)(v1 + 64));
    unsigned __int8 v8 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "==== WIPE: Resetting of sampling override on new build", buf, 2u);
    }
    sub_1000CB714(*(void *)(v1 + 32), 0);
    sub_1000CB7C4(*(void **)(v1 + 32), &v9);
  }
  return result;
}

uint64_t *sub_100078B00(uint64_t a1)
{
  uint64_t v2 = a1;
  sub_1000788A0(a1 + 8);
  return sub_1000787E0(&v2);
}

void sub_100078B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100078B78(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3) {
    sub_1000147D8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    sub_1000147D8(v4);
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    sub_1000147D8(v5);
  }
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6) {
    sub_1000147D8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    sub_1000147D8(v7);
  }
  unsigned __int8 v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    sub_1000147D8(v8);
  }
  id v9 = sub_10000FD1C((id *)a1);

  if (v9)
  {
    id v10 = sub_10000FD1C((id *)a1);
    dispatch_group_leave(v10);
  }
  id v11 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t *sub_100078C34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_100078B78(v2);
    operator delete();
  }
  return a1;
}

void sub_100078C7C(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_100078CF4((uint64_t *)(a1 + 8));
}

void sub_100078CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100078CF4(uint64_t *a1)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  id v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  sub_1000D895C(*a1, &v10);
  if (*(_DWORD *)(a1[11] + 4) <= 2u && sub_1000B31D4())
  {
    uint64_t v2 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==== STARTUP CONFIG: removing dev config after reboot", (uint8_t *)&buf, 2u);
    }
    sub_10005A7F4(&buf);
    sub_10009EA9C((const char *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    v8[0] = 0;
    id v9 = 0;
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    sub_100016EAC((uint64_t)v8);
    char v3 = v10;
    LOBYTE(v1sub_100027DA4((uint64_t)&a9, 0) = v8[0];
    v8[0] = v3;
    uint64_t v4 = v11;
    id v11 = v9;
    id v9 = v4;
    sub_100016EAC((uint64_t)&v10);
    sub_100016EAC((uint64_t)v8);
    sub_100016B28(&v9, v8[0]);
    sub_1000B310C(0);
  }
  char v5 = (void *)a1[8];
  uint64_t v6 = a1[3];
  v7[0] = a1[2];
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  sub_1000CB5F4(v5, v7);
}

void sub_100079094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  if (*(char *)(v21 - 73) < 0) {
    operator delete(*(void **)(v21 - 96));
  }
  sub_100028D64(&a21);
  _Unwind_Resume(a1);
}

void sub_100079128(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_100078CF4((uint64_t *)(a1 + 8));
}

void sub_10007918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id *sub_1000791A0(id *a1)
{
  sub_100076CEC((uint64_t)(a1 + 1));
  uint64_t v2 = sub_10000FD1C(a1);

  if (v2)
  {
    char v3 = sub_10000FD1C(a1);
    dispatch_group_leave(v3);
  }
  id v4 = *a1;
  *a1 = 0;

  return a1;
}

id **sub_100079210(id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1000791A0(v2);
    operator delete();
  }
  return a1;
}

void sub_100079258(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_1000792D0(a1 + 8);
}

void sub_1000792BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9)
{
}

void sub_1000792D0(uint64_t a1)
{
  sub_1000699E4(*(_DWORD *)(*(void *)(a1 + 152) + 4));
  if (**(unsigned char **)(a1 + 152)) {
    sub_1000899E4();
  }
  uint64_t v2 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==== startup complete; starting services",
      buf,
      2u);
  }
  sub_1000325C4(*(void *)(a1 + 40));
  memset(v13, 170, sizeof(v13));
  *(void *)std::string buf = sub_100031FD8(*(void *)(a1 + 40));
  sub_10005CE6C((const std::chrono::system_clock::time_point *)buf);
  char v3 = *(void **)(a1 + 40);
  id v4 = *(id *)a1;
  uint64_t v5 = *(void *)(a1 + 32);
  id v9 = v4;
  *(void *)&long long v10 = *(void *)(a1 + 24);
  *((void *)&v10 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if ((v13[23] & 0x80000000) != 0)
  {
    sub_100017424(&__p, *(void **)v13, *(unint64_t *)&v13[8]);
  }
  else
  {
    long long __p = *(_OWORD *)v13;
    uint64_t v12 = *(void *)&v13[16];
  }
  char v15 = 0;
  uint64_t v6 = operator new(0x38uLL);
  *uint64_t v6 = off_100154C28;
  id v7 = v9;
  v6[1] = v7;

  long long v8 = __p;
  *((_OWORD *)v6 + 1) = v10;
  *((_OWORD *)v6 + 2) = v8;
  void v6[6] = v12;
  long long __p = 0uLL;
  uint64_t v12 = 0;
  char v15 = v6;
  sub_100031D34(v3, (uint64_t)buf);
}

void sub_100079718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a25) {
    sub_1000147D8(a25);
  }
  sub_100028D64(&a22);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }

  if (*(char *)(v29 - 97) < 0) {
    operator delete(*(void **)(v29 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100079824(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t sub_100079878(uint64_t a1)
{
  *(void *)a1 = off_100154C28;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  return a1;
}

void sub_1000798E8(uint64_t a1)
{
  *(void *)a1 = off_100154C28;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  operator delete();
}

void *sub_100079978(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_100154C28;
  sub_100079C1C(v2 + 1, v1);
  return v2;
}

void sub_1000799CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000799E0(uint64_t a1, void *a2)
{
  *a2 = off_100154C28;
  return sub_100079C1C(a2 + 1, a1 + 8);
}

void sub_100079A0C(uint64_t a1)
{
}

void sub_100079A14(void *a1)
{
  sub_100079CC0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100079A50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    sub_100017424(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    __p[2] = *(void **)(a1 + 48);
  }
  sub_10000FD1C((id *)(a1 + 8));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_100079B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000147D8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100079BD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100079C10()
{
}

void *sub_100079C1C(void *a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  id v7 = a1 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100017424(v7, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(_OWORD *)id v7 = v8;
  }
  return a1;
}

void sub_100079C94(_Unwind_Exception *a1)
{
  id v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1000147D8(v3);
  }
  id v4 = *(id *)v1;
  *(void *)uint64_t v1 = 0;

  _Unwind_Resume(a1);
}

void sub_100079CC0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1000147D8(v2);
  }
  id v3 = *(void **)a1;
  *(void *)a1 = 0;

  id v4 = *(void **)a1;
}

uint64_t *sub_100079D1C(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      sub_1000147D8(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100079D80(uint64_t a1)
{
  uint64_t v15 = a1;
  int v2 = *(_DWORD *)(a1 + 16);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_100017424(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 40);
  }
  if (v2)
  {
    if (v2 == 1)
    {
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v22 = 3221225472;
      unsigned __int8 v23 = sub_10007A228;
      uint64_t v24 = &unk_100154C98;
      uint64_t v25 = a1;
      sub_1000688E8(buf);
    }
    else if (v2 == 2)
    {
      uint64_t v3 = *(void *)a1;
      id v4 = (long long *)sub_100015438(buf, "com.apple.coreanalytics.heartbeat.1day");
      sub_10001048C(v4, v20);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v20);
      if (*(void *)&v20[8]) {
        sub_1000147D8(*(std::__shared_weak_count **)&v20[8]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    uint64_t v5 = qword_10015EF18;
    if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "=== Two Hour Timer fired.", buf, 2u);
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    uid_t v19 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    sub_100027F8C((uint64_t)&v18);
    uint64_t v6 = (id)qword_10015EFA0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_100007460((uint64_t)&v18, -1, 0x20u, 0, 1, buf);
      id v7 = SHIBYTE(v23) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)unint64_t v20 = 136446466;
      *(void *)&void v20[4] = "com.apple.coreanalytics.heartbeat.2hours";
      *(_WORD *)&v20[12] = 2080;
      *(void *)&v20[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s %s", v20, 0x16u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v8 = *(void *)a1;
    id v9 = (long long *)sub_100015438(buf, "com.apple.coreanalytics.heartbeat.2hours");
    sub_10008D90C(v9, (uint64_t)&v18, v20);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v20);
    if (*(void *)&v20[8]) {
      sub_1000147D8(*(std::__shared_weak_count **)&v20[8]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
    sub_100015438(buf, "analyticsd");
    long long v10 = objc_opt_new();
    sub_1000B6DA8((uint64_t)buf, 1001, 1001, v10);

    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
    *(void *)unint64_t v20 = OSAStateMonitorEventCA2HrHeartbeatStartTimestampKey;
    if (v17 >= 0) {
      id v11 = __p;
    }
    else {
      id v11 = (void **)__p[0];
    }
    uint64_t v12 = +[NSString stringWithUTF8String:v11];
    *(void *)std::string buf = v12;
    char v13 = +[NSDictionary dictionaryWithObjects:buf forKeys:v20 count:1];
    +[OSAStateMonitor recordEvent:OSAStateMonitorEventCA2HrHeartbeat with:v13];

    sub_100016EAC((uint64_t)&v18);
    sub_100016B28(&v19, v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return sub_100079D1C(&v15);
}

void sub_10007A140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100016EAC((uint64_t)&a18);
  sub_100016B28((uint64_t **)&a19, a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100079D1C(&a10);
  _Unwind_Resume(a1);
}

void sub_10007A228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 32);
  sub_100015438(__p, "com.apple.coreanalytics.appUsage");
  sub_10008D90C((long long *)__p, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v6);
  if (v7) {
    sub_1000147D8(v7);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10007A2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000147D8(a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A328(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_1000792D0(a1 + 8);
}

void sub_10007A38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9)
{
}

void sub_10007A3A0()
{
  sub_100015438(qword_10015EDA8, "primaryNetworkInterface");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EDA8, (void *)&_mh_execute_header);
  sub_100015438(qword_10015EDC0, "wiFiRadioTech");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EDC0, (void *)&_mh_execute_header);
  sub_100015438(qword_10015EDD8, "wiFiLQM");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EDD8, (void *)&_mh_execute_header);
  sub_100015438(qword_10015EDF0, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EDF0, (void *)&_mh_execute_header);
}

void sub_10007A7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10007A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)TrialStateRelay;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_10007ABAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10007AE00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained refreshTrialState:*(void *)(a1 + 32)];
}

void sub_10007AE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007AF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007B21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }

  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void *sub_10007B370(void *result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = a2[1];
  *double result = *a2;
  result[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a3[1];
  result[2] = *a3;
  result[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a4[1];
  result[4] = *a4;
  result[5] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a6[1];
  result[6] = *a6;
  result[7] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a5[1];
  result[8] = *a5;
  result[9] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10007B3F0(uint64_t *a1)
{
  int v2 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Emitting CA meta pre-rollover events", buf, 2u);
  }
  uint64_t v3 = *a1;
  id v4 = (long long *)sub_100015438(buf, "com.apple.coreanalytics.meta.preRollover");
  sub_10001048C(v4, &v14);
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v3 + 24))(v3, &v14);
  if (v15) {
    sub_1000147D8(v15);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = *a1;
  sub_100015438(&v18, "com.apple.coreanalytics.meta.Telemetry");
  sub_100041438(a1[2], 1, buf);
  (*(void (**)(uint64_t **__return_ptr))(*(void *)(a1[4] + *(void *)(*(void *)a1[4] - 88)) + 48))(&v14);
  (*(void (**)(uint64_t **__return_ptr))(*(void *)(a1[8] + *(void *)(*(void *)a1[8] - 88)) + 48))(&v12);
  sub_100030AF4((int *)buf, &v14, &v12, (uint64_t)v16);
  sub_10008D90C(&v18, (uint64_t)v16, &v20);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 24))(v5, &v20);
  if (v21) {
    sub_1000147D8(v21);
  }
  sub_100016EAC((uint64_t)v16);
  sub_100016B28(&v17, v16[0]);
  if (v19 < 0) {
    operator delete((void *)v18);
  }
  uint64_t v6 = *a1;
  sub_100015438(buf, "com.apple.coreanalytics.systemUptime");
  sub_1000302D0((uint64_t)&v12);
  sub_10008D90C((long long *)buf, (uint64_t)&v12, &v14);
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v6 + 24))(v6, &v14);
  if (v15) {
    sub_1000147D8(v15);
  }
  sub_100016EAC((uint64_t)&v12);
  sub_100016B28(&v13, v12);
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v7 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Emitting IOReporter pre-rollover events", buf, 2u);
  }
  sub_10007B8C8((uint64_t)a1);
  uint64_t v8 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Emitting AppUsage pre-rollover events", buf, 2u);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  __n128 v11[2] = sub_10007B9E8;
  void v11[3] = &unk_100154CF0;
  void v11[4] = a1;
  if (!sub_1000688E8(v11)) {
    sub_100069AF4();
  }
  uint64_t v9 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Emitting Trial pre-rollover events", buf, 2u);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  void v10[2] = sub_10007BAE8;
  void v10[3] = &unk_100154D10;
  v10[4] = a1;
  sub_1000ACFA0(v10);
}

void sub_10007B82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_1000147D8(a25);
  }
  sub_100028D64(&a20);
  if (*(char *)(v25 - 89) < 0) {
    operator delete(*(void **)(v25 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_10007B8C8(uint64_t a1)
{
  uint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  sub_10008C8B0(&v5);
  sub_10008C958(v5);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100015438(__p, "ioreporter");
  v7[0] = off_100154D40;
  v7[1] = &v5;
  void v7[2] = a1;
  void v7[3] = v7;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v2 + 192))(v2, __p, v7);
  sub_10000642C(v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6) {
    sub_1000147D8(v6);
  }
}

void sub_10007B9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000147D8(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 32);
  sub_100015438(__p, "com.apple.coreanalytics.appUsage");
  sub_10008D90C((long long *)__p, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 24))(v3, &v6);
  if (v7) {
    sub_1000147D8(v7);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10007BAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000147D8(a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007BAE8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = **(void **)(a1 + 32);
  sub_100015438(__p, a2);
  sub_10008D90C((long long *)__p, a3, &v7);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 24))(v4, &v7);
  if (v8) {
    sub_1000147D8(v8);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10007BBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000147D8(a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007BBE0()
{
}

__n128 sub_10007BBF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100154D40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10007BC40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100154D40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10007BC70(uint64_t a1, char **a2, char **a3, const char **a4)
{
  uint64_t v4 = *a2;
  char v5 = *a3;
  long long v70 = *a4;
  if (v5)
  {
    uint64_t v7 = *(void **)(a1 + 16);
    memset(v69, 170, sizeof(v69));
    sub_100015438(v69, v5);
    if (SHIBYTE(v69[2]) < 0)
    {
      if (v69[1] == (void *)10)
      {
        uint64_t v9 = (void **)v69[0];
        if (*(void *)v69[0] != 0x6C6143746E657665 || *((_WORD *)v69[0] + 4) != 29548)
        {
LABEL_16:
          uint64_t v12 = *v9;
          int v13 = *((unsigned __int16 *)v9 + 4);
          if (v12 != (void *)0x6973736572707865 || v13 != 28271) {
            goto LABEL_20;
          }
          unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
          int64x2_t v68 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
          *((void *)&v83 + 1) = 0;
          sub_10000DD74(&v70, (uint64_t)buf, 1, &v67);
          sub_10000DE9C(buf);
          uint64_t v32 = v67;
          if (!(_BYTE)v67) {
            goto LABEL_57;
          }
          if (v67 == 1)
          {
            uint64_t v33 = v68[2];
          }
          else
          {
            if (v67 != 2) {
              goto LABEL_65;
            }
            uint64_t v33 = (v68[1] - *v68) >> 4;
          }
          if (v33 != 1)
          {
LABEL_57:
            unint64_t v34 = qword_10015EF20;
            if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_INFO))
            {
              if (v32)
              {
                if (v32 == 1)
                {
                  uint64_t v32 = v68[2];
                }
                else if (v32 == 2)
                {
                  uint64_t v32 = (v68[1] - *v68) >> 4;
                }
                else
                {
                  uint64_t v32 = 1;
                }
              }
              *(_DWORD *)std::string buf = 134217984;
              *(void *)&uint8_t buf[4] = v32;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "[IOReporter] WARNING: expression type event config length != 1: %lu", buf, 0xCu);
            }
          }
LABEL_65:
          int v86 = -1431655766;
          *(_OWORD *)std::string buf = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          memset(v85, 0, sizeof(v85));
          long long v35 = *(uint64_t **)(a1 + 8);
          uint64_t v36 = *v35;
          uint64_t v37 = v35[1];
          if (v37)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = *(std::__shared_weak_count **)&v85[16];
            *(void *)&v85[8] = v36;
            *(void *)&v85[16] = v37;
            if (v38) {
              sub_1000147D8(v38);
            }
          }
          else
          {
            *(void *)&v85[8] = v36;
            *(void *)&v85[16] = 0;
          }
          sub_100015438(v75, v4);
          sub_10001048C((long long *)v75, v71);
          uint64_t v39 = *(void *)&buf[8];
          if (*(void *)&buf[8] >= (unint64_t)v83)
          {
            uint64_t v40 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60) {
              sub_100028DEC();
            }
            uint64_t v42 = v83 - *(void *)buf;
            if ((uint64_t)(v83 - *(void *)buf) >> 3 > v41) {
              unint64_t v41 = v42 >> 3;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            uint64_t v61 = &v83;
            size_t v44 = (uint8_t *)sub_1000171B0((uint64_t)&v83, v43);
            unint64_t v45 = &v44[16 * v40];
            long long v57 = v44;
            long long v58 = v45;
            long long v60 = &v44[16 * v46];
            *(_OWORD *)unint64_t v45 = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            uint64_t v59 = v45 + 16;
            sub_100014994((uint64_t *)buf, &v57);
            uint64_t v47 = *(void *)&buf[8];
            sub_100014B08((void **)&v57);
            *(void *)&uint8_t buf[8] = v47;
            if (v71[1]) {
              sub_1000147D8((std::__shared_weak_count *)v71[1]);
            }
          }
          else
          {
            **(_OWORD **)&uint8_t buf[8] = *(_OWORD *)v71;
            v71[0] = 0;
            v71[1] = 0;
            *(void *)&uint8_t buf[8] = v39 + 16;
          }
          if (SBYTE7(v76) < 0) {
            operator delete(v75[0]);
          }
          long long v48 = (void **)v7[6];
          long long v49 = (unsigned char *)sub_10003A164((unsigned __int8 *)&v67, 0);
          sub_100013798(v48, (uint64_t)buf, v49);
          std::chrono::system_clock::time_point v50 = (void *)*((void *)&v83 + 1);
          if (**((unsigned char **)&v83 + 1) == 2)
          {
            long long v57 = (uint8_t *)*((void *)&v83 + 1);
            long long v58 = 0;
            uint64_t v59 = 0;
            long long v60 = 0;
            uint64_t v61 = (long long *)0x8000000000000000;
            sub_10001D3E4(&v57);
            v75[0] = v50;
            v75[1] = 0;
            long long v76 = 0uLL;
            *(void *)&long long v77 = 0x8000000000000000;
            sub_1000157EC((unsigned __int8 **)v75);
            while (!sub_1000205D8(&v57, (unsigned __int8 **)v75))
            {
              long long v51 = sub_10001EE40(&v57);
              char v52 = qword_10015EF30;
              if (os_log_type_enabled((os_log_t)qword_10015EF30, OS_LOG_TYPE_DEBUG))
              {
                sub_100007460((uint64_t)v51, -1, 0x20u, 0, 1, v71);
                char v54 = SHIBYTE(v72) >= 0 ? v71 : (void **)v71[0];
                *(_DWORD *)v80 = 136315394;
                *(void *)&v80[4] = v4;
                *(_WORD *)&v80[12] = 2080;
                *(void *)&v80[14] = v54;
                _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "[IOReporter] Event: %s %s", v80, 0x16u);
                if (SHIBYTE(v72) < 0) {
                  operator delete(v71[0]);
                }
              }
              uint64_t v53 = *v7;
              sub_100015438(v71, v4);
              sub_10008D90C((long long *)v71, (uint64_t)v51, v80);
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v53 + 24))(v53, v80);
              if (*(void *)&v80[8]) {
                sub_1000147D8(*(std::__shared_weak_count **)&v80[8]);
              }
              if (SHIBYTE(v72) < 0) {
                operator delete(v71[0]);
              }
              sub_100013C64(&v57);
            }
          }
          else
          {
            long long v55 = qword_10015EF20;
            if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR)) {
              sub_1000FB864(v55);
            }
          }
          if (*(void *)&v85[16]) {
            sub_1000147D8(*(std::__shared_weak_count **)&v85[16]);
          }
          long long v57 = (uint8_t *)&v83 + 8;
          sub_100016F68((void ***)&v57);
          long long v57 = buf;
          sub_100014738((void ***)&v57);
LABEL_100:
          sub_100016EAC((uint64_t)&v67);
          sub_100016B28(&v68, v67);
LABEL_101:
          if (SHIBYTE(v69[2]) < 0) {
            operator delete(v69[0]);
          }
          return;
        }
LABEL_22:
        unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
        int64x2_t v68 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        *((void *)&v83 + 1) = 0;
        sub_10000DD74(&v70, (uint64_t)buf, 1, &v67);
        sub_10000DE9C(buf);
        long long v66 = &v67;
        sub_100006184((uint64_t *)&v66, (uint64_t)buf);
        sub_10000626C((uint64_t *)&v66, (uint64_t)&v57);
        while (!sub_1000205D8((unsigned __int8 **)buf, &v57))
        {
          int v79 = -1431655766;
          *(_OWORD *)long long v75 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          memset(v78, 0, sizeof(v78));
          id v16 = *(uint64_t **)(a1 + 8);
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          if (v18)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            char v19 = *(std::__shared_weak_count **)&v78[16];
            *(void *)&v78[8] = v17;
            *(void *)&v78[16] = v18;
            if (v19) {
              sub_1000147D8(v19);
            }
          }
          else
          {
            *(void *)&v78[8] = v17;
            *(void *)&v78[16] = 0;
          }
          uint64_t v20 = (long long *)sub_100015438(v80, v4);
          sub_10001048C(v20, &v56);
          uint64_t v21 = (char *)v75[1];
          if (v75[1] >= (void *)v76)
          {
            int64_t v22 = ((char *)v75[1] - (char *)v75[0]) >> 4;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60) {
              sub_100028DEC();
            }
            uint64_t v24 = v76 - (unint64_t)v75[0];
            if ((uint64_t)(v76 - (unint64_t)v75[0]) >> 3 > v23) {
              unint64_t v23 = v24 >> 3;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            uint64_t v74 = &v76;
            uint64_t v26 = (char *)sub_1000171B0((uint64_t)&v76, v25);
            uint64_t v27 = &v26[16 * v22];
            v71[0] = v26;
            v71[1] = v27;
            char v73 = &v26[16 * v28];
            *(_OWORD *)uint64_t v27 = v56;
            long long v56 = 0uLL;
            unint64_t v72 = v27 + 16;
            sub_100014994((uint64_t *)v75, v71);
            uint64_t v29 = v75[1];
            sub_100014B08(v71);
            v75[1] = v29;
            if (*((void *)&v56 + 1)) {
              sub_1000147D8(*((std::__shared_weak_count **)&v56 + 1));
            }
          }
          else
          {
            *(_OWORD *)v75[1] = v56;
            long long v56 = 0uLL;
            v75[1] = v21 + 16;
          }
          if (v81 < 0) {
            operator delete(*(void **)v80);
          }
          uint64_t v30 = (void **)v7[6];
          uint64_t v31 = sub_10001EE40((unsigned __int8 **)buf);
          sub_100013798(v30, (uint64_t)v75, v31);
          (*(void (**)(void, void *))(*(void *)*v7 + 24))(*v7, v75[0]);
          if (*(void *)&v78[16]) {
            sub_1000147D8(*(std::__shared_weak_count **)&v78[16]);
          }
          v71[0] = (char *)&v76 + 8;
          sub_100016F68((void ***)v71);
          v71[0] = v75;
          sub_100014738((void ***)v71);
          sub_100013C64((unsigned __int8 **)buf);
          ++*((void *)&v84 + 1);
        }
        if (v65 < 0) {
          operator delete(__p);
        }
        if (v63 < 0) {
          operator delete(v62);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        if (SHIBYTE(v86) < 0) {
          operator delete(*(void **)&v85[8]);
        }
        goto LABEL_100;
      }
    }
    else if (SHIBYTE(v69[2]) == 10)
    {
      if (v69[0] != (void *)0x6C6143746E657665 || LOWORD(v69[1]) != 29548)
      {
        uint64_t v9 = v69;
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_20:
    uint64_t v15 = qword_10015EF20;
    if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR)) {
      sub_1000FB8D4((uint64_t)v5, v15);
    }
    goto LABEL_101;
  }
  uint64_t v10 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR)) {
    sub_1000FB7F4(v10);
  }
}

void sub_10007C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_100014B08(&a13);
  if (a43) {
    sub_1000147D8(a43);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  unint64_t v64 = *(std::__shared_weak_count **)(v62 - 144);
  if (v64) {
    sub_1000147D8(v64);
  }
  long long __p = (void *)(v62 - 184);
  sub_100016F68((void ***)&__p);
  long long __p = (void *)(v62 - 208);
  sub_100014738((void ***)&__p);
  sub_100016EAC((uint64_t)&a33);
  sub_100016B28((uint64_t **)&a34, a33);
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10007C6CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10007C70C()
{
}

void sub_10007C8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007C908(uint64_t a1)
{
  [*(id *)(a1 + 32) refreshInternetConnectionSync];
  [*(id *)(a1 + 32) refreshSignalStrengthBarsSync];
  [*(id *)(a1 + 32) refreshSubscriberInfoSync];
  [*(id *)(a1 + 32) refreshServingCarrierNameSync];
  [*(id *)(a1 + 32) refreshIsDualSimSync];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 refreshIsSatelliteSystemSync];
}

void sub_10007C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  id v11 = v10;
  a10.receiver = v11;
  a10.super_class = (Class)TelephonyStateRelay;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_10007CB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CCF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007D0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

void sub_10007D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22 && a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

void sub_10007D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10007D5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007D5E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleSignalStrengthChanged:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_10007D708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007D724(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleEnhancedLQMChanged:*(void *)(a1 + 40) metric:*(void *)(a1 + 48)];
}

void sub_10007D848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007D864(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleDisplayStatusChanged:*(void *)(a1 + 40) status:*(void *)(a1 + 48)];
}

void sub_10007D958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007D970(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleCurrentDataSimChanged:*(void *)(a1 + 40)];
}

void sub_10007DA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007DA78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleInternetConnectionStateChanged:*(void *)(a1 + 40)];
}

void sub_10007DB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007DB80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleCarrierBundleChanged:*(void *)(a1 + 40)];
}

void sub_10007DC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007DC88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleOperatorBundleChanged:*(void *)(a1 + 40)];
}

id sub_10007DD4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleSubscriptionInfoChanged];
}

void sub_10007DE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10007DE50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleStewieStateChanged:*(void *)(a1 + 40)];
}

void sub_10007DF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10007EA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007EB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007EBB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_100027DA4((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  return result;
}

void sub_10007EBC4(uint64_t a1)
{
}

void sub_10007ECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  sub_1000FBE3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10007F124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10007F3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10007F674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10007F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007FAD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007FD94(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_10007FDE0((_OWORD *)a1, a2);
  return a1;
}

void sub_10007FDC4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_1000FBEE0(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_10007FDE0(_OWORD *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      long long __dst = sub_100017424(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *long long __dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_10007FE3C(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_10007FE48(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xEu);
}

void *sub_10007FE74(void *result)
{
  *__n128 result = &off_100154E30;
  return result;
}

void *sub_10007FE94(void *a1)
{
  *a1 = &off_100154E30;
  sub_10007FEDC((uint64_t)a1);
  return a1;
}

void sub_10007FEDC(uint64_t a1)
{
  uint64_t v2 = *(__CFRunLoop **)(a1 + 8);
  if (v2)
  {
    long long v3 = *(__CFRunLoopSource **)(a1 + 16);
    if (v3) {
      CFRunLoopRemoveSource(v2, v3, kCFRunLoopDefaultMode);
    }
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  io_object_t v5 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    IOObjectRelease(v5);
    *(_DWORD *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  }
  io_object_t v6 = *(_DWORD *)(a1 + 44);
  if (v6)
  {
    IOObjectRelease(v6);
    *(_DWORD *)(a1 + 44) = 0;
  }
  mach_port_name_t v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    mach_port_deallocate(mach_task_self_, v7);
    *(_DWORD *)(a1 + 24) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 48) = 0;
  }
}

uint64_t sub_10007FF80(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef v4 = IOServiceMatching("CoreAnalyticsHub");
  uint64_t v5 = sub_10007FFDC(a1, a2, v4);
  CFRelease(v4);
  return v5;
}

uint64_t sub_10007FFDC(uint64_t a1, uint64_t a2, const void *a3)
{
  io_object_t v6 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[KernelDriverMatch] configureNotificationsForMatchingDict", buf, 2u);
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a3;
  CFRetain(a3);
  if (IOMainPort(0, (mach_port_t *)(a1 + 24))
    || (mach_port_name_t v7 = IONotificationPortCreate(*(_DWORD *)(a1 + 24)), (*(void *)(a1 + 32) = v7) == 0)
    || (RunLoopSource = IONotificationPortGetRunLoopSource(v7), (*(void *)(a1 + 16) = RunLoopSource) == 0)
    || (CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 8), RunLoopSource, kCFRunLoopDefaultMode),
        CFRetain(*(CFTypeRef *)(a1 + 48)),
        IOServiceAddMatchingNotification(*(IONotificationPortRef *)(a1 + 32), "IOServicePublish", *(CFDictionaryRef *)(a1 + 48), (IOServiceMatchingCallback)sub_1000801EC, (void *)a1, (io_iterator_t *)(a1 + 40)))|| (CFRetain(*(CFTypeRef *)(a1 + 48)), IOServiceAddMatchingNotification(*(IONotificationPortRef *)(a1 + 32), "IOServiceTerminate", *(CFDictionaryRef *)(a1 + 48), (IOServiceMatchingCallback)sub_1000801F0, (void *)a1, (io_iterator_t *)(a1 + 44))))
  {
    uint64_t v12 = qword_10015EF98;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FBEF4(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    sub_10007FEDC(a1);
    return 0;
  }
  else
  {
    uint64_t v9 = 1;
    *(unsigned char *)(a1 + 56) = 1;
    uint64_t v10 = qword_10015EF98;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[KernelDriverMatch] configureNotificationsForMatchingDict complete", v20, 2u);
    }
  }
  return v9;
}

uint64_t sub_1000801F4(uint64_t a1)
{
  io_iterator_t existing = 0;
  uint64_t v2 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[KernelDriverMatch] scanServices", buf, 2u);
  }
  mach_port_t v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    if (!IOServiceGetMatchingServices(v3, *(CFDictionaryRef *)(a1 + 48), &existing))
    {
      sub_100080348((void (***)(void, uint64_t))a1, existing);
      CFMutableDictionaryRef v4 = qword_10015EF98;
      if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[KernelDriverMatch] scanServices complete", buf, 2u);
      }
      goto LABEL_7;
    }
  }
  else
  {
    io_object_t v6 = qword_10015EF98;
    if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
      sub_1000FBFBC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  uint64_t v14 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_ERROR)) {
    sub_1000FBF58(v14, v15, v16, v17, v18, v19, v20, v21);
  }
LABEL_7:
  uint64_t result = existing;
  if (existing) {
    return IOObjectRelease(existing);
  }
  return result;
}

void sub_100080348(void (***a1)(void, uint64_t), io_iterator_t a2)
{
  CFMutableDictionaryRef v4 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[KernelDriverMatch] CoreAnalyticsClient::servicesPublished...\n", buf, 2u);
  }
  uint64_t v5 = IOIteratorNext(a2);
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      (**a1)(a1, v6);
      IOObjectRelease(v6);
      uint64_t v6 = IOIteratorNext(a2);
    }
    while (v6);
  }
  uint64_t v7 = qword_10015EF98;
  if (os_log_type_enabled((os_log_t)qword_10015EF98, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[KernelDriverMatch] CoreAnalyticsClient::servicesPublished done\n", v8, 2u);
  }
}

uint64_t sub_100080480(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    uint64_t v5 = result;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v5);
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100080500()
{
}

uint64_t sub_10008057C(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8 = dispatch_queue_create("analyticsd.ModifyEventManagerQueue", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    dispatch_retain(v8);
    dispatch_release(v9);
  }
  *(void *)a1 = off_100154E70;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 32) = off_100154EB8;
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = v11;
  *(void *)(a1 + 48) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a3[1];
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a4[1];
  *(void *)(a1 + 72) = *a4;
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  return a1;
}

void sub_100080674(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  CFMutableDictionaryRef v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_100080798(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000807A8(uint64_t a1)
{
  uint64_t v2 = qword_10015EF28;
  if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ModifyEventManager] Reconfiguring modify event manager", buf, 2u);
  }
  if (!*(unsigned char *)(a1 + 128))
  {
    sub_100081110((uint64_t)__p, 0x20000uLL, 0);
    sub_100080990(a1 + 88, (uint64_t)buf);
    if (!sub_100080D40((uint64_t *)__p)) {
      __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  mach_port_t v3 = *(void **)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104) - (void)v3;
  if (v4 >= 1) {
    bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  sub_100015438(v6, "queried_states");
  *(void *)std::string buf = off_100155060;
  __p[0] = (void *)a1;
  __p[2] = buf;
  (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v5 + 208))(v5, v6, buf);
  sub_10000642C(buf);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_100080960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100080A44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100080990(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 40);
  *(_WORD *)a1 = *(_WORD *)a2;
  if (v4)
  {
    if (a2 != a1)
    {
      uint64_t v5 = (_OWORD *)(a2 + 8);
      sub_10008131C(a1 + 8, (__n128 *)(a2 + 8));
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v6 = *(void **)(a2 + 8);
      if (v6)
      {
        *(void *)(a2 + 16) = v6;
        operator delete(v6);
      }
      *uint64_t v5 = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
    }
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = v7;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(unsigned char *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 1;
  }
  return a1;
}

uint64_t sub_100080A44(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  if (!sub_100080D40((uint64_t *)(a1 + 8))) {
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  }
  mach_port_t v3 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_100080AB0(void *a1)
{
  *a1 = off_100154E70;
  a1[4] = off_100154EB8;
  sub_100080DB0((uint64_t)(a1 + 11));
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_1000147D8(v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_1000147D8(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_1000147D8(v4);
  }
  sub_10004085C((uint64_t)(a1 + 1));
  return a1;
}

void sub_100080B44(void *a1)
{
  *a1 = off_100154E70;
  a1[4] = off_100154EB8;
  sub_100080DB0((uint64_t)(a1 + 11));
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_1000147D8(v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_1000147D8(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_1000147D8(v4);
  }
  sub_10004085C((uint64_t)(a1 + 1));

  operator delete();
}

uint64_t sub_100080BF8(void *a1)
{
  *(a1 - 4) = off_100154E70;
  *a1 = off_100154EB8;
  sub_100080DB0((uint64_t)(a1 + 7));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1000147D8(v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1000147D8(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    sub_1000147D8(v4);
  }

  return sub_10004085C((uint64_t)(a1 - 3));
}

void sub_100080C90(void *a1)
{
  *(a1 - 4) = off_100154E70;
  *a1 = off_100154EB8;
  sub_100080DB0((uint64_t)(a1 + 7));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1000147D8(v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1000147D8(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    sub_1000147D8(v4);
  }
  sub_10004085C((uint64_t)(a1 - 3));

  operator delete();
}

BOOL sub_100080D40(uint64_t *a1)
{
  unint64_t v1 = a1[3];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1 & 0x3F;
  if ((v1 & 0x3F) != 0)
  {
    if (v3 == v2) {
      sub_1000FC060();
    }
    if (*(void *)(v3 - 8) >> v4) {
      return 0;
    }
  }
  unint64_t v5 = (v3 - v2) >> 3;
  if (v5 > (a1[2] - v2) >> 3) {
    return 0;
  }
  unint64_t v7 = v1 >> 6;
  if (v4) {
    ++v7;
  }
  return v5 == v7;
}

uint64_t sub_100080DB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = (void **)(a1 + 8);
    if (!sub_100080D40((uint64_t *)(a1 + 8))) {
      __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
    }
    uint64_t v3 = *v2;
    if (*v2)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_100080E24(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100080EA4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100080F7C);
  __cxa_rethrow();
}

void sub_100080ECC(_Unwind_Exception *a1)
{
}

void sub_100080EE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100080F1C(uint64_t a1)
{
}

uint64_t sub_100080F38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100080F7C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100080FAC()
{
}

__n128 sub_100080FC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100154FE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10008100C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100154FE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100081038(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100081078()
{
}

uint64_t *sub_100081084(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1000807A8(*v1);
  sub_100042CF8((uint64_t *)&v4);
  return sub_100024E7C((uint64_t *)&v3);
}

void sub_1000810F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100042CF8((uint64_t *)va1);
  sub_100024E7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100081110(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_10008115C((void *)a1, a2, a3);
  return a1;
}

void sub_100081140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008115C(void *a1, unint64_t a2, uint64_t a3)
{
  if (a1[1] != *a1) {
    sub_1000FC104();
  }
  if ((a2 & 0x3F) != 0) {
    unint64_t v6 = (a2 >> 6) + 1;
  }
  else {
    unint64_t v6 = a2 >> 6;
  }
  sub_1000811D0((uint64_t)a1, v6);
  a1[3] = a2;
  uint64_t v7 = -1;
  if (a2 < 0x40) {
    uint64_t v7 = ~(-1 << a2);
  }
  uint64_t v8 = v7 & a3;
  if (v8) {
    *(void *)*a1 = v8;
  }
}

void sub_1000811D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100081200((char **)a1, a2 - v2);
  }
}

void sub_100081200(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_100028DEC();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_100019978(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

__n128 sub_10008131C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_100081374()
{
}

void *sub_100081388(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100155060;
  result[1] = v3;
  return result;
}

uint64_t sub_1000813D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100155060;
  a2[1] = v2;
  return result;
}

void sub_1000813FC(uint64_t a1, char **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_100015438(__p, *a2);
  sub_1000814E8(v2 + 88, (char *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100081478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008149C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000814DC()
{
}

unint64_t sub_1000814E8(uint64_t a1, char *a2)
{
  unint64_t v4 = sub_10000507C(a1, a2);
  *(void *)(*(void *)(a1 + 8) + (((v4 % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v4 % *(void *)(a1 + 32));
  unint64_t result = sub_1000050D8(a1 + 1, a2);
  *(void *)(*(void *)(a1 + 8) + (((result % *(void *)(a1 + 32)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (result % *(void *)(a1 + 32));
  return result;
}

void sub_100081578(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  sub_100086C24(a1, a2, &v4);
  if (sub_10006457C(v4))
  {
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    if (*((void *)&v4 + 1)) {
      sub_1000147D8(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t sub_100081610(uint64_t a1, long long *a2, uint64_t *a3)
{
  *(void *)a1 = off_1001558C8;
  dispatch_object_t object = dispatch_queue_create("analyticsd.SqliteStateStoreQueue", 0);
  sub_100063E80((uint64_t *)a1, (uint64_t *)off_100155438, &object, a2, a3);
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = off_100155128;
  *(void *)(a1 + 112) = off_100155230;
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = off_1001552C8;
  *(void *)(a1 + 128) = off_1001553C0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_100081768(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100081774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  unint64_t v5 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100086D44;
  block[3] = &unk_100155960;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v5, block);
  sub_1000650BC((sqlite3_stmt **)(a1 + 216), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 208), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 200), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 192), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 184), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 176), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 168), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 160), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 152), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 144), 0);
  sub_1000650BC((sqlite3_stmt **)(a1 + 136), 0);
  sub_1000818C0(a1, (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t sub_1000818C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 88)) = a2[1];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    sub_1000147D8(v4);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  sub_100065324((sqlite3 **)(a1 + 32), 0);
  sub_10004085C(a1 + 8);
  return a1;
}

uint64_t sub_100081998(uint64_t a1)
{
  return sub_100081774(a1, (uint64_t)&off_100155430);
}

uint64_t sub_1000819A4(uint64_t a1)
{
  return sub_100081774(a1 - 112, (uint64_t)&off_100155430);
}

uint64_t sub_1000819B4(uint64_t a1)
{
  return sub_100081774(a1 - 120, (uint64_t)&off_100155430);
}

uint64_t sub_1000819C4(uint64_t a1)
{
  return sub_100081774(a1 - 128, (uint64_t)&off_100155430);
}

void sub_1000819D4(uint64_t a1)
{
  sub_100081774(a1, (uint64_t)&off_100155430);

  operator delete();
}

void sub_100081A14(uint64_t a1)
{
  sub_100081774(a1 - 112, (uint64_t)&off_100155430);

  operator delete();
}

void sub_100081A58(uint64_t a1)
{
  sub_100081774(a1 - 120, (uint64_t)&off_100155430);

  operator delete();
}

void sub_100081A9C(uint64_t a1)
{
  sub_100081774(a1 - 128, (uint64_t)&off_100155430);

  operator delete();
}

uint64_t sub_100081AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 8;
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3;
  void v7[3] = a4;
  unint64_t v5 = *(NSObject **)(a1 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100086DF8;
  void v8[3] = &unk_100155980;
  void v8[4] = v4;
  v8[5] = v7;
  unsigned __int8 v11 = -86;
  uint64_t v9 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v11;
  void block[5] = &v9;
  dispatch_sync(v5, block);
  return v11;
}

uint64_t sub_100081BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100081AE8(a1 - 112, a2, a3, a4);
}

void sub_100081BF0(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EE10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EE10))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015E778, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EE10);
  }
  std::mutex::lock(&stru_10015E778);
  uint64_t v17 = 0;
  long long __p = &v17;
  uint64_t v19 = a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  uint64_t v32 = _NSConcreteStackBlock;
  uint64_t v33 = 0x40000000;
  unint64_t v34 = sub_1000871E8;
  long long v35 = &unk_100155A00;
  uint64_t v36 = (unsigned __int8 *)(a1 + 8);
  p_p = &__p;
  unint64_t v10 = (void **)&v32;
  LOBYTE(__s) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000;
  uint64_t v27 = (char **)sub_100006558;
  uint64_t v28 = (uint64_t)&unk_1001559A0;
  p_s = &__s;
  uint64_t v30 = &v10;
  dispatch_sync(v3, &block);
  if ((_BYTE)__s)
  {
    uint64_t v4 = qword_10015EF60;
    if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
    {
      LOWORD(block) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[State Store] Iterating all persisted queried states", (uint8_t *)&block, 2u);
    }
    do
    {
      while (1)
      {
        uint64_t v15 = 0;
        std::string __s = 0;
        uint64_t v13 = -1;
        uint64_t v14 = 0;
        uint64_t v12 = -1;
        blocuint64_t k = (void **)a1;
        uint64_t v26 = (uint64_t)&v17;
        uint64_t v27 = &__s;
        uint64_t v28 = (uint64_t)&v15;
        p_s = (char **)&v14;
        uint64_t v30 = (void ***)&v13;
        uint64_t v31 = &v12;
        unint64_t v5 = *(NSObject **)(a1 + 24);
        long long __p = _NSConcreteStackBlock;
        uint64_t v19 = 0x40000000;
        uint64_t v20 = sub_1000872D8;
        uint64_t v21 = &unk_100155A20;
        uint64_t v22 = a1 + 8;
        p_blocuint64_t k = &block;
        unint64_t v10 = &__p;
        unsigned __int8 v24 = -86;
        uint64_t v32 = _NSConcreteStackBlock;
        uint64_t v33 = 0x40000000;
        unint64_t v34 = sub_100006558;
        long long v35 = &unk_1001559A0;
        uint64_t v36 = &v24;
        p_p = (void **)&v10;
        dispatch_sync(v5, &v32);
        int v6 = v24;
        if (v24)
        {
          if (__s)
          {
            sub_100015438(&__p, __s);
            if (v15)
            {
              uint64_t v28 = 0;
              sub_10000DD74(&v15, (uint64_t)&block, 1, &v10);
              sub_10000DE9C(&block);
            }
            else
            {
              sub_10001200C((uint64_t)&v10, 0, 0, 0, 1);
            }
            if (v14)
            {
              long long v35 = 0;
              sub_10000DD74(&v14, (uint64_t)&v32, 1, &block);
              sub_10000DE9C(&v32);
            }
            else
            {
              LOBYTE(block) = 0;
              uint64_t v26 = 0;
              sub_100016EAC((uint64_t)&block);
              sub_100016EAC((uint64_t)&block);
            }
            uint64_t v27 = (char **)(1000000 * v13);
            uint64_t v28 = 1000000 * v12;
            LOBYTE(p_s) = 1;
            uint64_t v7 = *(void *)(a2 + 24);
            if (!v7) {
              sub_100027A78();
            }
            (*(void (**)(uint64_t, void **, void ***, void ***))(*(void *)v7 + 48))(v7, &__p, &v10, &block);
            sub_100016EAC((uint64_t)&block);
            sub_100016B28((uint64_t **)&v26, block);
            sub_100016EAC((uint64_t)&v10);
            sub_100016B28(&v11, v10);
            if (SHIBYTE(v20) < 0) {
              break;
            }
          }
        }
        if (!v6) {
          goto LABEL_18;
        }
      }
      operator delete(__p);
    }
    while (v6);
  }
LABEL_18:
  uint64_t v32 = (void **)&v17;
  uint64_t v8 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000;
  uint64_t v27 = (char **)sub_10008747C;
  uint64_t v28 = (uint64_t)&unk_100155A40;
  p_s = (char **)(a1 + 8);
  uint64_t v30 = &v32;
  dispatch_sync(v8, &block);
  sub_1000650BC(&v17, 0);
  std::mutex::unlock(&stru_10015E778);
}

void sub_100082130(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10008213CLL);
  }
  JUMPOUT(0x100082144);
}

void sub_10008214C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100082154(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_10008748C;
  void v6[3] = &unk_100155A60;
  void v6[4] = v2;
  v6[5] = v5;
  uint64_t v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100082254(uint64_t a1, uint64_t a2)
{
  return sub_100082154(a1 - 112, a2);
}

uint64_t sub_10008225C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100087674;
  _OWORD v5[3] = &unk_100155A80;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100082358(uint64_t a1)
{
  return sub_10008225C(a1 - 112);
}

void sub_100082360(uint64_t *a1, const char **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EE18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EE18))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015E7B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EE18);
  }
  std::mutex::lock(&stru_10015E7B8);
  unint64_t v11 = (unint64_t)(a1 + 23);
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  unint64_t v5 = a1[3];
  uint64_t v17 = _NSConcreteStackBlock;
  unint64_t v18 = 0x40000000;
  uint64_t v19 = sub_100087848;
  uint64_t v20 = &unk_100155AE0;
  uint64_t v21 = a1 + 1;
  uint64_t v22 = &v11;
  unint64_t v23 = &v17;
  LOBYTE(v16) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000;
  uint64_t v27 = sub_100006558;
  uint64_t v28 = &unk_1001559A0;
  uint64_t v29 = (unsigned __int8 *)&v16;
  uint64_t v30 = (void ***)&v23;
  dispatch_sync(v5, &block);
  if ((_BYTE)v16)
  {
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      unint64_t v11 = (unint64_t)a1;
      uint64_t v12 = a1 + 23;
      uint64_t v13 = &v16;
      uint64_t v14 = &v15;
      int v6 = a1[3];
      uint64_t v17 = _NSConcreteStackBlock;
      unint64_t v18 = 0x40000000;
      uint64_t v19 = sub_100087950;
      uint64_t v20 = &unk_100155B00;
      uint64_t v21 = a1 + 1;
      uint64_t v22 = &v11;
      unint64_t v23 = &v17;
      unsigned __int8 v24 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v26 = 0x40000000;
      uint64_t v27 = sub_100006558;
      uint64_t v28 = &unk_1001559A0;
      uint64_t v29 = &v24;
      uint64_t v30 = (void ***)&v23;
      dispatch_sync(v6, &block);
      int v7 = v24;
      if (v24 && v16 && v15)
      {
        uint64_t v17 = (void **)0xAAAAAAAAAAAAAAAALL;
        unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v28 = 0;
        sub_10000DD74(&v16, (uint64_t)&block, 1, &v17);
        sub_10000DE9C(&block);
        unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        if (v15)
        {
          uint64_t v28 = 0;
          sub_10000DD74(&v15, (uint64_t)&block, 1, &v11);
          sub_10000DE9C(&block);
        }
        else
        {
          LOBYTE(v11) = 0;
          uint64_t v12 = 0;
          sub_100016EAC((uint64_t)&v11);
          sub_100016EAC((uint64_t)&v11);
        }
        if (v17 | v11)
        {
          uint64_t v8 = *(void *)(a3 + 24);
          if (!v8) {
            sub_100027A78();
          }
          (*(void (**)(uint64_t, void ***, unint64_t *))(*(void *)v8 + 48))(v8, &v17, &v11);
        }
        sub_100016EAC((uint64_t)&v11);
        sub_100016B28(&v12, v11);
        sub_100016EAC((uint64_t)&v17);
        sub_100016B28((uint64_t **)&v18, v17);
      }
    }
    while (v7);
  }
  uint64_t v17 = (void **)(a1 + 23);
  unsigned __int8 v9 = a1[3];
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v26 = 0x40000000;
  uint64_t v27 = sub_100087A1C;
  uint64_t v28 = &unk_100155B20;
  uint64_t v29 = (unsigned __int8 *)(a1 + 1);
  uint64_t v30 = &v17;
  dispatch_sync(v9, &block);
  std::mutex::unlock(&stru_10015E7B8);
}

void sub_1000827DC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000827E8);
  }
  JUMPOUT(0x1000827F0);
}

void sub_1000827F8(uint64_t a1, const char **a2, uint64_t a3)
{
}

void sub_100082800(void *a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EE20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EE20))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015E7F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EE20);
  }
  std::mutex::lock(&stru_10015E7F8);
  uint64_t v20 = 0;
  uint64_t v21 = (void **)&v20;
  uint64_t v22 = (uint64_t)a1;
  uint64_t v3 = a1[3];
  uint64_t v27 = &v28;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 0x40000000;
  uint64_t v30 = sub_100087A84;
  uint64_t v31 = &unk_100155B80;
  uint64_t v32 = (unsigned __int8 *)(a1 + 1);
  uint64_t v33 = &v21;
  LOBYTE(__s) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000;
  unint64_t v11 = (int *)sub_100006558;
  uint64_t v12 = (char **)&unk_1001559A0;
  p_s = &__s;
  uint64_t v14 = (void ***)&v27;
  dispatch_sync(v3, &block);
  if ((_BYTE)__s)
  {
    do
    {
      int v19 = 1;
      uint64_t v17 = 0;
      std::string __s = 0;
      blocuint64_t k = (void **)a1;
      uint64_t v10 = (uint64_t)&v20;
      unint64_t v11 = &v19;
      uint64_t v12 = &__s;
      p_s = (char **)((char *)&v17 + 4);
      uint64_t v14 = (void ***)&v17;
      uint64_t v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v4 = a1[3];
      uint64_t v21 = _NSConcreteStackBlock;
      uint64_t v22 = 0x40000000;
      unint64_t v23 = sub_100087B74;
      unsigned __int8 v24 = &unk_100155BA0;
      unint64_t v25 = a1 + 1;
      p_blocuint64_t k = &block;
      uint64_t v27 = &v21;
      uint64_t v28 = _NSConcreteStackBlock;
      unsigned __int8 v34 = -86;
      uint64_t v29 = 0x40000000;
      uint64_t v30 = sub_100006558;
      uint64_t v31 = &unk_1001559A0;
      uint64_t v32 = &v34;
      uint64_t v33 = &v27;
      dispatch_sync(v4, &v28);
      int v5 = v34;
      if (v34)
      {
        if (__s)
        {
          int v6 = v19;
          sub_100015438(&block, __s);
          sub_100082B54(a2, v6, (uint64_t)&block, SHIDWORD(v17), v17);
          if (SHIBYTE(v11) < 0) {
            operator delete(block);
          }
        }
      }
    }
    while (v5);
  }
  uint64_t v28 = (void **)&v20;
  int v7 = a1[3];
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v10 = 0x40000000;
  unint64_t v11 = (int *)sub_100087C94;
  uint64_t v12 = (char **)&unk_100155BC0;
  p_s = (char **)(a1 + 1);
  uint64_t v14 = &v28;
  dispatch_sync(v7, &block);
  sub_1000650BC(&v20, 0);
  std::mutex::unlock(&stru_10015E7F8);
}

void sub_100082B44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100082B54(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  int v9 = a2;
  int v7 = a5;
  int v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *, int *))(*(void *)v5 + 48))(v5, &v9, a3, &v8, &v7);
}

void sub_100082BE0(uint64_t a1, uint64_t a2)
{
}

void sub_100082BE8(uint64_t a1, int a2, uint64_t a3)
{
  int v19 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EE28))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015E838, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EE28);
  }
  std::mutex::lock(&stru_10015E838);
  unint64_t v18 = 0;
  uint64_t v12 = &v18;
  uint64_t v13 = (sqlite3_stmt **)a1;
  uint64_t v14 = (char **)&v19;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  uint64_t v28 = (sqlite3_stmt **)_NSConcreteStackBlock;
  unint64_t v29 = 0x40000000;
  uint64_t v30 = sub_100087CA4;
  uint64_t v31 = &unk_100155BE0;
  uint64_t v32 = a1 + 8;
  uint64_t v33 = &v12;
  uint64_t v20 = &v28;
  LOBYTE(v17) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  unsigned __int8 v24 = sub_100006558;
  unint64_t v25 = &unk_1001559A0;
  uint64_t v26 = &v17;
  uint64_t v27 = (sqlite3_stmt ***)&v20;
  dispatch_sync(v4, &block);
  if ((_BYTE)v17)
  {
    while (1)
    {
      std::string __s = 0;
      uint64_t v17 = 0;
      uint64_t v12 = (sqlite3_stmt **)a1;
      uint64_t v13 = &v18;
      uint64_t v14 = &v17;
      p_s = &__s;
      uint64_t v5 = *(NSObject **)(a1 + 24);
      uint64_t v28 = (sqlite3_stmt **)_NSConcreteStackBlock;
      unint64_t v29 = 0x40000000;
      uint64_t v30 = sub_100087DB4;
      uint64_t v31 = &unk_100155C00;
      uint64_t v32 = a1 + 8;
      uint64_t v33 = &v12;
      uint64_t v20 = &v28;
      unsigned __int8 v21 = -86;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000;
      unsigned __int8 v24 = sub_100006558;
      unint64_t v25 = &unk_1001559A0;
      uint64_t v26 = (char **)&v21;
      uint64_t v27 = (sqlite3_stmt ***)&v20;
      dispatch_sync(v5, &block);
      int v6 = v21;
      if (!v21 || !v17 || !__s) {
        goto LABEL_12;
      }
      uint64_t v28 = (sqlite3_stmt **)0xAAAAAAAAAAAAAAAALL;
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
      sub_100015438(&__p, __s);
      uint64_t v28 = (sqlite3_stmt **)sub_100009188(&__p, (uint64_t)"%Y-%m-%dT%H:%M:%S");
      unint64_t v29 = v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((_BYTE)v29) {
          goto LABEL_10;
        }
LABEL_12:
        if (!v6) {
          break;
        }
      }
      else
      {
        if (!(_BYTE)v7) {
          goto LABEL_12;
        }
LABEL_10:
        sub_100015438(&block, v17);
        uint64_t v8 = *(void *)(a3 + 24);
        if (!v8) {
          sub_100027A78();
        }
        (*(void (**)(uint64_t, void ***, sqlite3_stmt ***))(*(void *)v8 + 48))(v8, &block, &v28);
        if ((SHIBYTE(v24) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        operator delete(block);
        if (!v6) {
          break;
        }
      }
    }
  }
  uint64_t v28 = &v18;
  int v9 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v23 = 0x40000000;
  unsigned __int8 v24 = sub_100087E80;
  unint64_t v25 = &unk_100155C20;
  uint64_t v26 = (char **)(a1 + 8);
  uint64_t v27 = &v28;
  dispatch_sync(v9, &block);
  sub_1000650BC(&v18, 0);
  std::mutex::unlock(&stru_10015E838);
}

void sub_100082FA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100082FB0(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_100082FB8(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10015EE30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10015EE30))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10015E878, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10015EE30);
  }
  std::mutex::lock(&stru_10015E878);
  unint64_t v18 = 0;
  uint64_t v27 = &v18;
  uint64_t v28 = (sqlite3_stmt **)a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)_NSConcreteStackBlock;
  unint64_t v33 = 0x40000000;
  unsigned __int8 v34 = sub_100087E90;
  long long v35 = &unk_100155C40;
  uint64_t v36 = a1 + 8;
  uint64_t v37 = &v27;
  int v19 = &rep;
  LOBYTE(v17) = -86;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v22 = 0x40000000;
  uint64_t v23 = sub_100006558;
  unsigned __int8 v24 = &unk_1001559A0;
  unint64_t v25 = &v17;
  p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt ***)&v19;
  dispatch_sync(v3, &block);
  if ((_BYTE)v17)
  {
    do
    {
      while (1)
      {
        std::string __s = 0;
        uint64_t v17 = 0;
        uint64_t v15 = 0;
        uint64_t v27 = (sqlite3_stmt **)a1;
        uint64_t v28 = &v18;
        unint64_t v29 = &v17;
        p_s = &__s;
        uint64_t v31 = &v15;
        uint64_t v4 = *(NSObject **)(a1 + 24);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)_NSConcreteStackBlock;
        unint64_t v33 = 0x40000000;
        unsigned __int8 v34 = sub_100087F80;
        long long v35 = &unk_100155C60;
        uint64_t v36 = a1 + 8;
        uint64_t v37 = &v27;
        int v19 = &rep;
        unsigned __int8 v20 = -86;
        blocuint64_t k = _NSConcreteStackBlock;
        uint64_t v22 = 0x40000000;
        uint64_t v23 = sub_100006558;
        unsigned __int8 v24 = &unk_1001559A0;
        unint64_t v25 = (char **)&v20;
        p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt ***)&v19;
        dispatch_sync(v4, &block);
        int v5 = v20;
        if (v20)
        {
          if (v17)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00;
            unint64_t v33 = 0xAAAAAAAAAAAAAA00;
            uint64_t v27 = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00;
            uint64_t v28 = (sqlite3_stmt **)0xAAAAAAAAAAAAAA00;
            if (__s)
            {
              sub_100015438(&__p, __s);
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)sub_100009188(&__p, (uint64_t)"%Y-%m-%dT%H:%M:%S");
              LOBYTE(v33) = v6;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!(_BYTE)v33) {
                LOBYTE(v33) = 1;
              }
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (sqlite3_stmt **)v7.__d_.__rep_;
            }
            if (v15)
            {
              sub_100015438(&v13, v15);
              uint64_t v27 = (sqlite3_stmt **)sub_100009188(&v13, (uint64_t)"%Y-%m-%dT%H:%M:%S");
              LOBYTE(v28) = v8;
              if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v13.__r_.__value_.__l.__data_);
                int v9 = v28;
              }
              else
              {
                int v9 = v8;
              }
            }
            else
            {
              if (!(_BYTE)v28) {
                LOBYTE(v28) = 1;
              }
              uint64_t v27 = (sqlite3_stmt **)0x8000000000000000;
              int v9 = 1;
            }
            if ((_BYTE)v33 && v9)
            {
              sub_100015438(&block, v17);
              uint64_t v10 = *(void *)(a2 + 24);
              if (!v10) {
                sub_100027A78();
              }
              (*(void (**)(uint64_t, void ***, sqlite3_stmt ***, sqlite3_stmt ***))(*(void *)v10 + 48))(v10, &block, &rep, &v27);
              if (SHIBYTE(v23) < 0) {
                break;
              }
            }
          }
        }
        if (!v5) {
          goto LABEL_25;
        }
      }
      operator delete(block);
    }
    while (v5);
  }
LABEL_25:
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = &v18;
  unint64_t v11 = *(NSObject **)(a1 + 24);
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v22 = 0x40000000;
  uint64_t v23 = sub_100088064;
  unsigned __int8 v24 = &unk_100155C80;
  unint64_t v25 = (char **)(a1 + 8);
  p_std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = &rep;
  dispatch_sync(v11, &block);
  sub_1000650BC(&v18, 0);
  std::mutex::unlock(&stru_10015E878);
}

void sub_100083408(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100083418(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100083420(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  void v6[2] = sub_100088074;
  void v6[3] = &unk_100155CA0;
  void v6[4] = v2;
  v6[5] = v5;
  std::chrono::system_clock::time_point v7 = v6;
  unsigned __int8 v9 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v9;
  void block[5] = &v7;
  dispatch_sync(v3, block);
  return v9;
}

uint64_t sub_100083520(uint64_t a1, uint64_t a2)
{
  return sub_100083420(a1 - 120, a2);
}

uint64_t sub_100083528(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000881A8;
  _OWORD v5[3] = &unk_100155CC0;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  char v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100083624(uint64_t a1)
{
  return sub_100083528(a1 - 120);
}

uint64_t sub_10008362C(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_1000882D4;
  void v7[3] = &unk_100155CE0;
  void v7[4] = v2;
  void v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_100083734(uint64_t a1, int a2)
{
  return sub_10008362C(a1 - 120, a2);
}

uint64_t sub_10008373C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100088410;
  _OWORD v5[3] = &unk_100155D00;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100083838(uint64_t a1)
{
  return sub_10008373C(a1 - 120);
}

uint64_t sub_100083840(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10008853C;
  _OWORD v5[3] = &unk_100155D20;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_10008393C(uint64_t a1)
{
  return sub_100083840(a1 - 128);
}

uint64_t sub_100083944(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = a1 + 8;
  v5[0] = a1;
  v5[1] = &v6;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_1000886B4;
  void v7[3] = &unk_100155D40;
  void v7[4] = v2;
  void v7[5] = v5;
  unsigned __int8 v8 = v7;
  unsigned __int8 v10 = -86;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v10;
  void block[5] = &v8;
  dispatch_sync(v3, block);
  return v10;
}

uint64_t sub_100083A4C(uint64_t a1, int a2)
{
  return sub_100083944(a1 - 128, a2);
}

uint64_t sub_100083A54(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1000888F0;
  _OWORD v5[3] = &unk_100155D60;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100083B50(uint64_t a1)
{
  return sub_100083A54(a1 - 128);
}

uint64_t sub_100083B58(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100088B34;
  _OWORD v5[3] = &unk_100155D80;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100083C54(uint64_t a1)
{
  return sub_100083B58(a1 - 128);
}

uint64_t sub_100083C5C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v4 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100088D84;
  _OWORD v5[3] = &unk_100155DA0;
  void v5[4] = v1;
  v5[5] = &v4;
  unsigned __int8 v8 = -86;
  int v6 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100006558;
  block[3] = &unk_1001559A0;
  void block[4] = &v8;
  void block[5] = &v6;
  dispatch_sync(v2, block);
  return v8;
}

uint64_t sub_100083D58(uint64_t a1)
{
  return sub_100083C5C(a1 - 128);
}

BOOL sub_100083D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_100083EA8(a1, a2)) {
    return 0;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v6;
  v15[1] = v6;
  sub_1000136C8(v15, a3);
  sub_100014064((unsigned __int8 **)v15);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[0] = v7;
  v13[1] = v7;
  sub_1000136C8(v13, a3);
  sub_100013648((unsigned __int8 **)v13);
  while (1)
  {
    BOOL v8 = sub_100013964((unsigned __int8 **)v15, (unsigned __int8 **)v13);
    if (v8) {
      break;
    }
    unsigned __int8 v9 = sub_100013AAC((unsigned __int8 **)v15);
    v11[0] = 0;
    uint64_t v12 = 0;
    sub_100016EAC((uint64_t)v11);
    sub_100016EAC((uint64_t)v11);
    LODWORD(v9) = sub_10000AB3C(a1, a2, (uint64_t)v11, (uint64_t)v9);
    sub_100016EAC((uint64_t)v11);
    sub_100016B28(&v12, v11[0]);
    if (!v9) {
      break;
    }
    sub_100013C64((unsigned __int8 **)v15);
  }
  return v8;
}

void sub_100083E9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100083EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt **)(a1 + 200);
  if (*(void *)(a1 + 200)
    || (sub_100064D6C(a1, "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT transform_metadata_id FROM transform_metadata WHERE transform_uuid=?1 LIMIT 1)", 1, (sqlite3_stmt **)buf), int v5 = *(sqlite3_stmt **)buf, *(void *)buf = 0, sub_1000650BC(v4, v5), sub_1000650BC((sqlite3_stmt **)buf, 0), *(void *)(a1 + 200)))
  {
    unsigned __int8 v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v20, v4);
    uint64_t v19 = 0;
    sub_1000089E8(a1, v4, 1, a2, &v19);
    int v6 = sub_10000AAD0(a1, v4, &v19);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      BOOL v8 = *(sqlite3 **)(a1 + 32);
      unsigned __int8 v9 = qword_10015EF60;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          int v11 = *(char *)(a2 + 23);
          uint64_t v12 = *(void *)a2;
          std::string v13 = sqlite3_errmsg(v8);
          if (v11 >= 0) {
            uint64_t v14 = a2;
          }
          else {
            uint64_t v14 = v12;
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v22 = 2080;
          uint64_t v23 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove transform_state for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }
      else if (v10)
      {
        sub_1000FC3F8();
      }
    }
    sub_100008C7C(&v20);
  }
  else
  {
    unint64_t v16 = *(sqlite3 **)(a1 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        unint64_t v18 = sqlite3_errmsg(v16);
        sub_1000FC3C0((uint64_t)v18, (uint64_t)buf);
      }
    }
    else if (v17)
    {
      sub_1000FC360();
    }
    return 0;
  }
  return v7;
}

void sub_1000840A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000840AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0;
  unsigned __int8 v9 = 0;
  sub_100016EAC((uint64_t)v8);
  sub_100016EAC((uint64_t)v8);
  BOOL v6 = sub_10000AB3C(a1, a2, (uint64_t)v8, a3);
  sub_100016EAC((uint64_t)v8);
  sub_100016B28(&v9, v8[0]);
  return v6;
}

BOOL sub_100084160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt **)(a1 + 216);
  if (*(void *)(a1 + 216)
    || (sub_100064D6C(a1, "DELETE FROM transform_metadata WHERE transform_uuid=?1", 1, (sqlite3_stmt **)buf),
        int v5 = *(sqlite3_stmt **)buf,
        *(void *)std::string buf = 0,
        sub_1000650BC(v4, v5),
        sub_1000650BC((sqlite3_stmt **)buf, 0),
        *(void *)(a1 + 216)))
  {
    unsigned __int8 v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v20, v4);
    uint64_t v19 = 0;
    sub_1000089E8(a1, v4, 1, a2, &v19);
    int v6 = sub_10000AAD0(a1, v4, &v19);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      BOOL v8 = *(sqlite3 **)(a1 + 32);
      unsigned __int8 v9 = qword_10015EF60;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          int v11 = *(char *)(a2 + 23);
          uint64_t v12 = *(void *)a2;
          std::string v13 = sqlite3_errmsg(v8);
          if (v11 >= 0) {
            uint64_t v14 = a2;
          }
          else {
            uint64_t v14 = v12;
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v22 = 2080;
          uint64_t v23 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove transform_metadata for (uuid='%{public}s'); %s",
            buf,
            0x16u);
        }
      }
      else if (v10)
      {
        sub_1000FC600();
      }
    }
    sub_100008C7C(&v20);
  }
  else
  {
    unint64_t v16 = *(sqlite3 **)(a1 + 32);
    BOOL v17 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v16)
    {
      if (v17)
      {
        unint64_t v18 = sqlite3_errmsg(v16);
        sub_1000FC5C8((uint64_t)v18, (uint64_t)buf);
      }
    }
    else if (v17)
    {
      sub_1000FC568();
    }
    return 0;
  }
  return v7;
}

void sub_100084358(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100084364(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_states", 0, &v12);
  uint64_t v2 = v12;
  uint64_t v3 = *(sqlite3 **)(a1 + 32);
  BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (!v2)
  {
    if (v3)
    {
      if (v4)
      {
        int v6 = sqlite3_errmsg(v3);
        sub_1000FC6CC((uint64_t)v6, (uint64_t)v14);
      }
    }
    else if (v4)
    {
      sub_1000FC66C();
    }
    goto LABEL_19;
  }
  if (v3)
  {
    if (v4)
    {
      int v5 = sqlite3_errmsg(v3);
      sub_1000FC7FC((uint64_t)v5, (uint64_t)v14);
    }
  }
  else if (v4)
  {
    sub_1000FC79C();
  }
  v13[0] = 0;
  if (sub_10000AAD0(a1, &v12, v13) != 101)
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FC764((uint64_t)v10, (uint64_t)v13);
      }
    }
    else if (v9)
    {
      sub_1000FC704();
    }
LABEL_19:
    uint64_t v7 = 0;
    goto LABEL_20;
  }
  uint64_t v7 = 1;
LABEL_20:
  sub_1000650BC(&v12, 0);
  return v7;
}

void sub_1000844E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_1000844F4(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_metadata", 0, &v12);
  uint64_t v2 = v12;
  uint64_t v3 = *(sqlite3 **)(a1 + 32);
  BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
  if (!v2)
  {
    if (v3)
    {
      if (v4)
      {
        int v6 = sqlite3_errmsg(v3);
        sub_1000FC894((uint64_t)v6, (uint64_t)v14);
      }
    }
    else if (v4)
    {
      sub_1000FC834();
    }
    goto LABEL_19;
  }
  if (v3)
  {
    if (v4)
    {
      int v5 = sqlite3_errmsg(v3);
      sub_1000FC9C4((uint64_t)v5, (uint64_t)v14);
    }
  }
  else if (v4)
  {
    sub_1000FC964();
  }
  v13[0] = 0;
  if (sub_10000AAD0(a1, &v12, v13) != 101)
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FC92C((uint64_t)v10, (uint64_t)v13);
      }
    }
    else if (v9)
    {
      sub_1000FC8CC();
    }
LABEL_19:
    uint64_t v7 = 0;
    goto LABEL_20;
  }
  uint64_t v7 = 1;
LABEL_20:
  sub_1000650BC(&v12, 0);
  return v7;
}

void sub_100084678(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100084684(uint64_t a1, int a2)
{
  unsigned __int8 v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT tm.transform_metadata_id FROM transform_metadata AS tm JOIN agg_session ON tm.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_period = ?1)", 1, &v20);
  if (v20)
  {
    uint64_t v19 = 0;
    __p[0] = (void *)a2;
    sub_10000B0E4(a1, &v20, 1, (sqlite3_int64 *)__p, &v19);
    int v4 = sub_10000AAD0(a1, &v20, &v19);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = qword_10015EF60;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8)
        {
          if ((a2 - 1) > 2) {
            BOOL v9 = "Daily";
          }
          else {
            BOOL v9 = off_100155DE0[a2 - 1];
          }
          sub_100015438(__p, v9);
          int v15 = v22;
          unint64_t v16 = (void **)__p[0];
          BOOL v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          unint64_t v18 = __p;
          if (v15 < 0) {
            unint64_t v18 = v16;
          }
          *(_DWORD *)std::string buf = 136315394;
          unsigned __int8 v24 = v18;
          __int16 v25 = 2080;
          uint64_t v26 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove transforms states for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (v8)
      {
        if ((a2 - 1) > 2) {
          uint64_t v14 = "Daily";
        }
        else {
          uint64_t v14 = off_100155DE0[a2 - 1];
        }
        sub_100015438(__p, v14);
        sub_1000FCA94();
      }
    }
  }
  else
  {
    BOOL v10 = *(sqlite3 **)(a1 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = sqlite3_errmsg(v10);
        sub_1000FCA5C((uint64_t)v12, (uint64_t)__p);
      }
    }
    else if (v11)
    {
      sub_1000FC9FC();
    }
    BOOL v5 = 0;
  }
  sub_1000650BC(&v20, 0);
  return v5;
}

void sub_1000848C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000848CC(uint64_t a1, int a2)
{
  unsigned __int8 v20 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_metadata WHERE agg_session_id IN (SELECT agg_session_id FROM agg_session WHERE agg_session_period = ?1)", 1, &v20);
  if (v20)
  {
    uint64_t v19 = 0;
    __p[0] = (void *)a2;
    sub_10000B0E4(a1, &v20, 1, (sqlite3_int64 *)__p, &v19);
    int v4 = sub_10000AAD0(a1, &v20, &v19);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = qword_10015EF60;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8)
        {
          if ((a2 - 1) > 2) {
            BOOL v9 = "Daily";
          }
          else {
            BOOL v9 = off_100155DE0[a2 - 1];
          }
          sub_100015438(__p, v9);
          int v15 = v22;
          unint64_t v16 = (void **)__p[0];
          BOOL v17 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          unint64_t v18 = __p;
          if (v15 < 0) {
            unint64_t v18 = v16;
          }
          *(_DWORD *)std::string buf = 136315394;
          unsigned __int8 v24 = v18;
          __int16 v25 = 2080;
          uint64_t v26 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[State Store] Failed to remove transforms metadata for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (v8)
      {
        if ((a2 - 1) > 2) {
          uint64_t v14 = "Daily";
        }
        else {
          uint64_t v14 = off_100155DE0[a2 - 1];
        }
        sub_100015438(__p, v14);
        sub_1000FCB84();
      }
    }
  }
  else
  {
    BOOL v10 = *(sqlite3 **)(a1 + 32);
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = sqlite3_errmsg(v10);
        sub_1000FCB4C((uint64_t)v12, (uint64_t)__p);
      }
    }
    else if (v11)
    {
      sub_1000FCAEC();
    }
    BOOL v5 = 0;
  }
  sub_1000650BC(&v20, 0);
  return v5;
}

void sub_100084B08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100084B14(uint64_t a1)
{
  std::string v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_states WHERE transform_metadata_id IN (SELECT tm.transform_metadata_id FROM transform_metadata AS tm LEFT JOIN agg_session ON tm.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_end_boundary <= ?1 OR tm.agg_session_id IS NULL)", 1, &v13);
  if (v13)
  {
    uint64_t v12 = 0;
    memset(__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10001C968(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S");
    sub_1000089E8(a1, &v13, 1, (uint64_t)__p, &v12);
    int v3 = sub_10000AAD0(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = sqlite3_errmsg(v5);
          sub_1000FCCD4((uint64_t)v7, (uint64_t)v14);
        }
      }
      else if (v6)
      {
        sub_1000FCC74();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FCC3C((uint64_t)v10, (uint64_t)__p);
      }
    }
    else if (v9)
    {
      sub_1000FCBDC();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v13, 0);
  return v4;
}

void sub_100084CB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100084CBC(uint64_t a1)
{
  std::string v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM transform_metadata WHERE agg_session_id IN (SELECT agg_session_id FROM agg_session WHERE agg_session_end_boundary <= ?1) OR agg_session_id IS NULL", 1, &v13);
  if (v13)
  {
    uint64_t v12 = 0;
    memset(__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10001C968(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S");
    sub_1000089E8(a1, &v13, 1, (uint64_t)__p, &v12);
    int v3 = sub_10000AAD0(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = sqlite3_errmsg(v5);
          sub_1000FCE04((uint64_t)v7, (uint64_t)v14);
        }
      }
      else if (v6)
      {
        sub_1000FCDA4();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FCD6C((uint64_t)v10, (uint64_t)__p);
      }
    }
    else if (v9)
    {
      sub_1000FCD0C();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v13, 0);
  return v4;
}

void sub_100084E58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100084E64(uint64_t a1, int a2)
{
  BOOL v9 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "SELECT 1 FROM agg_session WHERE agg_session_period=?1", 1, &v9);
  if (v9)
  {
    v10[0] = a2;
    sub_100064C88(a1, &v9, 1, v10);
    BOOL v4 = sub_1000090A4(a1, &v9) == 100;
  }
  else
  {
    BOOL v5 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = sqlite3_errmsg(v5);
        sub_1000FCE9C((uint64_t)v7, (uint64_t)v10);
      }
    }
    else if (v6)
    {
      sub_1000FCE3C();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v9, 0);
  return v4;
}

void sub_100084F78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100084F84(uint64_t a1, int a2, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *a3)
{
  __int16 v25 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "INSERT INTO agg_session (agg_session_end_boundary, agg_session_period) VALUES (?1, ?2)", 1, &v25);
  if (v25)
  {
    unsigned __int8 v24 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v24, &v25);
    uint64_t v23 = 0;
    memset(__p, 170, sizeof(__p));
    sub_10001C968(*a3, (uint64_t)"%Y-%m-%dT%H:%M:%S");
    sub_1000089E8(a1, &v25, 1, (uint64_t)__p, &v23);
    v21[0] = (void *)a2;
    sub_10000B0E4(a1, &v25, 2, (sqlite3_int64 *)v21, &v23);
    int v6 = sub_10000AAD0(a1, &v25, &v23);
    BOOL v7 = v6 == 101;
    if (v6 != 101)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = qword_10015EF60;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          if ((a2 - 1) > 2) {
            BOOL v11 = "Daily";
          }
          else {
            BOOL v11 = off_100155DE0[a2 - 1];
          }
          sub_100015438(v21, v11);
          int v17 = v22;
          unint64_t v18 = (void **)v21[0];
          uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)(a1 + 32));
          unsigned __int8 v20 = v21;
          if (v17 < 0) {
            unsigned __int8 v20 = v18;
          }
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v27 = v20;
          __int16 v28 = 2080;
          unint64_t v29 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[State Store] Failed to insert aggregation session for aggregation period='%s'; %s",
            buf,
            0x16u);
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
      else if (v10)
      {
        if ((a2 - 1) > 2) {
          unint64_t v16 = "Daily";
        }
        else {
          unint64_t v16 = off_100155DE0[a2 - 1];
        }
        sub_100015438(v21, v16);
        sub_1000FCF6C();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_100008C7C(&v24);
  }
  else
  {
    uint64_t v12 = *(sqlite3 **)(a1 + 32);
    BOOL v13 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v12)
    {
      if (v13)
      {
        uint64_t v14 = sqlite3_errmsg(v12);
        sub_1000FCF34((uint64_t)v14, (uint64_t)__p);
      }
    }
    else if (v13)
    {
      sub_1000FCED4();
    }
    BOOL v7 = 0;
  }
  sub_1000650BC(&v25, 0);
  return v7;
}

void sub_100085224(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100085230(uint64_t a1)
{
  BOOL v13 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM agg_session WHERE agg_session_end_boundary <= ?1", 1, &v13);
  if (v13)
  {
    uint64_t v12 = 0;
    memset(__p, 170, sizeof(__p));
    v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    sub_10001C968(v2.__d_.__rep_, (uint64_t)"%Y-%m-%dT%H:%M:%S");
    sub_1000089E8(a1, &v13, 1, (uint64_t)__p, &v12);
    int v3 = sub_10000AAD0(a1, &v13, &v12);
    BOOL v4 = v3 == 101;
    if (v3 != 101)
    {
      BOOL v5 = *(sqlite3 **)(a1 + 32);
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        if (v6)
        {
          BOOL v7 = sqlite3_errmsg(v5);
          sub_1000FD0BC((uint64_t)v7, (uint64_t)v14);
        }
      }
      else if (v6)
      {
        sub_1000FD05C();
      }
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v8 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FD024((uint64_t)v10, (uint64_t)__p);
      }
    }
    else if (v9)
    {
      sub_1000FCFC4();
    }
    BOOL v4 = 0;
  }
  sub_1000650BC(&v13, 0);
  return v4;
}

void sub_1000853CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000853D8(uint64_t a1)
{
  uint64_t v12 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM agg_session", 1, &v12);
  if (v12)
  {
    uint64_t v11 = 0;
    int v2 = sub_10000AAD0(a1, &v12, &v11);
    BOOL v3 = v2 == 101;
    if (v2 != 101)
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v5)
        {
          BOOL v6 = sqlite3_errmsg(v4);
          sub_1000FD1EC((uint64_t)v6, (uint64_t)v13);
        }
      }
      else if (v5)
      {
        sub_1000FD18C();
      }
    }
  }
  else
  {
    BOOL v7 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000FD154((uint64_t)v9, (uint64_t)v13);
      }
    }
    else if (v8)
    {
      sub_1000FD0F4();
    }
    BOOL v3 = 0;
  }
  sub_1000650BC(&v12, 0);
  return v3;
}

void sub_100085530(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10008553C(uint64_t a1, int a2)
{
  uint64_t v14 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(a1, "DELETE FROM agg_session WHERE agg_session_period = ?1", 1, &v14);
  if (v14)
  {
    uint64_t v13 = 0;
    v15[0] = a2;
    sub_10000B0E4(a1, &v14, 1, v15, &v13);
    int v4 = sub_10000AAD0(a1, &v14, &v13);
    BOOL v5 = v4 == 101;
    if (v4 != 101)
    {
      BOOL v6 = *(sqlite3 **)(a1 + 32);
      BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v7)
        {
          BOOL v8 = sqlite3_errmsg(v6);
          sub_1000FD31C((uint64_t)v8, (uint64_t)v15);
        }
      }
      else if (v7)
      {
        sub_1000FD2BC();
      }
    }
  }
  else
  {
    BOOL v9 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000FD284((uint64_t)v11, (uint64_t)v15);
      }
    }
    else if (v10)
    {
      sub_1000FD224();
    }
    BOOL v5 = 0;
  }
  sub_1000650BC(&v14, 0);
  return v5;
}

void sub_1000856B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000856C4(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: modifying for V1 schema", v12, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE queried_states\n         (\n          queried_state_id INTEGER PRIMARY KEY ASC,\n          queried_state_name STRING UNIQUE,\n          queried_state_params STRING,\n          queried_state_value STRING,\n          queried_state_error STRING,\n          queried_state_last_modified TEXT DEFAULT (strftime('%s', 'now')),\n          queried_state_ttl INTEGER,\n          CONSTRAINT queried_state_identifier UNIQUE (queried_state_name, queried_state_params)\n         )\n    ", 0, 0, 0);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000FD4E4((uint64_t)v6, (uint64_t)v12);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000FD484();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TRIGGER update_queried_state_last_modified_time AFTER UPDATE ON queried_states\n         BEGIN\n                 UPDATE queried_states SET queried_state_last_modified = strftime('%s', 'now') WHERE  queried_state_id = new.queried_state_id;\n"
           "         END\n"
           "    ",
           0,
           0,
           0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000FD44C((uint64_t)v9, (uint64_t)v12);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FD3EC();
      }
    }
    else
    {
      if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE UNIQUE INDEX index1 ON queried_states(queried_state_name, queried_state_params);",
              0,
              0,
              0))
        return sub_100064E08(a1, 1);
      BOOL v10 = *(sqlite3 **)(a1 + 32);
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v10)
      {
        if (!result) {
          return result;
        }
        uint64_t v11 = sqlite3_errmsg(v10);
        sub_1000FD3B4((uint64_t)v11, (uint64_t)v12);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FD354();
      }
    }
  }
  return 0;
}

void sub_1000858A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000858B0(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: modifying for V2 schema", v21, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE transform_states\n         (\n          transform_state_id INTEGER PRIMARY KEY ASC,\n          transform_uuid STRING,\n          transform_key STRING,\n          transform_value STRING,\n          CONSTRAINT fk_transform_states_transform_metadata FOREIGN KEY (transform_uuid) REFERENCES transform_metadata(transform_uuid)\n         )\n    ", 0, 0, 0);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000FD874((uint64_t)v6, (uint64_t)v21);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000FD814();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TABLE transform_metadata\n         (\n          transform_metdata_id INTEGER PRIMARY KEY ASC,\n          transform_type INTEGER,\n          transform_uuid STRING UNIQUE,\n          transform_budget_used INTEGER,\n          transform_other_metadata STRING DEFAULT 'null',\n          transform_metadata_created_at TEXT DEFAULT (strftime('%s', 'now'))\n         )\n    ", 0, 0, 0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000FD7DC((uint64_t)v9, (uint64_t)v21);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FD77C();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index2 ON transform_states(transform_uuid);",
              0,
              0,
              0);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000FD744((uint64_t)v12, (uint64_t)v21);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000FD6E4();
        }
      }
      else
      {
        int v13 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index3 ON transform_states(transform_key);",
                0,
                0,
                0);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000FD6AC((uint64_t)v15, (uint64_t)v21);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000FD64C();
          }
        }
        else
        {
          int v16 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE UNIQUE INDEX index4 ON transform_metadata(transform_uuid);",
                  0,
                  0,
                  0);
          int v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              unint64_t v18 = sqlite3_errmsg(v17);
              sub_1000FD614((uint64_t)v18, (uint64_t)v21);
            }
            else
            {
              if (!result) {
                return result;
              }
              sub_1000FD5B4();
            }
          }
          else
          {
            if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW transform_metadata_and_states AS\n           SELECT tm.transform_uuid, tm.transform_type, tm.transform_budget_used, tm.transform_other_metadata, tm.transform_metadata_created_at, tb.transform_key, tb.transform_value\n           FROM transform_states AS tb\n           INNER JOIN transform_metadata AS tm\n           ON tb.transform_uuid=tm.transform_uuid\n    ", 0, 0, 0))return sub_100064E08(a1, 2); {
            uint64_t v19 = *(sqlite3 **)(a1 + 32);
            }
            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
            if (v19)
            {
              if (!result) {
                return result;
              }
              unsigned __int8 v20 = sqlite3_errmsg(v19);
              sub_1000FD57C((uint64_t)v20, (uint64_t)v21);
            }
            else
            {
              if (!result) {
                return result;
              }
              sub_1000FD51C();
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_100085BBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100085BC8(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: modifying for V3 schema", v30, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         DROP VIEW transform_metadata_and_states;\n    ", 0, 0, 0);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000FDDCC((uint64_t)v6, (uint64_t)v30);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000FDD6C();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      ALTER TABLE transform_metadata\n      RENAME COLUMN transform_metdata_id TO transform_metadata_id;\n"
           "    ",
           0,
           0,
           0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000FDD34((uint64_t)v9, (uint64_t)v30);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FDCD4();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      CREATE TABLE transform_states_new\n      (\n       transform_state_id INTEGER PRIMARY KEY ASC,\n       transform_metadata_id INTEGER NOT NULL,\n       transform_key STRING,\n       transform_value STRING,\n       CONSTRAINT fk_transform_states_transform_metadata_id FOREIGN KEY (transform_metadata_id) REFERENCES transform_metadata(transform_metadata_id)\n      )\n    ", 0, 0, 0);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000FDC9C((uint64_t)v12, (uint64_t)v30);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000FDC3C();
        }
      }
      else
      {
        int v13 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         INSERT INTO transform_states_new (transform_state_id, transform_metadata_id, transform_key, transform_value) SELECT ts.transform_state_id, tm.transform_metadata_id, ts.transform_key, ts.transform_value\n           FROM transform_states AS ts\n           INNER JOIN transform_metadata AS tm\n           ON ts.transform_uuid=tm.transform_uuid;\n"
                "    ",
                0,
                0,
                0);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000FDC04((uint64_t)v15, (uint64_t)v30);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000FDBA4();
          }
        }
        else
        {
          int v16 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP TABLE transform_states;\n    ", 0, 0, 0);
          int v17 = *(sqlite3 **)(a1 + 32);
          if (v16)
          {
            BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
            if (v17)
            {
              if (!result) {
                return result;
              }
              unint64_t v18 = sqlite3_errmsg(v17);
              sub_1000FDB6C((uint64_t)v18, (uint64_t)v30);
            }
            else
            {
              if (!result) {
                return result;
              }
              sub_1000FDB0C();
            }
          }
          else
          {
            int v19 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      ALTER TABLE transform_states_new\n      RENAME TO transform_states;\n    ",
                    0,
                    0,
                    0);
            unsigned __int8 v20 = *(sqlite3 **)(a1 + 32);
            if (v19)
            {
              BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
              if (v20)
              {
                if (!result) {
                  return result;
                }
                unsigned __int8 v21 = sqlite3_errmsg(v20);
                sub_1000FDAD4((uint64_t)v21, (uint64_t)v30);
              }
              else
              {
                if (!result) {
                  return result;
                }
                sub_1000FDA74();
              }
            }
            else
            {
              int v22 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index2 ON transform_states(transform_metadata_id);",
                      0,
                      0,
                      0);
              uint64_t v23 = *(sqlite3 **)(a1 + 32);
              if (v22)
              {
                BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                if (v23)
                {
                  if (!result) {
                    return result;
                  }
                  unsigned __int8 v24 = sqlite3_errmsg(v23);
                  sub_1000FDA3C((uint64_t)v24, (uint64_t)v30);
                }
                else
                {
                  if (!result) {
                    return result;
                  }
                  sub_1000FD9DC();
                }
              }
              else
              {
                int v25 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX index3 ON transform_states(transform_key);",
                        0,
                        0,
                        0);
                uint64_t v26 = *(sqlite3 **)(a1 + 32);
                if (v25)
                {
                  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                  if (v26)
                  {
                    if (!result) {
                      return result;
                    }
                    uint64_t v27 = sqlite3_errmsg(v26);
                    sub_1000FD9A4((uint64_t)v27, (uint64_t)v30);
                  }
                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000FD944();
                  }
                }
                else
                {
                  if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE VIEW transform_metadata_and_states AS\n           SELECT tm.transform_uuid, tm.transform_type, tm.transform_budget_used, tm.transform_other_metadata, tm.transform_metadata_created_at, ts.transform_key, ts.transform_value, ts.transform_state_id, tm.transform_metadata_id\n           FROM transform_states AS ts\n           INNER JOIN transform_metadata AS tm\n           ON ts.transform_metadata_id=tm.transform_metadata_id\n    ", 0, 0, 0))return sub_100064E08(a1, 3); {
                  __int16 v28 = *(sqlite3 **)(a1 + 32);
                  }
                  BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
                  if (v28)
                  {
                    if (!result) {
                      return result;
                    }
                    unint64_t v29 = sqlite3_errmsg(v28);
                    sub_1000FD90C((uint64_t)v29, (uint64_t)v30);
                  }
                  else
                  {
                    if (!result) {
                      return result;
                    }
                    sub_1000FD8AC();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_100086000(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10008600C(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: modifying for V4 schema", v15, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      CREATE TABLE agg_session\n      (\n        agg_session_id INTEGER PRIMARY KEY ASC,\n        agg_session_start_timestamp TEXT DEFAULT (strftime('%Y-%m-%dT%H:%M:%S', 'now')),\n        agg_session_end_boundary TEXT,\n        agg_session_period INTEGER\n     )\n    ", 0, 0, 0);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000FE02C((uint64_t)v6, (uint64_t)v15);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000FDFCC();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      ALTER TABLE transform_metadata\n      ADD COLUMN agg_session_id INTEGER REFERENCES agg_session(agg_session_id)\n    ", 0, 0, 0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000FDF94((uint64_t)v9, (uint64_t)v15);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FDF34();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_agg_session_agg_session_end_boundary ON agg_session(agg_session_end_boundary);",
              0,
              0,
              0);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000FDEFC((uint64_t)v12, (uint64_t)v15);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000FDE9C();
        }
      }
      else
      {
        if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_agg_session_agg_session_period_agg_session_start_timestamp ON agg_session(agg_session_period, agg_session_start_timestamp);",
                0,
                0,
                0))
          return sub_100064E08(a1, 4);
        int v13 = *(sqlite3 **)(a1 + 32);
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v13)
        {
          if (!result) {
            return result;
          }
          uint64_t v14 = sqlite3_errmsg(v13);
          sub_1000FDE64((uint64_t)v14, (uint64_t)v15);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000FDE04();
        }
      }
    }
  }
  return 0;
}

void sub_100086250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_10008625C(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: modifying for V5 schema", v18, 2u);
  }
  int v3 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      ALTER TABLE transform_metadata\n      ADD COLUMN transform_event_count INTEGER DEFAULT 0\n    ", 0, 0, 0);
  int v4 = *(sqlite3 **)(a1 + 32);
  if (v3)
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!result) {
        return result;
      }
      BOOL v6 = sqlite3_errmsg(v4);
      sub_1000FE28C((uint64_t)v6, (uint64_t)v18);
    }
    else
    {
      if (!result) {
        return result;
      }
      sub_1000FE22C();
    }
  }
  else
  {
    int v7 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n     UPDATE transform_metadata SET transform_event_count=CAST(REPLACE(REPLACE(transform_other_metadata,'{\"eventsSeen_\":',''), '}', '') AS INTEGER) WHERE transform_other_metadata!=\"null\";\n"
           "    ",
           0,
           0,
           0);
    BOOL v8 = *(sqlite3 **)(a1 + 32);
    if (v7)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (!result) {
          return result;
        }
        BOOL v9 = sqlite3_errmsg(v8);
        sub_1000FE1F4((uint64_t)v9, (uint64_t)v18);
      }
      else
      {
        if (!result) {
          return result;
        }
        sub_1000FE194();
      }
    }
    else
    {
      int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      ALTER TABLE transform_metadata\n      DROP COLUMN transform_other_metadata;\n    ",
              0,
              0,
              0);
      uint64_t v11 = *(sqlite3 **)(a1 + 32);
      if (v10)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          if (!result) {
            return result;
          }
          uint64_t v12 = sqlite3_errmsg(v11);
          sub_1000FE15C((uint64_t)v12, (uint64_t)v18);
        }
        else
        {
          if (!result) {
            return result;
          }
          sub_1000FE0FC();
        }
      }
      else
      {
        int v13 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE INDEX IX_transform_metadata_transform_event_count ON transform_metadata(transform_event_count);",
                0,
                0,
                0);
        uint64_t v14 = *(sqlite3 **)(a1 + 32);
        if (v13)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v14)
          {
            if (!result) {
              return result;
            }
            int v15 = sqlite3_errmsg(v14);
            sub_1000FE0C4((uint64_t)v15, (uint64_t)v18);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000FE064();
          }
        }
        else
        {
          if (!sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP VIEW transform_metadata_and_states; CREATE VIEW transform_metadata_and_states AS\n"
                  "           SELECT transform_metadata.*, transform_states.*\n"
                  "           FROM transform_metadata\n"
                  "           LEFT JOIN transform_states\n"
                  "           ON transform_metadata.transform_metadata_id=transform_states.transform_metadata_id\n"
                  "    ",
                  0,
                  0,
                  0))
            return sub_100064E08(a1, 5);
          int v16 = *(sqlite3 **)(a1 + 32);
          BOOL result = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
          if (v16)
          {
            if (!result) {
              return result;
            }
            int v17 = sqlite3_errmsg(v16);
            sub_1000FD90C((uint64_t)v17, (uint64_t)v18);
          }
          else
          {
            if (!result) {
              return result;
            }
            sub_1000FD8AC();
          }
        }
      }
    }
  }
  return 0;
}

void sub_100086504(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_100086510(uint64_t a1)
{
  int v2 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n      CREATE TABLE queried_states_new\n      (\n       queried_state_id INTEGER PRIMARY KEY ASC,\n       queried_state_name STRING,\n       queried_state_params STRING,\n       queried_state_value STRING,\n       queried_state_error STRING,\n       queried_state_last_modified TEXT DEFAULT (strftime('%s', 'now')),\n       queried_state_ttl INTEGER\n     )\n    ", 0, 0, 0);
  int v3 = *(sqlite3 **)(a1 + 32);
  if (v2)
  {
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = sqlite3_errmsg(v3);
        sub_1000FE584((uint64_t)v5, (uint64_t)v22);
      }
    }
    else if (v4)
    {
      sub_1000FE524();
    }
    return 0;
  }
  int v6 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         INSERT INTO queried_states_new (queried_state_id, queried_state_name, queried_state_params, queried_state_value, queried_state_error, queried_state_last_modified, queried_state_ttl) SELECT qs.queried_state_id, qs.queried_state_name, qs.queried_state_params, qs.queried_state_value, qs.queried_state_error, qs.queried_state_last_modified, qs.queried_state_ttl\n           FROM queried_states AS qs;\n"
         "    ",
         0,
         0,
         0);
  int v7 = *(sqlite3 **)(a1 + 32);
  if (v6)
  {
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v8)
      {
        BOOL v9 = sqlite3_errmsg(v7);
        sub_1000FE4EC((uint64_t)v9, (uint64_t)v22);
      }
    }
    else if (v8)
    {
      sub_1000FE48C();
    }
    return 0;
  }
  int v10 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n        DROP TABLE queried_states; ALTER TABLE queried_states_new RENAME TO queried_states;\n    ",
          0,
          0,
          0);
  uint64_t v11 = *(sqlite3 **)(a1 + 32);
  if (v10)
  {
    BOOL v12 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v12)
      {
        int v13 = sqlite3_errmsg(v11);
        sub_1000FE454((uint64_t)v13, (uint64_t)v22);
      }
    }
    else if (v12)
    {
      sub_1000FE3F4();
    }
    return 0;
  }
  int v14 = sqlite3_exec(*(sqlite3 **)(a1 + 32), "\n         CREATE TRIGGER update_queried_state_last_modified_time AFTER UPDATE ON queried_states\n         BEGIN\n                 UPDATE queried_states SET queried_state_last_modified = strftime('%s', 'now') WHERE  queried_state_id = new.queried_state_id;\n"
          "         END\n"
          "    ",
          0,
          0,
          0);
  int v15 = *(sqlite3 **)(a1 + 32);
  if (v14)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v16)
      {
        int v17 = sqlite3_errmsg(v15);
        sub_1000FE3BC((uint64_t)v17, (uint64_t)v22);
      }
    }
    else if (v16)
    {
      sub_1000FE35C();
    }
    return 0;
  }
  if (sqlite3_exec(*(sqlite3 **)(a1 + 32), "CREATE UNIQUE INDEX UIX_queried_states_queried_state_name_queried_state_params ON queried_states(queried_state_name, queried_state_params);",
         0,
         0,
         0))
  {
    unint64_t v18 = *(sqlite3 **)(a1 + 32);
    BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v19)
      {
        unsigned __int8 v20 = sqlite3_errmsg(v18);
        sub_1000FE324((uint64_t)v20, (uint64_t)v22);
      }
    }
    else if (v19)
    {
      sub_1000FE2C4();
    }
    return 0;
  }

  return sub_100064E08(a1, 6);
}

void sub_1000867D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

BOOL sub_1000867E4(uint64_t a1)
{
  int v2 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[State Store] DATABASE INITIALIZATION: begin schema migration", (uint8_t *)&v12, 2u);
  }
  if (!sub_100064A50(a1))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
    if (!BYTE1(v13))
    {
      BOOL v4 = *(sqlite3 **)(a1 + 32);
      BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (!v4)
      {
        if (!v5) {
          goto LABEL_29;
        }
        goto LABEL_59;
      }
      if (!v5) {
        goto LABEL_29;
      }
LABEL_53:
      uint64_t v11 = sqlite3_errmsg(v4);
      sub_1000FE61C((uint64_t)v11, (uint64_t)v14);
      goto LABEL_29;
    }
    if (!sub_1000856C4(a1)) {
      goto LABEL_28;
    }
    sub_10000B278((uint64_t)&v12);
    sub_10000B128((uint64_t)&v12);
  }
  if (sub_100064A50(a1) != 1) {
    goto LABEL_8;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v6) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_1000858B0(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_8:
  if (sub_100064A50(a1) != 2) {
    goto LABEL_12;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v7) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_100085BC8(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_12:
  if (sub_100064A50(a1) != 3) {
    goto LABEL_16;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v8) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (!sub_10008600C(a1)) {
    goto LABEL_28;
  }
  sub_10000B278((uint64_t)&v12);
  sub_10000B128((uint64_t)&v12);
LABEL_16:
  if (sub_100064A50(a1) != 4)
  {
LABEL_20:
    if (sub_100064A50(a1) != 5) {
      return sub_100064A50(a1) == 6;
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
    if (BYTE1(v13))
    {
      if (sub_100086510(a1))
      {
        sub_10000B278((uint64_t)&v12);
        sub_10000B128((uint64_t)&v12);
        return sub_100064A50(a1) == 6;
      }
      goto LABEL_28;
    }
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (!v10) {
        goto LABEL_29;
      }
      goto LABEL_53;
    }
    if (!v10) {
      goto LABEL_29;
    }
LABEL_59:
    sub_1000FE5BC();
    goto LABEL_29;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v12, (void *)(a1 + 32));
  if (!BYTE1(v13))
  {
    BOOL v4 = *(sqlite3 **)(a1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (!v4)
    {
      if (!v9) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
    if (!v9) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
  if (sub_10008625C(a1))
  {
    sub_10000B278((uint64_t)&v12);
    sub_10000B128((uint64_t)&v12);
    goto LABEL_20;
  }
LABEL_28:
  sub_10005A644((uint64_t)&v12);
LABEL_29:
  sub_10000B128((uint64_t)&v12);
  return 0;
}

void sub_100086C10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100086C1C()
{
  return 6;
}

void sub_100086C24(long long *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xF8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *BOOL v6 = off_100155920;
  sub_100081610((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000106D4((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100086CBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100155920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100086CDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100155920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100086D30(uint64_t a1)
{
  return sub_100081774(a1 + 24, (uint64_t)&off_100155430);
}

sqlite3_stmt **sub_100086D44(uint64_t a1)
{
  uint64_t v1 = **(sqlite3_stmt ****)(a1 + 40);
  sub_1000650BC(v1 + 17, 0);
  sub_1000650BC(v1 + 18, 0);
  sub_1000650BC(v1 + 19, 0);
  sub_1000650BC(v1 + 20, 0);
  sub_1000650BC(v1 + 21, 0);
  sub_1000650BC(v1 + 22, 0);
  sub_1000650BC(v1 + 23, 0);
  sub_1000650BC(v1 + 24, 0);
  sub_1000650BC(v1 + 25, 0);
  sub_1000650BC(v1 + 26, 0);

  return sub_1000650BC(v1 + 27, 0);
}

BOOL sub_100086DF8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3_stmt **)(*v1 + 136);
  if (*v3
    || (sub_100064D6C(*v1, "INSERT OR REPLACE INTO queried_states (queried_state_name, queried_state_params, queried_state_value, queried_state_error, queried_state_ttl) VALUES (?1, ?2, ?3, ?4, ?5)", 1, (sqlite3_stmt **)buf), BOOL v4 = *(sqlite3_stmt **)buf, *(void *)buf = 0, sub_1000650BC(v3, v4), sub_1000650BC((sqlite3_stmt **)buf, 0), *(void *)(v2 + 136)))
  {
    uint64_t v23 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v23, v3);
    uint64_t v22 = 0;
    sub_1000089E8(v2, v3, 1, v1[1], &v22);
    memset(&v21, 170, sizeof(v21));
    sub_100007460(v1[2], -1, 0x20u, 0, 0, &v21);
    uint64_t v5 = v1[2];
    if (*(unsigned char *)v5 != 1 || !*(void *)(*(void *)(v5 + 8) + 16)) {
      std::string::assign(&v21, "");
    }
    sub_1000089E8(v2, v3, 2, (uint64_t)&v21, &v22);
    memset(__p, 170, sizeof(__p));
    sub_100007460(v1[3], -1, 0x20u, 0, 0, __p);
    if (*(unsigned char *)v1[3]) {
      sub_1000089E8(v2, v3, 3, (uint64_t)__p, &v22);
    }
    else {
      sub_100064CF4(v2, v3, 3, &v22);
    }
    sub_100064CF4(v2, v3, 4, &v22);
    *(void *)std::string buf = *(void *)(v1[3] + 24) / 1000000;
    sub_10000B0E4(v2, v3, 5, (sqlite3_int64 *)buf, &v22);
    int v6 = sub_10000AAD0(v2, v3, &v22);
    BOOL v7 = *(sqlite3 **)(v2 + 32);
    if (v6 == 101)
    {
      BOOL v8 = sqlite3_last_insert_rowid(*(sqlite3 **)(v2 + 32)) != 0;
    }
    else
    {
      BOOL v9 = qword_10015EF60;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v10)
        {
          uint64_t v11 = v1[1];
          if (*(char *)(v11 + 23) < 0) {
            uint64_t v11 = *(void *)v11;
          }
          int v12 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
          std::string::size_type v13 = v21.__r_.__value_.__r.__words[0];
          int v14 = sqlite3_errmsg(v7);
          int v15 = &v21;
          *(_DWORD *)std::string buf = 136315650;
          if (v12 < 0) {
            int v15 = (std::string *)v13;
          }
          *(void *)&uint8_t buf[4] = v11;
          __int16 v25 = 2080;
          uint64_t v26 = v15;
          __int16 v27 = 2080;
          __int16 v28 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[State Store] Failed to insert queried_state for stateName='%s' and params='%s'; %s",
            buf,
            0x20u);
        }
      }
      else if (v10)
      {
        sub_1000FE738();
      }
      BOOL v8 = 0;
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    sub_100008C7C(&v23);
  }
  else
  {
    int v17 = *(sqlite3 **)(v2 + 32);
    unint64_t v18 = qword_10015EF60;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v17)
    {
      if (v19) {
        sub_1000FE6B4(v17, v18);
      }
    }
    else if (v19)
    {
      sub_1000FE654();
    }
    return 0;
  }
  return v8;
}

void sub_100087158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,sqlite3_stmt *a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_100008C7C(&a22);
  _Unwind_Resume(a1);
}

void sub_1000871AC(uint64_t **a1)
{
  if (*((unsigned char *)a1 + 40))
  {
    sub_100016EAC((uint64_t)a1);
    sub_100016B28(a1 + 1, *(unsigned __int8 *)a1);
    *((unsigned char *)a1 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  }
}

BOOL sub_1000871E8(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT queried_state_name, queried_state_params, queried_state_value, queried_state_last_modified, queried_state_ttl FROM queried_states", 0, &v10);
  int v3 = *v1;
  BOOL v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  uint64_t v5 = **v1;
  if (!v5)
  {
    int v6 = *(sqlite3 **)(v2 + 32);
    BOOL v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000FE920(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000FE8C0();
    }
  }
  return v5 != 0;
}

uint64_t sub_1000872D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    if (**(void **)(v1 + 16))
    {
      uint64_t v7 = 1;
      **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
      **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
      **(void **)(v1 + 4sub_100027DA4((uint64_t)&a9, 0) = sub_100006A48(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
      **(void **)(v1 + 48) = sub_100006A48(v2, *(sqlite3_stmt ***)(v1 + 8), 4);
    }
    else
    {
      BOOL v8 = qword_10015EF60;
      uint64_t v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[State Store] WARNING: Iterate queried states weirdness: got a row but no state name? (iterate-queried-states)", v10, 2u);
      }
    }
  }
  else
  {
    if (v3 != 101)
    {
      BOOL v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000FEA00(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000FE9A0();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_10008747C(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_10008748C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3_stmt **)(*v1 + 152);
  if (*v3
    || (sub_100064D6C(*v1, "DELETE FROM queried_states WHERE queried_state_name=?1;", 1, v19),
        BOOL v4 = v19[0],
        v19[0] = 0,
        sub_1000650BC(v3, v4),
        sub_1000650BC(v19, 0),
        *(void *)(v2 + 152)))
  {
    unint64_t v18 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
    sub_100008C70(&v18, v3);
    uint64_t v17 = 0;
    uint64_t v6 = v1[1];
    uint64_t v5 = v1 + 1;
    sub_1000089E8(v2, v3, 1, v6, &v17);
    int v7 = sub_10000AAD0(v2, v3, &v17);
    BOOL v8 = *(sqlite3 **)(v2 + 32);
    if (v7 == 101)
    {
      BOOL v9 = sqlite3_changes(*(sqlite3 **)(v2 + 32)) > 0;
    }
    else
    {
      BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v10)
        {
          uint64_t v11 = *v5;
          if (*(char *)(v11 + 23) < 0) {
            uint64_t v11 = *(void *)v11;
          }
          int v12 = sqlite3_errmsg(v8);
          sub_1000FEBE0(v11, (uint64_t)v12, (uint64_t)v19);
        }
      }
      else if (v10)
      {
        sub_1000FEB64();
      }
      BOOL v9 = 0;
    }
    sub_100008C7C(&v18);
  }
  else
  {
    int v14 = *(sqlite3 **)(v2 + 32);
    int v15 = qword_10015EF60;
    BOOL v16 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v14)
    {
      if (v16) {
        sub_1000FEAE0(v14, v15);
      }
    }
    else if (v16)
    {
      sub_1000FEA80();
    }
    return 0;
  }
  return v9;
}

void sub_100087654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100008C7C((sqlite3_stmt **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100087674(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  int v12 = 0;
  sub_100064D6C(v1, "DELETE FROM queried_states;", 0, (sqlite3_stmt **)buf);
  uint64_t v2 = *(sqlite3_stmt **)buf;
  *(void *)std::string buf = 0;
  sub_1000650BC(&v12, v2);
  sub_1000650BC((sqlite3_stmt **)buf, 0);
  if (!v12)
  {
    uint64_t v5 = *(sqlite3 **)(v1 + 32);
    BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v6)
      {
        int v7 = sqlite3_errmsg(v5);
        sub_1000FEC28((uint64_t)v7, (uint64_t)buf);
      }
    }
    else if (v6)
    {
      sub_1000FEA80();
    }
    goto LABEL_16;
  }
  int v3 = qword_10015EF60;
  if (os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[State Store] Removing all queried states", buf, 2u);
  }
  *(void *)std::string buf = 0;
  if (sub_10000AAD0(v1, &v12, buf) != 101)
  {
    BOOL v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FECC0((uint64_t)v10, (uint64_t)buf);
      }
    }
    else if (v9)
    {
      sub_1000FEC60();
    }
LABEL_16:
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = 1;
LABEL_17:
  sub_1000650BC(&v12, 0);
  return v4;
}

void sub_100087824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100087848(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(sqlite3_stmt ***)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (**(void **)v1
    || (sub_100064D6C(*(void *)(v1 + 8), "SELECT transform_key, transform_value FROM transform_metadata_and_states WHERE transform_uuid=?1 ORDER BY transform_state_id", 1, &v12), uint64_t v4 = *(sqlite3_stmt ***)v1, v5 = v12, v12 = 0, sub_1000650BC(v4, v5), sub_1000650BC(&v12, 0), v2 = *(sqlite3_stmt ***)v1, **(void **)v1))
  {
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = 1;
    sub_100008A30(v3, v2, 1, v6);
  }
  else
  {
    BOOL v9 = *(sqlite3 **)(v3 + 32);
    BOOL v10 = qword_10015EF60;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v11) {
        sub_1000FEE3C(v9, v10);
      }
    }
    else if (v11)
    {
      sub_1000FEDDC();
    }
    return 0;
  }
  return v7;
}

uint64_t sub_100087950(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000FEF1C(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000FEEBC();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_100087A1C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 40);
  int v3 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100008C70(&v3, *v1);
  return sub_100008C7C(&v3);
}

BOOL sub_100087A84(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT transform_type, transform_uuid, transform_budget_used, transform_event_count, transform_metadata_created_at FROM transform_metadata ORDER BY transform_event_count DESC", 0, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  BOOL v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  uint64_t v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000FF0DC(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000FF07C();
    }
  }
  return v5 != 0;
}

uint64_t sub_100087B74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    int v7 = sub_100064D30(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    BOOL v8 = *(sqlite3_stmt ***)(v1 + 8);
    **(_DWORD **)(v1 + 16) = v7;
    uint64_t v9 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, v8, 1);
    **(_DWORD **)(v1 + 32) = sub_100006A48(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
    **(_DWORD **)(v1 + 4sub_100027DA4((uint64_t)&a9, 0) = sub_100006A48(v2, *(sqlite3_stmt ***)(v1 + 8), 3);
    sqlite3_int64 v10 = sub_100006A48(v2, *(sqlite3_stmt ***)(v1 + 8), 4);
    if ((v10 & 0x8000000000000000) == 0) {
      **(void **)(v1 + 48) = 1000000 * v10;
    }
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000FF1BC(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000FF15C();
      }
    }
    return 0;
  }
  return v9;
}

sqlite3_stmt **sub_100087C94(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_100087CA4(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT transform_metadata.transform_uuid, agg_session.agg_session_start_timestamp FROM transform_metadata JOIN agg_session ON transform_metadata.agg_session_id = agg_session.agg_session_id WHERE agg_session.agg_session_period = ?1", 1, &v11);
  int v3 = *v1;
  uint64_t v4 = v11;
  BOOL v11 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v11, 0);
  uint64_t v5 = *v1;
  BOOL v6 = **v1;
  if (v6)
  {
    BOOL v11 = (sqlite3_stmt *)*(int *)v1[2];
    sub_100064C88(v2, v5, 1, (sqlite3_int64 *)&v11);
  }
  else
  {
    int v7 = *(sqlite3 **)(v2 + 32);
    BOOL v8 = qword_10015EF60;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v9) {
        sub_1000FF29C(v7, v8);
      }
    }
    else if (v9)
    {
      sub_1000FF23C();
    }
  }
  return v6 != 0;
}

uint64_t sub_100087DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000FF37C(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000FF31C();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_100087E80(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

BOOL sub_100087E90(uint64_t a1)
{
  uint64_t v1 = *(sqlite3_stmt ****)(a1 + 40);
  uint64_t v2 = (uint64_t)v1[1];
  sub_100064D6C(v2, "SELECT transform_metadata.transform_uuid, agg_session.agg_session_start_timestamp, agg_session.agg_session_end_boundary FROM transform_metadata LEFT JOIN agg_session ON transform_metadata.agg_session_id = agg_session.agg_session_id", 1, &v10);
  int v3 = *v1;
  uint64_t v4 = v10;
  sqlite3_int64 v10 = 0;
  sub_1000650BC(v3, v4);
  sub_1000650BC(&v10, 0);
  uint64_t v5 = **v1;
  if (!v5)
  {
    BOOL v6 = *(sqlite3 **)(v2 + 32);
    uint64_t v7 = qword_10015EF60;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1000FF45C(v6, v7);
      }
    }
    else if (v8)
    {
      sub_1000FF3FC();
    }
  }
  return v5 != 0;
}

uint64_t sub_100087F80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1000090A4(*(void *)v1, *(sqlite3_stmt ***)(v1 + 8));
  if (v3 == 100)
  {
    **(void **)(v1 + 16) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 0);
    uint64_t v7 = 1;
    **(void **)(v1 + 24) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 1);
    **(void **)(v1 + 32) = sub_1000090E4(v2, *(sqlite3_stmt ***)(v1 + 8), 2);
  }
  else
  {
    if (v3 != 101)
    {
      uint64_t v4 = *(sqlite3 **)(v2 + 32);
      uint64_t v5 = qword_10015EF60;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        if (v6) {
          sub_1000FF53C(v4, v5);
        }
      }
      else if (v6)
      {
        sub_1000FF4DC();
      }
    }
    return 0;
  }
  return v7;
}

sqlite3_stmt **sub_100088064(uint64_t a1)
{
  return sub_1000650BC(**(sqlite3_stmt ****)(a1 + 40), 0);
}

uint64_t sub_100088074(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  int v3 = (sqlite3 **)(*v1 + 32);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v9, v3);
  if (!BYTE1(v10))
  {
    BOOL v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        BOOL v8 = sqlite3_errmsg(v6);
        sub_1000FF61C((uint64_t)v8, (uint64_t)v11);
      }
    }
    else if (v7)
    {
      sub_1000FF5BC();
    }
    goto LABEL_6;
  }
  if (!sub_100083EA8(v2, v1[1]) || !sub_100084160(v2, v1[1]))
  {
    sub_10005A644((uint64_t)&v9);
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = 1;
LABEL_7:
  sub_10000B128((uint64_t)&v9);
  return v4;
}

void sub_10008818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000881A8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v7, (void *)(v1 + 32));
  if (!BYTE1(v8))
  {
    uint64_t v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000FF6B4((uint64_t)v6, (uint64_t)v9);
      }
    }
    else if (v5)
    {
      sub_1000FF654();
    }
    goto LABEL_6;
  }
  if ((sub_100084364(v1) & 1) == 0 || (sub_1000844F4(v1) & 1) == 0)
  {
    sub_10005A644((uint64_t)&v7);
LABEL_6:
    uint64_t v2 = 0;
    goto LABEL_7;
  }
  uint64_t v2 = 1;
LABEL_7:
  sub_10000B128((uint64_t)&v7);
  return v2;
}

void sub_1000882B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000882D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = (sqlite3 **)(*(void *)v1 + 32);
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v9, v3);
  if (!BYTE1(v10))
  {
    BOOL v6 = *v3;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        unint64_t v8 = sqlite3_errmsg(v6);
        sub_1000FF74C((uint64_t)v8, (uint64_t)v11);
      }
    }
    else if (v7)
    {
      sub_1000FF6EC();
    }
    goto LABEL_6;
  }
  if (!sub_100084684(v2, **(_DWORD **)(v1 + 8)) || !sub_1000848CC(v2, **(_DWORD **)(v1 + 8)))
  {
    sub_10005A644((uint64_t)&v9);
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = 1;
LABEL_7:
  sub_10000B128((uint64_t)&v9);
  return v4;
}

void sub_1000883F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100088410(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v7, (void *)(v1 + 32));
  if (!BYTE1(v8))
  {
    uint64_t v4 = *(sqlite3 **)(v1 + 32);
    BOOL v5 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v5)
      {
        BOOL v6 = sqlite3_errmsg(v4);
        sub_1000FF74C((uint64_t)v6, (uint64_t)v9);
      }
    }
    else if (v5)
    {
      sub_1000FF6EC();
    }
    goto LABEL_6;
  }
  if (!sub_100084B14(v1) || !sub_100084CBC(v1))
  {
    sub_10005A644((uint64_t)&v7);
LABEL_6:
    uint64_t v2 = 0;
    goto LABEL_7;
  }
  uint64_t v2 = 1;
LABEL_7:
  sub_10000B128((uint64_t)&v7);
  return v2;
}

void sub_100088520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10008853C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v10 = (sqlite3_stmt *)0xAAAAAAAAAAAAAAAALL;
  sub_100064D6C(v1, "DELETE FROM agg_session", 1, &v10);
  if (!v10)
  {
    int v3 = *(sqlite3 **)(v1 + 32);
    BOOL v4 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = sqlite3_errmsg(v3);
        sub_1000FF7E4((uint64_t)v5, (uint64_t)v11);
      }
    }
    else if (v4)
    {
      sub_1000FF784();
    }
    goto LABEL_14;
  }
  v11[0] = 0;
  if (sub_10000AAD0(v1, &v10, v11) != 101)
  {
    BOOL v6 = *(sqlite3 **)(v1 + 32);
    BOOL v7 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v7)
      {
        unint64_t v8 = sqlite3_errmsg(v6);
        sub_1000FF87C((uint64_t)v8, (uint64_t)v11);
      }
    }
    else if (v7)
    {
      sub_1000FF81C();
    }
LABEL_14:
    uint64_t v2 = 0;
    goto LABEL_15;
  }
  uint64_t v2 = 1;
LABEL_15:
  sub_1000650BC(&v10, 0);
  return v2;
}

void sub_100088690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000650BC((sqlite3_stmt **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000886B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  int v3 = (sqlite3 **)(*(void *)v1 + 32);
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v18, v3);
  if (!BYTE1(v19))
  {
    unint64_t v8 = *v3;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = sqlite3_errmsg(v8);
        sub_1000FF914((uint64_t)v10, (uint64_t)&v20);
      }
    }
    else if (v9)
    {
      sub_1000FF8B4();
    }
    goto LABEL_17;
  }
  if (!sub_10008553C(v2, **(_DWORD **)(v1 + 8))) {
    goto LABEL_16;
  }
  int v4 = **(_DWORD **)(v1 + 8);
  v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v21 = v6;
  long long v22 = v6;
  long long v20 = v6;
  sub_1000576DC(v5.__d_.__rep_, (uint64_t)&v20);
  switch(v4)
  {
    case 0:
      long long v14 = v20;
      long long v15 = v21;
      long long v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_100057760((uint64_t)&v14).__d_.__rep_;
      break;
    case 1:
      long long v14 = v20;
      long long v15 = v21;
      long long v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_1000577EC((uint64_t)&v14).__d_.__rep_;
      break;
    case 2:
      long long v14 = v20;
      long long v15 = v21;
      long long v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_1000578BC((uint64_t)&v14).__d_.__rep_;
      break;
    case 3:
      long long v14 = v20;
      long long v15 = v21;
      long long v16 = v22;
      unint64_t v17 = v23;
      v7.__d_.__rep_ = sub_100057964((uint64_t)&v14).__d_.__rep_;
      break;
    default:
      v7.__d_.__rep_ = 0;
      break;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v7.__d_.__rep_;
  if (!sub_100084F84(v2, v4, &rep))
  {
LABEL_16:
    sub_10005A644((uint64_t)&v18);
LABEL_17:
    uint64_t v11 = 0;
    goto LABEL_18;
  }
  uint64_t v11 = 1;
LABEL_18:
  sub_10000B128((uint64_t)&v18);
  return v11;
}

void sub_1000888C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000B128((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000888F0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    uint64_t v2 = 0;
    while (1)
    {
      int v3 = dword_10011B570[v2];
      v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v20 = v5;
      long long v21 = v5;
      long long v19 = v5;
      sub_1000576DC(v4.__d_.__rep_, (uint64_t)&v19);
      switch(v3)
      {
        case 0:
          long long v13 = v19;
          long long v14 = v20;
          long long v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_100057760((uint64_t)&v13).__d_.__rep_;
          break;
        case 1:
          long long v13 = v19;
          long long v14 = v20;
          long long v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_1000577EC((uint64_t)&v13).__d_.__rep_;
          break;
        case 2:
          long long v13 = v19;
          long long v14 = v20;
          long long v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_1000578BC((uint64_t)&v13).__d_.__rep_;
          break;
        case 3:
          long long v13 = v19;
          long long v14 = v20;
          long long v15 = v21;
          unint64_t v16 = v22;
          v6.__d_.__rep_ = sub_100057964((uint64_t)&v13).__d_.__rep_;
          break;
        default:
          v6.__d_.__rep_ = 0;
          break;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
      if (!sub_100084F84(v1, v3, &rep)) {
        break;
      }
      if (++v2 == 4)
      {
        uint64_t v7 = 1;
        goto LABEL_17;
      }
    }
    sub_10005A644((uint64_t)&v17);
  }
  else
  {
    unint64_t v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = sqlite3_errmsg(v8);
        sub_1000FF9AC((uint64_t)v10, (uint64_t)&v19);
      }
    }
    else if (v9)
    {
      sub_1000FF94C();
    }
  }
  uint64_t v7 = 0;
LABEL_17:
  sub_10000B128((uint64_t)&v17);
  return v7;
}

void sub_100088B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000B128((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100088B34(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    if (sub_1000853D8(v1))
    {
      uint64_t v2 = 0;
      while (1)
      {
        int v3 = dword_10011B570[v2];
        v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v20 = v5;
        long long v21 = v5;
        long long v19 = v5;
        sub_1000576DC(v4.__d_.__rep_, (uint64_t)&v19);
        switch(v3)
        {
          case 0:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_100057760((uint64_t)&v13).__d_.__rep_;
            break;
          case 1:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_1000577EC((uint64_t)&v13).__d_.__rep_;
            break;
          case 2:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_1000578BC((uint64_t)&v13).__d_.__rep_;
            break;
          case 3:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_100057964((uint64_t)&v13).__d_.__rep_;
            break;
          default:
            v6.__d_.__rep_ = 0;
            break;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
        if (!sub_100084F84(v1, v3, &rep)) {
          break;
        }
        if (++v2 == 4)
        {
          uint64_t v7 = 1;
          goto LABEL_15;
        }
      }
    }
    sub_10005A644((uint64_t)&v17);
  }
  else
  {
    BOOL v9 = *(sqlite3 **)(v1 + 32);
    BOOL v10 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = sqlite3_errmsg(v9);
        sub_1000FFA44((uint64_t)v11, (uint64_t)&v19);
      }
    }
    else if (v10)
    {
      sub_1000FF9E4();
    }
  }
  uint64_t v7 = 0;
LABEL_15:
  sub_10000B128((uint64_t)&v17);
  return v7;
}

void sub_100088D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000B128((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100088D84(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  sub_10000B150((uint64_t)&v17, (void *)(v1 + 32));
  if (BYTE1(v18))
  {
    if (sub_100085230(v1))
    {
      uint64_t v2 = 0;
      while (1)
      {
        int v3 = dword_10011B570[v2];
        v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v20 = v5;
        long long v21 = v5;
        long long v19 = v5;
        sub_1000576DC(v4.__d_.__rep_, (uint64_t)&v19);
        switch(v3)
        {
          case 0:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_100057760((uint64_t)&v13).__d_.__rep_;
            break;
          case 1:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_1000577EC((uint64_t)&v13).__d_.__rep_;
            break;
          case 2:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_1000578BC((uint64_t)&v13).__d_.__rep_;
            break;
          case 3:
            long long v13 = v19;
            long long v14 = v20;
            long long v15 = v21;
            unint64_t v16 = v22;
            v6.__d_.__rep_ = sub_100057964((uint64_t)&v13).__d_.__rep_;
            break;
          default:
            v6.__d_.__rep_ = 0;
            break;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v6.__d_.__rep_;
        if (!sub_100084E64(v1, v3) && !sub_100084F84(v1, v3, &rep)) {
          break;
        }
        if (++v2 == 4)
        {
          uint64_t v7 = 1;
          goto LABEL_21;
        }
      }
    }
    sub_10005A644((uint64_t)&v17);
  }
  else
  {
    unint64_t v8 = *(sqlite3 **)(v1 + 32);
    BOOL v9 = os_log_type_enabled((os_log_t)qword_10015EF60, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (v9)
      {
        BOOL v10 = sqlite3_errmsg(v8);
        sub_1000FFADC((uint64_t)v10, (uint64_t)&v19);
      }
    }
    else if (v9)
    {
      sub_1000FFA7C();
    }
  }
  uint64_t v7 = 0;
LABEL_21:
  sub_10000B128((uint64_t)&v17);
  return v7;
}

void sub_100088FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000B128((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100088FE4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100088FFC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_100089020(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

void *sub_100089038(void *result, uint64_t a2)
{
  *BOOL result = off_100155E08;
  result[1] = a2;
  return result;
}

uint64_t sub_100089060(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v25 = a3;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v7;
  v23[1] = v7;
  sub_1000135DC(a4, (const std::string::value_type **)off_100152188, (uint64_t)v23);
  v40[0] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = v8;
  long long v39 = v8;
  BOOL v9 = (unsigned __int8 **)sub_1000136C8(&v38, a4);
  sub_100013648(v9);
  if (sub_100013964((unsigned __int8 **)v23, (unsigned __int8 **)&v38))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    sub_1000459F4((uint64_t)v32, "message");
    unint64_t v33 = v32;
    char v34 = 1;
    uint64_t v36 = sub_1000895E8((uint64_t)v35, "Input config has no transforms defined.");
    char v37 = 1;
    sub_10001200C((uint64_t)&v38, (uint64_t)v32, 2, 1, 2);
    *(void *)&long long v39 = &v38;
    BYTE8(v39) = 1;
    sub_100063038((uint64_t)v26, "source");
    __int16 v27 = v26;
    char v28 = 1;
    sub_100030238((uint64_t)v29, &v25);
    uint64_t v30 = v29;
    char v31 = 1;
    uint64_t v41 = sub_10001200C((uint64_t)v40, (uint64_t)v26, 2, 1, 2);
    char v42 = 1;
    sub_10001200C((uint64_t)v21, (uint64_t)&v38, 2, 1, 2);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, a2, v21);
    sub_100016EAC((uint64_t)v21);
    sub_100016B28(&v22, v21[0]);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      sub_100016EAC((uint64_t)&v40[i]);
      sub_100016B28((uint64_t **)&v40[i + 1], LOBYTE(v40[i]));
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      sub_100016EAC((uint64_t)&v29[j]);
      sub_100016B28((uint64_t **)&v29[j + 8], v29[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      sub_100016EAC((uint64_t)&v35[k]);
      sub_100016B28((uint64_t **)&v35[k + 8], v35[k]);
    }
  }
  else
  {
    if (*sub_100063118((unsigned __int8 **)v23) == 2) {
      return 1;
    }
    uint64_t v15 = *(void *)(a1 + 8);
    sub_1000459F4((uint64_t)v32, "message");
    unint64_t v33 = v32;
    char v34 = 1;
    uint64_t v36 = sub_100089680((uint64_t)v35, "Invalid type for the transform array");
    char v37 = 1;
    sub_10001200C((uint64_t)&v38, (uint64_t)v32, 2, 1, 2);
    *(void *)&long long v39 = &v38;
    BYTE8(v39) = 1;
    sub_100063038((uint64_t)v26, "source");
    __int16 v27 = v26;
    char v28 = 1;
    sub_100030238((uint64_t)v29, &v25);
    uint64_t v30 = v29;
    char v31 = 1;
    uint64_t v41 = sub_10001200C((uint64_t)v40, (uint64_t)v26, 2, 1, 2);
    char v42 = 1;
    sub_10001200C((uint64_t)v19, (uint64_t)&v38, 2, 1, 2);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v15 + 40))(v15, a2, v19);
    sub_100016EAC((uint64_t)v19);
    sub_100016B28(&v20, v19[0]);
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      sub_100016EAC((uint64_t)&v40[m]);
      sub_100016B28((uint64_t **)&v40[m + 1], LOBYTE(v40[m]));
    }
    for (uint64_t n = 0; n != -64; n -= 32)
    {
      sub_100016EAC((uint64_t)&v29[n]);
      sub_100016B28((uint64_t **)&v29[n + 8], v29[n]);
    }
    for (iuint64_t i = 0; ii != -64; ii -= 32)
    {
      sub_100016EAC((uint64_t)&v35[ii]);
      sub_100016B28((uint64_t **)&v35[ii + 8], v35[ii]);
    }
  }
  return 0;
}

void sub_100089478(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100089484(uint64_t a1)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v2;
  v14[1] = v2;
  sub_1000135DC(a1, (const std::string::value_type **)off_1001521A8, (uint64_t)v14);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v3;
  long long v12 = v3;
  sub_1000136C8(&v11, a1);
  sub_100013648((unsigned __int8 **)&v11);
  if (sub_100013964((unsigned __int8 **)v14, (unsigned __int8 **)&v11)) {
    return 0;
  }
  std::chrono::system_clock::time_point v4 = sub_100013AAC((unsigned __int8 **)v14);
  LOBYTE(v11) = -86;
  sub_100072884((char *)v4, &v11);
  if ((_BYTE)v11) {
    return 0;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v6;
  long long v12 = v6;
  sub_1000135DC(a1, (const std::string::value_type **)off_1001521B0, (uint64_t)&v11);
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[0] = v7;
  v9[1] = v7;
  sub_1000136C8(v9, a1);
  sub_100013648((unsigned __int8 **)v9);
  if (sub_100013964((unsigned __int8 **)&v11, (unsigned __int8 **)v9)
    || *sub_100063118((unsigned __int8 **)&v11) - 5 > 2)
  {
    return 1;
  }
  long long v8 = sub_100013AAC((unsigned __int8 **)&v11);
  LODWORD(v9[0]) = -1431655766;
  sub_100056798(v8, (int *)v9);
  if ((LODWORD(v9[0]) - 1) >= 2) {
    return 1;
  }
  else {
    return LODWORD(v9[0]);
  }
}

uint64_t sub_1000895E8(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_100089634(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_100089634(char *a1)
{
  long long v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_10008966C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100089680(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1000896CC(a2);
  sub_100016EAC(a1);
  sub_100016EAC(a1);
  return a1;
}

void *sub_1000896CC(char *a1)
{
  long long v2 = operator new(0x18uLL);
  sub_100015438(v2, a1);
  return v2;
}

void sub_100089704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100089718()
{
  char v0 = qword_10015EF18;
  if (os_log_type_enabled((os_log_t)qword_10015EF18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "[Sandboxing] Entering the sandbox", buf, 2u);
  }
  bzero(buf, 0x400uLL);
  if (!_set_user_dir_suffix() || !confstr(65537, (char *)buf, 0x400uLL))
  {
    long long v2 = (id)qword_10015EF18;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      long long v3 = __error();
      sub_1000FFBD8(v3, v6, v2);
    }

    exit(1);
  }
  uint64_t v1 = realpath_DARWIN_EXTSN((const char *)buf, 0);
  if (!v1)
  {
    std::chrono::system_clock::time_point v4 = (id)qword_10015EF18;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = __error();
      sub_1000FFC24(v5, v6, v4);
    }

    exit(1);
  }
  free(v1);
}

void sub_10008986C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089888(void *a1@<X8>)
{
  id v2 = (id)MGCopyAnswer();
  if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    sub_100015438(a1, (char *)[v2 UTF8String]);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10008991C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_100089930@<X0>(void *a1@<X8>)
{
  return sub_100015438(a1, "/System/Library/PrivateFrameworks/CoreAnalytics.framework/defaultConfig.json");
}

uint64_t sub_100089940()
{
  char v0 = sub_10005A7A0();
  if (*((char *)v0 + 23) < 0) {
    char v0 = *(long long **)v0;
  }
  uint64_t result = open((const char *)v0, 0x1000000);
  if (result != -1)
  {
    int v2 = result;
    if (fcntl(result, 63) != 4) {
      fcntl(v2, 64, 4);
    }
    return close(v2);
  }
  return result;
}

void *sub_1000899D4@<X0>(void *a1@<X8>)
{
  return sub_100015438(a1, "ips.ca.synced");
}

void sub_1000899E4()
{
  mach_service = xpc_connection_create_mach_service("com.apple.aggregated.addaily", 0, 0);
  if (mach_service)
  {
    connectiouint64_t n = mach_service;
    xpc_connection_set_event_handler(mach_service, &stru_100155E40);
    xpc_connection_resume(connection);
    xpc_object_t empty = xpc_dictionary_create_empty();
    int v2 = empty;
    if (empty)
    {
      xpc_dictionary_set_int64(empty, "operation", 3);
      xpc_connection_send_message(connection, v2);
    }

    mach_service = connection;
  }
}

void sub_100089A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100089AA4()
{
}

uint64_t sub_100089AF8(uint64_t a1)
{
  memset(&__p, 170, sizeof(__p));
  sub_10005A970(&__p);
  sub_1000F66C4((uint64_t)&__p, 0);
  int v2 = qword_10015EF58;
  if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v7 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[FwConfigWriter] Deleted framework config file at %s", buf, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_100089BE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100089BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = operator new(0x20uLL);
  *long long v6 = off_100155E70;
  v6[1] = a2;
  void v6[2] = a3;
  void v6[3] = a1;
  void v8[3] = v6;
  sub_10005A920((uint64_t)v8);
  sub_10001266C(v8);
  return a1;
}

void sub_100089CA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_100089CAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v12 = 0;
  long long v7 = operator new(0x20uLL);
  void *v7 = off_1001560A8;
  v7[1] = &v12;
  void v7[2] = a3;
  void v7[3] = a4;
  _OWORD v13[3] = v7;
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 176))(a2, v13);
  uint64_t result = (uint64_t)sub_100089E70(v13);
  unint64_t v9 = v12;
  for (uint64_t i = *a3; v9 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3); uint64_t i = *a3)
  {
    uint64_t v11 = i + 24 * v9;
    if (*(char *)(v11 + 23) < 0) {
      uint64_t v11 = *(void *)v11;
    }
    uint64_t result = sub_100089DF0(a4, v11);
    unint64_t v9 = v12 + 1;
    unint64_t v12 = v9;
  }
  return result;
}

void sub_100089DE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100089DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027A78();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_100089E70(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100089EF8()
{
}

__n128 sub_100089F0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100155E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100089F60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100155E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100089F98(uint64_t a1)
{
  memset(&v34, 170, sizeof(v34));
  sub_10005A970(&v34);
  sub_1000F66C4((uint64_t)&v34, 0);
  if (v2)
  {
    long long v3 = qword_10015EF58;
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = &v34;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v4 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[FwConfigWriter] Deleted framework config file at %s before writing a new one.", buf, 0xCu);
    }
  }
  sub_1000F5A40((const char *)&v34, 0, (int *)buf);
  if (*(_DWORD *)buf >= 2u) {
    __assert_rtn("operator()", "FrameworkConfigurationWriter.cpp", 62, "boost::filesystem::exists(allowlistPath) == false");
  }
  memset(buf, 170, sizeof(buf));
  sub_10008A8A4((void (__cdecl ***)(std::ofstream *__hidden))buf);
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  int v40 = -1431655766;
  int v33 = 0;
  uint64_t v37 = 0x1F09116A8;
  int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 232))(*(void *)(a1 + 8));
  int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 16);
  unint64_t v7 = (v5 + v6);
  int v38 = v5 + v6;
  memset(v32, 170, sizeof(v32));
  LODWORD(v44) = 0;
  sub_10008ACA8(v32, v7, &v44);
  int v8 = 4 * v7;
  uint64_t v9 = (4 * v7 + 24);
  int v31 = v8 + 24;
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry();
  unint64_t v10 = &buf[*(void *)(*(void *)buf - 24)];
  if ((v10[32] & 5) == 0)
  {
    uint64_t v11 = *((void *)v10 + 5);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v52 = v9;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 40))(v42);
    if (v43 == -1) {
      std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
    }
  }
  std::ostream::sentry::~sentry();
  LOBYTE(v44) = 10;
  sub_10008AD70(buf, (uint64_t)&v44, 1);
  ++v31;
  uint64_t v12 = *(void *)(a1 + 8);
  sub_10008B1E0(v42, **(void ***)(a1 + 16), (void *)(*(void *)(a1 + 16) + 8));
  unint64_t v13 = operator new(0x28uLL);
  *unint64_t v13 = off_100155EE0;
  v13[1] = v32;
  void v13[2] = &v33;
  _OWORD v13[3] = &v31;
  void v13[4] = buf;
  *((void *)&v45 + 1) = v13;
  sub_100089CAC((uint64_t)v13, v12, v42, (uint64_t)&v44);
  long long v14 = (void ***)sub_100089E70(&v44);
  *(void *)&long long v44 = v42;
  sub_10002A71C(v14);
  std::string __p = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v26 = 0xAAAAAAAAAAAAAA02;
  *(void *)&long long v44 = 0;
  v42[0] = 0;
  __int16 v27 = sub_10001220C((uint64_t *)&v44, v42);
  sub_100016EAC((uint64_t)&v26);
  uint64_t v15 = *(void *)(a1 + 8);
  *(void *)&long long v44 = off_100155F70;
  *((void *)&v44 + 1) = &__p;
  *(void *)&long long v45 = &v26;
  *((void *)&v45 + 1) = &v44;
  (*(void (**)(uint64_t, long long *))(*(void *)v15 + 216))(v15, &v44);
  sub_10008BA3C(&v44);
  if (v30 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v30 >= 0) {
    uint64_t v17 = HIBYTE(v30);
  }
  else {
    uint64_t v17 = v29;
  }
  sub_10008AD70(buf, (uint64_t)p_p, v17);
  unint64_t v18 = &buf[*(void *)(*(void *)buf - 24)];
  if ((v18[32] & 5) != 0)
  {
    int v19 = -1;
  }
  else
  {
    (*(void (**)(long long *__return_ptr))(**((void **)v18 + 5) + 32))(&v44);
    int v19 = v52;
  }
  int v40 = v19;
  LOBYTE(v44) = 10;
  sub_10008AD70(buf, (uint64_t)&v44, 1);
  sub_10008AA70((uint64_t *)buf, (uint64_t)&v26);
  long long v20 = &buf[*(void *)(*(void *)buf - 24)];
  if ((v20[32] & 5) != 0)
  {
    int v21 = -1;
  }
  else
  {
    (*(void (**)(long long *__return_ptr))(**((void **)v20 + 5) + 32))(&v44);
    int v21 = v52;
  }
  LODWORD(v39) = v21;
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  std::ostream::sentry::sentry();
  unint64_t v22 = &buf[*(void *)(*(void *)buf - 24)];
  if ((v22[32] & 5) == 0)
  {
    uint64_t v23 = *((void *)v22 + 5);
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v23 + 40))(v42);
    if (v43 == -1) {
      std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
    }
  }
  std::ostream::sentry::~sentry();
  HIDWORD(v39) = v31;
  std::ostream::write();
  unint64_t v24 = v32[0];
  __int16 v25 = v32[1];
  while (v24 != v25)
  {
    LODWORD(v44) = *v24;
    std::ostream::write();
    ++v24;
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  sub_100016EAC((uint64_t)&v26);
  sub_100016B28(&v27, v26);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_10008A6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostream::sentry::~sentry();
  sub_100016EAC((uint64_t)&a9);
  sub_100016B28(v33, a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008A858(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008A898()
{
}

void (__cdecl ***sub_10008A8A4(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  uint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10008AA38(_Unwind_Exception *a1)
{
}

uint64_t *sub_10008AA70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  memset(__b, 170, sizeof(__b));
  unint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_100156000;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_100156050;
  v7[1].__shared_owners_ = (uint64_t)a1;
  uint64_t v12 = v7 + 1;
  unint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  sub_100008670((uint64_t)__b, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    sub_1000147D8(v13);
  }
  sub_1000147D8(v7);
  sub_1000075F0(__b, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  sub_10000862C((uint64_t)__b);
  return a1;
}

void sub_10008AC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  sub_1000147D8(v12);
  sub_1000147D8(v12);
  _Unwind_Resume(a1);
}

void *sub_10008ACA8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10008AD2C(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_10008AD10(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10008AD2C(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100028DEC();
  }
  __n128 result = (char *)sub_1000233B0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_10008AD70(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v7 = *(void *)(v6 + 40);
  int v8 = *(_DWORD *)(v6 + 8);
  int v9 = *(_DWORD *)(v6 + 144);
  if (v9 == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unint64_t v10 = std::locale::use_facet(&v13, &std::ctype<char>::id);
    int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v13);
    *(_DWORD *)(v6 + 144) = v9;
  }
  if ((v8 & 0xB0) == 0x20) {
    uint64_t v11 = a2 + a3;
  }
  else {
    uint64_t v11 = a2;
  }
  if (!sub_10008AF6C(v7, a2, v11, a2 + a3, v6, (char)v9)) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10008AEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  if (a2)
  {
    std::ostream::sentry::~sentry();
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x10008AEA4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008AF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      memset(__p, 170, sizeof(__p));
      sub_10008B134(__p, v12, __c);
      std::locale v13 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_10008B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10008B134(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_10001C950();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void *sub_10008B1E0(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    int v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      int v5 = v7;
    }
    while (v7 != a3);
  }
  sub_10008B268(a1, a2, a3, v4);
  return a1;
}

void *sub_10008B268(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10004CAE4(result, a4);
    __n128 result = sub_10008B320((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10008B300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_10002A71C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_10008B320(uint64_t a1, void *a2, void *a3, void *__dst)
{
  unint64_t v4 = __dst;
  int64_t v12 = __dst;
  std::locale v13 = (char *)__dst;
  v14[0] = a1;
  v14[1] = &v12;
  _OWORD v14[2] = &v13;
  unint64_t v15 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_100017424(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 2);
        void v4[2] = v6[6];
        *(_OWORD *)unint64_t v4 = v7;
      }
      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v13 + 24;
      v13 += 24;
      uint64_t v6 = v9;
    }
    while (v9 != a3);
  }
  LOBYTE(v15) = 1;
  sub_100037CBC((uint64_t)v14);
  return v4;
}

void sub_10008B42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100037CBC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008B444()
{
}

__n128 sub_10008B458(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_100155EE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10008B4AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100155EE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

size_t sub_10008B4E4(uint64_t a1, const char **a2)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *a2;
  unint64_t v4 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(**(void **)(a1 + 8) + 4 * (*v4)++) = **(_DWORD **)(a1 + 24);
  int v5 = *(void **)(a1 + 32);
  size_t v6 = strlen(v3);
  sub_10008AD70(v5, (uint64_t)v3, v6);
  long long v7 = *(void **)(v2 + 8);
  char v9 = 0;
  sub_10008AD70(v7, (uint64_t)&v9, 1);
  size_t result = strlen(v3);
  **(_DWORD **)v2 += result + 1;
  return result;
}

uint64_t sub_10008B5B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008B5F8()
{
}

void sub_10008B608()
{
}

__n128 sub_10008B61C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100155F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10008B668(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100155F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10008B698(uint64_t a1, const char **a2, const std::string::value_type **a3)
{
  unint64_t v4 = *a2;
  int v5 = *a3;
  char v9 = *a3;
  if (!strcmp(v4, "CoreAnalyticsFramework"))
  {
    size_t v6 = *(std::string **)(a1 + 8);
    std::string::assign(v6, v5);
  }
  else
  {
    sqlite3_int64 v10[3] = 0;
    sub_10000DD74(&v9, (uint64_t)v10, 1, &v7);
    sub_10000DE9C(v10);
    sub_10008B874(*(void *)(a1 + 16), (uint64_t)&v7);
    sub_100016EAC((uint64_t)&v7);
    sub_100016B28(&v8, v7);
  }
}

void sub_10008B79C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10)
{
  sub_100016EAC((uint64_t)&a9);
  sub_100016B28(&a10, a9);
  if (a2 == 1)
  {
    std::locale v13 = __cxa_begin_catch(a1);
    uint64_t v14 = qword_10015EF58;
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_ERROR)) {
      sub_1000FFD48(v10, (uint64_t)v13, v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x10008B728);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008B828(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008B868()
{
}

uint64_t sub_10008B874(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 != 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      char v9 = (char *)sub_100029400((char *)a1);
      sub_100015438(&v12, v9);
      uint64_t v10 = std::string::insert(&v12, 0, "cannot use push_back() with ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
      long long v13 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_100029288(308, (uint64_t)&v13, exception);
    }
  }
  else
  {
    *(unsigned char *)a1 = 2;
    unint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    void v4[2] = 0;
    *unint64_t v4 = 0;
    *(void *)(a1 + 8) = v4;
    sub_100016EAC(a1);
  }
  int v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = v5[1];
  if (v6 >= v5[2])
  {
    uint64_t result = sub_100013F48(v5, a2);
  }
  else
  {
    sub_100016A10(v5[1], a2);
    uint64_t result = v6 + 16;
    v5[1] = v6 + 16;
  }
  v5[1] = result;
  return result;
}

void sub_10008B9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void *sub_10008BA3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10008BAC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100156000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008BAE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100156000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10008BB34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_10008BB5C(uint64_t a1)
{
  return std::ostream::put(*(void *)(a1 + 8));
}

uint64_t sub_10008BB64()
{
  return std::ostream::write();
}

void sub_10008BB70()
{
}

void sub_10008BB88()
{
}

__n128 sub_10008BB9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1001560A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10008BBF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001560A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10008BC28(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = **(void **)(a1 + 8);
  for (uint64_t i = **(void **)(a1 + 16);
        v4 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 16) + 8) - i) >> 3);
        uint64_t i = **(void **)(a1 + 16))
  {
    if ((std::string::compare((const std::string *)(i + 24 * v4), v3) & 0x80000000) == 0) {
      break;
    }
    unint64_t v6 = qword_10015EF58;
    if (os_log_type_enabled((os_log_t)qword_10015EF58, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = **(void **)(a1 + 16) + 24 * **(void **)(a1 + 8);
      if (*(char *)(v9 + 23) < 0) {
        uint64_t v9 = *(void *)v9;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v12 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[FwConfigWriter] Adding additionally requested event %s to the allowlist.", buf, 0xCu);
    }
    uint64_t v7 = **(void **)(a1 + 16) + 24 * **(void **)(a1 + 8);
    if (*(char *)(v7 + 23) < 0) {
      uint64_t v7 = *(void *)v7;
    }
    sub_100089DF0(*(void *)(a1 + 24), v7);
    BOOL v8 = *(unint64_t **)(a1 + 8);
    unint64_t v4 = *v8 + 1;
    unint64_t *v8 = v4;
  }
  return sub_100089DF0(*(void *)(a1 + 24), (uint64_t)v3);
}

uint64_t sub_10008BDB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008BDF8()
{
}

void sub_10008BF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008BFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C2C0(_Unwind_Exception *a1)
{
  BOOL v8 = v5;

  if (*(unsigned char *)(v3 + 24))
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10008C5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10008C5FC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  uint64_t v2 = qword_10015EF78;
  if (os_log_type_enabled((os_log_t)qword_10015EF78, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      uint64_t v3 = "YES";
    }
    else {
      uint64_t v3 = "NO";
    }
    int v5 = 136446210;
    unint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[WirelessTrialStateRelay] WirelessTrialIdentifier: subscribeToTrial: trialCallbackReceived: %{public}s", (uint8_t *)&v5, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained refreshWirelessTrialIdentifier];
}

void sub_10008C6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C840()
{
  sub_100015438(qword_10015EE38, "wirelessTrialIdentifier");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10015EE38, (void *)&_mh_execute_header);
}

char *sub_10008C8B0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_100156248;
  *((void *)v2 + 9) = 0;
  *(_OWORD *)(v2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_DWORD *)v2 + 18) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  __n128 result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t sub_10008C91C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  sub_10004038C(a1 + 16);
  return a1;
}

void sub_10008C958(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  sub_10008D3F0(a1 + 16);
  *(unsigned char *)a1 = 0;
  uint64_t v3 = IOReportCopyChannelsInCategories();
  if (v3)
  {
    unint64_t v4 = (const void *)v3;
    IOReportPrune();
    Subscriptiouint64_t n = IOReportCreateSubscription();
    if (Subscription)
    {
      unint64_t v6 = (const void *)Subscription;
      *(void *)(a1 + 8) = IOReportCreateSamples();
      CFRelease(v6);
    }
    CFRelease(v4);
    *(unsigned char *)a1 = 1;
  }
}

int sub_10008CA48(id a1, __CFDictionary *a2)
{
  return 16 * (IOReportChannelGetFormat() != 1);
}

void sub_10008CA70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x4002000000;
  __int16 v25 = sub_10008CE50;
  unint64_t v26 = sub_10008CE74;
  uint64_t v27 = 0;
  v28[0] = 0;
  v28[1] = 0;
  if (*(unsigned char *)a1)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"IOReportChannelGroups");
    if (!Value)
    {
      unint64_t v15 = qword_10015EF20;
      if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR)) {
        sub_100100134((uint64_t *)a2, v15);
      }
      goto LABEL_35;
    }
    if (*(char *)(a2 + 23) >= 0) {
      BOOL v8 = (const char *)a2;
    }
    else {
      BOOL v8 = *(const char **)a2;
    }
    CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(Value, v9);
    if (v10)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        if (!*(void *)(a3 + 8))
        {
LABEL_29:
          CFStringRef v16 = 0;
LABEL_30:
          IOReportIterate();
LABEL_31:
          if (v9) {
            CFRelease(v9);
          }
          if (v16) {
            CFRelease(v16);
          }
LABEL_35:
          uint64_t v21 = v23;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)a4 = 0;
          sub_10008D448((char *)a4, (long long *)v21[5], (long long *)v21[6], 0xAAAAAAAAAAAAAAABLL * ((v21[6] - v21[5]) >> 3));
          goto LABEL_36;
        }
        long long v11 = *(const char **)a3;
      }
      else
      {
        long long v11 = (const char *)a3;
        if (!*(unsigned char *)(a3 + 23)) {
          goto LABEL_29;
        }
      }
      CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
      CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"IOReportChannelGroups");
      if (v17 && CFDictionaryGetValue(v17, v16)) {
        goto LABEL_30;
      }
    }
    else
    {
      CFStringRef v16 = 0;
    }
    unint64_t v18 = qword_10015EF20;
    if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = *(void *)a2;
      }
      if (*(char *)(a3 + 23) >= 0) {
        long long v20 = (const char *)a3;
      }
      else {
        long long v20 = *(const char **)a3;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v30 = 2080;
      int v31 = v20;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[IOReporter] ERROR: Could not find Channel Group(%s) - Subgroup (%s) pair.", buf, 0x16u);
    }
    goto LABEL_31;
  }
  uint64_t v12 = qword_10015EF20;
  if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[IOReporter] ERROR: Channels not yet sampled.", buf, 2u);
    std::string::size_type v14 = (long long **)(v23 + 5);
    long long v13 = (long long **)(v23 + 6);
  }
  else
  {
    long long v13 = (long long **)v28;
    std::string::size_type v14 = (long long **)&v27;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_10008D448((char *)a4, *v14, *v13, 0xAAAAAAAAAAAAAAABLL * (((char *)*v13 - (char *)*v14) >> 3));
LABEL_36:
  _Block_object_dispose(&v22, 8);
  *(void *)std::string buf = &v27;
  sub_10002A71C((void ***)buf);
}

void sub_10008CE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(void *)(v8 - 96) = v7;
  sub_10002A71C((void ***)(v8 - 96));
  _Unwind_Resume(a1);
}

__n128 sub_10008CE50(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_100027DA4((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_10008CE74(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_10002A71C(&v1);
}

void sub_10008CECC()
{
  CFStringRef ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  sub_10008D0A8(ChannelName);
}

void sub_10008D074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10008D0A8(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

unint64_t sub_10008D13C(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v7 = qword_10015EF20;
    if (os_log_type_enabled((os_log_t)qword_10015EF20, OS_LOG_TYPE_ERROR)) {
      sub_1001001BC(v7);
    }
    goto LABEL_7;
  }
  uint64_t v3 = (void *)(a1 + 16);
  unint64_t v4 = sub_100010388((void *)(a1 + 16), a2);
  if (!v4)
  {
    IOReportIterate();
    unint64_t v4 = sub_100010388(v3, a2);
    if (!v4)
    {
LABEL_7:
      LOBYTE(v5) = 0;
      unint64_t v6 = 0;
      return v6 | v5;
    }
  }
  uint64_t v5 = *((void *)v4 + 5);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  return v6 | v5;
}

void sub_10008D268()
{
  CFStringRef ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  sub_10008D0A8(ChannelName);
}

void sub_10008D34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D370(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100156248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008D390(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100156248;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10008D3E4(uint64_t a1)
{
  return sub_10008C91C(a1 + 24);
}

void sub_10008D3F0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000403C8(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

char *sub_10008D448(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10004CAE4(result, a4);
    __n128 result = sub_10008D500((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_10008D4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_10002A71C((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_10008D500(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  CFStringRef v9 = __dst;
  CFDictionaryRef v10 = __dst;
  v11[0] = a1;
  v11[1] = &v9;
  __n128 v11[2] = &v10;
  unint64_t v12 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100017424(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v10;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      CFDictionaryRef v10 = v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v12) = 1;
  sub_100037CBC((uint64_t)v11);
  return v4;
}

void sub_10008D5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100037CBC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008D5F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000141F4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    std::string::size_type v14 = *(void ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_100014470(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  }
  CFDictionaryRef v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  unint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)unint64_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_1000400E0(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v13);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *CFDictionaryRef v17 = i;
  *(void *)(v26 + 8 * v13) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_10008D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_10004032C(v12, v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10008D8B8(uint64_t a1)
{
  sub_100016EAC(a1 + 40);
  sub_100016B28((uint64_t **)(a1 + 48), *(unsigned __int8 *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10008D90C(long long *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v6[0] = *(unsigned char *)a2;
  long long v7 = *(uint64_t **)(a2 + 8);
  sub_100016EAC(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_100016EAC((uint64_t)v6);
  sub_100010910((uint64_t)v8, a1, (uint64_t)v6, 0, 0);
  sub_10001075C((uint64_t)v8, a3);
  sub_100016EAC((uint64_t)v12);
  sub_100016B28(&v13, v12[0]);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_100016EAC((uint64_t)v6);
  sub_100016B28(&v7, v6[0]);
}

void sub_10008DA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void *sub_10008DA34@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10008DFAC(a1, a2);
}

void sub_10008DA88(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)a1[4];
    a1[3] = v3;
    a1[4] = v4;
    if (v5)
    {
      sub_1000147D8(v5);
      uint64_t v3 = a1[3];
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    unint64_t v10 = 0;
    char v11 = 0;
    uint64_t v6 = a1[1];
    uint64_t v12 = 0;
    __p[0] = off_100156350;
    __p[1] = a1;
    __p[2] = &v10;
    __p[3] = __p;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 24))(v6, __p);
    sub_10008E398(__p);
    long long v7 = v10;
    for (i = v11; v7 != i; long long v7 = (long long *)((char *)v7 + 24))
    {
      memset(__p, 170, 24);
      if (*((char *)v7 + 23) < 0)
      {
        sub_100017424(__p, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v9 = *v7;
        __p[2] = *((void **)v7 + 2);
        *(_OWORD *)std::string __p = v9;
      }
      (*(void (**)(void, void **))(*(void *)a1[1] + 40))(a1[1], __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = &v10;
    sub_10002A71C((void ***)__p);
  }
}

void sub_10008DC3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

uint64_t sub_10008DC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    BOOL v6 = *(unsigned char *)(a4 + 32) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  return (*(uint64_t (**)(void))(*(void *)v5 + 16))();
}

uint64_t sub_10008DC88(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v3();
  }
  return result;
}

uint64_t sub_10008DD1C(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8))) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v3();
  }
  return result;
}

uint64_t sub_10008DDBC(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3) & v2;
  }
  return v2;
}

void *sub_10008DE3C(void *a1)
{
  *a1 = off_100156298;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000147D8(v3);
  }
  return a1;
}

void sub_10008DE94(void *a1)
{
  *a1 = off_100156298;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000147D8(v3);
  }

  operator delete();
}

__n128 *sub_10008DF0C(__n128 *a1, __n128 *a2)
{
  a1->n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  sub_10008DF40(a1, a2);
  return a1;
}

__n128 sub_10008DF40(__n128 *a1, __n128 *a2)
{
  if (a2[2].n128_u8[8])
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    a1->n128_u64[1] = a2->n128_u64[1];
    sub_100016EAC((uint64_t)a2);
    a2->n128_u8[0] = 0;
    a2->n128_u64[1] = 0;
    sub_100016EAC((uint64_t)a1);
    __n128 result = a2[1];
    a1[2].n128_u8[0] = a2[2].n128_u8[0];
    a1[1] = result;
    a1[2].n128_u8[8] = 1;
  }
  return result;
}

void *sub_10008DFAC@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __n128 result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *__n128 result = off_100156300;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  result[3] = off_100156298;
  result[4] = v6;
  result[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[6] = 0;
  result[7] = 0;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_10008E038(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100156300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10008E058(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100156300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10008E0AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10008E0D8()
{
}

__n128 sub_10008E0EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100156350;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10008E138(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100156350;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10008E168(uint64_t result, long long *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v5 = result;
    (*(void (**)(void))(**(void **)(*(void *)(result + 8) + 24) + 16))(*(void *)(*(void *)(result + 8) + 24));
    uint64_t v6 = *(uint64_t **)(v5 + 16);
    unint64_t v7 = v6[1];
    if (v7 >= v6[2])
    {
      __n128 result = sub_10008E240(v6, a2);
    }
    else
    {
      sub_1000518DC(v6, a2);
      __n128 result = v7 + 24;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t sub_10008E1F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008E234()
{
}

uint64_t sub_10008E240(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100028DEC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10002AC98(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  char v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  CFDictionaryRef v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v11, *(void **)a2, *((void *)a2 + 1));
    char v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v12;
  }
  unint64_t v16 = v11 + 24;
  sub_10002AC20(a1, v15);
  uint64_t v13 = a1[1];
  sub_10002AE30((uint64_t)v15);
  return v13;
}

void sub_10008E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10008E398(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10008E41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = qword_10015ED90;
  if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_DEFAULT))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    long long v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[%{public}s] PROGRESS: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10008E520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = qword_10015ED90;
  if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    long long v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] INFO: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10008E624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = qword_10015ED90;
  if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_INFO))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    long long v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[%{public}s] WARNING: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10008E728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = qword_10015ED90;
  if (os_log_type_enabled((os_log_t)qword_10015ED90, OS_LOG_TYPE_ERROR))
  {
    sub_100007460(a3, -1, 0x20u, 0, 1, __p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v10 = a2;
    __int16 v11 = 2082;
    long long v12 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[%{public}s] ERROR: %{public}s", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10008E834(uint64_t a1)
{
  nullsub_13(a1);

  operator delete();
}

void sub_10008E86C()
{
}

void sub_10008E904(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void *sub_10008E944(void *a1, void *a2)
{
  sub_100015438(__p, "com.apple.analyticsd.messagetracer");
  sub_10008EF78(a1, (const void **)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_100156438;
  return a1;
}

void sub_10008E9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008EA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = qword_10015EF80;
  if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_DEBUG)) {
    sub_10010022C(v5);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96), a3);
}

uint64_t sub_10008EA94(uint64_t a1)
{
  *(void *)a1 = off_100156508;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_1000147D8(v2);
  }
  unint64_t v5 = (void **)(a1 + 72);
  sub_10008EC40(&v5);
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_10004085C(a1 + 8);
  return a1;
}

void sub_10008EB54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10008EB60(uint64_t a1)
{
  *(void *)a1 = off_100156508;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_1000147D8(v2);
  }
  unint64_t v4 = (void **)(a1 + 72);
  sub_10008EC40(&v4);
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_10004085C(a1 + 8);
  operator delete();
}

void sub_10008EC34(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10008EC40(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (xpc_connection_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (xpc_connection_t *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        unint64_t v4 = sub_10008ECC4(v4 - 1);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

xpc_connection_t *sub_10008ECC4(xpc_connection_t *a1)
{
  if (xpc_get_type(*a1) == (xpc_type_t)&_xpc_type_connection) {
    xpc_connection_cancel(*a1);
  }
  xpc_release(*a1);
  *a1 = 0;
  return a1;
}

void sub_10008ED1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10008ED9C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10008EE74);
  __cxa_rethrow();
}

void sub_10008EDC4(_Unwind_Exception *a1)
{
}

void sub_10008EDDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10008EE14(uint64_t a1)
{
}

uint64_t sub_10008EE30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10008EE74(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void sub_10008EEA0()
{
}

void sub_10008EF38(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void *sub_10008EF78(void *a1, const void **a2, void *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = __p;
  sub_100044D88((uint64_t)__p, v6 + 4);
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".XPC");
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (void **)__p[0];
  }
  uint64_t v10 = dispatch_queue_create((const char *)v9, 0);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v10;
  if (v10)
  {
    __int16 v11 = v10;
    dispatch_retain(v10);
    dispatch_release(v11);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_100156508;
  long long v12 = a1 + 4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100017424(v12, (void *)*a2, (unint64_t)a2[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)a2;
    a1[6] = a2[2];
    *(_OWORD *)long long v12 = v13;
  }
  a1[7] = xpc_null_create();
  a1[8] = dispatch_group_create();
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = *a3;
  uint64_t v14 = a3[1];
  a1[13] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_10008F124(_Unwind_Exception *a1)
{
  sub_10004085C(v1);
  _Unwind_Resume(a1);
}

void *sub_10008F150(void *a1, void *a2)
{
  sub_100015438(__p, "com.apple.analyticsd");
  sub_10008EF78(a1, (const void **)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10008F1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008F200(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v3 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10008FC10;
  block[3] = &unk_100156650;
  void block[4] = v1;
  void block[5] = &v3;
  dispatch_sync(v2, block);
}

void sub_10008F2A8(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  uint64_t v7 = a1;
  unint64_t v5 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10008FE04;
  block[3] = &unk_1001566A0;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v5, block);
  char v6 = *(NSObject **)(a1 + 64);
  *a2 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
}

void sub_10008F370(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_10008F46C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10008F47C(uint64_t a1)
{
  if (xpc_get_type(*(xpc_object_t *)(a1 + 56)) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v2 = qword_10015EF80;
    if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      int v7 = 136446210;
      char v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[%{public}s XPC Server] Suspending server", (uint8_t *)&v7, 0xCu);
    }
    xpc_connection_suspend(*(xpc_connection_t *)(a1 + 56));
    unint64_t v5 = *(_xpc_connection_s ***)(a1 + 72);
    uint64_t v4 = *(_xpc_connection_s ***)(a1 + 80);
    while (v5 != v4)
    {
      char v6 = *v5++;
      xpc_connection_suspend(v6);
    }
  }
}

void sub_10008F56C(uint64_t a1)
{
  v1[0] = 0xAAAAAAAAAAAAAAAALL;
  v1[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v1, (void *)(a1 + 8));
  operator new();
}

void sub_10008F668(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10008F678(uint64_t a1)
{
  if (xpc_get_type(*(xpc_object_t *)(a1 + 56)) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v2 = qword_10015EF80;
    if (os_log_type_enabled((os_log_t)qword_10015EF80, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      int v7 = 136446210;
      char v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[%{public}s XPC Server] Resuming server", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v4 = *(_xpc_connection_s ***)(a1 + 72);
    unint64_t v5 = *(_xpc_connection_s ***)(a1 + 80);
    while (v4 != v5)
    {
      char v6 = *v4++;
      xpc_connection_resume(v6);
    }
    xpc_connection_resume(*(xpc_connection_t *)(a1 + 56));
  }
}

xpc_object_t *sub_10008F770(xpc_object_t *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    unint64_t v5 = a2;
  }
  else
  {
    unint64_t v5 = a1;
    while (!xpc_equal(*v5, *a3))
    {
      if (++v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      if (!xpc_equal(*i, *a3)) {
        sub_10008FFB8(v5++, i);
      }
    }
  }
  return v5;
}

xpc_object_t *sub_10008F808(uint64_t a1, xpc_object_t *a2, xpc_connection_t *a3)
{
  if (a2 != (xpc_object_t *)a3)
  {
    unint64_t v5 = a3;
    char v6 = *(xpc_object_t **)(a1 + 8);
    if (a3 == (xpc_connection_t *)v6)
    {
      char v8 = a2;
    }
    else
    {
      uint64_t v7 = ((char *)a3 - (char *)a2) >> 3;
      char v8 = a2;
      do
      {
        sub_10008FFB8(v8, &v8[v7]);
        ++v8;
      }
      while (&v8[v7] != v6);
      unint64_t v5 = *(xpc_connection_t **)(a1 + 8);
    }
    while (v5 != (xpc_connection_t *)v8)
      unint64_t v5 = sub_10008ECC4(v5 - 1);
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

void sub_10008F8A8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_10008F8B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 48))();
}

uint64_t sub_10008F8E0(uint64_t a1)
{
  *(void *)a1 = off_100156508;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_1000147D8(v2);
  }
  unint64_t v5 = (void **)(a1 + 72);
  sub_10008EC40(&v5);
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_10004085C(a1 + 8);
  return a1;
}

void sub_10008F9A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10008F9AC(uint64_t a1)
{
  *(void *)a1 = off_100156508;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_1000147D8(v2);
  }
  uint64_t v4 = (void **)(a1 + 72);
  sub_10008EC40(&v4);
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_10004085C(a1 + 8);
  operator delete();
}

void sub_10008FA80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_10008FA8C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10008FB0C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_10008FBE4);
  __cxa_rethrow();
}

void sub_10008FB34(_Unwind_Exception *a1)
{
}

void sub_10008FB4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10008FB84(uint64_t a1)
{
}

uint64_t sub_10008FBA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10008FBE4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void sub_10008FC10(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = (const char *)(v1 + 32);
  if (*(char *)(v1 + 55) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  mach_service = xpc_connection_create_mach_service(v2, *(dispatch_queue_t *)(v1 + 24), 1uLL);
  if ((mach_service || (mach_service = xpc_null_create()) != 0)
    && xpc_get_type(mach_service) == (xpc_type_t)&_xpc_type_connection)
  {
    xpc_retain(mach_service);
    xpc_object_t v4 = mach_service;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_object_t v5 = xpc_null_create();
  char v6 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = v4;
  xpc_release(v6);
  xpc_release(v5);
  xpc_release(mach_service);
  sub_10000FB4C(&v10, (void *)(v1 + 8));
  char v8 = v10;
  uint64_t v7 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
    sub_1000147D8(v7);
  }
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 64));
  unint64_t v9 = *(_xpc_connection_s **)(v1 + 56);
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1174405120;
  long long v12 = sub_1000030BC;
  long long v13 = &unk_100156670;
  uint64_t v14 = v1;
  unint64_t v15 = v8;
  unint64_t v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_connection_set_event_handler(v9, &v10);
  sub_10008F678(v1);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_10008FDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_10008FE04(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  if (xpc_get_type(*(xpc_object_t *)(*v1 + 56)) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v3 = *(_xpc_connection_s **)(v2 + 56);
    xpc_connection_cancel(v3);
  }
}

void sub_10008FE60(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_10008F47C(**a1);
  operator delete();
}

void sub_10008FEE0()
{
}

void sub_10008FF0C(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_10008F678(**a1);
  operator delete();
}

void sub_10008FF8C()
{
}

xpc_object_t *sub_10008FFB8(xpc_object_t *a1, xpc_object_t *a2)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v6 = *a2;
  *a2 = v4;
  sub_100090044(a1, &v6);
  sub_10008ECC4((xpc_connection_t *)&v6);
  return a1;
}

void sub_100090038(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100028DD8(a1);
}

void sub_100090044(xpc_object_t *a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a1;
  *a1 = xpc_null_create();
  xpc_object_t v5 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v6 = *a1;
  *a1 = v5;
  xpc_release(v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = *a2;
  *a2 = v4;
  xpc_release(v8);
  xpc_release(v7);
}

void *sub_1000900C8(void *a1, void *a2)
{
  xpc_object_t v4 = xpc_null_create();
  *a1 = v4;
  *a1 = *a2;
  *a2 = v4;
  return a1;
}

uint64_t sub_100090108(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (uint64_t)(a1[1] - *a1) >> 3;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_100028DEC();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    xpc_object_t v8 = (char *)sub_100019978((uint64_t)(a1 + 2), v7);
  }
  else {
    xpc_object_t v8 = 0;
  }
  uint64_t v11 = v8;
  long long v12 = &v8[8 * v3];
  uint64_t v14 = &v8[8 * v7];
  sub_100002A40((uint64_t)(a1 + 2), v12, a2);
  long long v13 = v12 + 8;
  sub_10009022C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1000902B4((uint64_t)&v11);
  return v9;
}

void sub_100090218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10009022C(void *a1, void *a2)
{
  xpc_object_t v5 = (void *)*a1;
  unint64_t v4 = (void *)a1[1];
  __n128 result = (void *)a2[1];
  while (v4 != v5)
    __n128 result = sub_1000900C8(result - 1, --v4);
  a2[1] = result;
  unint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000902B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10008ECC4((xpc_connection_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100090304(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_100090320()
{
}

uint64_t sub_1000903E4(uint64_t a1, uint64_t *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  long long v19 = dispatch_queue_create("analyticsd.ClientManagerQueue", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v19;
  if (v19)
  {
    float v20 = v19;
    dispatch_retain(v19);
    dispatch_release(v20);
  }
  *(void *)a1 = off_1001566D0;
  *(void *)(a1 + 32) = off_100156728;
  uint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  *(void *)(a1 + 4sub_100027DA4((uint64_t)&a9, 0) = off_100156768;
  *(void *)(a1 + 48) = v22;
  *(void *)(a1 + 56) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = a3[1];
  *(void *)(a1 + 64) = *a3;
  *(void *)(a1 + 72) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4[1];
  *(void *)(a1 + 8sub_100027DA4((uint64_t)&a9, 0) = *a4;
  *(void *)(a1 + 88) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = a5[1];
  *(void *)(a1 + 96) = *a5;
  *(void *)(a1 + 104) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = a6[1];
  *(void *)(a1 + 112) = *a6;
  *(void *)(a1 + 12sub_100027DA4((uint64_t)&a9, 0) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = a7[1];
  *(void *)(a1 + 128) = *a7;
  *(void *)(a1 + 136) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = a8[1];
  *(void *)(a1 + 144) = *a8;
  *(void *)(a1 + 152) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = a9[1];
  *(void *)(a1 + 16sub_100027DA4((uint64_t)&a9, 0) = *a9;
  *(void *)(a1 + 168) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = a10[1];
  *(void *)(a1 + 176) = *a10;
  *(void *)(a1 + 184) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = a11[1];
  *(void *)(a1 + 192) = *a11;
  *(void *)(a1 + 20sub_100027DA4((uint64_t)&a9, 0) = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 24sub_100027DA4((uint64_t)&a9, 0) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

void sub_1000905E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a2;
  v4[1] = a1;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100097C34;
  block[3] = &unk_1001568C8;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_10009068C()
{
  uint64_t v0 = __chkstk_darwin();
  size_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = v0;
  memset(__b, 170, sizeof(__b));
  if (v2 < 0x1049)
  {
    memcpy(__b, v4, v2);
    v6[0] = 0xAAAAAAAAAAAAAAAALL;
    v6[1] = 0xAAAAAAAAAAAAAAAALL;
    sub_10000FB4C(v6, (void *)(v5 + 8));
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_10015EF28, OS_LOG_TYPE_ERROR)) {
    sub_100100544();
  }
}

void sub_10009081C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10009082C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000983B8;
  block[3] = &unk_100156908;
  void block[4] = v2;
  void block[5] = v4;
  dispatch_sync(v3, block);
}

void sub_1000908D4(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  unint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v6, (void *)(a1 + 8));
  operator new();
}

void sub_1000909F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100028DD8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100090A08(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
}

void sub_100090A10(uint64_t a1@<X0>, uint64_t a2@<X2>, NSObject **a3@<X8>)
{
  uint64_t v6 = dispatch_group_create();
  *a3 = v6;
  sub_100016A10((uint64_t)v7, a2);
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  v9[0] = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_10000FB4C(v9, (void *)(a1 + 8));
  operator new();
}

void sub_100090BAC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100028DD8(exception_object);
}

void sub_100090BDC(uint64_t a1@<X0>, uint64_t a2@<X2>, NSObject **a3@<X8>)
{
}

uint64_t sub_100090BE4(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3, uint64_t *a4)
{
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_connection)
  {
    xpc_object_t v19 = (xpc_object_t)xpc_connection_copy_entitlement_value();
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    uint64_t v7 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v19, 0, v8);
    if (v7) {
      goto LABEL_18;
    }
    uint64_t v9 = qword_10015EF40;
    if (os_log_type_enabled((os_log_t)qword_10015EF40, OS_LOG_TYPE_ERROR))
    {
      pid_t pid = xpc_connection_get_pid(*a2);
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v15 = a4;
      }
      else {
        unint64_t v15 = (uint64_t *)*a4;
      }
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = pid;
      LOWORD(v21[0]) = 2082;
      *(void *)((char *)v21 + 2) = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[ClientManager] ERROR: Client(%u) not entitled for entitlement: %{public}s", buf, 0x12u);
    }
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t reply = xpc_dictionary_create_reply(*a3);
    xpc_object_t v11 = reply;
    if (reply)
    {
      xpc_object_t object = reply;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t object = v11;
      if (!v11) {
        goto LABEL_11;
      }
    }
    if (xpc_get_type(v11) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v11);
      goto LABEL_13;
    }
LABEL_11:
    xpc_object_t object = xpc_null_create();
LABEL_13:
    xpc_release(v11);
    xpc_object_t v12 = object;
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v16 = xpc_string_create("not entitled");
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      *(void *)std::string buf = &object;
      v21[0] = "error";
      sub_100003760((uint64_t)buf, &v16, &v17);
      xpc_release(v17);
      xpc_object_t v17 = 0;
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_connection_send_message(*a2, object);
      xpc_object_t v12 = object;
    }
    xpc_release(v12);
LABEL_18:
    xpc_release(v19);
    return v7;
  }
  return 0;
}