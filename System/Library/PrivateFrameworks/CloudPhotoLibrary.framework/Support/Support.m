id sub_100003960()
{
  void *v0;
  uint64_t vars8;

  if (qword_1002CE3E0 != -1) {
    dispatch_once(&qword_1002CE3E0, &stru_100275DD0);
  }
  v0 = (void *)qword_1002CE3E8;
  return v0;
}

void sub_100003A60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  v8 = *(void **)(v7 + 112);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100003BA4;
  v15[3] = &unk_100275CC8;
  v15[4] = v7;
  id v16 = v6;
  uint64_t v9 = *(void *)(a1 + 40);
  id v17 = v5;
  uint64_t v18 = v9;
  v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000056E0;
  block[3] = &unk_100275DF8;
  id v20 = v10;
  v11 = v8;
  id v12 = v5;
  id v13 = v6;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

void sub_100003BA4(uint64_t a1)
{
  v3 = (id *)(a1 + 32);
  v2 = *(unsigned char **)(a1 + 32);
  if (v2[96])
  {
    if (!_CPLSilentLogging)
    {
      v4 = sub_100003960();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped waiting for push notifications before we had a chance to set them up", buf, 2u);
      }

      v2 = *v3;
    }
    [v2 _setPushRegistrationStatus:@"closed" error:0];
    return;
  }
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(v2, "_setPushRegistrationStatus:error:", @"failed");
    if (!_CPLSilentLogging)
    {
      id v5 = sub_100003960();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to get push environment and push topic: %@", buf, 0xCu);
      }
    }
    return;
  }
  if ([*(id *)(a1 + 48) length]) {
    uint64_t v7 = *(void **)(a1 + 48);
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = v7;
  uint64_t v9 = [@"com.apple.icloud-container." stringByAppendingString:@"com.apple.photos.cloud"];
  [*v3 _setPushRegistrationStatus:0 error:0];
  v10 = (void *)APSEnvironmentProduction;
  if (v8) {
    v10 = v8;
  }
  id v11 = v10;
  uint64_t v12 = *((void *)*v3 + 1);
  if (!*((unsigned char *)*v3 + 16))
  {
    if (v12) {
      sub_1001C4E84(a1, (uint64_t *)v3);
    }
    goto LABEL_33;
  }
  if (!v12) {
    sub_1001C4F4C(a1, (uint64_t *)v3);
  }
  id v13 = (void *)*((void *)*v3 + 3);
  if (!v13) {
    sub_1001C5014(a1, (uint64_t *)v3);
  }
  if (([v13 isEqualToString:v11] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      v15 = sub_100003960();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Dropping idle APS connection as real environment is %@", buf, 0xCu);
      }
    }
    [*((id *)*v3 + 1) shutdown];
    dispatch_block_t v14 = *((void *)*v3 + 1);
    *((void *)*v3 + 1) = 0;
    goto LABEL_31;
  }
  if (!_CPLSilentLogging)
  {
    dispatch_block_t v14 = sub_100003960();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v27 = v9;
      __int16 v28 = 2112;
      id v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Start waiting for push notifications, topic %@, environment: %@ (reusing idle APS connection)", buf, 0x16u);
    }
LABEL_31:
  }
  *((unsigned char *)*v3 + 16) = 0;
LABEL_33:
  id v16 = [v11 copy];
  id v17 = (void *)*((void *)*v3 + 3);
  *((void *)*v3 + 3) = v16;

  if (!*((void *)*v3 + 1))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v18 = sub_100003960();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        id v27 = v9;
        __int16 v28 = 2112;
        id v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Start waiting for push notifications, topic %@, environment: %@", buf, 0x16u);
      }
    }
    id v19 = [objc_alloc((Class)APSConnection) initWithEnvironmentName:*((void *)*v3 + 3) namedDelegatePort:@"com.apple.photos.cloud.pushnotification" queue:*((void *)*v3 + 14)];
    id v20 = (void *)*((void *)*v3 + 1);
    *((void *)*v3 + 1) = v19;

    objc_msgSend(*((id *)*v3 + 1), "setDelegate:");
  }
  v25 = v9;
  uint64_t v21 = +[NSArray arrayWithObjects:&v25 count:1];
  v22 = (void *)*((void *)*v3 + 4);
  *((void *)*v3 + 4) = v21;

  uint64_t v23 = *((void *)*v3 + 4);
  if (*((unsigned char *)*v3 + 97))
  {
    uint64_t v24 = *((void *)*v3 + 4);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v24 = 0;
  }
  [*((id *)*v3 + 1) setEnabledTopics:v24 ignoredTopics:0 opportunisticTopics:v23];
}

void sub_100004904(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 112);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100004A34;
  v10[3] = &unk_100275D40;
  v10[4] = v4;
  id v11 = v3;
  id v12 = *(id *)(a1 + 40);
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000056E0;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  uint64_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100004A34(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = (void *)a1[4];
  if (v3[1])
  {
    id v4 = [objc_alloc((Class)NSMutableString) initWithFormat:@"push notification environment: %@\npush notification topics: ", *(void *)(a1[4] + 24)];
    v42[0] = 0;
    v42[1] = v42;
    v42[2] = 0x2020000000;
    char v43 = 1;
    v36 = _NSConcreteStackBlock;
    uint64_t v37 = 3221225472;
    v38 = sub_100004EB8;
    v39 = &unk_100275D18;
    v41 = v42;
    id v5 = v4;
    id v40 = v5;
    id v6 = objc_retainBlock(&v36);
    uint64_t v7 = [*(id *)(a1[4] + 8) enabledTopics];
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v7, @"enabled");

    id v8 = [*(id *)(a1[4] + 8) ignoredTopics];
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v8, @"ignored");

    dispatch_block_t v9 = [*(id *)(a1[4] + 8) opportunisticTopics];
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v9, @"opportunistic");

    [v2 addObject:v5];
    _Block_object_dispose(v42, 8);

    id v3 = (void *)a1[4];
  }
  if (v3[5])
  {
    v10 = (void *)v3[11];
    id v11 = &CPLSyncSessionBlockedStateSyncRequestedKey_ptr;
    if (v10)
    {
      id v12 = [v10 cplNotificationTypeDescription];
      id v13 = [*(id *)(a1[4] + 88) notificationID];
      id v14 = [v13 notificationUUID];
      v15 = [*(id *)(a1[4] + 88) containerIdentifier];
      id v16 = [*(id *)(a1[4] + 88) subscriptionID];
      if (v16)
      {
        id v11 = [*(id *)(a1[4] + 88) subscriptionID];
        +[NSString stringWithFormat:@"\n\tsubscriptionID = %@", v11];
        id v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v17 = &stru_10027FEB8;
      }
      +[NSString stringWithFormat:@"notificationType = %@\n\tnotificationID = %@\n\tcontainerIdentifier = %@%@", v12, v14, v15, v17, v36, v37, v38, v39];
      v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
      }
    }
    else
    {
      v22 = @"(no push info)";
    }
    id v23 = objc_alloc((Class)NSMutableString);
    uint64_t v24 = +[CPLDateFormatter stringFromDateAgo:*(void *)(a1[4] + 40) now:0];
    id v25 = [v23 initWithFormat:@"last push notification: %@ - %@", v24, *(void *)(a1[4] + 64)];

    v26 = (void *)a1[5];
    if (v26)
    {
      id v27 = [v26 cloudKitClientIdentifier];
      [v25 appendFormat:@"\n\t(initially served to %@)", v27];
    }
    [v25 appendFormat:@"\n\t%@", v22];
    [v2 addObject:v25];
    if (*(void *)(a1[4] + 56) >= 2uLL)
    {
      id v28 = objc_alloc((Class)NSString);
      uint64_t v29 = a1[4];
      uint64_t v30 = *(void *)(v29 + 56);
      [*(id *)(v29 + 40) timeIntervalSinceDate:*(void *)(v29 + 48)];
      id v32 = objc_msgSend(v28, "initWithFormat:", @"received %lu push notifications in %.1fs", v30, v31);
      [v2 addObject:v32];
    }
    goto LABEL_23;
  }
  if (v3[9])
  {
    uint64_t v18 = v3[10];
    id v19 = objc_alloc((Class)NSString);
    uint64_t v20 = a1[4];
    if (v18) {
      uint64_t v21 = (__CFString *)[v19 initWithFormat:@"push notification: %@ (%@)", *(void *)(v20 + 72), *(void *)(v20 + 80)];
    }
    else {
      uint64_t v21 = (__CFString *)[v19 initWithFormat:@"push notification: %@", *(void *)(v20 + 72), v35];
    }
    v22 = v21;
    [v2 addObject:v21];
LABEL_23:

    goto LABEL_24;
  }
  [v2 addObject:@"last push notification: none since launch"];
LABEL_24:
  uint64_t v33 = a1[6];
  v34 = [v2 componentsJoinedByString:@"\n"];
  (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v34);
}

void sub_100004EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100004EB8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if ([v10 count])
  {
    id v6 = *(void **)(a1 + 32);
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v8 = [v10 componentsJoinedByString:@", "];
    dispatch_block_t v9 = (void *)v8;
    if (v7)
    {
      [v6 appendFormat:@"%@ (%@)", v8, v5];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      [v6 appendFormat:@", %@ (%@)", v8, v5];
    }
  }
}

void sub_100005040(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 112);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100005170;
  v10[3] = &unk_100275D40;
  v10[4] = v4;
  id v11 = v3;
  id v12 = *(id *)(a1 + 40);
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000056E0;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  int v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100005170(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = a1[4];
  if (*(void *)(v3 + 8))
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      CFStringRef v32 = @"environment";
      uint64_t v33 = v4;
      id v5 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      id v6 = [v5 mutableCopy];

      id v27 = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472;
      uint64_t v29 = sub_100005530;
      uint64_t v30 = &unk_100275D90;
      id v7 = v6;
      id v31 = v7;
      id v8 = objc_retainBlock(&v27);
      dispatch_block_t v9 = objc_msgSend(*(id *)(a1[4] + 8), "enabledTopics", v27, v28, v29, v30);
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v9, @"enabled");

      id v10 = [*(id *)(a1[4] + 8) ignoredTopics];
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v10, @"ignored");

      id v11 = [*(id *)(a1[4] + 8) opportunisticTopics];
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v11, @"opportunistic");

      uint64_t v12 = a1[4];
      if (*(void *)(v12 + 88) || *(void *)(v12 + 40))
      {
        id v13 = objc_alloc_init((Class)NSMutableDictionary);
        id v14 = *(void **)(a1[4] + 88);
        if (v14)
        {
          v15 = [v14 cplNotificationTypeDescription];
          [v13 setObject:v15 forKeyedSubscript:@"type"];

          id v16 = [*(id *)(a1[4] + 88) notificationID];
          id v17 = [v16 notificationUUID];
          [v13 setObject:v17 forKeyedSubscript:@"notificationID"];

          uint64_t v18 = [*(id *)(a1[4] + 88) containerIdentifier];
          [v13 setObject:v18 forKeyedSubscript:@"container"];

          id v19 = [*(id *)(a1[4] + 88) subscriptionID];
          [v13 setObject:v19 forKeyedSubscript:@"subscriptionID"];

          uint64_t v20 = [*(id *)(a1[4] + 88) notificationID];
          uint64_t v21 = [v20 notificationUUID];
          [v13 setObject:v21 forKeyedSubscript:@"notificationID"];

          v22 = (void *)a1[5];
          if (v22)
          {
            id v23 = [v22 cloudKitClientIdentifier];
            [v13 setObject:v23 forKeyedSubscript:@"client"];
          }
        }
        if (*(void *)(a1[4] + 64)) {
          CFStringRef v24 = *(const __CFString **)(a1[4] + 64);
        }
        else {
          CFStringRef v24 = @"none";
        }
        [v13 setObject:v24 forKeyedSubscript:@"pushTopic"];
        id v25 = *(void **)(a1[4] + 40);
        if (v25)
        {
          [v25 timeIntervalSinceReferenceDate];
          v26 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          [v13 setObject:v26 forKeyedSubscript:@"date"];
        }
        [v7 setObject:v13 forKeyedSubscript:@"lastPush"];
      }
      [v2 setObject:v7 forKeyedSubscript:@"push"];
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100005530(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v6 count]) {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_1000056A0(id a1)
{
  v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE3E8 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.push");
  _objc_release_x1();
}

void sub_1000056E0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000572C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000060C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000060E4()
{
  if (qword_1002CE410 != -1) {
    dispatch_once(&qword_1002CE410, &stru_100276348);
  }
  v0 = (void *)qword_1002CE418;
  return v0;
}

void sub_100006138(id a1, NSString *a2)
{
  id v2 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v3 = sub_1000060E4();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Requesting client to connect to %@", (uint8_t *)&v4, 0xCu);
    }
  }
  sub_100026DE0();
}

void sub_1000061F8(id a1)
{
  id v1 = [objc_alloc((Class)NSURL) initFileURLWithPath:@"/usr/local/lib/libEnginePlistImplementation.dylib" isDirectory:0];
  qword_1002CE3F0 = (uint64_t)dlopen((const char *)[v1 fileSystemRepresentation], 1);
  if (qword_1002CE3F0) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = _CPLSilentLogging == 0;
  }
  if (v2)
  {
    uint64_t v3 = sub_1000060E4();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = +[CPLErrors posixErrorForURL:v1];
      int v5 = 138412290;
      id v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to load local transport: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_100006310(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 72) count])
  {
    if (_CPLSilentLogging) {
      return;
    }
    BOOL v2 = sub_1000060E4();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    __int16 v9 = 0;
    uint64_t v3 = "Daemon is idle";
    int v4 = (uint8_t *)&v9;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
LABEL_10:

    return;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    if (_CPLSilentLogging) {
      return;
    }
    BOOL v2 = sub_1000060E4();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    __int16 v7 = 0;
    uint64_t v3 = "Daemon is idle with no client";
    int v4 = (uint8_t *)&v7;
    goto LABEL_9;
  }
  if (!_CPLSilentLogging)
  {
    int v5 = sub_1000060E4();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Daemon is idle and has no engine to manage. Exiting", buf, 2u);
    }
  }
  uint64_t v6 = _CPLExit();
  sub_100006440(v6);
}

void sub_100006440(uint64_t a1)
{
  BOOL v2 = +[NSBundle mainBundle];
  id v13 = [v2 bundleIdentifier];

  if (!v13) {
    sub_1001C50DC(a1);
  }
  uint64_t v3 = [[CPLEngineParametersStorage alloc] initWithBundleIdentifier:v13];
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;

  uint64_t v6 = [[CPLEngineWrapperArray alloc] initWithParametersStorage:*(void *)(*(void *)(a1 + 32) + 24) queue:*(void *)(*(void *)(a1 + 32) + 128)];
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 80);
  *(void *)(v7 + 80) = v6;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "setDelegate:");
  uint64_t v9 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v9 + 16))
  {
    +[CPLCloudKitReschedulerCoordinator beginRegisteringKnownReschedulerManager];
    uint64_t v9 = *(void *)(a1 + 32);
  }
  [*(id *)(v9 + 80) loadRegisteredWrappers];
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16)) {
    +[CPLCloudKitReschedulerCoordinator endRegisteringKnownReschedulerManagers];
  }
  uint64_t v10 = [[CPLInitialDownloadHelper alloc] initWithWrappers:*(void *)(*(void *)(a1 + 32) + 80) queue:*(void *)(*(void *)(a1 + 32) + 128)];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 88);
  *(void *)(v11 + 88) = v10;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 88), "setDelegate:");
  [*(id *)(a1 + 32) _registerAfterLaunchWhenAllEnginesAreOpened];
}

id sub_100006588(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 138)) {
    goto LABEL_12;
  }
  id v3 = [*(id *)(v1 + 80) count];
  if (![*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v6 = sub_1000060E4();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Got SIGTERM signal. Exiting immediately", (uint8_t *)&v7, 2u);
      }
    }
LABEL_12:
    exit(0);
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Got SIGTERM signal. Closing %lu engines and exiting", (uint8_t *)&v7, 0xCu);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 136) = 1;
  return [*(id *)(*(void *)(a1 + 32) + 80) stopAllWithCompletionHandler:&stru_100275EE8];
}

void sub_1000066DC(id a1)
{
}

void sub_1000066F0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (_CPLSilentLogging) {
      return;
    }
    uint64_t v1 = sub_1000060E4();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    BOOL v2 = "SIGINFO: daemon is already computing info";
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 138))
  {
    if (_CPLSilentLogging) {
      return;
    }
    uint64_t v1 = sub_1000060E4();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    BOOL v2 = "SIGINFO: daemon is waiting for first unlock";
    goto LABEL_13;
  }
  if (*(unsigned char *)(v4 + 136))
  {
    if (_CPLSilentLogging) {
      return;
    }
    uint64_t v1 = sub_1000060E4();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    BOOL v2 = "SIGINFO: daemon is closing";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, v2, buf, 2u);
LABEL_14:

    return;
  }
  if ([*(id *)(v4 + 80) count])
  {
    dispatch_group_t v5 = dispatch_group_create();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    uint64_t v6 = *(void **)(a1 + 32);
    int v7 = (void *)v6[10];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100006958;
    v10[3] = &unk_100275F38;
    uint64_t v11 = v6;
    dispatch_group_t v12 = v5;
    uint64_t v1 = v5;
    [v7 enumerateOpenedWrappersWithBlock:v10];
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100006C0C;
    block[3] = &unk_100275F60;
    void block[4] = *(void *)(a1 + 40);
    dispatch_group_notify(v1, v8, block);

    goto LABEL_14;
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = sub_1000060E4();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    BOOL v2 = "SIGINFO: no engine configured";
    goto LABEL_13;
  }
}

void sub_100006958(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 80) isWrapperOpened:v3])
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    uint64_t v4 = [v3 engine];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100006AC8;
    v6[3] = &unk_100275F10;
    int v7 = v3;
    id v8 = *(id *)(a1 + 40);
    [v4 getStatusForComponents:0 completionHandler:v6];

    dispatch_group_t v5 = v7;
LABEL_6:

    goto LABEL_7;
  }
  if (!_CPLSilentLogging)
  {
    dispatch_group_t v5 = sub_1000060E4();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SIGINFO for %@: not opened", buf, 0xCu);
    }
    goto LABEL_6;
  }
LABEL_7:
}

void sub_100006AC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      int v7 = sub_1000060E4();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v11 = 138412546;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        id v14 = v6;
        uint64_t v9 = "SIGINFO for %@ failed: %@";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v11, 0x16u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    int v7 = sub_1000060E4();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2114;
      id v14 = v5;
      uint64_t v9 = "SIGINFO for %@:\n%{public}@";
      goto LABEL_8;
    }
LABEL_9:
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_100006C0C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

id sub_100006C1C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    BOOL v2 = sub_1000060E4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received signal to ping supervisors", v4, 2u);
    }
  }
  return [*(id *)(*(void *)(a1 + 32) + 80) enumerateOpenedWrappersWithBlock:&stru_100275FC8];
}

void sub_100006CAC(id a1, CPLEngineWrapper *a2, BOOL *a3)
{
}

void sub_100006F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100006F6C(uint64_t a1)
{
  id result = (id)MKBDeviceUnlockedSinceBoot();
  if (result == 1)
  {
    notify_cancel(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    id v3 = *(void **)(a1 + 32);
    return [v3 _performPendingBlockAfterFirstUnlock];
  }
  return result;
}

uint64_t sub_100006FD4(uint64_t result, int a2)
{
  if (*(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) == a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

id sub_10000733C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) refreshAllConfigurationDictionaries];
}

void sub_100007640(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System is requesting a configuration refresh", buf, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000077BC;
  v10[3] = &unk_100275EA0;
  void v10[4] = *(void *)(a1 + 32);
  [v3 setExpirationHandler:v10];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 80);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000794C;
  v8[3] = &unk_100276018;
  v8[4] = v5;
  id v9 = v3;
  id v7 = v3;
  [v6 refreshAllConfigurationDictionariesWithCompletionHandler:v8];
  [*(id *)(*(void *)(a1 + 32) + 80) enumerateOpenedWrappersWithBlock:&stru_100276038];
}

void sub_1000077BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(void **)(v1 + 128);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000078B0;
  v6[3] = &unk_100275EA0;
  void v6[4] = v1;
  id v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v8 = v3;
  uint64_t v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

id sub_1000078B0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    BOOL v2 = sub_1000060E4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System-requested configuration refresh has expired", v4, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  return [*(id *)(*(void *)(a1 + 32) + 80) cancelConfigurationDictionariesRefresh];
}

id sub_10000794C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    BOOL v2 = sub_1000060E4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System-requested configuration refresh finished", v4, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  [*(id *)(a1 + 40) setTaskCompleted];
  return [*(id *)(a1 + 32) _updateConfigurationRefreshIntervalIfNecessary];
}

void sub_1000079EC(id a1, CPLEngineWrapper *a2, BOOL *a3)
{
  id v4 = [(CPLEngineWrapper *)a2 engine];
  id v3 = [v4 feedback];
  [v3 sendFeedbackToServerIfNecessary];
}

void sub_100007B38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System is requesting a maintenance", buf, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
  dispatch_block_t v5 = +[NSProgress progressWithTotalUnitCount:1];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100007CE0;
  v12[3] = &unk_100276018;
  v12[4] = *(void *)(a1 + 32);
  id v6 = v5;
  id v13 = v6;
  [v3 setExpirationHandler:v12];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100007E50;
  v9[3] = &unk_1002760B0;
  v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  id v11 = v6;
  id v7 = v6;
  id v8 = v3;
  [v7 performAsCurrentWithPendingUnitCount:1 usingBlock:v9];
}

id sub_100007CE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100007E3C;
  v9[3] = &unk_100275EA0;
  v9[4] = v2;
  id v4 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v11 = v4;
  dispatch_block_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000060E4();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "System-requested maintenance has expired", (uint8_t *)block, 2u);
    }
  }
  return [*(id *)(a1 + 40) cancel];
}

id sub_100007E3C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 192) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
}

void sub_100007E50(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100007EFC;
  v5[3] = &unk_100276088;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 executeMaintenanceWithCompletionHandler:v5];
}

id sub_100007EFC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_1000060E4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System-requested maintenance finished", v4, 2u);
    }
  }
  [*(id *)(a1 + 32) setTaskCompleted];
  [*(id *)(*(void *)(a1 + 40) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
  return objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
}

void sub_100008098(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System is requesting a backup", buf, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  dispatch_block_t v5 = +[NSProgress progressWithTotalUnitCount:1];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000823C;
  v12[3] = &unk_100276018;
  v12[4] = *(void *)(a1 + 32);
  id v6 = v5;
  id v13 = v6;
  [v3 setExpirationHandler:v12];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000083AC;
  v9[3] = &unk_1002760B0;
  v9[4] = *(void *)(a1 + 32);
  id v10 = v6;
  id v11 = v3;
  id v7 = v3;
  id v8 = v6;
  [v8 performAsCurrentWithPendingUnitCount:1 usingBlock:v9];
}

id sub_10000823C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100008398;
  v9[3] = &unk_100275EA0;
  v9[4] = v2;
  uint64_t v4 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v11 = v4;
  dispatch_block_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000060E4();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "System-requested backup has expired", (uint8_t *)block, 2u);
    }
  }
  return [*(id *)(a1 + 40) cancel];
}

id sub_100008398(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 192) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
}

void sub_1000083AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100008460;
  v5[3] = &unk_100276088;
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  [v2 forceBackupWithActivity:0 forceClientPush:1 completionHandler:v5];
}

void sub_100008460(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 32) isCancelled])
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v8 = sub_1000060E4();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v16 = v3;
          id v9 = "System-requested backup finished with error: %@";
          id v10 = v8;
          os_log_type_t v11 = OS_LOG_TYPE_ERROR;
          uint32_t v12 = 12;
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
    }
    else if (!_CPLSilentLogging)
    {
      uint64_t v8 = sub_1000060E4();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        id v9 = "System-requested backup finished";
        id v10 = v8;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
        uint32_t v12 = 2;
        goto LABEL_21;
      }
LABEL_22:
    }
    [*(id *)(a1 + 40) setTaskCompleted];
    [*(id *)(*(void *)(a1 + 48) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
    goto LABEL_24;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  id v14 = 0;
  unsigned __int8 v5 = [v4 setTaskExpiredWithRetryAfter:&v14 error:0.0];
  id v6 = v14;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000060E4();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "System-requested Backup has been deferred", buf, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 48) + 192) didDeferTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  }
  else
  {
    [*(id *)(a1 + 40) setTaskCompleted];
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000060E4();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to defer System-requested Backup: %@", buf, 0xCu);
      }
    }
    [*(id *)(*(void *)(a1 + 48) + 192) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
    [*(id *)(*(void *)(a1 + 48) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  }

LABEL_24:
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}

void sub_100008AA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System is requesting an Initial Download", buf, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
  unsigned __int8 v5 = +[NSProgress progressWithTotalUnitCount:1];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100008C4C;
  v12[3] = &unk_100276018;
  v12[4] = *(void *)(a1 + 32);
  id v6 = v5;
  id v13 = v6;
  [v3 setExpirationHandler:v12];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100008DBC;
  v9[3] = &unk_1002760B0;
  v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  id v11 = v6;
  id v7 = v6;
  id v8 = v3;
  [v7 performAsCurrentWithPendingUnitCount:1 usingBlock:v9];
}

id sub_100008C4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100008DA8;
  v9[3] = &unk_100275EA0;
  v9[4] = v2;
  uint64_t v4 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v11 = v4;
  unsigned __int8 v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_1000060E4();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "System-requested Initial Download has expired", (uint8_t *)block, 2u);
    }
  }
  return [*(id *)(a1 + 40) cancel];
}

id sub_100008DA8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 192) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
}

void sub_100008DBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 88);
  uint64_t v3 = CPLLibraryIdentifierSystemLibrary;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100008ED8;
  v11[3] = &unk_1002760D8;
  id v12 = *(id *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000908C;
  v7[3] = &unk_100276100;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  dispatch_block_t v6 = *(void **)(a1 + 40);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v6;
  [v2 requestInitialDownloadOfMainScopeForLibraryWithIdentifier:v3 progressHandler:v11 completionHandler:v7];
}

void sub_100008ED8(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_alloc((Class)BGSystemTaskResult) initWithIdentifier:@"com.apple.cloudphotod.initialdownload.assets" cumulativeProductionCount:a2];
  id v5 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", v4, 0);
  dispatch_block_t v6 = *(void **)(a1 + 32);
  id v16 = 0;
  unsigned __int8 v7 = [v6 producedCumulativeResults:v5 error:&v16];
  id v8 = v16;
  if (v7)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_1000060E4();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v18 = v10;
        __int16 v19 = 2048;
        uint64_t v20 = a2;
        id v11 = "Notified %@ Initial Download has produced %lu assets";
        id v12 = v9;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
        uint32_t v14 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, v14);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v9 = sub_1000060E4();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      uint64_t v18 = v15;
      __int16 v19 = 2048;
      uint64_t v20 = a2;
      __int16 v21 = 2112;
      id v22 = v8;
      id v11 = "Failed to notify %@ Initial Download has produced %lu assets: %@";
      id v12 = v9;
      os_log_type_t v13 = OS_LOG_TYPE_ERROR;
      uint32_t v14 = 32;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_10000908C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  double v6 = 0.0;
  if ([*(id *)(a1 + 32) isCancelled])
  {
LABEL_2:
    unsigned __int8 v7 = *(void **)(a1 + 48);
    id v30 = 0;
    unsigned __int8 v8 = [v7 setTaskExpiredWithRetryAfter:&v30 error:v6];
    id v9 = v30;
    if (v8)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v10 = sub_1000060E4();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "System-requested Initial Download has been deferred", buf, 2u);
        }
      }
      [*(id *)(*(void *)(a1 + 40) + 192) didDeferTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
    }
    else
    {
      [*(id *)(a1 + 48) setTaskCompleted];
      if (!_CPLSilentLogging)
      {
        id v12 = sub_1000060E4();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v32 = (uint64_t)v9;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to defer Initial Download: %@", buf, 0xCu);
        }
      }
      [*(id *)(*(void *)(a1 + 40) + 192) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
      [*(id *)(*(void *)(a1 + 40) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
    }
    goto LABEL_48;
  }
  if (!v5)
  {
    if (!_CPLSilentLogging)
    {
      os_log_type_t v13 = sub_1000060E4();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "System-requested Initial Download finished successfully", buf, 2u);
      }
    }
    uint32_t v14 = *(void **)(a1 + 40);
    if (a2) {
      uint64_t v15 = 50;
    }
    else {
      uint64_t v15 = 30;
    }
    goto LABEL_41;
  }
  if ([v5 isCPLErrorWithCode:28])
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_1000060E4();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Apple Account is not setup - won't request a retry for Initial Download", buf, 2u);
      }
LABEL_29:

      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if ([v5 isCPLErrorWithCode:83])
  {
    id v16 = [v5 userInfo];
    id v17 = [v16 objectForKeyedSubscript:CPLErrorScopesHaveNotBeenActivatedKey];
    unsigned int v18 = [v17 BOOLValue];

    if (v18)
    {
      if (!_CPLSilentLogging)
      {
        id v11 = sub_1000060E4();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = CPLPrimaryScopeIdentifierForCurrentUniverse();
          *(_DWORD *)buf = 138412546;
          uint64_t v32 = (uint64_t)v19;
          __int16 v33 = 2112;
          id v34 = (id)CPLLibraryIdentifierSystemLibrary;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ has not been activated in %@ - won't request a retry for Initial Download", buf, 0x16u);
        }
        goto LABEL_29;
      }
LABEL_30:
      uint32_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = 1;
LABEL_41:
      [v14 _reportICPLFeatureCheckpoint:v15];
      goto LABEL_42;
    }
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v20 = sub_1000060E4();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v32 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "System-requested Initial Download finished with error: %@", buf, 0xCu);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 192) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
  if (++*(void *)(*(void *)(a1 + 40) + 200) <= 4uLL)
  {
    double v6 = 300.0;
    if (!_CPLSilentLogging)
    {
      __int16 v21 = sub_1000060E4();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = 5 - *(void *)(*(void *)(a1 + 40) + 200);
        *(_DWORD *)buf = 134217984;
        uint64_t v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Will retry Initial Download %lu more time(s)", buf, 0xCu);
      }
    }
    goto LABEL_2;
  }
LABEL_42:
  id v9 = [objc_alloc((Class)BGSystemTaskResult) initWithIdentifier:@"com.apple.cloudphotod.initialdownload.finished" cumulativeProductionCount:1];
  id v23 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", v9, 0);
  CFStringRef v24 = *(void **)(a1 + 48);
  id v29 = 0;
  unsigned __int8 v25 = [v24 producedCumulativeResults:v23 error:&v29];
  id v26 = v29;
  if ((v25 & 1) == 0 && !_CPLSilentLogging)
  {
    id v27 = sub_1000060E4();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v32 = v28;
      __int16 v33 = 2112;
      id v34 = v26;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Failed to notify %@ Initial Download result: %@", buf, 0x16u);
    }
  }
  [*(id *)(a1 + 48) setTaskCompleted];
  [*(id *)(*(void *)(a1 + 40) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];

LABEL_48:
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}

void sub_1000096E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000060E4();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System is requesting periodic upload of compute states", buf, 2u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 192) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000984C;
  v11[3] = &unk_100275EA0;
  void v11[4] = *(void *)(a1 + 32);
  [v3 setExpirationHandler:v11];
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = *(void **)(v5 + 80);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000099A8;
  v8[3] = &unk_100276128;
  id v9 = v3;
  uint64_t v10 = v5;
  id v7 = v3;
  [v6 executePeriodicUploadOfComputeStatesWithCompletionHandler:v8];
}

void sub_10000984C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 128);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100009994;
  v7[3] = &unk_100275EA0;
  void v7[4] = v1;
  id v3 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v9 = v3;
  id v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);

  if (!_CPLSilentLogging)
  {
    double v6 = sub_1000060E4();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System-requested periodic upload of compute states has expired", (uint8_t *)block, 2u);
    }
  }
}

id sub_100009994(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 192) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
}

id sub_1000099A8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_1000060E4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System-requested periodic upload of compute states finished", v4, 2u);
    }
  }
  [*(id *)(a1 + 32) setTaskCompleted];
  return [*(id *)(*(void *)(a1 + 40) + 192) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
}

void sub_100009D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_100009D50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _processConnectionDidInvalidate:v2];
}

uint64_t sub_10000AE70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000B7CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  id v5 = objc_alloc((Class)NSMutableString);
  if (*(unsigned char *)(a1 + 56)) {
    double v6 = ":";
  }
  else {
    double v6 = "";
  }
  id v7 = +[CPLDateFormatter stringFromDateAgo:*(void *)(*(void *)(a1 + 32) + 8) now:v4];
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v8 + 16)) {
    id v9 = " for sync bubble";
  }
  else {
    id v9 = "";
  }
  if (*(unsigned char *)(v8 + 17)) {
    uint64_t v10 = " forcing client push";
  }
  else {
    uint64_t v10 = "";
  }
  id v11 = __CPLVersion();
  id v12 = [v5 initWithFormat:@"launched%s %@%s%s (%@)", v6, v7, v9, v10, v11];

  if (*(unsigned char *)(a1 + 56))
  {
    [v12 appendString:@"\nregistered libraries:"];
    if (![*(id *)(a1 + 40) count])
    {
      [v12 appendString:@" none"];
      goto LABEL_29;
    }
    if ([*(id *)(a1 + 40) count] == (id)1)
    {
      os_log_type_t v13 = [*(id *)(a1 + 40) registeredLibraryIdentifiers];
      [v12 appendFormat:@" %@", v13];
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      os_log_type_t v13 = [*(id *)(a1 + 40) registeredLibraryIdentifiers];
      id v17 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v32;
        do
        {
          for (i = 0; i != v18; i = (char *)i + 1)
          {
            if (*(void *)v32 != v19) {
              objc_enumerationMutation(v13);
            }
            [v12 appendFormat:@"\n\t%@", *(void *)(*((void *)&v31 + 1) + 8 * i)];
          }
          id v18 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
        }
        while (v18);
      }
    }
  }
  else
  {
    if ((unint64_t)[*(id *)(a1 + 40) count] < 2) {
      goto LABEL_29;
    }
    os_log_type_t v13 = [*(id *)(a1 + 40) registeredLibraryIdentifiers];
    uint64_t v14 = CPLLibraryIdentifierSystemLibrary;
    unsigned int v15 = [v13 containsObject:CPLLibraryIdentifierSystemLibrary];
    id v16 = (char *)[v13 count];
    if (v15) {
      [v12 appendFormat:@"\nregistered libraries: %@ and %lu more", v14, v16 - 1];
    }
    else {
      objc_msgSend(v12, "appendFormat:", @"\nregistered libraries: %lu", v16, v28);
    }
    [v12 appendString:@" (use cplctl daemon engines for more info)"];
  }

LABEL_29:
  __int16 v21 = +[NSUserDefaults standardUserDefaults];
  uint64_t v22 = [v21 dictionaryRepresentation];

  id v23 = objc_alloc_init((Class)NSMutableArray);
  if (qword_1002CE408 != -1) {
    dispatch_once(&qword_1002CE408, &stru_100276198);
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10000BC98;
  v29[3] = &unk_1002761C0;
  v29[4] = *(void *)(a1 + 32);
  id v24 = v23;
  id v30 = v24;
  [v22 enumerateKeysAndObjectsUsingBlock:v29];
  if ([v24 count])
  {
    unsigned __int8 v25 = [v24 componentsJoinedByString:@"\n\t"];
    [v12 appendFormat:@"\ndefaults:\n\t%@", v25];
  }
  if ([v3 length]) {
    [v12 appendFormat:@"\n%@", v3];
  }
  id v26 = [*(id *)(*(void *)(a1 + 32) + 192) statusesWithNow:0];
  if ([v26 count])
  {
    id v27 = [v26 componentsJoinedByString:@"\n  "];
    [v12 appendFormat:@"\nbackground tasks:\n  %@", v27];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10000BC40(id a1)
{
  qword_1002CE400 = (uint64_t)objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", @"CPLDidFetchAccountFlagsAfterMigration", 0);
  _objc_release_x1();
}

void sub_10000BC98(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v8 hasPrefix:@"CPL"]
    && ([(id)qword_1002CE400 containsObject:v8] & 1) == 0
    && (+[CPLResetTracker shouldIgnoreDefaultsCPLKey:](CPLResetTracker, "shouldIgnoreDefaultsCPLKey:", v8) & 1) == 0&& ([*(id *)(*(void *)(a1 + 32) + 24) isCPLEngineParametersStorageKey:v8] & 1) == 0)
  {
    if ([v8 isEqualToString:CPLDropDerivativesTestRulesKey])
    {
      uint64_t v6 = +[CPLDropDerivativesRecipe unarchiveArrayOfCPLDropDerivativeRecipesFrom:v5];

      id v5 = (id)v6;
    }
    id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%@ = %@", v8, v5];
    [*(id *)(a1 + 40) addObject:v7];
  }
}

void sub_10000BDB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 128);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000BEDC;
  v10[3] = &unk_100276210;
  id v5 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v5;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  id v7 = v4;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

uint64_t sub_10000BEDC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10000C014(uint64_t a1)
{
  CFStringRef v8 = @"launchDate";
  [*(id *)(*(void *)(a1 + 32) + 8) timeIntervalSinceReferenceDate];
  id v2 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  dispatch_block_t v9 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];

  id v4 = *(void **)(*(void *)(a1 + 32) + 64);
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10000C168;
    v5[3] = &unk_100276260;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    [v4 getStatusDictionaryWithCompletionHandler:v5];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10000C168(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  [v5 addEntriesFromDictionary:v4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10000C738(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000C7E0;
  v3[3] = &unk_1002760B0;
  v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 _performAfterRegistrations:v3];
}

id sub_10000C7E0(void *a1)
{
  *(void *)(a1[4] + 200) = 0;
  id result = [*(id *)(a1[4] + 88) initialDownloadIsRunning];
  if ((result & 1) == 0)
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    return _[v3 _reRunFastPassInitialDownloadIfNecessaryForWrapper:v4 withReschedulerManager:v5];
  }
  return result;
}

void sub_10000CE14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10000CE2C(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 128));
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  if (!*(unsigned char *)(v3 + 24))
  {
    *(unsigned char *)(v3 + 24) = 1;
    objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    [*(id *)(a1 + 40) setCancellationHandler:0];
  }
}

void sub_10000CEC8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 128);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000CFCC;
  v5[3] = &unk_100275DF8;
  id v6 = *(id *)(a1 + 40);
  id v2 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v8 = v2;
  uint64_t v3 = v1;
  dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v3, v4);
}

void sub_10000CFCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors operationCancelledError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10000D030(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = *(void **)(*(void *)(a1 + 32) + 128);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10000D16C;
  v13[3] = &unk_1002762D8;
  uint64_t v16 = a2;
  id v8 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v8;
  dispatch_block_t v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v18 = v9;
  uint64_t v10 = v7;
  id v11 = v6;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

void sub_10000D16C(void *a1)
{
  uint64_t v1 = a1[6];
  if ((unint64_t)(v1 - 1) < 2)
  {
    dispatch_block_t v4 = *(void (**)(void))(a1[5] + 16);
    v4();
  }
  else
  {
    if ((unint64_t)(v1 - 3) < 2)
    {
      uint64_t v2 = a1[5];
      id v9 = +[CPLErrors cplErrorWithCode:28 description:@"No available iCloud user"];
      (*(void (**)(uint64_t, id))(v2 + 16))(v2, v9);
      uint64_t v3 = v9;
LABEL_4:

      return;
    }
    if (v1) {
      return;
    }
    uint64_t v5 = a1[5];
    if (!a1[4])
    {
      uint64_t v8 = +[CPLErrors cplErrorWithCode:150 description:@"Failed to determine account status with no errors"];
      (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, v8);
      uint64_t v3 = (void *)v8;
      goto LABEL_4;
    }
    id v6 = *(void (**)(uint64_t))(v5 + 16);
    uint64_t v7 = a1[5];
    v6(v7);
  }
}

void sub_10000D688(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 128);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10000D7A4;
  v10[3] = &unk_100276018;
  void v10[4] = v4;
  id v11 = v3;
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000D974;
  block[3] = &unk_100275DF8;
  id v13 = v6;
  uint64_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_10000D7A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 168);
  if (v3)
  {
    if (*(void *)(a1 + 40))
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v4 = sub_1000060E4();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = *(void *)(a1 + 40);
          int v12 = 138412290;
          uint64_t v13 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Upload failed with error: %@", (uint8_t *)&v12, 0xCu);
        }

        uint64_t v2 = *(void *)(a1 + 32);
      }
      if (*(unsigned char *)(v2 + 184))
      {
        id v6 = +[UMUserManager sharedManager];
        [v6 unregisterStakeHolder:*(void *)(a1 + 32) status:1 reason:@"Upload failed"];

        *(unsigned char *)(*(void *)(a1 + 32) + 184) = 0;
      }
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v7 = sub_1000060E4();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "We have successfully uploaded content. Ending current sync task", (uint8_t *)&v12, 2u);
        }

        id v3 = *(void **)(*(void *)(a1 + 32) + 168);
      }
      [v3 end];
      uint64_t v8 = *(void *)(a1 + 32);
      dispatch_block_t v9 = *(void **)(v8 + 168);
      *(void *)(v8 + 168) = 0;

      [*(id *)(*(void *)(a1 + 32) + 176) end];
      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = *(void **)(v10 + 176);
      *(void *)(v10 + 176) = 0;
    }
  }
}

void sub_10000D934(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE418 = (uint64_t)os_log_create(v1, "daemon");
  _objc_release_x1();
}

void sub_10000D974(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000D9C0(id a1)
{
  id v2 = +[UMUserManager sharedManager];
  if ([v2 isMultiUser])
  {
    uint64_t v1 = [v2 currentUser];
    byte_1002CE420 = [v1 userType] == (id)1;
  }
  else
  {
    byte_1002CE420 = 0;
  }
}

uint64_t start(int a1, uint64_t a2)
{
  uint64_t v5 = +[NSUserDefaults standardUserDefaults];
  id v6 = [v5 BOOLForKey:@"CPLUseSyncBubbleScheduler"];

  if (v6)
  {
    BOOL v7 = 1;
  }
  else if (a1 < 2)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = a1 - 2;
    dispatch_block_t v9 = (const char **)(a2 + 8);
    do
    {
      uint64_t v10 = *v9++;
      int v11 = strcmp(v10, "--syncbubble");
      BOOL v7 = v11 == 0;
      if (v11) {
        BOOL v12 = v8 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      --v8;
    }
    while (!v12);
  }
  id v13 = [[CPLDaemon alloc] initForSyncBubble:v7 forceClientPush:v6];
  id v14 = +[NSRunLoop currentRunLoop];
  [v14 run];

  return 0;
}

id sub_10000DE84()
{
  if (qword_1002CE430 != -1) {
    dispatch_once(&qword_1002CE430, &stru_100276678);
  }
  v0 = (void *)qword_1002CE438;
  return v0;
}

id sub_10000DED8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = [*(id *)(a1 + 32) totalUnitCount];
  id v3 = *(void **)(a1 + 32);
  return [v3 setCompletedUnitCount:v2];
}

void sub_10000DF28(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000DE84();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = NSStringFromSelector(*(SEL *)(a1 + 32));
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10000DFF0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000E0C4;
  v6[3] = &unk_100276450;
  id v7 = v2;
  id v10 = *(id *)(a1 + 56);
  char v11 = *(unsigned char *)(a1 + 64);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 requestRegisteredWrapperWithIdentifier:v7 completionHandler:v6];
}

void sub_10000E0C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_10000DE84();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        id v24 = v14;
        __int16 v25 = 2112;
        id v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to get %{public}@: %@", buf, 0x16u);
      }
    }
    id v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v16 = sub_10000DE84();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Found %@", buf, 0xCu);
      }
    }
    id v15 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_18:
    v15();
    goto LABEL_19;
  }
  id v7 = [v5 engine];
  id v8 = [v7 mainScopeIdentifier];
  if (!_CPLSilentLogging)
  {
    uint64_t v9 = sub_10000DE84();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v24 = v5;
      __int16 v25 = 2114;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found %@ - requesting %{public}@ is activated", buf, 0x16u);
    }
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10000E380;
  v17[3] = &unk_100276428;
  id v18 = v7;
  id v19 = v8;
  id v10 = *(void **)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  id v21 = v5;
  id v22 = *(id *)(a1 + 56);
  id v11 = v8;
  id v12 = v7;
  [v10 performAsCurrentWithPendingUnitCount:1 usingBlock:v17];

LABEL_19:
}

void sub_10000E380(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v3 = +[NSArray arrayWithObjects:&v10 count:1];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000E4A4;
  v6[3] = &unk_100276400;
  int8x16_t v5 = *(int8x16_t *)(a1 + 40);
  id v4 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v2 requestScopesWithIdentifiersToBeActivated:v3 completionHandler:v6];
}

void sub_10000E4A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10000E5FC;
  v9[3] = &unk_1002763D8;
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  int8x16_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000100AC;
  block[3] = &unk_100275DF8;
  id v15 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

uint64_t sub_10000E5FC(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[4])
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10000DE84();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = a1[5];
        uint64_t v6 = a1[6];
        int v13 = 138543618;
        uint64_t v14 = v5;
        __int16 v15 = 2112;
        uint64_t v16 = v6;
        id v7 = "Failed to get %{public}@ activated for %@";
        dispatch_block_t v8 = v4;
        os_log_type_t v9 = OS_LOG_TYPE_ERROR;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, 0x16u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    id v4 = sub_10000DE84();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[5];
      uint64_t v11 = a1[6];
      int v13 = 138543618;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = v11;
      id v7 = "Successfully got %{public}@ activated for %@";
      dispatch_block_t v8 = v4;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_8;
    }
LABEL_9:
  }
  return (*(uint64_t (**)(void, void, uint64_t))(a1[7] + 16))(a1[7], a1[4], a3);
}

id sub_10000EA38(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = [*(id *)(a1 + 32) totalUnitCount];
  id v3 = *(void **)(a1 + 32);
  return [v3 setCompletedUnitCount:v2];
}

void sub_10000EA88(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000DE84();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = NSStringFromSelector(*(SEL *)(a1 + 32));
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10000EB50(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(*(void *)(a1 + 32) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10000ECB4;
  v11[3] = &unk_1002764C8;
  id v12 = v3;
  id v13 = *(id *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v6;
  id v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000100AC;
  block[3] = &unk_100275DF8;
  id v19 = v7;
  dispatch_block_t v8 = v4;
  id v9 = v3;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

void sub_10000ECB4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_10000DE84();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 72)) {
          id v3 = " with activated main scope";
        }
        else {
          id v3 = "";
        }
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v4 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        uint64_t v12 = v4;
        __int16 v13 = 2080;
        id v14 = v3;
        __int16 v15 = 2112;
        uint64_t v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requesting %{public}@%s but checking active Apple Account failed: %@", buf, 0x20u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10000EE4C;
    v7[3] = &unk_1002764A0;
    uint64_t v6 = *(void **)(a1 + 48);
    void v7[4] = *(void *)(a1 + 56);
    id v8 = *(id *)(a1 + 40);
    char v10 = *(unsigned char *)(a1 + 72);
    id v9 = *(id *)(a1 + 64);
    [v6 performAsCurrentWithPendingUnitCount:1 usingBlock:v7];
  }
}

id sub_10000EE4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestLibraryWithIdentifier:*(void *)(a1 + 40) withActivatedMainScope:*(unsigned __int8 *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
}

id sub_10000EE60(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestLibraryWithIdentifier:*(void *)(a1 + 40) withActivatedMainScope:*(unsigned __int8 *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
}

void sub_10000F2B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors incorrectMachineStateErrorWithReason:@"Initial download is already running"];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10000F324(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000DE84();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = NSStringFromSelector(*(SEL *)(a1 + 32));
      int v4 = 138543362;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10000F3EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = 0;
  id v6 = a3;

  objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10000F478(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000F558;
  v7[3] = &unk_100276630;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 64);
  [v2 requestLibraryWithIdentifier:v3 withActivatedMainScope:1 completionHandler:v7];
}

void sub_10000F558(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v3();
  }
  else
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 24) openedWrapperWithLibraryIdentifier:*(void *)(a1 + 40)];
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = *(void **)(a1 + 48);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10000F6C0;
      v10[3] = &unk_100276608;
      id v11 = v4;
      id v7 = *(id *)(a1 + 64);
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = v7;
      id v14 = *(id *)(a1 + 56);
      [v6 performAsCurrentWithPendingUnitCount:10 usingBlock:v10];
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 56);
      id v9 = +[CPLErrors cplErrorWithCode:2006, @"%@ not found", *(void *)(a1 + 40) description];
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
    }
  }
}

void sub_10000F6C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engine];
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  char v30 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v28[3] = 0;
  uint64_t v3 = [v2 store];
  id v4 = [v3 pullQueue];
  if (*(void *)(a1 + 48))
  {
    id v5 = objc_alloc((Class)CPLEngineDequeueObserver);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10000F9E0;
    v24[3] = &unk_100276568;
    id v6 = *(void **)(a1 + 48);
    v24[4] = *(void *)(a1 + 40);
    id v26 = v29;
    id v27 = v28;
    id v25 = v6;
    id v7 = [v5 initWithClientDidAcknowledgeBatchBlock:v24];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10000FC3C;
    v21[3] = &unk_100276590;
    id v22 = v4;
    id v8 = v7;
    id v23 = v8;
    id v9 = [v3 performReadTransactionWithBlock:v21];
  }
  else
  {
    id v8 = 0;
  }
  id v10 = [v2 mainScopeIdentifier];
  long long v31 = v10;
  id v11 = +[NSArray arrayWithObjects:&v31 count:1];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10000FC48;
  v15[3] = &unk_1002765E0;
  v15[4] = *(void *)(a1 + 40);
  uint64_t v20 = v29;
  id v12 = v8;
  id v16 = v12;
  id v13 = v3;
  id v17 = v13;
  id v14 = v4;
  id v18 = v14;
  id v19 = *(id *)(a1 + 56);
  [v2 forceInitialDownloadWithActivity:0 scopeIdentifiers:v11 completionHandler:v15];

  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v29, 8);
}

void sub_10000F9B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10000F9E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v22;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if ([v10 isAssetChange] && objc_msgSend(v10, "isFullRecord")) {
          v7 += [v10 inTrash] ^ 1;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v6);
    if (v7)
    {
      id v11 = *(void **)(*(void *)(a1 + 32) + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10000FBF4;
      v17[3] = &unk_100276540;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = v7;
      long long v16 = *(_OWORD *)(a1 + 40);
      id v12 = (id)v16;
      long long v18 = v16;
      id v13 = v17;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000100AC;
      block[3] = &unk_100275DF8;
      id v26 = v13;
      id v14 = v11;
      dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
      dispatch_async(v14, v15);
    }
  }
}

void *sub_10000FBF4(void *result)
{
  if (!*(unsigned char *)(*(void *)(result[5] + 8) + 24))
  {
    *(void *)(*(void *)(result[6] + 8) + 24) += result[7];
    return (void *)(*(uint64_t (**)(void, void))(result[4] + 16))(result[4], *(void *)(*(void *)(result[6] + 8) + 24));
  }
  return result;
}

id sub_10000FC3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addDequeueObserver:*(void *)(a1 + 40)];
}

void sub_10000FC48(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(*(void *)(a1 + 32) + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000FDC8;
  v12[3] = &unk_1002765B8;
  uint64_t v18 = *(void *)(a1 + 72);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  char v19 = a2;
  id v16 = v5;
  id v17 = v7;
  uint64_t v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000100AC;
  block[3] = &unk_100275DF8;
  id v21 = v8;
  id v9 = v6;
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

uint64_t sub_10000FDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  if (*(void *)(a1 + 32))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10000FE9C;
    v8[3] = &unk_100276590;
    id v5 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 32);
    id v6 = [v5 performReadTransactionWithBlock:v8];
  }
  return (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 56), a4);
}

id sub_10000FE9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeDequeueObserver:*(void *)(a1 + 40)];
}

uint64_t sub_10000FFB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001006C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE438 = (uint64_t)os_log_create(v1, "daemon.initialdownload");
  _objc_release_x1();
}

void sub_1000100AC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100010670()
{
  if (qword_1002CE440 != -1) {
    dispatch_once(&qword_1002CE440, &stru_1002766F0);
  }
  v0 = (void *)qword_1002CE448;
  return v0;
}

void sub_1000106C4(uint64_t a1)
{
}

void sub_1000106E0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100010670();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watching %@ has been be cancelled", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100010798(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000108B4;
  v10[3] = &unk_100276018;
  id v11 = v3;
  uint64_t v12 = v4;
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100012D4C;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  id v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_1000108B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(*(id *)(v2 + 24), "removeVolumeUnmountObserver:");
    [*(id *)(*(void *)(a1 + 40) + 24) stop];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 74) = 0;
    [*(id *)(a1 + 40) _startWatchingSystemState];
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104));
  [WeakRetained wrapper:*(void *)(a1 + 40) libraryDidOpenWithError:*(void *)(a1 + 32)];
}

unsigned char *sub_100010D2C(uint64_t a1)
{
  id result = *(unsigned char **)(a1 + 32);
  if (!result[74])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_100010670();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = [*(id *)(v4 + 88) currentClosingComponentName];
        int v6 = 138412546;
        uint64_t v7 = v4;
        __int16 v8 = 2114;
        dispatch_block_t v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Closing %@ took too long. Current closing component is %{public}@", (uint8_t *)&v6, 0x16u);
      }
      id result = *(unsigned char **)(a1 + 32);
    }
    return [result _emergencyExit];
  }
  return result;
}

void sub_100010E20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100010F3C;
  v10[3] = &unk_100276018;
  void v10[4] = v4;
  id v11 = v3;
  int v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100012D4C;
  block[3] = &unk_100275DF8;
  id v13 = v6;
  uint64_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100010F3C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 74) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 73) = 0;
  if (*(void *)(a1 + 40))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_100010670();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = *(void *)(a1 + 32);
        uint64_t v4 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v7 = v3;
        __int16 v8 = 2112;
        uint64_t v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Closing %@ raised an error: %@", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 32) _emergencyExit];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    [WeakRetained wrapperLibraryDidClose:*(void *)(a1 + 32)];
  }
}

void sub_1000111F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000112FC;
  v6[3] = &unk_100276288;
  void v6[4] = v1;
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100012D4C;
  block[3] = &unk_100275DF8;
  id v9 = v3;
  uint64_t v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

uint64_t sub_1000112FC(uint64_t a1)
{
  [*(id *)(a1 + 32) _stopWatchingSystemState];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  [WeakRetained wrapperShouldBeDropped:*(void *)(a1 + 32)];

  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_100011428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100011530;
  v6[3] = &unk_100276288;
  void v6[4] = v1;
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100012D4C;
  block[3] = &unk_100275DF8;
  id v9 = v3;
  uint64_t v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

id sub_100011530(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  [WeakRetained wrapperShouldBeDropped:*(void *)(a1 + 32)];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v3 = *(void **)(a1 + 32);
  return [v3 _emergencyExit];
}

id sub_100011CF0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100010670();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@ should be wiped - exiting immediately", (uint8_t *)&v5, 0xCu);
    }
  }
  return [*(id *)(a1 + 32) _emergencyExit];
}

void sub_100011EC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained wrapper:*(void *)(a1 + 32) getStatusDictionaryWithCompletionHandler:*(void *)(a1 + 40)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100012058(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  id v3 = [*(id *)(*(void *)(a1 + 32) + 88) supervisor];
  uint64_t v4 = [v3 status];

  if (!v4)
  {
    int v5 = (void (**)(id, const __CFString *, void))objc_retainBlock(*(id *)(a1 + 40));
    if (WeakRetained) {
      goto LABEL_3;
    }
LABEL_5:
    v5[2](v5, &stru_10027FEB8, 0);
    goto LABEL_6;
  }
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  __int16 v8 = sub_100012184;
  id v9 = &unk_1002766D0;
  id v11 = *(id *)(a1 + 40);
  id v10 = v4;
  int v5 = (void (**)(id, const __CFString *, void))[&v6 copy];

  if (!WeakRetained) {
    goto LABEL_5;
  }
LABEL_3:
  objc_msgSend(WeakRetained, "wrapper:getStatusWithCompletionHandler:", *(void *)(a1 + 32), v5, v6, v7, v8, v9);
LABEL_6:
}

void sub_100012184(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *(void (**)(uint64_t))(v4 + 16);
    id v7 = a2;
    v5(v4);
  }
  else
  {
    id v6 = a2;
    id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%@\nsupervisor: %@", v6, *(void *)(a1 + 32)];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10001238C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  [WeakRetained wrapperNeedsInitialDownloadOfMainScope:*(void *)(a1 + 32)];
}

void sub_1000124D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  [WeakRetained wrapperDidCompleteInitialSyncOfMainScope:*(void *)(a1 + 32)];
}

void sub_100012D0C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE448 = (uint64_t)os_log_create(v1, "engine.wrapper");
  _objc_release_x1();
}

void sub_100012D4C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100012D98()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CPLDaemonProcessProtocol];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, objc_opt_class(), 0);
  [v0 setClasses:v2 forSelector:"getEngineWrapperStatusesWithCompletionHandler:" argumentIndex:0 ofReply:1];

  uint64_t v3 = objc_opt_class();
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, objc_opt_class(), 0);
  [v0 setClasses:v4 forSelector:"getDaemonLibraryManagerStatusesWithCompletionHandler:" argumentIndex:0 ofReply:1];

  return v0;
}

id sub_10001337C()
{
  if (qword_1002CE450 != -1) {
    dispatch_once(&qword_1002CE450, &stru_100276A78);
  }
  v0 = (void *)qword_1002CE458;
  return v0;
}

void sub_10001366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100013684(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_autoCloseWrapper:");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a4 = 1;
  }
  return result;
}

id sub_100013F08(uint64_t a1)
{
  return [*(id *)(a1 + 32) wrapper:*(void *)(a1 + 40) libraryDidOpenWithError:*(void *)(a1 + 48)];
}

void sub_100014264(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10001337C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Closing %@", (uint8_t *)&v6, 0xCu);
    }
  }
  [(CPLEngineWrapper *)v4 stop];
}

void sub_100014338(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10001337C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Emergency closing %@", (uint8_t *)&v6, 0xCu);
    }
  }
  [(CPLEngineWrapper *)v4 emergencyClose];
}

int64_t sub_1000144B8(id a1, NSString *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  if ([(NSString *)v4 isEqualToString:v5])
  {
    int64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = CPLLibraryIdentifierSystemLibrary;
    if ([(NSString *)v4 isEqualToString:CPLLibraryIdentifierSystemLibrary])
    {
      int64_t v6 = -1;
    }
    else if ([v5 isEqualToString:v7])
    {
      int64_t v6 = 1;
    }
    else
    {
      int64_t v6 = [(NSString *)v4 compare:v5];
    }
  }

  return v6;
}

void sub_100014C60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 16);
  id v7 = v3;
  id v5 = [v3 libraryIdentifier];
  int64_t v6 = [v4 objectForKeyedSubscript:v5];

  if (!v6) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100015058(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engine];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 80);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001516C;
  v5[3] = &unk_100276830;
  uint64_t v4 = *(void *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 72);
  id v7 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 80);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v2 forceBackupWithActivity:v4 forceClientPush:v3 completionHandler:v5];
}

void sub_10001516C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 72);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000152FC;
  v11[3] = &unk_100276808;
  id v12 = v3;
  id v13 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 32);
  id v18 = v5;
  uint64_t v14 = v6;
  id v15 = *(id *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 80);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018990;
  block[3] = &unk_100275DF8;
  id v21 = v7;
  id v8 = v4;
  id v9 = v3;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

id sub_1000152FC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_10001337C();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v3 = *(void *)(a1 + 40);
        int v8 = 138412546;
        uint64_t v9 = v3;
        __int16 v10 = 2112;
        uint64_t v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requested forced backup failed for %@: %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v6 = sub_10001337C();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Requested forced backup for %@ succeeded", (uint8_t *)&v8, 0xCu);
      }
    }
    return [*(id *)(a1 + 48) _forceBackupWithActivity:*(void *)(a1 + 56) forceClientPush:*(unsigned __int8 *)(a1 + 88) enumerator:*(void *)(a1 + 64) progress:*(void *)(a1 + 72) completionHandler:*(void *)(a1 + 80)];
  }
}

void sub_100015874(id *a1)
{
  uint64_t v2 = [a1[4] engine];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100015960;
  v5[3] = &unk_100276428;
  int8x16_t v4 = *((int8x16_t *)a1 + 2);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  id v7 = a1[6];
  id v8 = a1[7];
  id v9 = a1[8];
  [v2 performMaintenanceCleanupWithCompletionHandler:v5];
}

void sub_100015960(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100015AB0;
  v8[3] = &unk_100276428;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018990;
  block[3] = &unk_100275DF8;
  id v15 = v5;
  int8x16_t v6 = v2;
  dispatch_block_t v7 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v7);
}

id sub_100015AB0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10001337C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requested maintenance for %@ completed", (uint8_t *)&v5, 0xCu);
    }
  }
  return [*(id *)(a1 + 40) _executeMaintenanceWithEnumerator:*(void *)(a1 + 48) progress:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

BOOL sub_100015D38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:CPLLibraryIdentifierSystemLibrary])
  {
    BOOL v4 = 1;
  }
  else
  {
    int v5 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v3];
    BOOL v4 = v5 != 0;
  }
  return v4;
}

void sub_100015DA4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(v3, "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100015F24(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) recordComputeStatePushQueue];
  if ([v2 countOfComputeStates])
  {
    id v3 = [*(id *)(a1 + 40) engine];
    id v4 = [v3 scheduler];
    [v4 noteScopeNeedsToUploadComputeState];

    if (!_CPLSilentLogging)
    {
      int v5 = sub_10001337C();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Requesting sync session to upload compute states for %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
}

void sub_100016674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose((const void *)(v61 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000166A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000166B0(uint64_t a1)
{
}

void sub_1000166B8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
  }
}

void sub_100016720(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
    [*(id *)(a1 + 40) setCancellationHandler:0];
    [*(id *)(a1 + 48) _removeEngineWrapperOpenObserverWithIdentifier:*(void *)(a1 + 56)];
  }
}

void sub_1000167EC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 32));
    dispatch_time_t v3 = dispatch_time(0, (uint64_t)(*(double *)&qword_1002C8160 * 1000000000.0));
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100016954;
    v9[3] = &unk_1002768F8;
    id v4 = v2;
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v10 = v4;
    uint64_t v13 = v5;
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    dispatch_source_set_event_handler(v4, v9);
    uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
    int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v4;
    uint64_t v8 = v4;

    dispatch_resume(v8);
  }
}

void sub_100016954(void *a1)
{
  if (a1[4] == *(void *)(*(void *)(a1[7] + 8) + 40))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_10001337C();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = a1[5];
        int v6 = 138412290;
        uint64_t v7 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Client has not tried to open %@ for a long time", (uint8_t *)&v6, 0xCu);
      }
    }
    uint64_t v4 = a1[6];
    uint64_t v5 = +[CPLErrors cplErrorWithCode:83 description:@"Client failed to open library in time"];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
}

void sub_100016A64(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100016B70;
  v7[3] = &unk_100276948;
  long long v6 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v6;
  long long v8 = v6;
  uint64_t v3 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018990;
  block[3] = &unk_100275DF8;
  id v10 = v3;
  uint64_t v4 = v1;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

void sub_100016B70(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10001337C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = NSStringFromSelector(*(SEL *)(a1 + 40));
      int v6 = 138543362;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  dispatch_block_t v5 = +[CPLErrors operationCancelledError];
  (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
}

void sub_100016C74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) openError];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_100016CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100016CEC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  int v6 = [v8 libraryIdentifier];
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 40)];

  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100016E44(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  int v6 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v15];
  if (!v6)
  {
    unsigned int v7 = [v5 openError];
    unsigned int v8 = [v7 isCPLErrorWithCode:1014];

    if (!v8) {
      goto LABEL_8;
    }
    id v9 = [v5 parameters];
    int v6 = [v9 cloudLibraryStateStorageURL];

    id v10 = [v5 openError];
    id v11 = [v10 userInfo];
    uint64_t v12 = [v11 objectForKeyedSubscript:CPLErrorResetReason];
    uint64_t v13 = (void *)v12;
    if (v12) {
      CFStringRef v14 = (const __CFString *)v12;
    }
    else {
      CFStringRef v14 = @"no reason";
    }
    +[CPLPrequeliteStore wipeStoreAtNextOpeningWithCloudLibraryStorageURL:v6 reason:v14];

    [*(id *)(a1 + 40) addObject:v15];
  }

LABEL_8:
}

void sub_1000171EC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
  id v4 = a2;
  id v5 = [v4 libraryIdentifier];
  int v6 = [v3 objectForKeyedSubscript:v5];
  BOOL v7 = v6 == 0;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
  id v9 = [WeakRetained wrapperArray:*(void *)(a1 + 32) countOfClientsForWrapper:v4];

  id v10 = [[CPLEngineWrapperStatus alloc] initWithWrapper:v4 clientCount:v9 isOpened:v7 openError:0];
  [*(id *)(a1 + 40) addObject:v10];
}

void sub_1000172CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:a2];

  if (!v5)
  {
    int v6 = [CPLEngineWrapperStatus alloc];
    BOOL v7 = [v10 parameters];
    unsigned int v8 = [v10 openError];
    id v9 = [(CPLEngineWrapperStatus *)v6 initWithParameters:v7 clientCount:0 isOpened:0 openError:v8];

    [*(id *)(a1 + 40) addObject:v9];
  }
}

void sub_100017488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000174A0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = [a2 engine];
  id v5 = [v4 configuration];
  uint64_t v6 = [v5 configurationDictionary];
  if (v3)
  {
    id v11 = (id)v6;

    if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) compare:v11] != (id)-1)
    {
      BOOL v7 = v11;
      goto LABEL_7;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    id v4 = v11;
    id v5 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v4;
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;
  }
  BOOL v7 = v4;
LABEL_7:
}

void sub_100017668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100017680(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = [a2 engine];
  id v5 = [v4 configuration];
  uint64_t v6 = [v5 configurationDictionary];
  if (!v3)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;

    goto LABEL_5;
  }
  id v11 = (id)v6;

  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) compare:v11] == (id)1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v4 = v11;
    id v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v4;
LABEL_5:

    uint64_t v10 = v4;
    goto LABEL_7;
  }
  uint64_t v10 = v11;
LABEL_7:
}

void sub_100017ADC(uint64_t a1, void *a2)
{
  id v4 = [a2 engine];
  uint64_t v3 = [v4 configuration];
  [v3 updateConfigurationDictionary:*(void *)(a1 + 32)];
}

void sub_100017C90(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  id v4 = a3;
  if (![(CPLEngineWrapper *)v4 inEmergencyClosing])
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10001337C();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412290;
        uint64_t v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Emergency closing %@", (uint8_t *)&v6, 0xCu);
      }
    }
    [(CPLEngineWrapper *)v4 emergencyClose];
  }
}

uint64_t sub_100018054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a3 + 16))(a3, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_100018950(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE458 = (uint64_t)os_log_create(v1, "engine.wrapper.array");
  _objc_release_x1();
}

void sub_100018990(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100018B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100018B8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _activityHasExpired];
}

void sub_100018D3C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100018D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100018D70(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 12);
  return result;
}

void sub_100018EE8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) shouldDefer])
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v2();
  }
  else
  {
    if (!*(void *)(*(void *)(a1 + 32) + 24))
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 24);
      *(void *)(v4 + 24) = v3;
    }
    id v7 = [*(id *)(a1 + 48) copy];
    id v6 = objc_retainBlock(v7);
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

id sub_1000190E4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_1000191F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  [WeakRetained activityHasExpired:*(void *)(a1 + 32)];

  id v3 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v4 = v3 + 2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  id v11 = sub_100019358;
  uint64_t v12 = &unk_100275EA0;
  uint64_t v13 = v3;
  id v5 = v10;
  os_unfair_lock_lock(v4);
  v11((uint64_t)v5);
  os_unfair_lock_unlock(v4);

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100019370;
  v9[3] = &unk_100276AF0;
  void v9[4] = v6;
  [v7 enumerateKeysAndObjectsUsingBlock:v9];
  return [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
}

void sub_100019330(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100019344(_Unwind_Exception *a1)
{
}

uint64_t sub_100019358(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 12) = 1;
  return result;
}

uint64_t sub_100019370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(void *)(a1 + 32));
}

void sub_100019878(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100019BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100019C1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100019D60();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        int v8 = 138412546;
        id v9 = WeakRetained;
        __int16 v10 = 2112;
        uint64_t v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@ disconnected from %@", (uint8_t *)&v8, 0x16u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 8) markLibraryManagerAsInvalid];
    [*(id *)(a1 + 32) _dropManagerWithCompletionBlock:&stru_100276B10];
    [*(id *)(*(void *)(a1 + 32) + 88) setDelegate:0];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 88);
    *(void *)(v5 + 88) = 0;

    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
    [v7 daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

    [WeakRetained setInvalidationHandler:0];
  }
}

id sub_100019D60()
{
  if (qword_1002CE460 != -1) {
    dispatch_once(&qword_1002CE460, &stru_100277080);
  }
  v0 = (void *)qword_1002CE468;
  return v0;
}

void sub_10001A370(id a1, NSString *a2, CPLResourceTransferTask *a3, BOOL *a4)
{
}

void sub_10001A378(id a1, NSString *a2, CPLForceSyncTask *a3, BOOL *a4)
{
}

id sub_10001A380(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Discarded library", v4, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  return [*(id *)(*(void *)(a1 + 32) + 8) setDelegate:0];
}

void sub_10001A534(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) markLibraryManagerAsInvalid];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001A680;
  v9[3] = &unk_100276288;
  id v2 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v2;
  id v3 = objc_retainBlock(v9);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4[11])
  {
    uint64_t v5 = [v4 _clientWithErrorHandler:&stru_100276BF8];
    [v5 libraryManagerHasBeenReplaced];

    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 88);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10001A82C;
    v7[3] = &unk_100275DF8;
    int v8 = v3;
    [v6 scheduleSendBarrierBlock:v7];
  }
  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_10001A680(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Force dropping library manager for %@ and killing caller", buf, 0xCu);
    }
  }
  uint64_t v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001A7A4;
  v5[3] = &unk_100276288;
  void v5[4] = v4;
  id v6 = *(id *)(a1 + 40);
  [v4 _dropManagerWithCompletionBlock:v5];
}

uint64_t sub_10001A7A4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 88) invalidate];
  [*(id *)(*(void *)(a1 + 32) + 88) setDelegate:0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 88) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
  [WeakRetained daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v5();
}

uint64_t sub_10001A82C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001A954(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) markLibraryManagerAsInvalid];
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Force dropping library manager for %@", buf, 0xCu);
    }
  }
  uint64_t v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001AA84;
  v5[3] = &unk_100276288;
  void v5[4] = v4;
  id v6 = *(id *)(a1 + 40);
  [v4 _dropManagerWithCompletionBlock:v5];
}

uint64_t sub_10001AA84(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 88) invalidate];
  [*(id *)(*(void *)(a1 + 32) + 88) setDelegate:0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 88) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
  [WeakRetained daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v5();
}

void sub_10001ACB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001ADD8;
  v7[3] = &unk_100275D40;
  void v7[4] = v2;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  uint64_t v4 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100026948;
  block[3] = &unk_100275DF8;
  id v11 = v4;
  uint64_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);
}

id sub_10001ADD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier:*(void *)(a1 + 40) callBlock:*(void *)(a1 + 48)];
}

void sub_10001AF40(uint64_t a1, void *a2)
{
  if (*(void **)(a1 + 32) != a2)
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    id v4 = a2;
    dispatch_group_enter(v3);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001AFF8;
    v5[3] = &unk_100275EA0;
    id v6 = *(id *)(a1 + 40);
    [v4 _dropWithCompletionBlock:v5];
  }
}

void sub_10001AFF8(uint64_t a1)
{
}

uint64_t sub_10001B000(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001B1B0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[7];
  id v40 = 0;
  uint64_t v11 = [WeakRetained daemonLibraryManager:v4 engineWrapperWithClientLibraryBaseURL:v5 cloudLibraryStateStorageURL:v6 cloudLibraryResourceStorageURL:v7 libraryIdentifier:v8 mainScopeIdentifier:v9 options:v10 error:&v40];
  id v12 = v40;
  uint64_t v13 = *(void **)(*v2 + 104);
  *(void *)(*v2 + 104) = v11;

  if (*(void *)(*v2 + 104))
  {
    id v14 = [objc_alloc((Class)CPLLibraryManager) initWithClientLibraryBaseURL:*(void *)(a1 + 40) cloudLibraryStateStorageURL:*(void *)(a1 + 48) cloudLibraryResourceStorageURL:*(void *)(a1 + 56) libraryIdentifier:*(void *)(a1 + 64) mainScopeIdentifier:*(void *)(a1 + 72) options:*(void *)(a1 + 88)];
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 8);
    *(void *)(v15 + 8) = v14;

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setResourceProgressDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setForceSyncDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setRecordComputeStateDelegate:");
    uint64_t v17 = [*(id *)(*(void *)(a1 + 32) + 8) platformObject];
    uint64_t v18 = *(void *)(a1 + 32);
    char v19 = *(void **)(v18 + 16);
    *(void *)(v18 + 16) = v17;

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      sub_1001C548C(v2, a1);
    }
    [*(id *)(*v2 + 16) setClientQueue:*(void *)(*v2 + 56)];
    uint64_t v20 = *(void **)(*v2 + 16);
    id v21 = [*(id *)(*v2 + 104) engine];
    [v20 setEngineLibrary:v21];

    if (!_CPLSilentLogging)
    {
      long long v22 = sub_100019D60();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(*v2 + 8);
        *(_DWORD *)buf = 138412290;
        uint64_t v42 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Opening %@", buf, 0xCu);
      }
    }
    id v24 = *(id *)(*(void *)(a1 + 32) + 8);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10001B5D8;
    v36[3] = &unk_100276C48;
    uint64_t v25 = *(void *)(a1 + 32);
    id v37 = v24;
    uint64_t v38 = v25;
    id v39 = *(id *)(a1 + 80);
    id v26 = v24;
    [v26 openWithCompletionHandler:v36];

    goto LABEL_20;
  }
  if (![v12 isCPLErrorWithCode:2005])
  {
LABEL_19:
    (*(void (**)(void, id, void, void))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, 0, 0);
    goto LABEL_20;
  }
  id v27 = objc_loadWeakRetained((id *)(*v2 + 112));

  if (!v27)
  {
    if (!_CPLSilentLogging)
    {
      long long v33 = sub_100019D60();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v35 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412546;
        uint64_t v42 = v34;
        __int16 v43 = 2114;
        uint64_t v44 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%@ tried to open a mismatched %{public}@ but there is not delegate to reset parameters", buf, 0x16u);
      }
    }
    goto LABEL_19;
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = sub_100019D60();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(a1 + 32);
      uint64_t v30 = *(void *)(a1 + 64);
      id v31 = objc_loadWeakRetained((id *)(v29 + 112));
      *(_DWORD *)buf = 138412802;
      uint64_t v42 = v29;
      __int16 v43 = 2114;
      uint64_t v44 = v30;
      __int16 v45 = 2112;
      id v46 = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%@ tried to open a mismatched %{public}@ - resetting parameters and asking %@ to quit immediately", buf, 0x20u);
    }
  }
  id v32 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
  [v32 daemonLibraryManager:*(void *)(a1 + 32) wantsToExitAfterResettingParametersForLibraryWithIdentifier:*(void *)(a1 + 64)];

LABEL_20:
}

void sub_10001B5D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_100019D60();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ failed to open with error: %@", buf, 0x16u);
      }
    }
    if ([v3 isCPLErrorWithCode:2003])
    {
      uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 56);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10001BA5C;
      v33[3] = &unk_100275D40;
      id v7 = v3;
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(a1 + 48);
      id v34 = v7;
      uint64_t v35 = v8;
      id v36 = v9;
      uint64_t v10 = v33;
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_100026948;
      id v40 = &unk_100275DF8;
      id v41 = v10;
      uint64_t v11 = v6;
      dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v11, v12);
    }
    else
    {
      (*(void (**)(void, id, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v3, 0, 0);
    }
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 32) libraryVersion];
    if (!_CPLSilentLogging)
    {
      id v14 = sub_100019D60();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%@ opened successfully with version %@", buf, 0x16u);
      }
    }
    id v32 = (void *)v13;
    v37[0] = @"status";
    id v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) status]);
    v37[1] = @"error";
    v38[0] = v16;
    uint64_t v17 = [*(id *)(a1 + 32) statusError];
    uint64_t v18 = v17;
    if (!v17)
    {
      uint64_t v18 = +[NSNull null];
    }
    v38[1] = v18;
    id v31 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:2];
    if (!v17) {

    }
    if (!_CPLSilentLogging)
    {
      char v19 = sub_100019D60();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        uint64_t v21 = *(void *)(v20 + 104);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@ attached to daemon's engine %@", buf, 0x16u);
      }
    }
    uint64_t v22 = *(void *)(a1 + 48);
    id v30 = [*(id *)(a1 + 32) sizeOfResourcesToUpload];
    id v23 = [*(id *)(a1 + 32) sizeOfOriginalResourcesToUpload];
    id v24 = [*(id *)(a1 + 32) numberOfImagesToUpload];
    id v25 = [*(id *)(a1 + 32) numberOfVideosToUpload];
    id v26 = [*(id *)(a1 + 32) numberOfOtherItemsToUpload];
    id v27 = [*(id *)(*(void *)(a1 + 40) + 104) libraryIdentifier];
    uint64_t v28 = [*(id *)(*(void *)(a1 + 40) + 104) mainScopeIdentifier];
    uint64_t v29 = [*(id *)(*(void *)(a1 + 40) + 104) clientLibraryBaseURL];
    (*(void (**)(uint64_t, void, void *, id, id, id, id, id, void *, void *, void *, void *))(v22 + 16))(v22, 0, v31, v30, v23, v24, v25, v26, v32, v27, v28, v29);
  }
}

void sub_10001BA5C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKeyedSubscript:CPLErrorWipeReasonKey];
  uint64_t v4 = (void *)v3;
  uint64_t v5 = @"mismatched library options between client and engine";
  if (v3) {
    uint64_t v5 = (__CFString *)v3;
  }
  uint64_t v6 = v5;

  id v7 = *(void **)(*(void *)(a1 + 40) + 104);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001BB5C;
  v8[3] = &unk_100276288;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 48);
  [v7 wipeWithReason:v6 completionHandler:v8];
}

void sub_10001BB5C(uint64_t a1)
{
  uint64_t v2 = +[CPLErrors cplErrorWithCode:2004 underlyingError:*(void *)(a1 + 32) description:@"Library has been wiped because library options are mismatched"];
  (*(void (**)(void, void *, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v2, 0, 0);
}

uint64_t sub_10001BDA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001BFA0(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 88);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 104);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001C068;
  v6[3] = &unk_100276C98;
  id v4 = *(id *)(a1 + 40);
  id v7 = v2;
  id v8 = v4;
  void v6[4] = *(void *)(a1 + 32);
  id v5 = v2;
  [v3 deactivateWithCompletionHandler:v6];
}

void sub_10001C068(void *a1)
{
  (*(void (**)(void))(a1[6] + 16))();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001C124;
  v4[3] = &unk_100275EA0;
  v4[4] = a1[4];
  id v2 = objc_retainBlock(v4);
  uint64_t v3 = (void *)a1[5];
  if (v3) {
    [v3 scheduleSendBarrierBlock:v2];
  }
  else {
    ((void (*)(void *))v2[2])(v2);
  }
}

id sub_10001C124(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10001C194;
  v3[3] = &unk_100275EA0;
  v3[4] = v1;
  return [v1 _dropManagerWithCompletionBlock:v3];
}

void sub_10001C194(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96);
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 104);
      int v6 = 138412546;
      uint64_t v7 = v4;
      __int16 v8 = 2114;
      uint64_t v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ has been deactivated by %{public}@ - exiting now if possible", (uint8_t *)&v6, 0x16u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
  [WeakRetained daemonLibraryManagerWantsToExitNow:*(void *)(a1 + 32)];
}

void sub_10001C8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 taskIdentifier];
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_100019D60();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
        int v12 = 138413058;
        id v13 = v3;
        __int16 v14 = 2112;
        uint64_t v15 = v4;
        __int16 v16 = 2112;
        uint64_t v17 = v6;
        __int16 v18 = 2112;
        uint64_t v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Got %@ with identifier %@ for %@(%@)", (uint8_t *)&v12, 0x2Au);
      }
    }
    [*(id *)(*(void *)(a1 + 48) + 24) setObject:v3 forKey:v4];
    [*(id *)(a1 + 48) _storeVoucher:*(void *)(a1 + 56) forTaskWithIdentifier:v4];
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_100019D60();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        id v10 = *(void **)(a1 + 32);
        uint64_t v11 = *(void **)(a1 + 40);
        int v12 = 138412546;
        id v13 = v10;
        __int16 v14 = 2112;
        uint64_t v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Unable to get a download task for %@(%@)", (uint8_t *)&v12, 0x16u);
      }
    }
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  v8();
}

void sub_10001CEE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v7 = sub_100019D60();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Push session failed to begin with error %@", (uint8_t *)&v10, 0xCu);
      }
    }
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_100019D60();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Push session %@ began", (uint8_t *)&v10, 0xCu);
      }
    }
    +[CPLResetTracker discardTracker:*(void *)(a1 + 32)];
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_10001D2D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v7 = sub_100019D60();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Pull session failed to begin with error %@", (uint8_t *)&v10, 0xCu);
      }
    }
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_100019D60();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Pull session %@ began", (uint8_t *)&v10, 0xCu);
      }
    }
    +[CPLResetTracker discardTracker:*(void *)(a1 + 32)];
    __int16 v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_10001D6A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_100019D60();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 138412290;
        id v8 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Finalizing failed with error %@", (uint8_t *)&v7, 0xCu);
      }
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_100019D60();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Finalizing succeeded", (uint8_t *)&v7, 2u);
      }
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v5();
}

void sub_10001DA7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      int v7 = sub_100019D60();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Getting changes failed with error %@", buf, 0xCu);
      }
    }
  }
  else if (!_CPLSilentLogging)
  {
    id v8 = sub_100019D60();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Got %@", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001DBF0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, __int16 a14, void *a15)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    uint64_t v19 = +[CPLErrors cplErrorWithCode:150 description:@"Exception raised while trying to send a batch to the client: %@"];
    if (!*v17)
    {
      uint64_t v20 = sub_100019D60();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = +[NSByteCountFormatter stringFromByteCount:countStyle:](NSByteCountFormatter, "stringFromByteCount:countStyle:", [v15 estimatedBatchSize], 1);
        LODWORD(buf) = 138412802;
        *(void *)((char *)&buf + 4) = v18;
        WORD6(buf) = 2112;
        *(void *)((char *)&buf + 14) = v21;
        a14 = 2112;
        a15 = v15;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unable to send change batch to daemon: %@\nBatch (estimated size: %@): %@", (uint8_t *)&buf, 0x20u);
      }
    }
    (*(void (**)(void))(*(void *)(v16 + 32) + 16))();

    objc_end_catch();
    JUMPOUT(0x10001DBB0);
  }
  _Unwind_Resume(a1);
}

void sub_10001DFD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      int v7 = sub_100019D60();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Acknowledging batch failed with error %@", (uint8_t *)&v10, 0xCu);
      }
    }
    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_100019D60();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 138412290;
        id v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Acknowledging batch succeeded with new library version %@", (uint8_t *)&v10, 0xCu);
      }
    }
    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v8();
}

void sub_10001E404(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a4;
  id v10 = a5;
  if (v8)
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_100019D60();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 138412290;
        id v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Comitting batch failed with error %@", (uint8_t *)&v14, 0xCu);
      }
    }
    int v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_100019D60();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 138412290;
        id v15 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Comitting batch succeeded with new library version %@", (uint8_t *)&v14, 0xCu);
      }
    }
    int v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v12();
}

uint64_t sub_10001ED5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002017C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100020338(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100020508(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100020F3C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000211BC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  id v15 = [a6 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id, id, id, id))(v10 + 16))(v10, v14, v13, v12, v11, v15);
}

void sub_10002141C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [a4 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v6 + 16))(v6, a2, a3, v7);
}

void sub_1000216BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 taskIdentifier];
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_100019D60();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v10 = 138412802;
        id v11 = v3;
        __int16 v12 = 2112;
        id v13 = v4;
        __int16 v14 = 2112;
        uint64_t v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Got %@ with identifier %@ for %@", (uint8_t *)&v10, 0x20u);
      }
    }
    [*(id *)(*(void *)(a1 + 40) + 24) setObject:v3 forKey:v4];
    [*(id *)(a1 + 40) _storeVoucher:*(void *)(a1 + 48) forTaskWithIdentifier:v4];
    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_100019D60();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        id v9 = *(void **)(a1 + 32);
        int v10 = 138412290;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Unable to get an in-memory download task for %@", (uint8_t *)&v10, 0xCu);
      }
    }
    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  v7();
}

void sub_100021C98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100021EB4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000220D4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000222D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000224F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100022708(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000228EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100022B20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100022D68(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100022F68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

void sub_1000232C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100023570(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 taskIdentifier];
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_100019D60();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        id v6 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
        int v10 = 138412802;
        id v11 = v3;
        __int16 v12 = 2112;
        id v13 = v4;
        __int16 v14 = 2112;
        uint64_t v15 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Got %@ with identifier %@ for %@", (uint8_t *)&v10, 0x20u);
      }
    }
    [*(id *)(*(void *)(a1 + 40) + 40) setObject:v3 forKeyedSubscript:v4];
    [*(id *)(a1 + 40) _storeVoucher:*(void *)(a1 + 48) forTaskWithIdentifier:v4];
    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_100019D60();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        id v9 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
        int v10 = 138412290;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Unable to get a sync task for %@", (uint8_t *)&v10, 0xCu);
      }
    }
    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  v7();
}

void sub_100023A74(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_100019D60();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to send status did change to client: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100023CDC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_100019D60();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to notify client has changes to pull: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100023E7C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_100019D60();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to notify client has status changes: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1000240DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to ask client for (local) %@: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10002431C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to ask client to push all changes: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100024558(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000245F8;
  v4[3] = &unk_100276328;
  uint64_t v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v3 = [v2 _clientWithErrorHandler:v4];
  [v3 downloadDidStartForResourceTransferTask:*(void *)(a1 + 48)];
}

void sub_1000245F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did start downloading: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10002485C(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100024900;
  v5[3] = &unk_100276328;
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v3 = [v2 _clientWithErrorHandler:v5];
  LODWORD(v4) = *(_DWORD *)(a1 + 56);
  [v3 downloadDidProgress:*(void *)(a1 + 48) forResourceTransferTask:v4];
}

void sub_100024900(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    double v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did progress: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100024BC4(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100024C90;
  v7[3] = &unk_100276328;
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = [v2 _clientWithErrorHandler:v7];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = [*(id *)(a1 + 64) cplSafeErrorForXPC];
  [v3 downloadDidFinishForResourceTransferTask:v4 finalResource:v5 withError:v6];
}

void sub_100024C90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did finish downloading: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100024F4C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100025018;
  v7[3] = &unk_100276328;
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = [v2 _clientWithErrorHandler:v7];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = [*(id *)(a1 + 64) cplSafeErrorForXPC];
  [v3 inMemoryDownloadDidFinishForResourceTransferTask:v4 data:v5 withError:v6];
}

void sub_100025018(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did finish downloading: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100025230(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ was downloaded in background", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100025428(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ failed to download in background", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1000256F8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did start", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10002599C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did finish", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100025C10(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did progress", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_100025E0C(id a1, NSError *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_100019D60();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to notify client that size of resources to upload did change", v3, 2u);
    }
  }
}

void sub_100026118(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 cplSafeErrorForXPC];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_10002618C(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002622C;
  v4[3] = &unk_100276328;
  uint64_t v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v3 = [v2 _clientWithErrorHandler:v4];
  [v3 forceSyncDidFinishForTask:*(void *)(a1 + 48) withErrors:*(void *)(a1 + 56)];
}

void sub_10002622C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100019D60();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to notify client that %@ did finish force sync: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100026410(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000264B8;
  v4[3] = &unk_100276D38;
  id v5 = *(id *)(a1 + 56);
  id v3 = [v2 _clientWithErrorHandler:v4];
  [v3 providePayloadForComputeStates:*(void *)(a1 + 40) inFolderWithURL:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

uint64_t sub_1000264B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100026908(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE468 = (uint64_t)os_log_create(v1, "daemon.proxy");
  _objc_release_x1();
}

void sub_100026948(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100026AC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  [WeakRetained batterySaverWatcherDidChangeState:*(void *)(a1 + 32)];
}

void sub_100026C24(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[24] && [v2 _updateBatterySaverMode])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
    [WeakRetained batterySaverWatcherDidChangeState:*(void *)(a1 + 32)];
  }
}

void sub_100026DE0()
{
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, @"com.apple.cpl.wantslibrary.notification", 0, 0, 1u);
}

id sub_100027BC4(id a1)
{
  return a1;
}

void sub_100027BE8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x16u);
}

BOOL sub_10002820C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = a3;
  uint64_t v7 = (void *)v6;
  if (!a1) {
    goto LABEL_9;
  }
  BOOL v8 = (v5 | v6) == 0;
  if (!v5 || !v6) {
    goto LABEL_12;
  }
  if ([(id)v5 isEqual:v6])
  {
    BOOL v8 = 1;
    goto LABEL_12;
  }
  id v9 = realpath_DARWIN_EXTSN((const char *)[ (id) v5 fileSystemRepresentation], 0);
  if (!v9)
  {
LABEL_9:
    BOOL v8 = 0;
    goto LABEL_12;
  }
  int v10 = v9;
  id v11 = realpath_DARWIN_EXTSN((const char *)[v7 fileSystemRepresentation], 0);
  if (v11)
  {
    uint64_t v12 = v11;
    BOOL v8 = strcmp(v10, v11) == 0;
    free(v12);
  }
  else
  {
    BOOL v8 = 0;
  }
  free(v10);
LABEL_12:

  return v8;
}

id sub_10002866C()
{
  if (qword_1002CE480 != -1) {
    dispatch_once(&qword_1002CE480, &stru_100277160);
  }
  v0 = (void *)qword_1002CE488;
  return v0;
}

void sub_1000287AC(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  qword_1002CE470 = (uint64_t)objc_msgSend(v1, "initWithObjects:", CPLLibraryIdentifierSystemLibrary, CPLLibraryIdentifierSyndicationLibrary, 0);
  _objc_release_x1();
}

void sub_100029404(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 hasPrefix:@"CPLEngineParameters-"])
  {
    id v3 = [v6 length];
    if (v3 > [@"CPLEngineParameters-" length])
    {
      int v4 = [v6 substringWithRange:objc_msgSend(@"CPLEngineParameters-", "length"), (unsigned char *)objc_msgSend(v6, "length") - (unsigned char *)objc_msgSend(@"CPLEngineParameters-", "length")];
      unint64_t v5 = [*(id *)(a1 + 32) parametersForLibraryIdentifier:v4];
      if (v5) {
        [*(id *)(a1 + 40) addObject:v5];
      }
    }
  }
}

int64_t sub_1000294EC(id a1, CPLEngineParameters *a2, CPLEngineParameters *a3)
{
  int v4 = a2;
  unint64_t v5 = a3;
  id v6 = [(CPLEngineParameters *)v4 libraryIdentifier];
  uint64_t v7 = [(CPLEngineParameters *)v5 libraryIdentifier];
  unsigned __int8 v8 = [v6 isEqualToString:v7];

  if (v8)
  {
    int64_t v9 = 0;
  }
  else
  {
    int v10 = [(CPLEngineParameters *)v4 libraryIdentifier];
    uint64_t v11 = CPLLibraryIdentifierSystemLibrary;
    unsigned __int8 v12 = [v10 isEqualToString:CPLLibraryIdentifierSystemLibrary];

    if (v12)
    {
      int64_t v9 = -1;
    }
    else
    {
      id v13 = [(CPLEngineParameters *)v5 libraryIdentifier];
      unsigned __int8 v14 = [v13 isEqualToString:v11];

      if (v14)
      {
        int64_t v9 = 1;
      }
      else
      {
        uint64_t v15 = [(CPLEngineParameters *)v4 libraryIdentifier];
        uint64_t v16 = [(CPLEngineParameters *)v5 libraryIdentifier];
        int64_t v9 = (int64_t)[v15 compare:v16];
      }
    }
  }

  return v9;
}

void sub_100029A10(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE488 = (uint64_t)os_log_create(v1, "engine.parameters");
  _objc_release_x1();
}

void sub_100029C24(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100029C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100029C58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100029C68(uint64_t a1)
{
}

void sub_100029C70(uint64_t a1)
{
}

void sub_100029D5C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100029D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100029D90(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 96);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100029E64(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100029E78(_Unwind_Exception *a1)
{
}

id sub_100029E8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) identifier];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 88) = v2;

  [*(id *)(a1 + 40) expectedDuration];
  *(void *)(*(void *)(a1 + 32) + 96) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  double v7 = *(double *)(v6 + 96);
  if (v7 == 0.0)
  {
    [*(id *)(v6 + 120) minimumRuntime];
    *(void *)(*(void *)(a1 + 32) + 96) = v8;
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *(double *)(v6 + 96);
  }
  [*(id *)(v6 + 120) minimumRuntimeLeeway];
  double v10 = v7 - v9;
  id result = [*(id *)(*(void *)(a1 + 32) + 120) minimumRuntimeLeeway];
  if (v10 >= v12) {
    double v12 = v10;
  }
  *(double *)(*(void *)(a1 + 32) + 96) = v12;
  return result;
}

void sub_10002A044(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002A058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002A078(uint64_t a1)
{
}

void sub_10002A14C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002A160(_Unwind_Exception *a1)
{
}

void sub_10002A174(uint64_t a1)
{
}

void sub_10002A3EC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10002A438(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 40));
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 48));
  uint64_t v2 = *(void **)(a1[4] + 56);
  uint64_t v3 = (id *)(*(void *)(a1[7] + 8) + 40);
  objc_storeStrong(v3, v2);
}

id sub_10002A598()
{
  if (qword_1002CE490 != -1) {
    dispatch_once(&qword_1002CE490, &stru_1002772D8);
  }
  v0 = (void *)qword_1002CE498;
  return v0;
}

void sub_10002A7CC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002A7E0(_Unwind_Exception *a1)
{
}

void sub_10002A7F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = [*(id *)(v2 + 120) now];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = v3;
  }
  else
  {
    uint64_t v5 = *(void **)(v2 + 48);
    *(void *)(v2 + 48) = 0;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  double v7 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = 0;

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = (id *)(*(void *)(a1 + 40) + 16);
  objc_storeStrong(v9, v8);
}

void sub_10002AC50(id a1, NSUUID *a2, id a3)
{
}

uint64_t sub_10002AF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(void *)(a1 + 32));
}

void sub_10002B0B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) currentActivity];

  if (v2 == v3)
  {
    uint64_t v4 = *(os_unfair_lock_s **)(a1 + 40);
    uint64_t v5 = v4 + 2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    uint64_t v9 = sub_10002B1CC;
    double v10 = &unk_100277218;
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v11 = v4;
    uint64_t v13 = v6;
    id v12 = *(id *)(a1 + 32);
    double v7 = v8;
    os_unfair_lock_lock(v5);
    v9((uint64_t)v7);
    os_unfair_lock_unlock(v5);

    objc_msgSend(*(id *)(*(void *)(a1 + 40) + 120), "activityHasExpired:forRescheduler:", *(void *)(a1 + 32));
  }
}

void sub_10002B1A4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002B1B8(_Unwind_Exception *a1)
{
}

void sub_10002B1CC(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 48)) {
    sub_1001C5D24();
  }
  uint64_t v4 = [*(id *)(v2 + 120) now];
  uint64_t v5 = *(void **)(*(void *)v3 + 56);
  *(void *)(*(void *)v3 + 56) = v4;

  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10002A598();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      [*(id *)(*(void *)(a1 + 32) + 56) timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 48)];
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 96);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ has expired after running for %.1fs (vs. estimated running time before expiration: %.1fs)", (uint8_t *)&v10, 0x20u);
    }
  }
}

void sub_10002B504(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002B538(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 16);
  if (result) {
    id result = [result shouldDefer];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10002B67C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002B690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10002B6B0(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 48))
  {
    uint64_t v2 = result;
    id result = *(void **)(v1 + 56);
    if (result)
    {
      id result = objc_msgSend(result, "timeIntervalSinceDate:");
      if (v3 > *(double *)(v2[4] + 96)) {
        *(unsigned char *)(*(void *)(v2[5] + 8) + 24) = 1;
      }
    }
  }
  return result;
}

void sub_10002B7E8(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002B7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002B81C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    double v4 = *(double *)(v1 + 96);
    uint64_t v5 = [*(id *)(v1 + 120) now];
    [v2 timeIntervalSinceDate:v5];
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4 + v6;

    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = fmax(*(double *)(*(void *)(*(void *)(a1 + 40) + 8)+ 24), 10.0);
  }
}

void sub_10002B9C4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) currentActivity];
  if (v2)
  {
    uint64_t v41 = 0;
    uint64_t v42 = &v41;
    uint64_t v43 = 0x3032000000;
    uint64_t v44 = sub_100029C58;
    __int16 v45 = sub_100029C68;
    id v46 = 0;
    double v3 = *(os_unfair_lock_s **)(a1 + 32);
    double v4 = v3 + 2;
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    id v37 = sub_10002BF1C;
    uint64_t v38 = &unk_100275F88;
    id v39 = v3;
    id v40 = &v41;
    uint64_t v5 = v36;
    os_unfair_lock_lock(v4);
    v37((uint64_t)v5);
    os_unfair_lock_unlock(v4);

    if (!v42[5])
    {
      if (!_CPLSilentLogging)
      {
        id v24 = __CPLGenericOSLogDomain();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v25 = [*(id *)(a1 + 32) taskIdentifier];
          *(_DWORD *)buf = 138412290;
          v48 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@ has been deferred without any current task", buf, 0xCu);
        }
      }
      id v26 = +[NSAssertionHandler currentHandler];
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
      id v30 = [*(id *)(a1 + 32) taskIdentifier];
      [v26 handleFailureInMethod:v27, v28, v29, 333, @"%@ has been deferred without any current task", v30 object file lineNumber description];

      abort();
    }
    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = v6;

    uint64_t v9 = [v2 request];
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 112);
    *(void *)(v10 + 112) = v9;

    [*(id *)(a1 + 32) _setCurrentActivity:0];
    uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 120) now];
    uint64_t v13 = *(void *)(a1 + 32);
    __int16 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    [*(id *)(a1 + 32) _scheduleBlockedTimeout];
    *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
    if (!_CPLSilentLogging)
    {
      uint64_t v15 = sub_10002A598();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v48 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Resubmitting task request for %@ after task has been deferred", buf, 0xCu);
      }
    }
    uint64_t v17 = [*(id *)(*(void *)(a1 + 32) + 120) resubmitTaskRequestForRescheduler:*(void *)(a1 + 32) updatedPrediction:*(void *)(*(void *)(a1 + 32) + 72) afterTaskHasBeenDeferred:v42[5]];
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void **)(v18 + 72);
    *(void *)(v18 + 72) = 0;

    uint64_t v20 = *(void *)(a1 + 32);
    if (v17 != *(void **)(v20 + 112))
    {
      if (!v17)
      {
        if (!_CPLSilentLogging)
        {
          id v31 = __CPLGenericOSLogDomain();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Unexpected nil request after resubmitting %@", buf, 0xCu);
          }
        }
        id v32 = +[NSAssertionHandler currentHandler];
        uint64_t v33 = *(void *)(a1 + 48);
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
        [v32 handleFailureInMethod:v33, v34, v35, 350, @"Unexpected nil request after resubmitting %@", 0 object file lineNumber description];

        abort();
      }
      if (!_CPLSilentLogging)
      {
        uint64_t v21 = sub_10002A598();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = [*(id *)(*(void *)(a1 + 32) + 112) identifier];
          id v23 = [v17 identifier];
          *(_DWORD *)buf = 138543618;
          v48 = v22;
          __int16 v49 = 2114;
          v50 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Switching Background Task Request from %{public}@ to %{public}@", buf, 0x16u);
        }
        uint64_t v20 = *(void *)(a1 + 32);
      }
      objc_storeStrong((id *)(v20 + 112), v17);
      [*(id *)(a1 + 32) _updateTaskIdentifierWithRequest:*(void *)(*(void *)(a1 + 32) + 112)];
    }

    _Block_object_dispose(&v41, 8);
  }
  else
  {
    [*(id *)(a1 + 32) _updateRequestIfNecessary];
  }
}

void sub_10002BEB0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  JUMPOUT(0x10002BF14);
}

void sub_10002BED0()
{
}

void sub_10002BEDC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10002BF14);
}

void sub_10002BF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002BF1C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) task];
  return _objc_release_x1();
}

id sub_10002C10C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sessionIsDoneOrWontHappen];
}

id sub_10002C204(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sessionIsDoneOrWontHappen];
}

void sub_10002C2FC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10002A598();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Engine is closing for %@", buf, 0xCu);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 66) = 1;
  double v4 = [*(id *)(a1 + 32) taskIdentifier];
  dispatch_time_t v5 = dispatch_time(0, 30000000000);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002C46C;
  block[3] = &unk_100277218;
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v4;
  uint64_t v12 = v8;
  void block[4] = v6;
  id v9 = v4;
  dispatch_after(v5, v7, block);
}

void sub_10002C46C(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[4];
  dispatch_time_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  [v2 handleFailureInMethod:v3, v4, v5, 398, @"Engine has closed for %@ 30s ago and the process is still running", a1[5] object file lineNumber description];

  abort();
}

void sub_10002C688(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) currentActivity];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), *(id *)(a1 + 40));
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_10002A598();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        int v7 = 138412290;
        uint64_t v8 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Updating prediction for %@ but task is already running", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      dispatch_time_t v5 = sub_10002A598();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating prediction for %@ and resubmitting the request", (uint8_t *)&v7, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _updateRequestIfNecessary];
  }
}

void sub_10002C8E4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10002C8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C918(uint64_t a1)
{
}

void sub_10002CA80(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) acquireError];
  if (v8)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_5:
    v2();
    goto LABEL_6;
  }
  uint64_t v3 = [*(id *)(a1 + 32) currentActivity];

  if (v3)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  if (!*(void *)(*(void *)(a1 + 32) + 24))
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v4;
  }
  id v7 = objc_retainBlock(*(id *)(a1 + 48));
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:v7 forKeyedSubscript:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) _submitTaskRequest];
LABEL_6:
}

id sub_10002CC80(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
    if (!result)
    {
      uint64_t v3 = *(void **)(a1 + 32);
      return [v3 _dropTaskRequest];
    }
  }
  return result;
}

void *sub_10002CEA0(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[10] == *(void *)(a1 + 40)) {
    return _[result _sessionTimerFired];
  }
  return result;
}

void *sub_10002D348(void *result)
{
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = *(void *)(result[4] + 48) != 0;
  if (*(unsigned char *)(*(void *)(result[6] + 8) + 24))
  {
    uint64_t v1 = result;
    id result = [*(id *)(result[4] + 24) isEqualToString:result[5]];
    *(unsigned char *)(*(void *)(v1[6] + 8) + 24) = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10002D458(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  BOOL v2 = !*(void *)(v1 + 56)
    && !*(void *)(v1 + 48)
    && !*(void *)(v1 + 24)
    && !*(void *)(v1 + 32)
    && *(unsigned char *)(v1 + 40) == 0;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

id sub_10002D9D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _acquiredTask:a2 error:0];
}

void sub_10002F57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002F5A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_10002A598();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Persisted sync session acquired a Background System Task and can start", v4, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10002F7B4(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) _persistedSyncSessionForScheduler:*(void *)(a1 + 40) startSyncSessionBlock:*(void *)(a1 + 48)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_10002A598();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 24);
        int v9 = 138412546;
        uint64_t v10 = v4;
        __int16 v11 = 2114;
        uint64_t v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found persisted request for %@ (%{public}@)", (uint8_t *)&v9, 0x16u);
      }
    }
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10002A598();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found no persisted request for %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  v6();
}

id sub_10002FA10(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id result = *(id *)(*(void *)(a1 + 32) + 48);
  if (result)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_10002A598();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(*(void *)v2 + 48);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dropping initial %@", (uint8_t *)&v6, 0xCu);
      }

      id result = *(id *)(*(void *)v2 + 48);
    }
    id result = [result _sessionIsDoneOrWontHappen];
    if (*(void *)(*(void *)v2 + 48)) {
      sub_1001C67FC(v2, a1);
    }
  }
  return result;
}

void sub_10002FFD0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) statusesWithNow:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5[4] && !v5[8] && !v5[9]) {
    return;
  }
  id v25 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) mutableCopy];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 32))
  {
    id v7 = objc_alloc((Class)NSString);
    uint64_t v8 = [*(id *)(a1 + 32) _summaryForTaskRequest:*(void *)(*(void *)(a1 + 32) + 32)];
    id v9 = [v7 initWithFormat:@"Current request: %@", v8];
LABEL_8:
    __int16 v11 = v9;
    [v25 addObject:v9];

    goto LABEL_9;
  }
  if (*(void *)(v6 + 64))
  {
    id v10 = objc_alloc((Class)NSString);
    uint64_t v8 = [*(id *)(a1 + 32) _summaryForTaskRequest:*(void *)(*(void *)(a1 + 32) + 64)];
    id v9 = [v10 initWithFormat:@"Last request: %@", v8];
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 32);
  if (*(void *)(v12 + 72))
  {
    double v13 = *(double *)(v12 + 88);
    if (v13 <= 10.0)
    {
      uint64_t v14 = @"short";
    }
    else if (v13 >= *(double *)(v12 + 168))
    {
      id v15 = objc_alloc((Class)NSString);
      uint64_t v16 = +[CPLDateFormatter stringForTimeInterval:*(double *)(*(void *)(a1 + 32) + 88)];
      uint64_t v14 = (__CFString *)[v15 initWithFormat:@"more than %@", v16];
    }
    else
    {
      +[CPLDateFormatter stringForTimeInterval:](CPLDateFormatter, "stringForTimeInterval:");
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v17 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v17 + 80))
    {
      uint64_t v18 = @"session has been explicitly extended";
    }
    else
    {
      uint64_t v18 = [*(id *)(v17 + 72) description];
    }
    id v19 = objc_alloc((Class)NSString);
    if (*(void *)(*(void *)(a1 + 32) + 32)) {
      CFStringRef v20 = @"Requested";
    }
    else {
      CFStringRef v20 = @"Last requested";
    }
    id v21 = [v19 initWithFormat:@"%@ minimum running time: %@ (%@)", v20, v14, v18];
    [v25 addObject:v21];
  }
  id v22 = [v25 copy];
  uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
  id v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v22;
}

void sub_100030428(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE498 = (uint64_t)os_log_create(v1, "daemon.cloudkitrescheduler.bgst.rescheduler");
  _objc_release_x1();
}

void sub_100030468(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000304B4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

BOOL sub_1000304D4(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

void sub_1000304EC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

uint64_t sub_10003050C()
{
  return v0;
}

BOOL sub_100030534(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t sub_10003054C()
{
  return v0;
}

void sub_100030928(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE4A8 = (uint64_t)os_log_create(v1, "diskarbitration");
  _objc_release_x1();
}

void sub_100030C9C(void *a1)
{
}

void sub_100030CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100030CD4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100030CE4(uint64_t a1)
{
}

void sub_100030CEC(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  uint64_t v3 = [(id)qword_1002CE4C8 objectForKeyedSubscript:*(void *)(a1 + 32)];

  if (v3) {
    sub_1001C68EC((void *)(a1 + 32), a1);
  }
  uint64_t v4 = [*(id *)(a1 + 72) _cloudKitReschedulerManagerForLibraryWithIdentifier:*(void *)(a1 + 32) involvedProcesses:*(void *)(a1 + 40) relatedApplications:*(void *)(a1 + 48)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (!v7)
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v15 = sub_100030F98();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *v2;
      int v21 = 138412290;
      uint64_t v22 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ will not use a rescheduler manager", (uint8_t *)&v21, 0xCu);
    }
    goto LABEL_15;
  }
  uint64_t v8 = (void *)qword_1002CE4C8;
  if (!qword_1002CE4C8)
  {
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    id v10 = (void *)qword_1002CE4C8;
    qword_1002CE4C8 = (uint64_t)v9;

    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v8 = (void *)qword_1002CE4C8;
  }
  [v8 setObject:v7 forKeyedSubscript:*(void *)(a1 + 32)];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    __int16 v11 = (void *)qword_1002CE4B8;
    if (!qword_1002CE4B8)
    {
      id v12 = objc_alloc_init((Class)NSMutableSet);
      double v13 = (void *)qword_1002CE4B8;
      qword_1002CE4B8 = (uint64_t)v12;

      __int16 v11 = (void *)qword_1002CE4B8;
    }
    uint64_t v14 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) taskIdentifier];
    [v11 addObject:v14];

    [*(id *)(a1 + 72) _saveRegisteredTaskIdentifiers];
  }
  if (!_CPLSilentLogging)
  {
    id v15 = sub_100030F98();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = [*(id *)(a1 + 40) componentsJoinedByString:@", "];
      id v19 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      int v21 = 138413058;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      uint64_t v24 = v17;
      __int16 v25 = 2112;
      id v26 = v18;
      __int16 v27 = 2112;
      uint64_t v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Providing %@ for %{public}@\nInvolved Processes: %@\nRelated Applications: %@", (uint8_t *)&v21, 0x2Au);
    }
LABEL_15:
  }
}

id sub_100030F98()
{
  if (qword_1002CE4D0 != -1) {
    dispatch_once(&qword_1002CE4D0, &stru_1002773B0);
  }
  uint64_t v0 = (void *)qword_1002CE4D8;
  return v0;
}

void sub_100031104(void *a1)
{
}

void sub_10003111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003113C(uint64_t a1)
{
  uint64_t v2 = [(id)qword_1002CE4C8 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_100030F98();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        int v10 = 138543618;
        uint64_t v11 = v6;
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Dropping rescheduler manager for %{public}@: %@", (uint8_t *)&v10, 0x16u);
      }
    }
    [(id)qword_1002CE4C8 removeObjectForKey:*(void *)(a1 + 32)];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = (void *)qword_1002CE4B8;
      id v9 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) taskIdentifier];
      [v8 removeObject:v9];

      [*(id *)(a1 + 48) _saveRegisteredTaskIdentifiers];
    }
  }
}

void sub_100031350(void *a1)
{
}

void sub_100031368(_Unwind_Exception *a1)
{
}

uint64_t sub_10003137C(uint64_t result)
{
  if (byte_1002CE4B0 == 1) {
    sub_1001C69EC(result);
  }
  byte_1002CE4B0 = 1;
  return result;
}

void sub_10003146C(void *a1)
{
}

void sub_100031484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000314A4(uint64_t a1)
{
  byte_1002CE4B0 = 0;
  uint64_t v2 = [(id)qword_1002CE4C8 objectForKeyedSubscript:CPLLibraryIdentifierSystemLibrary];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2 != 0;

  uint64_t v3 = +[NSUserDefaults standardUserDefaults];
  uint64_t v4 = [v3 objectForKey:@"_CPLRegisteredTaskIdentifiers"];

  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = [objc_alloc((Class)NSMutableSet) initWithArray:v4];
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v6 = (id)qword_1002CE4B8;
    id v7 = [v6 countByEnumeratingWithState:&v26 objects:v33 count:16];
    if (v7)
    {
      id v8 = v7;
      char v9 = 0;
      uint64_t v10 = *(void *)v27;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(v6);
          }
          uint64_t v12 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if ((v9 & 1) != 0
            || [v5 containsObject:*(void *)(*((void *)&v26 + 1) + 8 * i)])
          {
            [v5 removeObject:v12];
          }
          else
          {
            char v9 = 1;
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v26 objects:v33 count:16];
      }
      while (v8);
    }
    else
    {
      char v9 = 0;
    }

    if ([v5 count])
    {
      uint64_t v20 = v4;
      uint64_t v21 = a1;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v13 = v5;
      id v14 = [v13 countByEnumeratingWithState:&v22 objects:v32 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v23;
        do
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(void *)v23 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = *(void *)(*((void *)&v22 + 1) + 8 * (void)j);
            if (!_CPLSilentLogging)
            {
              id v19 = sub_100030F98();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v31 = v18;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Unregistering unused Background System Task %@", buf, 0xCu);
              }
            }
            +[CPLBGSTReschedulerManager unregisterUnusedReschedulerWithTaskIdentifier:](CPLBGSTReschedulerManager, "unregisterUnusedReschedulerWithTaskIdentifier:", v18, v20, v21);
          }
          id v15 = [v13 countByEnumeratingWithState:&v22 objects:v32 count:16];
        }
        while (v15);
      }

      uint64_t v4 = v20;
      a1 = v21;
      goto LABEL_33;
    }
    if (v9) {
LABEL_33:
    }
      objc_msgSend(*(id *)(a1 + 40), "_saveRegisteredTaskIdentifiers", v20, v21);
  }
  else
  {
    if ([(id)qword_1002CE4B8 count]) {
      [*(id *)(a1 + 40) _saveRegisteredTaskIdentifiers];
    }
    id v5 = 0;
  }
}

void sub_1000317C4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE4D8 = (uint64_t)os_log_create(v1, "daemon.cloudkitrescheduler.coordinator");
  _objc_release_x1();
}

void sub_100031BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100031BE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100031BF0(uint64_t a1)
{
}

id sub_100031BF8(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 16);
  if (result)
  {
    unsigned int v3 = [result shouldRunForceProcessingStagedScopesTaskNow];
    uint64_t v4 = *(id **)(a1 + 32);
    id v5 = v4[2];
    if (v3)
    {
      return [v4 _launchForcedExitForSupervisor:v5];
    }
    else
    {
      id result = [v4[2] shouldScheduleForceProcessingStagedScopesTask];
      if (result)
      {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) nextForcedExitDate];
        return (id)_objc_release_x1();
      }
    }
  }
  return result;
}

void *sub_100031C9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[7]) {
    return _[result _scheduleOrLaunchIfNecessaryInQueue];
  }
  return result;
}

id sub_100031DA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scheduleOrLaunchIfNecessaryInQueue];
}

void sub_100031E60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 80) sharingScopeIdentifier];
  if (v4)
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 80) scopes];
    id v6 = [v5 scopeWithIdentifier:v4];
    if (v6)
    {
      id v7 = [v5 supervisorInfoForScope:v6];
      if (v7)
      {
        id v8 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        id v13 = sub_100031FE8;
        id v14 = &unk_1002760B0;
        id v9 = v4;
        uint64_t v10 = *(void *)(a1 + 32);
        id v15 = v9;
        uint64_t v16 = v10;
        id v17 = v7;
        uint64_t v11 = v12;
        os_unfair_lock_lock(v8);
        v13(v11);
        os_unfair_lock_unlock(v8);
      }
    }
    [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:v3];
  }
}

void sub_100031FC0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100031FD4(_Unwind_Exception *a1)
{
}

void sub_100031FE8(void *a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_1000320CC();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[4];
      int v7 = 138543362;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found supervisor info for %{public}@ - start supervising", (uint8_t *)&v7, 0xCu);
    }
  }
  uint64_t v4 = [[CPLExitSharedLibrarySupervisor alloc] initWithScopeIdentifier:a1[4] exitState:0 supervisorInfo:a1[6]];
  uint64_t v5 = a1[5];
  id v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = v4;
}

id sub_1000320CC()
{
  if (qword_1002CE4E0 != -1) {
    dispatch_once(&qword_1002CE4E0, &stru_100277538);
  }
  uint64_t v0 = (void *)qword_1002CE4E8;
  return v0;
}

id sub_100032120(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

id sub_100032218(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
  return [*(id *)(*(void *)(a1 + 32) + 40) cancelTask];
}

void sub_100032350(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100032364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100032384(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) shouldRunForceProcessingStagedScopesTaskNowMovingToForeground];
  if (result)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_1000320CC();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier];
        int v5 = 138543362;
        id v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is in foreground, will try to process staged scopes for %{public}@", (uint8_t *)&v5, 0xCu);
      }
    }
    id result = [*(id *)(a1 + 32) _launchForcedExitForSupervisor:*(void *)(*(void *)(a1 + 32) + 16)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return result;
}

void sub_1000327B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000327F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v2)
  {
    if (!*(void *)(a1 + 40)
      || ([v2 scopeIdentifier],
          uint64_t v3 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v4 = [v3 isEqualToString:*(void *)(a1 + 40)],
          v3,
          (v4 & 1) == 0))
    {
      if (!_CPLSilentLogging)
      {
        int v5 = sub_1000320CC();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = [*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier];
          int v24 = 138543362;
          long long v25 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ has been deleted, stop supervising its exit", (uint8_t *)&v24, 0xCu);
        }
      }
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void **)(v7 + 16);
      *(void *)(v7 + 16) = 0;
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 16);
  id v11 = *(id *)(a1 + 72);
  if (!v10)
  {
    if (!v11) {
      return;
    }
    if (!_CPLSilentLogging)
    {
      uint64_t v12 = sub_1000320CC();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(void **)(a1 + 40);
        int v24 = 138543362;
        long long v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@ needs to be supervised, start supervising its exit", (uint8_t *)&v24, 0xCu);
      }
    }
    id v14 = [CPLExitSharedLibrarySupervisor alloc];
    id v15 = [*(id *)(a1 + 48) scopeIdentifier];
    uint64_t v16 = [(CPLExitSharedLibrarySupervisor *)v14 initWithScopeIdentifier:v15 exitState:*(void *)(a1 + 72) supervisorInfo:0];
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 16);
    *(void *)(v17 + 16) = v16;

    uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 16) supervisorInfo];
    uint64_t v20 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    goto LABEL_24;
  }
  if (!v11)
  {
    if (!_CPLSilentLogging)
    {
      long long v22 = sub_1000320CC();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        long long v23 = *(void **)(a1 + 40);
        int v24 = 138543362;
        long long v25 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@ does not need to be supervised any more, stop supervising its exit", (uint8_t *)&v24, 0xCu);
      }

      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 16);
    }
    *(void *)(v9 + 16) = 0;

LABEL_24:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    return;
  }
  if (v11 != [v10 exitState]) {
    [*(id *)(*(void *)(a1 + 32) + 16) setExitState:*(void *)(a1 + 72)];
  }
}

id sub_100032AA0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) storeSupervisorInfo:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
}

id sub_100032B70(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:a2];
}

id sub_100032B7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_100032D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100032DD8(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 16) scopeIdentifier];
  uint64_t v3 = *(void *)(a1[5] + 8);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 16) supervisorInfo];
  return _objc_release_x1();
}

id sub_100032E4C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) storeSupervisorInfo:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
}

void sub_10003308C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1000330A0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000330C8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier];
  uint64_t v3 = [*(id *)(a1 + 40) scopeIdentifier];
  unsigned int v4 = [v2 isEqualToString:v3];

  uint64_t v5 = *(void *)(a1 + 56);
  if (v4)
  {
    if (v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
}

void sub_100033150(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkExitSupervisorInTransaction:v4];
  [*(id *)(a1 + 32) _storeSupervisorInfoInTransaction:v4];
}

id sub_1000331B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_100033340(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10003337C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v2 && (char *)[v2 exitState] - 1 <= (char *)2)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) noteServerHasChanges];
    if ([*(id *)(*(void *)(a1 + 32) + 16) shouldRunForceProcessingStagedScopesTaskNow])
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v3 = sub_1000320CC();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          id v4 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:](CPLExitSharedLibrarySupervisor, "descriptionForExitState:", [*(id *)(*(void *)(a1 + 32) + 16) exitState]);
          int v9 = 138412290;
          uint64_t v10 = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Server has changes and we are %@ - will force exit now", (uint8_t *)&v9, 0xCu);
        }
      }
      [*(id *)(a1 + 32) _launchForcedExitForSupervisor:*(void *)(*(void *)(a1 + 32) + 16)];
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v5 = sub_1000320CC();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:](CPLExitSharedLibrarySupervisor, "descriptionForExitState:", [*(id *)(*(void *)(a1 + 32) + 16) exitState]);
          uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 16) nextForcedExitDate];
          uint64_t v8 = +[CPLDateFormatter stringFromDateAgo:v7 now:0];
          int v9 = 138412546;
          uint64_t v10 = v6;
          __int16 v11 = 2112;
          uint64_t v12 = v8;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Server has changes and we are %@ - will force exit soon (%@)", (uint8_t *)&v9, 0x16u);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
}

void sub_10003358C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkExitSupervisorInTransaction:v4];
  [*(id *)(a1 + 32) _storeSupervisorInfoInTransaction:v4];
}

id sub_1000335EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_10003373C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 24) && !*(void *)(v1 + 32))
  {
    uint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      [v3 cancel];
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void **)(v4 + 48);
      *(void *)(v4 + 48) = 0;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if ((unint64_t)(v6 - 1) > 2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      int v9 = sub_1000320CC();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:*(void *)(a1 + 56)];
        uint64_t v18 = [*(id *)(a1 + 40) scopeIdentifier];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@ is not a status we want to report to server for %{public}@", buf, 0x16u);
      }
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
      uint64_t v8 = [WeakRetained transport];
      int v9 = [v8 platformObject];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3032000000;
        uint64_t v34 = sub_100031BE0;
        uint64_t v35 = sub_100031BF0;
        id v36 = 0;
        uint64_t v10 = [CPLCloudKitSendSharedLibraryExitStatusFeedbackTask alloc];
        __int16 v11 = [*(id *)(a1 + 40) scopeIdentifier];
        uint64_t v12 = *(void **)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 48);
        long long v25 = _NSConcreteStackBlock;
        uint64_t v26 = 3221225472;
        long long v27 = sub_100033B14;
        uint64_t v28 = &unk_1002774C8;
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v31 = buf;
        uint64_t v32 = *(void *)(a1 + 56);
        id v30 = v12;
        id v14 = [(CPLCloudKitSendSharedLibraryExitStatusFeedbackTask *)v10 initWithController:v9 scopeIdentifier:v11 cloudKitScope:v13 status:v6 completionHandler:&v25];
        uint64_t v15 = *(void **)(*(void *)&buf[8] + 40);
        *(void *)(*(void *)&buf[8] + 40) = v14;

        uint64_t v16 = [v9 createGroupForSendExitStatus];
        [*(id *)(*(void *)&buf[8] + 40) setTransportGroup:v16];

        [*(id *)(*(void *)&buf[8] + 40) runWithNoSyncSession];
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(*(void *)&buf[8] + 40));

        _Block_object_dispose(buf, 8);
      }
      else if (!_CPLSilentLogging)
      {
        uint64_t v19 = sub_1000320CC();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = objc_opt_class();
          uint64_t v21 = *(void *)(a1 + 56);
          id v22 = v20;
          long long v23 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:v21];
          int v24 = [*(id *)(a1 + 40) scopeIdentifier];
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v23;
          *(_WORD *)&buf[22] = 2114;
          uint64_t v34 = v24;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Transport (%@) does not allow reporting of %@ for %{public}@", buf, 0x20u);
        }
      }
    }
  }
}

void sub_100033AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100033B14(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 88);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100033C58;
  v13[3] = &unk_1002774A0;
  void v13[4] = v5;
  id v14 = v4;
  uint64_t v16 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v12;
  long long v15 = v12;
  uint64_t v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003575C;
  block[3] = &unk_100275DF8;
  id v18 = v8;
  int v9 = v6;
  id v10 = v4;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

void sub_100033C58(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == *(void *)(*(void *)(a1 + 32) + 48))
  {
    if (*(void *)(a1 + 40))
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v2 = sub_1000320CC();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        {
          uint64_t v3 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:*(void *)(a1 + 64)];
          id v4 = [*(id *)(a1 + 48) scopeIdentifier];
          uint64_t v5 = *(void *)(a1 + 40);
          int v12 = 138412802;
          uint64_t v13 = v3;
          __int16 v14 = 2114;
          long long v15 = v4;
          __int16 v16 = 2112;
          uint64_t v17 = v5;
          uint64_t v6 = "Failed to report %@ to the server for %{public}@: %@";
          id v7 = v2;
          os_log_type_t v8 = OS_LOG_TYPE_ERROR;
          uint32_t v9 = 32;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v12, v9);

          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_1000320CC();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = +[CPLExitSharedLibrarySupervisor descriptionForExitState:*(void *)(a1 + 64)];
        id v4 = [*(id *)(a1 + 48) scopeIdentifier];
        int v12 = 138412546;
        uint64_t v13 = v3;
        __int16 v14 = 2114;
        long long v15 = v4;
        uint64_t v6 = "Successfully reported %@ to the server for %{public}@";
        id v7 = v2;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
        uint32_t v9 = 22;
        goto LABEL_9;
      }
LABEL_10:
    }
    uint64_t v10 = *(void *)(a1 + 32);
    dispatch_block_t v11 = *(void **)(v10 + 48);
    *(void *)(v10 + 48) = 0;
  }
}

void sub_100033F30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 24) && !*(void *)(v2 + 32) && !*(void *)(v2 + 40))
  {
    [(id)v2 _unscheduleInQueue];
    id v3 = objc_alloc((Class)CPLEngineForceProcessingStagedScopesTask);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
    id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
    uint64_t v6 = [v5 syncManager];
    id v7 = [v3 initWithEngineLibrary:WeakRetained delegate:v6];

    os_log_type_t v8 = +[NSUUID UUID];
    uint32_t v9 = [v8 UUIDString];
    [v7 setTaskIdentifier:v9];

    [v7 setBypassForceSyncLimitations:1];
    __int16 v16 = _NSConcreteStackBlock;
    uint64_t v17 = 3221225472;
    id v18 = sub_10003415C;
    uint64_t v19 = &unk_100277518;
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = v10;
    [v7 setTaskDidFinishWithErrorBlock:&v16];
    if (!_CPLSilentLogging)
    {
      dispatch_block_t v11 = sub_1000320CC();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = objc_msgSend(*(id *)(a1 + 40), "scopeIdentifier", v16, v17, v18, v19, v20);
        *(_DWORD *)buf = 138412546;
        id v23 = v7;
        __int16 v24 = 2114;
        long long v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Launching forced exit task %@ for %{public}@", buf, 0x16u);
      }
    }
    objc_msgSend(v7, "launchTask", v16, v17, v18, v19, v20);
    uint64_t v13 = *(void *)(a1 + 32);
    __int16 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v7;
    id v15 = v7;
  }
}

void sub_10003415C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 88);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003428C;
  v11[3] = &unk_1002760B0;
  void v11[4] = v5;
  id v12 = v4;
  id v13 = *(id *)(a1 + 40);
  id v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003575C;
  block[3] = &unk_100275DF8;
  id v15 = v7;
  os_log_type_t v8 = v6;
  id v9 = v4;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

void sub_10003428C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  id v4 = *(id *)(a1 + 40);
  if ([v4 isCPLErrorWithCode:10000])
  {
  }
  else if (v4)
  {
    if (_CPLSilentLogging) {
      goto LABEL_12;
    }
    uint64_t v5 = sub_1000320CC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = [*(id *)(a1 + 48) scopeIdentifier];
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v23 = v6;
      __int16 v24 = 2112;
      uint64_t v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Forced exit for %{public}@ finished with error %@", buf, 0x16u);
    }
    goto LABEL_11;
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_1000320CC();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v8 = [*(id *)(a1 + 48) scopeIdentifier];
      *(_DWORD *)buf = 138543362;
      id v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Forced exit for %{public}@ finished successfully", buf, 0xCu);
    }
    id v4 = 0;
LABEL_11:

    goto LABEL_12;
  }
  id v4 = 0;
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v9 + 24))
  {
    dispatch_block_t v10 = (os_unfair_lock_s *)(v9 + 8);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    uint64_t v19 = sub_1000345C4;
    uint64_t v20 = &unk_100275EA0;
    id v21 = *(id *)(a1 + 48);
    dispatch_block_t v11 = v18;
    os_unfair_lock_lock(v10);
    v19((uint64_t)v11);
    os_unfair_lock_unlock(v10);

    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 80);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000345CC;
    v16[3] = &unk_100276590;
    v16[4] = v12;
    id v17 = *(id *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10003486C;
    v15[3] = &unk_1002773D8;
    v15[4] = *(void *)(a1 + 32);
    id v14 = [v13 performWriteTransactionWithBlock:v16 completionHandler:v15];
  }
}

void sub_100034584(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id sub_1000345C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateLastForcedExitDate];
}

void sub_1000345CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:v3];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 0;
  uint64_t v21 = 0;
  id v22 = &v21;
  uint64_t v23 = 0x2020000000;
  uint64_t v24 = 0;
  id v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  id v15 = sub_10003480C;
  __int16 v16 = &unk_1002774F0;
  uint64_t v19 = &v25;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v17 = v5;
  uint64_t v18 = v6;
  uint64_t v20 = &v21;
  uint64_t v7 = &v13;
  os_unfair_lock_lock(v4);
  v15(v7);
  os_unfair_lock_unlock(v4);

  if (*((unsigned char *)v26 + 24))
  {
    objc_msgSend(*(id *)(a1 + 32), "_storeSupervisorInfoInTransaction:", v3, v13, v14);
    if (v22[3])
    {
      os_log_type_t v8 = [*(id *)(*(void *)(a1 + 32) + 80) scopes];
      uint64_t v9 = [*(id *)(a1 + 40) scopeIdentifier];
      dispatch_block_t v10 = [v8 scopeWithIdentifier:v9];

      if (v10
        && ([v8 transportScopeForScope:v10], (dispatch_block_t v11 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        uint64_t v12 = +[CPLCloudKitScope scopeFromTransportScope:v11];

        if (v12) {
          [*(id *)(a1 + 32) _sendExitFeedbackForSupervisor:*(void *)(a1 + 40) cloudKitScope:v12 exitState:v22[3]];
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
}

void sub_1000347B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000347E8(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1000347FC()
{
}

id sub_10003480C(id result)
{
  *(unsigned char *)(*(void *)(*((void *)result + 6) + 8) + 24) = *((void *)result + 4) == *(void *)(*((void *)result + 5) + 16);
  if (*(unsigned char *)(*(void *)(*((void *)result + 6) + 8) + 24))
  {
    uint64_t v1 = result;
    id result = [*((id *)result + 4) exitState];
    *(void *)(*(void *)(v1[7] + 8) + 24) = result;
  }
  return result;
}

id sub_10003486C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void *sub_100034964(void *result)
{
  ++*(void *)(result[4] + 32);
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 32) == 1)
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 40) cancelTask];
    id v3 = (void *)v2[4];
    return [v3 _unscheduleInQueue];
  }
  return result;
}

void *sub_100034ABC(void *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    *(void *)(v1 + 32) = v2 - 1;
    id result = (void *)result[4];
    if (!result[4]) {
      return [result _scheduleOrLaunchIfNecessary];
    }
  }
  return result;
}

void sub_100034B90(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100034BA4(_Unwind_Exception *a1)
{
}

id sub_100034BB8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) ping];
}

void sub_100034CD8(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100034CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100034D0C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) status];
  return _objc_release_x1();
}

void sub_10003575C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000357A8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE4E8 = (uint64_t)os_log_create(v1, "engine.supervisor");
  _objc_release_x1();
}

id sub_100035B48()
{
  if (qword_1002CE4F0 != -1) {
    dispatch_once(&qword_1002CE4F0, &stru_100277758);
  }
  uint64_t v0 = (void *)qword_1002CE4F8;
  return v0;
}

void sub_100035DD8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  os_log_type_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100035EB8;
  v11[3] = &unk_100277588;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  uint64_t v15 = *(void *)(a1 + 48);
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_100035EB8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v3)
  {
    id v4 = +[CPLCloudKitErrors realErrorForError:v3];
    id v5 = [*v2 lastOperationRequestUUIDs];
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v4 withRequestUUIDs:v5 description:@"Error creating primary zone"];

    if ([v6 isCPLErrorWithCode:1002])
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_100035B48();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v8 = objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName");
          *(_DWORD *)buf = 138543618;
          id v14 = v8;
          __int16 v15 = 2112;
          __int16 v16 = v3;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create primary zone %{public}@ because 'feature is disabled': %@", buf, 0x16u);
        }
      }
      uint64_t v9 = +[CPLErrors cplErrorWithCode:150, v3, @"Failed to create primary zone %@ because 'feature is disabled'", *(void *)(a1 + 48) underlyingError description];

      id v6 = (void *)v9;
    }
    (*(void (**)(void))(*((void *)*v2 + 34) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_100035B48();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        dispatch_block_t v11 = objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName");
        *(_DWORD *)buf = 138543362;
        id v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Created primary zone with zoneID: %{public}@", buf, 0xCu);
      }
    }
    uint64_t v12 = [*(id *)(a1 + 56) firstObject];
    if (!v12) {
      sub_1001C6B08((uint64_t *)v2, a1);
    }
    id v4 = (void *)v12;
    [*v2 _callCompletionWithZone:v12];
  }
}

void sub_100036964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000369B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000369C0(uint64_t a1)
{
}

BOOL sub_1000369C8(id a1, CKRecordZoneID *a2)
{
  uint64_t v2 = [(CKRecordZoneID *)a2 zoneName];
  unsigned __int8 v3 = [v2 hasPrefix:CPLPrimaryScopeIdentifier];

  return v3;
}

CKRecordZoneID *__cdecl sub_100036A10(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)+[CPLCloudKitLibraryZoneIdentification primaryZoneIDFromProposedZoneIDs:a2];
}

id sub_100036A20(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)];
}

CKRecordZoneID *__cdecl sub_100036A2C(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)[(NSArray *)a2 firstObject];
}

id sub_100036A34(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

CKRecordZoneID *__cdecl sub_100036A48(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)[(NSArray *)a2 firstObject];
}

void sub_100036A50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100036B80;
  v12[3] = &unk_100277710;
  void v12[4] = v7;
  id v13 = v6;
  uint64_t v19 = *(void *)(a1 + 72);
  id v17 = *(id *)(a1 + 56);
  id v14 = v5;
  uint64_t v20 = *(void *)(a1 + 80);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 88);
  id v15 = v8;
  uint64_t v21 = v9;
  id v18 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  [v7 dispatchAsync:v12];
}

void sub_100036B80(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  unsigned __int8 v3 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (!v3)
  {
    id v8 = 0;
    goto LABEL_10;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    id v4 = +[CPLCloudKitErrors realErrorForError:v3];
    id v5 = [*v2 lastOperationRequestUUIDs];
    id v6 = [*v2 scope];
    id v7 = [v6 scopeIdentifier];
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v4, v5, @"Error fetching zone for %@", v7 withRequestUUIDs description];

LABEL_9:
    goto LABEL_10;
  }
  if (!+[CPLCloudKitErrors isPartialFailureError:v3])
  {
    id v4 = [*v2 lastOperationRequestUUIDs];
    id v5 = [*v2 scope];
    id v6 = [v5 scopeIdentifier];
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v3, v4, @"Error fetching zone for %@", v6 withRequestUUIDs description];
    goto LABEL_9;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  v83 = sub_1000369B0;
  v84 = sub_1000369C0;
  id v85 = 0;
  uint64_t v70 = 0;
  v71 = &v70;
  uint64_t v72 = 0x3032000000;
  v73 = sub_1000369B0;
  v74 = sub_1000369C0;
  id v75 = 0;
  id v9 = objc_alloc_init((Class)NSMutableArray);
  v64 = +[CPLCloudKitErrors errorsPerZoneIDForPartialFailureError:v3];
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_1000377D0;
  v65[3] = &unk_1002776E8;
  id v67 = *(id *)(a1 + 72);
  id v10 = v9;
  id v66 = v10;
  v68 = buf;
  v69 = &v70;
  [v64 enumerateKeysAndObjectsUsingBlock:v65];
  uint64_t v11 = *(void *)(*(void *)&buf[8] + 40);
  if (v11)
  {
    uint64_t v12 = [*v2 lastOperationRequestUUIDs];
    id v13 = [*v2 scope];
    id v14 = [v13 scopeIdentifier];
    id v15 = [(id)v71[5] zoneName];
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v11, v12, @"Error fetching zone for %@ (zone %@)", v14, v15 withRequestUUIDs description];
  }
  else
  {
    id v8 = 0;
    if (![v10 count] || _CPLSilentLogging) {
      goto LABEL_82;
    }
    uint64_t v12 = sub_100035B48();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v60 = [v10 componentsJoinedByString:@", "];
      id v61 = [*(id *)(a1 + 48) count];
      v62 = [*v2 scope];
      v63 = [v62 scopeIdentifier];
      *(_DWORD *)v76 = 138412802;
      id v77 = v60;
      __int16 v78 = 2048;
      id v79 = v61;
      __int16 v80 = 2112;
      v81 = v63;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Ignoring errors for %@ - found %lu actual zones for %@", v76, 0x20u);
    }
    id v8 = 0;
  }

LABEL_82:
  _Block_object_dispose(&v70, 8);

  _Block_object_dispose(buf, 8);
LABEL_10:
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    uint64_t v16 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:");
    uint64_t v17 = *(void *)(*(void *)(a1 + 96) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
    {
      if (v8)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v19 = sub_100035B48();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) zoneName];
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v3;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Using stored zone %{public}@ - ignoring fetch error: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (_CPLSilentLogging) {
          goto LABEL_41;
        }
        id v8 = sub_100035B48();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) zoneName];
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v27;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Using stored zone %{public}@", buf, 0xCu);
        }
      }

LABEL_41:
      if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)) {
          sub_1001C6D20(a1, (uint64_t *)v2);
        }
        objc_msgSend(*v2, "_callCompletionWithZone:");
        goto LABEL_87;
      }
      uint64_t v37 = *(void *)(a1 + 80);
      uint64_t v38 = [*(id *)(a1 + 48) allKeys];
      id v39 = (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v38);

      if (v39)
      {
        uint64_t v40 = [*(id *)(a1 + 48) objectForKeyedSubscript:v39];
        uint64_t v41 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v42 = *(void **)(v41 + 40);
        *(void *)(v41 + 40) = v40;
      }
      uint64_t v43 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      if (v43)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v44 = sub_100035B48();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v45 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) zoneID];
            id v46 = objc_msgSend(v45, "cpl_zoneName");
            id v47 = [*(id *)(a1 + 48) count];
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v46;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v47;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Dynamically found zone %{public}@ among %ld zones", buf, 0x16u);
          }
          uint64_t v43 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        }
        uint64_t v48 = [v43 zoneID];
        uint64_t v49 = *(void *)(*(void *)(a1 + 88) + 8);
        v50 = *(NSObject **)(v49 + 40);
        *(void *)(v49 + 40) = v48;
      }
      else
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(id *)(a1 + 64));
        if (_CPLSilentLogging)
        {
LABEL_66:
          uint64_t v56 = *(void *)(a1 + 32);
          if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
          {
            objc_msgSend((id)v56, "_callCompletionWithZone:");
          }
          else if (*(void *)(v56 + 304) || !*(unsigned char *)(v56 + 296))
          {
            if (!_CPLSilentLogging)
            {
              v57 = sub_100035B48();
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                v58 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), "cpl_zoneName");
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v58;
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Found no zone but was not asked to create %{public}@", buf, 0xCu);
              }
            }
            v59 = +[CPLErrors cplErrorWithCode:150 description:@"No zone found for library"];
            (*(void (**)(void))(*((void *)*v2 + 34) + 16))();
          }
          else
          {
            if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)) {
              sub_1001C6C58(a1, (uint64_t *)v2);
            }
            objc_msgSend((id)v56, "createRecordZoneWithID:");
          }

          goto LABEL_87;
        }
        v50 = sub_100035B48();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          id v54 = [*(id *)(a1 + 48) count];
          v55 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), "cpl_zoneName");
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v54;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v55;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Found no valid zone among %ld zones. Using %{public}@", buf, 0x16u);
        }
      }

      goto LABEL_66;
    }
    if (v8)
    {
      if ([v8 isCPLErrorWithCode:1002])
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v21 = sub_100035B48();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = [*v2 scope];
            uint64_t v23 = [v22 scopeIdentifier];
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Feature seems disabled for %{public}@ - inferring zone exists so we can track it", buf, 0xCu);
          }
        }
        id v24 = [objc_alloc((Class)CKRecordZone) initWithZoneID:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
        uint64_t v25 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v26 = *(void **)(v25 + 40);
        *(void *)(v25 + 40) = v24;
      }
      goto LABEL_34;
    }
    if (!_CPLSilentLogging)
    {
      char v28 = sub_100035B48();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
        uint64_t v30 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2112;
        v83 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to fetch %@ yet CloudKit returned no error, operation %@ returned %@", buf, 0x20u);
      }
    }
    uint64_t v32 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) zoneName];
    id v8 = +[CPLErrors cplErrorWithCode:150, @"Failed to fetch zone %@ for unknown reasons", v32 description];
  }
  if (!v8) {
    goto LABEL_41;
  }
LABEL_34:
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v33 = sub_100035B48();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), "cpl_zoneName");
        uint64_t v35 = (void *)v34;
        if (v3) {
          id v36 = v3;
        }
        else {
          id v36 = v8;
        }
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to fetch zone %{public}@: %@", buf, 0x16u);
      }
LABEL_58:
    }
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v33 = sub_100035B48();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        v51 = v3;
      }
      else {
        v51 = v8;
      }
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to fetch all zones: %@", buf, 0xCu);
    }
    goto LABEL_58;
  }
  v52 = [*((id *)*v2 + 38) transportScope];
  if (!v52)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
    {
      v53 = [[CPLCloudKitScope alloc] initWithZone:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) options:*(void *)(*(void *)(a1 + 32) + 288)];
      v52 = [(CPLCloudKitScope *)v53 transportScope];
    }
    else
    {
      v52 = 0;
    }
  }
  (*(void (**)(void))(*((void *)*v2 + 34) + 16))();

LABEL_87:
}

void sub_10003779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1000377D0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v10 = a2;
  id v8 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    id v9 = [v10 zoneName];
    [*(id *)(a1 + 32) addObject:v9];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_100037964(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE4F8 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.fetchzone");
  _objc_release_x1();
}

uint64_t sub_1000379A4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1000379B0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000379BC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_1000379C8(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_1000379D4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_1000379E0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

void sub_100037C38(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100037CD8;
  v8[3] = &unk_100277780;
  void v8[4] = v6;
  id v9 = v5;
  char v10 = a2;
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100037CD8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = _CPLSilentLogging == 0;
  }
  if (v4)
  {
    if (qword_1002CE500 != -1) {
      dispatch_once(&qword_1002CE500, &stru_1002777C8);
    }
    id v5 = qword_1002CE508;
    if (os_log_type_enabled((os_log_t)qword_1002CE508, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 296);
      int v7 = 134218242;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      char v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to send feedback with exit status %ld with error: %@", (uint8_t *)&v7, 0x16u);
    }
    int v3 = *(unsigned __int8 *)(a1 + 48);
  }
  (*(void (**)(void, BOOL, void *))(*(void *)(*(void *)(a1 + 32) + 272) + 16))(*(void *)(*(void *)(a1 + 32) + 272), v3 != 0, v2);
}

void sub_100037EBC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE508 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.exitstatusfeedback");
  _objc_release_x1();
}

id sub_100038278()
{
  if (qword_1002CE510 != -1) {
    dispatch_once(&qword_1002CE510, &stru_100277900);
  }
  uint64_t v0 = (void *)qword_1002CE518;
  return v0;
}

id *sub_100038DA0(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v22 = a2;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)CPLCKShareRecordTodo;
    id v18 = (id *)objc_msgSendSuper2(&v23, "init");
    a1 = v18;
    if (v18)
    {
      objc_storeStrong(v18 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 4, a5);
      id v19 = [v16 copy];
      id v20 = a1[5];
      a1[5] = v19;

      objc_storeStrong(a1 + 6, a7);
    }
  }

  return a1;
}

void sub_10003A538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_10003A550(uint64_t a1, uint64_t a2, void *a3)
{
  [a3 doubleValue];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  double result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

#error "10003C09C: call analysis failed (funcsize=99)"

id sub_10003C0A4(uint64_t a1, void *a2)
{
  int v3 = [a2 recordID];
  uint64_t v4 = [v3 recordName];
  double v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

BOOL sub_10003C118(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if ([*(id *)(*(void *)(a1 + 32) + 88) containsObject:*(void *)(a1 + 40)])
  {
    BOOL v7 = 1;
  }
  else
  {
    uint64_t v8 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]([CPLCKSplitCopyHelper alloc], "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:", 0, *(void *)(a1 + 48), 0, objc_opt_class(), [*(id *)(*(void *)(a1 + 32) + 288) databaseScope], *(void *)(a1 + 56), *(void *)(a1 + 32));
    id v9 = [objc_alloc((Class)NSString) initWithFormat:@"Copy (%@)", *(void *)(a1 + 64)];
    char v10 = [(CPLCKSplitCopyHelper *)v8 copiedRecordFromSourceRecord:v6 action:v9 error:a4];
    BOOL v7 = v10 != 0;
    if (v10)
    {
      [*(id *)(*(void *)(a1 + 32) + 24) insertObject:v10 atIndex:*(void *)(a1 + 72)];
      [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _noteMasterWillBeUploadedToPrivateZone:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _noteRecordWithScopedIdentifierWillMoveToSplitState:*(void *)(a1 + 40)];
    }
  }
  return v7;
}

#error "10003C3FC: call analysis failed (funcsize=99)"

BOOL sub_10003C64C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *((void *)&v38 + 1) = a2;
  id v7 = a3;
  uint64_t v8 = a1 + 32;
  unsigned __int8 v9 = [*(id *)(*(void *)(a1 + 32) + 104) containsObject:*(void *)(a1 + 40)];
  if (v9)
  {
    uint64_t v37 = a4;
    *(void *)&long long v38 = v7;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v10 = *(id *)(*(void *)v8 + 48);
    id v11 = [v10 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (!v11) {
      goto LABEL_10;
    }
    id v12 = v11;
    uint64_t v13 = *(void *)v40;
LABEL_4:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v40 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(void **)(*((void *)&v39 + 1) + 8 * v14);
      id v16 = [v15 recordID];
      unsigned __int8 v17 = [v16 isEqual:*(void *)(a1 + 56)];

      if (v17) {
        break;
      }
      if (v12 == (id)++v14)
      {
        id v12 = [v10 countByEnumeratingWithState:&v39 objects:v43 count:16];
        if (!v12)
        {
LABEL_10:

          goto LABEL_11;
        }
        goto LABEL_4;
      }
    }
    id v27 = v15;

    if (!v27) {
LABEL_11:
    }
      sub_1001C73E0(a1, a1 + 32, v18, v19, v20, v21, v22, v23, v36, v37, v38, v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v42, *((uint64_t *)&v42 + 1),
        v43[0],
        v43[1]);
    char v28 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]([CPLCKSplitCopyHelper alloc], "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:", v27, *(void *)(a1 + 64), 1, objc_opt_class(), [*(id *)(*(void *)(a1 + 32) + 280) databaseScope], *(void *)(a1 + 56), *(void *)(a1 + 32));

    a4 = v37;
    id v7 = (id)v38;
  }
  else
  {
    if ([*(id *)(a1 + 48) targetState] == (id)3)
    {
      uint64_t v24 = objc_opt_class();
      uint64_t v25 = CPLCKRecord(v24, *(void **)(a1 + 56), 1);
      uint64_t v26 = +[NSDate date];
      [v25 setObject:v26 forKeyedSubscript:@"recordModificationDate"];
    }
    else
    {
      uint64_t v25 = 0;
    }
    char v28 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]([CPLCKSplitCopyHelper alloc], "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:", v25, *(void *)(a1 + 64), 1, objc_opt_class(), [*(id *)(*(void *)(a1 + 32) + 280) databaseScope], *(void *)(a1 + 56), *(void *)(a1 + 32));
  }
  id v29 = [objc_alloc((Class)NSString) initWithFormat:@"Copy (%@)", *(void *)(a1 + 72)];
  uint64_t v30 = [(CPLCKSplitCopyHelper *)v28 copiedRecordFromSourceRecord:v7 action:v29 error:a4];
  if (v30) {
    char v31 = v9;
  }
  else {
    char v31 = 1;
  }
  if ((v31 & 1) == 0)
  {
    uint64_t v32 = *(void **)(*(void *)v8 + 48);
    if (!v32)
    {
      id v33 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v34 = *(void **)(*(void *)v8 + 48);
      *(void *)(*(void *)v8 + 48) = v33;

      uint64_t v32 = *(void **)(*(void *)v8 + 48);
    }
    [v32 insertObject:v30 atIndex:*(void *)(a1 + 88)];
    [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) _noteMasterWillBeUploadedToSharedZone:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _noteRecordWithScopedIdentifierWillMoveToSplitState:*(void *)(a1 + 40)];
  }

  return v30 != 0;
}

#error "10003D314: call analysis failed (funcsize=80)"

uint64_t sub_10003D470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32), a3);
}

void sub_10003D9F0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_10003DA00(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_10003DA10(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

id sub_10003EE94(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void **)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return [v2 isEqual:*(void *)(a1 + 32)];
}

void sub_1000405B4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE518 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.uploadbatch.planner");
  _objc_release_x1();
}

void sub_1000405F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100040964(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000409FC;
  v6[3] = &unk_100276018;
  void v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_1000409FC(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v4)
  {
    uint64_t v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v3 = +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:](CPLCloudKitErrors, "CPLErrorForCloudKitError:withRequestUUIDs:description:", v4, v2, @"Error sending %lu feedback messages", [*(id *)(*(void *)(a1 + 32) + 272) count]);
  }
  else
  {
    id v3 = 0;
  }
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280) + 16))();
}

id sub_10004117C()
{
  if (qword_1002CE548 != -1) {
    dispatch_once(&qword_1002CE548, &stru_100277B88);
  }
  uint64_t v0 = (void *)qword_1002CE550;
  return v0;
}

uint64_t sub_1000411D0(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = v11;
  if (!v11)
  {
    [v9 setObject:0 forKeyedSubscript:v10];
    id v20 = 0;
LABEL_11:
    uint64_t v26 = 1;
    goto LABEL_12;
  }
  id v13 = v11;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v14 = objc_alloc((Class)CKAssetReference);
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[7];
    unsigned __int8 v17 = [v13 signature];
    id v18 = [v14 initWithExistingRecordID:v15 databaseScope:v16 fieldName:v10 fileSignature:v17];

    id v19 = [objc_alloc((Class)CKAsset) initWithAssetReference:v18];
    +[CPLFingerprintScheme configureAssetTransferOptionsForCKAsset:v19 fromReference:v18 scopeProvider:a1[5]];

    id v20 = 0;
LABEL_8:
    id v13 = v19;
LABEL_10:
    [v9 setObject:v13 forKeyedSubscript:v10];

    goto LABEL_11;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v20 = 0;
    goto LABEL_10;
  }
  uint64_t v21 = [v13 recordID];
  uint64_t v22 = [v21 recordName];

  uint64_t v23 = (void *)a1[5];
  id v28 = 0;
  uint64_t v24 = [v23 recordNameInDestinationCKRecordFromRecordName:v22 error:&v28];
  id v20 = v28;
  if (v24)
  {
    id v25 = [objc_alloc((Class)CKRecordID) initWithRecordName:v24 zoneID:a1[6]];
    id v19 = objc_msgSend(objc_alloc((Class)CKReference), "initWithRecordID:action:", v25, objc_msgSend(v13, "referenceAction"));

    goto LABEL_8;
  }

  if (a5)
  {
    id v20 = v20;
    uint64_t v26 = 0;
    *a5 = v20;
  }
  else
  {
    uint64_t v26 = 0;
  }
LABEL_12:

  return v26;
}

void sub_1000416D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000416E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000416F8(uint64_t a1)
{
}

void sub_100041700(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  uint64_t v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
  uint64_t v9 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
  if (!v8) {
    sub_1001C7A24((uint64_t)v7, a1);
  }
  id v10 = (void *)v9;
  [*(id *)(a1 + 56) prepareCopyForCKRecordID:v7 fromCKRecord:v8];
  id v11 = [v8 recordID];
  [*(id *)(a1 + 64) setObject:v11 forKeyedSubscript:v7];

  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 72);
  id v20 = 0;
  uint64_t v15 = +[CPLCloudKitTransportTask copiedRecordFromSourceRecord:v8 sourceDatabaseScope:v12 toRecordID:v10 helper:v13 action:v14 error:&v20];
  id v16 = v20;
  id v17 = v20;
  if (v15)
  {
    id v18 = *(void **)(a1 + 80);
    id v19 = [v8 recordID];
    [v18 addCopyMoveFromRecordID:v19 toRecordID:v10];

    [*(id *)(a1 + 88) addObject:v15];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v16);
    *a4 = 1;
  }
}

void sub_100041BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100041C70;
  v6[3] = &unk_100276018;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_100041C70(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_100041C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100041D2C;
  v6[3] = &unk_100276018;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_100041D2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_100041D38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100041E2C;
  v8[3] = &unk_1002779F0;
  void v8[4] = v6;
  id v9 = v5;
  id v10 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100041E2C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10004117C();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v13 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to upload copied records: %@", buf, 0xCu);
      }

      if (!_CPLSilentLogging)
      {
        id v4 = sub_10004117C();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          id v5 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          id v13 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Records were:\n %@", buf, 0xCu);
        }
      }
    }
    uint64_t v6 = *(void *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100042038;
    v10[3] = &unk_1002779C8;
    id v11 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v9 = +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:v2 getDestinationRecordIDs:v10 scopeProvider:v7 withRequestUUIDs:v8 uploadAction:*(void *)(a1 + 64)];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

id sub_100042038(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "recordID", (void)v10);
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_10004241C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    long long v10 = [CPLCloudKitCopyMoveOperationContext alloc];
    long long v11 = [*(id *)(a1 + 32) firstObject];
    long long v12 = [v11 zoneID];
    long long v13 = [*(id *)(a1 + 40) firstObject];
    uint64_t v14 = [v13 zoneID];
    id v15 = [(CPLCloudKitCopyMoveOperationContext *)v10 initFromZoneID:v12 toZoneID:v14];

    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 56);
    id v31 = 0;
    id v32 = 0;
    uint64_t v21 = [v16 _destinationRecordsFromSourceRecords:v7 recordIDs:v18 sourceType:v17 destinationRecordIDs:v19 helper:v20 sourceRecordIDs:&v32 operationContext:v15 action:@"Copy" error:&v31];
    id v22 = v32;
    id v23 = v31;
    if (v21)
    {
      id v24 = [v22 count];
      if (v24 != [v7 count]) {
        sub_1001C7B20(a1, (uint64_t *)(a1 + 48));
      }
      uint64_t v26 = *(void **)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 56);
      uint64_t v27 = *(void *)(a1 + 88);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100042660;
      v28[3] = &unk_100276390;
      id v30 = *(id *)(a1 + 64);
      id v29 = v22;
      [v26 _uploadDestinationRecords:v21 destinationType:v27 scopeProvider:v25 operationContext:v15 uploadAction:@"copy" completionHandler:v28];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

uint64_t sub_100042660(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

uint64_t sub_100042760(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100042A90(id a1)
{
  byte_1002CE520 = os_variant_has_internal_content();
}

void sub_100042AB8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  long long v13 = [*(id *)(a1 + 32) changeWithSourceRecordID:v9];
  if (v12)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v14 = sub_10004117C();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        [v9 cplFullDescription];
        v15 = id v30 = v11;
        [v13 sourceRecordChangeTag];
        v17 = id v16 = v12;
        [v13 destinationRecord];
        uint64_t v18 = v31 = v10;
        uint64_t v19 = [v18 recordID];
        uint64_t v20 = [v19 cplFullDescription];
        *(_DWORD *)buf = 138413058;
        long long v38 = v15;
        __int16 v39 = 2112;
        long long v40 = v17;
        __int16 v41 = 2112;
        long long v42 = v20;
        __int16 v43 = 2112;
        id v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to move [%@ etag: %@] to %@: %@", buf, 0x2Au);

        id v10 = v31;
        id v12 = v16;

        id v11 = v30;
      }

      if (byte_1002CE520)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v21 = sub_10004117C();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            id v22 = [v13 destinationRecord];
            id v23 = [v22 cplFullDescription];
            *(_DWORD *)buf = 138412290;
            long long v38 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Destination record was %@", buf, 0xCu);
          }
LABEL_12:
        }
      }
    }
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v21 = sub_10004117C();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      [v9 cplFullDescription];
      v25 = id v24 = v11;
      uint64_t v26 = [v13 sourceRecordChangeTag];
      uint64_t v27 = [v10 recordID];
      id v28 = [v27 cplFullDescription];
      *(_DWORD *)buf = 138413058;
      long long v38 = v25;
      __int16 v39 = 2112;
      long long v40 = v26;
      __int16 v41 = 2112;
      long long v42 = v28;
      __int16 v43 = 2112;
      id v44 = v24;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Successfully moved [%@ etag: %@] to %@. Move marker: %@", buf, 0x2Au);

      id v12 = 0;
      id v11 = v24;
    }
    goto LABEL_12;
  }
  if (*(void *)(a1 + 40) && (v9 || v10 || v13))
  {
    id v29 = *(void **)(a1 + 48);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100042E7C;
    v32[3] = &unk_100277038;
    id v33 = v9;
    id v34 = *(id *)(a1 + 40);
    id v35 = v10;
    id v36 = v13;
    [v29 dispatchAsync:v32];
  }
}

void sub_100042E7C(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "didModifyRecordWithID:");
  }
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    id v7 = [v2 recordID];
    objc_msgSend(v3, "didModifyRecordWithID:");
  }
  else
  {
    id v4 = *(void **)(a1 + 56);
    if (!v4) {
      return;
    }
    id v5 = *(void **)(a1 + 40);
    id v7 = [v4 destinationRecord];
    uint64_t v6 = [v7 recordID];
    [v5 didModifyRecordWithID:v6];
  }
}

void sub_100042F34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100043014;
  v6[3] = &unk_100277AB0;
  void v6[4] = v4;
  id v7 = v3;
  id v10 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_100043014(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 64);
  if (v2)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100043138;
    v7[3] = &unk_1002779C8;
    id v8 = *(id *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    uint64_t v6 = +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:v2 getDestinationRecordIDs:v7 scopeProvider:v4 withRequestUUIDs:v5 uploadAction:@"move"];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v6);
  }
  else
  {
    (*(void (**)(void, void))(v3 + 16))(*(void *)(a1 + 64), 0);
  }
}

id sub_100043138(uint64_t a1)
{
  return _[*(id *)(a1 + 32) destinationRecordIDs];
}

void sub_10004340C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100043424(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
  id v9 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
  if (v8)
  {
    if (objc_msgSend(v8, "cpl_inExpunged"))
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10004117C();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v39 = v7;
          __int16 v40 = 2112;
          __int16 v41 = v9;
          id v11 = "Won't move %@ to %@ as its real record is expunged";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x16u);
          goto LABEL_28;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (!objc_msgSend(v8, "cpl_isSparseRecord"))
      {
        [*(id *)(a1 + 56) prepareCopyForCKRecordID:v7 fromCKRecord:v8];
        id v12 = [v8 recordID];
        [*(id *)(a1 + 64) setObject:v12 forKeyedSubscript:v7];

        uint64_t v13 = *(void *)(a1 + 112);
        uint64_t v14 = *(void *)(a1 + 56);
        id v35 = 0;
        id v15 = +[CPLCloudKitTransportTask copiedRecordFromSourceRecord:v8 sourceDatabaseScope:v13 toRecordID:v9 helper:v14 action:@"Move" error:&v35];
        id v16 = v35;
        id v10 = v35;
        if (v15)
        {
          if (qword_1002CE530)
          {
            uint64_t v17 = (*(void (**)(void))(qword_1002CE530 + 16))();
            if ([v17 moveStep])
            {
              CFStringRef v36 = @"inject_fault_step";
              uint64_t v18 = *(void **)(a1 + 72);
              +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v17 moveStep]);
              uint64_t v19 = v34 = v17;
              uint64_t v20 = [v18 objectForKeyedSubscript:v19];
              uint64_t v37 = v20;
              uint64_t v21 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
              id v22 = +[NSMutableDictionary dictionaryWithDictionary:v21];

              uint64_t v17 = v34;
              [v34 workItemDelay];
              if (v23 != 0.0)
              {
                [v34 workItemDelay];
                uint64_t v25 = +[NSNumber numberWithInt:(int)(v24 * 1000.0)];
                [v22 setObject:v25 forKeyedSubscript:@"sparsifier_work_item_vesting_delay_milliseconds"];
              }
              [v15 setPluginFields:v22];
              if (!_CPLSilentLogging)
              {
                uint64_t v26 = sub_10004117C();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v27 = [v15 recordID];
                  *(_DWORD *)buf = 138412546;
                  id v39 = v27;
                  __int16 v40 = 2112;
                  __int16 v41 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Setting move plug-in fields on %@ to %@", buf, 0x16u);
                }
              }
            }
          }
          id v28 = objc_alloc_init((Class)CKMovePhotosChange);
          id v29 = [v8 recordID];
          [v28 setSourceRecordID:v29];

          id v30 = [v8 etag];
          [v28 setSourceRecordChangeTag:v30];

          [v28 setDestinationRecord:v15];
          id v31 = *(void **)(a1 + 80);
          id v32 = [v8 recordID];
          id v33 = [v15 recordID];
          [v31 addCopyMoveFromRecordID:v32 toRecordID:v33];

          [*(id *)(a1 + 88) addChange:v28];
        }
        else
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v16);
          *a4 = 1;
        }

        goto LABEL_28;
      }
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10004117C();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v39 = v7;
          __int16 v40 = 2112;
          __int16 v41 = v9;
          id v11 = "Won't move %@ to %@ as its real record is a sparse record";
          goto LABEL_13;
        }
        goto LABEL_28;
      }
    }
  }
  else if (!_CPLSilentLogging)
  {
    id v10 = sub_10004117C();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v39 = v7;
      __int16 v40 = 2112;
      __int16 v41 = v9;
      id v11 = "Won't move %@ to %@ as its real record has already disappeared";
      goto LABEL_13;
    }
LABEL_28:
  }
}

CPLMoveChangesBatch *__cdecl sub_100043948(id a1, CPLMoveChangesBatch *a2)
{
  id v2 = a2;
  return v2;
}

void sub_100043C08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v7 = [CPLCloudKitCopyMoveOperationContext alloc];
    id v8 = [*(id *)(a1 + 32) firstObject];
    id v9 = [v8 zoneID];
    id v10 = [*(id *)(a1 + 40) firstObject];
    id v11 = [v10 zoneID];
    id v12 = [(CPLCloudKitCopyMoveOperationContext *)v7 initFromZoneID:v9 toZoneID:v11];

    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 56);
    id v29 = 0;
    id v30 = 0;
    uint64_t v18 = [v16 _moveChangesFromSourceRecords:v6 recordIDs:v14 sourceType:v13 destinationRecordIDs:v15 helper:v17 sourceRecordIDs:&v30 operationContext:v12 error:&v29];
    id v19 = v30;
    id v20 = v29;
    if (v18)
    {
      uint64_t v21 = (*(void (**)(void))(*(void *)(a1 + 72) + 16))();

      uint64_t v22 = *(void *)(a1 + 80);
      uint64_t v23 = *(void *)(a1 + 88);
      double v24 = *(void **)(a1 + 48);
      uint64_t v25 = *(void *)(a1 + 56);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100043E10;
      v26[3] = &unk_100276390;
      id v28 = *(id *)(a1 + 64);
      id v27 = v19;
      [v24 _applyMoveChanges:v21 sourceType:v22 destinationType:v23 helper:v25 operationContext:v12 completionHandler:v26];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

uint64_t sub_100043E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_100044048(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) mappingForMoveSteps];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100044124;
  v5[3] = &unk_100277B68;
  id v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v1, "count"));
  id v2 = v6;
  [v1 enumerateKeysAndObjectsUsingBlock:v5];
  id v3 = [v2 copy];
  uint64_t v4 = (void *)qword_1002CE538;
  qword_1002CE538 = (uint64_t)v3;
}

id sub_100044124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:a3];
}

void sub_100044648(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE550 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.recordcopy");
  _objc_release_x1();
}

uint64_t CPLCKFeatureAvailabilityResponseReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init(CPLCKAvailabilityResponse);
      [a1 addFeatures:v12];
      if (!PBReaderPlaceMark() || (CPLCKAvailabilityResponseReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100046B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100046BC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 80) objectForKey:v5];
  uint64_t v8 = (uint64_t)[v6 integerValue];
  if (v8 > 100) {
    goto LABEL_4;
  }
  uint64_t v9 = v8;
  if (v8 < 0)
  {
    uint64_t v9 = 0;
    CFStringRef v11 = @" [error]";
  }
  else
  {
    if ((unint64_t)v8 >= 0x64)
    {
LABEL_4:
      id v10 = 0;
      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      goto LABEL_43;
    }
    CFStringRef v11 = &stru_10027FEB8;
  }
  if ([v7 supportsResources])
  {
    id v12 = "";
    if ([v7 hasChangeType:8])
    {
      unsigned int v13 = [*(id *)(*(void *)(a1 + 32) + 88) containsObject:v5];
      if (v13) {
        id v12 = "(-R)";
      }
      goto LABEL_14;
    }
  }
  else
  {
    id v12 = "";
  }
  LOBYTE(v13) = 1;
LABEL_14:
  uint64_t v46 = a1;
  id v47 = v7;
  if (*(unsigned char *)(a1 + 72))
  {
    char v50 = v13;
    id v14 = objc_alloc((Class)NSString);
    uint64_t v15 = objc_opt_class();
    id v16 = [v7 scopedIdentifier];
    uint64_t v17 = +[CPLRecordChange descriptionForChangeType:](CPLRecordChange, "descriptionForChangeType:", [v7 changeType]);
    uint64_t v41 = v15;
    a1 = v46;
    id v10 = [v14 initWithFormat:@"\t%@[%@]%@%s [%ld%%]%@", v41, v16, v17, v12, v9, v11];

    [*(id *)(v46 + 40) addObject:v10];
    if (v50) {
      goto LABEL_43;
    }
  }
  else
  {
    id v10 = 0;
    if (v13) {
      goto LABEL_43;
    }
  }
  __int16 v45 = [v7 resources];
  unint64_t v18 = (unint64_t)[v45 count];
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += v18;
  if (v18)
  {
    unint64_t v42 = v18;
    id v43 = v6;
    v51 = v10;
    id v44 = v5;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id obj = [v7 resources];
    id v19 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)v53;
      do
      {
        uint64_t v23 = 0;
        id v48 = v20;
        do
        {
          if (*(void *)v53 != v22) {
            objc_enumerationMutation(obj);
          }
          double v24 = *(void **)(*((void *)&v52 + 1) + 8 * (void)v23);
          if ((+[CPLResource shouldIgnoreResourceTypeOnUpload:](CPLResource, "shouldIgnoreResourceTypeOnUpload:", [v24 resourceType]) & 1) == 0)
          {
            uint64_t v25 = [v24 identity];
            id v26 = [v25 fileSize];
            *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += v26;
            id v27 = [v7 resourceCopyFromScopedIdentifier];
            id v28 = v21;
            if (v27 && [v24 sourceResourceType])
            {
              id v29 = [v25 fileURL];
              BOOL v30 = v29 == 0;
            }
            else
            {
              BOOL v30 = 0;
            }

            if (*(unsigned char *)(a1 + 72))
            {
              id v31 = objc_alloc((Class)NSString);
              id v32 = +[CPLResource shortDescriptionForResourceType:](CPLResource, "shortDescriptionForResourceType:", [v24 resourceType]);
              id v33 = [v25 fileUTI];
              uint64_t v34 = +[NSByteCountFormatter stringFromByteCount:v26 countStyle:3];
              id v35 = (void *)v34;
              CFStringRef v36 = &stru_10027FEB8;
              if (v30) {
                CFStringRef v36 = @"(server-copy)";
              }
              id v37 = [v31 initWithFormat:@"\t\t%@ (%@) %@ %@", v32, v33, v34, v36];

              unint64_t v7 = v47;
              a1 = v46;

              [*(id *)(v46 + 40) addObject:v37];
              v51 = v37;
            }
            id v20 = v48;
            uint64_t v21 = &v28[(void)v26];
          }
          uint64_t v23 = (char *)v23 + 1;
        }
        while (v20 != v23);
        id v20 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = 0;
    }

    if (v42 < 2)
    {
      id v6 = v43;
      id v5 = v44;
      id v10 = v51;
    }
    else
    {
      id v6 = v43;
      id v5 = v44;
      id v10 = v51;
      if (*(unsigned char *)(a1 + 72))
      {
        id v38 = objc_alloc((Class)NSString);
        id v39 = +[NSByteCountFormatter stringFromByteCount:v21 countStyle:3];
        id v40 = [v38 initWithFormat:@"\t\t\tTotal for %lu resources in record: %@", v42, v39];

        [*(id *)(a1 + 40) addObject:v40];
        id v10 = v40;
      }
    }
  }

LABEL_43:
}

__CFString *sub_100047594(int a1)
{
  sub_100047608(a1);
  id v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    if (a1) {
      id v2 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Unkown #%lu", a1);
    }
    else {
      id v2 = @"Unknown";
    }
  }
  return v2;
}

id sub_100047608(int a1)
{
  if (a1 == 1)
  {
    id v2 = CPLFeatureNameMomentShare;
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

id sub_100047658(void *a1)
{
  id v1 = a1;
  if (qword_1002CE560 != -1) {
    dispatch_once(&qword_1002CE560, &stru_100277BD0);
  }
  id v2 = [(id)qword_1002CE558 objectForKeyedSubscript:v1];
  id v3 = v2;
  if (v2) {
    id v4 = [v2 intValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_1000476E8(id a1)
{
  uint64_t v3 = CPLFeatureNameMomentShare;
  id v4 = &off_100291D88;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  id v2 = (void *)qword_1002CE558;
  qword_1002CE558 = v1;
}

BOOL CPLRemappedRecordReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_21:
        id v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100047C40(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100047C54(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void sub_100048910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048934(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  char v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v6 = [WeakRetained feedbackCompletionBlock];

  if (v6)
  {
    ((void (**)(void, id))v6)[2](v6, v8);
    id v7 = objc_loadWeakRetained(v4);
    [v7 setFeedbackCompletionBlock:0];
  }
}

void sub_100048C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048C3C(id a1)
{
  uint64_t v1 = objc_alloc_init(CPLCKFeatureAvailabilityRequest);
  id v2 = (void *)qword_1002CE568;
  qword_1002CE568 = (uint64_t)v1;

  uint64_t v3 = objc_alloc_init(CPLCKAvailabilityRequest);
  [(CPLCKAvailabilityRequest *)v3 setFeature:1];
  [(id)qword_1002CE568 addFeatures:v3];
}

void sub_100048CB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = [WeakRetained featureCheckAvailabilityCompletionBlock];
  if (v8)
  {
    if (v6)
    {
      uint64_t v9 = [v6 domain];
      if ([v9 isEqualToString:CKErrorDomain])
      {
        id v10 = [v6 code];

        if (v10 == (id)15)
        {

          goto LABEL_6;
        }
      }
      else
      {
      }
      ((void (**)(void, void, id))v8)[2](v8, 0, v6);
LABEL_22:
      [WeakRetained setFeatureCheckAvailabilityCompletionBlock:0];
      goto LABEL_23;
    }
LABEL_6:
    if (v5)
    {
      id v11 = v5;
      id v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v11, "featuresCount"));
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v20 = v11;
      uint64_t v13 = [v11 features];
      id v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v22;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v22 != v16) {
              objc_enumerationMutation(v13);
            }
            unint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
            id v19 = sub_100047608((int)[v18 feature]);
            if (v19 && ([v18 allowed] & 1) == 0) {
              [v12 addObject:v19];
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
        }
        while (v15);
      }

      ((void (**)(void, id, void))v8)[2](v8, v12, 0);
    }
    else
    {
      ((void (**)(void, void *, void))v8)[2](v8, &__NSArray0__struct, 0);
    }
    id v6 = 0;
    goto LABEL_22;
  }
LABEL_23:
}

void sub_100049034(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 1;
    id v2 = objc_alloc((Class)NSDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    id v18 = 0;
    id v4 = [v2 initWithContentsOfURL:v3 error:&v18];
    id v5 = v18;
    if (v4)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_100049298();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          id v20 = v4;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Operation group mapping: %{public}@", buf, 0xCu);
        }
      }
      uint64_t v13 = _NSConcreteStackBlock;
      uint64_t v14 = 3221225472;
      id v15 = sub_1000492EC;
      uint64_t v16 = &unk_100277C50;
      id v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v4, "count"));
      uint64_t v17 = v7;
      [v4 enumerateKeysAndObjectsUsingBlock:&v13];
      if ([v7 count])
      {
        id v8 = [v7 copy];
        uint64_t v9 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v8;
      }
    }
    else
    {
      id v10 = +[NSFileManager defaultManager];
      unsigned __int8 v11 = [v10 cplIsFileDoesNotExistError:v5];

      if ((v11 & 1) != 0 || _CPLSilentLogging) {
        goto LABEL_12;
      }
      id v7 = sub_100049298();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        id v12 = [*(id *)(a1 + 32) path];
        *(_DWORD *)buf = 138412546;
        id v20 = v12;
        __int16 v21 = 2112;
        id v22 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to load group mapping at %@: %@", buf, 0x16u);
      }
    }

LABEL_12:
  }
}

id sub_100049298()
{
  if (qword_1002CE578 != -1) {
    dispatch_once(&qword_1002CE578, &stru_100277CC0);
  }
  uint64_t v0 = (void *)qword_1002CE580;
  return v0;
}

void sub_1000492EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
  else if (!_CPLSilentLogging)
  {
    id v7 = sub_100049298();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412546;
      id v9 = v5;
      __int16 v10 = 2112;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid value for group '%@': %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_100049540(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100049554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100049574(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100049584(uint64_t a1)
{
}

uint64_t sub_10004958C(uint64_t *a1)
{
  sub_100049034(a1[4]);
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  return _objc_release_x1();
}

void sub_100049708(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10004971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004973C(uint64_t a1)
{
  sub_100049034(*(void *)(a1 + 32));
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    id v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "count"));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = *(void **)(*(void *)(a1 + 32) + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100049814;
    v7[3] = &unk_100277CA0;
    void v7[4] = *(void *)(a1 + 40);
    return [v6 enumerateKeysAndObjectsUsingBlock:v7];
  }
  return result;
}

void sub_100049814(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)NSString) initWithFormat:@"'%@' -> '%@'", v6, v5];

  [v4 addObject:v7];
}

void sub_1000498F8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE580 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.groupmapping");
  _objc_release_x1();
}

void sub_100049BE0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100049BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100049C20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100049C30(uint64_t a1)
{
}

void sub_100049C38(void *a1)
{
  id v2 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  if (!v2)
  {
    id v2 = [[_CPLCloudKitTaskGroupThrottler alloc] initWithGroupName:a1[5] minimumThrottlingInterval:*(double *)(a1[4] + 24)];
    [*(id *)(a1[4] + 16) setObject:v2 forKeyedSubscript:a1[5]];
  }
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v4 + 40);
  unsigned __int8 v5 = [(_CPLCloudKitTaskGroupThrottler *)v2 shouldRunOperationsNow:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v5;
}

void sub_100049EA4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_100049EB8(_Unwind_Exception *a1)
{
}

void sub_100049ECC(void *a1)
{
  id v3 = +[CPLCloudKitErrors bestErrorForUnderlyingError:a1[4]];
  id v2 = [*(id *)(a1[5] + 16) objectForKeyedSubscript:a1[6]];
  [v2 operationDidFinishNow:a1[7] withError:v3];
}

void sub_10004A080(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_10004A094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004A0B4(void *a1)
{
  if ([*(id *)(a1[4] + 16) count])
  {
    id v2 = [objc_alloc((Class)NSString) initWithFormat:@"\n%@", a1[5]];
    id v3 = +[NSDate date];
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1[4] + 16), "count"));
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    unsigned __int8 v5 = [*(id *)(a1[4] + 16) allKeys];
    id v6 = [v5 sortedArrayUsingSelector:"compare:"];

    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        __int16 v10 = 0;
        do
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:*(void *)(*((void *)&v16 + 1) + 8 * (void)v10)];
          id v12 = [v11 statusWithNow:v3];
          [v4 addObject:v12];

          __int16 v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v8);
    }

    uint64_t v13 = [v4 componentsJoinedByString:v2];
    uint64_t v14 = *(void *)(a1[6] + 8);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
}

void sub_10004A648(uint64_t a1)
{
  ++*(void *)(*(void *)(a1 + 32) + 56);
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 64))
  {
    *(unsigned char *)(v1 + 64) = 1;
    dispatch_time_t v3 = dispatch_time(0, 30000000000);
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned __int8 v5 = *(NSObject **)(v4 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004A700;
    block[3] = &unk_100275EA0;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }
}

void sub_10004A700(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 56))
  {
    if (!_CPLSilentLogging)
    {
      if (qword_1002CE588 != -1) {
        dispatch_once(&qword_1002CE588, &stru_100277D30);
      }
      dispatch_time_t v3 = qword_1002CE590;
      if (os_log_type_enabled((os_log_t)qword_1002CE590, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 56);
        uint64_t v6 = *(void *)(v4 + 72);
        int v7 = 134218498;
        uint64_t v8 = v5;
        __int16 v9 = 2114;
        uint64_t v10 = v6;
        __int16 v11 = 1024;
        int v12 = 30;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Throttled %lu operations for '%{public}@' in the last %ds", (uint8_t *)&v7, 0x1Cu);
      }
      uint64_t v1 = *(void *)(a1 + 32);
    }
    *(void *)(v1 + 56) = 0;
  }
}

void sub_10004AE30(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE590 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.task.throttling");
  _objc_release_x1();
}

id sub_10004B168()
{
  if (qword_1002CE598 != -1) {
    dispatch_once(&qword_1002CE598, &stru_100277DC8);
  }
  uint64_t v0 = (void *)qword_1002CE5A0;
  return v0;
}

void sub_10004B1BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10004B284;
  v10[3] = &unk_1002760B0;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_10004B284(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v4)
  {
    id v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    dispatch_time_t v3 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v4 withRequestUUIDs:v2 description:@"Failed to get list of disabled features"];

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
}

void sub_10004B484(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10004B54C;
  v10[3] = &unk_1002760B0;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_10004B54C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v5)
  {
    id v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    dispatch_time_t v3 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v5 withRequestUUIDs:v2 description:@"Failed to get derivatives upload configuration"];

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 280), *(id *)(a1 + 48));
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v4 + 296)) {
      [(id)v4 fetchDisabledFeatures];
    }
    else {
      (*(void (**)(void, void, void, void, void))(*(void *)(v4 + 272) + 16))(*(void *)(v4 + 272), *(void *)(v4 + 288), 0, *(void *)(v4 + 280), 0);
    }
  }
}

void sub_10004B6EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 288), a2);
    [*(id *)(a1 + 32) fetchDerivativesFilter];
  }
  else
  {
    (*(void (**)(void))(*(void *)(v5 + 272) + 16))();
  }
}

void sub_10004B80C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE5A0 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.setup");
  _objc_release_x1();
}

void sub_10004BAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004BB14(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = (id *)(a1 + 40);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained hash];
  kdebug_trace();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10004BD08(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _runOperationsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16))();
  }
}

void sub_10004BE00(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = CPLEnableWorkaroundFor101242629();
  if (v3
    || (v4 & 1) != 0
    || (uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 296), v5 != objc_opt_class())
    || ([*(id *)(*(void *)(a1 + 32) + 288) additionalInfo],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        v6))
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    int v7 = [*(id *)(*(void *)(a1 + 32) + 304) scopeIdentifier];
    id v8 = [*(id *)(a1 + 32) mainScopeIdentifier];
    if ([v7 isEqualToString:v8])
    {
      unsigned __int8 v9 = [v7 hasPrefix:CPLMainScopeIdentifierForAppPrefix];

      if ((v9 & 1) == 0)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v10 = sub_10004BFD8();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 304);
            int v12 = 138412290;
            uint64_t v13 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Starting additional query for sparse assets in %@", (uint8_t *)&v12, 0xCu);
          }
        }
        [*(id *)(a1 + 32) _runQueryWithCurrentUserID:*(void *)(a1 + 40) cursor:0 additionalInfo:@"Sparse" completionHandler:*(void *)(*(void *)(a1 + 32) + 272)];
      }
    }
    else
    {
    }
  }
}

id sub_10004BFD8()
{
  if (qword_1002CE5C8 != -1) {
    dispatch_once(&qword_1002CE5C8, &stru_100277F40);
  }
  uint64_t v0 = (void *)qword_1002CE5D0;
  return v0;
}

void sub_10004C720(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10004C75C(id a1)
{
  uint64_t v1 = [CPLCloudKitQueryOptions alloc];
  id v2 = +[NSPredicate predicateWithFormat:@"TRUEPREDICATE"];
  id v47 = [(CPLCloudKitQueryOptions *)v1 initWithRecordType:@"CPLAssetAndMasterByAssetDate" predicate:v2 resultsLimit:200];

  id v3 = [CPLCloudKitQueryOptions alloc];
  char v4 = +[NSPredicate predicateWithFormat:@"TRUEPREDICATE"];
  __int16 v45 = [(CPLCloudKitQueryOptions *)v3 initWithRecordType:@"CPLAssetSparseByCreateTime" predicate:v4 resultsLimit:200];

  uint64_t v5 = (objc_class *)objc_opt_class();
  uint64_t v46 = sub_10004CC54(v5, 0);
  v48[0] = v46;
  v49[0] = v47;
  id v6 = (objc_class *)objc_opt_class();
  id v44 = sub_10004CC54(v6, @"Sparse");
  v48[1] = v44;
  v49[1] = v45;
  int v7 = (objc_class *)objc_opt_class();
  id v43 = NSStringFromClass(v7);
  v48[2] = v43;
  id v8 = [CPLCloudKitQueryOptions alloc];
  unint64_t v42 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLPerson"];
  uint64_t v41 = [(CPLCloudKitQueryOptions *)v8 initWithRecordType:@"CPLRecordByType" predicate:v42 resultsLimit:200];
  v49[2] = v41;
  unsigned __int8 v9 = (objc_class *)objc_opt_class();
  id v40 = NSStringFromClass(v9);
  v48[3] = v40;
  uint64_t v10 = [CPLCloudKitQueryOptions alloc];
  id v39 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLAlbum"];
  id v38 = [(CPLCloudKitQueryOptions *)v10 initWithRecordType:@"CPLRecordByType" predicate:v39 resultsLimit:5];
  v49[3] = v38;
  uint64_t v11 = (objc_class *)objc_opt_class();
  id v37 = NSStringFromClass(v11);
  v48[4] = v37;
  int v12 = [CPLCloudKitQueryOptions alloc];
  CFStringRef v36 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLContainerRelation"];
  id v35 = [(CPLCloudKitQueryOptions *)v12 initWithRecordType:@"CPLRecordByType" predicate:v36 resultsLimit:200];
  v49[4] = v35;
  uint64_t v13 = (objc_class *)objc_opt_class();
  uint64_t v34 = NSStringFromClass(v13);
  v48[5] = v34;
  uint64_t v14 = [CPLCloudKitQueryOptions alloc];
  id v33 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLMemory"];
  id v32 = [(CPLCloudKitQueryOptions *)v14 initWithRecordType:@"CPLRecordByType" predicate:v33 resultsLimit:200];
  v49[5] = v32;
  id v15 = (objc_class *)objc_opt_class();
  long long v16 = NSStringFromClass(v15);
  v48[6] = v16;
  long long v17 = [CPLCloudKitQueryOptions alloc];
  long long v18 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLSocialGroup"];
  long long v19 = [(CPLCloudKitQueryOptions *)v17 initWithRecordType:@"CPLRecordByType" predicate:v18 resultsLimit:200];
  v49[6] = v19;
  id v20 = (objc_class *)objc_opt_class();
  __int16 v21 = NSStringFromClass(v20);
  v48[7] = v21;
  id v22 = [CPLCloudKitQueryOptions alloc];
  long long v23 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLSuggestion"];
  long long v24 = [(CPLCloudKitQueryOptions *)v22 initWithRecordType:@"CPLRecordByType" predicate:v23 resultsLimit:200];
  v49[7] = v24;
  uint64_t v25 = (objc_class *)objc_opt_class();
  id v26 = NSStringFromClass(v25);
  v48[8] = v26;
  id v27 = [CPLCloudKitQueryOptions alloc];
  id v28 = +[NSPredicate predicateWithFormat:@"type = %@", @"CPLFaceCrop"];
  id v29 = [(CPLCloudKitQueryOptions *)v27 initWithRecordType:@"CPLRecordByType" predicate:v28 resultsLimit:25];
  v49[8] = v29;
  uint64_t v30 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:9];
  id v31 = (void *)qword_1002CE5A8;
  qword_1002CE5A8 = v30;
}

id sub_10004CC54(objc_class *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc((Class)NSString);
    uint64_t v5 = NSStringFromClass(a1);
    id v6 = [v4 initWithFormat:@"%@_%@", v5, v3];
  }
  else
  {
    NSStringFromClass(a1);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

uint64_t sub_10004CCF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004CD08(uint64_t a1)
{
}

void sub_10004CD10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      uint64_t v11 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10004D138;
      v22[3] = &unk_100277E38;
      uint64_t v12 = *(void *)(a1 + 72);
      v22[4] = v11;
      v22[5] = v12;
      v22[6] = *(void *)(a1 + 88);
      [v11 dispatchAsync:v22];
      if (!_CPLSilentLogging)
      {
        uint64_t v13 = sub_10004BFD8();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Pulled change (query) %@", buf, 0xCu);
        }
      }
      id v21 = 0;
      uint64_t v14 = objc_msgSend(v8, "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:", &v21, *(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(a1 + 48));
      id v15 = v21;
      if (v14)
      {
        if ([*(id *)(a1 + 56) supportsDownloadOfChange:v14 scopeProvider:*(void *)(a1 + 32)])
        {
          if ([v14 inExpunged])
          {
            long long v16 = objc_opt_class();
            long long v17 = [v14 scopedIdentifier];
            id v18 = [v16 newDeleteChangeWithScopedIdentifier:v17];

            uint64_t v14 = v18;
          }
          [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) addRecord:v14];
          goto LABEL_24;
        }
        if (_CPLSilentLogging)
        {
LABEL_24:

          goto LABEL_25;
        }
        id v20 = sub_10004BFD8();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v24 = v14;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Ignoring unsupported %@", buf, 0xCu);
        }
      }
      else
      {
        if (_CPLSilentLogging)
        {
          uint64_t v14 = 0;
          goto LABEL_24;
        }
        id v20 = sub_10004BFD8();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to translate CKRecord to CPLRecord: %@", buf, 0xCu);
        }
        uint64_t v14 = 0;
      }

      goto LABEL_24;
    }
  }
  else if (!_CPLSilentLogging)
  {
    long long v19 = sub_10004BFD8();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v24 = v7;
      __int16 v25 = 2112;
      id v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to fetch %@ in query: %@", buf, 0x16u);
    }
  }
LABEL_25:
}

id sub_10004D138(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) / (double)*(uint64_t *)(a1 + 48)];
}

void sub_10004D15C(void *a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10004BFD8();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Updated cursor: %@", (uint8_t *)&v11, 0xCu);
    }
  }
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
  id v7 = [[CPLCKQueryCursor alloc] initWithQueryCursor:v3 additionalInfo:a1[5]];
  [v5 sendProgressBatch:v6 updatedCursor:v7];

  *(void *)(*(void *)(a1[7] + 8) + 24) = 0;
  id v8 = objc_alloc_init((Class)CPLChangeBatch);
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10004D298(void *a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_10004BFD8();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v9 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ignoring cursor fetch %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v6 = (void *)a1[4];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004D3EC;
    v7[3] = &unk_100275EA0;
    void v7[4] = v6;
    [v6 dispatchAsync:v7];
    (*(void (**)(void))(a1[5] + 16))();
  }
}

id sub_10004D3EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_10004D3F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8);
  if (!*(unsigned char *)(v8 + 24))
  {
    *(unsigned char *)(v8 + 24) = 1;
    id v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10004D514;
    v12[3] = &unk_100277ED8;
    void v12[4] = v9;
    id v10 = v6;
    uint64_t v11 = *(void *)(a1 + 72);
    id v13 = v10;
    uint64_t v18 = v11;
    id v16 = *(id *)(a1 + 48);
    id v14 = v5;
    id v15 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 56);
    [v9 dispatchAsync:v12];
  }
}

void sub_10004D514(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (+[CPLCloudKitErrors isCloudKitOperationCancelledError:](CPLCloudKitErrors, "isCloudKitOperationCancelledError:", v2)|| ([v2 isCPLOperationCancelledError] & 1) != 0)
    {
      if (_CPLSilentLogging)
      {
LABEL_9:
        uint64_t v8 = +[CPLCloudKitErrors realErrorForError:v2];
        id v9 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
        id v10 = [v2 localizedDescription];
        uint64_t v11 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v8, v9, @"Error downloading batch: %@", v10 withRequestUUIDs description];

        goto LABEL_13;
      }
      id v3 = sub_10004BFD8();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
LABEL_8:

        goto LABEL_9;
      }
      *(_WORD *)buf = 0;
      id v4 = "Query was cancelled";
      id v5 = v3;
      os_log_type_t v6 = OS_LOG_TYPE_DEBUG;
      uint32_t v7 = 2;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, buf, v7);
      goto LABEL_8;
    }
    id v12 = [v2 domain];
    if ([v12 isEqual:CKErrorDomain])
    {
      if ([v2 code] == (id)11 || objc_msgSend(v2, "code") == (id)12)
      {

LABEL_18:
        if (!_CPLSilentLogging)
        {
          id v13 = sub_10004BFD8();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 296);
            *(_DWORD *)buf = 138412546;
            uint64_t v19 = v14;
            __int16 v20 = 2048;
            id v21 = [v2 code];
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Query for %@ failed because it is not supported (CloudKit error: %ld)", buf, 0x16u);
          }
        }
        CFStringRef v15 = *(const __CFString **)(a1 + 56);
        if (!v15) {
          CFStringRef v15 = @"Regular";
        }
        uint64_t v11 = +[CPLErrors cplErrorWithCode:255, @"Query for %@ - %@ is not supported for this user", *(void *)(*(void *)(a1 + 32) + 296), v15 description];
        goto LABEL_13;
      }
      id v17 = [v2 code];

      if (v17 == (id)1) {
        goto LABEL_18;
      }
    }
    else
    {
    }
    if (_CPLSilentLogging) {
      goto LABEL_9;
    }
    id v3 = sub_10004BFD8();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 296);
    *(_DWORD *)buf = 138412546;
    uint64_t v19 = v16;
    __int16 v20 = 2112;
    id v21 = v2;
    id v4 = "Query for %@ failed with error: %@";
    id v5 = v3;
    os_log_type_t v6 = OS_LOG_TYPE_ERROR;
    uint32_t v7 = 22;
    goto LABEL_7;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count]) {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  uint64_t v11 = 0;
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10004DAC4(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  qword_1002CE5B8 = (uint64_t)objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  _objc_release_x1();
}

void sub_10004DD14(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  qword_1002CE5D0 = (uint64_t)os_log_create(v1, "engine.transport.cloudkit.query");
  _objc_release_x1();
}

id CPLFuzziedFileUTI(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (qword_1002CE5E0 != -1) {
      dispatch_once(&qword_1002CE5E0, &stru_100277F60);
    }
    if ([(id)qword_1002CE5D8 containsObject:v1])
    {
      id v2 = v1;
    }
    else
    {
      id v3 = +[UTType typeWithIdentifier:v1];
      id v4 = v3;
      if (v3)
      {
        id v5 = UTTypeImage;
        if (([v3 conformsToType:UTTypeImage] & 1) == 0)
        {
          id v5 = UTTypeAudio;
          if (([v4 conformsToType:UTTypeAudio] & 1) == 0)
          {
            id v5 = UTTypeMovie;
            if (([v4 conformsToType:UTTypeMovie] & 1) == 0)
            {
              id v5 = UTTypeText;
              if (![v4 conformsToType:UTTypeText]) {
                id v5 = UTTypeItem;
              }
            }
          }
        }
      }
      else
      {
        id v5 = UTTypeItem;
      }
      id v2 = [(UTType *)v5 identifier];
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_10004DEAC(id a1)
{
  qword_1002CE5D8 = (uint64_t)objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", @"public.jpeg", @"com.apple.quicktime-movie", @"public.heic", @"public.mpeg-4", @"com.apple.photos.apple-adjustment-envelope", @"public.png", @"com.canon.cr2-raw-image", @"public.archive", 0);
  _objc_release_x1();
}

uint64_t sub_10004DF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 8);
    id v9 = v4;
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableArray);
      uint32_t v7 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v6;

      id v5 = *(void **)(a1 + 8);
    }
    id v3 = [v5 addObject:v9];
    id v4 = v9;
  }
  return _objc_release_x1(v3, v4);
}

uint64_t CPLRemappedByReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init(CPLRemappedRecord);
      sub_10004DF44(a1, v12);
      if (!PBReaderPlaceMark() || !CPLRemappedRecordReadFrom((uint64_t)v12, a2))
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10004E6A4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_10004E978(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    unint64_t v6 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
    if (!v6)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 40);
      __int16 v20 = [*(id *)(a1 + 32) zoneID];
      id v21 = objc_msgSend(v20, "cpl_zoneName");
      id v22 = +[CPLErrors cplErrorWithCode:25, @"%@ %@ not found in %@", v18, v19, v21 description];
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v22);

LABEL_19:
      return;
    }
    id v62 = 0;
    unint64_t v7 = [*(id *)(a1 + 48) scopedIdentifier];
    char v8 = [v7 scopeIdentifier];
    id v9 = objc_msgSend(v6, "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:", &v62, v8, *(void *)(a1 + 48), *(void *)(a1 + 56));
    id v10 = v62;

    if (v9)
    {
      if (([v9 inExpunged] & 1) != 0 || objc_msgSend(v9, "isDelete"))
      {
        uint64_t v12 = *(void *)(a1 + 64);
        uint64_t v11 = *(void *)(a1 + 72);
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = [*(id *)(a1 + 32) zoneID];
        CFStringRef v15 = objc_msgSend(v14, "cpl_zoneName");
        uint64_t v16 = +[CPLErrors cplErrorWithCode:25, @"%@ %@ is deleted or sparse in %@", v11, v13, v15 description];
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v16);
      }
      else
      {
        if (objc_opt_isKindOfClass())
        {
          if ([v9 supportsResources] && *(void *)(*(void *)(a1 + 48) + 288))
          {
            long long v54 = +[NSFileManager defaultManager];
            long long v58 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            id obj = [v9 resources];
            id v56 = [obj countByEnumeratingWithState:&v58 objects:v65 count:16];
            if (v56)
            {
              uint64_t v55 = *(void *)v59;
              long long v53 = v6;
              while (2)
              {
                for (i = 0; i != v56; i = (char *)i + 1)
                {
                  if (*(void *)v59 != v55) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v30 = *(void **)(*((void *)&v58 + 1) + 8 * i);
                  id v31 = [v30 identity];
                  id v32 = [v31 fileURL];

                  if (v32)
                  {
                    id v33 = v10;
                    id v34 = objc_alloc((Class)NSString);
                    uint64_t v35 = *(void *)(a1 + 72);
                    CFStringRef v36 = +[CPLResource shortDescriptionForResourceType:](CPLResource, "shortDescriptionForResourceType:", [v30 resourceType]);
                    id v37 = [v34 initWithFormat:@"resource-%@-%@", v35, v36];

                    id v38 = [*(id *)(*(void *)(a1 + 48) + 288) URLByAppendingPathComponent:v37 isDirectory:0];
                    id v57 = 0;
                    LODWORD(v35) = [v54 moveItemAtURL:v32 toURL:v38 error:&v57];
                    id v39 = v57;
                    if (!v35)
                    {
                      uint64_t v47 = *(void *)(a1 + 64);
                      id v48 = +[CPLResource shortDescriptionForResourceType:](CPLResource, "shortDescriptionForResourceType:", [v30 resourceType]);
                      uint64_t v49 = objc_opt_class();
                      char v50 = [v9 scopedIdentifier];
                      v51 = +[CPLErrors cplErrorWithCode:150, v39, @"Failed to move %@ of %@ %@ to its destination", v48, v49, v50 underlyingError description];
                      (*(void (**)(uint64_t, void, void *))(v47 + 16))(v47, 0, v51);

                      return;
                    }
                    id v40 = [v30 identity];
                    [v40 setFileURL:v38];

                    id v10 = v33;
                    unint64_t v6 = v53;
                  }
                }
                id v56 = [obj countByEnumeratingWithState:&v58 objects:v65 count:16];
                if (v56) {
                  continue;
                }
                break;
              }
            }
          }
          (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
          goto LABEL_18;
        }
        uint64_t v41 = *(void *)(a1 + 64);
        uint64_t v42 = objc_opt_class();
        uint64_t v43 = *(void *)(a1 + 72);
        uint64_t v44 = *(void *)(a1 + 40);
        uint64_t v14 = [*(id *)(a1 + 32) zoneID];
        __int16 v45 = objc_msgSend(v14, "cpl_zoneName");
        uint64_t v46 = +[CPLErrors cplErrorWithCode:25, @"%@ %@ is not the expected %@ in %@", v42, v44, v43, v45 description];
        (*(void (**)(uint64_t, void, void *))(v41 + 16))(v41, 0, v46);
      }
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        if (qword_1002CE5E8 != -1) {
          dispatch_once(&qword_1002CE5E8, &stru_100277FF8);
        }
        long long v23 = qword_1002CE5F0;
        if (os_log_type_enabled((os_log_t)qword_1002CE5F0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v64 = v6;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to translate CKRecord to CPLRecord: %@", buf, 0xCu);
        }
      }
      uint64_t v24 = *(void *)(a1 + 64);
      uint64_t v25 = *(void *)(a1 + 40);
      id v26 = [*(id *)(a1 + 32) zoneID];
      id v27 = objc_msgSend(v26, "cpl_zoneName");
      id v28 = +[CPLErrors cplErrorWithCode:150, @"Failed to translate record %@ in %@ to %@", v25, v27, *(void *)(a1 + 72) description];
      (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v28);
    }
LABEL_18:

    goto LABEL_19;
  }
  unsigned int v5 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  v5();
}

void sub_10004F080(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(a1 + 32);
  if (v3)
  {
    unsigned int v5 = [*(id *)(a1 + 32) scopedIdentifier];
    unint64_t v6 = [v5 identifier];
    uint64_t v7 = objc_opt_class();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10004F1A0;
    v8[3] = &unk_100277FD8;
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v3;
    [v4 _fetchRecordWithIdentifier:v6 expectedClass:v7 currentUserRecordID:v9 completionHandler:v8];
  }
  else
  {
    (*(void (**)(void))(v4[37] + 16))();
  }
}

void sub_10004F1A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (v3)
  {
    unsigned int v5 = [v3 masterIdentifier];
    unint64_t v6 = *(void **)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = objc_opt_class();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10004F330;
      v13[3] = &unk_100277FB0;
      uint64_t v8 = *(void *)(a1 + 40);
      void v13[4] = *(void *)(a1 + 32);
      id v14 = v4;
      [v6 _fetchRecordWithIdentifier:v5 expectedClass:v7 currentUserRecordID:v8 completionHandler:v13];
    }
    else
    {
      uint64_t v9 = v6[37];
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = [v4 scopedIdentifier];
      uint64_t v12 = +[CPLErrors cplErrorWithCode:150, @"%@ %@ has no master", v10, v11 description];
      (*(void (**)(uint64_t, void, void, void *))(v9 + 16))(v9, 0, 0, v12);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 296) + 16))();
  }
}

uint64_t sub_10004F330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 296);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v4 + 16))(v4, a2, *(void *)(a1 + 40), 0);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(v4 + 16))(v4, 0, 0, a3);
  }
}

void sub_10004F674(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.fetch-asset-master");
  uint64_t v3 = qword_1002CE5F0;
  qword_1002CE5F0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t CPLCKFeatureAvailabilityRequestReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(CPLCKAvailabilityRequest);
      [a1 addFeatures:v12];
      if (!PBReaderPlaceMark() || (CPLCKAvailabilityRequestReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100051218(id a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000512D8;
  v4[3] = &unk_100278040;
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  id v5 = v1;
  +[CPLResource enumerateResourceTypesWithBlock:v4];
  os_log_t v2 = (void *)qword_1002CE608;
  qword_1002CE608 = (uint64_t)v1;
  id v3 = v1;
}

void sub_1000512D8(uint64_t a1, uint64_t a2)
{
  id v6 = +[NSNumber numberWithUnsignedInteger:a2];
  char v4 = *(void **)(a1 + 32);
  id v5 = +[CPLResource shortDescriptionForResourceType:a2];
  [v4 setObject:v6 forKeyedSubscript:v5];
}

void sub_100051EB0(id a1)
{
  id v1 = (void *)qword_1002CE628;
  qword_1002CE628 = (uint64_t)&off_100294438;
}

void sub_1000521B4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  char v8 = v7;
  if (!v6)
  {
    if ([v7 isCPLErrorWithCode:23])
    {
      if (*(void *)(a1 + 32) && !_CPLSilentLogging)
      {
        int v10 = sub_1000523BC();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          int v17 = 138412290;
          uint64_t v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Zone is not present even though the delete failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      uint64_t v12 = *(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 272) + 16);
      goto LABEL_18;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 272);
LABEL_17:
    uint64_t v12 = *(void (**)(void))(v9 + 16);
LABEL_18:
    v12();
    goto LABEL_19;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 272);
    goto LABEL_17;
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v13 = sub_1000523BC();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 288);
      int v17 = 138412290;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Even though the delete completed successfully, %@ is still present", (uint8_t *)&v17, 0xCu);
    }
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 272);
  uint64_t v16 = +[CPLErrors unknownError];
  (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

LABEL_19:
}

id sub_1000523BC()
{
  if (qword_1002CE638 != -1) {
    dispatch_once(&qword_1002CE638, &stru_1002780D0);
  }
  uint64_t v0 = (void *)qword_1002CE640;
  return v0;
}

void sub_100052AFC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100052BC4;
  v11[3] = &unk_1002760B0;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = v6;
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_100052BC4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 48) count];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 _didFinishDeleteWithError:0];
  }
  else
  {
    char v4 = [v3 _errorForDeleteError:v5];
    [v3 _didFinishDeleteWithError:v4];
  }
}

void sub_100052C58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100052D20;
  v11[3] = &unk_1002760B0;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = v6;
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_100052D20(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 48) count];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 _didFinishDeleteWithError:0];
  }
  else
  {
    char v4 = [v3 _errorForDeleteError:v5];
    [v3 _didFinishDeleteWithError:v4];
  }
}

void sub_100052E5C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.deletezone");
  uint64_t v3 = qword_1002CE640;
  qword_1002CE640 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_100053134()
{
  if (qword_1002CE648 != -1) {
    dispatch_once(&qword_1002CE648, &stru_100278398);
  }
  uint64_t v0 = (void *)qword_1002CE650;
  return v0;
}

void sub_1000539DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

id sub_1000539FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = [v3 userIdentity];
  id v5 = [v4 lookupInfo];
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
    if (v6) {
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    id v7 = sub_100053134();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Fetched a CK participant with no lookup info: %@", (uint8_t *)&v11, 0xCu);
    }
  }
  char v8 = [v4 userRecordID];
  id v9 = [v8 recordName];

  id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:v9];

LABEL_9:
  return v6;
}

uint64_t sub_100053B58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100053B68(uint64_t a1)
{
}

void sub_100053B70(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    id v10 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v11 = v10;
    if (v10)
    {
      [v10 updateCKShareParticipant:v8];
    }
    else if (!_CPLSilentLogging)
    {
      id v12 = sub_100053134();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138412290;
        id v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Fetched unidentified participant %@", (uint8_t *)&v13, 0xCu);
      }
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
LABEL_12:

    goto LABEL_13;
  }
  if (!_CPLSilentLogging)
  {
    int v11 = sub_100053134();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch some participant with lookup info %@: %@", (uint8_t *)&v13, 0x16u);
    }
    goto LABEL_12;
  }
LABEL_13:
}

void sub_100053D18(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100053DE8;
  v8[3] = &unk_100278148;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v11 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  [v4 dispatchAsync:v8];
}

void sub_100053DE8(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100053134();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        char v4 = *(void **)(a1 + 48);
        int v9 = 138412546;
        id v10 = v4;
        __int16 v11 = 2112;
        uint64_t v12 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to fetch share participant for %@: %@", (uint8_t *)&v9, 0x16u);
      }
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v6 = sub_100053134();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 32) scope];
        id v8 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        int v9 = 138412546;
        id v10 = v7;
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fetched participants for %@: %@", (uint8_t *)&v9, 0x16u);
      }
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  v5();
}

void sub_100054394(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      char v4 = sub_100053134();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v11 = 138543618;
        uint64_t v12 = v5;
        __int16 v13 = 2112;
        id v14 = v3;
        uint64_t v6 = "Failed to delete partially created zone %{public}@: %@";
        id v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_ERROR;
        uint32_t v9 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v11, v9);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    char v4 = sub_100053134();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138543362;
      uint64_t v12 = v10;
      uint64_t v6 = "Successfully deleted partially created zone %{public}@";
      id v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
      uint32_t v9 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
}

id sub_1000544C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) runWithNoSyncSession];
}

void sub_100054538(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 312), a2);
    [*(id *)(a1 + 32) _runOperations];
  }
  else
  {
    (*(void (**)(void))(*(void *)(v5 + 304) + 16))();
  }
}

void sub_100054858(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    id v4 = *(void (**)(void))(v3[38] + 16);
    v4();
    return;
  }
  id v5 = [v3 scopeType];
  if (v5 == (id)1)
  {
    os_log_type_t v8 = *(void **)(a1 + 32);
    id v7 = [v8 scope];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100054CA4;
    v14[3] = &unk_1002781C0;
    v14[4] = *(void *)(a1 + 32);
    [v8 _createLibraryWithScopeChange:v7 completionHandler:v14];
    goto LABEL_11;
  }
  if (v5 == (id)4)
  {
    uint32_t v9 = *(void **)(a1 + 32);
    id v7 = [v9 scope];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100054BC8;
    v15[3] = &unk_1002781C0;
    v15[4] = *(void *)(a1 + 32);
    [v9 _createLibraryShareWithScopeChange:v7 completionHandler:v15];
    goto LABEL_11;
  }
  if (v5 == (id)2)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [v6 scope];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100054AEC;
    v16[3] = &unk_1002781C0;
    v16[4] = *(void *)(a1 + 32);
    [v6 _createMomentShareWithScopeChange:v7 completionHandler:v16];
LABEL_11:

    return;
  }
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = v10[38];
  +[CPLScopeChange descriptionForScopeType:](CPLScopeChange, "descriptionForScopeType:", [v10 scopeType]);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = +[CPLErrors cplErrorWithCode:38, @"%@ is an unsupported scope type to create", v13 description];
  (*(void (**)(uint64_t, void, void, void *))(v11 + 16))(v11, 0, 0, v12);
}

void sub_100054AEC(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    [v6 _clearPartiallyCreatedZoneIfNecessary];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304) + 16))();
  }
  else
  {
    uint64_t v7 = v6[38];
    os_log_type_t v8 = [v6 cloudKitScope];
    uint32_t v9 = [v8 transportScope];
    (*(void (**)(uint64_t, id, void *, void))(v7 + 16))(v7, v10, v9, 0);
  }
}

void sub_100054BC8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    [v6 _clearPartiallyCreatedZoneIfNecessary];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304) + 16))();
  }
  else
  {
    uint64_t v7 = v6[38];
    os_log_type_t v8 = [v6 cloudKitScope];
    uint32_t v9 = [v8 transportScope];
    (*(void (**)(uint64_t, id, void *, void))(v7 + 16))(v7, v10, v9, 0);
  }
}

void sub_100054CA4(uint64_t a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = v5[38];
  if (a3)
  {
    (*(void (**)(void, void, void, uint64_t))(v6 + 16))(v5[38], 0, 0, a3);
  }
  else
  {
    uint64_t v7 = [v5 cloudKitScope];
    os_log_type_t v8 = [v7 transportScope];
    (*(void (**)(uint64_t, id, void *, void))(v6 + 16))(v6, v9, v8, 0);
  }
}

void sub_100054F84(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  os_log_type_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000550B0;
  v11[3] = &unk_1002781E8;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 72);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_1000550B0(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100053134();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        id v4 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        __int16 v20 = v4;
        __int16 v21 = 2112;
        id v22 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to save records %@: %@", buf, 0x16u);
      }
    }
    id v5 = [v2 domain];
    if ([v5 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v2 code] == (id)7)
      {

LABEL_23:
        os_log_type_t v8 = +[CPLErrors cplErrorWithCode:35, v2, @"Rate limited or throttled: %@", v2 underlyingError description];
        goto LABEL_24;
      }
      id v18 = [v2 code];

      if (v18 == (id)2008) {
        goto LABEL_23;
      }
    }
    else
    {
    }
    id v17 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    os_log_type_t v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v2, v17, @"Failed to save records %@: %@", *(void *)(a1 + 48), v2 withRequestUUIDs description];

LABEL_24:
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
    goto LABEL_25;
  }
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100053134();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      __int16 v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Saved records %@", buf, 0xCu);
    }
  }
  os_log_type_t v8 = [*(id *)(a1 + 64) URL];
  if (!_CPLSilentLogging)
  {
    id v9 = sub_100053134();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) scope];
      uint64_t v11 = objc_msgSend(v8, "cpl_redactedShareURL");
      *(_DWORD *)buf = 138412546;
      __int16 v20 = v10;
      __int16 v21 = 2114;
      id v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Share URL for %@ after publishing: %{public}@", buf, 0x16u);
    }
  }
  id v12 = [*(id *)(a1 + 32) scope];
  id v13 = [v12 copy];

  [v13 updateWithCKShare:*(void *)(a1 + 64) currentUserID:*(void *)(a1 + 72)];
  if (*(void *)(a1 + 80)) {
    objc_msgSend(v13, "updateWithRootCKRecord:");
  }
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 288);
  *(void *)(v14 + 288) = v13;
  id v16 = v13;

  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
LABEL_25:
}

void sub_10005548C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    os_log_type_t v8 = (id *)(a1 + 32);
    id v7 = *(void **)(a1 + 32);
    id v41 = 0;
    unsigned __int8 v9 = [v7 shouldRunOperationsWithError:&v41];
    id v10 = v41;
    if ((v9 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_17:

      goto LABEL_18;
    }
    uint64_t v11 = [*v8 identification];
    id v12 = [v11 shareRecordName];
    if (!v12) {
      sub_1001C83E8((id *)(a1 + 32), a1);
    }
    id v34 = v12;
    if ([v12 isEqualToString:CKRecordNameZoneWideShare])
    {
      id v13 = objc_alloc((Class)CKShare);
      uint64_t v14 = [*v8 cloudKitScope];
      id v15 = [v14 zoneID];
      id v16 = [v13 initWithRecordZoneID:v15];

      id v17 = 0;
    }
    else
    {
      id v18 = [*v8 scope];
      uint64_t v19 = *((void *)*v8 + 39);
      __int16 v20 = [*v8 cloudKitScope];
      __int16 v21 = [v20 zone];
      id v17 = [v18 rootRecordUsingTempCKAssetURL:v19 inZone:v21];

      if (!v17)
      {
        uint64_t v32 = *(void *)(a1 + 40);
        id v16 = +[CPLErrors unknownError];
        (*(void (**)(uint64_t, void, id))(v32 + 16))(v32, 0, v16);
LABEL_16:

        goto LABEL_17;
      }
      id v22 = [*v8 cloudKitScope];
      uint64_t v14 = [v22 recordIDWithRecordName:v34];

      id v16 = [objc_alloc((Class)CKShare) initWithRootRecord:v17 shareID:v14];
    }

    long long v23 = [*v8 scope];
    uint64_t v24 = [v11 shareTypeForScopeChange:v23];

    if (!v24) {
      sub_1001C84FC((id *)(a1 + 32), a1);
    }
    id v33 = v11;
    [v16 setObject:v24 forKeyedSubscript:CKShareTypeKey];
    uint64_t v25 = [*v8 scope];
    [v25 updateCKShare:v16];

    id v26 = [*v8 scope];
    id v27 = [v26 share];
    id v28 = [v27 participants];

    if ([v16 publicPermission] == (id)1 && objc_msgSend(v28, "count"))
    {
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_100055848;
      v35[3] = &unk_100278238;
      id v29 = *(void **)(a1 + 32);
      id v40 = *(id *)(a1 + 40);
      id v30 = v16;
      uint64_t v31 = *(void *)(a1 + 32);
      id v36 = v30;
      uint64_t v37 = v31;
      id v38 = v17;
      id v39 = v5;
      [v29 fetchShareParticipantsForParticipants:v28 completionBlock:v35];
    }
    else
    {
      [*(id *)(a1 + 32) _createCKShare:v16 andRootRecord:v17 currentUserID:v5 withCompletionHandler:*(void *)(a1 + 40)];
    }

    uint64_t v11 = v33;
    goto LABEL_16;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_18:
}

void sub_100055848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = v6;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(a1 + 32) addParticipant:*(void *)(*((void *)&v12 + 1) + 8 * (void)v11)];
          uint64_t v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
    [*(id *)(a1 + 40) _createCKShare:*(void *)(a1 + 32) andRootRecord:*(void *)(a1 + 48) currentUserID:*(void *)(a1 + 56) withCompletionHandler:*(void *)(a1 + 64)];
  }
}

void sub_100055BD8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100055CCC;
  v13[3] = &unk_100278288;
  void v13[4] = v8;
  id v14 = v7;
  id v9 = *(id *)(a1 + 48);
  id v15 = v6;
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v18 = v10;
  id v16 = *(id *)(a1 + 40);
  id v11 = v6;
  id v12 = v7;
  [v8 dispatchAsync:v13];
}

void sub_100055CCC(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  uint64_t v3 = [*(id *)(a1 + 32) identification];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 296);
  *(void *)(v4 + 296) = v3;

  if (!v2)
  {
    id v11 = [*(id *)(a1 + 48) firstObject];
    id v12 = v11;
    if (v11)
    {
      long long v13 = [v11 zoneID];
      id v14 = [v13 databaseScope];

      if (!v14 || v14 == *(id *)(a1 + 72))
      {
        if (!_CPLSilentLogging)
        {
          id v15 = sub_100053134();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            id v16 = [*(id *)(a1 + 56) zone];
            id v39 = [*(id *)(a1 + 56) zone];
            id v38 = [v39 zoneID];
            id v17 = [v38 databaseScope];
            uint64_t v18 = [v12 zoneID];
            id v19 = [v18 databaseScope];
            __int16 v20 = [*(id *)(a1 + 32) scope];
            *(_DWORD *)buf = 138413314;
            id v41 = v16;
            __int16 v42 = 2048;
            id v43 = v17;
            __int16 v44 = 2112;
            id v45 = v12;
            __int16 v46 = 2048;
            id v47 = v19;
            __int16 v48 = 2112;
            uint64_t v49 = v20;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Created from %@ (%ld) to new zone %@ (%ld) for %@", buf, 0x34u);
          }
        }
        __int16 v21 = -[CPLCloudKitScope initWithZone:options:]([CPLCloudKitScope alloc], "initWithZone:options:", v12, [*(id *)(a1 + 56) options]);
        [*(id *)(a1 + 32) resetCloudKitScope:v21];
        uint64_t v22 = [*(id *)(a1 + 32) identification];
        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = *(void **)(v23 + 296);
        *(void *)(v23 + 296) = v22;

        uint64_t v25 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
        goto LABEL_33;
      }
      if (!_CPLSilentLogging)
      {
        uint64_t v35 = sub_100053134();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          id v36 = [*(id *)(a1 + 32) scope];
          uint64_t v37 = *(void **)(a1 + 72);
          *(_DWORD *)buf = 138412802;
          id v41 = v36;
          __int16 v42 = 2048;
          id v43 = v37;
          __int16 v44 = 2048;
          id v45 = v14;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "While trying to create zone for %@, expected database scope was %ld and CloudKit returned %ld", buf, 0x20u);
        }
      }
      uint64_t v33 = *(void *)(a1 + 64);
      CFStringRef v34 = @"CloudKit returned a wrong database scope";
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v31 = sub_100053134();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          uint64_t v32 = [*(id *)(a1 + 32) scope];
          *(_DWORD *)buf = 138412290;
          id v41 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "While trying to create zone for %@, CloudKit returned no errors but also returned no saved zones", buf, 0xCu);
        }
      }
      uint64_t v33 = *(void *)(a1 + 64);
      CFStringRef v34 = @"CloudKit returned no zones with no errors";
    }
    __int16 v21 = +[CPLErrors cplErrorWithCode:150 description:v34];
    uint64_t v25 = *(void (**)(void))(v33 + 16);
LABEL_33:
    v25();

    goto LABEL_34;
  }
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100053134();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = [*(id *)(a1 + 32) cloudKitScope];
      id v8 = [v7 zoneID];
      id v9 = [*(id *)(a1 + 32) scope];
      *(_DWORD *)buf = 138412802;
      id v41 = v8;
      __int16 v42 = 2112;
      id v43 = v9;
      __int16 v44 = 2112;
      id v45 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create zone %@ for %@: %@", buf, 0x20u);
    }
  }
  uint64_t v10 = [v2 domain];
  if ([v10 isEqualToString:CKUnderlyingErrorDomain])
  {
    if ([v2 code] == (id)7)
    {

LABEL_20:
      id v12 = +[CPLErrors cplErrorWithCode:35, v2, @"Rate limited or throttled: %@", v2 underlyingError description];
      goto LABEL_21;
    }
    id v30 = [v2 code];

    if (v30 == (id)2008) {
      goto LABEL_20;
    }
  }
  else
  {
  }
  id v26 = +[CPLCloudKitErrors realErrorForError:v2];
  id v27 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
  id v28 = [*(id *)(a1 + 32) cloudKitScope];
  id v29 = [v28 zoneID];
  id v12 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v26, v27, @"Failed to create zone %@: %@", v29, v2 withRequestUUIDs description];

LABEL_21:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_34:
}

id sub_1000562D8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) _createCKShareWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

void sub_1000563C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) copy];
    [v4 setShare:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_1000564F0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return _[*(id *)(a1 + 32) _createCKShareWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

void sub_1000568E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v17 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) cloudKitScope];
    uint64_t v10 = [v9 zoneID];
    id v11 = objc_msgSend(v10, "cpl_zoneName");
    id v12 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v7, v17, @"Error fetching %@ from %@", v8, v11 withRequestUUIDs description];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_9;
  }
  id v12 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (v12)
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v14 = *(void *)(a1 + 48);
    if (isKindOfClass)
    {
      (*(void (**)(void, void *, void))(v14 + 16))(*(void *)(a1 + 48), v12, 0);
      goto LABEL_9;
    }
    id v16 = +[CPLErrors cplErrorWithCode:38, @"%@ is not a CKShare", *(void *)(a1 + 32) description];
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v16);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = +[CPLErrors cplErrorWithCode:38, @"Scope has no %@ CKShare to update", *(void *)(a1 + 32) description];
    (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v16);
  }

LABEL_9:
}

void sub_100056B7C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    id v19 = 0;
    unsigned __int8 v7 = [v6 shouldRunOperationsWithError:&v19];
    id v8 = v19;
    if (v7)
    {
      id v9 = objc_alloc((Class)CKModifyRecordsOperation);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v10 = +[NSArray arrayWithObjects:&v20 count:1];
      id v11 = [v9 initWithRecordsToSave:v10 recordIDsToDelete:0];

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100056D60;
      v15[3] = &unk_100278300;
      id v12 = *(void **)(a1 + 40);
      v15[4] = *(void *)(a1 + 32);
      id v16 = v12;
      id v18 = *(id *)(a1 + 48);
      id v17 = v5;
      [v11 setModifyRecordsCompletionBlock:v15];
      long long v13 = *(void **)(a1 + 32);
      uint64_t v14 = [v13 cloudKitScope];
      [v13 launchOperation:v11 type:CPLCloudKitOperationTypeForScope(v14) withContext:0];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
}

void sub_100056D60(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100056E64;
  v11[3] = &unk_1002779F0;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 56);
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_100056E64(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v3 = sub_100053134();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        id v4 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        id v17 = v4;
        __int16 v18 = 2112;
        id v19 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to save record %@: %@", buf, 0x16u);
      }
    }
    id v5 = [v2 domain];
    if ([v5 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v2 code] == (id)7)
      {

LABEL_21:
        id v8 = +[CPLErrors cplErrorWithCode:35, v2, @"Rate limited or throttled: %@", v2 underlyingError description];
        goto LABEL_22;
      }
      id v15 = [v2 code];

      if (v15 == (id)2008) {
        goto LABEL_21;
      }
    }
    else
    {
    }
    id v14 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v2, v14, @"Failed to save recor %@: %@", *(void *)(a1 + 48), v2 withRequestUUIDs description];

LABEL_22:
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    goto LABEL_23;
  }
  if (!_CPLSilentLogging)
  {
    id v6 = sub_100053134();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Saved records %@", buf, 0xCu);
    }
  }
  id v8 = [*(id *)(a1 + 48) URL];
  if (!_CPLSilentLogging)
  {
    id v9 = sub_100053134();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) scope];
      id v11 = objc_msgSend(v8, "cpl_redactedShareURL");
      *(_DWORD *)buf = 138412546;
      id v17 = v10;
      __int16 v18 = 2114;
      id v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Share URL for %@ after publishing: %{public}@", buf, 0x16u);
    }
  }
  id v12 = [*(id *)(a1 + 32) scope];
  id v13 = [v12 copy];

  [v13 updateWithCKShare:*(void *)(a1 + 48) currentUserID:*(void *)(a1 + 64)];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();

LABEL_23:
}

id sub_100057E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return (id)v5();
  }
  else
  {
    [*(id *)(a1 + 32) _modifyParticipantsOfCKShare:*(void *)(a1 + 40) newParticipants:a2];
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    return [v7 _uploadCKShare:v8 completionHandler:v9];
  }
}

void sub_100057F64(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[36];
  if (!v9 || v5)
  {
    if (v5)
    {
      (*(void (**)(void, void, id))(v7 + 16))(v6[36], 0, v5);
    }
    else
    {
      uint64_t v8 = +[CPLErrors unknownError];
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
    }
  }
  else
  {
    [v6 _updateCKShare:v9 completionHandler:v6[36]];
  }
}

void sub_10005808C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.scopecreation");
  uint64_t v3 = qword_1002CE650;
  qword_1002CE650 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000580CC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100058400(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v5 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000584F0;
    v9[3] = &unk_100276128;
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 32);
    id v10 = v6;
    uint64_t v11 = v7;
    [v2 _acceptShareWithURL:v6 currentUserID:a2 completionHandler:v9];
  }
  else
  {
    uint64_t v8 = *(void (**)(void))(v2[39] + 16);
    v8();
  }
}

void sub_1000584F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_1000588A8();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v5 = objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL");
        *(_DWORD *)buf = 138543618;
        uint64_t v22 = v5;
        __int16 v23 = 2112;
        id v24 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to accept share at %{public}@: %@", buf, 0x16u);
      }
    }
    id v6 = [v3 domain];
    if ([v6 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v3 code] == (id)7)
      {

LABEL_23:
        id v13 = [v3 localizedDescription];
        uint64_t v14 = +[CPLErrors cplErrorWithCode:35, v3, @"Rate limited or throttled: %@", v13 underlyingError description];
        goto LABEL_24;
      }
      id v20 = [v3 code];

      if (v20 == (id)2008) {
        goto LABEL_23;
      }
    }
    else
    {
    }
    id v13 = [*(id *)(a1 + 40) lastOperationRequestUUIDs];
    uint64_t v14 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v3 withRequestUUIDs:v13 description:@"Failed to accept share URL"];
LABEL_24:
    id v12 = (void *)v14;

    (*(void (**)(void, void, void, void, void *))(*(void *)(*(void *)(a1 + 40) + 312) + 16))(*(void *)(*(void *)(a1 + 40) + 312), 0, 0, 0, v12);
    goto LABEL_25;
  }
  if ([*(id *)(*(void *)(a1 + 40) + 280) isCoherent])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v7 = sub_1000588A8();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL");
        *(_DWORD *)buf = 138543362;
        uint64_t v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Accepted share from shareURL %{public}@", buf, 0xCu);
      }
    }
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(v9 + 312);
    uint64_t v11 = *(void *)(v9 + 272);
    id v12 = [*(id *)(v9 + 280) transportScope];
    (*(void (**)(uint64_t, uint64_t, void *, void, void))(v10 + 16))(v10, v11, v12, *(void *)(*(void *)(a1 + 40) + 304), 0);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v15 = sub_1000588A8();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL");
        *(_DWORD *)buf = 138543362;
        uint64_t v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Accepted share from shareURL %{public}@ is incoherent (CloudKit bug)", buf, 0xCu);
      }
    }
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void *)(v17 + 312);
    id v12 = [*(id *)(v17 + 272) scopeIdentifier];
    id v19 = +[CPLErrors cplErrorWithCode:38, @"CloudKit scope for %@ is incoherent", v12 description];
    (*(void (**)(uint64_t, void, void, void, void *))(v18 + 16))(v18, 0, 0, 0, v19);
  }
LABEL_25:
}

id sub_1000588A8()
{
  if (qword_1002CE658 != -1) {
    dispatch_once(&qword_1002CE658, &stru_1002784F8);
  }
  uint64_t v0 = (void *)qword_1002CE660;
  return v0;
}

void sub_100058BA0(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_5:
    v5();
    goto LABEL_7;
  }
  if (([*(id *)(*(void *)(a1 + 32) + 280) options] & 2) == 0)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  [*(id *)(a1 + 32) _acceptShareWithMetadata:v6 currentUserID:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
LABEL_7:
}

void sub_100058F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100058F3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100058F4C(uint64_t a1)
{
}

void sub_100058F54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(a1 + 32) processErrorIfNeeded:v9];
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v10 = sub_1000588A8();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = objc_msgSend(v7, "cpl_redactedShareURL");
        int v14 = 138543618;
        id v15 = v11;
        __int16 v16 = 2112;
        id v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch share metadata for %{public}@: %@", (uint8_t *)&v14, 0x16u);
      }
    }
    id v12 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v13 = a4;
  }
  else
  {
    id v12 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v13 = a3;
  }
  objc_storeStrong(v12, v13);
}

void sub_1000590A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100059198;
  v8[3] = &unk_100278410;
  void v8[4] = v4;
  id v9 = v3;
  uint64_t v13 = *(void *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v7;
  long long v12 = v7;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  [v4 dispatchAsync:v8];
}

void sub_100059198(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v3 = (void *)v2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  if (!v4) {
    id v4 = (void *)v2;
  }
  id v5 = v4;
  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share];
  long long v7 = [v6 recordID];
  id v8 = [v7 zoneID];

  if (!v5)
  {
    id v10 = [*(id *)(a1 + 32) controller];
    unsigned int v11 = [v10 shouldIgnoreZoneWithZoneID:v8];

    if (v11)
    {
      long long v12 = objc_msgSend(v8, "cpl_zoneName");
      uint64_t v13 = +[CPLErrors cplErrorWithCode:38, @"Zone %@ is not supported by this engine", v12 description];

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      goto LABEL_43;
    }
    if (!_CPLSilentLogging)
    {
      int v14 = sub_1000588A8();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) rootRecord];
        __int16 v16 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
        *(_DWORD *)buf = 138412546;
        id v68 = v15;
        __int16 v69 = 2114;
        id v70 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Fetched share metadata root record %@ for %{public}@", buf, 0x16u);
      }
    }
    id v17 = [objc_alloc((Class)CKRecordZone) initWithZoneID:v8];
    uint64_t v18 = [[CPLCloudKitScope alloc] initWithZone:v17];
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = *(void **)(v19 + 280);
    *(void *)(v19 + 280) = v18;

    if (([*(id *)(*(void *)(a1 + 32) + 280) isCoherent] & 1) == 0
      && !_CPLSilentLogging)
    {
      __int16 v21 = sub_1000588A8();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
        id v23 = [v8 databaseScope];
        id v24 = [*(id *)(*(void *)(a1 + 32) + 280) databaseScope];
        *(_DWORD *)buf = 138412802;
        id v68 = v22;
        __int16 v69 = 2048;
        id v70 = v23;
        __int16 v71 = 2048;
        uint64_t v72 = (uint64_t)v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@ database scope is %ld but we expected %ld", buf, 0x20u);
      }
    }
    uint64_t v25 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share];
    if (v25)
    {
      uint64_t v26 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) rootRecord];
      uint64_t v27 = [v25 recordID];
      id v28 = (void *)v27;
      if (v26)
      {
        v65[0] = v27;
        v66[0] = v25;
        id v29 = [v26 recordID];
        v65[1] = v29;
        v66[1] = v26;
        id v30 = +[NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:2];
      }
      else
      {
        uint64_t v63 = v27;
        v64 = v25;
        id v30 = +[NSDictionary dictionaryWithObjects:&v64 forKeys:&v63 count:1];
      }

      uint64_t v49 = [*(id *)(a1 + 32) controller];
      long long v61 = v30;
      id v50 = [v49 scopeTypeForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) proposedScopeType:0 fetchedRecords:v30 currentUserID:*(void *)(a1 + 56)];

      if (v50)
      {
        id v62 = v17;
        if (v50 == [*(id *)(*(void *)(a1 + 32) + 272) scopeType])
        {
          uint64_t v31 = 0;
        }
        else
        {
          if (!_CPLSilentLogging)
          {
            long long v54 = sub_1000588A8();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              long long v59 = *(void **)(*(void *)(a1 + 32) + 272);
              long long v60 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
              uint64_t v55 = +[CPLScopeChange descriptionForScopeType:v50];
              *(_DWORD *)buf = 138412802;
              id v68 = v59;
              __int16 v69 = 2112;
              id v70 = v60;
              __int16 v71 = 2112;
              uint64_t v72 = v55;
              id v56 = (void *)v55;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Trying to accept %@ but the metadata at %@ is for a scope with scope type %@", buf, 0x20u);
            }
          }
          id v57 = +[CPLScopeChange descriptionForScopeType:v50];
          long long v58 = +[CPLScopeChange descriptionForScopeType:](CPLScopeChange, "descriptionForScopeType:", [*(id *)(*(void *)(a1 + 32) + 272) scopeType]);
          uint64_t v31 = +[CPLErrors cplErrorWithCode:50, @"Accepting a %@ share with a %@ scope", v57, v58 description];
        }
        id v30 = v61;
        id v17 = v62;
      }
      else
      {
        if (!_CPLSilentLogging)
        {
          v51 = sub_1000588A8();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            long long v52 = *(void **)(*(void *)(a1 + 32) + 272);
            long long v53 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
            *(_DWORD *)buf = 138412546;
            id v68 = v52;
            id v30 = v61;
            __int16 v69 = 2112;
            id v70 = v53;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Trying to accept %@ but the metadata at %@ does not have sufficient information to accept it", buf, 0x16u);
          }
        }
        uint64_t v31 = +[CPLErrors cplErrorWithCode:38 description:@"Failed to identify share scope type"];
      }

      if (v31) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v31 = +[CPLErrors cplErrorWithCode:150 description:@"Failed to get share from URL"];
      if (v31)
      {
LABEL_41:
        __int16 v48 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
        goto LABEL_42;
      }
    }
    id v32 = objc_alloc((Class)CPLEngineScope);
    uint64_t v33 = [*(id *)(*(void *)(a1 + 32) + 272) scopeIdentifier];
    id v34 = objc_msgSend(v32, "initWithScopeIdentifier:scopeType:", v33, objc_msgSend(*(id *)(*(void *)(a1 + 32) + 272), "scopeType"));
    uint64_t v35 = *(void *)(a1 + 32);
    id v36 = *(void **)(v35 + 288);
    *(void *)(v35 + 288) = v34;

    uint64_t v37 = [*(id *)(a1 + 32) controller];
    uint64_t v38 = [v37 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) engineScope:*(void *)(*(void *)(a1 + 32) + 288)];
    uint64_t v39 = *(void *)(a1 + 32);
    id v40 = *(void **)(v39 + 296);
    *(void *)(v39 + 296) = v38;

    uint64_t v41 = [*(id *)(*(void *)(a1 + 32) + 296) cloudKitScope];
    uint64_t v42 = *(void *)(a1 + 32);
    id v43 = *(void **)(v42 + 280);
    *(void *)(v42 + 280) = v41;

    __int16 v44 = *(void **)(a1 + 32);
    id v45 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share];
    [v44 _updateScopeAndFlagsWithCKRecord:v45 currentUserID:*(void *)(a1 + 56)];

    __int16 v46 = *(void **)(a1 + 32);
    id v47 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) rootRecord];
    [v46 _updateScopeAndFlagsWithCKRecord:v47 currentUserID:*(void *)(a1 + 56)];

    __int16 v48 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
LABEL_42:
    v48();

    goto LABEL_43;
  }
  if (!_CPLSilentLogging)
  {
    id v9 = sub_1000588A8();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v68 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch share metadata: %@", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_43:
}

void sub_100059B10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v4 = *(void **)(a1 + 32);
    id v19 = 0;
    unsigned __int8 v5 = [v4 shouldRunOperationsWithError:&v19];
    id v6 = v19;
    if (v5)
    {
      id v7 = objc_alloc((Class)CKAcceptSharesOperation);
      uint64_t v20 = *(void *)(a1 + 40);
      id v8 = +[NSArray arrayWithObjects:&v20 count:1];
      id v9 = [v7 initWithShareMetadatas:v8];

      v17[0] = 0;
      v17[1] = v17;
      v17[2] = 0x3032000000;
      v17[3] = sub_100058F3C;
      void v17[4] = sub_100058F4C;
      id v18 = 0;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100059D8C;
      v14[3] = &unk_100278460;
      uint64_t v10 = *(void *)(a1 + 32);
      __int16 v16 = v17;
      v14[4] = v10;
      id v15 = *(id *)(a1 + 48);
      [v9 setPerShareCompletionBlock:v14];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10005A020;
      v11[3] = &unk_1002784B0;
      void v11[4] = *(void *)(a1 + 32);
      uint64_t v13 = v17;
      id v12 = *(id *)(a1 + 56);
      [v9 setAcceptSharesCompletionBlock:v11];
      [*(id *)(a1 + 32) launchOperation:v9 type:0 withContext:0];

      _Block_object_dispose(v17, 8);
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
}

void sub_100059D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059D8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a4);
    if (!_CPLSilentLogging)
    {
      uint64_t v10 = sub_1000588A8();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v19 = 138412290;
        id v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to accept share %@", (uint8_t *)&v19, 0xCu);
      }
    }
    goto LABEL_15;
  }
  if (!_CPLSilentLogging)
  {
    unsigned int v11 = sub_1000588A8();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 272);
      int v19 = 138412546;
      id v20 = v8;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Accepted share %@ for %@", (uint8_t *)&v19, 0x16u);
    }
  }
  uint64_t v13 = [(id)objc_opt_class() shareTypes];
  if (![v13 count]) {
    goto LABEL_13;
  }
  int v14 = [v8 objectForKeyedSubscript:CKShareTypeKey];
  if (v14)
  {

LABEL_13:
LABEL_14:
    [*(id *)(a1 + 32) _updateScopeAndFlagsWithCKRecord:v8 currentUserID:*(void *)(a1 + 40)];
    goto LABEL_15;
  }
  id v15 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v16 = [v15 BOOLForKey:@"CPLDisableWorkaroundFor94171958"];

  if (v16) {
    goto LABEL_14;
  }
  if (!_CPLSilentLogging)
  {
    id v17 = sub_1000588A8();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = [v8 recordID];
      int v19 = 138412290;
      id v20 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Share type is missing on %@ - will just use it to update participants", (uint8_t *)&v19, 0xCu);
    }
  }
  [*(id *)(a1 + 32) _updateScopeParticipantsWithCKShare:v8 currentUserID:*(void *)(a1 + 40)];
LABEL_15:
}

void sub_10005A020(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10005A0E4;
  v8[3] = &unk_100278488;
  void v8[4] = v4;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  [v4 dispatchAsync:v8];
}

void sub_10005A0E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v3 = (void *)v2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (!v4) {
    id v4 = (void *)v2;
  }
  id v5 = v4;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000588A8();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 138412290;
        id v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to accept shares %@", (uint8_t *)&v8, 0xCu);
      }
    }
    long long v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    long long v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v7();
}

void sub_10005A340(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  uint64_t v3 = qword_1002CE660;
  qword_1002CE660 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10005A5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005A5CC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  int v8 = (id *)(a1 + 40);
  id v9 = a5;
  id v10 = a3;
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  [WeakRetained hash];
  kdebug_trace();

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10005A914()
{
  if (qword_1002CE670 != -1) {
    dispatch_once(&qword_1002CE670, &stru_100278658);
  }
  uint64_t v0 = (void *)qword_1002CE678;
  return v0;
}

id sub_10005AD44(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _downloadBatchWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16))();
  }
}

void sub_10005B788(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2B8], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Block_object_dispose(&STACK[0x328], 8);
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005B814(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005B824(uint64_t a1)
{
}

void sub_10005B82C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      uint64_t v11 = ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      id v12 = *(void **)(a1 + 32);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10005BC8C;
      v25[3] = &unk_100275EC8;
      v25[4] = v12;
      v25[5] = v11;
      [v12 dispatchAsync:v25];
      if (!_CPLSilentLogging)
      {
        uint64_t v13 = sub_10005A914();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v27 = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Pulled change %@", buf, 0xCu);
        }
      }
      id v24 = 0;
      int v14 = objc_msgSend(v8, "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:", &v24, *(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(a1 + 48));
      id v15 = v24;
      if (v14)
      {
        if ([*(id *)(a1 + 56) supportsDownloadOfChange:v14 scopeProvider:*(void *)(a1 + 32)])
        {
          if ([v14 inExpunged])
          {
            unsigned __int8 v16 = objc_opt_class();
            id v17 = [v14 scopedIdentifier];
            id v18 = [v16 newDeleteChangeWithScopedIdentifier:v17];

            int v14 = v18;
          }
          [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) addRecord:v14];
          goto LABEL_27;
        }
        if (_CPLSilentLogging)
        {
LABEL_27:

          goto LABEL_28;
        }
        __int16 v21 = sub_10005A914();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Ignoring unsupported %@", buf, 0xCu);
        }
      }
      else
      {
        id v20 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        if (!v20) {
          id v20 = *(void **)(*(void *)(a1 + 32) + 320);
        }
        __int16 v21 = v20;
        uint64_t v22 = [*(id *)(a1 + 56) updatedScopeChangeFromScopeChange:v21 currentUserID:*(void *)(a1 + 48) withCKRecord:v8];
        if (v22) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v22);
        }
        id v23 = [*(id *)(a1 + 56) updatedFlagsFromCKRecord:v8];
        if (v23) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v23);
        }

        int v14 = 0;
      }

      goto LABEL_27;
    }
  }
  else if (!_CPLSilentLogging)
  {
    int v19 = sub_10005A914();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v27 = v7;
      __int16 v28 = 2112;
      id v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to get record %@ when fetching changes: %@", buf, 0x16u);
    }
  }
LABEL_28:
}

void sub_10005BBC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    if (!*v17)
    {
      int v19 = sub_10005A914();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = [v18 reason];
        LODWORD(buf) = 138412546;
        *(void *)((char *)&buf + 4) = v20;
        WORD6(buf) = 2112;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Translating CKRecord to record raised an exception: %@\nCKRecord = %@", (uint8_t *)&buf, 0x16u);
      }
    }

    objc_end_catch();
    JUMPOUT(0x10005BB78);
  }
  _Unwind_Resume(a1);
}

id sub_10005BC8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(a1 + 40) / 200.0];
}

void sub_10005BCAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v8 = ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
    id v9 = *(void **)(a1 + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10005BED8;
    v20[3] = &unk_100275EC8;
    v20[4] = v9;
    v20[5] = v8;
    [v9 dispatchAsync:v20];
    id v10 = +[CKRecord cpl_recordChangeClassForRecordType:v6];
    if (v10) {
      goto LABEL_12;
    }
    uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    if (!v11) {
      uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 320);
    }
    id v12 = v11;
    uint64_t v13 = [*(id *)(a1 + 40) updatedScopeChangeFromScopeChange:v12 currentUserID:*(void *)(a1 + 48) withDeletedCKRecordID:v5 recordType:v6];
    if (v13) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v13);
    }
    int v14 = [*(id *)(a1 + 40) updatedFlagsFromDeletedCKRecordID:v5 recordType:v6];
    if (v14)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v14);
    }
    else if (!v13)
    {
      id v10 = (objc_class *)objc_opt_class();
LABEL_11:

      if (!v10)
      {
LABEL_13:
        goto LABEL_14;
      }
LABEL_12:
      id v15 = objc_alloc((Class)CPLScopedIdentifier);
      uint64_t v16 = *(void *)(a1 + 56);
      id v17 = [v5 recordName];
      id v18 = [v15 initWithScopeIdentifier:v16 identifier:v17];

      id v19 = [(objc_class *)v10 newDeleteChangeWithScopedIdentifier:v18];
      [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) addRecord:v19];

      goto LABEL_13;
    }
    id v10 = 0;
    goto LABEL_11;
  }
LABEL_14:
}

id sub_10005BED8(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(a1 + 40) / 200.0];
}

void sub_10005BEF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v5 + 24))
  {
    *(unsigned char *)(v5 + 24) = 1;
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10005BFC4;
    v7[3] = &unk_100278598;
    void v7[4] = v6;
    id v8 = v3;
    long long v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    [v6 dispatchAsync:v7];
  }
}

void sub_10005BFC4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v13 = (id)v2;
  if (v3)
  {
    id v4 = v3;
LABEL_4:
    uint64_t v5 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v6 = [v4 localizedDescription];
    id v7 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v4, v5, @"Error downloading batch: %@", v6 withRequestUUIDs description];

    goto LABEL_5;
  }
  id v4 = +[CPLCloudKitErrors realErrorForError:v2];
  if (v4) {
    goto LABEL_4;
  }
  id v7 = 0;
LABEL_5:
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    id v8 = +[NSKeyedArchiver cpl_archivedDataWithRootObject:](NSKeyedArchiver, "cpl_archivedDataWithRootObject:");
    if (v7)
    {
LABEL_7:
      long long v9 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    id v8 = 0;
    if (v7) {
      goto LABEL_7;
    }
  }
  if (![*(id *)(*(void *)(a1 + 32) + 296) count]) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = [v10 currentFetchRecordZoneChangesOperation];
  id v12 = [v11 recordZoneIDsWithSyncObligations];
  long long v9 = [v10 _processFinalSyncObligationsWithZoneIDs:v12];

LABEL_11:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  [*(id *)(a1 + 32) setCurrentFetchRecordZoneChangesOperation:0];
}

void sub_10005C1AC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5[36])
    {
      id v6 = [v5 currentFetchRecordZoneChangesOperation];
      id v7 = [v6 recordZoneIDsWithSyncObligations];
    }
    else
    {
      id v7 = 0;
    }
    if (!_CPLSilentLogging)
    {
      long long v9 = sub_10005A914();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        int v19 = 134218240;
        id v20 = v10;
        __int16 v21 = 2048;
        id v22 = [v7 count];
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fetch operation got a batch and counted %lu change events (%lu sync obligations)", (uint8_t *)&v19, 0x16u);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    [*(id *)(a1 + 32) sendProgressBatch:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) updatedScopeChange:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) updatedFlags:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) updatedSyncAnchor:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) zoneIDsWithSyncObligations:v7];
    id v11 = objc_alloc_init((Class)CPLChangeBatch);
    uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = *(void *)(*(void *)(a1 + 72) + 8);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = 0;

    uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0;

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    if (!_CPLSilentLogging)
    {
      id v18 = sub_10005A914();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 138412290;
        id v20 = v4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Updated sync anchor: %@", (uint8_t *)&v19, 0xCu);
      }
    }
  }
}

void sub_10005C3F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    if ([v5 isEqual:a1[4]])
    {
      id v7 = (void *)a1[5];
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_10005C56C;
      v10[3] = &unk_100275EA0;
      void v10[4] = v7;
      [v7 dispatchAsync:v10];
      (*(void (**)(void))(a1[6] + 16))();
    }
    else if (!_CPLSilentLogging)
    {
      id v8 = sub_10005A914();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v12 = v5;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Received zoneID %@ expected zoneID %@", buf, 0x16u);
      }
    }
  }
}

id sub_10005C56C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_10005C574(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    if ([v11 isEqual:a1[4]])
    {
      if (v14)
      {
        objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a6);
      }
      else
      {
        if (a5) {
          sub_1001C89D0((uint64_t)a1);
        }
        id v17 = (void *)a1[5];
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        void v18[2] = sub_10005C750;
        v18[3] = &unk_100275EA0;
        v18[4] = v17;
        [v17 dispatchAsync:v18];
        (*(void (**)(void))(a1[6] + 16))();
      }
      *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = a5;
    }
    else if (!_CPLSilentLogging)
    {
      id v15 = sub_10005A914();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v20 = v11;
        __int16 v21 = 2112;
        uint64_t v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received zoneID %@ expected zoneID %@", buf, 0x16u);
      }
    }
  }
}

id sub_10005C750(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_10005C878(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.downloadbatch");
  uint64_t v3 = qword_1002CE678;
  qword_1002CE678 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10005C90C(id a1)
{
  uint64_t v1 = objc_alloc_init(CPLCloudKitCoordinator);
  uint64_t v2 = qword_1002CE680;
  qword_1002CE680 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10005CB3C(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1002CE690 = [v1 BOOLForKey:@"CPLUsesSandboxEnvironment"];
}

id sub_10005CE3C()
{
  if (qword_1002CE6B0 != -1) {
    dispatch_once(&qword_1002CE6B0, &stru_100278820);
  }
  uint64_t v0 = (void *)qword_1002CE6B8;
  return v0;
}

void sub_10005CE90(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) container];
  [v1 unregisterFromUploadRequestsWithMachServiceName:@"com.apple.aps.photos.cloud.datarepair"];
}

id sub_10005CEDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopWaitingForPushNotifications];
}

void sub_10005D170(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_10005D194(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v8 = [v5 recordID];
    uint64_t v9 = [v5 fieldName];
    uint64_t v10 = [v5 fileSignature];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10005D2C4;
    v11[3] = &unk_1002786C0;
    id v12 = v6;
    [WeakRetained provideCKAssetWithRecordID:v8 fieldName:v9 recordType:0 signature:v10 completionHandler:v11];
  }
  else
  {
    (*((void (**)(id, void, uint64_t))v6 + 2))(v6, 0, 2);
  }
}

uint64_t sub_10005D2C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3 == 2)
  {
    id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    id v9 = v5;
  }
  else if (a3 == 1)
  {
    id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    id v9 = v5;
  }
  else
  {
    if (a3) {
      goto LABEL_8;
    }
    id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    id v9 = v5;
  }
  id v5 = (id)v7();
  id v6 = v9;
LABEL_8:
  return _objc_release_x1(v5, v6);
}

id sub_10005D370(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 104) registerForAssetUploadRequests:*(void *)(a1 + 40) machServiceName:@"com.apple.aps.photos.cloud.datarepair"];
}

id sub_10005D384(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startWaitingForPushNotifications];
}

void *sub_10005D438(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 16) == result[5])
  {
    uint64_t v2 = result;
    uint64_t result = [*(id *)(v1 + 24) count];
    if (!result)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v3 = sub_10005CE3C();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No CloudKit clients registered - unregistering coordinator from system", v4, 2u);
        }
      }
      return [(id)v2[4] _coordinatorWontBeUsed];
    }
  }
  return result;
}

id sub_10005D5C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _waitForClientsIfNecessaryLocked];
}

id sub_10005D644(uint64_t a1)
{
  id result = [(id)objc_opt_class() shouldRegisterClient];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return [v3 _coordinatorWontBeUsed];
  }
  return result;
}

void sub_10005DC04(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 containsObject:*(void *)(a1 + 32)])
  {
    if ([v5 count] == (id)1) {
      [*(id *)(a1 + 40) addObject:v6];
    }
    else {
      [v5 removeObject:*(void *)(a1 + 32)];
    }
  }
}

id sub_10005DEA0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
  id result = [(id)objc_opt_class() shouldRegisterClient];
  if (result)
  {
    [*(id *)(a1 + 32) _addClientToInterestingZones:*(void *)(a1 + 40)];
    uint64_t v3 = *(void **)(a1 + 32);
    return _[v3 _coordinatorWillBeUsed];
  }
  return result;
}

id sub_10005E01C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result)
  {
    [*(id *)(a1 + 32) _removeClientFromInterestingZones:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(void *)(v4 + 64) == v3)
    {
      id v5 = [_CPLCloudKitUnregisteredClient alloc];
      id v6 = [*(id *)(a1 + 40) cloudKitClientIdentifier];
      id v7 = [*(id *)(a1 + 40) defaultSourceBundleIdentifier];
      id v8 = [(_CPLCloudKitUnregisteredClient *)v5 initWithCloudKitClientIdentifier:v6 defaultSourceBundleIdentifier:v7];
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 64);
      *(void *)(v9 + 64) = v8;

      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
    }
    [*(id *)(v4 + 24) removeObject:v3];
    [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _waitForClientsIfNecessaryLocked];
    id v11 = *(void **)(a1 + 32);
    return _[v11 _moveToBackgroundIfNecessary];
  }
  return result;
}

id sub_10005E19C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 32) count];
  if (!result)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 80) clientIsForeground];
    if (result)
    {
      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 80);
      return _[v3 setClientIsForeground:0];
    }
  }
  return result;
}

id sub_10005E380(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) containsObject:*(void *)(a1 + 40)];
  if (result)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    id result = [*(id *)(*(void *)(a1 + 32) + 32) containsObject:*(void *)(a1 + 40)];
    if (v3)
    {
      if ((result & 1) == 0)
      {
        [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
        uint64_t v4 = *(void **)(a1 + 32);
        return _[v4 _moveToForeground];
      }
    }
    else if (result)
    {
      [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
      id v5 = *(void **)(a1 + 32);
      return _[v5 _moveToBackgroundIfNecessary];
    }
  }
  return result;
}

void sub_10005EBE8(void *a1)
{
  if ([*(id *)(a1[4] + 24) containsObject:a1[5]])
  {
    uint64_t v2 = [*(id *)(a1[4] + 104) containerID];
    id v3 = [v2 environment];

    id v4 = objc_alloc((Class)NSMutableString);
    uint64_t v5 = [*(id *)(a1[4] + 104) containerIdentifier];
    id v6 = (void *)v5;
    CFStringRef v7 = @"Production";
    if (v3 == (id)2) {
      CFStringRef v7 = @"Sandbox";
    }
    id v9 = [v4 initWithFormat:@"Container: %@ Environment: %@", v5, v7];

    if ((unint64_t)[*(id *)(a1[4] + 24) count] >= 2) {
      objc_msgSend(v9, "appendFormat:", @" (%lu clients)", objc_msgSend(*(id *)(a1[4] + 24), "count"));
    }
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    id v8 = *(void (**)(void))(a1[6] + 16);
    v8();
  }
}

uint64_t sub_10005EE4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 64));
}

void sub_10005F030(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3 == 2)
  {
    uint64_t v5 = 2;
  }
  else
  {
    if (!a3)
    {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(a1 + 88);
  }
  [*(id *)(a1 + 32) _askNextClient:*(void *)(a1 + 40) toProvideCKAssetWithRecordID:*(void *)(a1 + 48) fieldName:*(void *)(a1 + 56) recordType:*(void *)(a1 + 64) signature:*(void *)(a1 + 72) bestResponseYet:v5 completionHandler:*(void *)(a1 + 80)];
LABEL_7:
}

void sub_10005F274(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
    id v4 = [v2 objectEnumerator];

    [*(id *)(a1 + 32) _askNextClient:v4 toProvideCKAssetWithRecordID:*(void *)(a1 + 40) fieldName:*(void *)(a1 + 48) recordType:*(void *)(a1 + 56) signature:*(void *)(a1 + 64) bestResponseYet:1 completionHandler:*(void *)(a1 + 72)];
  }
  else
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v3();
  }
}

void sub_10005F810(void *a1)
{
  uint64_t v3 = a1[4];
  id v2 = (void *)a1[5];
  if (v3 == v2[8])
  {
    id v4 = [v2 _clientsInterestedToReceiveAPushNotificationForZoneID:a1[6]];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v17;
      *(void *)&long long v6 = 138543618;
      long long v15 = v6;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          uint64_t v11 = a1[5];
          if (v10 != *(void **)(v11 + 64))
          {
            if (!_CPLSilentLogging)
            {
              id v12 = sub_10005CE3C();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                id v13 = [v10 cloudKitClientIdentifier];
                uint64_t v14 = a1[6];
                *(_DWORD *)buf = v15;
                __int16 v21 = v13;
                __int16 v22 = 2114;
                uint64_t v23 = v14;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Notifying client %{public}@ that %{public}@ has changes", buf, 0x16u);
              }
              uint64_t v11 = a1[5];
            }
            objc_msgSend(v10, "coordinatorDidReceiveAPushNotification:", v11, v15);
          }
        }
        id v7 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }
      while (v7);
    }
  }
}

void sub_10005FCAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005FD6C;
  v7[3] = &unk_1002787D8;
  id v8 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = v5;
  id v6 = v3;
  [v4 accountStatusWithCompletionHandler:v7];
}

void sub_10005FD6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) callDidFinish];
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(v6 + 104);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10005FEA4;
    v10[3] = &unk_1002787B0;
    void v10[4] = v6;
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = a2;
    +[CPLCallObserver observeAsyncCallOn:v7 selector:"accountInfoWithCompletionHandler:" block:v10];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v5)
    {
      (*(void (**)(void, void, void, id))(v8 + 16))(*(void *)(a1 + 48), 0, 0, v5);
    }
    else
    {
      uint64_t v9 = +[CPLErrors unknownError];
      (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v9);
    }
  }
}

void sub_10005FEA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10005FF64;
  v8[3] = &unk_100278788;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  [v4 accountInfoWithCompletionHandler:v8];
}

void sub_10005FF64(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 callDidFinish];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000604A8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.coordinator");
  uint64_t v3 = qword_1002CE6B8;
  qword_1002CE6B8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000604E8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL CPLCloudKitResourceInfoImageDimensionsReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1) {
        break;
      }
      if ((v6 >> 3) == 2)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0;
            long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
            goto LABEL_40;
          }
        }
        long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_40:
        *(void *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0;
        long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
        goto LABEL_40;
      }
    }
    long long v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id CPLSimplifiedStringFromClass(uint64_t a1)
{
  if (qword_1002CE6D0 != -1) {
    dispatch_once(&qword_1002CE6D0, &stru_100278840);
  }
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  char v8 = sub_100060CE0;
  id v9 = sub_100060CF0;
  id v10 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100060CF8;
  v4[3] = &unk_100278868;
  void v4[4] = &v5;
  void v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1002CE6C0, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100060C6C(id a1)
{
  uint64_t v1 = CPLCopyDefaultSerialQueueAttributes();
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.cpl.cloudkit.classnames", v1);
  uint64_t v3 = (void *)qword_1002CE6C0;
  qword_1002CE6C0 = (uint64_t)v2;

  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v5 = qword_1002CE6C8;
  qword_1002CE6C8 = (uint64_t)v4;
  _objc_release_x1(v4, v5);
}

uint64_t sub_100060CE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100060CF0(uint64_t a1)
{
}

void sub_100060CF8(uint64_t a1)
{
  uint64_t v2 = [(id)qword_1002CE6C8 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v5 = NSStringFromClass(*(Class *)(a1 + 40));
    id v11 = [v5 mutableCopy];

    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @"CPL", &stru_10027FEB8, 0, 0, objc_msgSend(v11, "length"));
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @"CK", &stru_10027FEB8, 0, 0, objc_msgSend(v11, "length"));
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @"Operation", &stru_10027FEB8, 0, 0, objc_msgSend(v11, "length"));
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @"Task", &stru_10027FEB8, 0, 0, objc_msgSend(v11, "length"));
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @"CloudKit", &stru_10027FEB8, 0, 0, objc_msgSend(v11, "length"));
    if ([v11 length])
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
      id v7 = v11;
      char v8 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v7;
    }
    else
    {
      uint64_t v9 = NSStringFromClass(*(Class *)(a1 + 40));
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      char v8 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }

    [(id)qword_1002CE6C8 setObject:v11 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_1000611B4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
  if (!v6)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
  }
  [v6 addObject:v5];
}

void sub_100061258(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 componentsJoinedByString:@"\n    "];
  [v4 appendFormat:@"\n  %@:\n    %@", v5, v6];
}

id sub_1000613C8()
{
  if (qword_1002CE6D8 != -1) {
    dispatch_once(&qword_1002CE6D8, &stru_100278930);
  }
  uint64_t v0 = (void *)qword_1002CE6E0;
  return v0;
}

void sub_100061578(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) trackingContext];

  if (v3)
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C918C(a1, v2);
    [(CPLCloudKitOperationsTracker *)v4 _bundleIdentifiersFromCKOperation:v6];
  }
  else
  {
    id v7 = [[_CPLCloudKitTaskContext alloc] initWithTask:*(void *)(a1 + 32)];
    [(_CPLCloudKitTaskContext *)v7 setStartDate:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) setTrackingContext:v7];
    [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
  }
}

void sub_100061998(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) trackingContext];
  if (!v3) {
    sub_1001C929C(a1, v2);
  }
  id v4 = (void *)v3;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = *(id *)(a1 + 56);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        +[CPLNetworkIndicator showNetworkIndicatorForBundleWithIdentifier:](CPLNetworkIndicator, "showNetworkIndicatorForBundleWithIdentifier:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v9), (void)v10);
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }

  [v4 operationWillStart:*(void *)(a1 + 40) context:*(void *)(a1 + 64)];
  [*(id *)(a1 + 48) _emitLogForCurrentTasks];
}

#error "100061B64: call analysis failed (funcsize=36)"

void sub_100061CB8(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) _contextForOperation:*(void *)(a1 + 40)];
  if (v3)
  {
    id v7 = v3;
    [v3 setLastBatchDate:*(void *)(a1 + 48)];
  }
  else
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C94CC(a1, v2 + 8, v2);
    [(CPLCloudKitOperationsTracker *)v4 isOperationBlocked:v6];
  }
}

void sub_100061E0C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) _contextForOperation:*(void *)(a1 + 40)];
  if (v3)
  {
    id v8 = v3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 mightBeBlocked];
  }
  else
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C95E4(a1, v2 + 8, v2);
    [(CPLCloudKitOperationsTracker *)v4 operation:v6 updateProgress:v7];
  }
}

void sub_100061FD0(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) _contextForOperation:*(void *)(a1 + 40)];
  if (v3)
  {
    id v8 = v3;
    [v3 setProgress:*(double *)(a1 + 56)];
  }
  else
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C96FC(a1, v2 + 8, v2);
    [(CPLCloudKitOperationsTracker *)v4 operation:v6 updateContextWithBlock:v7];
  }
}

void sub_1000621B4(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 32);
  id v4 = objc_msgSend(*(id *)(a1 + 32), "cpl_task");
  if (!v4)
  {
    sub_1001C9814(a1, v3);
    goto LABEL_13;
  }
  uint64_t v1 = v4;
  SEL v5 = [v4 trackingContext];
  if (!v5)
  {
LABEL_13:
    sub_1001C9920(a1, v1);
LABEL_14:
    sub_1001C9A2C((uint64_t)v3, a1, v8, v9, v10, v11, v12, v13, v20, *((uint64_t *)&v20 + 1), v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25[0], v25[1], v25[2],
      v25[3],
      v25[4]);
  }
  id v6 = v5;
  id v7 = [v5 contextForOperation:*v3];
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v14 = v7;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  unint64_t v15 = objc_msgSend(v7, "bundleIdentifiers", 0);
  id v16 = [v15 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v21;
    do
    {
      char v19 = 0;
      do
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v15);
        }
        +[CPLNetworkIndicator hideNetworkIndicatorForBundleWithIdentifier:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
        char v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      id v17 = [v15 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v17);
  }

  [v6 operationDidFinish:*v3];
}

void sub_100062454(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) _contextForOperation:*(void *)(a1 + 40)];
  if (v3)
  {
    id v7 = v3;
    [v3 setCancelled:1];
    [*v2 _emitLogForCurrentTasks];
  }
  else
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C9B20(a1, v2 + 1, v2);
    [(CPLCloudKitOperationsTracker *)v4 taskHasBeenCancelled:v6];
  }
}

void sub_1000625F8(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) trackingContext];
  if (v3)
  {
    id v7 = v3;
    [v3 setCancelled:1];
    [*(id *)(a1 + 40) _emitLogForCurrentTasks];
  }
  else
  {
    id v4 = (CPLCloudKitOperationsTracker *)sub_1001C9C38(a1, v2);
    [(CPLCloudKitOperationsTracker *)v4 taskDidFinish:v6];
  }
}

void sub_100062788(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = [*(id *)(a1 + 32) trackingContext];
  if (!v3) {
    sub_1001C9D44(a1, v2);
  }
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(*(void *)(a1 + 40) + 24);
  id v7 = [v3 countOfOperationClasses];
  uint64_t v8 = [v4 countOfOperationWithCellularAccessClasses];
  [v6 endTask:v5 withOperationClasses:v7 operationsAllowingCellular:v8];

  [*(id *)(a1 + 32) setTrackingContext:0];
  [*(id *)(*(void *)(a1 + 40) + 16) removeObject:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _emitLogForCurrentTasks];
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(v9 + 32) && ![*(id *)(v9 + 16) count])
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v10 = *(id *)(*(void *)(a1 + 40) + 32);
    id v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v18;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v18 != v13) {
            objc_enumerationMutation(v10);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v17 + 1) + 8 * i));
        }
        id v12 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v12);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = *(void **)(v15 + 32);
    *(void *)(v15 + 32) = 0;
  }
}

uint64_t sub_100062A54(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_1000613C8();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = [*(id *)(*(void *)(a1 + 32) + 16) count];
        id v4 = [*(id *)(a1 + 32) _pendingTaskStatus];
        *(_DWORD *)buf = 134218242;
        id v18 = v3;
        __int16 v19 = 2112;
        long long v20 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancelling all operations for %lu tasks:\n%@", buf, 0x16u);
      }
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 32) + 16);
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v9), "trackingContext", (void)v12);
          [v10 cancelAllOperations];

          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }

    [*(id *)(a1 + 32) _emitLogForCurrentTasks];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100062D10(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 32) + 16);
    id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v3);
          }
          uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          if (objc_msgSend(v9, "isBoostable", (void)v12))
          {
            id v10 = [v9 trackingContext];
            if ([v10 hasBlockedOperationsIncludingBackground:*(unsigned __int8 *)(a1 + 40)])
            {
              [v10 cancelAllOperations];
              ++v6;
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
      }
      while (v5);
    }
    else
    {
      uint64_t v6 = 0;
    }

    if (!_CPLSilentLogging)
    {
      id v11 = sub_1000613C8();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cancelling %lu blocked tasks", buf, 0xCu);
      }
    }
    return objc_msgSend(*(id *)(a1 + 32), "_emitLogForCurrentTasks", (void)v12);
  }
  return result;
}

void sub_100062FB4(uint64_t a1)
{
  id v12 = [*(id *)(a1 + 32) _pendingTaskStatus];
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  unsigned int v3 = [v2 BOOLForKey:@"CPLUseCompactCloudKitStatus"];

  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    id v5 = v12;
    uint64_t v6 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v5;
  }
  else
  {
    uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 24) status];
    if (v6)
    {
      id v7 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@\n%@", v6, v12];
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      id v11 = v12;
      uint64_t v9 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v11;
    }
  }
}

void sub_1000631AC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 16);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "trackingContext", (void)v18);
        uint64_t v9 = [v8 operationStatusDictionaries];
        [v2 addObjectsFromArray:v9];
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v5);
  }

  uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 24) statusObject];
  id v11 = (void *)v10;
  if (v10)
  {
    v24[0] = @"operations";
    v24[1] = @"sessions";
    v25[0] = v2;
    v25[1] = v10;
    id v12 = (id *)v25;
    long long v13 = (const __CFString **)v24;
    uint64_t v14 = 2;
  }
  else
  {
    CFStringRef v22 = @"operations";
    id v23 = v2;
    id v12 = &v23;
    long long v13 = &v22;
    uint64_t v14 = 1;
  }
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v13, v14, (void)v18);
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;
}

void sub_100063484(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    id v2 = *(void **)(*(void *)(a1 + 32) + 32);
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 32);
      *(void *)(v4 + 32) = v3;

      id v2 = *(void **)(*(void *)(a1 + 32) + 32);
    }
    id v7 = objc_retainBlock(*(id *)(a1 + 40));
    [v2 addObject:v7];
  }
  else
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v6();
  }
}

void sub_100064314(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.operations");
  uint64_t v3 = qword_1002CE6E0;
  qword_1002CE6E0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100064354(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000643B8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x16u);
}

uint64_t sub_1000643D8()
{
  return v0;
}

void sub_100065B1C(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [a1[4] objectAtIndexedSubscript:a3];
  id v7 = [v6 recordID];

  uint64_t v8 = [v7 recordName];
  uint64_t v9 = [a1[5] recordName];
  unsigned int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    id v11 = v5;
  }
  else
  {
    id v12 = objc_alloc((Class)NSString);
    long long v13 = [v7 recordName];
    id v11 = [v12 initWithFormat:@"%@#%@", v5, v13];
  }
  uint64_t v14 = [a1[6] objectAtIndexedSubscript:a3];
  id v15 = [objc_alloc((Class)CKServerChangeToken) initWithData:v14];
  if (v15)
  {
    uint64_t v16 = +[NSKeyedArchiver cpl_archivedDataWithRootObject:v15];
    [a1[7] setObject:v16 forKeyedSubscript:v11];
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v17 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v19 = v11;
      __int16 v20 = 2112;
      long long v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to interpret server change token for %@: %@", buf, 0x16u);
    }
  }
}

id CPLLibraryShareSettingsRecordID(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)NSString);
  uint64_t v6 = [v3 recordName];

  id v7 = [v5 initWithFormat:@"%@%@", @"PerUserScopeUserSettings-", v6];
  id v8 = [objc_alloc((Class)CKRecordID) initWithRecordName:v7 zoneID:v4];

  return v8;
}

void sub_1000663D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000663E8(id a1)
{
  v3[0] = &off_100291DA0;
  v3[1] = &off_100291DB8;
  v4[0] = @"query";
  v4[1] = @"shared";
  v3[2] = &off_100291DD0;
  v4[2] = @"zoneish";
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
  os_log_t v2 = (void *)qword_1002CE6E8;
  qword_1002CE6E8 = v1;
}

void sub_10006649C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  unint64_t v5 = (unint64_t)[a2 integerValue];
  if ((v5 & ~*(void *)(a1 + 48)) == 0)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) &= ~v5;
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100066A58(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  uint64_t v4 = qword_1002CE6F8;
  qword_1002CE6F8 = (uint64_t)v3;
  _objc_release_x1(v3, v4);
}

id CPLSharingScopeUUID()
{
  return (id)qword_1002CE708;
}

id CPLStagedZoneNameFromStagingZoneName(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 hasPrefix:@"Exit-"])
  {
    unint64_t v5 = [v4 recordName];
    if ([v3 hasSuffix:v5])
    {
      id v6 = (char *)[v3 length];
      id v7 = [@"Exit-" length];
      id v8 = [v4 recordName];
      uint64_t v9 = (char *)[v8 length] + (void)v7 + 2;

      if (v6 > v9)
      {
        id v10 = [@"Exit-" length];
        id v11 = [v4 recordName];
        unint64_t v12 = ~(unint64_t)[v11 length];

        long long v13 = objc_msgSend(v3, "substringWithRange:", v10, (char *)objc_msgSend(v3, "length") + v12 - (void)v10);
        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  long long v13 = 0;
LABEL_7:

  return v13;
}

id CPLStagingZoneNameFromZoneName(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)NSString);
  id v6 = [v3 recordName];

  id v7 = [v5 initWithFormat:@"%@%@-%@", @"Exit-", v4, v6];
  return v7;
}

id CPLIsStagedZoneName(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"Exit-"];
}

uint64_t CPLCloudKitOperationTypeForScope(void *a1)
{
  id v1 = a1;
  id v2 = [v1 databaseScope];
  id v3 = [v1 databaseScope];
  if (v3 == (id)3)
  {
    if ([v1 isZoneish]) {
      uint64_t v4 = 4;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  else
  {
    if (v3 != (id)2) {
      sub_1001CA090((uint64_t)v1, (uint64_t)v2);
    }
    if ([v1 isZoneish]) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = 1;
    }
  }

  return v4;
}

uint64_t CPLCKDatabaseScopeForCPLCloudKitOperationType(uint64_t a1)
{
  if (a1 == 2 || a1 == 4) {
    return 3;
  }
  if (!a1) {
    sub_1001CA12C();
  }
  return 2;
}

uint64_t CPLCloudKitUseGateKeeper()
{
  if (qword_1002CE720 != -1) {
    dispatch_once(&qword_1002CE720, &stru_100278D40);
  }
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006718C;
  block[3] = &unk_100275F60;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002CE710, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_10006718C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = _CPLCloudKitUseGateKeeper;
  return result;
}

uint64_t CPLCloudKitGateKeeperDisabledByServer()
{
  if (qword_1002CE720 != -1) {
    dispatch_once(&qword_1002CE720, &stru_100278D40);
  }
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006727C;
  block[3] = &unk_100275F60;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002CE710, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_10006727C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = _CPLCloudKitGateKeeperDisabledByServer;
  return result;
}

void CPLDisableCloudKitUseGateKeeper()
{
  if (qword_1002CE720 != -1) {
    dispatch_once(&qword_1002CE720, &stru_100278D40);
  }
  uint64_t v0 = qword_1002CE710;
  dispatch_sync(v0, &stru_100278A00);
}

void sub_1000672F0(id a1)
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_1000673B0();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Server is disabling DDC", v3, 2u);
    }
  }
  _CPLCloudKitUseGateKeeper = 0;
  _CPLCloudKitGateKeeperDisabledByServer = 1;
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 setObject:&__kCFBooleanTrue forKey:@"_CPLCloudKitAutoDisableGateKeeper"];
  [v2 synchronize];
}

id sub_1000673B0()
{
  if (qword_1002CE728 != -1) {
    dispatch_once(&qword_1002CE728, &stru_100278D60);
  }
  uint64_t v0 = (void *)qword_1002CE730;
  return v0;
}

#error "100067604: call analysis failed (funcsize=33)"

void sub_100067824(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000678DC;
  v6[3] = &unk_1002760B0;
  void v6[4] = v4;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_1000678DC(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 104))
  {
    id v2 = result;
    id v3 = (void *)*((void *)result + 5);
    if (v3)
    {
      objc_storeStrong((id *)(v1 + 112), v3);
    }
    else
    {
      uint64_t v4 = [*((id *)result + 6) currentActivity];
      uint64_t v5 = *((void *)v2 + 4);
      char v6 = *(void **)(v5 + 120);
      *(void *)(v5 + 120) = v4;

      [*((id *)v2 + 4) setHasBackgroundActivity:*(void *)(*((void *)v2 + 4) + 120) != 0];
    }
    uint64_t v7 = *((void *)v2 + 4);
    id v8 = *(void **)(v7 + 104);
    *(void *)(v7 + 104) = 0;

    [*((id *)v2 + 4) setIdleDescription:0];
    uint64_t v9 = (void *)*((void *)v2 + 4);
    return [v9 _reallyStartOperation];
  }
  return result;
}

void sub_100067BA8(uint64_t a1)
{
  if (__CPLShouldLogQOS() && !_CPLSilentLogging)
  {
    id v2 = __CPLQOSOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = objc_opt_class();
      id v4 = v3;
      uint64_t v5 = CPLCurrentQOS();
      int v12 = 138412546;
      long long v13 = v3;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running %@ with %@ QOS", (uint8_t *)&v12, 0x16u);
    }
  }
  char v6 = [*(id *)(*(void *)(a1 + 32) + 216) cloudKitRescheduler];
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v6)
  {
    if (!*(void *)(v7 + 120))
    {
      uint64_t v9 = [*(id *)(v7 + 216) detachedActivity];
      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = *(void **)(v10 + 120);
      *(void *)(v10 + 120) = v9;

      uint64_t v7 = *(void *)(a1 + 32);
    }
    goto LABEL_11;
  }
  unsigned int v8 = [(id)v7 _operationsShouldBeDiscretionary];
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v8)
  {
LABEL_11:
    [(id)v7 _reallyStartOperation];
    goto LABEL_12;
  }
  [(id)v7 _acquireActivityAndLaunchOperation];
LABEL_12:
}

void sub_100067D0C(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100067DD4;
  void v3[3] = &unk_100276AA0;
  objc_copyWeak(&v4, &location);
  [v2 setCancellationHandler:v3];
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_100067DB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100067DD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v2 = sub_1000673B0();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 138412290;
        id v4 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ was cancelled by client through progress cancellation handler", (uint8_t *)&v3, 0xCu);
      }
    }
    [WeakRetained cancel];
  }
}

char *sub_100067FC0(char *result)
{
  uint64_t v2 = (id *)(result + 32);
  uint64_t v1 = (unsigned char *)*((void *)result + 4);
  if (v1[128]) {
    return result;
  }
  int v3 = result;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000673B0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id v5 = *v2;
      *(_DWORD *)buf = 138412290;
      id v28 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cancelling operations for %@", buf, 0xCu);
    }

    uint64_t v1 = *v2;
  }
  v1[128] = 1;
  char v6 = (id *)*v2;
  if (*((void *)*v2 + 13))
  {
    if ([v6[1] count] || *((void *)*v2 + 8)) {
      sub_1001CA39C(v2, v3);
    }
    uint64_t v7 = [*((id *)*v2 + 27) cloudKitRescheduler];
    [v7 dropBackgroundActivityRequest:*((void *)*v2 + 13)];

    [*v2 setIdleDescription:0];
    unsigned int v8 = (void *)*((void *)*v2 + 13);
    *((void *)*v2 + 13) = 0;

    return (char *)[*v2 _reallyStartOperation];
  }
  if (!v6[27])
  {
    if (![v6[1] count])
    {
      if (*((void *)*v2 + 18)) {
        BOOL v12 = _CPLSilentLogging == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12) {
        goto LABEL_23;
      }
      uint64_t v9 = sub_1000673B0();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        long long v13 = [*v2 idleDescription];
        id v14 = *v2;
        *(_DWORD *)buf = 138412546;
        id v28 = v13;
        __int16 v29 = 2112;
        id v30 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cancelling '%@' for %@", buf, 0x16u);
      }
      goto LABEL_22;
    }
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_1000673B0();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [*((id *)*v2 + 1) count];
        id v11 = *v2;
        *(_DWORD *)buf = 134218242;
        id v28 = v10;
        __int16 v29 = 2112;
        id v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cancelling %lu operations for %@", buf, 0x16u);
      }
LABEL_22:
    }
  }
LABEL_23:
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v15 = *((id *)*v2 + 1);
  id v16 = [v15 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v23;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v23 != v18) {
          objc_enumerationMutation(v15);
        }
        __int16 v20 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v21 = objc_msgSend(*((id *)*v2 + 25), "operationTracker", (void)v22);
        [v21 operationHasBeenCancelled:v20];

        [v20 cancel];
      }
      id v17 = [v15 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v17);
  }

  return (char *)[*v2 _cancelCallbackProgress];
}

id sub_1000685A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelAllOperationsIfBlocked];
}

id sub_1000686C0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_1000673B0();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cancelling operations for %@ it not blocked", (uint8_t *)&v9, 0xCu);
    }
  }
  id v5 = (id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(void *)(v4 + 104)) {
    return [(id)v4 _cancelAllOperationsIfBlocked];
  }
  *(unsigned char *)(v4 + 128) = 1;
  if ([*((id *)*v5 + 1) count]) {
    sub_1001CA498(a1 + 32, a1);
  }
  char v6 = [*((id *)*v5 + 27) cloudKitRescheduler];
  [v6 dropBackgroundActivityRequest:*((void *)*v5 + 13)];

  [*v5 setIdleDescription:0];
  uint64_t v7 = (void *)*((void *)*v5 + 13);
  *((void *)*v5 + 13) = 0;

  return [*v5 _reallyStartOperation];
}

void *sub_1000689B0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(void *)(*(void *)(a1 + 32) + 64) == 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (!result)
  {
    id result = *(void **)(a1 + 32);
    char v4 = result[8] || v2;
    if ((v4 & 1) == 0 && *((unsigned char *)result + 56))
    {
      return _[result taskDidFinish];
    }
  }
  return result;
}

void *sub_100068B24(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(void *)(*(void *)(a1 + 32) + 64) == 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (!result)
  {
    id result = *(void **)(a1 + 32);
    char v4 = result[8] || v2;
    if ((v4 & 1) == 0 && *((unsigned char *)result + 56))
    {
      return _[result taskDidFinish];
    }
  }
  return result;
}

void sub_1000693EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10006940C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = [v3 requestUUID];
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10006955C;
    v12[3] = &unk_100276018;
    void v12[4] = v6;
    id v13 = v4;
    unsigned int v8 = v12;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006E440;
    block[3] = &unk_100275DF8;
    id v15 = v8;
    int v9 = v7;
    dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v9, v10);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v3);
  }
}

id sub_10006955C(uint64_t a1)
{
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 16) count] >= 0x64) {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  }
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  return [v3 addObject:v2];
}

uint64_t sub_1000695B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000695C8(uint64_t a1)
{
}

void sub_1000695D0(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006967C;
  v5[3] = &unk_100278A50;
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  long long v7 = v4;
  [v2 dispatchAsync:v5];
}

void sub_10006967C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v6), "associatedOperationDidComplete:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (void)v10);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;
}

void *sub_100069CBC(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[18]) {
    return [result _cancelCallbackProgress];
  }
  return result;
}

void sub_100069CD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100069D84;
  v6[3] = &unk_100276018;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = v3;
  id v4 = v3;
  id v5 = WeakRetained;
  [v5 dispatchAsync:v6];
}

id *sub_100069D84(id *result)
{
  if (*((void *)result[4] + 18))
  {
    uint64_t v1 = result;
    id result = (id *)[result[5] shouldDefer];
    if (result)
    {
      if (!_CPLSilentLogging)
      {
        id v2 = sub_1000673B0();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          id v3 = v1[4];
          uint64_t v4 = [v3 idleDescription];
          id v5 = (void *)v4;
          CFStringRef v6 = @"running some operation";
          if (v4) {
            CFStringRef v6 = (const __CFString *)v4;
          }
          int v7 = 138412546;
          id v8 = v3;
          __int16 v9 = 2112;
          CFStringRef v10 = v6;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ has been marked as deferred while %@", (uint8_t *)&v7, 0x16u);
        }
      }
      return (id *)[v1[4] _cancelCallbackProgress];
    }
  }
  return result;
}

void sub_10006A00C(uint64_t a1)
{
  if (a1 && !*(void *)(a1 + 48))
  {
    uint64_t v4 = CPLCopyDefaultSerialQueueAttributes();
    dispatch_queue_t v2 = dispatch_queue_create("com.apple.cpl.cloudkit.task.synchronouswork", v4);
    id v3 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v2;
  }
}

uint64_t sub_10006A1F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006A360(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000;
  id v17 = sub_1000695B8;
  uint64_t v18 = sub_1000695C8;
  id v19 = 0;
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10006A568;
  v10[3] = &unk_100278AA0;
  long long v12 = &v20;
  id v11 = *(id *)(a1 + 48);
  long long v13 = &v14;
  [v2 performAsCurrentWithPendingUnitCount:1 usingBlock:v10];
  id v3 = (void *)v15[5];
  if (*((unsigned char *)v21 + 24))
  {
    void v15[5] = 0;
  }
  else
  {
    if (v3) {
      goto LABEL_5;
    }
    uint64_t v5 = +[CPLErrors unknownError];
    id v3 = (void *)v15[5];
    void v15[5] = v5;
  }

LABEL_5:
  uint64_t v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006A5D8;
  v6[3] = &unk_1002768F8;
  void v6[4] = v4;
  __int16 v9 = &v14;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  [v4 dispatchAsync:v6];

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v20, 8);
}

void sub_10006A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006A568(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  char v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
}

void sub_10006A5D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10006A658(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    uint64_t v16 = [v12 nextObject];
    if (v16)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10006A7C8;
      v17[3] = &unk_100278AF0;
      id v18 = v14;
      id v19 = v13;
      uint64_t v20 = a1;
      id v23 = v11;
      id v21 = v16;
      id v22 = v12;
      id v24 = v15;
      [a1 dispatchSynchronousWork:v17];
    }
    else
    {
      (*((void (**)(id, void))v15 + 2))(v15, 0);
    }
  }
}

void sub_10006A7C8(uint64_t a1)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = sub_1000695B8;
  uint64_t v17 = sub_1000695C8;
  id v18 = 0;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    *((unsigned char *)v20 + 24) = 0;
    uint64_t v2 = +[CPLErrors operationCancelledError];
    id v3 = (id)v14[5];
    void v14[5] = v2;
  }
  else
  {
    char v4 = (char *)[*(id *)(a1 + 32) completedUnitCount];
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"%@ (%lu/%lu)", *(void *)(a1 + 40), v4, objc_msgSend(*(id *)(a1 + 32), "totalUnitCount")];
    [*(id *)(a1 + 48) setIdleDescription:v3];
    uint64_t v5 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10006AA20;
    v8[3] = &unk_100278AC8;
    id v11 = &v19;
    id v10 = *(id *)(a1 + 72);
    id v9 = *(id *)(a1 + 56);
    id v12 = &v13;
    [v5 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
    [*(id *)(a1 + 32) setCompletedUnitCount:v4 + 1];
  }
  if (*((unsigned char *)v20 + 24))
  {
    sub_10006A658(*(void *)(a1 + 48), *(void *)(a1 + 72), *(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(a1 + 80));
  }
  else
  {
    if (!v14[5])
    {
      uint64_t v6 = +[CPLErrors unknownError];
      id v7 = (void *)v14[5];
      void v14[5] = v6;
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  _Block_object_dispose(&v13, 8);

  _Block_object_dispose(&v19, 8);
}

void sub_10006A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006AA20(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v3 + 40);
  char v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v4;
}

void sub_10006ABF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006ACC8;
  v9[3] = &unk_100278B18;
  void v9[4] = v4;
  id v10 = v3;
  id v5 = *(id *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v11 = v5;
  uint64_t v13 = v6;
  id v12 = v7;
  id v8 = v3;
  [v4 dispatchAsync:v9];
}

void sub_10006ACC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) setCompletedUnitCount:*(void *)(a1 + 64)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10006AEE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(void **)(v2 + 200);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006AFA0;
  v5[3] = &unk_100278B90;
  void v5[4] = v2;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v4 acquireHelperWithIdentifier:v3 completionHandler:v5];
}

void sub_10006AFA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006B08C;
  v11[3] = &unk_100278B68;
  void v11[4] = v7;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v8;
  id v9 = v5;
  id v10 = v6;
  [v7 dispatchAsync:v11];
}

void sub_10006B08C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)];
  objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
  if (v4)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v2 = *(void *)(a1 + 56);
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v2, v3);
}

void sub_10006B25C(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSString);
  uint64_t v3 = objc_opt_class();
  id v4 = CPLSimplifiedStringFromClass(v3);
  id v5 = +[NSUUID UUID];
  id v6 = [v2 initWithFormat:@"%@-%@", v4, v5];

  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 200);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006B370;
  v9[3] = &unk_100278BB8;
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  [v8 getTemporaryFolderWithName:v6 completionHandler:v9];
}

void sub_10006B370(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006B45C;
  v11[3] = &unk_100278B68;
  void v11[4] = v7;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v8;
  id v9 = v5;
  id v10 = v6;
  [v7 dispatchAsync:v11];
}

void sub_10006B45C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)];
  objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
  if (!v2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136), *(id *)(a1 + 56));
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10006BDCC(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "setCompletedUnitCount:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "totalUnitCount"));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0;

  id v4 = [*(id *)(*(void *)(a1 + 32) + 200) operationTracker];
  [v4 taskDidFinish:*(void *)(a1 + 32)];
}

id sub_10006C180(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = 0;
  if (a1 && v3)
  {
    unsigned int v6 = [v3 allowsCellularAccess];
    uint64_t v7 = objc_msgSend(a1, "_stringForQoS:", objc_msgSend(v4, "qualityOfService"));
    id v8 = [a1 _networkBehaviorForConfiguration:v4];
    id v5 = +[NSString stringWithFormat:@"(Cell: %d QoS: %@ %@)", v6, v7, v8];
  }
  return v5;
}

void sub_10006C7B0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (v7) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 176), a2);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006C950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006CA28;
  v11[3] = &unk_100278C08;
  void v11[4] = v7;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v13 = v5;
  id v14 = v8;
  id v9 = v5;
  id v10 = v6;
  [v7 dispatchAsync:v11];
}

void sub_10006CA28(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_1000673B0();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138412290;
        id v12 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "failed to fetch user record: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    id v4 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v5 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v2 withRequestUUIDs:v4 description:@"Failed to get user record"];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v6 = [*(id *)(a1 + 48) allValues];
    id v5 = [v6 firstObject];

    if (v5)
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_1000673B0();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          int v11 = 138412290;
          id v12 = v5;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Active Apple Account, userRecord: %@", (uint8_t *)&v11, 0xCu);
        }
      }
      id v8 = [v5 recordID];
      id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_1000673B0();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v11) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "No active Apple Account", (uint8_t *)&v11, 2u);
        }
      }
      id v8 = +[CPLErrors cplErrorWithCode:28 description:@"No active Apple Account"];
      id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    v9();
  }
}

void sub_10006CE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,char a26)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_10006CEC4(uint64_t a1)
{
}

void sub_10006CF30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10006CFFC;
  v10[3] = &unk_100278C80;
  void v10[4] = v6;
  id v11 = v5;
  char v13 = *(unsigned char *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v9;
  long long v12 = v9;
  id v8 = v5;
  [v6 dispatchAsync:v10];
}

void sub_10006CFFC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && (+[CPLCloudKitErrors isCloudKitOperationCancelledError:](CPLCloudKitErrors, "isCloudKitOperationCancelledError:", v2)|| [v2 isCPLOperationCancelledError]))
  {

LABEL_12:
    id v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v7();
    return;
  }
  if (!v2) {
    goto LABEL_12;
  }
  id v3 = *(void **)(a1 + 32);
  id v8 = v2;
  id v4 = [v3 lastOperationRequestUUIDs];
  if (*(unsigned char *)(a1 + 64)) {
    id v5 = "shared";
  }
  else {
    id v5 = "private";
  }
  id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v8, v4, @"failed to fetch %s database changes", v5 withRequestUUIDs description];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10006D224(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10006D2EC;
    v5[3] = &unk_100276DD8;
    id v4 = *(void **)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    [v4 _enumerateAllZonesForSharedDatabase:1 block:v3 completionHandler:v5];
  }
}

uint64_t sub_10006D2EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10006D4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 264) setObject:a3 forKeyedSubscript:a2];
}

void sub_10006D684(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 zoneID];
  if (v5) {
    [*(id *)(*(void *)(a1 + 32) + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void CPLTaskLogCKCodeRequestAndResponse(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  long long v9 = a3;
  uint64_t v10 = [a4 componentsJoinedByString:@", "];
  id v11 = (void *)v10;
  long long v12 = @"unknown";
  if (v10) {
    long long v12 = (__CFString *)v10;
  }
  char v13 = v12;

  if (v9)
  {
    if (v8)
    {
      if (!_CPLSilentLogging)
      {
        id v14 = sub_10006E0B8();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v19 = 138413058;
          id v20 = v7;
          __int16 v21 = 2112;
          char v22 = v8;
          __int16 v23 = 2112;
          id v24 = v9;
          __int16 v25 = 2114;
          uint64_t v26 = v13;
          id v15 = "Error for %@\nresponse: %@\nerror: %@\n\nrequest UUIDs: (%{public}@)";
          uint64_t v16 = v14;
          os_log_type_t v17 = OS_LOG_TYPE_ERROR;
          uint32_t v18 = 42;
LABEL_19:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v19, v18);
        }
LABEL_20:

        goto LABEL_21;
      }
      goto LABEL_21;
    }
    if (_CPLSilentLogging) {
      goto LABEL_21;
    }
    id v14 = sub_10006E0B8();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    int v19 = 138412802;
    id v20 = v7;
    __int16 v21 = 2112;
    char v22 = v9;
    __int16 v23 = 2114;
    id v24 = v13;
    id v15 = "Error with no response for %@\nerror: %@\n\nrequest UUIDs: (%{public}@)";
    uint64_t v16 = v14;
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
LABEL_15:
    uint32_t v18 = 32;
    goto LABEL_19;
  }
  if (v8)
  {
    if (_CPLSilentLogging) {
      goto LABEL_21;
    }
    id v14 = sub_10006E0B8();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    int v19 = 138412802;
    id v20 = v7;
    __int16 v21 = 2112;
    char v22 = v8;
    __int16 v23 = 2114;
    id v24 = v13;
    id v15 = "Success for %@\nresponse: %@\n\nrequest UUIDs: (%{public}@)";
    uint64_t v16 = v14;
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_15;
  }
  if (!_CPLSilentLogging)
  {
    id v14 = sub_10006E0B8();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v19 = 138412546;
      id v20 = v7;
      __int16 v21 = 2114;
      char v22 = v13;
      id v15 = "No error but no response for %@\n\nrequest UUIDs: (%{public}@)";
      uint64_t v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_ERROR;
      uint32_t v18 = 22;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
LABEL_21:
}

id sub_10006E0B8()
{
  if (qword_1002CE738 != -1) {
    dispatch_once(&qword_1002CE738, &stru_100278D80);
  }
  uint64_t v0 = (void *)qword_1002CE740;
  return v0;
}

void sub_10006E10C(id a1)
{
  uint64_t v1 = CPLCopyDefaultSerialQueueAttributes();
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.cpl.gatekeepercheck", v1);
  uint64_t v3 = (void *)qword_1002CE710;
  qword_1002CE710 = (uint64_t)v2;

  id v4 = +[NSUserDefaults standardUserDefaults];
  id v5 = [v4 objectForKey:@"CPLCloudKitUseGateKeeper"];

  if (v5 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    _CPLCloudKitUseGateKeeper = [v5 BOOLValue];
    id v6 = +[NSUserDefaults standardUserDefaults];
    unsigned int v7 = [v6 BOOLForKey:@"_CPLCloudKitAutoDisableGateKeeper"];

    if (v7 && !_CPLSilentLogging)
    {
      id v8 = sub_1000673B0();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "DDC has been disabled by server but enabled through defaults", (uint8_t *)&v19, 2u);
      }
    }
    if (!_CPLCloudKitUseGateKeeper) {
      goto LABEL_29;
    }
LABEL_18:
    char v13 = +[NSUserDefaults standardUserDefaults];
    id v14 = [v13 stringForKey:@"CPLCloudKitGateKeeperTranscodeType"];
    id v15 = [v14 lowercaseString];

    if (v15)
    {
      if ([v15 isEqualToString:@"mmcs"])
      {
        uint64_t v16 = &qword_1002DC000;
        uint64_t v17 = 1;
      }
      else
      {
        if (![v15 isEqualToString:@"transcode"])
        {
          if (!_CPLSilentLogging)
          {
            uint32_t v18 = sub_1000673B0();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              int v19 = 138412290;
              id v20 = v15;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid value for transcode type: '%@'", (uint8_t *)&v19, 0xCu);
            }
          }
          goto LABEL_28;
        }
        uint64_t v16 = &qword_1002DC000;
        uint64_t v17 = 2;
      }
      v16[46] = v17;
    }
LABEL_28:

    goto LABEL_29;
  }
  long long v9 = +[NSUserDefaults standardUserDefaults];
  unsigned int v10 = [v9 BOOLForKey:@"_CPLCloudKitAutoDisableGateKeeper"];

  if (v10)
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_1000673B0();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "DDC has been disabled by server", (uint8_t *)&v19, 2u);
      }
    }
    int v12 = 0;
    _CPLCloudKitGateKeeperDisabledByServer = 1;
  }
  else
  {
    int v12 = 1;
  }
  _CPLCloudKitUseGateKeeper = v12;
  if (v12) {
    goto LABEL_18;
  }
LABEL_29:
}

void sub_10006E400(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.task");
  uint64_t v3 = qword_1002CE730;
  qword_1002CE730 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10006E440(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006E48C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.task.ckcode");
  uint64_t v3 = qword_1002CE740;
  qword_1002CE740 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10006E4F0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0x20u);
}

id sub_10006E510()
{
  os_log_t v2 = *v0;
  return [v2 count];
}

id sub_10006E528()
{
  os_log_t v2 = *v0;
  return [v2 count];
}

void sub_10006E830(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006E8E0;
  v6[3] = &unk_100276018;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_10006E8E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_10006E8EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10006E9A4;
  v8[3] = &unk_1002760B0;
  void v8[4] = v6;
  id v9 = v5;
  id v10 = *(id *)(a1 + 40);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_10006E9A4(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10006EB70();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v11 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to delete source records: %@", buf, 0xCu);
      }
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 344);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10006EBC4;
    v8[3] = &unk_1002779C8;
    id v9 = *(id *)(a1 + 48);
    id v5 = *(void **)(a1 + 32);
    id v6 = [v5 lastOperationRequestUUIDs];
    id v7 = +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:v2 getDestinationRecordIDs:v8 scopeProvider:v5 withRequestUUIDs:v6 uploadAction:@"delete"];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v7);
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 344) + 16))();
  }
}

id sub_10006EB70()
{
  if (qword_1002CE748 != -1) {
    dispatch_once(&qword_1002CE748, &stru_100278E58);
  }
  uint64_t v0 = (void *)qword_1002CE750;
  return v0;
}

id sub_10006EBC4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10006F000(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(*(void *)(a1 + 32) + 272);
  id v6 = a3;
  id v7 = [a2 identifier];
  id v14 = [v5 recordIDWithRecordName:v7];

  id v8 = [v6 scopedIdentifier];
  id v9 = *(void **)(*(void *)(a1 + 32) + 280);
  id v10 = [v8 identifier];
  id v11 = [v9 recordIDWithRecordName:v10];

  LODWORD(v10) = [v6 isDelete];
  if (v10)
  {
    int v12 = (id *)(a1 + 40);
    id v13 = v14;
  }
  else
  {
    [*(id *)(a1 + 48) addObject:v14];
    int v12 = (id *)(a1 + 56);
    id v13 = v11;
  }
  [*v12 addObject:v13];
  [*(id *)(*(void *)(a1 + 32) + 328) setObject:v8 forKeyedSubscript:v14];
  [*(id *)(*(void *)(a1 + 32) + 328) setObject:v8 forKeyedSubscript:v11];
}

void sub_10006F148(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 || ![*(id *)(a1 + 32) count]) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 344) + 16))();
  }
  else {
    [*(id *)(a1 + 40) _deleteSourceRecordIDs:*(void *)(a1 + 32)];
  }
}

void sub_10006F864(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2)
  {
    id v13 = objc_begin_catch(a1);
    if (a2 == 2)
    {
      id v14 = v13;
      if (!_CPLSilentLogging)
      {
        id v15 = sub_10006EB70();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Error deserializing base CKRecord: %@", (uint8_t *)&buf, 0xCu);
        }
      }
      objc_end_catch();
      if (!v11) {
        JUMPOUT(0x10006F6F8);
      }
      JUMPOUT(0x10006F74CLL);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_10006FD24(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resharerecords");
  uint64_t v3 = qword_1002CE750;
  qword_1002CE750 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10006FDB8(id a1)
{
  id v1 = [[CPLCKRecordPropertyMapping alloc] initSharedInstance];
  uint64_t v2 = qword_1002CE758;
  qword_1002CE758 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_10006FDFC()
{
  if (qword_1002CE790 != -1) {
    dispatch_once(&qword_1002CE790, &stru_100279090);
  }
  uint64_t v0 = (void *)qword_1002CE788;
  return v0;
}

id sub_10006FEA8()
{
  if (qword_1002CE7B0 != -1) {
    dispatch_once(&qword_1002CE7B0, &stru_1002790D0);
  }
  uint64_t v0 = (void *)qword_1002CE7A8;
  return v0;
}

void sub_10006FF50(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableSet);
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  +[CPLPersonChange serverSupportsAssetSortOrder];
  +[CPLPersonChange serverSupportsDetectionType];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  [v1 addObject:objc_opt_class()];
  +[CPLAssetChange serverSupportsSharedLibrarySharingState];
  +[CPLAssetChange serverSupportsLastViewedDate];
  +[CPLAssetChange serverSupportsDeletedByUserIdentifier];
  uint64_t v2 = (void *)qword_1002CE768;
  qword_1002CE768 = (uint64_t)v1;
}

void sub_100072D20(_Unwind_Exception *a1)
{
}

uint64_t sub_100072DC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100072DD4(uint64_t a1)
{
}

id sub_100072DDC(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:a2];
  [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forKeyedSubscript:a2];
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
  id v10 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v11 = *(void *)(*(void *)(a1 + 96) + 8);
  int v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  id v14 = *(void **)(a1 + 48);
  return [v14 setObject:v13 forKeyedSubscript:a2];
}

void sub_100072EFC(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) supportsResources])
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    uint64_t v8 = sub_100072FF0;
    id v9 = &unk_100278EE8;
    uint64_t v3 = *(void *)(a1 + 40);
    id v10 = v2;
    uint64_t v11 = v3;
    id v4 = v2;
    +[CPLResource enumerateResourceTypesWithBlock:&v6];
    id v5 = objc_msgSend(v4, "copy", v6, v7, v8, v9);
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
}

void sub_100072FF0(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) supportsResourceType:a2])
  {
    id v6 = sub_1000961D8((uint64_t)CPLCloudKitResourceKeys, a2);
    id v4 = *(void **)(a1 + 32);
    id v5 = sub_1000966C0(v6, *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    [v4 addObjectsFromArray:v5];
  }
}

uint64_t sub_100073098(void *a1)
{
  uint64_t v2 = *(void *)(a1[5] + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t v6 = *(void *)(a1[7] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;

  uint64_t v8 = *(uint64_t (**)(void))(a1[4] + 16);
  return v8();
}

uint64_t sub_100073118(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKeyedSubscript:a2];
  [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:a2];
  id v10 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v10();
}

id sub_1000731D0(void *a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1[4] + 8) + 40);
  id v4 = a2;
  [v3 addObjectsFromArray:v4];
  uint64_t v5 = [[CPLCKRecordPropertyPairing alloc] initWithProperties:v4];

  uint64_t v6 = *(void *)(a1[5] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = *(void **)(*(void *)(a1[6] + 8) + 40);
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
  return [v8 addObject:v9];
}

void sub_10007326C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

uint64_t sub_100073280(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

void sub_1000732CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (!v4) {
    sub_1001CB65C(v3, a1);
  }
  id v9 = v3;
  [v4 addCKKeys:v3];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObjectsFromArray:v9];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableSet);
      uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
      uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    }
    [v5 addObjectsFromArray:v9];
  }
}

void sub_1000733BC(void *a1, char a2)
{
  id v4 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (!v4) {
    sub_1001CB790(a1);
  }
  uint64_t v5 = *(void *)(a1[7] + 8);
  uint64_t v7 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  if (v7 == v4) {
    sub_1001CB8A0(a2, a1);
  }
  objc_storeStrong(v6, v4);
  objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), *(id *)(*(void *)(a1[9] + 8) + 40));
  *(unsigned char *)(*(void *)(a1[10] + 8) + 24) = a2;
}

void sub_100073440(void *a1, int a2)
{
  uint64_t v3 = *(void *)(a1[5] + 8);
  if (*(unsigned __int8 *)(v3 + 24) != a2) {
    sub_1001CB9D4(a2, (uint64_t)a1);
  }
  *(unsigned char *)(v3 + 24) = 0;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(*(void *)(a1[7] + 8) + 40));
  id v4 = *(void **)(*(void *)(a1[9] + 8) + 40);
  uint64_t v5 = (id *)(*(void *)(a1[8] + 8) + 40);
  objc_storeStrong(v5, v4);
}

uint64_t sub_1000734C0(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2;
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) == 8) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

uint64_t sub_1000734F8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (*(void *)(v1 + 24) == 8)
  {
    uint64_t v2 = result;
    id result = (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
    uint64_t v1 = *(void *)(*(void *)(v2 + 40) + 8);
  }
  *(void *)(v1 + 24) = 0;
  return result;
}

void sub_1000739D0(id a1)
{
  id v1 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", @"dateExpunged", @"remappedRef", @"contributors", 0);
  uint64_t v2 = qword_1002CE778;
  qword_1002CE778 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1000740E8(id a1)
{
  id v1 = [[CPLCKRecordPropertyPairing alloc] initWithProperties:&__NSArray0__struct];
  [(CPLCKRecordPropertyPairing *)v1 addCKKeys:&off_100294230];
  uint64_t v13 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"inTrash" andKeys:&off_100294248];
  v15[0] = v13;
  uint64_t v2 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"inExpunged" andKeys:&off_100294260];
  v15[1] = v2;
  uint64_t v3 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"recordModificationDate" andKeys:&off_100294278];
  v15[2] = v3;
  id v4 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"realIdentifier" andKeys:&off_100294290];
  v15[3] = v4;
  uint64_t v5 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"resourceCopyFromScopedIdentifier" andKeys:&__NSArray0__struct];
  v15[4] = v5;
  id v6 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"scopedIdentifier" andKeys:&off_1002942A8];
  void v15[5] = v6;
  uint64_t v7 = [[CPLCKRecordPropertyPairing alloc] initWithProperty:@"sharingScopeIdentifier" andKeys:&off_1002942C0];
  v15[6] = v7;
  uint64_t v8 = [CPLCKRecordPropertyPairing alloc];
  CFStringRef v14 = @"linkedShareRecordName";
  id v9 = +[NSArray arrayWithObjects:&v14 count:1];
  id v10 = [(CPLCKRecordPropertyPairing *)v8 initWithProperty:@"sharingRecordIdentifier" andKeys:v9];
  v15[7] = v10;
  v15[8] = v1;
  uint64_t v11 = +[NSArray arrayWithObjects:v15 count:9];
  int v12 = (void *)qword_1002CE788;
  qword_1002CE788 = v11;
}

void sub_10007431C(id a1)
{
  id v1 = sub_10006FDFC();
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "properties", (void)v10);
        [v2 addObjectsFromArray:v8];

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  id v9 = (void *)qword_1002CE798;
  qword_1002CE798 = (uint64_t)v2;
}

void sub_10007446C(id a1)
{
  id v1 = sub_10006FDFC();
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "ckKeys", (void)v10);
        [v2 addObjectsFromArray:v8];

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  id v9 = (void *)qword_1002CE7A8;
  qword_1002CE7A8 = (uint64_t)v2;
}

uint64_t sub_1000747E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100074AB4(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1002CE7B8 = [v1 BOOLForKey:@"CPLSkipRampingRequest"];
}

void sub_100074EB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100074F7C;
  v10[3] = &unk_1002760B0;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_100074F7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  id v11 = v2;
  if (!v2)
  {
    id v4 = *(id *)(a1 + 48);
    id v5 = [v4 responses];
    id v6 = [v5 firstObject];

    (*(void (**)(void, id, id, void))(*(void *)(*(void *)(a1 + 32) + 288) + 16))(*(void *)(*(void *)(a1 + 32) + 288), [v6 allowed], objc_msgSend(v6, "retryAfterMillis"), 0);
    goto LABEL_12;
  }
  id v3 = [v2 domain];
  if (![v3 isEqualToString:CKErrorDomain])
  {

    goto LABEL_10;
  }
  if ([v11 code] == (id)7)
  {

    goto LABEL_8;
  }
  id v7 = [v11 code];

  if (v7 != (id)6)
  {
LABEL_10:
    long long v10 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v11 withRequestUUIDs:v10 description:@"Failed to invoke ramping request function"];

    id v9 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 288) + 16);
    goto LABEL_11;
  }
LABEL_8:
  id v8 = [v11 userInfo];
  id v6 = [v8 objectForKey:CKErrorRetryAfterKey];

  if (!v6) {
    goto LABEL_10;
  }
  [v6 doubleValue];
  id v9 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 288) + 16);
LABEL_11:
  v9();
LABEL_12:
}

void sub_1000751A8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.ramping");
  uint64_t v3 = qword_1002CE7D0;
  qword_1002CE7D0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void CPLCloudKitConfigurePhotosCapabilitiesOnContainerOptions(void *a1)
{
  id v1 = a1;
  if (+[CPLFingerprintScheme supportsEPP])
  {
    id v2 = [objc_alloc((Class)CKDeviceCapability) initWithLevel:2 name:@"epp" value:@"1"];
    id v4 = v2;
    uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
    [v1 setSupportedDeviceCapabilities:v3];
  }
}

id CPLRecordChangeClassForCKRecordType(void *a1)
{
  uint64_t v1 = qword_1002CE7F8;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1002CE7F8, &stru_100279218);
  }
  uint64_t v3 = [(id)qword_1002CE7D8 objectForKeyedSubscript:v2];

  return v3;
}

id CKRecordTypeForCPLRecordChangeClass(uint64_t a1)
{
  if (qword_1002CE7F8 != -1) {
    dispatch_once(&qword_1002CE7F8, &stru_100279218);
  }
  id v2 = [(id)qword_1002CE7E0 objectForKeyedSubscript:a1];
  if (!v2) {
    sub_1001CBBF0(a1);
  }
  return v2;
}

id CPLCKRecord(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = CKRecordTypeForCPLRecordChangeClass(a1);
  id v7 = [objc_alloc((Class)CKRecord) initWithRecordType:v6 recordID:v5];

  if (a3)
  {
    [v7 setKnownToServer:1];
    [v7 setEtag:@"-gateon"];
  }

  return v7;
}

id CPLBaseCKRecordFromCPLRecordChange(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v28 = a2;
  id v6 = a3;
  uint64_t v7 = CKRecordTypeForCPLRecordChangeClass((uint64_t)[v5 recordClass]);
  id v8 = [v28 zoneID];
  id v9 = [v6 scopedIdentifier];
  long long v10 = [v9 identifier];
  if (v10)
  {
  }
  else
  {
    id v11 = [v5 scopedIdentifier];
    long long v10 = [v11 identifier];

    if (!v10) {
      sub_1001CBCE4((uint64_t)v5);
    }
  }
  unint64_t v12 = (unint64_t)[objc_alloc((Class)CKRecordID) initWithRecordName:v10 zoneID:v8];
  long long v13 = [v5 recordChangeData];
  if (!v13) {
    goto LABEL_25;
  }
  CFStringRef v14 = +[CPLArchiver unarchiveObjectWithData:v13 ofClass:objc_opt_class()];
  id v15 = v14;
  if (!v14) {
    goto LABEL_25;
  }
  uint64_t v16 = [v14 recordType];
  unint64_t v17 = (unint64_t)v16;
  if (v16 && v7)
  {
    unsigned __int8 v18 = [v16 isEqual:v7];

    if ((v18 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    __int16 v21 = [v15 recordID];
    unint64_t v22 = (unint64_t)v21;
    if (v21 && v12)
    {
      unsigned __int8 v23 = [v21 isEqual:v12];

      if (v23) {
        goto LABEL_30;
      }
    }
    else
    {

      if (!(v22 | v12)) {
        goto LABEL_30;
      }
    }
    if (!_CPLSilentLogging)
    {
      id v24 = __CPLGenericOSLogDomain();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        __int16 v25 = [v15 recordID];
        *(_DWORD *)buf = 138412546;
        id v30 = v25;
        __int16 v31 = 2112;
        uint64_t v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Error deserializing base CKRecord, unarchived recordID: %@ not equal to expected recordID: %@", buf, 0x16u);
      }
    }
    goto LABEL_24;
  }

  if (!(v17 | v7)) {
    goto LABEL_15;
  }
LABEL_9:
  if (!_CPLSilentLogging)
  {
    int v19 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = [v15 recordType];
      *(_DWORD *)buf = 138412546;
      id v30 = v20;
      __int16 v31 = 2112;
      uint64_t v32 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Error deserializing base CKRecord, unarchived recordType: %@ not equal to expected recordType: %@", buf, 0x16u);
    }
  }
LABEL_24:

LABEL_25:
  id v15 = [objc_alloc((Class)CKRecord) initWithRecordType:v7 recordID:v12];
  id v26 = [v6 targetState];
  if ((unint64_t)v26 <= 3
    && v26 != (id)2
    && (![v5 isFullRecord] || objc_msgSend(v5, "isSparseFullChange")))
  {
    [v15 setKnownToServer:1];
    [v15 setEtag:@"-gateon"];
  }
LABEL_30:

  return v15;
}

void sub_10007588C(_Unwind_Exception *a1)
{
}

void sub_100075898(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1000758A4);
}

id CPLBaseSharedCKRecordFromCPLRecordChange(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v26 = a2;
  id v6 = a3;
  uint64_t v7 = CKRecordTypeForCPLRecordChangeClass((uint64_t)[v5 recordClass]);
  id v8 = [v26 zoneID];
  id v9 = [v6 otherScopedIdentifier];
  long long v10 = [v9 identifier];

  if (!v10) {
    sub_1001CBDE0((uint64_t)v5);
  }
  unint64_t v11 = (unint64_t)[objc_alloc((Class)CKRecordID) initWithRecordName:v10 zoneID:v8];
  unint64_t v12 = [v5 sharingRecordChangeData];
  if (!v12) {
    goto LABEL_23;
  }
  long long v13 = +[CPLArchiver unarchiveObjectWithData:v12 ofClass:objc_opt_class()];
  id v14 = v13;
  if (!v13) {
    goto LABEL_23;
  }
  id v15 = [v13 recordType];
  unint64_t v16 = (unint64_t)v15;
  if (v15 && v7)
  {
    unsigned __int8 v17 = [v15 isEqual:v7];

    if ((v17 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    id v20 = [v14 recordID];
    unint64_t v21 = (unint64_t)v20;
    if (v20 && v11)
    {
      unsigned __int8 v22 = [v20 isEqual:v11];

      if (v22) {
        goto LABEL_25;
      }
    }
    else
    {

      if (!(v21 | v11)) {
        goto LABEL_25;
      }
    }
    if (!_CPLSilentLogging)
    {
      unsigned __int8 v23 = __CPLGenericOSLogDomain();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = [v14 recordID];
        *(_DWORD *)buf = 138412546;
        id v28 = v24;
        __int16 v29 = 2112;
        uint64_t v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Error deserializing base shared CKRecord, unarchived recordID: %@ not equal to expected recordID: %@", buf, 0x16u);
      }
    }
    goto LABEL_22;
  }

  if (!(v16 | v7)) {
    goto LABEL_13;
  }
LABEL_7:
  if (!_CPLSilentLogging)
  {
    unsigned __int8 v18 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = [v14 recordType];
      *(_DWORD *)buf = 138412546;
      id v28 = v19;
      __int16 v29 = 2112;
      uint64_t v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Error deserializing base shared CKRecord, unarchived recordType: %@ not equal to expected recordType: %@", buf, 0x16u);
    }
  }
LABEL_22:

LABEL_23:
  id v14 = [objc_alloc((Class)CKRecord) initWithRecordType:v7 recordID:v11];
  if (((unint64_t)[v6 targetState] & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    [v14 setKnownToServer:1];
    [v14 setEtag:@"-gateon"];
  }
LABEL_25:

  return v14;
}

void sub_100075CA8(_Unwind_Exception *a1)
{
}

void sub_100075CB4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x100075CC0);
}

id CPLCKReferenceToUser(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && ![v3 isEqualToString:CKCurrentUserDefaultName])
  {
    id v6 = objc_alloc((Class)CKReference);
    id v7 = [objc_alloc((Class)CKRecordID) initWithRecordName:v3];
    id v5 = [v6 initWithRecordID:v7 action:0];
  }
  else
  {
    id v5 = [objc_alloc((Class)CKReference) initWithRecordID:v4 action:0];
  }

  return v5;
}

id sub_1000769CC()
{
  if (qword_1002CE800 != -1) {
    dispatch_once(&qword_1002CE800, &stru_100279238);
  }
  uint64_t v0 = (void *)qword_1002CE808;
  return v0;
}

void sub_1000779B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, __int16 a14, id a15)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(a1);
    if (!_CPLSilentLogging)
    {
      unsigned __int8 v17 = sub_100077AB0();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = [v15 recordType];
        int v19 = [v15 recordID];
        id v20 = [v19 recordName];
        LODWORD(buf) = 138543874;
        *(void *)((char *)&buf + 4) = v18;
        WORD6(buf) = 2114;
        *(void *)((char *)&buf + 14) = v20;
        a14 = 2112;
        a15 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Exception while converting to property list for %{public}@.%{public}@, ignoring: %@", (uint8_t *)&buf, 0x20u);
      }
    }

    objc_end_catch();
    JUMPOUT(0x100077760);
  }
  _Unwind_Resume(a1);
}

id sub_100077AB0()
{
  if (qword_1002CE810 != -1) {
    dispatch_once(&qword_1002CE810, &stru_100279258);
  }
  uint64_t v0 = (void *)qword_1002CE818;
  return v0;
}

void sub_100077E08(_Unwind_Exception *a1)
{
}

id CPLDynamicFingerPrintFromCloudKitFingerPrint(void *a1)
{
  if (a1)
  {
    a1 = [@"#" stringByAppendingString:a1];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100078F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100078F60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100078F70(uint64_t a1)
{
}

void sub_100078F78(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) supportsResourceType:a2])
  {
    char v9 = 1;
    id v4 = [*(id *)(a1 + 40) cplResourceWithType:a2 scopedIdentifier:*(void *)(a1 + 48) forRecord:*(void *)(a1 + 32) isCoherent:&v9 scopeProvider:*(void *)(a1 + 56)];
    if (v4)
    {
      id v5 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      if (!v5)
      {
        id v6 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
        id v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        id v5 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      }
      [v5 addObject:v4];
      if (!v9) {
        **(unsigned char **)(a1 + 72) = 0;
      }
    }
  }
}

void sub_1000795BC(id a1)
{
  if (qword_1002CE7F8 != -1) {
    dispatch_once(&qword_1002CE7F8, &stru_100279218);
  }
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  id v2 = (void *)qword_1002CE7E0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000796A4;
  v6[3] = &unk_1002791A8;
  id v3 = v1;
  id v7 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v6];
  id v4 = (void *)qword_1002CE7F0;
  qword_1002CE7F0 = (uint64_t)v3;
  id v5 = v3;
}

void sub_1000796A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 ckAssetProperties];
  if ([v6 count])
  {
    id v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v6, "count"));
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v5];
    id v8 = objc_alloc_init((Class)CKAssetTransferOptions);
    [v8 setShouldFetchAssetContent:&__kCFBooleanTrue];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v9 = v6;
    id v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        long long v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, *(void *)(*((void *)&v14 + 1) + 8 * (void)v13), (void)v14);
          long long v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }
  }
}

uint64_t CPLIsDynamicResource(void *a1)
{
  id v1 = [a1 identity];
  id v2 = [v1 fingerPrint];
  uint64_t v3 = CPLIsDynamicResourceFingerprint();

  return v3;
}

BOOL sub_10007A56C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = [a2 cachedRecordWithID:*(void *)(a1 + 32)];
  if (v8)
  {
    id v9 = sub_100096768(*(void *)(a1 + 40));
    id v10 = [v8 objectForKeyedSubscript:v9];

    if (v10)
    {
      if ([*(id *)(a1 + 48) isEqualToString:v10])
      {
        id v11 = sub_1000967A4(*(void *)(a1 + 40));
        uint64_t v12 = [v8 objectForKeyedSubscript:v11];

        BOOL v13 = v12 != 0;
        if (v12)
        {
          id v27 = objc_alloc((Class)CKAssetReference);
          uint64_t v14 = *(void *)(a1 + 32);
          id v15 = [*(id *)(a1 + 64) databaseScope];
          long long v16 = sub_1000967A4(*(void *)(a1 + 40));
          long long v17 = [v12 signature];
          id v18 = [v27 initWithExistingRecordID:v14 databaseScope:v15 fieldName:v16 fileSignature:v17];

          id v19 = [objc_alloc((Class)CKAsset) initWithAssetReference:v18];
          +[CPLFingerprintScheme configureAssetTransferOptionsForCKAsset:v19 fromReference:v18 scopeProvider:*(void *)(a1 + 72)];
          id v20 = sub_1000967A4(*(void *)(a1 + 56));
          [v7 setCKAsset:v19 forKey:v20];
        }
        else
        {
          id v25 = objc_alloc((Class)NSString);
          sub_1000967A4(*(void *)(a1 + 40));
          id v18 = (id)objc_claimAutoreleasedReturnValue();
          *a4 = [v25 initWithFormat:@"%@ not found on source record", v18];
        }
      }
      else
      {
        id v23 = objc_alloc((Class)NSString);
        uint64_t v12 = sub_100096768(*(void *)(a1 + 40));
        id v24 = sub_100096768(*(void *)(a1 + 56));
        *a4 = [v23 initWithFormat:@"%@ on source record does not match %@ on destination record", v12, v24];

        BOOL v13 = 0;
      }
    }
    else
    {
      id v21 = objc_alloc((Class)NSString);
      uint64_t v12 = sub_100096768(*(void *)(a1 + 40));
      id v22 = [v21 initWithFormat:@"%@ not found on source record", v12];
      BOOL v13 = 0;
      *a4 = v22;
    }
  }
  else
  {
    BOOL v13 = 0;
    *a4 = @"source record not found on server";
  }

  return v13;
}

void sub_10007A810(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)(a1 + 48) + a2)
    && ([*(id *)(a1 + 32) shouldProtectResourceTypeFromClearing:a2] & 1) == 0
    && (+[CPLResource shouldIgnoreResourceTypeOnUpload:](CPLResource, "shouldIgnoreResourceTypeOnUpload:", a2) & 1) == 0&& [*(id *)(a1 + 32) supportsResourceType:a2])
  {
    id v4 = sub_1000961D8((uint64_t)CPLCloudKitResourceKeys, a2);
    if (v4)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      id v5 = objc_opt_class();
      id v6 = sub_1000966C0(v4, v5);
      id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", 0, *(void *)(*((void *)&v11 + 1) + 8 * i), (void)v11);
          }
          id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v8);
      }
    }
  }
}

id CPLCloudKitFingerPrintFromDynamicFingerPrint(void *a1)
{
  id v1 = a1;
  if (CPLIsDynamicResourceFingerprint())
  {
    id v2 = [v1 substringFromIndex:1];
  }
  else
  {
    id v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

void sub_10007B94C(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLPerson"];
  [v2 setObject:@"CPLPerson" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLMaster"];
  [v2 setObject:@"CPLMaster" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLAsset"];
  [v2 setObject:@"CPLAsset" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLAlbum"];
  [v2 setObject:@"CPLAlbum" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLMemory"];
  [v2 setObject:@"CPLMemory" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLSocialGroup"];
  [v2 setObject:@"CPLSocialGroup" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLSuggestion"];
  [v2 setObject:@"CPLSuggestion" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLFaceCrop"];
  [v2 setObject:@"CPLFaceCrop" forKeyedSubscript:objc_opt_class()];
  [v1 setObject:objc_opt_class() forKeyedSubscript:@"CPLContainerRelation"];
  [v2 setObject:@"CPLContainerRelation" forKeyedSubscript:objc_opt_class()];
  uint64_t v3 = (void *)qword_1002CE7D8;
  qword_1002CE7D8 = (uint64_t)v1;
  id v5 = v1;

  id v4 = (void *)qword_1002CE7E0;
  qword_1002CE7E0 = (uint64_t)v2;
}

void sub_10007BBEC(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.translate");
  uint64_t v3 = qword_1002CE808;
  qword_1002CE808 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10007BC2C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.encrypt");
  uint64_t v3 = qword_1002CE818;
  qword_1002CE818 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10007BC6C(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1002CE828 = [v1 BOOLForKey:@"CPLDontAddBoundaryKeyToCKAssetReferences"] ^ 1;
}

void sub_10007BCC8(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

uint64_t sub_10007BCE8()
{
  return objc_opt_class();
}

id sub_10007BD00(id a1)
{
  return a1;
}

void sub_10007BE94(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  if (a3)
  {
    (*(void (**)(void))(v6[34] + 16))();
  }
  else
  {
    id v21 = 0;
    unsigned __int8 v7 = [v6 shouldRunOperationsWithError:&v21];
    id v8 = v21;
    uint64_t v9 = *(void **)(a1 + 32);
    if (v7)
    {
      if (!v9[35])
      {
        id v10 = [v9 controller];
        long long v11 = [*(id *)(*(void *)(a1 + 32) + 288) scopeIdentifier];
        uint64_t v12 = [v10 zoneIDFromScopeIdentifier:v11];

        long long v13 = [[CPLCloudKitScope alloc] initWithZoneID:v12 options:0];
        uint64_t v14 = *(void *)(a1 + 32);
        id v15 = *(void **)(v14 + 280);
        *(void *)(v14 + 280) = v13;

        uint64_t v9 = *(void **)(a1 + 32);
      }
      long long v16 = [v9 controller];
      long long v17 = [v16 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) engineScope:*(void *)(*(void *)(a1 + 32) + 288)];

      id v18 = [v17 recordsToUpdateFromScopeChange:*(void *)(*(void *)(a1 + 32) + 296) currentUserID:v5];
      id v19 = [v18 count];
      id v20 = *(void **)(a1 + 32);
      if (v19) {
        [v20 updateRecords:v18 cloudKitScope:v20[35] completionHandler:v20[34]];
      }
      else {
        (*(void (**)(void))(v20[34] + 16))();
      }
    }
    else
    {
      (*(void (**)(void))(v9[34] + 16))();
    }
  }
}

void sub_10007C178(id a1)
{
  uint64_t v1 = [[CPLDuetTicketProvider alloc] initWithClientBundlerIdentifier:@"com.apple.mobileslideshow"];
  uint64_t v2 = qword_1002CE830;
  qword_1002CE830 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_10007C39C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) overrideHasSignificantWork:1];
}

id sub_10007C498(uint64_t a1)
{
  return _[*(id *)(a1 + 32) overrideHasSignificantWork:0];
}

void sub_10007C5BC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isBlocked];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v4 = (unint64_t)[v3 _blockedReason];
    v20[0] = CPLStatusHasCellularBudgetKey;
    id v5 = +[NSNumber numberWithBool:(v4 & 1) == 0];
    v21[0] = v5;
    v20[1] = CPLStatusHasBatteryBudgetKey;
    long long v17 = +[NSNumber numberWithBool:(v4 & 2) == 0];
    v21[1] = v17;
    v20[2] = CPLStatusHasLowBatteryLevelKey;
    long long v16 = +[NSNumber numberWithBool:(v4 >> 3) & 1];
    v21[2] = v16;
    v20[3] = CPLStatusHasConstrainedNetworkKey;
    id v15 = +[NSNumber numberWithBool:(v4 >> 4) & 1];
    v21[3] = v15;
    v20[4] = CPLStatusIsBlockedByLowPowerModeKey;
    uint64_t v14 = +[NSNumber numberWithBool:(v4 >> 5) & 1];
    void v21[4] = v14;
    v20[5] = CPLStatusHasHeavyResourceUsageKey;
    id v6 = +[NSNumber numberWithBool:(v4 & 0xC0) != 0];
    v21[5] = v6;
    void v20[6] = CPLStatusHasPoorNetworkQualityKey;
    unsigned __int8 v7 = +[NSNumber numberWithBool:(v4 >> 8) & 1];
    v21[6] = v7;
    v20[7] = CPLStatusHasModerateThermalPressureKey;
    id v8 = +[NSNumber numberWithBool:(v4 >> 11) & 1];
    v21[7] = v8;
    v20[8] = CPLStatusHasThermalPressureKey;
    uint64_t v9 = +[NSNumber numberWithBool:(v4 >> 12) & 1];
    v21[8] = v9;
    v20[9] = CPLStatusHasPoorSystemConditionsKey;
    id v10 = +[NSNumber numberWithBool:(v4 & 0xA604) != 0];
    v21[9] = v10;
    v20[10] = CPLStatusBlockedReasonKey;
    long long v11 = +[NSNumber numberWithUnsignedInteger:v4];
    v20[11] = CPLStatusUnBlockedReasonKey;
    v21[10] = v11;
    v21[11] = &__kCFBooleanFalse;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:12];
  }
  else
  {
    id v13 = [v3 _unBlockedReason];
    v18[0] = CPLStatusHasCellularBudgetKey;
    v18[1] = CPLStatusHasBatteryBudgetKey;
    v19[0] = &__kCFBooleanTrue;
    v19[1] = &__kCFBooleanTrue;
    void v18[2] = CPLStatusHasLowBatteryLevelKey;
    v18[3] = CPLStatusHasConstrainedNetworkKey;
    v19[2] = &__kCFBooleanFalse;
    v19[3] = &__kCFBooleanFalse;
    v18[4] = CPLStatusIsBlockedByLowPowerModeKey;
    void v18[5] = CPLStatusHasHeavyResourceUsageKey;
    v19[4] = &__kCFBooleanFalse;
    v19[5] = &__kCFBooleanFalse;
    v18[6] = CPLStatusHasPoorNetworkQualityKey;
    v18[7] = CPLStatusHasModerateThermalPressureKey;
    v19[6] = &__kCFBooleanFalse;
    v19[7] = &__kCFBooleanFalse;
    v18[8] = CPLStatusHasThermalPressureKey;
    v18[9] = CPLStatusHasPoorSystemConditionsKey;
    v19[8] = &__kCFBooleanFalse;
    v19[9] = &__kCFBooleanFalse;
    v19[10] = &__kCFBooleanFalse;
    v18[10] = CPLStatusBlockedReasonKey;
    v18[11] = CPLStatusUnBlockedReasonKey;
    id v5 = +[NSNumber numberWithUnsignedInteger:v13];
    v19[11] = v5;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:12];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

unint64_t -[CPLDuetTicketProvider _blockedReason](CPLDuetTicketProvider *self, SEL a2)
{
  duetOverrideContext = self->_duetOverrideContext;
  unint64_t v4 = [(CPLDuetTicketProvider *)self _isBlockedKeyPath];
  id v5 = [(_CDClientContext *)duetOverrideContext objectForKeyedSubscript:v4];
  unint64_t v6 = (unint64_t)[v5 integerValue];

  unsigned __int8 v7 = self->_duetOverrideContext;
  id v8 = [(CPLDuetTicketProvider *)self _budgetOverrideKeyPath];
  uint64_t v9 = [(_CDClientContext *)v7 objectForKeyedSubscript:v8];
  unsigned __int16 v10 = (unsigned __int16)[v9 integerValue];

  unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v10 & 1) == 0) {
    unint64_t v11 = v6;
  }
  if ((v10 & 2) != 0) {
    v11 &= ~2uLL;
  }
  if ((v10 & 4) != 0) {
    v11 &= ~4uLL;
  }
  if ((v10 & 0x10) != 0) {
    v11 &= ~0x10uLL;
  }
  if ((v10 & 0x20) != 0) {
    v11 &= ~0x20uLL;
  }
  if ((v10 & 0x800) != 0) {
    v11 &= ~0x800uLL;
  }
  if ((v10 & 0x4000) != 0) {
    return v11 & 0xFFFFFFFFFFFF183FLL;
  }
  else {
    return v11;
  }
}

id -[CPLDuetTicketProvider _blockedReasonStatus](CPLDuetTicketProvider *self, SEL a2)
{
  id v3 = objc_alloc_init((Class)NSMutableArray);
  unsigned __int16 v4 = (unsigned __int16)[(CPLDuetTicketProvider *)self _blockedReason];
  unsigned __int16 v5 = v4;
  if (v4)
  {
    [v3 addObject:@"data"];
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"energy"];
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  [v3 addObject:@"lowBatteryLevel"];
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  [v3 addObject:@"significantWork"];
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  [v3 addObject:@"lowDataMode"];
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  [v3 addObject:@"lowPowerMode"];
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  [v3 addObject:@"cpu"];
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  [v3 addObject:@"memory"];
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  [v3 addObject:@"networkQuality"];
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  [v3 addObject:@"thermalModerate"];
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  [v3 addObject:@"thermalHeavyOrAbove"];
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  [v3 addObject:@"smartPowerNap"];
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  [v3 addObject:@"thunderingHerd"];
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  [v3 addObject:@"groupScheduling"];
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_34:
  [v3 addObject:@"deviceActivity"];
  if ((v5 & 0x2000) != 0) {
LABEL_17:
  }
    [v3 addObject:@"other"];
LABEL_18:
  if ([v3 count])
  {
    id v6 = objc_alloc((Class)NSString);
    unsigned __int8 v7 = [v3 componentsJoinedByString:@" "];
    id v8 = (__CFString *)[v6 initWithFormat:@"(%@)", v7];
  }
  else
  {
    id v8 = @"(no reasons)";
  }

  return v8;
}

uint64_t sub_10007D14C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isBlocked])
  {
    if (!_CPLSilentLogging)
    {
      unsigned int v2 = sub_10007D2C4();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = [*(id *)(a1 + 32) _isBlockedKeyPath];
        unsigned __int16 v4 = [*(id *)(a1 + 32) _blockedReasonStatus];
        int v6 = 138543618;
        unsigned __int8 v7 = v3;
        __int16 v8 = 2114;
        uint64_t v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DAS (%{public}@) is reporting that CPL is blocked by %{public}@", (uint8_t *)&v6, 0x16u);

LABEL_8:
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    unsigned int v2 = sub_10007D2C4();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 32) _isBlockedKeyPath];
      int v6 = 138543362;
      unsigned __int8 v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DAS (%{public}@) is reporting that CPL is not blocked any more", (uint8_t *)&v6, 0xCu);
      goto LABEL_8;
    }
LABEL_9:
  }
  [*(id *)(*(void *)(a1 + 32) + 16) enumerateObjectsUsingBlock:&stru_1002792D8];
  return 1;
}

id sub_10007D2C4()
{
  if (qword_1002CE840 != -1) {
    dispatch_once(&qword_1002CE840, &stru_100279318);
  }
  uint64_t v0 = (void *)qword_1002CE848;
  return v0;
}

void sub_10007D318(id a1, CPLDuetTicketProviderBudgetDelegate *a2, BOOL *a3)
{
}

void sub_10007D6A0(id a1, CPLDuetTicketProviderBudgetDelegate *a2, BOOL *a3)
{
}

void sub_10007D71C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007D768(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.duet");
  uint64_t v3 = qword_1002CE848;
  qword_1002CE848 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10007DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_10007DD68()
{
  if (qword_1002CE850 != -1) {
    dispatch_once(&qword_1002CE850, &stru_1002796D0);
  }
  uint64_t v0 = (void *)qword_1002CE858;
  return v0;
}

void sub_10007DDBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10007DE9C;
  v9[3] = &unk_100277240;
  uint64_t v11 = *(void *)(a1 + 56);
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 40);
  [v7 dispatchAsync:v9];
  if (v5)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v6, v5);
    }
  }
}

id sub_10007DE9C(uint64_t a1)
{
  double v1 = (double)(unint64_t)++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  os_log_t v2 = *(void **)(a1 + 32);
  double v3 = v1 / (double)(unint64_t)[*(id *)(a1 + 40) count];
  return [v2 updateProgress:v3];
}

void sub_10007DF08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10007E024;
  v10[3] = &unk_1002793B8;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = *(id *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 72);
  id v13 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_10007E024(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (!_CPLSilentLogging)
  {
    double v3 = sub_10007DD68();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      unsigned __int16 v4 = [*(id *)(a1 + 48) componentsJoinedByString:@", "];
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Finished fetching %@ with error %@", buf, 0x16u);
    }
  }
  if (!v2) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 88)
    || !+[CPLCloudKitErrors isPartialFailureError:v2])
  {
    id v8 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v2 withRequestUUIDs:v8 description:@"Failed to fetch some records"];
  }
  else
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    id v20 = sub_10007E3BC;
    id v21 = sub_10007E3CC;
    id v22 = 0;
    id v5 = +[CPLCloudKitErrors errorsPerRecordIDForPartialFailureError:v2];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_10007E3D4;
    v18[3] = &unk_100279368;
    v18[4] = *(void *)(a1 + 32);
    void v18[5] = buf;
    [v5 enumerateKeysAndObjectsUsingBlock:v18];
    id v6 = *(void **)(*(void *)&buf[8] + 40);
    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
      id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v6 withRequestUUIDs:v7 description:@"Failed to fetch some records"];

      os_log_t v2 = (void *)v7;
    }

    _Block_object_dispose(buf, 8);
  }
  if (v6)
  {
    id v9 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
LABEL_14:
    id v10 = *(void **)(a1 + 56);
    if (v10)
    {
      id v11 = *(void **)(a1 + 64);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10007E550;
      v15[3] = &unk_100279390;
      id v16 = v10;
      id v17 = *(id *)(a1 + 72);
      [v11 enumerateKeysAndObjectsUsingBlock:v15];
    }
    id v12 = *(void **)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    if (v12)
    {
      id v14 = [v12 copy];
      (*(void (**)(uint64_t, id, void, void))(v13 + 16))(v13, v14, 0, 0);
    }
    else
    {
      (*(void (**)(void, void, void, void))(v13 + 16))(*(void *)(a1 + 80), *(void *)(a1 + 64), 0, 0);
    }
  }
}

void sub_10007E39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E3BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007E3CC(uint64_t a1)
{
}

void sub_10007E3D4(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!+[CPLCloudKitErrors isRecordNotFoundError:v8])
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_10007DD68();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        id v10 = [v7 recordName];
        id v11 = *(void **)(a1 + 32);
        id v12 = [v7 zoneID];
        uint64_t v13 = [v11 scopeIdentifierFromZoneID:v12];
        int v14 = 138412802;
        id v15 = v10;
        __int16 v16 = 2112;
        id v17 = v13;
        __int16 v18 = 2112;
        id v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch %@ in %@: %@", (uint8_t *)&v14, 0x20u);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

void sub_10007E550(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 didFetchRecordWithID:v7 record:v6];
  [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
}

void sub_10007E85C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  if (v7)
  {
    id v8 = a4;
    id v9 = a3;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10007E9AC;
    v14[3] = &unk_100279408;
    id v15 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v7, "count"));
    id v10 = v15;
    [v7 enumerateKeysAndObjectsUsingBlock:v14];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

    id v11 = v15;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void (**)(uint64_t, void, id, id))(v12 + 16);
    id v11 = a4;
    id v10 = a3;
    v13(v12, 0, v10, v11);
  }
}

void sub_10007E9AC(uint64_t a1, void *a2, void *a3)
{
  unsigned __int16 v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 recordName];
  [v4 setObject:v5 forKeyedSubscript:v6];
}

uint64_t sub_10007EB40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007ED4C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  [*(id *)(a1 + 32) addObjectsFromArray:a3];
  if (v7)
  {
    id v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_10007EE58;
    uint64_t v12 = &unk_100279390;
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    [v7 enumerateKeysAndObjectsUsingBlock:&v9];
    objc_msgSend(*(id *)(a1 + 56), "removeObjectForKey:", *(void *)(a1 + 64), v9, v10, v11, v12);
    [*(id *)(a1 + 72) _fetchNextOperationType:*(void *)(a1 + 56) followRemapping:*(unsigned __int8 *)(a1 + 88) recordIDMapping:*(void *)(a1 + 48) inResult:*(void *)(a1 + 40) storeRequestUUIDsIn:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 80)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_10007EE58(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int16 v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:a2];
  [v4 setObject:v6 forKeyedSubscript:v7];
}

uint64_t sub_10007F2CC(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(v3 + 16))(v3, 0, a1[4], a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, a1[5], a1[4]);
  }
}

void sub_1000808D0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a2;
  id v7 = a3;
  if (v13)
  {
    id v8 = [v13 scopedIdentifier];
    unsigned __int8 v9 = [v8 isEqual:*(void *)(a1 + 32)];

    if ((v9 & 1) == 0)
    {
      [v13 setScopedIdentifier:*(void *)(a1 + 32)];
      [v13 awakeFromStorage];
    }
    [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:*(void *)(a1 + 32)];
  }
  id v10 = objc_alloc((Class)CPLRecordTarget);
  id v11 = [*(id *)(a1 + 48) scopedIdentifier];
  id v12 = [v10 initWithScopedIdentifier:v11 otherScopedIdentifier:v7 targetState:a4];

  [*(id *)(a1 + 56) setTarget:v12 forRecordWithScopedIdentifier:*(void *)(a1 + 32)];
  [*(id *)(a1 + 64) removeObject:*(void *)(a1 + 32)];
}

void sub_100080E08(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    unsigned __int16 v4 = [v6 scopeIdentifier];
    id v5 = [v3 cloudKitScopeForScopeIdentifier:v4];

    if (v5) {
      [*(id *)(a1 + 48) addObject:v6];
    }
  }
}

void sub_100080EA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = *(void **)(a1 + 32);
    if (v10)
    {
      id v11 = v10;
      [v11 addEntriesFromDictionary:v7];
    }
    else
    {
      id v11 = [v7 mutableCopy];
    }
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    id v20 = 0;
    unsigned __int8 v18 = [v12 _mergeFoundCKRecords:v11 updateFoundCPLRecords:v13 remainingScopedIdentifiers:v14 fetchedScopedIdentifiers:v15 userRecordID:v16 targetMapping:v17 error:&v20];
    id v19 = v20;
    if (v18) {
      [*(id *)(a1 + 40) _fetchRecordsForRemainingScopedIdentifiers:*(void *)(a1 + 56) alreadyFetchedScopedIdentifiers:*(void *)(a1 + 64) userRecordID:*(void *)(a1 + 72) foundCPLRecords:*(void *)(a1 + 48) foundCKRecords:v11 targetMapping:*(void *)(a1 + 80) completionHandler:*(void *)(a1 + 88)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

void sub_1000810A8(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6)
  {
    id v3 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(a1 + 32)];
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    id v5 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    [*(id *)(a1 + 40) _fetchRecordsForRemainingScopedIdentifiers:v3 alreadyFetchedScopedIdentifiers:v5 userRecordID:v6 foundCPLRecords:v4 foundCKRecords:0 targetMapping:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000812EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10007DD68();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (*(unsigned char *)(a1 + 56)) {
        id v7 = "";
      }
      else {
        id v7 = " unknown";
      }
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 134218498;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      id v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated target mapping for %lu %stargets:\n%@", (uint8_t *)&v9, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000814FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v5 = *(id *)(a1 + 32);
    id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v20;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v20 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          __int16 v11 = [*(id *)(a1 + 40) targetForRecordWithScopedIdentifier:v10];
          id v12 = [v11 resourceScopedIdentifier];

          if (!v4) {
            sub_1001CC718(v10, a1);
          }
          [v4 setObject:v10 forKeyedSubscript:v12];
        }
        id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v7);
    }

    __int16 v13 = *(void **)(a1 + 48);
    uint64_t v14 = [v4 allKeys];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100081738;
    v16[3] = &unk_100279598;
    id v17 = v4;
    id v18 = *(id *)(a1 + 56);
    id v15 = v4;
    [v13 fetchRecordWithScopedIdentifiers:v14 completionHandler:v16];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100081738(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v3, "count"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100081850;
    v7[3] = &unk_100279570;
    id v8 = *(id *)(a1 + 32);
    id v9 = v4;
    id v5 = v4;
    [v3 enumerateKeysAndObjectsUsingBlock:v7];
    (*(void (**)(void, id, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v5, 0, v6);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100081850(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = [v5 objectForKeyedSubscript:a2];
  id v7 = [objc_alloc((Class)CPLPlaceholderRecord) initWithCKRecord:v6 scopedIdentifier:v8];

  if (v7) {
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v8];
  }
}

void sub_100081AB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100081BB8;
  v10[3] = &unk_100278760;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = *(id *)(a1 + 40);
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_100081BB8(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = +[CPLCloudKitErrors realErrorForError:v2];
    id v4 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v5 = objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName");
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v3, v4, @"Error fetching zone %@", v5 withRequestUUIDs description];
  }
  else
  {
    id v6 = 0;
  }
  id v7 = [*(id *)(a1 + 56) objectForKey:*(void *)(a1 + 48)];
  if (v7)
  {
    if (v6)
    {

      id v6 = 0;
    }
  }
  else if (!v6)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10007DD68();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(a1 + 64);
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        uint64_t v14 = v11;
        __int16 v15 = 2112;
        uint64_t v16 = v9;
        __int16 v17 = 2112;
        uint64_t v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to fetch %@ yet CloudKit returned no error, operation %@ returned %@", buf, 0x20u);
      }
    }
    id v12 = [*(id *)(a1 + 48) zoneName];
    id v6 = +[CPLErrors cplErrorWithCode:150, @"Failed to fetch zone %@ for unknown reasons", v12 description];
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_100081F0C(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 || !a3)
  {
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v10();
  }
  else
  {
    id v4 = objc_alloc((Class)CKRecordZoneID);
    id v5 = [*(id *)(a1 + 32) zoneName];
    id v6 = [*(id *)(a1 + 32) ownerName];
    id v7 = [v4 initWithZoneName:v5 ownerName:v6];

    uint64_t v8 = *(void *)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100082038;
    v11[3] = &unk_100279610;
    uint64_t v9 = *(void **)(a1 + 40);
    id v12 = *(id *)(a1 + 48);
    [v9 _fetchZoneForZoneID:v7 operationType:v8 completionHandler:v11];
  }
}

uint64_t sub_100082038(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000821D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(a1 + 32) addObjectsFromArray:v8];
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 48)];
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000;
    long long v20 = sub_10007E3BC;
    long long v21 = sub_10007E3CC;
    id v22 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000823C0;
    v12[3] = &unk_100279660;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 40);
    uint64_t v16 = &v17;
    id v15 = *(id *)(a1 + 64);
    [v7 enumerateKeysAndObjectsUsingBlock:v12];
    if ([(id)v18[5] count])
    {
      uint64_t v10 = *(void **)(a1 + 72);
      uint64_t v11 = [(id)v18[5] allObjects];
      [v10 _fetchRecordsFollowRemappingWithIDs:v11 alreadyFetchRecordIDs:*(void *)(a1 + 40) remappedRecordIDs:*(void *)(a1 + 56) realRecords:*(void *)(a1 + 64) type:*(void *)(a1 + 88) storeRequestUUIDsIn:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 80)];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    }

    _Block_object_dispose(&v17, 8);
  }
}

void sub_1000823A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000823C0(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id v6 = [v5 objectForKey:@"remappedRef"];
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 recordID];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v13];
    if (([*(id *)(a1 + 40) containsObject:v8] & 1) == 0)
    {
      id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      if (!v9)
      {
        id v10 = objc_alloc_init((Class)NSMutableSet);
        uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
        id v12 = *(void **)(v11 + 40);
        *(void *)(v11 + 40) = v10;

        id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      }
      [v9 addObject:v8];
    }
  }
  else
  {
    [*(id *)(a1 + 48) setObject:v5 forKeyedSubscript:v13];
  }
}

void sub_1000829D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v3();
    return;
  }
  if ([*(id *)(a1 + 40) count])
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v5 = *(id *)(a1 + 48);
    id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v33;
      char v9 = 1;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v33 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void *)(*((void *)&v32 + 1) + 8 * i);
          id v12 = [*(id *)(a1 + 64) _recordWithRecordID:v11 usingRealRecords:*(void *)(a1 + 56) remappedRecordIDs:*(void *)(a1 + 40) wantsAllRecords:*(unsigned __int8 *)(a1 + 80)];
          if (v12) {
            [v4 setObject:v12 forKeyedSubscript:v11];
          }
          else {
            char v9 = 0;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v7);

      if (!((*(unsigned char *)(a1 + 80) == 0) | v9 & 1))
      {
        uint64_t v13 = *(void *)(a1 + 72);
        uint64_t v14 = *(void *)(a1 + 32);
        id v15 = +[CPLErrors cplErrorWithCode:25 description:@"Record not found"];
        (*(void (**)(uint64_t, void, uint64_t, void *))(v13 + 16))(v13, 0, v14, v15);

LABEL_25:
        return;
      }
    }
    else
    {
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 80)
    && (id v16 = [*(id *)(a1 + 48) count], v16 != objc_msgSend(*(id *)(a1 + 56), "count")))
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v18 = *(id *)(a1 + 48);
    id v19 = [v18 countByEnumeratingWithState:&v36 objects:v43 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v37;
      uint64_t v31 = 138543362;
      do
      {
        for (j = 0; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v37 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v36 + 1) + 8 * (void)j);
          id v24 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v23, v31);

          if (v24) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = _CPLSilentLogging == 0;
          }
          if (v25)
          {
            id v26 = sub_10007DD68();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v31;
              uint64_t v42 = v23;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}@ record not found on server", buf, 0xCu);
            }
          }
        }
        id v20 = [v18 countByEnumeratingWithState:&v36 objects:v43 count:16];
      }
      while (v20);
    }

    uint64_t v27 = *(void *)(a1 + 72);
    uint64_t v28 = *(void *)(a1 + 32);
    __int16 v29 = +[CPLErrors cplErrorWithCode:25 description:@"Record not found"];
    (*(void (**)(uint64_t, void, uint64_t, void *))(v27 + 16))(v27, 0, v28, v29);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 72);
    id v30 = [*(id *)(a1 + 56) copy];
    (*(void (**)(uint64_t))(v17 + 16))(v17);
  }
}

void sub_100082E30(id a1)
{
  double v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.recordfetch");
  uint64_t v3 = qword_1002CE858;
  qword_1002CE858 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000833C0(id a1)
{
  id v3 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v3 integerForKey:@"CPLDefaultServerFeatureVersion"];
  if ((unint64_t)v1 <= 1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)v1;
  }
  qword_1002C9128 = v2;
}

uint64_t sub_1000836B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100083F5C()
{
  if (qword_1002CE868 != -1) {
    dispatch_once(&qword_1002CE868, &stru_100279738);
  }
  uint64_t v0 = (void *)qword_1002CE870;
  return v0;
}

void sub_100083FB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100084084;
  v8[3] = &unk_100278B18;
  void v8[4] = v6;
  id v9 = v5;
  uint64_t v12 = *(void *)(a1 + 56);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100084084(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v3)
  {
    id v4 = *v2;
    id v5 = [*v2 lastOperationRequestUUIDs];
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v3 scopeProvider:v4 withRequestUUIDs:v5 description:@"Error uploading records"];

    if (!v6) {
      sub_1001CCAE8((uint64_t)v3, a1, (uint64_t *)v2);
    }
    if (([v6 isCPLOperationCancelledError] & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_100083F5C();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          int v10 = 138412290;
          id v11 = v3;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to fix-up records: %@", (uint8_t *)&v10, 0xCu);
        }
      }
      if ([v6 isCPLErrorWithCode:18] && !_CPLSilentLogging)
      {
        uint64_t v8 = sub_100083F5C();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = *(void **)(a1 + 48);
          int v10 = 138412290;
          id v11 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Rejected CK updates: %@", (uint8_t *)&v10, 0xCu);
        }
      }
    }
  }
  else
  {
    id v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10008431C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (v3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000843E8;
    v6[3] = &unk_100278E38;
    void v6[4] = v5;
    id v7 = v3;
    [v5 _fetchSparseRecordsWithCompletionHandler:v6];
  }
  else
  {
    (*(void (**)(void))(v5[35] + 16))();
  }
}

id sub_1000843E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a3)
  {
    id v5 = *(uint64_t (**)(void))(v4[35] + 16);
    return (id)v5();
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10008449C;
    v8[3] = &unk_100276328;
    void v8[4] = v4;
    return [v4 _updateSparseRecords:a2 currentUserRecordID:v7 completionHandler:v8];
  }
}

uint64_t sub_10008449C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 280) + 16))();
}

void sub_10008452C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.sparserecordsfixup");
  uint64_t v3 = qword_1002CE870;
  qword_1002CE870 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_100084690(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _fetchSharedScopeWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[35] + 16))();
  }
}

void sub_100084998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000849C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000849D4(uint64_t a1)
{
}

void sub_1000849DC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_100084BC4();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = [v8 rootRecord];
        *(_DWORD *)buf = 138412290;
        id v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Fetched share metadata root record: %@", buf, 0xCu);
      }
    }
    uint64_t v13 = (void *)a1[4];
    uint64_t v14 = a1[5];
    id v19 = 0;
    uint64_t v15 = [v13 _scopeChangeFromShareMetadata:v8 currentUserID:v14 error:&v19];
    id v16 = v19;
    int v10 = v19;
    uint64_t v17 = *(void *)(a1[7] + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v15;

    if (!*(void *)(*(void *)(a1[7] + 8) + 40)) {
      objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v16);
    }
    goto LABEL_11;
  }
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a4);
  if (!_CPLSilentLogging)
  {
    int v10 = sub_100084BC4();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching metadata: %@", buf, 0xCu);
    }
LABEL_11:
  }
}

id sub_100084BC4()
{
  if (qword_1002CE878 != -1) {
    dispatch_once(&qword_1002CE878, &stru_1002797D0);
  }
  uint64_t v0 = (void *)qword_1002CE880;
  return v0;
}

void sub_100084C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100084CC0;
  v6[3] = &unk_100279788;
  id v7 = v3;
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_100084CC0(uint64_t a1)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    id v4 = (id *)(v3 + 40);
    if (!v5) {
      objc_storeStrong(v4, v2);
    }
  }
  uint64_t v6 = [*(id *)(a1 + 40) operationDidFinishWithError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      int v10 = sub_100084BC4();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL");
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138543618;
        id v26 = v11;
        __int16 v27 = 2112;
        uint64_t v28 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching share metadata for %{public}@: %@", buf, 0x16u);
      }
      uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    }
    uint64_t v13 = [v9 domain];
    uint64_t v14 = CKUnderlyingErrorDomain;
    if ([v13 isEqualToString:CKUnderlyingErrorDomain])
    {
      id v15 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code];

      if (v15 == (id)1017)
      {
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v17 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL");
        id v18 = +[CPLErrors cplErrorWithCode:34, v16, @"Share url not found %@: %@", v17, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) underlyingError description];
LABEL_23:

LABEL_26:
        (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 280) + 16))();

        return;
      }
    }
    else
    {
    }
    id v21 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) domain];
    if ([v21 isEqualToString:v14])
    {
      if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code] == (id)7)
      {

LABEL_25:
        id v18 = +[CPLErrors cplErrorWithCode:underlyingError:description:](CPLErrors, "cplErrorWithCode:underlyingError:description:", 35, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
        goto LABEL_26;
      }
      id v24 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code];

      if (v24 == (id)2008) {
        goto LABEL_25;
      }
    }
    else
    {
    }
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v17 = [*(id *)(a1 + 40) lastOperationRequestUUIDs];
    uint64_t v23 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL");
    id v18 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v22, v17, @"Error fetching metadata for %@: %@", v23, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) withRequestUUIDs description];

    goto LABEL_23;
  }
  if (!_CPLSilentLogging)
  {
    id v19 = sub_100084BC4();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      id v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Fetched shared scope: %@", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 280) + 16))();
}

void sub_1000855C8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  uint64_t v3 = qword_1002CE880;
  qword_1002CE880 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void *sub_100085608(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)a1[8];
    if (v4)
    {
      uint64_t v5 = [v4 groupNameForGroupName:v3];
    }
    else
    {
      uint64_t v5 = v3;
    }
    a1 = v5;
  }

  return a1;
}

void sub_100085A20(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v38 = v5;
  if (a3)
  {
    uint64_t v6 = [*(id *)(a1 + 32) engineLibrary];
    BYTE4(v33) = 0;
    LODWORD(v33) = 0;
    objc_msgSend(v6, "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:isBlockedByLowPowerMode:hasHeavyResourceUsage:hasPoorNetworkQuality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReason:unBlockedReason:", 0, 0, 0, 1, 0, 0, v33, 0, 0);
  }
  else
  {
    uint64_t v7 = [v5 objectForKey:CPLStatusHasCellularBudgetKey];
    unsigned int v37 = [v7 BOOLValue];

    long long v8 = [v38 objectForKey:CPLStatusHasBatteryBudgetKey];
    unsigned __int8 v9 = [v8 BOOLValue];

    int v10 = [v38 objectForKey:CPLStatusHasLowBatteryLevelKey];
    unsigned int v36 = [v10 BOOLValue];

    id v11 = [v38 objectForKey:CPLStatusHasConstrainedNetworkKey];
    unsigned int v35 = [v11 BOOLValue];

    uint64_t v12 = [v38 objectForKey:CPLStatusIsBlockedByLowPowerModeKey];
    unsigned int v34 = [v12 BOOLValue];

    uint64_t v13 = [v38 objectForKey:CPLStatusHasHeavyResourceUsageKey];
    id v14 = [v13 BOOLValue];

    id v15 = [v38 objectForKey:CPLStatusHasPoorNetworkQualityKey];
    unsigned __int8 v16 = [v15 BOOLValue];

    uint64_t v17 = [v38 objectForKey:CPLStatusHasModerateThermalPressureKey];
    unsigned __int8 v18 = [v17 BOOLValue];

    id v19 = [v38 objectForKey:CPLStatusHasThermalPressureKey];
    unsigned __int8 v20 = [v19 BOOLValue];

    id v21 = [v38 objectForKey:CPLStatusHasPoorSystemConditionsKey];
    unsigned __int8 v22 = [v21 BOOLValue];

    uint64_t v23 = 1;
    if ((v9 & 1) == 0)
    {
      id v24 = [*(id *)(a1 + 32) engineLibrary];
      BOOL v25 = [v24 systemMonitor];
      unsigned int v26 = [v25 hasEnoughPowerForAutomaticOverride];

      if (v26)
      {
        __int16 v27 = [*(id *)(a1 + 32) engineLibrary];
        uint64_t v28 = [v27 systemMonitor];
        [v28 startAutomaticOverridingSystemBudgets:2];

        uint64_t v23 = 1;
      }
      else
      {
        uint64_t v23 = 0;
      }
    }
    __int16 v29 = [v38 objectForKey:CPLStatusBlockedReasonKey];
    id v30 = [v29 integerValue];

    uint64_t v31 = [v38 objectForKey:CPLStatusUnBlockedReasonKey];
    id v32 = [v31 integerValue];

    uint64_t v6 = [*(id *)(a1 + 32) engineLibrary];
    BYTE4(v33) = 1;
    BYTE3(v33) = v22;
    BYTE2(v33) = v20;
    BYTE1(v33) = v18;
    LOBYTE(v33) = v16;
    objc_msgSend(v6, "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:isBlockedByLowPowerMode:hasHeavyResourceUsage:hasPoorNetworkQuality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReason:unBlockedReason:", v37, v23, v36, v35, v34, v14, v33, v30, v32);
  }
}

id sub_100085E4C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) opened];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 _updateBudgets];
  }
  return result;
}

void sub_100085FBC(uint64_t a1)
{
  if (os_variant_has_internal_content()) {
    +[CPLCloudKitFakeDynamicDerivatives setAllowsFakeDerivatives:1];
  }
  os_log_t v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_10008671C;
  v63[3] = &unk_100279820;
  v63[4] = v3;
  uint64_t v5 = [v2 addObserverForName:CKIdentityUpdateNotification object:0 queue:v4 usingBlock:v63];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;

  long long v8 = [*(id *)(a1 + 32) abstractObject];
  unsigned __int8 v9 = [v8 engineLibrary];
  unsigned int v10 = [v9 containerHasBeenWiped];

  if (v10) {
    [*(id *)(a1 + 32) _failAllFutureOperationsWithContainerHasBeenWipedError];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
  if (os_variant_has_internal_content())
  {
    id v11 = +[NSUserDefaults standardUserDefaults];
    uint64_t v12 = [v11 stringForKey:@"CPLRejectVideoStreamingIntents"];

    if (v12)
    {
      uint64_t v54 = a1;
      id v56 = objc_alloc_init((Class)NSMutableIndexSet);
      uint64_t v13 = +[NSCharacterSet whitespaceCharacterSet];
      id v14 = objc_alloc_init((Class)NSMutableArray);
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v53 = v12;
      id obj = [v12 componentsSeparatedByString:@","];
      id v15 = [obj countByEnumeratingWithState:&v59 objects:v64 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v60;
        do
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(void *)v60 != v17) {
              objc_enumerationMutation(obj);
            }
            id v19 = *(void **)(*((void *)&v59 + 1) + 8 * i);
            unsigned __int8 v20 = [v19 stringByTrimmingCharactersInSet:v13];
            id v21 = [&off_100294460 objectForKeyedSubscript:v20];
            unsigned __int8 v22 = v21;
            if (v21)
            {
              objc_msgSend(v56, "addIndex:", objc_msgSend(v21, "unsignedIntegerValue"));
              [v14 addObject:v20];
            }
            else if (!_CPLSilentLogging)
            {
              id v23 = v14;
              id v24 = sub_1000867F8();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v19;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Invalid intent name: %@", (uint8_t *)&buf, 0xCu);
              }

              id v14 = v23;
            }
          }
          id v16 = [obj countByEnumeratingWithState:&v59 objects:v64 count:16];
        }
        while (v16);
      }

      uint64_t v12 = v53;
      a1 = v54;
      if ([v14 count])
      {
        objc_storeStrong((id *)(*(void *)(v54 + 32) + 56), v14);
        *(unsigned char *)(*(void *)(v54 + 32) + 32) = 1;
        objc_storeStrong((id *)(*(void *)(v54 + 32) + 40), v56);
        BOOL v25 = +[NSUserDefaults standardUserDefaults];
        *(unsigned char *)(*(void *)(v54 + 32) + 48) = [v25 BOOLForKey:@"CPLRejectVideoStreamingAtContentLevel"];

        if (!_CPLSilentLogging)
        {
          unsigned int v26 = sub_1000867F8();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v27 = [v14 componentsJoinedByString:@", "];
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Will automatically reject video streaming for the following intents: %@", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
    if (!*(void *)(*(void *)(a1 + 32) + 64))
    {
      uint64_t v28 = [CPLCloudKitOperationGroupMapper alloc];
      __int16 v29 = [*(id *)(a1 + 32) engineLibrary];
      id v30 = [v29 clientLibraryBaseURL];
      uint64_t v31 = [(CPLCloudKitOperationGroupMapper *)v28 initWithMappingInFolderWithURL:v30];
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = *(void **)(v32 + 64);
      *(void *)(v32 + 64) = v31;
    }
  }
  unsigned int v34 = [*(id *)(a1 + 32) engineLibrary];
  unsigned int v35 = [v34 cloudLibraryResourceStorageURL];

  uint64_t v36 = [v35 URLByAppendingPathComponent:@"CloudKit" isDirectory:1];
  uint64_t v37 = *(void *)(a1 + 32);
  id v38 = *(void **)(v37 + 192);
  *(void *)(v37 + 192) = v36;

  long long v39 = +[NSFileManager defaultManager];
  [v39 removeItemAtURL:*(void *)(*(void *)(a1 + 32) + 192) error:0];

  id v40 = dispatch_get_global_queue(0, 0);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_10008684C;
  v57[3] = &unk_100275EA0;
  id v41 = v35;
  id v58 = v41;
  uint64_t v42 = v57;
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472;
  id v66 = sub_100091BB8;
  id v67 = &unk_100275DF8;
  id v68 = v42;
  dispatch_block_t v43 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
  dispatch_async(v40, v43);

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 240), "registerClient:");
  __int16 v44 = [*(id *)(a1 + 32) duetTicketProvider];
  [v44 addBudgetDelegate:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) _updateBudgets];
  id v45 = *(void **)(a1 + 32);
  if (!v45[28])
  {
    uint64_t v46 = +[CPLFingerprintContext sharedContext];
    uint64_t v47 = *(void *)(a1 + 32);
    __int16 v48 = *(void **)(v47 + 224);
    *(void *)(v47 + 224) = v46;

    id v45 = *(void **)(a1 + 32);
  }
  if (!v45[29])
  {
    uint64_t v49 = +[CPLCloudKitDefaultZoneManager sharedInstance];
    uint64_t v50 = *(void *)(a1 + 32);
    v51 = *(void **)(v50 + 232);
    *(void *)(v50 + 232) = v49;

    id v45 = *(void **)(a1 + 32);
  }
  [v45 setOpened:1];
  +[CPLCallObserver observeAsyncCallOn:selector:block:](CPLCallObserver, "observeAsyncCallOn:selector:block:");
  uint64_t v52 = *(void *)(a1 + 40);
  if (v52) {
    (*(void (**)(uint64_t, void))(v52 + 16))(v52, 0);
  }
}

void sub_10008671C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4[13])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_1000867F8();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned __int8 v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CloudKit identity has changed - informing scheduler", v9, 2u);
      }

      uint64_t v4 = *(void **)(a1 + 32);
    }
    uint64_t v6 = [v4 abstractObject];
    uint64_t v7 = [v6 engineLibrary];
    long long v8 = [v7 scheduler];
    [v8 noteServerMightBeAvailableNow];
  }
}

id sub_1000867F8()
{
  if (qword_1002CE8D0 != -1) {
    dispatch_once(&qword_1002CE8D0, &stru_100279B50);
  }
  uint64_t v0 = (void *)qword_1002CE8D8;
  return v0;
}

void sub_10008684C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) URLByAppendingPathComponent:@"TempCKAssetsForUpload" isDirectory:1];
  id v1 = +[NSFileManager defaultManager];
  [v1 removeItemAtURL:v2 error:0];
}

void sub_1000868C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008695C;
  v6[3] = &unk_100276018;
  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = v3;
  long long v8 = v4;
  id v5 = v3;
  [v4 _startWatchingAccountInfoChangesWithCompletionHandler:v6];
}

id sub_10008695C(uint64_t a1)
{
  [*(id *)(a1 + 32) callDidFinish];
  id result = [*(id *)(a1 + 40) opened];
  if (result)
  {
    uint64_t v3 = objc_opt_class();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086A10;
    void v4[3] = &unk_100275EA0;
    void v4[4] = *(void *)(a1 + 40);
    return +[CPLCallObserver observeSyncCallOn:v3 selector:"registerForFeatureChangeNotificationsUsingBlock:" block:v4];
  }
  return result;
}

void sub_100086A10(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100086AB0;
  v5[3] = &unk_100275EA0;
  void v5[4] = *(void *)(a1 + 32);
  uint64_t v2 = +[CSFFeatureManager registerForFeatureChangeNotificationsUsingBlock:v5];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 168);
  *(void *)(v3 + 168) = v2;
}

void sub_100086AB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100086BAC;
  v6[3] = &unk_100275EA0;
  void v6[4] = v1;
  uint64_t v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v8 = v3;
  uint64_t v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

void sub_100086BAC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2[19] != 3)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v6 = sub_1000867F8();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned __int8 v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Features have changed", v9, 2u);
        }

        uint64_t v2 = *(void **)(a1 + 32);
      }
      id v7 = [v2 abstractObject];
      id v8 = [v7 engineLibrary];
      uint64_t v3 = [v8 scheduler];

      [v3 noteQuotaHasChanged];
      goto LABEL_15;
    }
    if (_CPLSilentLogging) {
      return;
    }
    uint64_t v3 = sub_1000867F8();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    __int16 v10 = 0;
    uint64_t v4 = "Features have changed but user has logged off iCloud";
    dispatch_block_t v5 = (uint8_t *)&v10;
    goto LABEL_9;
  }
  if (_CPLSilentLogging) {
    return;
  }
  uint64_t v3 = sub_1000867F8();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v4 = "Features have changed but engine is closed";
    dispatch_block_t v5 = buf;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
  }
LABEL_15:
}

void sub_100086E44(uint64_t a1)
{
  [*(id *)(a1 + 32) _stopWatchingAccountInfoChanges];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 240), "unregisterClient:");
  uint64_t v4 = [*(id *)(a1 + 32) duetTicketProvider];
  [v4 removeBudgetDelegate:*(void *)(a1 + 32)];

  if (*(unsigned char *)(a1 + 48)) {
    [*(id *)(*(void *)(a1 + 32) + 208) unregister];
  }
  [*(id *)(a1 + 32) setOpened:0];
  id v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 184), "count"));
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v6 = *(id *)(*(void *)(a1 + 32) + 184);
  id v7 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v27;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = [*(id *)(*(void *)(a1 + 32) + 176) objectForKeyedSubscript:*(void *)(*((void *)&v26 + 1) + 8 * i)];
        [v5 addObject:v11];
      }
      id v8 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v8);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 176);
  *(void *)(v12 + 176) = 0;

  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 184);
  *(void *)(v14 + 184) = 0;

  id v16 = *(void **)(*(void *)(a1 + 32) + 24);
  unsigned __int8 v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  unsigned __int8 v22 = sub_1000870FC;
  id v23 = &unk_100276288;
  id v17 = v5;
  id v24 = v17;
  id v25 = *(id *)(a1 + 40);
  [v16 cancelAllOperationsWithCompletionHandler:&v20];
  if (*(void *)(*(void *)(a1 + 32) + 168))
  {
    +[CSFFeatureManager unregisterForFeatureChangeNotificationsUsingObserver:](CSFFeatureManager, "unregisterForFeatureChangeNotificationsUsingObserver:", v20, v21, v22, v23, v24);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 168);
    *(void *)(v18 + 168) = 0;
  }
}

uint64_t sub_1000870FC(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "shutdown", (void)v8);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100088EB8(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  uint64_t v4 = qword_1002CE890;
  qword_1002CE890 = (uint64_t)v3;
  _objc_release_x1(v3, v4);
}

void sub_10008919C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 256);
  if (*(unsigned char *)(a1 + 48))
  {
    if (v2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      id v3 = sub_1000867F8();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LOWORD(v13) = 0;
      uint64_t v4 = "Attempting to set significant work pending, when we were already marked as pending significant work";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v13, 2u);
LABEL_21:

      return;
    }
    if (!_CPLSilentLogging)
    {
      long long v9 = sub_1000867F8();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting significant work pending", (uint8_t *)&v13, 2u);
      }
    }
    id v10 = objc_alloc_init((Class)NSDate);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 256);
    *(void *)(v11 + 256) = v10;

    [*(id *)(a1 + 40) pushSignificantWorkIsPending];
  }
  else
  {
    if (!v2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      id v3 = sub_1000867F8();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LOWORD(v13) = 0;
      uint64_t v4 = "Attempting to set not pending significant work when we were already marked as not pending significant work";
      goto LABEL_20;
    }
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_1000867F8();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        [*(id *)(*(void *)(a1 + 32) + 256) timeIntervalSinceNow];
        int v13 = 134217984;
        double v14 = -v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting significant work not pending, had been set for %.02fs", (uint8_t *)&v13, 0xCu);
      }
    }
    [*(id *)(a1 + 40) popSignificantWorkIsPending];
    uint64_t v7 = *(void *)(a1 + 32);
    long long v8 = *(void **)(v7 + 256);
    *(void *)(v7 + 256) = 0;
  }
}

void sub_1000894D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors notImplementedError];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_10008BAEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008BC78(id a1)
{
  uint64_t v1 = _CPLArrayFromColonSeparatedList();
  uint64_t v2 = qword_1002CE898;
  qword_1002CE898 = v1;
  _objc_release_x1(v1, v2);
}

void sub_10008BD24(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  uint64_t v4 = [v1 objectForKey:@"CPLAllowsSyncOverCellular"];

  uint64_t v2 = v4;
  if (v4)
  {
    unint64_t v3 = (unint64_t)[v4 BOOLValue];
    uint64_t v2 = v4;
  }
  else
  {
    unint64_t v3 = byte_1002C91F0 != 0;
  }
  byte_1002C91F0 = v3;
  _objc_release_x1(v3, v2);
}

void sub_10008BDF4(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  uint64_t v4 = [v1 objectForKey:@"CPLAllowsSyncOverExpensiveNetwork"];

  uint64_t v2 = v4;
  if (v4)
  {
    unint64_t v3 = (unint64_t)[v4 BOOLValue];
    uint64_t v2 = v4;
  }
  else
  {
    unint64_t v3 = byte_1002C91F1 != 0;
  }
  byte_1002C91F1 = v3;
  _objc_release_x1(v3, v2);
}

void sub_10008BEC4(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  uint64_t v4 = [v1 objectForKey:@"CPLAllowsOperationsOverExpensiveNetwork"];

  uint64_t v2 = v4;
  if (v4)
  {
    unint64_t v3 = (unint64_t)[v4 BOOLValue];
    uint64_t v2 = v4;
  }
  else
  {
    unint64_t v3 = byte_1002C91F2 != 0;
  }
  byte_1002C91F2 = v3;
  _objc_release_x1(v3, v2);
}

void sub_10008C050(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4[14])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_1000867F8();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received account change notification", v6, 2u);
      }

      uint64_t v4 = *(void **)(a1 + 32);
    }
    [v4 _updateAccountInfoWithCompletionHandler:0];
  }
}

void sub_10008C374(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = a1[4];
  id v10 = *(void **)(v9 + 8);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10008C4E0;
  v17[3] = &unk_100279958;
  void v17[4] = v9;
  id v18 = v8;
  uint64_t v11 = (void *)a1[5];
  uint64_t v21 = a1[6];
  uint64_t v22 = a2;
  id v19 = v7;
  id v20 = v11;
  uint64_t v12 = v17;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v24 = v12;
  int v13 = v10;
  id v14 = v7;
  id v15 = v8;
  dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v13, v16);
}

uint64_t sub_10008C4E0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (!v3[14] || *(void *)(a1 + 64) != v3[15] || ![v3 opened]) {
    goto LABEL_18;
  }
  if (*(void *)(a1 + 40))
  {
    if (_CPLSilentLogging) {
      goto LABEL_18;
    }
    uint64_t v4 = sub_1000867F8();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 40);
    int v16 = 138412290;
    uint64_t v17 = v5;
    double v6 = "Fetching account info failed: %@";
    id v7 = v4;
    uint32_t v8 = 12;
    goto LABEL_8;
  }
  if (*(void *)(a1 + 48))
  {
    if (os_variant_has_internal_content())
    {
      uint64_t v9 = +[NSUserDefaults standardUserDefaults];
      uint64_t v4 = [v9 objectForKey:@"CPLWalrusEnabled"];
    }
    else
    {
      uint64_t v4 = 0;
    }
    [*(id *)(a1 + 32) _updateStateWithAccountInfo:*(void *)(a1 + 48) walrusEnabledDefault:v4];
    [*(id *)(a1 + 32) _updateStateWithAccountStatus:*(void *)(a1 + 72)];
    id v10 = [*(id *)(a1 + 32) abstractObject];
    uint64_t v11 = [v10 engineLibrary];
    objc_msgSend(v11, "setICloudLibraryClientIsNotAuthenticated:", objc_msgSend(*(id *)(a1 + 48), "hasValidCredentials") ^ 1);

    uint64_t v12 = +[NSDate date];
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(v13 + 160);
    *(void *)(v13 + 160) = v12;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144), *(id *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 152) = *(void *)(a1 + 72);
    goto LABEL_17;
  }
  if (_CPLSilentLogging) {
    goto LABEL_18;
  }
  uint64_t v4 = sub_1000867F8();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v16) = 0;
    double v6 = "Fetching account info returned no info";
    id v7 = v4;
    uint32_t v8 = 2;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v16, v8);
  }
LABEL_17:

LABEL_18:
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_10008D234(id *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  double v6 = [a1[4] objectForKey:v8];
  if (v6)
  {
    id v7 = [a1[6] _betterErrorForRecordId:v8 recordError:v5];
    [a1[5] setObject:v7 forKey:v6];
  }
}

void sub_10008D390(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10008D4CC;
  v10[3] = &unk_100276C98;
  id v5 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v5;
  void v10[4] = *(void *)(a1 + 32);
  double v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  id v7 = v4;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_10008D4CC(uint64_t a1)
{
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  unsigned int v3 = [v2 BOOLForKey:@"CPLUseCompactCloudKitStatus"];

  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v60 = [*(id *)(*(void *)(a1 + 32) + 24) status];
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v60, 0);
  }
  else
  {
    id v60 = +[NSDate date];
    id v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithObjects:", *(void *)(a1 + 40), 0);
    double v6 = [*(id *)(a1 + 32) errorForAllOperations];
    if (v6)
    {
      id v7 = objc_alloc((Class)NSString);
      id v8 = [v6 localizedDescription];
      id v9 = [v7 initWithFormat:@"Failing all operations with error: %@", v8];
      [v5 addObject:v9];
    }
    id v10 = [*(id *)(a1 + 32) fingerprintContext];
    id v11 = [v10 fingerprintSchemeForNewMasterAsset];

    id v56 = v11;
    id v12 = [v11 fingerprintSchemeDescription];
    uint64_t v13 = +[NSString stringWithFormat:@"Default fingerprint scheme: %@", v12];
    [v5 addObject:v13];

    if (+[CPLFingerprintScheme supportsEPP]) {
      CFStringRef v14 = @"YES";
    }
    else {
      CFStringRef v14 = @"NO";
    }
    id v15 = +[NSString stringWithFormat:@"EPP capable: %@", v14];
    [v5 addObject:v15];

    [v5 addObject:@"Account status:"];
    if (*(void *)(*(void *)(a1 + 32) + 144))
    {
      id v16 = objc_alloc((Class)NSString);
      if ([*(id *)(*(void *)(a1 + 32) + 144) hasValidCredentials]) {
        CFStringRef v17 = @"YES";
      }
      else {
        CFStringRef v17 = @"NO";
      }
      id v18 = [v16 initWithFormat:@"  has valid credentials: %@", v17];
      [v5 addObject:v18];

      id v19 = objc_alloc((Class)NSString);
      id v20 = +[CPLDateFormatter stringFromDateAgo:*(void *)(*(void *)(a1 + 32) + 160) now:v60];
      id v21 = [v19 initWithFormat:@"  last account info update request: %@", v20];
      [v5 addObject:v21];
    }
    else
    {
      [v5 addObject:@"  Waiting for Account Info"];
    }
    uint64_t v22 = [*(id *)(*(void *)(a1 + 32) + 208) reschedulerDescription];
    if (v22)
    {
      id v23 = [objc_alloc((Class)NSString) initWithFormat:@"Background scheduling: %@", v22];
      [v5 addObject:v23];
    }
    id v58 = (void *)v22;
    id v24 = [*(id *)(*(void *)(a1 + 32) + 208) taskStatusesWithNow:v60];
    if ([v24 count])
    {
      id v25 = objc_alloc((Class)NSString);
      long long v26 = [v24 componentsJoinedByString:@"\n  "];
      id v27 = [v25 initWithFormat:@"Tasks:\n  %@", v26];
      [v5 addObject:v27];
    }
    [*(id *)(a1 + 32) duetTicketProvider];
    id v57 = v59 = v6;
    if (v57)
    {
      long long v28 = [*(id *)(a1 + 32) duetTicketProvider];
      long long v29 = [v28 duetStatuses];

      if ([v29 count])
      {
        id v30 = [v29 componentsJoinedByString:@"\n  "];
        uint64_t v31 = +[NSString stringWithFormat:@"CoreDuet State:\n  %@", v30];
        [v5 addObject:v31];
      }
    }
    else
    {
      [v5 addObject:@"CoreDuet State: not supported for this engine"];
    }
    uint64_t v32 = [*(id *)(*(void *)(a1 + 32) + 24) status];
    [v5 addObject:v32];

    uint64_t v33 = +[CPLCloudKitFakeDynamicDerivatives fakeDerivativesDescription];
    if (v33)
    {
      id v34 = [objc_alloc((Class)NSString) initWithFormat:@"Fake derivatives: %@", v33];
      [v5 addObject:v34];
    }
    if (CPLCloudKitUseGateKeeper())
    {
      if ((unint64_t)CPLCloudKitGateKeeperDefaultDownloadType >= 3) {
        CFStringRef v35 = @"DDC: On (invalid transcode type)";
      }
      else {
        CFStringRef v35 = off_100279BA0[CPLCloudKitGateKeeperDefaultDownloadType];
      }
    }
    else if (CPLCloudKitGateKeeperDisabledByServer())
    {
      CFStringRef v35 = @"DDC: Off (disabled by server)";
    }
    else
    {
      CFStringRef v35 = @"DDC: Off";
    }
    [v5 addObject:v35];
    uint64_t v36 = [*(id *)(*(void *)(a1 + 32) + 80) statusWithIndent:@"  "];
    if (v36)
    {
      id v37 = [objc_alloc((Class)NSString) initWithFormat:@"Resource downloads:\n  %@", v36];
      [v5 addObject:v37];
    }
    id v38 = [*(id *)(*(void *)(a1 + 32) + 96) statusWithIndent:@"  "];
    if (v38)
    {
      id v39 = [objc_alloc((Class)NSString) initWithFormat:@"Compute state operations:\n  %@", v38];
      [v5 addObject:v39];
    }
    id v40 = *(void **)(*(void *)(a1 + 32) + 64);
    if (v40)
    {
      id v41 = [v40 mappingList];
      if ([v41 count])
      {
        id v42 = objc_alloc((Class)NSString);
        dispatch_block_t v43 = [v41 componentsJoinedByString:@"\n  "];
        id v44 = [v42 initWithFormat:@"Group mapping:\n  %@", v43];
        [v5 addObject:v44];
      }
    }
    [v5 addObject:@"Video streaming:"];
    uint64_t v45 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v45 + 32))
    {
      id v46 = objc_alloc((Class)NSString);
      uint64_t v47 = [*(id *)(*(void *)(a1 + 32) + 56) componentsJoinedByString:@", "];
      id v48 = [v46 initWithFormat:@"  automatically reject %@", v47];
      [v5 addObject:v48];

      uint64_t v45 = *(void *)(a1 + 32);
    }
    uint64_t v49 = [*(id *)(v45 + 72) status];
    uint64_t v50 = [*(id *)(*(void *)(a1 + 32) + 88) statusWithIndent:@"    "];
    id v51 = objc_alloc((Class)NSString);
    if (v50) {
      id v52 = [v51 initWithFormat:@"  cache: %@\n  requests:\n    %@", v49, v50];
    }
    else {
      id v52 = [v51 initWithFormat:@"  cache: %@", v49, v55];
    }
    long long v53 = v52;
    [v5 addObject:v52];

    uint64_t v54 = [v5 componentsJoinedByString:@"\n"];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10008DDA4(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 24) statusDictionary];
  id v2 = [v5 mutableCopy];
  unsigned int v3 = [*(id *)(a1 + 32) duetTicketProvider];
  uint64_t v4 = [v3 duetStatuses];

  if ([v4 count]) {
    [v2 setObject:v4 forKeyedSubscript:@"duet"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008E0A0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10008E128;
  v2[3] = &unk_100275DF8;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _updateAccountInfoWithCompletionHandler:v2];
}

uint64_t sub_10008E128(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008E278(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  id v3 = [v1 objectForKey:@"CPLDelayRecoveredDataClean"];

  if (v3)
  {
    if (objc_opt_respondsToSelector()) {
      unsigned __int8 v2 = [v3 BOOLValue];
    }
    else {
      unsigned __int8 v2 = 1;
    }
  }
  else
  {
    unsigned __int8 v2 = 1;
  }
  byte_1002CE8C0 = v2;
  _objc_release_x2();
}

void sub_10008E318(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  [v2 removeItemAtURL:*(void *)(a1 + 32) error:0];
}

void sub_10008E7CC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_1000867F8();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = *(objc_class **)(a1 + 40);
        uint64_t v4 = *(void *)(a1 + 48);
        CFStringRef v5 = @"Unknown record type";
        if (*(void *)(a1 + 56)) {
          CFStringRef v5 = *(const __CFString **)(a1 + 56);
        }
        *(_DWORD *)long long buf = 138412802;
        id v68 = v3;
        __int16 v69 = 2112;
        uint64_t v70 = v4;
        __int16 v71 = 2112;
        CFStringRef v72 = v5;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CloudKit Data Recovery is looking for CKAsset stored in %@.%@ (%@)", buf, 0x20u);
      }
    }
    if ([*(id *)(a1 + 48) isEqualToString:@"previewData"])
    {
      double v6 = [*(id *)(a1 + 40) recordName];
      unsigned int v7 = [v6 isEqualToString:@"cmm-root"];

      if (v7)
      {
        id v8 = *(void **)(a1 + 32);
        id v9 = [*(id *)(a1 + 40) zoneID];
        id v10 = [v8 scopeIdentifierFromZoneID:v9];

        id v11 = [*(id *)(a1 + 32) engineLibrary];
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472;
        v63[2] = sub_10008EFD8;
        v63[3] = &unk_100279A40;
        v63[4] = *(void *)(a1 + 32);
        id v66 = *(id *)(a1 + 80);
        id v64 = *(id *)(a1 + 64);
        id v65 = v10;
        id v12 = v10;
        [v11 provideScopeChangeForScopeWithIdentifier:v12 completionHandler:v63];

        return;
      }
    }
    if (([*(id *)(a1 + 48) isEqualToString:@"resFaceCropRes"] & 1) != 0
      || [*(id *)(a1 + 48) isEqualToString:@"resCustomUserAssetList"])
    {
      unsigned int v16 = [*(id *)(a1 + 48) isEqualToString:@"resFaceCropRes"];
      uint64_t v17 = *(void *)(a1 + 56);
      if (v16)
      {
        if (v17) {
          id v18 = +[CKRecord cpl_recordChangeClassForRecordType:](CKRecord, "cpl_recordChangeClassForRecordType:");
        }
        else {
          id v18 = (objc_class *)objc_opt_class();
        }
        CFStringRef v35 = v18;
        if (([(objc_class *)v18 isSubclassOfClass:objc_opt_class()] & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v36 = __CPLGenericOSLogDomain();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              uint64_t v37 = *(void *)(a1 + 56);
              *(_DWORD *)long long buf = 138412546;
              id v68 = v35;
              __int16 v69 = 2112;
              uint64_t v70 = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Invalid record class %@ for record type %@", buf, 0x16u);
            }
          }
          id v38 = +[NSAssertionHandler currentHandler];
          uint64_t v39 = *(void *)(a1 + 88);
          uint64_t v40 = *(void *)(a1 + 32);
          id v41 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
          [v38 handleFailureInMethod:v39, v40, v41, 2034, @"Invalid record class %@ for record type %@", v35, *(void *)(a1 + 56) object file lineNumber description];
          goto LABEL_45;
        }
      }
      else
      {
        if (v17) {
          id v19 = +[CKRecord cpl_recordChangeClassForRecordType:](CKRecord, "cpl_recordChangeClassForRecordType:");
        }
        else {
          id v19 = (objc_class *)objc_opt_class();
        }
        CFStringRef v35 = v19;
        if (([(objc_class *)v19 isSubclassOfClass:objc_opt_class()] & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v50 = __CPLGenericOSLogDomain();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              uint64_t v51 = *(void *)(a1 + 56);
              *(_DWORD *)long long buf = 138412546;
              id v68 = v35;
              __int16 v69 = 2112;
              uint64_t v70 = v51;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Invalid record class %@ for record type %@", buf, 0x16u);
            }
          }
          id v38 = +[NSAssertionHandler currentHandler];
          uint64_t v52 = *(void *)(a1 + 88);
          uint64_t v53 = *(void *)(a1 + 32);
          id v41 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
          [v38 handleFailureInMethod:v52, v53, v41, 2039, @"Invalid record class %@ for record type %@", v35, *(void *)(a1 + 56) object file lineNumber description];
LABEL_45:

          abort();
        }
      }
      id v42 = *(void **)(a1 + 32);
      dispatch_block_t v43 = [*(id *)(a1 + 40) zoneID];
      id v44 = [v42 scopeIdentifierFromZoneID:v43];

      uint64_t v45 = [*(id *)(a1 + 40) recordName];
      id v46 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:v44 identifier:v45];
      uint64_t v47 = [*(id *)(a1 + 32) engineLibrary];
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_10008F480;
      v58[3] = &unk_100279A90;
      v58[4] = *(void *)(a1 + 32);
      id v61 = *(id *)(a1 + 80);
      long long v62 = v35;
      id v59 = *(id *)(a1 + 56);
      id v60 = *(id *)(a1 + 64);
      [v47 provideRecordWithCloudScopeIdentifier:v46 completionHandler:v58];
    }
    else
    {
      uint64_t v20 = sub_100096258((uint64_t)CPLCloudKitResourceKeys, *(void **)(a1 + 48));
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void **)(a1 + 32);
        id v23 = [*(id *)(a1 + 40) zoneID];
        id v24 = [v22 scopeIdentifierFromZoneID:v23];

        id v25 = [*(id *)(a1 + 40) recordName];
        id v26 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:v24 identifier:v25];
        id v27 = objc_alloc_init((Class)CPLResourceIdentity);
        long long v28 = +[CKAsset cplFingerPrintForSignature:*(void *)(a1 + 72)];
        [v27 setFingerPrint:v28];

        long long v29 = [*(id *)(a1 + 32) _tempDestinationURLForRecoveredDataWithTempFolderURL:*(void *)(a1 + 64)];
        [v27 setFileURL:v29];
        id v30 = [objc_alloc((Class)CPLResource) initWithResourceIdentity:v27 itemScopedIdentifier:v26 resourceType:v21];
        uint64_t v31 = [*(id *)(a1 + 32) engineLibrary];
        v54[0] = _NSConcreteStackBlock;
        v54[1] = 3221225472;
        v54[2] = sub_10008F9E8;
        v54[3] = &unk_100279AE0;
        v54[4] = *(void *)(a1 + 32);
        id v32 = *(id *)(a1 + 80);
        uint64_t v33 = *(void *)(a1 + 88);
        id v56 = v32;
        uint64_t v57 = v33;
        id v55 = v29;
        id v34 = v29;
        [v31 provideCloudResource:v30 completionHandler:v54];
      }
      else
      {
        if (_CPLSilentLogging) {
          return;
        }
        id v24 = sub_1000867F8();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = *(objc_class **)(a1 + 40);
          uint64_t v49 = *(void *)(a1 + 56);
          *(_DWORD *)long long buf = 138412546;
          id v68 = v48;
          __int16 v69 = 2112;
          uint64_t v70 = v49;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CloudKit asked to recover %@.%@ but CPL does not know how to recover this kind of data", buf, 0x16u);
        }
      }
    }
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v13 = sub_1000867F8();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v14 = *(objc_class **)(a1 + 40);
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        id v68 = v14;
        __int16 v69 = 2112;
        uint64_t v70 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CloudKit requested CKAsset for %@.%@ but transport is closed. Should try later", buf, 0x16u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_10008EFD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  double v6 = *(void **)(*(void *)(a1 + 32) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10008F148;
  v13[3] = &unk_100279A18;
  uint64_t v19 = a3;
  id v18 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v21 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

void sub_10008F148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    if (v2 == 2)
    {
      id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    }
    else
    {
      if (v2 != 1) {
        return;
      }
      id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    }
    v3();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && ([*(id *)(a1 + 32) previewImageData], (uint64_t v4 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      id v5 = (void *)v4;
      double v6 = *(void **)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10008F374;
      v11[3] = &unk_1002799F0;
      id v12 = *(id *)(a1 + 64);
      [v6 _withTempCKAssetForData:v5 tempFolderURL:v7 block:v11];
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        id v8 = sub_1000867F8();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = *(void *)(a1 + 56);
          uint64_t v10 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v14 = v9;
          __int16 v15 = 2112;
          uint64_t v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to find preview data in %@'s scope change: %@", buf, 0x16u);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

void sub_10008F374(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1000867F8();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = 138412290;
        id v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to create CMM preview data on disk for recovery: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v7();
}

void sub_10008F480(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(*(void *)(a1 + 32) + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10008F5FC;
  v14[3] = &unk_100279A68;
  uint64_t v20 = a3;
  id v7 = *(id *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  id v19 = v7;
  id v15 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v16 = v8;
  uint64_t v17 = v9;
  id v18 = *(id *)(a1 + 48);
  id v10 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v23 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v13);
}

void sub_10008F5FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  switch(v2)
  {
    case 0:
      if (*(void *)(a1 + 80))
      {
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            id v11 = sub_1000867F8();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              uint64_t v13 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(a1 + 40);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v19 = v12;
              __int16 v20 = 2112;
              uint64_t v21 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CloudKit asked for a field for a record of type %@ but received %@", buf, 0x16u);
            }
          }
          (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
          return;
        }
        uint64_t v4 = *(void *)(a1 + 80);
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v5 = objc_opt_class();
      id v6 = *(void **)(a1 + 32);
      if (v4 == v5)
      {
        id v8 = [v6 resourceData];
        if (v8) {
          goto LABEL_15;
        }
      }
      else
      {
        id v7 = [v6 customUserAssetList];
        id v8 = [v7 data];

        if (v8)
        {
LABEL_15:
          uint64_t v9 = *(void **)(a1 + 48);
          uint64_t v10 = *(void *)(a1 + 56);
          v16[0] = _NSConcreteStackBlock;
          v16[1] = 3221225472;
          v16[2] = sub_10008F8DC;
          v16[3] = &unk_1002799F0;
          id v17 = *(id *)(a1 + 64);
          [v9 _withTempCKAssetForData:v8 tempFolderURL:v10 block:v16];

LABEL_27:
          return;
        }
      }
      if (!_CPLSilentLogging)
      {
        uint64_t v14 = sub_1000867F8();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v19 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to find resource data in %@", buf, 0xCu);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      goto LABEL_27;
    case 2:
      id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
      break;
    case 1:
      id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
      break;
    default:
      return;
  }
  v3();
}

void sub_10008F8DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1000867F8();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = 138412290;
        id v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to create resource data on disk for recovery: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v7();
}

void sub_10008F9E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(*(void *)(a1 + 32) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10008FB4C;
  v15[3] = &unk_100279AB8;
  uint64_t v20 = a3;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v19 = v7;
  uint64_t v21 = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v16 = v5;
  uint64_t v17 = v9;
  id v18 = v10;
  id v11 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100091BB8;
  block[3] = &unk_100275DF8;
  id v23 = v11;
  uint64_t v12 = v6;
  id v13 = v5;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v14);
}

id sub_10008FB4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (v2 == 2)
    {
      id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    else
    {
      if (v2 != 1) {
        goto LABEL_9;
      }
      id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    v3();
  }
  else
  {
    uint64_t v4 = [*(id *)(a1 + 32) identity];
    id v5 = [v4 fileURL];

    if (!v5) {
      sub_1001CCDC4((void *)(a1 + 32), a1);
    }
    id v6 = [objc_alloc((Class)CKAsset) initWithFileURL:v5];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
LABEL_9:
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  return [v7 _cleanTempRecoveredDataURL:v8];
}

void sub_10008FDA0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10008FEA8;
    v10[3] = &unk_1002786C0;
    id v11 = *(id *)(a1 + 80);
    [v3 _coordinator:v4 provideCKAssetWithRecordID:v5 fieldName:v6 recordType:v7 signature:v8 tempFolderURL:a2 completionHandler:v10];
  }
  else
  {
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v9();
  }
}

uint64_t sub_10008FEA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008FFB0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    uint64_t v2 = [*(id *)(a1 + 32) abstractObject];
    id v6 = [v2 engineLibrary];

    id v3 = [v6 scheduler];
    [v3 noteServerHasChanges];

    uint64_t v4 = [v6 supervisor];
    uint64_t v5 = [*(id *)(a1 + 32) abstractObject];
    [v4 transportNotedServerHasChanges:v5];
  }
}

id sub_100090740(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) abstractObject];
  id v3 = [v2 engineLibrary];
  [v3 setContainerHasBeenWiped:1];

  uint64_t v4 = *(void **)(a1 + 32);
  return [v4 _failAllFutureOperationsWithContainerHasBeenWipedError];
}

void sub_100090C18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v1 = [v2 engineLibrary];
  [v1 setICloudLibraryClientVersionTooOld:1];
}

void *sub_100090C78(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[14]) {
    return _[result _forceUpdateAccountInfoWithReason:@"Walrus has been enabled"];
  }
  return result;
}

id sub_10009104C(void *a1)
{
  id v2 = a1 + 4;
  id v3 = *(void **)(a1[4] + 176);
  if (v3)
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:a1[5]];

    if (v4) {
      sub_1001CCEB8(a1 + 5, (uint64_t)a1, v2);
    }
  }
  else
  {
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    id v6 = *(void **)(*v2 + 176);
    *(void *)(*v2 + 176) = v5;
  }
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = *(void **)(a1[4] + 176);
  return [v9 setObject:v7 forKeyedSubscript:v8];
}

void sub_10009123C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) opened] & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    id v10 = +[CPLErrors incorrectMachineStateErrorWithReason:@"Engine is closed"];
    id v6 = *(void (**)(void))(v7 + 16);
LABEL_9:
    v6();
    goto LABEL_10;
  }
  id v10 = [*(id *)(*(void *)(a1 + 32) + 176) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (v10)
  {
    id v2 = *(void **)(*(void *)(a1 + 32) + 184);
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)NSMutableSet);
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 184);
      *(void *)(v4 + 184) = v3;

      id v2 = *(void **)(*(void *)(a1 + 32) + 184);
    }
    if (([v2 containsObject:*(void *)(a1 + 40)] & 1) == 0)
    {
      [*(id *)(*(void *)(a1 + 32) + 184) addObject:*(void *)(a1 + 40)];
      [v10 start];
    }
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = +[CPLErrors notImplementedError];
  (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);

LABEL_10:
}

void sub_1000914C8(void *a1)
{
  id v2 = +[NSFileManager defaultManager];
  id v3 = v2;
  uint64_t v4 = a1[4];
  if (!*(unsigned char *)(v4 + 200))
  {
    uint64_t v5 = *(void *)(v4 + 192);
    id v25 = 0;
    unsigned __int8 v6 = [v2 createDirectoryAtURL:v5 withIntermediateDirectories:0 attributes:0 error:&v25];
    id v7 = v25;
    uint64_t v8 = v7;
    if ((v6 & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v19 = sub_1000867F8();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = [*(id *)(a1[4] + 192) path];
          *(_DWORD *)long long buf = 138412546;
          id v27 = v20;
          __int16 v28 = 2112;
          id v29 = v8;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to create temp folder %@: %@", buf, 0x16u);
        }
      }
      uint64_t v17 = *(void (**)(void))(a1[6] + 16);
      goto LABEL_22;
    }
    *(unsigned char *)(a1[4] + 200) = 1;

    uint64_t v4 = a1[4];
  }
  char v24 = 0;
  uint64_t v8 = [*(id *)(v4 + 192) URLByAppendingPathComponent:a1[5] isDirectory:1];
  uint64_t v9 = [v8 path];
  unsigned int v10 = [v3 fileExistsAtPath:v9 isDirectory:&v24];

  if (v10) {
    BOOL v11 = v24 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v17 = *(void (**)(void))(a1[6] + 16);
LABEL_22:
    v17();
    goto LABEL_29;
  }
  if (v10)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v12 = sub_1000867F8();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = (void *)a1[5];
        *(_DWORD *)long long buf = 138543362;
        id v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Temp destination %{public}@ already exists and is not a folder", buf, 0xCu);
      }
    }
    uint64_t v14 = a1[6];
    id v15 = +[CPLErrors unknownError];
    id v16 = *(void (**)(void))(v14 + 16);
  }
  else
  {
    id v23 = 0;
    unsigned int v18 = [v3 createDirectoryAtURL:v8 withIntermediateDirectories:0 attributes:0 error:&v23];
    id v15 = v23;
    if (v18)
    {
      id v16 = *(void (**)(void))(a1[6] + 16);
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v21 = sub_1000867F8();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = (void *)a1[5];
          *(_DWORD *)long long buf = 138543618;
          id v27 = v22;
          __int16 v28 = 2112;
          id v29 = v15;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to create temp destination %{public}@: %@", buf, 0x16u);
        }
      }
      id v16 = *(void (**)(void))(a1[6] + 16);
    }
  }
  v16();

LABEL_29:
}

void sub_100091BB8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100091C04(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit");
  uint64_t v3 = qword_1002CE8D8;
  qword_1002CE8D8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_10009202C()
{
  if (qword_1002CE8E0 != -1) {
    dispatch_once(&qword_1002CE8E0, &stru_100279D70);
  }
  uint64_t v0 = (void *)qword_1002CE8E8;
  return v0;
}

void sub_100092114(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 272) cancelDownloadTask:*(void *)(a1 + 40)])
  {
    if (([*(id *)(*(void *)(a1 + 32) + 272) hasDownloadTasks] & 1) == 0)
    {
      id v6 = [*(id *)(a1 + 32) currentOperation];
      [v6 cancel];
    }
  }
  else
  {
    os_log_t v2 = [*(id *)(a1 + 40) completionHandler];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = +[CPLErrors operationCancelledError];
    ((void (**)(void, uint64_t, void *))v2)[2](v2, v3, v4);

    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 288);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100092264;
    v7[3] = &unk_100279BC0;
    id v8 = *(id *)(a1 + 40);
    [v5 enumerateKeysAndObjectsUsingBlock:v7];
  }
}

id sub_100092264(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 removeObject:*(void *)(a1 + 32)];
}

void sub_10009234C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        unsigned int v10 = [v9 completionHandler];
        ((void (**)(void, void *, void))v10)[2](v10, v9, *(void *)(a1 + 32));
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_100092864(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v16 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  if ([v15 isCPLErrorWithCode:2002]) {
    CPLDisableCloudKitUseGateKeeper();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100092934(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isCPLErrorWithCode:2002]) {
    CPLDisableCloudKitUseGateKeeper();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009299C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[4];
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  id v14 = [v11 objectForKeyedSubscript:v8];
  id v12 = [v11 objectForKeyedSubscript:a1[5]];
  id v13 = [v11 objectForKeyedSubscript:a1[6]];

  (*(void (**)(uint64_t, id, void *, void *, id, void, id))(v7 + 16))(v7, v14, v12, v13, v10, 0, v9);
}

uint64_t sub_100092A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100093490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = [v5 cloudResource];
  [*(id *)(a1 + 32) addResource:v7];
  uint64_t v8 = [*(id *)(a1 + 40) _recordIDForResourcesWithItemScopedIdentifier:v6];
  [*(id *)(a1 + 48) setObject:v6 forKeyedSubscript:v8];

  [*(id *)(a1 + 56) setObject:v5 forKeyedSubscript:v8];
  id v9 = [v5 cloudRecord];

  if (!v9)
  {
    id v10 = *(void **)(*(void *)(a1 + 40) + 320);
    id v11 = [v7 itemScopedIdentifier];
    id v12 = [v10 objectForKeyedSubscript:v11];

    if (v12) {
      [v5 associateCloudResource:v7 ofRecord:v12];
    }
  }
  if (!_CPLSilentLogging)
  {
    id v13 = sub_10009202C();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = sub_1000967A4(*(void *)(a1 + 64));
      uint64_t v15 = [v5 cloudRecord];
      id v16 = (void *)v15;
      CFStringRef v17 = @"unknown record";
      int v18 = 138412802;
      id v19 = v7;
      if (v15) {
        CFStringRef v17 = (const __CFString *)v15;
      }
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      CFStringRef v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Downloading %@ from %@ (from %@)", (uint8_t *)&v18, 0x20u);
    }
  }
}

void sub_10009367C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100093758;
  v8[3] = &unk_100277588;
  id v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  uint64_t v11 = *(void *)(a1 + 32);
  double v13 = a3;
  id v12 = *(id *)(a1 + 48);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100093758(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didProgress:*(double *)(a1 + 64)];
  id v3 = *(id **)(a1 + 48);
  [v3[34] downloadProgress];
  objc_msgSend(v3, "updateProgress:");
  id v4 = [*(id *)(*(void *)(a1 + 48) + 272) cloudResourceForRecordWithScopedIdentifier:v2];
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10009386C;
    v6[3] = &unk_100277218;
    id v5 = *(void **)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    id v8 = v4;
    [v5 updateContextWithBlock:v6];
  }
}

id sub_10009386C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateProgress:*(void *)(a1 + 40) forResource:*(double *)(a1 + 48)];
}

void sub_10009387C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a7;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_1000939F8;
  v24[3] = &unk_100279C88;
  int v18 = *(void **)(a1 + 32);
  id v25 = *(id *)(a1 + 40);
  id v26 = v16;
  uint64_t v27 = *(void *)(a1 + 32);
  id v28 = *(id *)(a1 + 48);
  id v29 = v17;
  id v30 = v13;
  id v31 = *(id *)(a1 + 56);
  id v32 = v14;
  id v33 = v15;
  uint64_t v34 = a6;
  id v19 = v15;
  id v20 = v14;
  id v21 = v13;
  id v22 = v17;
  id v23 = v16;
  [v18 dispatchAsync:v24];
}

void sub_1000939F8(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v3 = [*(id *)(*(void *)(a1 + 48) + 272) cloudResourceForRecordWithScopedIdentifier:v2];
  if (v3)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100093C90;
    v12[3] = &unk_1002760B0;
    id v4 = *(void **)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = v3;
    id v15 = *(id *)(a1 + 64);
    [v4 updateContextWithBlock:v12];
  }
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10009202C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      uint64_t v6 = *(void *)(a1 + 72);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v17 = v6;
      __int16 v18 = 2112;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Got asset %@ - %@", buf, 0x16u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8)
  {
    uint64_t v9 = [*(id *)(*(void *)(a1 + 48) + 272) resourceTypeDescription];
    id v10 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v8, &__NSArray0__struct, @"Failed to download %@ for %@", v9, v2 withRequestUUIDs description];

    [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didFailToDownloadWithError:v10];
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 80), "setDownloadedItemCount:", (char *)objc_msgSend(*(id *)(a1 + 80), "downloadedItemCount") + 1);
    objc_msgSend(*(id *)(a1 + 80), "setDownloadedSize:", (char *)objc_msgSend(*(id *)(a1 + 72), "size") + (void)objc_msgSend(*(id *)(a1 + 80), "downloadedSize"));
    if (*(void *)(a1 + 104))
    {
      objc_msgSend(*(id *)(a1 + 80), "setTranscodedItemCount:", (char *)objc_msgSend(*(id *)(a1 + 80), "transcodedItemCount") + 1);
      uint64_t v11 = *(void *)(a1 + 104);
    }
    else
    {
      uint64_t v11 = 0;
    }
    [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didDownloadCKAsset:*(void *)(a1 + 72) withOperationType:*(void *)(*(void *)(a1 + 48) + 280) transcoderVersion:v11 withFingerPrint:*(void *)(a1 + 88) andFileUTI:*(void *)(a1 + 96)];
  }
}

id sub_100093C90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recordCompletionForResource:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_100093CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100093D58;
  v6[3] = &unk_1002760B0;
  void v6[4] = v4;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_100093D58(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v8)
  {
    os_log_t v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v3 = [*(id *)(*(void *)(a1 + 32) + 272) resourceTypeDescription];
    id v4 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v8, v2, @"Failed to download %@", v3 withRequestUUIDs description];
  }
  else
  {
    id v4 = 0;
  }
  id v5 = [*(id *)(a1 + 48) downloadedItemCount];
  if (v5 != [*(id *)(a1 + 48) requestedItemCount]) {
    [*(id *)(a1 + 48) setError:v4];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 272) hasDownloadTasks])
  {
    if (v4)
    {
      id v6 = v4;
    }
    else
    {
      id v6 = +[CPLErrors cplErrorWithCode:25 description:@"Record not found"];
    }
    id v7 = v6;
    [*(id *)(*(void *)(a1 + 32) + 272) allDownloadsDidFailWithError:v6];

    if (v4)
    {
      [*(id *)(a1 + 32) _finishRemainingTasksWithError:v4];

      goto LABEL_14;
    }
  }
  else
  {
  }
  [*(id *)(a1 + 32) _downloadNextGroup];
LABEL_14:
}

void sub_10009442C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v6)
  {
    id v33 = v7;
    id v34 = v6;
    uint64_t v32 = a1;
    uint64_t v9 = (id *)(a1 + 32);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 320), a2);
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 288);
    *(void *)(*(void *)(a1 + 32) + 288) = v10;

    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id obj = *(id *)(*(void *)(a1 + 32) + 328);
    id v12 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v36 = *(void *)v42;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v42 != v36) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v41 + 1) + 8 * i);
          uint64_t v17 = [*v9 _cloudKitScopeForTask:v15];
          if (!v17) {
            sub_1001CD1E8(v32, (uint64_t *)v9);
          }
          __int16 v18 = v17;
          uint64_t v19 = CPLCloudKitOperationTypeForScope(v17);
          id v20 = (void *)*((void *)*v9 + 36);
          id v21 = +[NSNumber numberWithInteger:v19];
          id v22 = [v20 objectForKeyedSubscript:v21];

          if (!v22)
          {
            id v22 = objc_alloc_init((Class)NSMutableArray);
            id v23 = (void *)*((void *)*v9 + 36);
            char v24 = +[NSNumber numberWithInteger:v19];
            [v23 setObject:v22 forKeyedSubscript:v24];
          }
          [v22 addObject:v15];
        }
        id v13 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
      }
      while (v13);
    }

    [*v9 _downloadNextOperationType];
    id v8 = v33;
    id v6 = v34;
  }
  else
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v25 = *(id *)(*(void *)(a1 + 32) + 328);
    id v26 = [v25 countByEnumeratingWithState:&v37 objects:v45 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v38;
      do
      {
        for (j = 0; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v38 != v28) {
            objc_enumerationMutation(v25);
          }
          id v30 = *(void **)(*((void *)&v37 + 1) + 8 * (void)j);
          id v31 = [v30 completionHandler];
          ((void (**)(void, void *, void *))v31)[2](v31, v30, v8);
        }
        id v27 = [v25 countByEnumeratingWithState:&v37 objects:v45 count:16];
      }
      while (v27);
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 336) + 16))();
  }
}

void sub_100095A98(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        id v10 = [v9 completionHandler];
        ((void (**)(void, void *, void))v10)[2](v10, v9, *(void *)(a1 + 32));
      }
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_100095DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100095E00(uint64_t a1, uint64_t a2, void *a3)
{
  [a3 doubleValue];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  double result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_100095F00(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 firstObject];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100096198(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcesdownload");
  uint64_t v3 = qword_1002CE8E8;
  qword_1002CE8E8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1000961D8(uint64_t a1, uint64_t a2)
{
  self;
  if (qword_1002CE9E0 != -1) {
    dispatch_once(&qword_1002CE9E0, &stru_100279D90);
  }
  if ((unint64_t)(a2 - 1) > 0x1B) {
    id v3 = 0;
  }
  else {
    id v3 = qword_1002CE8F0[a2];
  }
  return v3;
}

uint64_t sub_100096258(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (qword_1002CE9E0 != -1) {
    dispatch_once(&qword_1002CE9E0, &stru_100279D90);
  }
  id v3 = [(id)qword_1002CE9D8 objectForKeyedSubscript:v2];

  if (v3) {
    uint64_t v4 = v3[1];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void *sub_1000966C0(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    uint64_t v4 = [a1 _allKeys];
    if ([a2 requiresStableHashForResourceType:v2[1]])
    {
      id v5 = [v4 arrayByAddingObject:v2[8]];
    }
    else
    {
      id v5 = v4;
    }
    id v2 = v5;
  }
  return v2;
}

uint64_t sub_100096744(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t sub_100096750(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_10009675C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t sub_100096768(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_100096774(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t sub_100096780(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t sub_10009678C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t sub_100096798(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t sub_1000967A4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t sub_1000967B0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

void sub_100096878(id a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100096940;
  void v4[3] = &unk_100278040;
  id v1 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:29];
  id v5 = v1;
  +[CPLResource enumerateResourceTypesWithBlock:v4];
  id v2 = (void *)qword_1002CE9D8;
  qword_1002CE9D8 = (uint64_t)v1;
  id v3 = v1;
}

uint64_t sub_100096940(uint64_t result, unint64_t a2)
{
  if (a2 <= 0x1C)
  {
    uint64_t v4 = result;
    switch(a2)
    {
      case 0uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = 0;
        uint64_t v7 = 0;
        goto LABEL_33;
      case 1uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resOriginal";
        uint64_t v7 = 1;
        goto LABEL_33;
      case 2uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resJPEGFull";
        uint64_t v7 = 2;
        goto LABEL_33;
      case 3uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resJPEGLarge";
        uint64_t v7 = 3;
        goto LABEL_33;
      case 4uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resJPEGMed";
        uint64_t v7 = 4;
        goto LABEL_33;
      case 5uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resJPEGThumb";
        uint64_t v7 = 5;
        goto LABEL_33;
      case 6uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidMed";
        uint64_t v7 = 6;
        goto LABEL_33;
      case 7uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidSmall";
        uint64_t v7 = 7;
        goto LABEL_33;
      case 8uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAudio";
        uint64_t v7 = 8;
        goto LABEL_33;
      case 9uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resSidecar";
        uint64_t v7 = 9;
        goto LABEL_33;
      case 0xAuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resMediaMetaData";
        uint64_t v7 = 10;
        goto LABEL_33;
      case 0xBuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = 0;
        uint64_t v7 = 11;
        goto LABEL_33;
      case 0xCuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = 0;
        uint64_t v7 = 12;
        goto LABEL_33;
      case 0xDuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjData";
        uint64_t v7 = 13;
        goto LABEL_33;
      case 0xEuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjSecondData";
        uint64_t v7 = 14;
        goto LABEL_33;
      case 0xFuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjBaseJPEG";
        uint64_t v7 = 15;
        goto LABEL_33;
      case 0x10uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidFull";
        uint64_t v7 = 16;
        goto LABEL_33;
      case 0x11uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resOriginalAlt";
        uint64_t v7 = 17;
        goto LABEL_33;
      case 0x12uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resOriginalVidCompl";
        uint64_t v7 = 18;
        goto LABEL_33;
      case 0x13uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidCompl";
        uint64_t v7 = 19;
        goto LABEL_33;
      case 0x14uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjBaseVid";
        uint64_t v7 = 20;
        goto LABEL_33;
      case 0x15uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidLarge";
        uint64_t v7 = 21;
        goto LABEL_33;
      case 0x16uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resSidecarOther";
        uint64_t v7 = 22;
        goto LABEL_33;
      case 0x17uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resOriginalSpatialOverCapture";
        uint64_t v7 = 23;
        goto LABEL_33;
      case 0x18uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resOriginalVidComplOverCapture";
        uint64_t v7 = 24;
        goto LABEL_33;
      case 0x19uLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjBaseNormalVid";
        uint64_t v7 = 25;
        goto LABEL_33;
      case 0x1AuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVideoMediaMetaData";
        uint64_t v7 = 26;
        goto LABEL_33;
      case 0x1BuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resAdjustedMediaMetaData";
        uint64_t v7 = 27;
        goto LABEL_33;
      case 0x1CuLL:
        id v5 = [CPLCloudKitResourceKeys alloc];
        CFStringRef v6 = @"resVidHDRMed";
        uint64_t v7 = 28;
LABEL_33:
        id v8 = [(CPLCloudKitResourceKeys *)v5 initWithPrefix:v6 resourceType:v7];
        break;
      default:
        id v8 = 0;
        break;
    }
    id obj = v8;
    objc_storeStrong(&qword_1002CE8F0[a2], v8);
    if (obj && obj->_resourceKey) {
      objc_msgSend(*(id *)(v4 + 32), "setObject:forKeyedSubscript:");
    }
    return _objc_release_x2();
  }
  return result;
}

id sub_1000971FC()
{
  if (qword_1002CE9E8 != -1) {
    dispatch_once(&qword_1002CE9E8, &stru_100279F18);
  }
  uint64_t v0 = (void *)qword_1002CE9F0;
  return v0;
}

void sub_100097250(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    uint64_t v34 = 0;
    CFStringRef v35 = &v34;
    uint64_t v36 = 0x2020000000;
    char v37 = 1;
    uint64_t v28 = 0;
    id v29 = &v28;
    uint64_t v30 = 0x3032000000;
    id v31 = sub_1000974D0;
    uint64_t v32 = sub_1000974E0;
    id v33 = 0;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000974E8;
    v17[3] = &unk_100279DB8;
    id v18 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    long long v13 = *(void **)(a1 + 56);
    id v19 = v11;
    uint64_t v20 = v12;
    long long v27 = *(_OWORD *)(a1 + 88);
    id v21 = v13;
    id v22 = *(id *)(a1 + 64);
    id v25 = &v28;
    id v26 = &v34;
    id v23 = *(id *)(a1 + 72);
    id v14 = v10;
    id v24 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v17];
    uint64_t v15 = *(void *)(a1 + 80);
    if (*((unsigned char *)v35 + 24))
    {
      id v16 = [v14 copy];
      (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v16, 0);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v15, 0, v29[5]);
    }

    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v34, 8);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_1000974AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000974D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000974E0(uint64_t a1)
{
}

void sub_1000974E8(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [v8 recordType];
  unsigned __int8 v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if (v10)
  {
    uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:v7];
    if (!v11) {
      sub_1001CD698((uint64_t)v7, a1);
    }
    uint64_t v12 = v11;
    long long v13 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]([CPLCKSplitCopyHelper alloc], "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:", 0, v7, 0, *(void *)(a1 + 112), [*(id *)(a1 + 56) databaseScope], v11, *(void *)(a1 + 64));
    uint64_t v14 = *(void *)(*(void *)(a1 + 88) + 8);
    id obj = *(id *)(v14 + 40);
    uint64_t v15 = [(CPLCKSplitCopyHelper *)v13 copiedRecordFromSourceRecord:v8 action:@"Copy (pseudo sparse record)" error:&obj];
    objc_storeStrong((id *)(v14 + 40), obj);
    if (v15)
    {
      objc_msgSend(v15, "cpl_updatePrivateRecordSharedToRecordWithID:currentUserRecordID:setSparseRecordFlag:force:", v7, *(void *)(a1 + 72), 1, 0);
      [*(id *)(a1 + 80) setObject:v15 forKeyedSubscript:v12];
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 0;
      *a4 = 1;
    }

LABEL_10:
    goto LABEL_11;
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v12 = sub_1000971FC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = [v8 recordType];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      id v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unexpected record type for shared record. Expected %@ and got %@", buf, 0x16u);
    }
    goto LABEL_10;
  }
LABEL_11:
}

void sub_100097A08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [_CPLCloudKitSimpleRecordUpdatePlanner alloc];
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v20 = v3;
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned __int8 v10 = [v5 controller];
    uint64_t v11 = [v10 propertyMapping];
    uint64_t v12 = [*(id *)(a1 + 32) fingerprintContext];
    uint64_t v13 = v7;
    id v3 = v20;
    uint64_t v14 = [(_CPLCloudKitSimpleRecordUpdatePlanner *)v4 initWithTask:v5 scopedIdentifiers:v6 destinationZoneIdentification:v13 sharedZoneIdentification:v8 targetMapping:v9 propertyMapping:v11 fingerprintContext:v12];

    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = objc_opt_class();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100097C40;
    v21[3] = &unk_100279E80;
    id v30 = *(id *)(a1 + 88);
    id v22 = v14;
    id v23 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v24 = v17;
    uint64_t v25 = v18;
    id v26 = *(id *)(a1 + 80);
    id v31 = *(id *)(a1 + 96);
    id v27 = v20;
    id v28 = *(id *)(a1 + 64);
    id v32 = *(id *)(a1 + 104);
    id v29 = *(id *)(a1 + 40);
    id v19 = v14;
    [v15 _createSparsePrivateRecordsIfNecessary:v19 recordClass:v16 userRecordID:v27 completionHandler:v21];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

void sub_100097C40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  id v32 = v5;
  if (v5)
  {
    id v31 = v6;
    uint64_t v8 = [*(id *)(a1 + 32) privateRecordIDs];
    id v9 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v8, "count"));
    id v33 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id obj = v8;
    id v10 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
    if (v10)
    {
      uint64_t v12 = *(void *)v48;
      *(void *)&long long v11 = 138412290;
      long long v29 = v11;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v48 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          uint64_t v15 = *(void **)(a1 + 48);
          uint64_t v16 = objc_msgSend(v14, "recordName", v29);
          id v17 = [v15 scopedIdentifierWithIdentifier:v16];

          uint64_t v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:v17];
          id v19 = v18;
          if (!v18) {
            goto LABEL_11;
          }
          uint64_t v20 = [v18 recordChangeData];
          BOOL v21 = v20 == 0;

          if (v21) {
            goto LABEL_11;
          }
          id v22 = [v19 recordChangeData];
          id v23 = +[CPLArchiver unarchiveObjectWithData:v22 ofClass:objc_opt_class()];

          if (v23)
          {
            [v33 setObject:v23 forKeyedSubscript:v14];
          }
          else
          {
LABEL_11:
            [v9 addObject:v14];
          }
        }
        id v10 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
      }
      while (v10);
    }

    id v24 = *(void **)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 64);
    id v26 = [*(id *)(a1 + 48) operationType];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100098128;
    v35[3] = &unk_100279E58;
    id v44 = *(id *)(a1 + 96);
    id v36 = v32;
    id v37 = *(id *)(a1 + 40);
    int8x16_t v30 = *(int8x16_t *)(a1 + 48);
    id v27 = (id)v30.i64[0];
    int8x16_t v38 = vextq_s8(v30, v30, 8uLL);
    id v39 = v33;
    id v45 = *(id *)(a1 + 104);
    id v40 = *(id *)(a1 + 32);
    id v41 = *(id *)(a1 + 72);
    id v42 = *(id *)(a1 + 80);
    id v46 = *(id *)(a1 + 112);
    id v43 = *(id *)(a1 + 88);
    id v28 = v33;
    [v24 fetchRecordsWithIDs:v9 fetchResources:0 desiredKeys:v25 wantsAllRecords:0 type:v26 completionHandler:v35];

    uint64_t v7 = v31;
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  }
}

void sub_1000980EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1000980F8);
  }
  _Unwind_Resume(a1);
}

void sub_100098108(_Unwind_Exception *a1)
{
}

void sub_100098114(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x100098120);
}

void sub_100098128(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", (char *)objc_msgSend(*(id *)(a1 + 32), "count")+ (void)objc_msgSend(v3, "count")+ (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100098388;
    v14[3] = &unk_100279E08;
    id v5 = *(void **)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 32);
    id v17 = v3;
    id v18 = *(id *)(a1 + 64);
    id v23 = *(id *)(a1 + 112);
    id v19 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 80);
    id v21 = *(id *)(a1 + 88);
    id v24 = *(id *)(a1 + 120);
    id v22 = v4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10009850C;
    v9[3] = &unk_100279E30;
    uint64_t v6 = *(void *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    uint64_t v7 = *(void **)(a1 + 56);
    void v9[4] = *(void *)(a1 + 48);
    id v10 = v22;
    id v11 = v7;
    id v12 = *(id *)(a1 + 72);
    id v8 = v22;
    [v5 executeSynchronousWork:v14 onItems:v6 description:@"Preparing record updates" completionHandler:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 104) + 16))();
  }
}

uint64_t sub_100098388(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v5 identifier];
  id v8 = [v6 recordIDWithRecordName:v7];

  id v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v8];
  if (!v9
    && ([*(id *)(a1 + 48) objectForKeyedSubscript:v8],
        (id v9 = objc_claimAutoreleasedReturnValue()) == 0)
    && ([*(id *)(a1 + 56) objectForKeyedSubscript:v8],
        (id v9 = objc_claimAutoreleasedReturnValue()) == 0)
    || !(*(unsigned int (**)(void))(*(void *)(a1 + 96) + 16))())
  {
    id v13 = 0;
    goto LABEL_8;
  }
  id v10 = [[CPLSimpleCKRecordBuilder alloc] initWithBaseCKRecord:v9 scopeProvider:*(void *)(a1 + 64) currentUserRecordID:*(void *)(a1 + 72) targetMapping:*(void *)(a1 + 80)];
  uint64_t v11 = *(void *)(a1 + 104);
  id v16 = 0;
  int v12 = (*(uint64_t (**)(void))(v11 + 16))();
  id v13 = v16;
  if (v12)
  {
    [*(id *)(a1 + 88) addObject:v9];

LABEL_8:
    uint64_t v14 = 1;
    goto LABEL_9;
  }

  if (a3)
  {
    id v13 = v13;
    uint64_t v14 = 0;
    *a3 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_9:

  return v14;
}

void sub_10009850C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v3();
  }
  else
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) cloudKitScope];
    [v4 uploadRecords:v5 cloudKitScope:v6 scopeProvider:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
  }
}

void sub_100098818(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32))
  {
    uint64_t v5 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000988F0;
    v6[3] = &unk_100279408;
    id v7 = v3;
    [v5 enumerateKeysAndObjectsUsingBlock:v6];
    [*(id *)(a1 + 48) uploadRecords:*(void *)(a1 + 32) cloudKitScope:*(void *)(a1 + 56) scopeProvider:0 completionHandler:*(void *)(a1 + 64)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1000988F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (v5)
  {
    [v7 setKnownToServer:1];
    id v6 = [v5 etag];
    [v7 setEtag:v6];
  }
}

void sub_100098B1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100098BE8;
  v8[3] = &unk_100278C08;
  void v8[4] = v6;
  id v9 = v5;
  id v11 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100098BE8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = (id)v2;
  if (v2)
  {
    id v4 = [*(id *)(a1 + 32) _errorForUpdateError:v2 scopeProvider:*(void *)(a1 + 48)];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
  }
}

void sub_100099498(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.recordupdate");
  uint64_t v3 = qword_1002CE9F0;
  qword_1002CE9F0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100099754(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 280), a2);
    [*(id *)(a1 + 32) _getTemporaryFolder];
  }
  else
  {
    (*(void (**)(void))(*(void *)(v5 + 288) + 16))();
  }
}

id sub_10009985C(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _uploadComputeStatesWithTemporaryFolderURL:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[36] + 16))();
  }
}

id sub_100099D98()
{
  if (qword_1002CE9F8 != -1) {
    dispatch_once(&qword_1002CE9F8, &stru_100279FB0);
  }
  uint64_t v0 = (void *)qword_1002CEA00;
  return v0;
}

BOOL sub_100099DEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 etag];

  if (v7)
  {
    id v8 = [*(id *)(*(void *)(a1 + 32) + 320) objectForKeyedSubscript:v5];
    id v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v5];
    id v10 = objc_alloc((Class)CPLRecordComputeStateVersion);
    id v11 = [v9 version];
    id v12 = [v10 initWithString:v11];

    id v13 = objc_alloc((Class)CPLRecordComputeStateVersion);
    uint64_t v14 = [v8 computeStateVersion];
    if (v14)
    {
      id v15 = [v13 initWithString:v14];
    }
    else
    {
      id v17 = [v6 objectForKeyedSubscript:@"computeStateVersion"];
      id v15 = [v13 initWithString:v17];
    }
    id v18 = [v9 adjustmentFingerprint];
    id v19 = [v8 computeStateAdjustmentFingerprint];
    id v20 = v19;
    if (v19)
    {
      id v21 = v19;
    }
    else
    {
      objc_msgSend(v6, "cpl_decryptedObjectForKey:validateClass:", @"computeStateAdjustmentFingerprintEnc", objc_opt_class());
      id v21 = (id)objc_claimAutoreleasedReturnValue();
    }
    int8x16_t v30 = v21;

    id v22 = [v12 compare:v15];
    if (v22 == (id)-1)
    {
      if (_CPLSilentLogging)
      {
        id v23 = v18;
      }
      else
      {
        id v23 = v18;
        id v24 = sub_100099D98();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412802;
          id v32 = v9;
          __int16 v33 = 2112;
          id v34 = v12;
          __int16 v35 = 2112;
          id v36 = v15;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[CCSS] Dropping compute state %@ because %@(local) < %@(cloud)", buf, 0x20u);
        }
      }
    }
    else if (v22)
    {
      id v23 = v18;
      if (v22 == (id)1)
      {
        BOOL v16 = 1;
LABEL_28:

        goto LABEL_29;
      }
    }
    else
    {
      id v23 = v18;
      unint64_t v25 = v18;
      id v26 = v30;
      unint64_t v27 = (unint64_t)v26;
      BOOL v16 = (!v25 || !v26 || ([(id)v25 isEqual:v26] & 1) == 0) && (v25 | v27) != 0;

      if (v16 || _CPLSilentLogging) {
        goto LABEL_28;
      }
      id v28 = sub_100099D98();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138413314;
        id v32 = v9;
        __int16 v33 = 2112;
        id v34 = v12;
        __int16 v35 = 2112;
        id v36 = v15;
        __int16 v37 = 2112;
        unint64_t v38 = v25;
        __int16 v39 = 2112;
        unint64_t v40 = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[CCSS] Dropping compute state %@ because %@(local) == %@(cloud) and %@(local) == %@(cloud)", buf, 0x34u);
      }
    }
    BOOL v16 = 0;
    goto LABEL_28;
  }
  BOOL v16 = 1;
LABEL_29:

  return v16;
}

id sub_10009A164(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
  id v9 = [v8 fileURL];
  id v10 = *(void **)(a1 + 40);
  id v11 = [v6 safeFilename];
  id v12 = [v9 lastPathComponent];
  id v13 = +[NSString stringWithFormat:@"%@:%@%@", v11, v12, @".photoscomputestate"];
  uint64_t v14 = [v10 URLByAppendingPathComponent:v13 isDirectory:0];

  id v15 = *(void **)(*(void *)(a1 + 48) + 280);
  id v34 = 0;
  id v16 = [v15 encryptFileAtURL:v9 outputFileURL:v14 error:&v34];
  id v33 = v34;
  if (v16)
  {
    id v17 = [objc_alloc((Class)CKAsset) initWithFileURL:v14];
    [v17 setItemTypeHint:@"fxd"];
    [v7 setCKAsset:v17 forKey:@"resComputeStateData"];
    id v32 = [v8 version];
    [v7 setObject:v32 forKey:@"computeStateVersion"];
    id v18 = [v8 adjustmentFingerprint];
    [v7 setEncryptedObject:v18 forKey:@"computeStateAdjustmentFingerprintEnc" validateClass:objc_opt_class()];
    [v8 lastUpdatedDate];
    id v19 = v14;
    id v20 = v9;
    id v21 = v6;
    id v23 = v22 = v16;
    [v7 setEncryptedObject:v23 forKey:@"computeStateLastUpdatedDateEnc" validateClass:objc_opt_class()];
    [*(id *)(a1 + 56) addObject:v8];

    id v16 = v22;
    id v6 = v21;
    id v9 = v20;
    uint64_t v14 = v19;
    id v24 = v33;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      unint64_t v25 = sub_100099D98();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        id v26 = [v9 path];
        unint64_t v27 = [v14 path];
        *(_DWORD *)long long buf = 138413058;
        id v36 = v6;
        __int16 v37 = 2112;
        unint64_t v38 = v26;
        __int16 v39 = 2112;
        unint64_t v40 = v27;
        __int16 v41 = 2112;
        id v42 = v33;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[CCSS] Failed to encrypt compute state %@ from %@ to %@: %@", buf, 0x2Au);
      }
    }
    id v28 = [v9 path];
    long long v29 = [v14 path];
    id v24 = v33;
    id v17 = +[CPLErrors cplErrorWithCode:70, v33, @"Failed to encrypt compute state %@ from %@ to %@", v6, v28, v29 underlyingError description];

    if (a4)
    {
      id v17 = v17;
      *a4 = v17;
    }
  }

  return v16;
}

uint64_t sub_10009A508(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 288) + 16))();
}

void sub_10009A620(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.uploadcomputestates");
  uint64_t v3 = qword_1002CEA00;
  qword_1002CEA00 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10009A9F0(id a1)
{
  id v1 = objc_alloc((Class)CKRecordZoneID);
  id v2 = [v1 initWithZoneName:CPLPrimaryScopeIdentifier ownerName:CKCurrentUserDefaultName databaseScope:2];
  uint64_t v3 = qword_1002CEA08;
  qword_1002CEA08 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t CPLCKAvailabilityRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10009DC68()
{
  if (qword_1002CEA40 != -1) {
    dispatch_once(&qword_1002CEA40, &stru_10027A030);
  }
  uint64_t v0 = (void *)qword_1002CEA38;
  return v0;
}

void sub_10009F7C0(id a1)
{
  v3[0] = objc_opt_class();
  v3[1] = objc_opt_class();
  v3[2] = objc_opt_class();
  void v3[3] = objc_opt_class();
  void v3[4] = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:5];
  id v2 = (void *)qword_1002CEA18;
  qword_1002CEA18 = v1;
}

void sub_10009F8D4(id a1)
{
  uint64_t v1 = [[CPLCloudKitDefaultZoneManager alloc] init];
  uint64_t v2 = qword_1002CEA28;
  qword_1002CEA28 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1000A0678(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  uint64_t v4 = qword_1002CEA38;
  qword_1002CEA38 = (uint64_t)v3;
  _objc_release_x1(v3, v4);
}

id sub_1000A06F4(id a1)
{
  return a1;
}

void sub_1000A09CC(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 280), a2);
    [*(id *)(a1 + 32) _downloadComputeStates];
  }
  else
  {
    (*(void (**)(void))(*(void *)(v5 + 288) + 16))();
  }
}

void sub_1000A0B78(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000A0C08;
  v2[3] = &unk_100276288;
  void v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 dispatchAsync:v2];
}

void sub_1000A0C08(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) callbackOperationDidFinishWithError:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_1000A1298(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A12A8(uint64_t a1)
{
}

void sub_1000A12B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A13EC;
  v11[3] = &unk_10027A058;
  uint64_t v20 = *(void *)(a1 + 80);
  unint64_t v7 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v13 = v5;
  uint64_t v21 = *(void *)(a1 + 88);
  char v8 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = v6;
  id v16 = v8;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v19 = *(id *)(a1 + 72);
  id v9 = v6;
  id v10 = v5;
  [v7 dispatchSynchronousWork:v11];
}

void sub_1000A13EC(uint64_t a1)
{
  id v2 = (void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (!v4) {
    sub_1001CE03C(v2, a1);
  }
  id v5 = (__CFString *)v4;
  if (!v3)
  {
    id v6 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"isExpunged"];
    unsigned int v7 = [v6 BOOLValue];

    if (!v7)
    {
      int v9 = 1;
      goto LABEL_9;
    }
    if (!_CPLSilentLogging)
    {
      char v8 = sub_1000A1A90();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v52 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CCSS] Ignoring expunged record %@", buf, 0xCu);
      }
    }
  }
  int v9 = 0;
LABEL_9:
  id v10 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"resComputeStateData"];
  id v11 = v10;
  if (v9 && !v10)
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_1000A1A90();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v52 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[CCSS] %@ has no record compute state", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  if (v9)
  {
    id v13 = [v10 fileURL];
    if (v13)
    {
      [*(id *)(a1 + 72) setObject:v13 forKeyedSubscript:v5];
      if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
      {
        uint64_t v14 = [(__CFString *)v5 scopeIdentifier];
        id v15 = [*(id *)(a1 + 48) controller];
        id v16 = [v15 mainScopeIdentifier];
        unsigned int v17 = [v14 isEqualToString:v16];

        if (v17)
        {
          id v18 = [(__CFString *)v5 identifier];
          id v19 = [v18 mutableCopy];

          objc_msgSend(v19, "replaceOccurrencesOfString:withString:options:range:", @"/", @":", 0, 0, objc_msgSend(v19, "length"));
        }
        else
        {
          id v19 = [(__CFString *)v5 safeFilename];
        }
        id v25 = objc_alloc((Class)NSString);
        id v26 = +[NSUUID UUID];
        id v27 = [v25 initWithFormat:@"%@:%@.photoscomputestate", v19, v26];

        id v24 = [*(id *)(*(void *)(a1 + 48) + 320) URLByAppendingPathComponent:v27 isDirectory:0];
        [*(id *)(a1 + 80) addObject:v24];
        id v28 = *(void **)(*(void *)(a1 + 48) + 280);
        uint64_t v29 = *(void *)(*(void *)(a1 + 96) + 8);
        id obj = *(id *)(v29 + 40);
        unsigned __int8 v30 = [v28 decryptFileAtURL:v13 outputFileURL:v24 error:&obj];
        objc_storeStrong((id *)(v29 + 40), obj);
        if (v30) {
          goto LABEL_42;
        }
        if (!_CPLSilentLogging)
        {
          id v31 = sub_1000A1A90();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            id v32 = [v13 path];
            id v33 = [v24 path];
            uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
            *(_DWORD *)long long buf = 138413058;
            CFStringRef v52 = v5;
            __int16 v53 = 2112;
            uint64_t v54 = v32;
            __int16 v55 = 2112;
            id v56 = v33;
            __int16 v57 = 2112;
            uint64_t v58 = v34;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "[CCSS] Failed to decrypt downloaded compute state %@ from %@ to %@: %@", buf, 0x2Au);
          }
        }
        __int16 v35 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) domain];
        unsigned int v36 = [v35 isEqualToString:@"CPLComputeStateEncryptionError"];

        if (!v36) {
          goto LABEL_42;
        }
        id v37 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
        if (v37 == (id)1)
        {
          uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          unint64_t v40 = [v13 path];
          __int16 v39 = [v24 path];
          uint64_t v42 = +[CPLErrors cplErrorWithCode:70, v41, @"Failed to decrypt downloaded compute state %@ from %@ to %@", v5, v40, v39 underlyingError description];
          uint64_t v43 = *(void *)(*(void *)(a1 + 96) + 8);
          id v44 = *(void **)(v43 + 40);
          *(void *)(v43 + 40) = v42;
        }
        else
        {
          if (v37 != (id)3)
          {
LABEL_42:

            if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) && v24)
            {
              id v45 = objc_msgSend(*(id *)(a1 + 56), "cpl_decryptedObjectForKey:validateClass:", @"computeStateAdjustmentFingerprintEnc", objc_opt_class());
              id v46 = objc_msgSend(*(id *)(a1 + 56), "cpl_decryptedObjectForKey:validateClass:", @"computeStateLastUpdatedDateEnc", objc_opt_class());
              id v47 = objc_alloc((Class)CPLRecordComputeState);
              long long v48 = [*(id *)(a1 + 56) objectForKeyedSubscript:@"computeStateVersion"];
              id v49 = [v47 initWithItemScopedIdentifier:v5 fileStorageIdentifier:0 version:v48 fileURL:v24 adjustmentFingerprint:v45 lastUpdatedDate:v46];

              [*(id *)(a1 + 88) setObject:v49 forKeyedSubscript:v5];
            }
            goto LABEL_28;
          }
          uint64_t v38 = *(void *)(*(void *)(a1 + 96) + 8);
          __int16 v39 = *(void **)(v38 + 40);
          *(void *)(v38 + 40) = 0;
          unint64_t v40 = v24;
          id v24 = 0;
        }

        goto LABEL_42;
      }
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v20 = sub_1000A1A90();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          CFStringRef v52 = @"resComputeStateData";
          __int16 v53 = 2112;
          uint64_t v54 = v5;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CCSS] %@ for %@ did not provide a file URL", buf, 0x16u);
        }
      }
      uint64_t v21 = +[CPLErrors unknownError];
      uint64_t v22 = *(void *)(*(void *)(a1 + 96) + 8);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;

      if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)) {
        sub_1001CE130((uint64_t)v5, a1);
      }
    }
    id v24 = 0;
LABEL_28:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

    goto LABEL_29;
  }
LABEL_20:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
LABEL_29:
}

id sub_1000A1A90()
{
  if (qword_1002CEA48 != -1) {
    dispatch_once(&qword_1002CEA48, &stru_10027A118);
  }
  uint64_t v0 = (void *)qword_1002CEA50;
  return v0;
}

void sub_1000A1AE4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  int v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000A1BFC;
  v13[3] = &unk_10027A0D0;
  id v14 = v6;
  id v15 = v7;
  uint64_t v10 = *(void *)(a1 + 72);
  id v16 = v9;
  uint64_t v20 = v10;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 64);
  id v11 = v7;
  id v12 = v6;
  [v9 _group:v8 dispatchWhenFinished:v13];
}

void sub_1000A1BFC(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    BOOL v2 = *(void *)(a1 + 40) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 288);
    if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
    {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
    else
    {
      id v4 = [*(id *)(a1 + 56) copy];
      (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v4, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 288) + 16))();
  }
  id v5 = +[NSFileManager defaultManager];
  id v6 = *(void **)(a1 + 64);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1000A1F54;
  v27[3] = &unk_10027A0A8;
  id v7 = v5;
  id v28 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v27];
  if (!*(void *)(a1 + 32) || *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v8 = *(id *)(a1 + 72);
    id v9 = [v8 countByEnumeratingWithState:&v23 objects:v33 count:16];
    if (v9)
    {
      id v11 = v9;
      uint64_t v12 = *(void *)v24;
      *(void *)&long long v10 = 138412546;
      long long v21 = v10;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v24 != v12) {
            objc_enumerationMutation(v8);
          }
          id v14 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if (!_CPLSilentLogging)
          {
            id v15 = sub_1000A1A90();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              id v16 = [v14 path];
              *(_DWORD *)long long buf = 138412290;
              unsigned __int8 v30 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CCSS] Removing discarded decrypted payload at %@", buf, 0xCu);
            }
          }
          id v22 = 0;
          unsigned __int8 v17 = objc_msgSend(v7, "removeItemAtURL:error:", v14, &v22, v21);
          id v18 = v22;
          if ((v17 & 1) == 0
            && ([v7 cplIsFileDoesNotExistError:v18] & 1) == 0
            && !_CPLSilentLogging)
          {
            id v19 = sub_1000A1A90();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = [v14 path];
              *(_DWORD *)long long buf = v21;
              unsigned __int8 v30 = v20;
              __int16 v31 = 2112;
              id v32 = v18;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[CCSS] Failed to delete discarded decrypted at %@: %@", buf, 0x16u);
            }
          }
        }
        id v11 = [v8 countByEnumeratingWithState:&v23 objects:v33 count:16];
      }
      while (v11);
    }
  }
}

void sub_1000A1F54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  id v12 = 0;
  unsigned __int8 v8 = [v7 removeItemAtURL:v6 error:&v12];
  id v9 = v12;
  if ((v8 & 1) == 0
    && ([*(id *)(a1 + 32) cplIsFileDoesNotExistError:v9] & 1) == 0
    && !_CPLSilentLogging)
  {
    long long v10 = sub_1000A1A90();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = [v6 path];
      *(_DWORD *)long long buf = 138412802;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v11;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CCSS] Failed to delete downloaded compute state %@ at %@: %@", buf, 0x20u);
    }
  }
}

void sub_1000A218C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.downloadcomputestates");
  uint64_t v3 = qword_1002CEA50;
  qword_1002CEA50 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000A22AC(id a1)
{
  id v1 = [objc_alloc((Class)NSRegularExpression) initWithPattern:@"0x[0-9a-fA-F]*" options:0 error:0];
  uint64_t v2 = qword_1002CEA60;
  qword_1002CEA60 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1000A2A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A2A50(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1002CEA68 = [v1 BOOLForKey:@"CPLSimulateRejection"];

  id v2 = +[NSUserDefaults standardUserDefaults];
  byte_1002CEA69 = [v2 BOOLForKey:@"CPLSimulateOverQuota"];
}

void sub_1000A2AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 && WeakRetained && ([v3 isCPLErrorWithCode:18] & 1) == 0)
  {
    id v6 = objc_alloc((Class)NSMutableDictionary);
    id v7 = [v5 batch];
    id v8 = objc_msgSend(v6, "initWithCapacity:", objc_msgSend(v7, "count"));

    id v9 = objc_alloc((Class)NSString);
    long long v10 = [v3 localizedDescription];
    id v11 = [v9 initWithFormat:@"record is rejected because of upload error (%@)", v10];

    if (!_CPLSilentLogging)
    {
      id v12 = sub_1000A2DB8();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [v5 batch];
        id v14 = [v13 summaryDescription];
        *(_DWORD *)long long buf = 138412546;
        __int16 v31 = v14;
        __int16 v32 = 2112;
        id v33 = v3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Replacing error uploading %@ with rejection error: %@", buf, 0x16u);
      }
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    __int16 v15 = [v5 batch];
    id v16 = [v15 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v24;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v24 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = [*(id *)(*((void *)&v23 + 1) + 8 * i) scopedIdentifier];
          [v8 setObject:v11 forKeyedSubscript:v20];
        }
        id v17 = [v15 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }
      while (v17);
    }

    uint64_t v27 = CPLErrorRejectedRecordIdentifiersAndReasonsKey;
    id v28 = v8;
    long long v21 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v22 = +[CPLErrors cplErrorWithCode:18 underlyingError:0 userInfo:v21 description:@"Some records are rejected for testing purpose"];

    id v3 = (id)v22;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000A2DB8()
{
  if (qword_1002CEA78 != -1) {
    dispatch_once(&qword_1002CEA78, &stru_10027A3B0);
  }
  uint64_t v0 = (void *)qword_1002CEA80;
  return v0;
}

id sub_1000A2E78(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _runModernOperationsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16))();
  }
}

void sub_1000A3AD8(_Unwind_Exception *a1)
{
}

void sub_1000A3AF0(uint64_t a1, void *a2)
{
  id v6 = a2;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  [*(id *)(a1 + 32) didFinishExecutingPlanWithError:v6];
  [*(id *)(a1 + 32) uploadedSize];
  double v4 = v3;
  [*(id *)(a1 + 40) setUploadedSize:(unint64_t)v3];
  if (v4 > 102400.0)
  {
    [*(id *)(a1 + 32) totalDurationOfUpload];
    if (v5 < 1.0) {
      double v5 = 1.0;
    }
    *(double *)(*(void *)(a1 + 48) + 320) = fmin(v4 / v5, 1073741820.0);
  }
  [*(id *)(a1 + 40) setError:v6];
  [*(id *)(a1 + 40) end];
}

id sub_1000A3CC0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else {
    return [*(id *)(a1 + 32) _fetchSharedRecordsFromPlanner:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_1000A3EB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v16 = 0;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 1;
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x3032000000;
    v14[3] = sub_1000A4074;
    void v14[4] = sub_1000A4084;
    id v15 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000A408C;
    v10[3] = &unk_10027A180;
    id v12 = &v16;
    id v11 = *(id *)(a1 + 32);
    id v13 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v10];
    if (*((unsigned char *)v17 + 24)) {
      [*(id *)(a1 + 40) _uploadBatchFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }

    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000A4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4074(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A4084(uint64_t a1)
{
}

void sub_1000A408C(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)a1[4];
  id v14 = 0;
  unsigned __int8 v10 = [v9 didFetchSharedCKRecord:v8 forRecordWithRecordID:v7 error:&v14];
  id v11 = v14;
  id v12 = v14;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v10;
  if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000A2DB8();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        id v16 = v8;
        __int16 v17 = 2112;
        id v18 = v7;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Planner failed to ingest fetched shared record %@ for %@: %@", buf, 0x20u);
      }
    }
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v11);
    *a4 = 1;
  }
}

void sub_1000A43C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v16 = 0;
    __int16 v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 1;
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x3032000000;
    v14[3] = sub_1000A4074;
    void v14[4] = sub_1000A4084;
    id v15 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000A4580;
    v10[3] = &unk_10027A180;
    id v12 = &v16;
    id v11 = *(id *)(a1 + 32);
    id v13 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v10];
    if (*((unsigned char *)v17 + 24)) {
      [*(id *)(a1 + 40) _uploadSharedBatchFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }

    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000A455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000A4580(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)a1[4];
  id v14 = 0;
  unsigned __int8 v10 = [v9 didFetchPrivateCKRecord:v8 forRecordWithRecordID:v7 error:&v14];
  id v11 = v14;
  id v12 = v14;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v10;
  if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000A2DB8();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        id v16 = v8;
        __int16 v17 = 2112;
        id v18 = v7;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Planner failed to ingest fetched private record %@ for %@: %@", buf, 0x20u);
      }
    }
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v11);
    *a4 = 1;
  }
}

void sub_1000A4A8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!_CPLSilentLogging)
    {
      unsigned __int8 v10 = sub_1000A2DB8();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Upload for record %@ completed", buf, 0xCu);
      }
    }
    id v11 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000A4C94;
    v15[3] = &unk_100278760;
    id v16 = v8;
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 32);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = *(id *)(a1 + 48);
    id v20 = v9;
    id v21 = *(id *)(a1 + 56);
    [v11 dispatchAsync:v15];

    id v14 = v16;
LABEL_10:

    goto LABEL_11;
  }
  if (!_CPLSilentLogging)
  {
    id v14 = sub_1000A2DB8();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v23 = v7;
      __int16 v24 = 2112;
      id v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to save %@: %@", buf, 0x16u);
    }
    goto LABEL_10;
  }
LABEL_11:
}

void sub_1000A4C94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordID];
  [*(id *)(a1 + 40) didModifyRecordWithID:v2];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A4D8C;
  v6[3] = &unk_1002760B0;
  double v3 = *(void **)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v4 = v2;
  id v8 = v4;
  id v9 = *(id *)(a1 + 64);
  [v3 updateContextWithBlock:v6];
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    (*(void (**)(uint64_t, id, double))(v5 + 16))(v5, v4, 1.0);
  }
}

id sub_1000A4D8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recordCompletionForRecordID:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_1000A4D9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A4E4C;
  v6[3] = &unk_100276018;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_1000A4E4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_1000A4E58(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A4F30;
  v9[3] = &unk_100278B18;
  id v7 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v5;
  id v11 = v7;
  id v12 = v6;
  double v14 = a3;
  id v13 = *(id *)(a1 + 48);
  id v8 = v5;
  [v7 dispatchAsync:v9];
}

void sub_1000A4F30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordID];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A5010;
  v6[3] = &unk_100277218;
  id v3 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 64);
  id v4 = v2;
  id v8 = v4;
  [v3 updateContextWithBlock:v6];
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, id, double))(v5 + 16))(v5, v4, *(double *)(a1 + 64));
  }
}

id sub_1000A5010(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateProgress:*(void *)(a1 + 40) forRecordID:*(double *)(a1 + 48)];
}

void sub_1000A5020(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000A5168;
  v16[3] = &unk_10027A248;
  void v16[4] = v10;
  id v17 = v9;
  id v18 = *(id *)(a1 + 40);
  id v19 = v7;
  id v20 = *(id *)(a1 + 48);
  id v21 = v8;
  id v22 = *(id *)(a1 + 56);
  long long v15 = *(_OWORD *)(a1 + 64);
  id v11 = (id)v15;
  long long v23 = v15;
  id v12 = v8;
  id v13 = v7;
  id v14 = v9;
  [v10 dispatchAsync:v16];
}

void sub_1000A5168(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v3)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1000A55C0;
    v25[3] = &unk_10027A220;
    long long v26 = *(id *)(a1 + 48);
    id v27 = *(id *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "lastOperationRequestUUIDs", _NSConcreteStackBlock, 3221225472, sub_1000A55C0, &unk_10027A220);
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:v3 getDestinationRecordIDs:v25 scopeProvider:v4 withRequestUUIDs:v5 uploadAction:@"upload"];

    if (!v6) {
      sub_1001CE3EC((uint64_t)v3, a1, v2);
    }
    if (([v6 isCPLOperationCancelledError] & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_1000A2DB8();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v29 = v3;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to upload batch: %@", buf, 0xCu);
        }
      }
      if ([v6 isCPLErrorWithCode:18] && !_CPLSilentLogging)
      {
        id v8 = sub_1000A2DB8();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = *(void **)(*v2 + 344);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v29 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Rejected high level batch:\n%@", buf, 0xCu);
        }

        if (!_CPLSilentLogging)
        {
          id v10 = sub_1000A2DB8();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            id v11 = [v6 userInfo];
            id v12 = [v11 objectForKeyedSubscript:CPLErrorRejectedRecordIdentifiersAndReasonsKey];
            *(_DWORD *)long long buf = 138412290;
            uint64_t v29 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Rejected scoped identifiers:\n%@", buf, 0xCu);
          }
          if (!_CPLSilentLogging)
          {
            id v13 = sub_1000A2DB8();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              id v14 = *(void **)(a1 + 48);
              uint64_t v15 = *(void *)(a1 + 64);
              *(_DWORD *)long long buf = 138412546;
              uint64_t v29 = v14;
              __int16 v30 = 2112;
              uint64_t v31 = v15;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Rejected CK updates: %@\nDeletes: %@", buf, 0x16u);
            }
          }
        }
      }
    }

    id v16 = v26;
LABEL_33:

    goto LABEL_34;
  }
  id v17 = [*(id *)(a1 + 48) count];
  if (v17 != [*(id *)(a1 + 56) count] && _CPLSilentLogging == 0)
  {
    id v19 = sub_1000A2DB8();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = *(void **)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v29 = v20;
      __int16 v30 = 2112;
      uint64_t v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Requested updates: %@. Saved records by CloudKit: %@", buf, 0x16u);
    }
  }
  id v22 = [*(id *)(a1 + 64) count];
  id v6 = 0;
  if (v22 != [*(id *)(a1 + 72) count] && !_CPLSilentLogging)
  {
    id v16 = sub_1000A2DB8();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v23 = *(void **)(a1 + 64);
      uint64_t v24 = *(void *)(a1 + 72);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v29 = v23;
      __int16 v30 = 2112;
      uint64_t v31 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Requested deletions: %@. Deleted records by CloudKit: %@", buf, 0x16u);
    }
    id v6 = 0;
    goto LABEL_33;
  }
LABEL_34:
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
}

id sub_1000A55C0(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", (char *)objc_msgSend(*(id *)(a1 + 32), "count") + (void)objc_msgSend(*(id *)(a1 + 40), "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "recordID", (void)v10);
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  [v2 addObjectsFromArray:*(void *)(a1 + 40)];
  return v2;
}

void sub_1000A593C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1000A599C(1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1000A599C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000A2DB8();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if ((unint64_t)(a1 - 1) > 3) {
        CFStringRef v3 = @"none";
      }
      else {
        CFStringRef v3 = off_10027A3D0[a1 - 1];
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Simulating over quota for phase: %@", buf, 0xCu);
    }
  }
  if ((unint64_t)(a1 - 1) > 3) {
    CFStringRef v4 = @"none";
  }
  else {
    CFStringRef v4 = off_10027A3D0[a1 - 1];
  }
  id v5 = +[CPLErrors cplErrorWithCode:30, @"Simulated over-quota error for phase %@", v4 description];
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v6 = +[CPLErrors cplErrorCausedBySharedSyncForError:v5];

    id v5 = (void *)v6;
  }
  return v5;
}

id sub_1000A5B00(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "uploadOfRecordID:didProgress:", a2);
  CFStringRef v3 = *(void **)(a1 + 40);
  [*(id *)(a1 + 32) planProgess];
  return objc_msgSend(v3, "updateProgress:");
}

void sub_1000A5B48(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) didFinishUploadOfRecordsWithError:v3];
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    [*(id *)(a1 + 32) updateTargetMappingAfterUpload];
    [*(id *)(a1 + 40) _fetchPrivateRecordsFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_1000A5DE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1000A599C(2);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1000A5E40(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "uploadOfSharedRecordID:didProgress:", a2);
  id v3 = *(void **)(a1 + 40);
  [*(id *)(a1 + 32) planProgess];
  return objc_msgSend(v3, "updateProgress:");
}

void sub_1000A5E88(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) didFinishUploadOfSharedRecordsWithError:v5];
  if (v5)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    CFStringRef v4 = +[CPLErrors cplErrorCausedBySharedSyncForError:v5];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    [*(id *)(a1 + 40) _executeSharePlanFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_1000A611C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1000A599C(3);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000A617C(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = +[CPLErrors cplErrorCausedBySharedSyncForError:a3];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
  else
  {
    [*(id *)(a1 + 32) didFinishUploadOfRecordsWithError:0];
    [*(id *)(a1 + 32) updateTargetMappingAfterUploadWithRealSourceRecordIDs:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000A6428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1000A599C(4);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1000A6488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFStringRef v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v4();
  }
  else
  {
    [*(id *)(a1 + 32) updateTargetMappingAfterUploadWithRealSourceRecordIDs:a2];
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v6();
  }
}

void sub_1000A6A9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1000A6B54;
  v8[3] = &unk_1002760B0;
  void v8[4] = v6;
  id v9 = v5;
  id v10 = *(id *)(a1 + 40);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_1000A6B54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1000A6D24;
    v8[3] = &unk_1002779C8;
    id v9 = *(id *)(a1 + 48);
    uint64_t v3 = *(void **)(a1 + 32);
    CFStringRef v4 = [v3 lastOperationRequestUUIDs];
    id v5 = +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:v2 getDestinationRecordIDs:v8 scopeProvider:v3 withRequestUUIDs:v4 uploadAction:@"update contributors"];

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v6 = sub_1000A2DB8();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 48) count];
        *(_DWORD *)long long buf = 134217984;
        id v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updated contributors on %lu records", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
}

id sub_1000A6D24(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "recordID", (void)v10);
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_1000A7064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A707C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
  long long v10 = v9;
  if (v9)
  {
    long long v11 = [v9 sharingRecordChangeData];
    if (v11)
    {
      long long v12 = +[CPLArchiver unarchiveObjectWithData:v11 ofClass:objc_opt_class()];
      long long v13 = v12;
      if (v12)
      {
        id v14 = *(void **)(a1 + 40);
        uint64_t v15 = [v12 recordID];
        id v16 = [v14 objectForKeyedSubscript:v15];

        id v17 = [v8 updateSharingContributorUserIdentifiers];
        if (v16)
        {
          objc_msgSend(v16, "cpl_updateContributorsOnSharedRecord:", v17);
        }
        else
        {
          objc_msgSend(v13, "cpl_updateContributorsOnSharedRecord:", v17);
          long long v23 = *(void **)(a1 + 40);
          uint64_t v24 = [v13 recordID];
          [v23 setObject:v13 forKeyedSubscript:v24];

          id v25 = *(void **)(a1 + 48);
          long long v26 = [v13 recordID];
          [v25 setObject:v7 forKeyedSubscript:v26];
        }
      }
      else
      {
        if (!_CPLSilentLogging)
        {
          id v19 = sub_1000A2DB8();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to prepare CK record: record change data returned nil", buf, 2u);
          }
        }
        uint64_t v20 = +[CPLErrors unknownError];
        uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
        id v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 40) = v20;

        *a4 = 1;
      }
    }
    else if (!_CPLSilentLogging)
    {
      id v18 = sub_1000A2DB8();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v28 = v7;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Won't update contributors for %@ as the record is not shared", buf, 0xCu);
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  if (!_CPLSilentLogging)
  {
    long long v11 = sub_1000A2DB8();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Won't update contributors for %@ as the record is not in the cloud", buf, 0xCu);
    }
    goto LABEL_21;
  }
LABEL_22:
}

void sub_1000A7378(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v12 = objc_begin_catch(a1);
      if (!_CPLSilentLogging)
      {
        long long v13 = sub_1000A2DB8();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to prepare CK record: %@", (uint8_t *)&buf, 0xCu);
        }
      }
      uint64_t v14 = +[CPLErrors unknownError];
      uint64_t v15 = *(void *)(*(void *)(v11 + 56) + 8);
      id v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      *a10 = 1;
      objc_end_catch();
      JUMPOUT(0x1000A732CLL);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1000A77A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a3)
  {
    id v5 = *(void (**)(void))(v4[34] + 16);
    v5();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = 0;
    id v7 = [v4 _computeUpdatedSharedCKRecordsFromFoundRecord:a2 usingUpdates:v6 error:&v10];
    id v8 = v10;
    id v9 = *(void **)(a1 + 32);
    if (v7) {
      [v9 _updateCKRecordsInSharedScope:v7];
    }
    else {
      (*(void (**)(void))(v9[34] + 16))();
    }
  }
}

BOOL sub_1000A7D48(id a1, CPLScopedIdentifier *a2, CKRecord *a3)
{
  return 1;
}

BOOL sub_1000A7D50(id a1, CPLScopedIdentifier *a2, CPLCKRecordBuilder *a3, id *a4)
{
  return 1;
}

void sub_1000A7E28(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.uploadbatch");
  uint64_t v3 = qword_1002CEA80;
  qword_1002CEA80 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id *sub_1000A809C(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)CPLCKRecordRequest;
    uint64_t v11 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      id v12 = [v10 copy];
      id v13 = a1[3];
      a1[3] = v12;
    }
  }

  return a1;
}

void sub_1000A82E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (![*(id *)(a1 + 32) allowsFetchCache]
      || ([*(id *)(a1 + 32) fetchCache],
          id v4 = objc_claimAutoreleasedReturnValue(),
          id v5 = *(void **)(*(void *)(a1 + 40) + 32),
          v4,
          v4 != v5))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1000A83D4;
      v6[3] = &unk_100279408;
      void v6[4] = *(void *)(a1 + 40);
      [v3 enumerateKeysAndObjectsUsingBlock:v6];
    }
    [*(id *)(a1 + 40) _fetchRecordsForNextOperationTypeInEnumerator:*(void *)(a1 + 48) task:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

id sub_1000A83D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) didFetchRecordWithID:a2 record:a3];
}

void sub_1000A84B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v5 = *(void **)(a1 + 32);
    id v9 = 0;
    unsigned __int8 v6 = [v5 processedFetchedRequestedRecordsWithError:&v9];
    id v7 = v9;
    id v8 = v7;
    if ((v6 & 1) == 0) {
      id v4 = v7;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8CF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A8D04(uint64_t a1)
{
}

void sub_1000A8D0C(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) resourceForType:a2];

  if (v4)
  {
    sub_1000961D8((uint64_t)CPLCloudKitResourceKeys, a2);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = (uint64_t)v5;
    if (v5)
    {
      uint64_t v20 = (uint64_t)v5;
      id v5 = +[CPLResource resourceTypeSupportsResourceExpunge:a2];
      uint64_t v6 = v20;
      if (v5)
      {
        id v7 = *(void **)(a1 + 40);
        id v8 = sub_10009678C(v20);
        id v9 = [v7 objectForKey:v8];

        id v10 = *(void **)(a1 + 40);
        uint64_t v11 = sub_100096798(v20);
        id v12 = [v10 objectForKey:v11];

        id v13 = objc_alloc_init((Class)CPLExpungeableResourceState);
        [v13 setResourceType:a2];
        if (v9) {
          id v14 = [v9 unsignedIntegerValue];
        }
        else {
          id v14 = 0;
        }
        [v13 setExpungedState:v14];
        if (v12) {
          objc_super v15 = v12;
        }
        else {
          objc_super v15 = 0;
        }
        [v13 setExpungedDate:v15];
        id v16 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        if (!v16)
        {
          uint64_t v17 = +[NSMutableArray array];
          uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
          id v19 = *(void **)(v18 + 40);
          *(void *)(v18 + 40) = v17;

          id v16 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        }
        [v16 addObject:v13];

        uint64_t v6 = v20;
      }
    }
    _objc_release_x1(v5, v6);
  }
}

id sub_1000A92CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v2 = v1;
    id v3 = +[NSDate date];
    [v3 timeIntervalSinceReferenceDate];
    double v5 = v4;
    [v2 timeIntervalSinceReferenceDate];
    double v7 = v6;

    double v8 = round(v7) + 1.0;
    uint32_t v9 = arc4random_uniform(0x3Bu);
    if (v8 + (double)v9 <= v5 || v7 >= v5) {
      double v5 = v8 + (double)v9;
    }
    id v11 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:v5];
  }
  else
  {
    id v11 = 0;
  }
  return v11;
}

void sub_1000A9458(id a1)
{
  uint64_t v1 = +[NSSet setWithArray:&off_100294338];
  uint64_t v2 = qword_1002CEA90;
  qword_1002CEA90 = v1;
  _objc_release_x1(v1, v2);
}

void sub_1000A968C(id a1)
{
  uint64_t v1 = +[NSSet setWithObject:@"resFaceCropRes"];
  uint64_t v2 = qword_1002CEAA0;
  qword_1002CEAA0 = v1;
  _objc_release_x1(v1, v2);
}

void sub_1000A9870(id a1)
{
  uint64_t v1 = +[NSSet setWithObject:@"resCustomUserAssetList"];
  uint64_t v2 = qword_1002CEAB0;
  qword_1002CEAB0 = v1;
  _objc_release_x1(v1, v2);
}

void sub_1000AA1B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000AA1D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([v8 isCPLErrorWithCode:2002]) {
    CPLDisableCloudKitUseGateKeeper();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000AA278()
{
  if (qword_1002CEAB8 != -1) {
    dispatch_once(&qword_1002CEAB8, &stru_10027A590);
  }
  uint64_t v0 = (void *)qword_1002CEAC0;
  return v0;
}

void sub_1000AA2CC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = v12;
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v14 + 24))
  {
    *(unsigned char *)(v14 + 24) = 1;
    if (v12)
    {
      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = +[CPLErrors cplErrorWithCode:80, @"Failed to publish asset. Error: %@", v12 description];
      (*(void (**)(uint64_t, void, void, void, void, void *))(v15 + 16))(v15, 0, 0, 0, 0, v16);
    }
    else
    {
      uint64_t v17 = [v11 downloadURL];
      id v28 = [v11 downloadURLExpiration];
      uint64_t v18 = [v11 mediaItemMaker];
      if (v18)
      {
        id v19 = [v11 mediaItemMaker];
        id v29 = 0;
        uint64_t v20 = [v19 dataRepresentationWithError:&v29];
        id v27 = v29;

        if (!v20)
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v21 = sub_1000AA278();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              id v22 = [*(id *)(a1 + 32) recordID];
              long long v23 = [*(id *)(a1 + 32) filename];
              *(_DWORD *)long long buf = 138412802;
              uint64_t v31 = v22;
              __int16 v32 = 2112;
              id v33 = v23;
              __int16 v34 = 2112;
              id v35 = v27;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Unable to serialize media item maker for %@/%@: %@", buf, 0x20u);
            }
          }
          uint64_t v20 = 0;
        }
        uint64_t v24 = v27;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v25 = *(void *)(a1 + 40);
      long long v26 = [*(id *)(a1 + 32) fingerPrint];
      (*(void (**)(uint64_t, void *, void *, void *, void *, void))(v25 + 16))(v25, v17, v20, v28, v26, 0);
    }
  }
}

uint64_t sub_1000AA560(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v5 + 24))
  {
    *(unsigned char *)(v5 + 24) = 1;
    uint64_t v6 = *(void *)(a1 + 32);
    id v10 = v3;
    if (v3) {
      +[CPLErrors cplErrorWithCode:80, @"Failed to publish asset. Error: %@", v3 description];
    }
    else {
    id v7 = +[CPLErrors cplErrorWithCode:150, @"Failed to publish asset with no error", v9 description];
    }
    (*(void (**)(uint64_t, void, void, void, void, void *))(v6 + 16))(v6, 0, 0, 0, 0, v7);

    id v4 = v10;
  }
  return _objc_release_x1(v3, v4);
}

id sub_1000AA6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return (id)(*(uint64_t (**)(void))(v2[38] + 16))();
  }
  else {
    return _[v2 _fetchStreamingURL];
  }
}

void sub_1000AAE64(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = *(void **)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000AAFB4;
  v22[3] = &unk_10027A548;
  v22[4] = v16;
  id v23 = v15;
  id v24 = v11;
  id v25 = v13;
  id v26 = v12;
  id v27 = *(id *)(a1 + 40);
  id v28 = v14;
  id v17 = v14;
  id v18 = v12;
  id v19 = v13;
  id v20 = v11;
  id v21 = v15;
  [v16 dispatchAsync:v22];
}

void sub_1000AAFB4(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v10)
  {
    uint64_t v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    id v3 = +[CPLResource shortDescriptionForResourceType:](CPLResource, "shortDescriptionForResourceType:", [*(id *)(*(void *)(a1 + 32) + 280) resourceType]);
    id v4 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v10, v2, @"Failed to get streaming url for %@", v3 withRequestUUIDs description];
LABEL_6:

    goto LABEL_8;
  }
  if (*(void *)(a1 + 48) && *(void *)(a1 + 56))
  {
    uint64_t v2 = objc_opt_new();
    [v2 setStreamingURL:*(void *)(a1 + 48)];
    [v2 setMediaItemMakerData:*(void *)(a1 + 64)];
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 296);
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 56);
    id v3 = +[NSDate date];
    [v5 setObject:v2 forKey:v6 expirationDate:v7 date:v3];
    id v4 = 0;
    goto LABEL_6;
  }
  id v4 = 0;
LABEL_8:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304) + 16))();
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 304);
  *(void *)(v8 + 304) = 0;
}

void sub_1000AB5E4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcepublish");
  uint64_t v3 = qword_1002CEAC0;
  qword_1002CEAC0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1000ABFD4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) encodeSystemFieldsWithCoder:a2];
}

void sub_1000B3970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B39B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B39C8(uint64_t a1)
{
}

void sub_1000B39D0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [v8 domain];
  unsigned int v10 = [v9 isEqual:CKErrorDomain];

  if (v10)
  {
    if ([v8 code] == (id)22) {
      goto LABEL_18;
    }
    if ((objc_opt_isKindOfClass() & 1) != 0
      && [*(id *)(a1 + 72) _isCKErrorForRejectedRecord:v8])
    {
      id v11 = *(void **)(a1 + 32);
      id v12 = [v7 zoneID];
      id v13 = [v11 scopeIdentifierFromZoneID:v12];

      if (v13)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
        {
          id v14 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
          id v16 = *(void **)(v15 + 40);
          *(void *)(v15 + 40) = v14;
        }
        id v17 = [*(id *)(a1 + 32) rejectedScopedIdentifierForRejectedCKRecordID:v7];
        id v18 = v17;
        if (v17)
        {
          id v19 = *(void **)(a1 + 72);
          id v20 = [v17 identifier];
          id v21 = [v19 _rejectionReasonFromPartialError:v8 identifier:v20];
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v21 forKeyedSubscript:v18];
        }
        else if (!_CPLSilentLogging)
        {
          id v22 = __CPLGenericOSLogDomain();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            int v26 = 138543362;
            id v27 = v7;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to find a scoped identifier for %{public}@", (uint8_t *)&v26, 0xCu);
          }
        }
      }
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v23 = [*(id *)(a1 + 72) _betterErrorForRecordId:v7 recordError:v8];
    uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
    id v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;

    *a4 = 1;
  }
LABEL_18:
}

void sub_1000B509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1000B50D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 56) getCloudKitErrorCode:*(void *)(*(void *)(a1 + 32) + 8) + 24 internalCode:*(void *)(*(void *)(a1 + 40) + 8) + 24 fromError:a3];
  if (result)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 22)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
  return result;
}

void sub_1000B5304(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    sub_1001CEA3C((void *)(a1 + 48), (void *)a1);
  }
  uint64_t v6 = [*(id *)(a1 + 32) domain];
  if (![v6 isEqualToString:CKErrorDomain])
  {

    goto LABEL_6;
  }
  id v7 = [*(id *)(a1 + 32) code];

  if (v7 != (id)22) {
LABEL_6:
  }
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v8];
}

void sub_1000B5610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B562C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  id v7 = [*(id *)(a1 + 32) domain];
  if (![v7 isEqualToString:CKErrorDomain])
  {

    goto LABEL_5;
  }
  id v8 = [*(id *)(a1 + 32) code];

  if (v8 != (id)22)
  {
LABEL_5:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

id *sub_1000B5ACC(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)CPLCloudKitResourceRecordProperties;
    unsigned int v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

void sub_1000B5B78(uint64_t a1, void *a2, void *a3, void *a4, int a5, unint64_t a6, void *a7, int a8, double a9, double a10)
{
  id v18 = a2;
  id v19 = a3;
  id v20 = a4;
  id v21 = a7;
  if (a1)
  {
    id v22 = sub_100096768(*(void *)(a1 + 8));
    [v18 setObject:v19 forKey:v22];

    if ([*(id *)(a1 + 24) shouldUseEncryptedPropertiesIfPossible])
    {
      if (a5)
      {
        uint64_t v23 = sub_100096774(*(void *)(a1 + 8));
        [v18 setEncryptedObject:v20 forKey:v23 validateClass:objc_opt_class()];
      }
      uint64_t v74 = 0;
      id v75 = &v74;
      uint64_t v76 = 0x3032000000;
      id v77 = sub_1000B63D4;
      __int16 v78 = sub_1000B63E4;
      id v79 = 0;
      v73[0] = _NSConcreteStackBlock;
      v73[1] = 3221225472;
      v73[2] = sub_1000B63EC;
      v73[3] = &unk_10027A680;
      v73[4] = &v74;
      uint64_t v24 = objc_retainBlock(v73);
      if (v20 && (a5 & 1) == 0)
      {
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472;
        v70[2] = sub_1000B6470;
        v70[3] = &unk_100275F88;
        CFStringRef v72 = &v74;
        id v71 = v20;
        ((void (*)(void *, void *))v24[2])(v24, v70);
      }
      if (qword_1002C96D8)
      {
        uint64_t v36 = 1024;
        uint64_t v37 = 10240;
        unint64_t v38 = a6 & 0xFFFFFFFFFFF00000;
        if (a6 < 0x19000) {
          unint64_t v38 = 102400;
        }
        if (a6 >> 11 >= 5) {
          uint64_t v37 = v38;
        }
        if (a6 >= 0x400) {
          uint64_t v36 = v37;
        }
        if (a6) {
          uint64_t v39 = v36;
        }
        else {
          uint64_t v39 = 0;
        }
        unint64_t v40 = +[NSNumber numberWithUnsignedInteger:v39];
        uint64_t v41 = sub_1000379D4(*(void *)(a1 + 8));
        [v18 setObject:v40 forKey:v41];

        if (v39 != a6)
        {
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_1000B6480;
          v69[3] = &unk_100277390;
          v69[4] = &v74;
          v69[5] = a6;
          ((void (*)(void *, void *))v24[2])(v24, v69);
        }
      }
      else
      {
        id v25 = +[NSNumber numberWithUnsignedInteger:a6];
        int v26 = sub_1000379D4(*(void *)(a1 + 8));
        [v18 setObject:v25 forKey:v26];
      }
      if ((qword_1002C96D8 & 2) != 0)
      {
        double v46 = a9;
        double v47 = a10;
        if (a9 != 0.0)
        {
          double v46 = a9;
          double v47 = a10;
          if (a10 != 0.0)
          {
            uint64_t v48 = 0;
            do
            {
              double v49 = *(double *)&qword_10024A130[v48];
              if (a9 == v49 && a10 == *(double *)&qword_10024A130[v48 + 1]
                || a10 == v49 && a9 == *(double *)&qword_10024A130[v48 + 1])
              {
                double v46 = a9;
                double v47 = a10;
                goto LABEL_42;
              }
              v48 += 2;
            }
            while ((v48 * 8) != 320);
            double v50 = ceil(a9 / 100.0) * 100.0;
            double v51 = ceil(a10 / 100.0) * 100.0;
            double v52 = a9 / a10 * v51;
            if (v52 <= v50) {
              double v46 = v50;
            }
            else {
              double v46 = a9 / a10 * v51;
            }
            if (v52 <= v50) {
              double v47 = v50 / (a9 / a10);
            }
            else {
              double v47 = v51;
            }
          }
        }
LABEL_42:
        __int16 v53 = +[NSNumber numberWithInteger:(uint64_t)v46];
        uint64_t v54 = sub_100096750(*(void *)(a1 + 8));
        [v18 setObject:v53 forKey:v54];

        __int16 v55 = +[NSNumber numberWithInteger:(uint64_t)v47];
        id v56 = sub_10009675C(*(void *)(a1 + 8));
        [v18 setObject:v55 forKey:v56];

        if (v46 != a9 || v47 != a10)
        {
          v68[0] = _NSConcreteStackBlock;
          v68[1] = 3221225472;
          v68[2] = sub_1000B6490;
          v68[3] = &unk_10027A6A8;
          *(double *)&v68[5] = a9;
          *(double *)&v68[6] = a10;
          v68[4] = &v74;
          ((void (*)(void *, void *))v24[2])(v24, v68);
        }
      }
      else
      {
        uint64_t v42 = +[NSNumber numberWithInteger:(uint64_t)a9];
        uint64_t v43 = sub_100096750(*(void *)(a1 + 8));
        [v18 setObject:v42 forKey:v43];

        id v44 = +[NSNumber numberWithInteger:(uint64_t)a10];
        id v45 = sub_10009675C(*(void *)(a1 + 8));
        [v18 setObject:v44 forKey:v45];
      }
      if (a8)
      {
        if (v21 && (qword_1002C96D8 & 4) != 0)
        {
          __int16 v57 = CPLFuzziedFileUTI(v21);
          uint64_t v58 = sub_100096744(*(void *)(a1 + 8));
          [v18 setObject:v57 forKey:v58];

          id v59 = v57;
          id v60 = v21;
          if (v59 && ([v59 isEqual:v60] & 1) != 0)
          {

            id v61 = v59;
          }
          else
          {

            v65[0] = _NSConcreteStackBlock;
            v65[1] = 3221225472;
            void v65[2] = sub_1000B650C;
            v65[3] = &unk_100275F88;
            id v67 = &v74;
            id v66 = v60;
            ((void (*)(void *, void *))v24[2])(v24, v65);
            id v61 = v66;
          }
        }
        else
        {
          sub_100096744(*(void *)(a1 + 8));
          id v59 = (id)objc_claimAutoreleasedReturnValue();
          [v18 setObject:v21 forKey:v59];
        }
      }
      long long v62 = [(id)v75[5] data];
      uint64_t v63 = sub_100096780(*(void *)(a1 + 8));
      [v18 setEncryptedObject:v62 forKey:v63 validateClass:objc_opt_class()];

      _Block_object_dispose(&v74, 8);
    }
    else
    {
      id v27 = +[NSNumber numberWithUnsignedInteger:a6];
      id v28 = sub_1000379D4(*(void *)(a1 + 8));
      [v18 setObject:v27 forKey:v28];

      id v29 = +[NSNumber numberWithInteger:(uint64_t)a9];
      __int16 v30 = sub_100096750(*(void *)(a1 + 8));
      [v18 setObject:v29 forKey:v30];

      uint64_t v31 = +[NSNumber numberWithInteger:(uint64_t)a10];
      __int16 v32 = sub_10009675C(*(void *)(a1 + 8));
      [v18 setObject:v31 forKey:v32];

      if (a8)
      {
        id v33 = sub_100096744(*(void *)(a1 + 8));
        [v18 setObject:v21 forKey:v33];
      }
      __int16 v34 = sub_100096780(*(void *)(a1 + 8));
      [v18 setEncryptedObject:0 forKey:v34 validateClass:objc_opt_class()];

      if (a5)
      {
        id v35 = sub_100096774(*(void *)(a1 + 8));
        [v18 setEncryptedObject:0 forKey:v35 validateClass:objc_opt_class()];
      }
    }
  }
}

void sub_1000B63AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B63D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B63E4(uint64_t a1)
{
}

void sub_1000B63EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    id v4 = objc_alloc_init(CPLCloudKitResourceInfo);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v3 = v7;
  }
  (*((void (**)(void))v3 + 2))();
}

id sub_1000B6470(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setStableHash:*(void *)(a1 + 32)];
}

id sub_1000B6480(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setFileSize:*(void *)(a1 + 40)];
}

void sub_1000B6490(uint64_t a1)
{
  os_log_t v2 = objc_alloc_init(CPLCloudKitResourceInfoImageDimensions);
  [(CPLCloudKitResourceInfoImageDimensions *)v2 setWidth:(uint64_t)*(double *)(a1 + 40)];
  [(CPLCloudKitResourceInfoImageDimensions *)v2 setHeight:(uint64_t)*(double *)(a1 + 48)];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setImageDimensions:v2];
}

id sub_1000B650C(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setFileUTI:*(void *)(a1 + 32)];
}

void sub_1000B651C(uint64_t a1, void *a2, void *a3, double *a4, void *a5, void *a6)
{
  id v11 = a6;
  if (a1)
  {
    id v32 = v11;
    objc_super v12 = sub_100096780(*(void *)(a1 + 8));
    uint64_t v13 = objc_msgSend(v32, "cpl_decryptedObjectForKey:validateClass:", v12, objc_opt_class());

    if (v13)
    {
      uint64_t v14 = [[CPLCloudKitResourceInfo alloc] initWithData:v13];
      uint64_t v15 = v14;
      if (v14)
      {
        if ([(CPLCloudKitResourceInfo *)v14 hasStableHash])
        {
          *a2 = [(CPLCloudKitResourceInfo *)v15 stableHash];
          goto LABEL_11;
        }
        char v16 = 0;
LABEL_9:
        id v17 = sub_100096774(*(void *)(a1 + 8));
        objc_msgSend(v32, "cpl_decryptedObjectForKey:validateClass:", v17, objc_opt_class());
        *a2 = (id)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          char v18 = 1;
          goto LABEL_14;
        }
LABEL_11:
        if ([(CPLCloudKitResourceInfo *)v15 hasFileSize])
        {
          *a3 = [(CPLCloudKitResourceInfo *)v15 fileSize];
          goto LABEL_16;
        }
        char v18 = 0;
LABEL_14:
        id v19 = sub_1000379D4(*(void *)(a1 + 8));
        id v20 = [v32 objectForKeyedSubscript:v19];
        *a3 = [v20 unsignedIntegerValue];

        if (v18)
        {
          char v21 = 1;
          goto LABEL_19;
        }
LABEL_16:
        if ([(CPLCloudKitResourceInfo *)v15 hasImageDimensions])
        {
          id v22 = [(CPLCloudKitResourceInfo *)v15 imageDimensions];
          double v23 = (double)(uint64_t)[v22 width];
          id v24 = [v22 height];
          *a4 = v23;
          a4[1] = (double)(uint64_t)v24;

LABEL_20:
          if ([(CPLCloudKitResourceInfo *)v15 hasFileUTI])
          {
            *a5 = [(CPLCloudKitResourceInfo *)v15 fileUTI];
LABEL_23:

            id v11 = v32;
            goto LABEL_24;
          }
LABEL_22:
          uint64_t v31 = sub_100096744(*(void *)(a1 + 8));
          *a5 = [v32 objectForKeyedSubscript:v31];

          goto LABEL_23;
        }
        char v21 = 0;
LABEL_19:
        id v25 = sub_100096750(*(void *)(a1 + 8));
        int v26 = [v32 objectForKeyedSubscript:v25];

        id v27 = sub_10009675C(*(void *)(a1 + 8));
        id v28 = [v32 objectForKeyedSubscript:v27];

        double v29 = (double)(uint64_t)[v26 integerValue];
        id v30 = [v28 integerValue];
        *a4 = v29;
        a4[1] = (double)(uint64_t)v30;

        if (v21) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    char v16 = 1;
    goto LABEL_9;
  }
LABEL_24:
}

void sub_1000B6CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B6D18(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a2;
  id v8 = a3;
  id v9 = a5;
  if ([v9 isCPLErrorWithCode:2002]) {
    CPLDisableCloudKitUseGateKeeper();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000B6DB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B6DC8(uint64_t a1)
{
}

void sub_1000B6DD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a4);
  }
  else if (!_CPLSilentLogging)
  {
    id v10 = sub_1000B6EDC();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 138412290;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "FetchedRecord: %@", (uint8_t *)&v11, 0xCu);
    }
  }
}

id sub_1000B6EDC()
{
  if (qword_1002CEAC8 != -1) {
    dispatch_once(&qword_1002CEAC8, &stru_10027A790);
  }
  uint64_t v0 = (void *)qword_1002CEAD0;
  return v0;
}

void sub_1000B6F30(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  id v7 = *(void **)(*(void *)(a1[8] + 8) + 40);
  if (!v7) {
    id v7 = v5;
  }
  id v8 = v7;
  if (!v8)
  {
    uint64_t v13 = [a2 objectForKey:a1[4]];
    uint64_t v14 = [v13 objectForKey:a1[5]];
    uint64_t v15 = v14;
    if (v14)
    {
      uint64_t v16 = [v14 assetContent];
      if (v16)
      {
        id v12 = (void *)v16;
        id v17 = sub_100096744(a1[6]);
        int v11 = [v13 objectForKey:v17];

        id v10 = 0;
LABEL_19:

        goto LABEL_20;
      }
      if (!_CPLSilentLogging)
      {
        id v20 = sub_1000B6EDC();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = a1[4];
          uint64_t v21 = a1[5];
          *(_DWORD *)long long buf = 138412546;
          uint64_t v25 = v21;
          __int16 v26 = 2112;
          uint64_t v27 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Fetching %@ for %@ succeeded but did not return the resource", buf, 0x16u);
        }
      }
      +[CPLErrors cplErrorWithCode:150, @"Fetching %@ for %@ succeeded but did not return the resource", a1[5], a1[4] description];
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        char v18 = sub_1000B6EDC();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = a1[4];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v25 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to fetch %@", buf, 0xCu);
        }
      }
      +[CPLErrors cplErrorWithCode:150, @"Failed to fetch %@", a1[4], v23 description];
    id v10 = };
    int v11 = 0;
    id v12 = 0;
    goto LABEL_19;
  }
  id v9 = v8;
  id v10 = +[CPLErrors cplErrorWithCode:80, @"Error fetching record: %@ Error: %@", a1[4], v8 description];

  int v11 = 0;
  id v12 = 0;
LABEL_20:
  (*(void (**)(void))(a1[7] + 16))();
}

id sub_1000B72E0(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return (id)(*(uint64_t (**)(void))(v2[37] + 16))();
  }
  else {
    return [v2 _startDownload];
  }
}

void sub_1000B7420(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (v12)
  {
    uint64_t v6 = [v12 objectForKeyedSubscript:*(void *)(a1 + 40)];
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 288);
    *(void *)(v7 + 288) = v6;

    id v9 = *(void **)(a1 + 32);
    if (v9[36])
    {
      [v9 _startDownload];
    }
    else
    {
      uint64_t v10 = v9[37];
      int v11 = +[CPLErrors cplErrorWithCode:25 description:@"Record not found"];
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 296) + 16))();
  }
}

void sub_1000B797C(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000B7A98;
  v17[3] = &unk_10027A748;
  uint64_t v13 = *(void **)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v18 = v9;
  uint64_t v19 = v13;
  id v20 = v11;
  char v24 = a4;
  id v21 = v12;
  id v22 = v10;
  id v23 = *(id *)(a1 + 48);
  id v14 = v10;
  id v15 = v11;
  id v16 = v9;
  [v13 dispatchAsync:v17];
}

void sub_1000B7A98(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) operationDidFinishWithError:*(void *)(a1 + 48)];
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = [*(id *)(a1 + 40) lastOperationRequestUUIDs];
    id v6 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v4, v5, @"Error fetching %@ in memory", *(void *)(*(void *)(a1 + 40) + 280) withRequestUUIDs description];

    [*(id *)(a1 + 56) setError:v6];
    if (!v6) {
      goto LABEL_13;
    }
LABEL_8:
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000B6EDC();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 72);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v14 = v11;
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch asset %@ : %@", buf, 0x16u);
      }
    }
    goto LABEL_13;
  }
  objc_msgSend(*(id *)(a1 + 56), "setDownloadedSize:", objc_msgSend(*(id *)(a1 + 32), "length"));
  [*(id *)(a1 + 56) setDownloadedItemCount:1];
  if (*(unsigned char *)(a1 + 80)) {
    [*(id *)(a1 + 56) setTranscodedItemCount:1];
  }
  if (!+[CPLCloudKitFakeDynamicDerivatives isFakeDerivative:*(void *)(*(void *)(a1 + 40) + 280)])
  {
    id v6 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 280);
  id v12 = 0;
  uint64_t v9 = +[CPLCloudKitFakeDynamicDerivatives transformData:v2 fileType:v7 matchingResource:v8 error:&v12];
  id v6 = v12;

  id v2 = (id)v9;
  if (v6) {
    goto LABEL_8;
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 296) + 16))();
}

void sub_1000B7D68(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.inmemorydownload");
  uint64_t v3 = qword_1002CEAD0;
  qword_1002CEAD0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1000B7F28(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000B8034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B804C(void *a1, uint64_t a2, void *a3)
{
  id result = [a3 isExpiredForNow:a1[4] withLeeway:*(double *)(a1[5] + 48)];
  if (result) {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
  return result;
}

id sub_1000B8164(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _expiredCountLockedWithDate:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

uint64_t sub_1000B8248(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 32);
  return result;
}

uint64_t sub_1000B8308(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 40);
  return result;
}

void sub_1000B8534(uint64_t a1, void *a2, unint64_t a3, unsigned char *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    *a4 = 1;
  }
  else
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 16);
    id v5 = [a2 key];
    [v4 removeObjectForKey:v5];
  }
}

uint64_t sub_1000B8754(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B8764(uint64_t a1)
{
}

uint64_t sub_1000B876C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    id v12 = (void *)v2;
    uint64_t v2 = (uint64_t)[(id)v2 isExpiredForNow:a1[6] withLeeway:*(double *)(a1[4] + 48)];
    uint64_t v3 = (uint64_t)v12;
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = [v12 object];
      uint64_t v5 = *(void *)(a1[7] + 8);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      uint64_t v7 = [v12 expirationDate];
      uint64_t v8 = *(void *)(a1[8] + 8);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v3 = (uint64_t)v12;
    }
  }
  uint64_t v10 = 32;
  if (!*(void *)(*(void *)(a1[7] + 8) + 40)) {
    uint64_t v10 = 40;
  }
  ++*(void *)(a1[4] + v10);
  return _objc_release_x1(v2, v3);
}

void sub_1000B895C(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) copyWithZone:0];
  uint64_t v2 = [[_CPLCloudKitSimpleCacheEntry alloc] initWithKey:v10 object:*(void *)(a1 + 40) expirationDate:*(void *)(a1 + 48)];
  if (![(_CPLCloudKitSimpleCacheEntry *)v2 isExpiredForNow:*(void *)(a1 + 56) withLeeway:*(double *)(*(void *)(a1 + 64) + 48)])
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 64) + 16) objectForKeyedSubscript:v10];
    if (v3)
    {
      if ((id)[(_CPLCloudKitSimpleCacheEntry *)v2 compare:v3] != (id)1)
      {

        uint64_t v2 = 0;
LABEL_12:

        goto LABEL_13;
      }
      id v4 = [*(id *)(*(void *)(a1 + 64) + 24) indexOfObjectIdenticalTo:v3];
      if (v4 != (id)0x7FFFFFFFFFFFFFFFLL) {
        [*(id *)(*(void *)(a1 + 64) + 24) removeObjectAtIndex:v4];
      }
    }
    else
    {
      id v5 = [*(id *)(*(void *)(a1 + 64) + 16) count];
      id v6 = *(void **)(a1 + 64);
      if ((unint64_t)v5 >= v6[7])
      {
        [v6 _removeExpiredEntriesLockedForNow:*(void *)(a1 + 56)];
        id v7 = [*(id *)(*(void *)(a1 + 64) + 16) count];
        uint64_t v8 = *(void **)(a1 + 64);
        unint64_t v9 = v8[7];
        if ((unint64_t)v7 >= v9) {
          [v8 _removeFirstEntriesCount:(v9 + 1) >> 1];
        }
      }
    }
    if (v2)
    {
      [*(id *)(*(void *)(a1 + 64) + 16) setObject:v2 forKeyedSubscript:v10];
      objc_msgSend(*(id *)(*(void *)(a1 + 64) + 24), "insertObject:atIndex:", v2, objc_msgSend(*(id *)(*(void *)(a1 + 64) + 24), "indexOfObject:inSortedRange:options:usingComparator:", v2, 0, objc_msgSend(*(id *)(*(void *)(a1 + 64) + 24), "count"), 1024, &stru_10027A848));
    }
    goto LABEL_12;
  }
LABEL_13:
}

int64_t sub_1000B8B00(id a1, _CPLCloudKitSimpleCacheEntry *a2, _CPLCloudKitSimpleCacheEntry *a3)
{
  return [(_CPLCloudKitSimpleCacheEntry *)a2 compare:a3];
}

id sub_1000B8B7C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  return [v2 removeAllObjects];
}

void sub_1000B8CB0(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSString);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[7];
  id v14 = +[NSDate date];
  id v6 = [v4 _expiredCountLockedWithDate:v14];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 40);
  id v10 = +[CPLDateFormatter stringForTimeInterval:*(double *)(v7 + 48)];
  id v11 = [v2 initWithFormat:@"%lu/%lu - expired: %lu - hit: %lu - miss: %lu - leeway: %@", v3, v5, v6, v8, v9, v10];
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1000B9AE0(uint64_t a1, void *a2, void *a3)
{
  id v15 = a3;
  uint64_t v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  id v6 = [v5 unsignedIntegerValue];

  if (v6)
  {
    uint64_t v7 = [v15 unsignedIntegerValue];
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = [a2 cplOperationClassDescription];
    if (v6 == v7)
    {
      uint64_t v12 = v9;
      id v13 = v15;
      CFStringRef v10 = @"%@ x %@";
    }
    else
    {
      id v13 = v15;
      id v14 = (char *)((unsigned char *)[v15 unsignedIntegerValue] - v6);
      uint64_t v12 = v9;
      CFStringRef v10 = @"%@ x %@ [%lu no cell]";
    }
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, v12, v13, v14);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = [a2 cplOperationClassDescription];
    +[NSString stringWithFormat:@"%@ x %@ [no cell]", v9, v15, v14];
  id v11 = };
  [v8 addObject:v11];
}

id sub_1000B9E58(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (!v2)
  {
    id v3 = objc_alloc_init(_CPLCloudKitOperationSession);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(*(void *)(a1 + 32) + 16)];
    id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  }
  id result = [v2 beginTask:*(void *)(a1 + 40)];
  if ((result & 1) == 0)
  {
    uint64_t v7 = objc_alloc_init(_CPLCloudKitOperationSession);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 16);
    *(void *)(v8 + 16) = v7;

    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 8) count] >= 3)
    {
      do
        [*(id *)(*(void *)(a1 + 32) + 8) removeObjectAtIndex:0];
      while ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 8) count] > 2);
    }
    [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(*(void *)(a1 + 32) + 16)];
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(*(void *)(a1 + 32) + 16);
    return [v11 beginTask:v10];
  }
  return result;
}

id sub_1000BA0D4(void *a1)
{
  return [*(id *)(a1[4] + 16) endTask:a1[5] withOperationClasses:a1[6] operationsAllowingCellular:a1[7]];
}

uint64_t sub_1000BA208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BA218(uint64_t a1)
{
}

void sub_1000BA220(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count])
  {
    id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 32) + 8);
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v7), "statusObject", (void)v11);
          if (v8) {
            [v2 addObject:v8];
          }

          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v2;
  }
}

void sub_1000BA4A8(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "count"));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 8);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v13 + 1) + 8 * (void)v7) status];
        if (v8) {
          [v2 addObject:v8];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  if ([v2 count])
  {
    uint64_t v9 = [v2 componentsJoinedByString:@"\n"];
    uint64_t v10 = +[NSString stringWithFormat:@"Sessions:\n%@", v9];
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_1000BA690(id a1)
{
  id v3 = CPLCopyDefaultSerialQueueAttributes();
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.cpl.ckoperationcounter", v3);
  id v2 = (void *)qword_1002CEAD8;
  qword_1002CEAD8 = (uint64_t)v1;
}

void sub_1000BA6EC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000BA85C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 queryUserDetailsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[35] + 16))();
  }
}

void sub_1000BAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_1000BAD84()
{
  if (qword_1002CEAE8 != -1) {
    dispatch_once(&qword_1002CEAE8, &stru_10027A900);
  }
  uint64_t v0 = (void *)qword_1002CEAF0;
  return v0;
}

uint64_t sub_1000BADD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BADE8(uint64_t a1)
{
}

void sub_1000BADF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    id v10 = [objc_alloc((Class)CPLShareParticipant) initWithCKShareParticipant:v8 currentUserID:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v11 = sub_1000BAD84();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412546;
      id v13 = v7;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch some participant with lookup info %@: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

void sub_1000BAF28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000BAFC8;
  v6[3] = &unk_100277D10;
  void v6[4] = v4;
  id v7 = v3;
  uint64_t v8 = *(void *)(a1 + 40);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_1000BAFC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280) + 16))();
}

void sub_1000BB098(id a1)
{
  dispatch_queue_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  uint64_t v3 = qword_1002CEAF0;
  qword_1002CEAF0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t CPLCloudKitResourceInfoReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_34;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            uint64_t v14 = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0;
        }
LABEL_36:
        *(void *)(a1 + 8) = v14;
        goto LABEL_37;
      case 2u:
        id v18 = objc_alloc_init(CPLCloudKitResourceInfoImageDimensions);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark() && CPLCloudKitResourceInfoImageDimensionsReadFrom((uint64_t)v18, a2))
        {
          PBReaderRecallMark();

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 16;
        goto LABEL_32;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 32;
LABEL_32:
        id v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_37;
    }
  }
}

void sub_1000BBD84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000BC06C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (!_CPLSilentLogging)
    {
      unint64_t v6 = sub_1000BC19C();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v7 = *(void **)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        int v13 = 138412546;
        id v14 = v7;
        __int16 v15 = 2112;
        uint64_t v16 = v8;
        BOOL v9 = "Sent exit feedback for batch ID: %@, operation ID: %@";
        int v10 = v6;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
        uint32_t v12 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, (uint8_t *)&v13, v12);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (!_CPLSilentLogging)
  {
    unint64_t v6 = sub_1000BC19C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v5;
      BOOL v9 = "Failed to send exit feedback with error: %@";
      int v10 = v6;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
}

id sub_1000BC19C()
{
  if (qword_1002CEAF8 != -1) {
    dispatch_once(&qword_1002CEAF8, &stru_10027A9E8);
  }
  uint64_t v0 = (void *)qword_1002CEB00;
  return v0;
}

id sub_1000BC1F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) runWithNoSyncSession];
}

void sub_1000BC504(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      unint64_t v7 = sub_1000BC19C();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        int v14 = 138412802;
        uint64_t v15 = v8;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        id v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to move %@ to %@: %@", (uint8_t *)&v14, 0x20u);
      }
    }
    if (([v6 isCPLOperationCancelledError] & 1) == 0) {
      [*(id *)(a1 + 48) _sendExitFeedbackWithSourceRecordIDs:*(void *)(a1 + 32) destinationRecordIDs:*(void *)(a1 + 40) moveError:v6 operationID:*(void *)(a1 + 56) moveBatchID:*(void *)(a1 + 64)];
    }
    int v10 = *(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 280) + 16);
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    int v10 = *(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 280) + 16);
LABEL_9:
    v10();
    goto LABEL_16;
  }
  if (!_CPLSilentLogging)
  {
    os_log_type_t v11 = sub_1000BC19C();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Successfully moved %@ back to %@", (uint8_t *)&v14, 0x16u);
    }
  }
  [*(id *)(a1 + 48) _fetchAndMoveNextBatchWithUserRecordID:*(void *)(a1 + 72)];
LABEL_16:
}

void sub_1000BC838(uint64_t a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  uint64_t v15 = *(void **)(a1 + 32);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000BC970;
  v20[3] = &unk_10027A748;
  v20[4] = v15;
  id v21 = v14;
  id v22 = v11;
  id v23 = *(id *)(a1 + 40);
  id v24 = v12;
  id v25 = v13;
  char v26 = a5;
  id v16 = v13;
  id v17 = v12;
  id v18 = v11;
  id v19 = v14;
  [v15 dispatchAsync:v20];
}

void sub_1000BC970(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    char v4 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v2 withRequestUUIDs:v3 description:@"Failed to get next batch to move"];

    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000BC19C();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to get next batch to move: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    if ([v4 isCPLErrorWithCode:23])
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_1000BC19C();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 288) zoneID];
          int v12 = 138412290;
          id v13 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Zone %@ has been deleted when getting next batch to move, assuming Exit has already completed", (uint8_t *)&v12, 0xCu);
        }
      }
      uint64_t v8 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280) + 16);
    }
    else
    {
      uint64_t v8 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280) + 16);
    }
    v8();
  }
  else if ([*(id *)(a1 + 48) count])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_1000BC19C();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(void **)(a1 + 48);
        int v12 = 138543362;
        id v13 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Moving records with names: %{public}@", (uint8_t *)&v12, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _moveBatchRecordWithNames:*(void *)(a1 + 48) userRecordID:*(void *)(a1 + 56) operationID:*(void *)(a1 + 64) moveBatchID:*(void *)(a1 + 72) hasMore:*(unsigned __int8 *)(a1 + 80)];
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 80)) {
      [v11 _fetchAndMoveNextBatchWithUserRecordID:*(void *)(a1 + 56)];
    }
    else {
      (*(void (**)(void))(v11[35] + 16))();
    }
  }
}

void sub_1000BCDCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000BCEA8;
  v10[3] = &unk_100277038;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v13 = *(id *)(a1 + 40);
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_1000BCEA8(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) auxiliaryOperationDidFinishWithError:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 32) isAuxiliaryOperationResultRelevant])
  {
    id v3 = [*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 56)];
    if (v3)
    {
      id v4 = objc_alloc((Class)CPLLibraryInfo);
      id v5 = [*(id *)(*(void *)(a1 + 32) + 312) zone];
      id v6 = [v4 initWithCKRecord:v3 zone:v5];

      unint64_t v7 = [v6 assetCounts];
      v9[0] = 0;
      v9[1] = v9;
      v9[2] = 0x2020000000;
      v9[3] = 0;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      void v8[2] = sub_1000BD028;
      v8[3] = &unk_10027A9C8;
      void v8[4] = v9;
      [v7 enumerateKeysAndObjectsUsingBlock:v8];
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
      _Block_object_dispose(v9, 8);
    }
  }
}

void sub_1000BD010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BD028(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 unsignedIntegerValue];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_1000BD308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return (id)(*(uint64_t (**)(void))(v3[35] + 16))();
  }
  else {
    return [v3 _fetchAndMoveNextBatchWithUserRecordID:a2];
  }
}

id sub_1000BD3E0(uint64_t a1)
{
  id result = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(void *)(v3 + 344))
  {
    id result = *(id *)(v3 + 352);
    if (result)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_1000BC19C();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 352);
          int v6 = 138412290;
          uint64_t v7 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ has become irrelevant - cancelling", (uint8_t *)&v6, 0xCu);
        }

        id result = *(id *)(*(void *)(a1 + 32) + 352);
      }
      return [result cancel];
    }
  }
  return result;
}

#error "1000BD5C0: call analysis failed (funcsize=56)"

void sub_1000BE104(id a1)
{
  dispatch_queue_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.cleanupstagedscope");
  uint64_t v3 = qword_1002CEB00;
  qword_1002CEB00 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000BE144(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t CPLCloudKitFeatureVersionReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadString();
      uint64_t v19 = 16;
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              uint64_t v15 = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v15 = 0;
          }
LABEL_35:
          *(void *)(a1 + 8) = v15;
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = 24;
    }
    uint64_t v20 = *(void **)(a1 + v19);
    *(void *)(a1 + v19) = v18;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000BECF4()
{
  uint64_t v3 = 0;
  char v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BFF48;
  block[3] = &unk_100275F60;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002CEB10, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

id sub_1000BEDA0()
{
  if (qword_1002CEB20 != -1) {
    dispatch_once(&qword_1002CEB20, &stru_10027AA08);
  }
  uint64_t v0 = (void *)qword_1002CEB28;
  return v0;
}

uint64_t sub_1000BFF48(uint64_t result)
{
  uint64_t v1 = qword_1002CEB18;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = qword_1002CEB18;
  qword_1002CEB18 = v1 + 1;
  return result;
}

void sub_1000BFF68(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.metrics");
  uint64_t v3 = qword_1002CEB28;
  qword_1002CEB28 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t CPLCloudKitFeatureVersionHistoryReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v12 = objc_alloc_init(CPLCloudKitFeatureVersion);
      [a1 addFeatureVersion:v12];
      if (!PBReaderPlaceMark() || (CPLCloudKitFeatureVersionReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C0A74(id a1)
{
  v3[0] = &off_100291EF0;
  v3[1] = &off_100291F08;
  v4[0] = @"none";
  v4[1] = @"initiateCopyInProgress";
  v3[2] = &off_100291F20;
  void v3[3] = &off_100291F38;
  v4[2] = @"recordCopyComplete";
  void v4[3] = @"addedParticipantToExitShare";
  void v3[4] = &off_100291F50;
  void v3[5] = &off_100291F68;
  void v4[4] = @"removeParticipantFromSharedLibrary";
  void v4[5] = @"removeParticipantFromExitState";
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
  os_log_t v2 = (void *)qword_1002CEB30;
  qword_1002CEB30 = v1;
}

void sub_1000C0E90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v43 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v5, "count"));
    id v44 = [*(id *)(a1 + 32) currentUserID];
    if (!v44) {
      sub_1001CF50C(a1, (uint64_t *)(a1 + 32));
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v45 objects:v53 count:16];
    if (v8)
    {
      id v9 = v8;
      unint64_t v40 = (id *)(a1 + 32);
      id v41 = v5;
      uint64_t v42 = a1;
      int v10 = 0;
      uint64_t v11 = *(void *)v46;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v46 != v11) {
            objc_enumerationMutation(v7);
          }
          char v13 = *(void **)(*((void *)&v45 + 1) + 8 * i);
          unsigned int v14 = objc_msgSend(v13, "participantUserID", v40);
          if (v14)
          {
            uint64_t v15 = [v44 recordName];
            unsigned int v16 = [v15 isEqualToString:v14];

            if (v16)
            {
              id v17 = v13;

              int v10 = v17;
            }
            uint64_t v18 = [v13 error];

            if (v18)
            {
              if (!_CPLSilentLogging)
              {
                uint64_t v19 = sub_1000C1468();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v20 = [v13 participantUserID];
                  id v21 = [v13 error];
                  *(_DWORD *)long long buf = 138543618;
                  double v50 = v20;
                  __int16 v51 = 2112;
                  double v52 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to start exiting %{public}@: %@", buf, 0x16u);
                }
              }
            }
            else
            {
              [v43 addObject:v14];
            }
          }
          else if (!_CPLSilentLogging)
          {
            id v22 = sub_1000C1468();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Received an exit response without a user identifier", buf, 2u);
            }
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v45 objects:v53 count:16];
      }
      while (v9);

      id v6 = 0;
      id v5 = v41;
      a1 = v42;
      if (v10)
      {
        id v23 = [v10 error];
        if (v23)
        {
          uint64_t v24 = *(void *)(v42 + 48);
          id v25 = [*(id *)(v42 + 32) _exitErrorFromError:v23];
          (*(void (**)(uint64_t, void, void, void, void *))(v24 + 16))(v24, 0, 0, 0, v25);
        }
        else
        {
          id v25 = [v10 stagingZoneID];
          if (v25)
          {
            uint64_t v32 = [*v40 scopeIdentifierFromZoneID:v25];
            if (!v32) {
              sub_1001CF5E4((uint64_t)v25, v42, (uint64_t *)v40);
            }
            id v33 = (void *)v32;
            __int16 v34 = -[CPLCloudKitScope initWithZoneID:options:]([CPLCloudKitScope alloc], "initWithZoneID:options:", v25, [*(id *)(*(void *)(v42 + 32) + 280) options]);
            uint64_t v35 = *(void *)(v42 + 48);
            uint64_t v36 = [(CPLCloudKitScope *)v34 transportScope];
            (*(void (**)(uint64_t, void *, void *, id, void))(v35 + 16))(v35, v33, v36, v43, 0);
          }
          else
          {
            if (!_CPLSilentLogging)
            {
              uint64_t v37 = sub_1000C1468();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Trying to self exit succeeded but got no staging zone ID", buf, 2u);
              }
            }
            uint64_t v38 = *(void *)(v42 + 48);
            uint64_t v39 = +[CPLErrors unknownError];
            (*(void (**)(uint64_t, void, void, void, void *))(v38 + 16))(v38, 0, 0, 0, v39);
          }
        }

        goto LABEL_47;
      }
    }
    else
    {
    }
    if (*(void *)(a1 + 64))
    {
      if (!_CPLSilentLogging)
      {
        char v26 = sub_1000C1468();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = *(void **)(a1 + 40);
          id v28 = [v44 recordName];
          *(_DWORD *)long long buf = 138412546;
          double v50 = v27;
          __int16 v51 = 2114;
          double v52 = v28;
          double v29 = "Trying to dismantle %@ but %{public}@ was not marked as an exiting user";
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v29, buf, 0x16u);

          goto LABEL_36;
        }
        goto LABEL_36;
      }
    }
    else if (!_CPLSilentLogging)
    {
      char v26 = sub_1000C1468();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        id v30 = *(void **)(a1 + 40);
        id v28 = [v44 recordName];
        *(_DWORD *)long long buf = 138412546;
        double v50 = v30;
        __int16 v51 = 2114;
        double v52 = v28;
        double v29 = "Trying to self exit from %@ but %{public}@ was not marked as an exiting user";
        goto LABEL_35;
      }
LABEL_36:
    }
    uint64_t v31 = *(void *)(a1 + 48);
    int v10 = +[CPLErrors unknownError];
    (*(void (**)(uint64_t, void, void, void, void *))(v31 + 16))(v31, 0, 0, 0, v10);
LABEL_47:

    goto LABEL_48;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_48:
}

id sub_1000C1468()
{
  if (qword_1002CEB40 != -1) {
    dispatch_once(&qword_1002CEB40, &stru_10027AAB0);
  }
  uint64_t v0 = (void *)qword_1002CEB48;
  return v0;
}

void sub_1000C15B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    uint64_t v18 = a1;
    id v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v5, "count"));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v19 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (!v8) {
      goto LABEL_20;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v21;
    while (1)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        unint64_t v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        char v13 = objc_msgSend(v12, "participantUserID", v18);
        if (!v13)
        {
          if (_CPLSilentLogging) {
            goto LABEL_18;
          }
          uint64_t v15 = sub_1000C1468();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received an exit response without a user identifier", buf, 2u);
          }
          goto LABEL_16;
        }
        unsigned int v14 = [v12 error];

        if (v14)
        {
          if (_CPLSilentLogging) {
            goto LABEL_18;
          }
          uint64_t v15 = sub_1000C1468();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            unsigned int v16 = [v12 participantUserID];
            id v17 = [v12 error];
            *(_DWORD *)long long buf = 138543618;
            id v25 = v16;
            __int16 v26 = 2112;
            uint64_t v27 = v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to start exiting %{public}@: %@", buf, 0x16u);
          }
LABEL_16:

          goto LABEL_18;
        }
        [v6 addObject:v13];
LABEL_18:
      }
      id v9 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (!v9)
      {
LABEL_20:

        (*(void (**)(void))(*(void *)(v18 + 32) + 16))();
        id v5 = v19;
        goto LABEL_21;
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_21:
}

void sub_1000C222C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000C2314;
  v15[3] = &unk_100277038;
  void v15[4] = v11;
  id v16 = v10;
  id v17 = v9;
  id v18 = v8;
  id v12 = v8;
  id v13 = v9;
  id v14 = v10;
  [v11 dispatchAsync:v15];
}

void sub_1000C2314(uint64_t a1)
{
  id v18 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v2 = *(id *)(a1 + 48);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v29 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v2);
        }
        if (!_CPLSilentLogging)
        {
          id v7 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          id v8 = sub_1000C1468();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            id v9 = [v7 participantUserID];
            id v10 = [v7 stagingZoneID];
            uint64_t v11 = [v7 error];
            *(_DWORD *)long long buf = 138412802;
            uint64_t v24 = v9;
            __int16 v25 = 2112;
            __int16 v26 = v10;
            __int16 v27 = 2112;
            id v28 = v11;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ParticipantUserID: %@ StagingZoneID: %@ error %@", buf, 0x20u);
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v29 count:16];
    }
    while (v4);
  }

  if (v18)
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_1000C1468();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = *(void **)(a1 + 56);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v24 = v13;
        __int16 v25 = 2112;
        __int16 v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Exit shared library operation %@ failed: %@", buf, 0x16u);
      }
    }
    id v14 = objc_msgSend(*(id *)(a1 + 32), "lastOperationRequestUUIDs", a1);
    uint64_t v15 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v18 withRequestUUIDs:v14 description:@"Failed to request exit from shared library"];

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v16 = sub_1000C1468();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = *(void **)(a1 + 56);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Exit shared library operation %@ succeeded", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
}

id sub_1000C26A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return (id)(*(uint64_t (**)(void))(v3[34] + 16))();
  }
  else {
    return _[v3 _reallyExit];
  }
}

void sub_1000C27F4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.exitsharedlibrary");
  uint64_t v3 = qword_1002CEB48;
  qword_1002CEB48 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1000C29C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2) {
    return _[v3 getScopeInfoWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void, void, void, void, void, uint64_t))(v3[34] + 16))(v3[34], v3[35], 0, 0, 0, a3);
  }
}

void sub_1000C2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C2C70(uint64_t a1)
{
}

void sub_1000C2C78(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v6)
  {
    id v8 = -[CPLCloudKitScope initWithZone:options:]([CPLCloudKitScope alloc], "initWithZone:options:", v6, [*(id *)(*(void *)(a1 + 32) + 288) options]);
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 288);
    *(void *)(v9 + 288) = v8;

    uint64_t v11 = [*(id *)(a1 + 32) controller];
    uint64_t v12 = [v11 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) engineScope:*(void *)(*(void *)(a1 + 32) + 296)];
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
  uint64_t v15 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v16 = v15[34];
    uint64_t v17 = v15[35];
    id v18 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cloudKitScope];
    long long v19 = [v18 transportScope];
    (*(void (**)(uint64_t, uint64_t, void, void, void *, id))(v16 + 16))(v16, v17, 0, 0, v19, v7);
  }
  else if (v15[35])
  {
    long long v20 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) recordsToFetchForScopeInfoWithCurrentUserID:*(void *)(a1 + 40)];
    id v21 = [v20 count];
    long long v22 = *(void **)(a1 + 32);
    if (v21)
    {
      uint64_t v23 = v22[36];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1000C2F08;
      v30[3] = &unk_10027AAD8;
      v30[4] = v22;
      long long v29 = *(_OWORD *)(a1 + 40);
      id v24 = (id)v29;
      long long v31 = v29;
      [v22 fetchRecordsWithIDs:v20 fetchResources:1 inScope:v23 completionHandler:v30];
    }
    else
    {
      uint64_t v25 = v22[34];
      uint64_t v26 = v22[35];
      __int16 v27 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cloudKitScope];
      id v28 = [v27 transportScope];
      (*(void (**)(uint64_t, uint64_t, void, void, void *, void))(v25 + 16))(v25, v26, 0, 0, v28, 0);
    }
  }
  else
  {
    [v15 _determineScopeTypeAndFetchLibraryInfoWithCurrentUserID:*(void *)(a1 + 40)];
  }
}

void sub_1000C2F08(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v18 = v7;
  if (a4)
  {
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:a4 withRequestUUIDs:a3 description:@"Error fetching scope-level info records"];
    uint64_t v9 = a1[4];
    uint64_t v10 = *(void *)(v9 + 272);
    uint64_t v11 = *(void *)(v9 + 280);
    uint64_t v12 = [*(id *)(*(void *)(a1[6] + 8) + 40) cloudKitScope];
    uint64_t v13 = [v12 transportScope];
    (*(void (**)(uint64_t, uint64_t, void, void, void *, void *))(v10 + 16))(v10, v11, 0, 0, v13, v8);
  }
  else
  {
    id v8 = [*(id *)(*(void *)(a1[6] + 8) + 40) scopeChangeFromCKRecords:v7 currentUserID:a1[5] previousScopeChange:*(void *)(a1[4] + 304)];
    uint64_t v12 = [*(id *)(*(void *)(a1[6] + 8) + 40) scopeFlagsUpdateFromCKRecords:v18];
    uint64_t v14 = a1[4];
    uint64_t v15 = *(void *)(v14 + 272);
    uint64_t v16 = *(void *)(v14 + 280);
    uint64_t v13 = [*(id *)(*(void *)(a1[6] + 8) + 40) cloudKitScope];
    uint64_t v17 = [v13 transportScope];
    (*(void (**)(uint64_t, uint64_t, void *, void *, void *, void))(v15 + 16))(v15, v16, v8, v12, v17, 0);
  }
}

id sub_1000C32C0()
{
  if (qword_1002CEB50 != -1) {
    dispatch_once(&qword_1002CEB50, &stru_10027AC10);
  }
  uint64_t v0 = (void *)qword_1002CEB58;
  return v0;
}

void sub_1000C3314(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (a4)
  {
    id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:a4 withRequestUUIDs:a3 description:@"Error fetching scope-level info records"];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    id v9 = [*(id *)(a1 + 40) scopeTypeForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) proposedScopeType:*(void *)(*(void *)(a1 + 32) + 280) fetchedRecords:v7 currentUserID:*(void *)(a1 + 48)];
    if (v9)
    {
      id v10 = v9;
      if (!_CPLSilentLogging)
      {
        uint64_t v11 = sub_1000C32C0();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier];
          uint64_t v13 = +[CPLScopeChange descriptionForScopeType:v10];
          int v25 = 138412546;
          uint64_t v26 = v12;
          __int16 v27 = 2112;
          id v28 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Determined scope type for %@: %@", (uint8_t *)&v25, 0x16u);
        }
      }
      id v14 = objc_alloc((Class)CPLEngineScope);
      uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier];
      id v16 = [v14 initWithScopeIdentifier:v15 scopeType:v10];

      uint64_t v17 = [*(id *)(a1 + 40) zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) engineScope:v16];
      id v18 = [v17 scopeChangeFromCKRecords:v7 currentUserID:*(void *)(a1 + 48) previousScopeChange:0];
      long long v19 = [v17 scopeFlagsUpdateFromCKRecords:v7];
      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 272);
      id v21 = [v17 cloudKitScope];
      long long v22 = [v21 transportScope];
      (*(void (**)(uint64_t, id, void *, void *, void *, void))(v20 + 16))(v20, v10, v18, v19, v22, 0);
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v23 = sub_1000C32C0();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = [*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier];
          int v25 = 138412290;
          uint64_t v26 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Still unable to determine scope type for %@", (uint8_t *)&v25, 0xCu);
        }
      }
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
    }
  }
}

id sub_1000C38C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2) {
    return _[v3 _fetchLibraryInfoAndStateWithCurrentSyncAnchor:*(void *)(a1 + 40) currentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v3[34] + 16))();
  }
}

void sub_1000C3A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = +[CPLCloudKitErrors CPLErrorForCloudKitError:a4 withRequestUUIDs:a3 description:@"Error fetching scope-level info records"];
    id v6 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16);
    id v8 = (id)v5;
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 40) scopeChangeFromCKRecords:a2 currentUserID:*(void *)(a1 + 48) previousScopeChange:*(void *)(*(void *)(a1 + 32) + 304)];
    id v6 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16);
    id v8 = (id)v7;
  }
  v6();
}

void sub_1000C3CC0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v7)
  {
    if (a3 && !_CPLSilentLogging)
    {
      id v9 = sub_1000C32C0();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 288);
        uint64_t v11 = [v7 zoneID];
        int v20 = 138412546;
        uint64_t v21 = v10;
        __int16 v22 = 2112;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Zone ID for %@ was wrong. Updating it to %@", (uint8_t *)&v20, 0x16u);
      }
    }
    uint64_t v12 = -[CPLCloudKitScope initWithZone:options:]([CPLCloudKitScope alloc], "initWithZone:options:", v7, [*(id *)(*(void *)(a1 + 32) + 288) options]);
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(void **)(v13 + 288);
    *(void *)(v13 + 288) = v12;

    uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 288) transportScope];
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void **)(v16 + 280);
    *(void *)(v16 + 280) = v15;

    id v18 = [v7 currentServerChangeToken];
    if (v18)
    {
      long long v19 = +[NSKeyedArchiver cpl_archivedDataWithRootObject:v18];
    }
    else
    {
      long long v19 = 0;
    }
    [*(id *)(a1 + 32) _fetchLibraryInfoAndStateWithCurrentSyncAnchor:v19];
  }
  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
}

void sub_1000C43C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (!a4)
  {
    id v9 = [*(id *)(a1 + 40) scopeTypeForCloudKitScope:*(void *)(a1 + 48) proposedScopeType:0 fetchedRecords:v7 currentUserID:*(void *)(a1 + 56)];
    if (v9)
    {
      unint64_t v10 = (unint64_t)v9;
      if (!_CPLSilentLogging)
      {
        uint64_t v11 = sub_1000C32C0();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = objc_msgSend(*(id *)(a1 + 64), "cpl_zoneName");
          uint64_t v13 = +[CPLScopeChange descriptionForScopeType:v10];
          *(_DWORD *)long long buf = 138543618;
          __int16 v27 = v12;
          __int16 v28 = 2112;
          long long v29 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Determined scope type for %{public}@: %@", buf, 0x16u);
        }
      }
      id v14 = *(void **)(a1 + 32);
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1000C4690;
        v20[3] = &unk_10027ABA0;
        v20[4] = v14;
        id v21 = *(id *)(a1 + 64);
        unint64_t v25 = v10;
        id v22 = *(id *)(a1 + 40);
        id v23 = *(id *)(a1 + 48);
        id v24 = v7;
        [v14 getUserRecordIDFetchIfNecessaryWithCompletionHandler:v20];

        goto LABEL_17;
      }
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v17 = *(void **)(a1 + 32);
    }
    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v15 = sub_1000C32C0();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = objc_msgSend(*(id *)(a1 + 64), "cpl_zoneName");
          *(_DWORD *)long long buf = 138543362;
          __int16 v27 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unable to determine scope type for %{public}@", buf, 0xCu);
        }
      }
      uint64_t v17 = *(void **)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 56);
    }
    [v17 _validateLastZoneIDInArray:v18 currentUserID:v19];
    goto LABEL_17;
  }
  id v8 = +[CPLCloudKitErrors CPLErrorForCloudKitError:a4 withRequestUUIDs:a3 description:@"Error fetching scope-level info records"];
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();

LABEL_17:
}

void sub_1000C4690(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  if (v17)
  {
    id v6 = objc_alloc((Class)CPLEngineScope);
    id v7 = [*(id *)(a1 + 32) scopeIdentifierFromZoneID:*(void *)(a1 + 40)];
    id v8 = [v6 initWithScopeIdentifier:v7 scopeType:*(void *)(a1 + 72)];

    id v9 = [*(id *)(a1 + 48) zoneIdentificationForCloudKitScope:*(void *)(a1 + 56) engineScope:v8];
    unint64_t v10 = [v9 scopeChangeFromCKRecords:*(void *)(a1 + 64) currentUserID:v17 previousScopeChange:0];
    uint64_t v11 = [v9 scopeFlagsUpdateFromCKRecords:*(void *)(a1 + 64)];
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 272);
    uint64_t v13 = [v9 cloudKitScope];
    id v14 = [v13 transportScope];
    (*(void (**)(uint64_t, void *, void *, void *, void))(v12 + 16))(v12, v10, v14, v11, 0);
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 272);
    if (v5)
    {
      (*(void (**)(uint64_t, void, void, void, id))(v15 + 16))(v15, 0, 0, 0, v5);
    }
    else
    {
      uint64_t v16 = +[CPLErrors unknownError];
      (*(void (**)(uint64_t, void, void, void, void *))(v15 + 16))(v15, 0, 0, 0, v16);
    }
  }
}

id sub_1000C4850(uint64_t a1)
{
  return [*(id *)(a1 + 32) _validateLastZoneIDInArray:*(void *)(a1 + 40) currentUserID:*(void *)(a1 + 48)];
}

void sub_1000C4934(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = [*(id *)(a1 + 32) mainScopeIdentifier];
    id v8 = CPLSharingScopePrefixForScopeWithIdentifier();

    id v9 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000C4AD4;
    v15[3] = &unk_10027ABF0;
    id v16 = v8;
    id v17 = v6;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000C4B4C;
    v12[3] = &unk_100276088;
    void v12[4] = *(void *)(a1 + 32);
    id v13 = v17;
    id v14 = v5;
    id v10 = v17;
    id v11 = v8;
    [v9 enumerateAllZonesWithBlock:v15 completionHandler:v12];
  }
}

void sub_1000C4AD4(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 zoneName];
  unsigned int v4 = [v3 hasPrefix:*(void *)(a1 + 32)];

  if (v4) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_1000C4B4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16);
    v3();
  }
  else if ([*(id *)(a1 + 40) count])
  {
    if (!_CPLSilentLogging)
    {
      unsigned int v4 = sub_1000C32C0();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = [*(id *)(a1 + 40) count];
        int v9 = 134217984;
        id v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu potential candidates for a shared zone", (uint8_t *)&v9, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _validateLastZoneIDInArray:*(void *)(a1 + 40) currentUserID:*(void *)(a1 + 48)];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000C32C0();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No valid zones for a shared zone", (uint8_t *)&v9, 2u);
      }
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 272);
    id v8 = +[CPLErrors cplErrorWithCode:39 description:@"No Shared Zone available"];
    (*(void (**)(uint64_t, void, void, void, void *))(v7 + 16))(v7, 0, 0, 0, v8);
  }
}

void sub_1000C4D38(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.getlibraryinfo");
  uint64_t v3 = qword_1002CEB58;
  qword_1002CEB58 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000C5288(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C52B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C52C8(uint64_t a1)
{
}

void sub_1000C52D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldIgnoreZoneWithZoneID:v3])
  {
    if (!_CPLSilentLogging)
    {
      unsigned int v4 = sub_1000C5504();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = objc_msgSend(v3, "cpl_zoneName");
        int v13 = 138412290;
        id v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring new or changed %@", (uint8_t *)&v13, 0xCu);
      }
    }
    [*(id *)(a1 + 32) noteZoneIDChangeWasIgnored:v3];
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) scopeIdentifierFromZoneID:v3];
    uint64_t v7 = 2 * *(unsigned __int8 *)(a1 + 56);
    if (+[CPLCloudKitZoneIdentification isSupportedZoneID:v3])
    {
      v7 |= 4uLL;
    }
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1000C5504();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = objc_msgSend(v3, "cpl_zoneName");
        id v10 = +[CPLCloudKitScope descriptionForCloudKitScopeOptions:v7];
        int v13 = 138412546;
        id v14 = v9;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found new or changed zone %@ (%@)", (uint8_t *)&v13, 0x16u);
      }
    }
    id v11 = [[CPLCloudKitScope alloc] initWithZoneID:v3 options:v7];
    uint64_t v12 = [[CPLCloudKitScopeUpdate alloc] initWithCloudKitScope:v11];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v12 forKeyedSubscript:v6];
  }
}

id sub_1000C5504()
{
  if (qword_1002CEB60 != -1) {
    dispatch_once(&qword_1002CEB60, &stru_10027ACF8);
  }
  uint64_t v0 = (void *)qword_1002CEB68;
  return v0;
}

void sub_1000C5558(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldIgnoreZoneWithZoneID:v3])
  {
    if (!_CPLSilentLogging)
    {
      unsigned int v4 = sub_1000C5504();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = objc_msgSend(v3, "cpl_zoneName");
        int v9 = 138412290;
        id v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring deleted %@", (uint8_t *)&v9, 0xCu);
      }
    }
    [*(id *)(a1 + 32) noteZoneIDChangeWasIgnored:v3];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000C5504();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = objc_msgSend(v3, "cpl_zoneName");
        int v9 = 138412290;
        id v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Found deleted zone %@", (uint8_t *)&v9, 0xCu);
      }
    }
    id v8 = [*(id *)(a1 + 40) scopeIdentifierFromZoneID:v3];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v8];
  }
}

CPLCloudKitScopeListSyncAnchor *sub_1000C56E8(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  id v4 = a2;
  id v5 = [CPLCloudKitScopeListSyncAnchor alloc];
  id v6 = *(void **)(*(void *)(a1 + 32) + 272);
  if (v3)
  {
    uint64_t v7 = [v6 privateChangeToken];
    id v8 = v5;
    id v9 = v7;
    id v10 = v4;
  }
  else
  {
    uint64_t v7 = [v6 sharedChangeToken];
    id v8 = v5;
    id v9 = v4;
    id v10 = v7;
  }
  id v11 = [(CPLCloudKitScopeListSyncAnchor *)v8 initWithPrivateChangeToken:v9 sharedChangeToken:v10];

  return v11;
}

void sub_1000C579C(void *a1, void *a2)
{
  id v18 = a2;
  uint64_t v4 = (*(void (**)(void))(a1[5] + 16))();
  uint64_t v5 = a1[4];
  id v6 = *(void **)(v5 + 272);
  *(void *)(v5 + 272) = v4;

  uint64_t v7 = a1[4];
  uint64_t v8 = *(void *)(v7 + 280);
  uint64_t v9 = *(void *)(*(void *)(a1[6] + 8) + 40);
  uint64_t v10 = *(void *)(*(void *)(a1[7] + 8) + 40);
  id v11 = [*(id *)(v7 + 272) scopeListSyncAnchor];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v8 + 16))(v8, v9, v10, v11);

  id v12 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v13 = *(void *)(a1[6] + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  id v15 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v16 = *(void *)(a1[7] + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;
}

void sub_1000C58C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000C59A4;
  v12[3] = &unk_100276478;
  void v12[4] = v8;
  id v13 = v7;
  char v16 = *(unsigned char *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v9;
  id v10 = v6;
  id v11 = v7;
  [v8 dispatchAsync:v12];
}

void sub_1000C59A4(uint64_t a1)
{
  id v13 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (v13)
  {
    os_log_t v2 = [*(id *)(a1 + 32) lastOperationRequestUUIDs];
    if (*(unsigned char *)(a1 + 64)) {
      int v3 = "shared";
    }
    else {
      int v3 = "private";
    }
    uint64_t v4 = +[CPLCloudKitErrors CPLErrorForCloudKitError:v13, v2, @"failed to fetch %s database changes", v3 withRequestUUIDs description];

    uint64_t v5 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 288) + 16);
  }
  else
  {
    uint64_t v6 = (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 272);
    *(void *)(v7 + 272) = v6;

    if (!*(unsigned char *)(a1 + 64))
    {
      id v9 = [*(id *)(a1 + 32) controller];
      unsigned __int8 v10 = [v9 supportsSharedDatabase];

      if (v10)
      {
        [*(id *)(a1 + 32) _launchOperationForSharedDatabase:1];
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(v11 + 288);
    uint64_t v4 = [*(id *)(v11 + 272) scopeListSyncAnchor];
    uint64_t v5 = *(void (**)(void))(v12 + 16);
  }
  v5();

LABEL_11:
}

void sub_1000C5FD0(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.getscopelistchangees");
  uint64_t v3 = qword_1002CEB68;
  qword_1002CEB68 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000C6490(uint64_t a1, void *a2, uint64_t a3)
{
  id v21 = a2;
  uint64_t v5 = objc_alloc_init(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem);
  id v6 = *(id *)(*(void *)(a1 + 32) + 296);
  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 296) userInfo];
  uint64_t v8 = [v7 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (v8)
  {
    id v9 = [v8 domain];
    unsigned int v10 = [v9 isEqualToString:CKErrorDomain];

    if (v10)
    {
      uint64_t v11 = [*(id *)(a1 + 32) _itemErrorFromError:v8 forID:v21];
      uint64_t v12 = (void *)v11;
      if (v11) {
        id v13 = (void *)v11;
      }
      else {
        id v13 = v8;
      }
      id v14 = v13;

      id v6 = v14;
    }
  }
  id v15 = [v6 description];
  [(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem *)v5 setErrorMessage:v15];

  char v16 = [v6 domain];
  [(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem *)v5 setErrorDomain:v16];

  id v17 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v6 code]);
  [(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem *)v5 setErrorCode:v17];

  id v18 = [v21 recordName];
  [(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem *)v5 setOriginRecordID:v18];

  uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 288) objectAtIndex:a3];
  int v20 = [v19 recordName];
  [(CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem *)v5 setDestinationRecordID:v20];

  [*(id *)(a1 + 40) addObject:v5];
}

void sub_1000C6698(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1000C6738;
  v8[3] = &unk_100277780;
  void v8[4] = v6;
  id v9 = v5;
  char v10 = a2;
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_1000C6738(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = _CPLSilentLogging == 0;
  }
  if (v4)
  {
    if (qword_1002CEB70 != -1) {
      dispatch_once(&qword_1002CEB70, &stru_10027AD40);
    }
    id v5 = qword_1002CEB78;
    if (os_log_type_enabled((os_log_t)qword_1002CEB78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(v6 + 280);
      uint64_t v8 = *(void *)(v6 + 288);
      int v9 = 138412802;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to send feedback about move batch (%@ to %@) with error: %@", (uint8_t *)&v9, 0x20u);
    }
    int v3 = *(unsigned __int8 *)(a1 + 48);
  }
  (*(void (**)(void, BOOL, void *))(*(void *)(*(void *)(a1 + 32) + 272) + 16))(*(void *)(*(void *)(a1 + 32) + 272), v3 != 0, v2);
}

void sub_1000C69D4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.exitfeedback");
  uint64_t v3 = qword_1002CEB78;
  qword_1002CEB78 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1000C6B90(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10, char a11, void *a12)
{
  id v14 = a3;
  id v15 = a12;
  char v16 = *(void **)(a1 + 32);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000C6C70;
  v19[3] = &unk_10027AD68;
  v19[4] = v16;
  id v20 = v15;
  char v22 = a2;
  id v21 = v14;
  char v23 = a11;
  id v17 = v14;
  id v18 = v15;
  [v16 dispatchAsync:v19];
}

void sub_1000C6C70(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)];
  if (!(*(unsigned __int8 *)(a1 + 56) | _CPLSilentLogging))
  {
    if (qword_1002CEB80 != -1) {
      dispatch_once(&qword_1002CEB80, &stru_10027ADB0);
    }
    uint64_t v3 = qword_1002CEB88;
    if (os_log_type_enabled((os_log_t)qword_1002CEB88, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 138412546;
      uint64_t v6 = v4;
      __int16 v7 = 2112;
      uint64_t v8 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to request ramp information with operationID: %@ error: %@", (uint8_t *)&v5, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
}

void sub_1000C6DB8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.sharedlibraryserverramp");
  uint64_t v3 = qword_1002CEB88;
  qword_1002CEB88 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t CPLCKAvailabilityResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0;
      }
LABEL_42:
      *(unsigned char *)(a1 + 12) = v19 != 0;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000C7AF8()
{
  if (qword_1002CEB90 != -1) {
    dispatch_once(&qword_1002CEB90, &stru_10027ADF8);
  }
  uint64_t v0 = (void *)qword_1002CEB98;
  return v0;
}

void sub_1000C7B4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      unint64_t v7 = sub_1000C7AF8();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error checking resources: %@", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      char v8 = sub_1000C7AF8();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Finished checking resources", buf, 2u);
      }
    }
    id v9 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 280), "count"));
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    __int16 v11 = *(void **)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000C7E14;
    v16[3] = &unk_10027ADD8;
    id v17 = v5;
    id v12 = v10;
    uint64_t v13 = *(void *)(a1 + 32);
    id v18 = v12;
    uint64_t v19 = v13;
    id v14 = v9;
    id v20 = v14;
    [v11 enumerateKeysAndObjectsUsingBlock:v16];
    if (!_CPLSilentLogging)
    {
      unint64_t v15 = sub_1000C7AF8();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412546;
        id v22 = v14;
        __int16 v23 = 2112;
        id v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Matched resources %@ Mismatched resources %@", buf, 0x16u);
      }
    }
    (*(void (**)(void, id, id, void))(*(void *)(*(void *)(a1 + 32) + 272) + 16))(*(void *)(*(void *)(a1 + 32) + 272), v14, v12, 0);
  }
}

void sub_1000C7E14(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      __int16 v11 = 0;
      do
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v11);
        if (!v6)
        {
          +[CPLErrors cplErrorWithCode:26, @"Unable to find cloud record for resource %@", *(void *)(*((void *)&v18 + 1) + 8 * (void)v11) description];
          goto LABEL_10;
        }
        if ([v6 inExpunged])
        {
          +[CPLErrors cplErrorWithCode:26, @"Record for %@ is expunged", v12 description];
LABEL_10:
          id v13 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
          [*(id *)(a1 + 40) setObject:v13 forKey:v12];
          goto LABEL_12;
        }
        id v14 = *(void **)(a1 + 48);
        id v17 = 0;
        unsigned __int8 v15 = [v14 _checkResource:v12 record:v6 error:&v17];
        id v13 = v17;
        if ((v15 & 1) == 0) {
          goto LABEL_11;
        }
        [*(id *)(a1 + 56) addObject:v12];
LABEL_12:

        __int16 v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v16 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
      id v9 = v16;
    }
    while (v16);
  }
}

void sub_1000C82A8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcescheck");
  uint64_t v3 = qword_1002CEB98;
  qword_1002CEB98 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t variable initialization expression of CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID()
{
  return 0;
}

uint64_t (*CMTime.value.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.cloudDbErrorName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Rpcproto_ErrorInfo.cloudDbErrorName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Goldilocks_SilentMoverRampingResponse.retryAfterSec.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t variable initialization expression of Goldilocks_ExitStatusFeedbackRequest.status()
{
  return 0;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.clientCode.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.clientCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.retentionPolicy.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.serverCode.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.serverCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.movesComplete.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.ResultError.localizedErrorDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.localizedErrorDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t variable initialization expression of CMTime.timescale()
{
  return 0;
}

uint64_t Rpcproto_ErrorInfo.retryAfterSeconds.getter()
{
  return *(unsigned int *)(v0 + 80);
}

uint64_t Rpcproto_ErrorInfo.retryAfterSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*Goldilocks_ErrorInfo.ResultError.learnMoreLink.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

void *variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackRequest.items()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t Rpcproto_ErrorInfo.loggingDetails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Rpcproto_ErrorInfo.loggingDetails.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.stopAtStage.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA000);
}

uint64_t Rpcproto_ErrorInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo(0) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Rpcproto_ErrorInfo.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.optionalUnshareOperationPercentage.getter()
{
  return *(void *)v0;
}

uint64_t Goldilocks_OperationControl.optionalUnshareOperationPercentage.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t Rpcproto_ErrorInfo.Client.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8950(type metadata accessor for Rpcproto_ErrorInfo.Client, a1);
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.Client(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA0A8);
}

uint64_t Rpcproto_ErrorInfo.Client.unknownFields.setter(uint64_t a1)
{
  return sub_1000C89E8(a1, type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t (*Rpcproto_ErrorInfo.Client.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.Client.Code.init(rawValue:)(uint64_t a1)
{
  return sub_1000C8AC4(a1, (uint64_t (*)(void))sub_1000CD7CC);
}

uint64_t Rpcproto_ErrorInfo.Client.Code.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_10024AE48[result];
  }
  return result;
}

void sub_1000C8780(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_1000C8790@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8B18((uint64_t (*)(void))sub_1000CD7CC, a1);
}

uint64_t sub_1000C87A8()
{
  return Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_1000C87B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C8B88(a1, sub_1000CD7CC, a2);
}

uint64_t sub_1000C87CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t sub_1000C8800(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000CDE28();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000C8850(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)a1, *(unsigned char *)(a1 + 8));
  return v4 == Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v2, v3);
}

BOOL sub_1000C88A8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_10024B100[a1];
  }
  if (a4) {
    a3 = qword_10024B100[a3];
  }
  return a1 == a3;
}

BOOL sub_1000C88CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL sub_1000C88D8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_10024B188[a1];
  }
  if (a4) {
    a3 = qword_10024B188[a3];
  }
  return a1 == a3;
}

BOOL sub_1000C88FC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_10024B148[a1];
  }
  if (a4) {
    a3 = qword_10024B148[a3];
  }
  return a1 == a3;
}

uint64_t Rpcproto_ErrorInfo.Client.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8D3C((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Client, a1);
}

uint64_t Rpcproto_ErrorInfo.Server.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8950(type metadata accessor for Rpcproto_ErrorInfo.Server, a1);
}

uint64_t sub_1000C8950@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Rpcproto_ErrorInfo.Server.unknownFields.setter(uint64_t a1)
{
  return sub_1000C89E8(a1, type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000C89E8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Rpcproto_ErrorInfo.Server.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.Server.Code.init(rawValue:)(uint64_t a1)
{
  return sub_1000C8AC4(a1, (uint64_t (*)(void))sub_1000CDC10);
}

uint64_t sub_1000C8AC4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t Rpcproto_ErrorInfo.Server.Code.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_10024B188[result];
  }
  return result;
}

uint64_t sub_1000C8B00@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8B18((uint64_t (*)(void))sub_1000CDC10, a1);
}

uint64_t sub_1000C8B18@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_1000C8B50()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_10024B188[result];
  }
  return result;
}

uint64_t sub_1000C8B70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C8B88(a1, sub_1000CDC10, a2);
}

uint64_t sub_1000C8B88@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

void sub_1000C8BC4(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_10024B188[v2];
  }
  *a1 = v2;
}

Swift::Int sub_1000C8BE8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C8C54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000CDDD4();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000C8CA0()
{
  return Hasher._finalize()();
}

BOOL sub_1000C8D08(uint64_t a1, uint64_t a2)
{
  return sub_1000C88D8(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t Rpcproto_ErrorInfo.Server.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C8D3C((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Server, a1);
}

uint64_t sub_1000C8D3C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Rpcproto_ErrorInfo.LoggingDetail.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0);
  return UnknownStorage.init()();
}

uint64_t Rpcproto_ErrorInfo.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = &_swiftEmptyArrayStorage;
  type metadata accessor for Rpcproto_ErrorInfo(0);
  return UnknownStorage.init()();
}

void sub_1000C8FCC()
{
  static Rpcproto_ErrorInfo.Client.Code.allCases = (uint64_t)&off_10027AEE8;
}

uint64_t *Rpcproto_ErrorInfo.Client.Code.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9BC0 != -1) {
    swift_once();
  }
  return &static Rpcproto_ErrorInfo.Client.Code.allCases;
}

uint64_t static Rpcproto_ErrorInfo.Client.Code.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9BC0);
}

uint64_t static Rpcproto_ErrorInfo.Client.Code.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9BC0, &static Rpcproto_ErrorInfo.Client.Code.allCases);
}

uint64_t (*static Rpcproto_ErrorInfo.Client.Code.allCases.modify())()
{
  if (qword_1002C9BC0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1000C9100@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9BC0, &static Rpcproto_ErrorInfo.Client.Code.allCases, a1);
}

void sub_1000C9124()
{
  static Rpcproto_ErrorInfo.Server.Code.allCases = (uint64_t)&off_10027B478;
}

uint64_t *Rpcproto_ErrorInfo.Server.Code.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9BC8 != -1) {
    swift_once();
  }
  return &static Rpcproto_ErrorInfo.Server.Code.allCases;
}

uint64_t static Rpcproto_ErrorInfo.Server.Code.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9BC8);
}

uint64_t sub_1000C91A8(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Rpcproto_ErrorInfo.Server.Code.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9BC8, &static Rpcproto_ErrorInfo.Server.Code.allCases);
}

uint64_t sub_1000C9228(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Rpcproto_ErrorInfo.Server.Code.allCases.modify())()
{
  if (qword_1002C9BC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000C9318@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9BC8, &static Rpcproto_ErrorInfo.Server.Code.allCases, a1);
}

uint64_t sub_1000C933C@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

void *Rpcproto_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Rpcproto_ErrorInfo.protoMessageName;
}

unint64_t static Rpcproto_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t sub_1000C93CC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Rpcproto_ErrorInfo._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_10024A280;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)unint64_t v4 = "message";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  id v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 6;
  *(void *)unint64_t v8 = "cloudDbErrorName";
  *(void *)(v8 + 8) = 16;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  id v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *id v9 = 3;
  *(void *)uint64_t v10 = "clientCode";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  __int16 v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "serverCode";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v7();
  id v13 = (void *)(v20 + v3 + 4 * v2);
  id v14 = (char *)v13 + v1[14];
  *id v13 = 5;
  *(void *)id v14 = "stackTrace";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  unsigned __int8 v15 = (void *)(v20 + v3 + 5 * v2);
  id v16 = (char *)v15 + v1[14];
  void *v15 = 7;
  *(void *)id v16 = "retryAfterSeconds";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  id v17 = (void *)(v20 + v3 + 6 * v2);
  long long v18 = (char *)v17 + v1[14];
  *id v17 = 8;
  *(void *)long long v18 = "loggingDetails";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Rpcproto_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9BD0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap);
}

uint64_t static Rpcproto_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9BD0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap, a1);
}

uint64_t Rpcproto_ErrorInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          sub_1000CDE28();
          goto LABEL_7;
        case 4:
          sub_1000CDDD4();
LABEL_7:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 8:
          type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0);
          sub_1000CE248(&qword_1002C9EC8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Rpcproto_ErrorInfo.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40))
      || (sub_1000CDE28(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 48)
        || (sub_1000CDDD4(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
      {
        unint64_t v5 = *(void *)(v0 + 72);
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = *(void *)(v0 + 64) & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          unint64_t v7 = *(void *)(v0 + 24);
          uint64_t v8 = HIBYTE(v7) & 0xF;
          if ((v7 & 0x2000000000000000) == 0) {
            uint64_t v8 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
          }
          if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            if (!*(_DWORD *)(v0 + 80)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
            {
              if (!*(void *)(*(void *)(v0 + 88) + 16)
                || (type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0),
                    sub_1000CE248(&qword_1002C9EC8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for Rpcproto_ErrorInfo(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int Rpcproto_ErrorInfo.hashValue.getter()
{
  return sub_1000CCBA8((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo, &qword_1002C9EE0, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000C9B90@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000C9BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000C9C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000C9CCC())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000C9CF0()
{
  return Rpcproto_ErrorInfo.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000C9D08()
{
  return Rpcproto_ErrorInfo.traverse<A>(visitor:)();
}

uint64_t sub_1000C9D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CE248(&qword_1002CA280, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C9DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9BD0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap, a1);
}

uint64_t sub_1000C9DC8()
{
  sub_1000CE248(&qword_1002C9F58, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
  return Message.debugDescription.getter();
}

uint64_t sub_1000C9E38()
{
  sub_1000CE248(&qword_1002C9F58, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
  return Message.hash(into:)();
}

void sub_1000C9EB8(int a1)
{
  v1._countAndFlagsBits = 0x746E65696C432ELL;
  v1._object = (void *)0xE700000000000000;
  sub_1000CC5CC(a1, v1, static Rpcproto_ErrorInfo.Client.protoMessageName, &static Rpcproto_ErrorInfo.Client.protoMessageName[1]);
}

void *Rpcproto_ErrorInfo.Client.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9BD8 != -1) {
    swift_once();
  }
  return static Rpcproto_ErrorInfo.Client.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.Client.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9BD8, static Rpcproto_ErrorInfo.Client.protoMessageName);
}

uint64_t sub_1000C9F50(uint64_t a1)
{
  return sub_1000CBA40(a1, static Rpcproto_ErrorInfo.Client._protobuf_nameMap);
}

uint64_t Rpcproto_ErrorInfo.Client._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9BE0, (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap);
}

uint64_t static Rpcproto_ErrorInfo.Client._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9BE0, (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap, a1);
}

uint64_t Rpcproto_ErrorInfo.Client.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBC14(a1, a2, a3, (void (*)(void))sub_1000CDE28);
}

uint64_t Rpcproto_ErrorInfo.Client.traverse<A>(visitor:)()
{
  if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8))
    || (sub_1000CDE28(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for Rpcproto_ErrorInfo.Client(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Rpcproto_ErrorInfo.Client.hashValue.getter()
{
  return sub_1000CCBA8((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Client, &qword_1002C9EE8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000CA0F4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000CA120(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9BD8, static Rpcproto_ErrorInfo.Client.protoMessageName);
}

uint64_t (*sub_1000CA150())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000CA174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Client.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000CA18C()
{
  return Rpcproto_ErrorInfo.Client.traverse<A>(visitor:)();
}

uint64_t sub_1000CA1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CE248(&qword_1002CA278, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CA220@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9BE0, (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap, a1);
}

uint64_t sub_1000CA244()
{
  sub_1000CE248(&qword_1002C9F70, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
  return Message.debugDescription.getter();
}

uint64_t sub_1000CA2B0()
{
  sub_1000CE248(&qword_1002C9F70, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
  return Message.hash(into:)();
}

uint64_t sub_1000CA32C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v177 = swift_allocObject();
  *(_OWORD *)(v177 + 16) = xmmword_10024A290;
  unint64_t v4 = v177 + v3;
  unint64_t v5 = v177 + v3 + v1[14];
  *(void *)(v177 + v3) = 0;
  *(void *)unint64_t v5 = "noerror";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v177 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "unknown";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v177 + v3 + 2 * v2);
  __int16 v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)__int16 v11 = "expiredAppConfig";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v177 + v3 + 3 * v2);
  id v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)id v13 = "expiredGlobalConfig";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  id v14 = (void *)(v177 + v3 + 4 * v2);
  unsigned __int8 v15 = (char *)v14 + v1[14];
  *id v14 = 4;
  *(void *)unsigned __int8 v15 = "badSyntax";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  id v16 = (void *)(v177 + v3 + 5 * v2);
  id v17 = (char *)v16 + v1[14];
  *id v16 = 5;
  *(void *)id v17 = "forbidden";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  long long v18 = (void *)(v177 + v3 + 6 * v2);
  long long v19 = (char *)v18 + v1[14];
  *long long v18 = 6;
  *(void *)long long v19 = "throttled";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v177 + v3 + 7 * v2);
  long long v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)long long v21 = "refused";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  uint64_t v22 = v177 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "notSupported";
  *(void *)(v22 + 8) = 12;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  __int16 v23 = (void *)(v177 + v3 + 9 * v2);
  id v24 = (char *)v23 + v1[14];
  *__int16 v23 = 9;
  *(void *)id v24 = "exists";
  *((void *)v24 + 1) = 6;
  v24[16] = 2;
  v8();
  unint64_t v25 = (void *)(v177 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "requestAlreadyProcessed";
  *((void *)v26 + 1) = 23;
  v26[16] = 2;
  v8();
  __int16 v27 = (void *)(v177 + v3 + 11 * v2);
  __int16 v28 = (char *)v27 + v1[14];
  *__int16 v27 = 11;
  *(void *)__int16 v28 = "badAuthToken";
  *((void *)v28 + 1) = 12;
  v28[16] = 2;
  v8();
  long long v29 = (void *)(v177 + v3 + 12 * v2);
  id v30 = (char *)v29 + v1[14];
  *long long v29 = 12;
  *(void *)id v30 = "needsAuthentication";
  *((void *)v30 + 1) = 19;
  v30[16] = 2;
  v8();
  long long v31 = (void *)(v177 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *long long v31 = 13;
  *(void *)uint64_t v32 = "mescalSignatureMissing";
  *((void *)v32 + 1) = 22;
  v32[16] = 2;
  v8();
  id v33 = (void *)(v177 + v3 + 14 * v2);
  __int16 v34 = (char *)v33 + v1[14];
  *id v33 = 14;
  *(void *)__int16 v34 = "invalidMescalSignature";
  *((void *)v34 + 1) = 22;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v177 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "opLockFailure";
  *((void *)v36 + 1) = 13;
  v36[16] = 2;
  v8();
  uint64_t v37 = v177 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "atomicFailure";
  *(void *)(v37 + 8) = 13;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v177 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 17;
  *(void *)uint64_t v39 = "resetNeeded";
  *((void *)v39 + 1) = 11;
  v39[16] = 2;
  v8();
  unint64_t v40 = (void *)(v177 + v3 + 18 * v2);
  id v41 = (char *)v40 + v1[14];
  *unint64_t v40 = 18;
  *(void *)id v41 = "fieldsPerTypeLimitExceeded";
  *((void *)v41 + 1) = 26;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v177 + v3 + 19 * v2);
  id v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)id v43 = "typeBusy";
  *((void *)v43 + 1) = 8;
  uint64_t v43[16] = 2;
  v8();
  id v44 = (void *)(v177 + v3 + 20 * v2);
  long long v45 = (char *)v44 + v1[14];
  *id v44 = 20;
  *(void *)long long v45 = "numRecordTypesLimitExceeded";
  *((void *)v45 + 1) = 27;
  v45[16] = 2;
  v8();
  long long v46 = (void *)(v177 + v3 + 21 * v2);
  long long v47 = (char *)v46 + v1[14];
  *long long v46 = 21;
  *(void *)long long v47 = "invalidContainer";
  *((void *)v47 + 1) = 16;
  v47[16] = 2;
  v8();
  long long v48 = (void *)(v177 + v3 + 22 * v2);
  double v49 = (char *)v48 + v1[14];
  void *v48 = 22;
  *(void *)double v49 = "invalidRecordTypeName";
  *((void *)v49 + 1) = 21;
  v49[16] = 2;
  v8();
  double v50 = (void *)(v177 + v3 + 23 * v2);
  __int16 v51 = (char *)v50 + v1[14];
  void *v50 = 23;
  *(void *)__int16 v51 = "invalidFieldName";
  *((void *)v51 + 1) = 16;
  v51[16] = 2;
  v8();
  double v52 = (void *)(v177 + v3 + 24 * v2);
  __int16 v53 = (char *)v52 + v1[14];
  void *v52 = 24;
  *(void *)__int16 v53 = "invalidFieldValue";
  *((void *)v53 + 1) = 17;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v177 + v3 + 25 * v2);
  __int16 v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)__int16 v55 = "invalidIdentifier";
  *((void *)v55 + 1) = 17;
  v55[16] = 2;
  v8();
  id v56 = (void *)(v177 + v3 + 26 * v2);
  __int16 v57 = (char *)v56 + v1[14];
  *id v56 = 26;
  *(void *)__int16 v57 = "fieldNotQueryable";
  *((void *)v57 + 1) = 17;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v177 + v3 + 27 * v2);
  id v59 = (char *)v58 + v1[14];
  void *v58 = 27;
  *(void *)id v59 = "fieldNotSortable";
  *((void *)v59 + 1) = 16;
  v59[16] = 2;
  v8();
  id v60 = (void *)(v177 + v3 + 28 * v2);
  id v61 = (char *)v60 + v1[14];
  *id v60 = 28;
  *(void *)id v61 = "queryFilterLimitExceeded";
  *((void *)v61 + 1) = 24;
  v61[16] = 2;
  v8();
  long long v62 = (void *)(v177 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  void *v62 = 29;
  *(void *)uint64_t v63 = "queryFilterValuesLimitExceeded";
  *((void *)v63 + 1) = 30;
  v63[16] = 2;
  v8();
  id v64 = (void *)(v177 + v3 + 30 * v2);
  id v65 = (char *)v64 + v1[14];
  void *v64 = 30;
  *(void *)id v65 = "membershipQueryLimitExceeded";
  *((void *)v65 + 1) = 28;
  v65[16] = 2;
  v8();
  id v66 = (void *)(v177 + v3 + 31 * v2);
  id v67 = (char *)v66 + v1[14];
  *id v66 = 31;
  *(void *)id v67 = "notificationAdditionalFieldLimitExceeded";
  *((void *)v67 + 1) = 40;
  v67[16] = 2;
  v8();
  uint64_t v68 = v177 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)uint64_t v68 = "notificationAdditionalFieldInvalidType";
  *(void *)(v68 + 8) = 38;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  __int16 v69 = (void *)(v177 + v3 + 33 * v2);
  uint64_t v70 = (char *)v69 + v1[14];
  void *v69 = 33;
  *(void *)uint64_t v70 = "subscriptionLimitExceeded";
  *((void *)v70 + 1) = 25;
  v70[16] = 2;
  v8();
  id v71 = (void *)(v177 + v3 + 34 * v2);
  CFStringRef v72 = (char *)v71 + v1[14];
  void *v71 = 34;
  *(void *)CFStringRef v72 = "uniqueTriggerLimitExceeded";
  *((void *)v72 + 1) = 26;
  v72[16] = 2;
  v8();
  v73 = (void *)(v177 + v3 + 35 * v2);
  uint64_t v74 = (char *)v73 + v1[14];
  void *v73 = 35;
  *(void *)uint64_t v74 = "triggerSubscriptionBindingTypeMismatch";
  *((void *)v74 + 1) = 38;
  v74[16] = 2;
  v8();
  id v75 = (void *)(v177 + v3 + 36 * v2);
  uint64_t v76 = (char *)v75 + v1[14];
  *id v75 = 36;
  *(void *)uint64_t v76 = "zoneSizeLimitExceeded";
  *((void *)v76 + 1) = 21;
  v76[16] = 2;
  v8();
  id v77 = (void *)(v177 + v3 + 37 * v2);
  __int16 v78 = (char *)v77 + v1[14];
  *id v77 = 37;
  *(void *)__int16 v78 = "zoneCountLimitExceeded";
  *((void *)v78 + 1) = 22;
  v78[16] = 2;
  v8();
  id v79 = (void *)(v177 + v3 + 38 * v2);
  __int16 v80 = (char *)v79 + v1[14];
  *id v79 = 38;
  *(void *)__int16 v80 = "uniqueFieldFailure";
  *((void *)v80 + 1) = 18;
  v80[16] = 2;
  v8();
  v81 = (void *)(v177 + v3 + 39 * v2);
  v82 = (char *)v81 + v1[14];
  void *v81 = 39;
  *(void *)v82 = "validatingReferenceError";
  *((void *)v82 + 1) = 24;
  v82[16] = 2;
  v8();
  v83 = (void *)(v177 + v3 + 40 * v2);
  v84 = (char *)v83 + v1[14];
  void *v83 = 40;
  *(void *)v84 = "fullResetNeeded";
  *((void *)v84 + 1) = 15;
  v84[16] = 2;
  v8();
  id v85 = (void *)(v177 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *id v85 = 41;
  *(void *)v86 = "alreadyShared";
  *((void *)v86 + 1) = 13;
  v86[16] = 2;
  v8();
  v87 = (void *)(v177 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  void *v87 = 42;
  *(void *)v88 = "emailOutOfNetwork";
  *((void *)v88 + 1) = 17;
  v88[16] = 2;
  v8();
  v89 = (void *)(v177 + v3 + 43 * v2);
  v90 = (char *)v89 + v1[14];
  void *v89 = 43;
  *(void *)v90 = "duplicateSubscription";
  *((void *)v90 + 1) = 21;
  v90[16] = 2;
  v8();
  v91 = (void *)(v177 + v3 + 44 * v2);
  v92 = (char *)v91 + v1[14];
  void *v91 = 46;
  *(void *)v92 = "expiredPutReceipt";
  *((void *)v92 + 1) = 17;
  v92[16] = 2;
  v8();
  v93 = (void *)(v177 + v3 + 45 * v2);
  v94 = (char *)v93 + v1[14];
  void *v93 = 47;
  *(void *)v94 = "quotaExceeded";
  *((void *)v94 + 1) = 13;
  v94[16] = 2;
  v8();
  v95 = (void *)(v177 + v3 + 46 * v2);
  v96 = (char *)v95 + v1[14];
  void *v95 = 48;
  *(void *)v96 = "zoneNotFound";
  *((void *)v96 + 1) = 12;
  v96[16] = 2;
  v8();
  v97 = (void *)(v177 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  void *v97 = 49;
  *(void *)v98 = "invalidBundleId";
  *((void *)v98 + 1) = 15;
  v98[16] = 2;
  v8();
  v99 = (void *)(v177 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  void *v99 = 50;
  *(void *)v100 = "unsupportedDevice";
  *((void *)v100 + 1) = 17;
  v100[16] = 2;
  v8();
  v101 = (void *)(v177 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  void *v101 = 51;
  *(void *)v102 = "blacklisted";
  *((void *)v102 + 1) = 11;
  v102[16] = 2;
  v8();
  v103 = (void *)(v177 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  void *v103 = 52;
  *(void *)v104 = "recordProtectionInfoTagMismatch";
  *((void *)v104 + 1) = 31;
  v104[16] = 2;
  v8();
  v105 = (void *)(v177 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  void *v105 = 53;
  *(void *)v106 = "zoneProtectionInfoTagMismatch";
  *((void *)v106 + 1) = 29;
  v106[16] = 2;
  v8();
  v107 = (void *)(v177 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  void *v107 = 54;
  *(void *)v108 = "assetSizeLimitExceeded";
  *((void *)v108 + 1) = 22;
  v108[16] = 2;
  v8();
  v109 = (void *)(v177 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  void *v109 = 55;
  *(void *)v110 = "batchOperationLimitExceeded";
  *((void *)v110 + 1) = 27;
  v110[16] = 2;
  v8();
  v111 = (void *)(v177 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  void *v111 = 56;
  *(void *)v112 = "requestSizeLimitExceeded";
  *((void *)v112 + 1) = 24;
  v112[16] = 2;
  v8();
  v113 = (void *)(v177 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  void *v113 = 57;
  *(void *)v114 = "recordSizeLimitExceeded";
  *((void *)v114 + 1) = 23;
  v114[16] = 2;
  v8();
  v115 = (void *)(v177 + v3 + 56 * v2);
  v116 = (char *)v115 + v1[14];
  void *v115 = 58;
  *(void *)v116 = "databaseCommitSizeExceeded";
  *((void *)v116 + 1) = 26;
  v116[16] = 2;
  v8();
  v117 = (void *)(v177 + v3 + 57 * v2);
  v118 = (char *)v117 + v1[14];
  void *v117 = 59;
  *(void *)v118 = "userDeletedDataForZone";
  *((void *)v118 + 1) = 22;
  v118[16] = 2;
  v8();
  v119 = (void *)(v177 + v3 + 58 * v2);
  v120 = (char *)v119 + v1[14];
  void *v119 = 60;
  *(void *)v120 = "staleRecordUpdate";
  *((void *)v120 + 1) = 17;
  v120[16] = 2;
  v8();
  v121 = (void *)(v177 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  void *v121 = 61;
  *(void *)v122 = "shareParticipantLimitExceeded";
  *((void *)v122 + 1) = 29;
  v122[16] = 2;
  v8();
  v123 = (void *)(v177 + v3 + 60 * v2);
  v124 = (char *)v123 + v1[14];
  void *v123 = 62;
  *(void *)v124 = "shareParticipantError";
  *((void *)v124 + 1) = 21;
  v124[16] = 2;
  v8();
  v125 = (void *)(v177 + v3 + 61 * v2);
  v126 = (char *)v125 + v1[14];
  void *v125 = 64;
  *(void *)v126 = "pcsChainingError";
  *((void *)v126 + 1) = 16;
  v126[16] = 2;
  v8();
  v127 = (void *)(v177 + v3 + 62 * v2);
  v128 = (char *)v127 + v1[14];
  void *v127 = 65;
  *(void *)v128 = "hierarchyAlreadyHasShare";
  *((void *)v128 + 1) = 24;
  v128[16] = 2;
  v8();
  v129 = (void *)(v177 + v3 + 63 * v2);
  v130 = (char *)v129 + v1[14];
  void *v129 = 66;
  *(void *)v130 = "u13Restricted";
  *((void *)v130 + 1) = 13;
  v130[16] = 2;
  v8();
  unint64_t v131 = v177 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 67;
  *(void *)unint64_t v131 = "managedAppleIdRestricted";
  *(void *)(v131 + 8) = 24;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  v132 = (void *)(v177 + v3 + 65 * v2);
  v133 = (char *)v132 + v1[14];
  void *v132 = 68;
  *(void *)v133 = "shareParticipantContactError";
  *((void *)v133 + 1) = 28;
  v133[16] = 2;
  v8();
  v134 = (void *)(v177 + v3 + 66 * v2);
  v135 = (char *)v134 + v1[14];
  void *v134 = 69;
  *(void *)v135 = "recordArchived";
  *((void *)v135 + 1) = 14;
  v135[16] = 2;
  v8();
  v136 = (void *)(v177 + v3 + 67 * v2);
  v137 = (char *)v136 + v1[14];
  void *v136 = 70;
  *(void *)v137 = "databaseAccessDenied";
  *((void *)v137 + 1) = 20;
  v137[16] = 2;
  v8();
  v138 = (void *)(v177 + v3 + 68 * v2);
  v139 = (char *)v138 + v1[14];
  void *v138 = 71;
  *(void *)v139 = "parentHierarchyDepthLimitExceeded";
  *((void *)v139 + 1) = 33;
  v139[16] = 2;
  v8();
  v140 = (void *)(v177 + v3 + 69 * v2);
  v141 = (char *)v140 + v1[14];
  void *v140 = 72;
  *(void *)v141 = "zonePcsUserIdentityUnknown";
  *((void *)v141 + 1) = 26;
  v141[16] = 2;
  v8();
  v142 = (void *)(v177 + v3 + 70 * v2);
  v143 = (char *)v142 + v1[14];
  void *v142 = 73;
  *(void *)v143 = "managedAppleIdBackupBlocked";
  *((void *)v143 + 1) = 27;
  v143[16] = 2;
  v8();
  v144 = (void *)(v177 + v3 + 71 * v2);
  v145 = (char *)v144 + v1[14];
  void *v144 = 74;
  *(void *)v145 = "assetReuploadNeeded";
  *((void *)v145 + 1) = 19;
  v145[16] = 2;
  v8();
  v146 = (void *)(v177 + v3 + 72 * v2);
  v147 = (char *)v146 + v1[14];
  void *v146 = 75;
  *(void *)v147 = "outOfNetworkUsersUnsupported";
  *((void *)v147 + 1) = 28;
  v147[16] = 2;
  v8();
  v148 = (void *)(v177 + v3 + 73 * v2);
  v149 = (char *)v148 + v1[14];
  void *v148 = 76;
  *(void *)v149 = "gameAssignmentNotFound";
  *((void *)v149 + 1) = 22;
  v149[16] = 2;
  v8();
  v150 = (void *)(v177 + v3 + 74 * v2);
  v151 = (char *)v150 + v1[14];
  void *v150 = 10011;
  *(void *)v151 = "containerQuotaGraced";
  *((void *)v151 + 1) = 20;
  v151[16] = 2;
  v8();
  v152 = (void *)(v177 + v3 + 75 * v2);
  v153 = (char *)v152 + v1[14];
  void *v152 = 100000;
  *(void *)v153 = "sessionContextOperationNotCalled";
  *((void *)v153 + 1) = 32;
  v153[16] = 2;
  v8();
  v154 = (void *)(v177 + v3 + 76 * v2);
  v155 = (char *)v154 + v1[14];
  void *v154 = 100001;
  *(void *)v155 = "invalidPartition";
  *((void *)v155 + 1) = 16;
  v155[16] = 2;
  v8();
  v156 = (void *)(v177 + v3 + 77 * v2);
  v157 = (char *)v156 + v1[14];
  void *v156 = 100002;
  *(void *)v157 = "containerDoesNotExist";
  *((void *)v157 + 1) = 21;
  v157[16] = 2;
  v8();
  v158 = (void *)(v177 + v3 + 78 * v2);
  v159 = (char *)v158 + v1[14];
  void *v158 = 100003;
  *(void *)v159 = "requestedAndCurrentContainerVersionsDiffer";
  *((void *)v159 + 1) = 42;
  v159[16] = 2;
  v8();
  v160 = (void *)(v177 + v3 + 79 * v2);
  v161 = (char *)v160 + v1[14];
  void *v160 = 100004;
  *(void *)v161 = "certificateDoesNotHaveContainerAccess";
  *((void *)v161 + 1) = 37;
  v161[16] = 2;
  v8();
  v162 = (void *)(v177 + v3 + 80 * v2);
  v163 = (char *)v162 + v1[14];
  void *v162 = 100005;
  *(void *)v163 = "earlierRequestIncomplete";
  *((void *)v163 + 1) = 24;
  v163[16] = 2;
  v8();
  v164 = (void *)(v177 + v3 + 81 * v2);
  v165 = (char *)v164 + v1[14];
  void *v164 = 100006;
  *(void *)v165 = "fdbStoreTransactionSizeLimitExceeded";
  *((void *)v165 + 1) = 36;
  v165[16] = 2;
  v8();
  v166 = (void *)(v177 + v3 + 82 * v2);
  v167 = (char *)v166 + v1[14];
  void *v166 = 100007;
  *(void *)v167 = "fdbStoreKeySizeLimitExceeded";
  *((void *)v167 + 1) = 28;
  v167[16] = 2;
  v8();
  v168 = (void *)(v177 + v3 + 83 * v2);
  v169 = (char *)v168 + v1[14];
  void *v168 = 100008;
  *(void *)v169 = "fdbStoreValueSizeLimitExceeded";
  *((void *)v169 + 1) = 30;
  v169[16] = 2;
  v8();
  v170 = (void *)(v177 + v3 + 84 * v2);
  v171 = (char *)v170 + v1[14];
  void *v170 = 100009;
  *(void *)v171 = "authorizeGetFailed";
  *((void *)v171 + 1) = 18;
  v171[16] = 2;
  v8();
  v172 = (void *)(v177 + v3 + 85 * v2);
  v173 = (char *)v172 + v1[14];
  void *v172 = 100010;
  *(void *)v173 = "queueInvalidLeaseUuid";
  *((void *)v173 + 1) = 21;
  v173[16] = 2;
  v8();
  v174 = (void *)(v177 + v3 + 86 * v2);
  v175 = (char *)v174 + v1[14];
  void *v174 = 100012;
  *(void *)v175 = "userThrottled";
  *((void *)v175 + 1) = 13;
  v175[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9BE8, (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap);
}

uint64_t static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9BE8, (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap, a1);
}

uint64_t sub_1000CB978@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9BE8, (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap, a1);
}

void sub_1000CB99C(int a1)
{
  v1._countAndFlagsBits = 0x7265767265532ELL;
  v1._object = (void *)0xE700000000000000;
  sub_1000CC5CC(a1, v1, static Rpcproto_ErrorInfo.Server.protoMessageName, &static Rpcproto_ErrorInfo.Server.protoMessageName[1]);
}

void *Rpcproto_ErrorInfo.Server.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9BF0 != -1) {
    swift_once();
  }
  return static Rpcproto_ErrorInfo.Server.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.Server.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9BF0, static Rpcproto_ErrorInfo.Server.protoMessageName);
}

uint64_t sub_1000CBA34(uint64_t a1)
{
  return sub_1000CBA40(a1, static Rpcproto_ErrorInfo.Server._protobuf_nameMap);
}

uint64_t sub_1000CBA40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_1000D04B0(v3, a2);
  sub_1000CDD9C(v3, (uint64_t)a2);
  sub_1000D0514(&qword_1002CA290);
  unint64_t v4 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10024A2A0;
  unint64_t v7 = v6 + v5 + v4[14];
  *(void *)(v6 + v5) = 1;
  *(void *)unint64_t v7 = "type";
  *(void *)(v7 + 8) = 4;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v9 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Rpcproto_ErrorInfo.Server._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9BF8, (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap);
}

uint64_t static Rpcproto_ErrorInfo.Server._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9BF8, (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap, a1);
}

uint64_t Rpcproto_ErrorInfo.Server.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBC14(a1, a2, a3, (void (*)(void))sub_1000CDDD4);
}

uint64_t sub_1000CBC14(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      a4();
      dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t Rpcproto_ErrorInfo.Server.traverse<A>(visitor:)()
{
  if (!*v0
    || (sub_1000CDDD4(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for Rpcproto_ErrorInfo.Server(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Rpcproto_ErrorInfo.Server.hashValue.getter()
{
  return sub_1000CCBA8((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Server, &qword_1002C9EF0, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000CBDC8(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9BF0, static Rpcproto_ErrorInfo.Server.protoMessageName);
}

uint64_t sub_1000CBDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000CBE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_1000CBED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Server.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000CBEE8()
{
  return Rpcproto_ErrorInfo.Server.traverse<A>(visitor:)();
}

uint64_t sub_1000CBF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CE248(&qword_1002CA270, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CBF7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9BF8, (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap, a1);
}

uint64_t sub_1000CBFA0()
{
  sub_1000CE248(&qword_1002C9F88, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
  return Message.debugDescription.getter();
}

uint64_t sub_1000CC00C()
{
  sub_1000CE248(&qword_1002C9F88, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
  return Message.hash(into:)();
}

uint64_t sub_1000CC088()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_10024A2B0;
  unint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 0;
  *(void *)unint64_t v5 = "noerror";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v34 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "unknown";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v34 + v3 + 2 * v2);
  __int16 v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)__int16 v11 = "overloaded";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v34 + v3 + 3 * v2);
  id v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)id v13 = "notFound";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  id v14 = (void *)(v34 + v3 + 4 * v2);
  unsigned __int8 v15 = (char *)v14 + v1[14];
  *id v14 = 4;
  *(void *)unsigned __int8 v15 = "containerUnavailable";
  *((void *)v15 + 1) = 20;
  v15[16] = 2;
  v8();
  id v16 = (void *)(v34 + v3 + 5 * v2);
  id v17 = (char *)v16 + v1[14];
  *id v16 = 6;
  *(void *)id v17 = "mescalSignatureParseError";
  *((void *)v17 + 1) = 25;
  v17[16] = 2;
  v8();
  long long v18 = (void *)(v34 + v3 + 6 * v2);
  long long v19 = (char *)v18 + v1[14];
  *long long v18 = 7;
  *(void *)long long v19 = "zoneBusy";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v34 + v3 + 7 * v2);
  long long v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)long long v21 = "zoneUnavailable";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  uint64_t v22 = v34 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "transactionTimeout";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  __int16 v23 = (void *)(v34 + v3 + 9 * v2);
  id v24 = (char *)v23 + v1[14];
  *__int16 v23 = 200001;
  *(void *)id v24 = "partitionLookupFailed";
  *((void *)v24 + 1) = 21;
  v24[16] = 2;
  v8();
  unint64_t v25 = (void *)(v34 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 200002;
  *(void *)uint64_t v26 = "timeoutOnInternalBackends";
  *((void *)v26 + 1) = 25;
  v26[16] = 2;
  v8();
  __int16 v27 = (void *)(v34 + v3 + 11 * v2);
  __int16 v28 = (char *)v27 + v1[14];
  *__int16 v27 = 200003;
  *(void *)__int16 v28 = "solrError";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  long long v29 = (void *)(v34 + v3 + 12 * v2);
  id v30 = (char *)v29 + v1[14];
  *long long v29 = 200004;
  *(void *)id v30 = "userAssignmentLocked";
  *((void *)v30 + 1) = 20;
  v30[16] = 2;
  v8();
  long long v31 = (void *)(v34 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *long long v31 = 200005;
  *(void *)uint64_t v32 = "quotaServiceUnavaible";
  *((void *)v32 + 1) = 21;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C00, (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap);
}

uint64_t static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C00, (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap, a1);
}

uint64_t sub_1000CC578@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C00, (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap, a1);
}

void sub_1000CC59C(int a1)
{
  v1._countAndFlagsBits = 0x676E6967676F4C2ELL;
  v1._object = (void *)0xEE006C6961746544;
  sub_1000CC5CC(a1, v1, static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName, &static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName[1]);
}

void sub_1000CC5CC(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000012;
  *a4 = 0x8000000100208520;
}

void *Rpcproto_ErrorInfo.LoggingDetail.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9C08 != -1) {
    swift_once();
  }
  return static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9C08, static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName);
}

uint64_t sub_1000CC6AC(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1000CC700()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  Swift::String v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024A2C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "key";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "value";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C10, (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap);
}

uint64_t sub_1000CC8DC(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return sub_1000CDD9C(v3, a2);
}

uint64_t static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C10, (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap, a1);
}

uint64_t sub_1000CC954@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_1000CDD9C(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Rpcproto_ErrorInfo.LoggingDetail.hashValue.getter()
{
  return sub_1000CCBA8((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail, &qword_1002C9EF8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
}

Swift::Int sub_1000CCBA8(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000CCC30@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000CCC5C(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9C08, static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName);
}

uint64_t sub_1000CCC84(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000CCCDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000CCD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000CCDBC())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000CCDE0()
{
  return Rpcproto_ErrorInfo.LoggingDetail.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000CCDF8()
{
  return Rpcproto_ErrorInfo.LoggingDetail.traverse<A>(visitor:)();
}

uint64_t sub_1000CCE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CE248(&qword_1002CA268, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CCE8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C10, (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap, a1);
}

uint64_t sub_1000CCEB0@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_1000CDD9C(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_1000CCF4C()
{
  sub_1000CE248(&qword_1002C9EC8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
  return Message.debugDescription.getter();
}

Swift::Int sub_1000CCFB8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CD010()
{
  sub_1000CE248(&qword_1002C9EC8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
  return Message.hash(into:)();
}

Swift::Int sub_1000CD08C()
{
  return Hasher._finalize()();
}

uint64_t variable initialization expression of Utility_DeleteZoneResponse._error@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Utility_ErrorInfo.ResultError, a1);
}

uint64_t variable initialization expression of Utility_ErrorInfo.ResultError._databaseFailure@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Utility_ErrorInfo.DatabaseFailure, a1);
}

uint64_t variable initialization expression of CMTime.value()
{
  return 0;
}

uint64_t variable initialization expression of RequestItem._storage()
{
  if (qword_1002C9D40 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t variable initialization expression of ResponseItem._assetRecord@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204((uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport, a1);
}

uint64_t variable initialization expression of CMTimeRange._duration@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for CMTime, a1);
}

uint64_t variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackRequest._exitZoneID@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Goldilocks_ZoneID, a1);
}

uint64_t variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackResponse._serviceError@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t variable initialization expression of Goldilocks_SilentMoverRampingResponse._operationControl@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Goldilocks_OperationControl, a1);
}

uint64_t variable initialization expression of Goldilocks_ErrorInfo.ResultError._databaseFailure@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CD204(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure, a1);
}

uint64_t sub_1000CD204@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

id variable initialization expression of CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode()
{
  id v0 = objc_allocWithZone((Class)NSNumber);
  return [v0 init];
}

Swift::Int sub_1000CD2B0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000CD2F8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000CD324()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000CD368(uint64_t a1, uint64_t a2)
{
  return sub_1000CD4D4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000CD380(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000CD3F8(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000CD478@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000CD4BC(uint64_t a1, uint64_t a2)
{
  return sub_1000CD4D4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000CD4D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000CD518()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000CD56C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1000CD5E0(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_1000CD5F4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000CD604(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000CD610()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000CD69C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000CD6E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000CD710(uint64_t a1)
{
  uint64_t v2 = sub_1000CE248(&qword_1002CA2E8, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1000CE248((unint64_t *)&unk_1002CA2F0, type metadata accessor for URLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000CD7CC(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 63:
      return result;
    case 46:
      uint64_t result = 44;
      break;
    case 47:
      uint64_t result = 45;
      break;
    case 48:
      uint64_t result = 46;
      break;
    case 49:
      uint64_t result = 47;
      break;
    case 50:
      uint64_t result = 48;
      break;
    case 51:
      uint64_t result = 49;
      break;
    case 52:
      uint64_t result = 50;
      break;
    case 53:
      uint64_t result = 51;
      break;
    case 54:
      uint64_t result = 52;
      break;
    case 55:
      uint64_t result = 53;
      break;
    case 56:
      uint64_t result = 54;
      break;
    case 57:
      uint64_t result = 55;
      break;
    case 58:
      uint64_t result = 56;
      break;
    case 59:
      uint64_t result = 57;
      break;
    case 60:
      uint64_t result = 58;
      break;
    case 61:
      uint64_t result = 59;
      break;
    case 62:
      uint64_t result = 60;
      break;
    case 64:
      uint64_t result = 61;
      break;
    case 65:
      uint64_t result = 62;
      break;
    case 66:
      uint64_t result = 63;
      break;
    case 67:
      uint64_t result = 64;
      break;
    case 68:
      uint64_t result = 65;
      break;
    case 69:
      uint64_t result = 66;
      break;
    case 70:
      uint64_t result = 67;
      break;
    case 71:
      uint64_t result = 68;
      break;
    case 72:
      uint64_t result = 69;
      break;
    case 73:
      uint64_t result = 70;
      break;
    case 74:
      uint64_t result = 71;
      break;
    case 75:
      uint64_t result = 72;
      break;
    case 76:
      uint64_t result = 73;
      break;
    default:
      switch(result)
      {
        case 100000:
          uint64_t result = 74;
          break;
        case 100001:
          uint64_t result = 75;
          break;
        case 100002:
          uint64_t result = 76;
          break;
        case 100003:
          uint64_t result = 77;
          break;
        case 100004:
          uint64_t result = 78;
          break;
        case 100005:
          uint64_t result = 79;
          break;
        case 100006:
          uint64_t result = 80;
          break;
        case 100007:
          uint64_t result = 81;
          break;
        case 100008:
          uint64_t result = 82;
          break;
        case 100009:
          uint64_t result = 83;
          break;
        case 100010:
          uint64_t result = 84;
          break;
        case 100011:
          return result;
        case 100012:
          uint64_t result = 86;
          break;
        default:
          if (result == 10011) {
            uint64_t result = 85;
          }
          break;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.Server(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA138);
}

uint64_t sub_1000CDC10(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    case 6:
      uint64_t result = 5;
      break;
    case 7:
      uint64_t result = 6;
      break;
    case 8:
      uint64_t result = 7;
      break;
    case 9:
      uint64_t result = 8;
      break;
    default:
      switch(result)
      {
        case 200001:
          uint64_t result = 9;
          break;
        case 200002:
          uint64_t result = 10;
          break;
        case 200003:
          uint64_t result = 11;
          break;
        case 200004:
          uint64_t result = 12;
          break;
        case 200005:
          uint64_t result = 13;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA1C8);
}

uint64_t sub_1000CDD64(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CDD9C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_1000CDDD4()
{
  unint64_t result = qword_1002C9ED0;
  if (!qword_1002C9ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9ED0);
  }
  return result;
}

unint64_t sub_1000CDE28()
{
  unint64_t result = qword_1002C9ED8;
  if (!qword_1002C9ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9ED8);
  }
  return result;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = *(void *)(a2 + 32);
      char v15 = *(unsigned char *)(a2 + 40);
      uint64_t v16 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      if (v16 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v14, v15)) {
        goto LABEL_50;
      }
      uint64_t v17 = *(void *)(a1 + 48);
      if (*(unsigned char *)(a1 + 56) == 1) {
        uint64_t v17 = qword_10024B188[v17];
      }
      uint64_t v18 = *(void *)(a2 + 48);
      if (*(unsigned char *)(a2 + 56))
      {
        switch(v18)
        {
          case 1:
            if (v17 == 1) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 2:
            if (v17 == 2) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 3:
            if (v17 == 3) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 4:
            if (v17 == 4) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 5:
            if (v17 == 6) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 6:
            if (v17 == 7) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 7:
            if (v17 == 8) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 8:
            if (v17 != 9) {
              goto LABEL_50;
            }
            goto LABEL_19;
          case 9:
            if (v17 == 200001) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 10:
            if (v17 == 200002) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 11:
            if (v17 == 200003) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 12:
            if (v17 == 200004) {
              goto LABEL_19;
            }
            goto LABEL_50;
          case 13:
            if (v17 == 200005) {
              goto LABEL_19;
            }
            goto LABEL_50;
          default:
            if (!v17) {
              goto LABEL_19;
            }
            goto LABEL_50;
        }
      }
      if (v17 != v18) {
        goto LABEL_50;
      }
LABEL_19:
      if (*(void *)(a1 + 64) == *(void *)(a2 + 64) && *(void *)(a1 + 72) == *(void *)(a2 + 72)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
          && (sub_100124984(*(void *)(a1 + 88), *(void *)(a2 + 88)) & 1) != 0)
        {
          uint64_t v19 = type metadata accessor for Rpcproto_ErrorInfo(0);
          uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v20(v10, a1 + *(int *)(v19 + 44), v4);
          v20(v8, a2 + *(int *)(v19 + 44), v4);
          sub_1000CE248(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          long long v21 = *(void (**)(char *, uint64_t))(v5 + 8);
          v21(v8, v4);
          v21(v10, v4);
          return v12 & 1;
        }
LABEL_50:
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_1000CE248(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ServerV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_10024B188[v11];
  }
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 2:
        if (v11 == 2) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 3:
        if (v11 == 3) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 4:
        if (v11 == 4) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 5:
        if (v11 == 6) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 6:
        if (v11 == 7) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 7:
        if (v11 == 8) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 8:
        if (v11 == 9) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 9:
        if (v11 == 200001) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 10:
        if (v11 == 200002) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 11:
        if (v11 == 200003) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 12:
        if (v11 == 200004) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 13:
        if (v11 == 200005) {
          goto LABEL_8;
        }
        goto LABEL_6;
      default:
        if (v11) {
          goto LABEL_6;
        }
        goto LABEL_8;
    }
  }
  if (v11 == v12)
  {
LABEL_8:
    uint64_t v14 = type metadata accessor for Rpcproto_ErrorInfo.Server(0);
    char v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, (char *)a1 + *(int *)(v14 + 20), v4);
    v15(v8, (char *)a2 + *(int *)(v14 + 20), v4);
    sub_1000CE248(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_6:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a2;
  char v12 = *(unsigned char *)(a2 + 8);
  uint64_t v13 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)a1, *(unsigned char *)(a1 + 8));
  if (v13 == Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v11, v12))
  {
    uint64_t v14 = type metadata accessor for Rpcproto_ErrorInfo.Client(0);
    char v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1 + *(int *)(v14 + 20), v4);
    v15(v8, a2 + *(int *)(v14 + 20), v4);
    sub_1000CE248(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV13LoggingDetailV2eeoiySbAE_AEtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0);
      char v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(v14 + 24)], v4);
      v15(v8, &a2[*(int *)(v14 + 24)], v4);
      sub_1000CE248(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  return v12 & 1;
}

unint64_t sub_1000CE960()
{
  unint64_t result = qword_1002C9F00;
  if (!qword_1002C9F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F00);
  }
  return result;
}

unint64_t sub_1000CE9B8()
{
  unint64_t result = qword_1002C9F08;
  if (!qword_1002C9F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F08);
  }
  return result;
}

unint64_t sub_1000CEA10()
{
  unint64_t result = qword_1002C9F10;
  if (!qword_1002C9F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F10);
  }
  return result;
}

unint64_t sub_1000CEA68()
{
  unint64_t result = qword_1002C9F18;
  if (!qword_1002C9F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F18);
  }
  return result;
}

unint64_t sub_1000CEAC0()
{
  unint64_t result = qword_1002C9F20;
  if (!qword_1002C9F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F20);
  }
  return result;
}

unint64_t sub_1000CEB18()
{
  unint64_t result = qword_1002C9F28;
  if (!qword_1002C9F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002C9F28);
  }
  return result;
}

uint64_t sub_1000CEB6C()
{
  return sub_1000CEC04(&qword_1002C9F30, &qword_1002C9F38);
}

uint64_t sub_1000CEB94(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000CEBDC()
{
  return sub_1000CEC04(&qword_1002C9F40, &qword_1002C9F48);
}

uint64_t sub_1000CEC04(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000CEB94(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CEC54()
{
  return sub_1000CE248(&qword_1002C9F50, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000CEC9C()
{
  return sub_1000CE248(&qword_1002C9F58, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000CECE4()
{
  return sub_1000CE248(&qword_1002C9EE0, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000CED2C()
{
  return sub_1000CE248(&qword_1002C9F60, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000CED74()
{
  return sub_1000CE248(&qword_1002C9F68, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000CEDBC()
{
  return sub_1000CE248(&qword_1002C9F70, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000CEE04()
{
  return sub_1000CE248(&qword_1002C9EE8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000CEE4C()
{
  return sub_1000CE248(&qword_1002C9F78, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000CEE94()
{
  return sub_1000CE248(&qword_1002C9F80, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000CEEDC()
{
  return sub_1000CE248(&qword_1002C9F88, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000CEF24()
{
  return sub_1000CE248(&qword_1002C9EF0, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000CEF6C()
{
  return sub_1000CE248(&qword_1002C9F90, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000CEFB4()
{
  return sub_1000CE248(&qword_1002C9F98, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000CEFFC()
{
  return sub_1000CE248(&qword_1002C9EC8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000CF044()
{
  return sub_1000CE248(&qword_1002C9EF8, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000CF08C()
{
  return sub_1000CE248(&qword_1002C9FA0, (void (*)(uint64_t))type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
}

void *initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v7 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v7;
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    uint64_t v8 = *(int *)(a3 + 44);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 88) = a2[11];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    char v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CF66C);
}

uint64_t sub_1000CF66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CF730);
}

uint64_t sub_1000CF730(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000CF7D8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Client(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CF8C8);
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Client(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CF8E0);
}

uint64_t initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo.Client.Code(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Client.Code(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Client.Code(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000CF950(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000CF96C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Rpcproto_ErrorInfo.Client.Code()
{
  return &type metadata for Rpcproto_ErrorInfo.Client.Code;
}

void *_s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwca_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Server(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CFCFC);
}

uint64_t sub_1000CFD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Server(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CFD84);
}

uint64_t sub_1000CFD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_1000CFDFC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Rpcproto_ErrorInfo.Server.Code()
{
  return &type metadata for Rpcproto_ErrorInfo.Server.Code;
}

uint64_t *initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo.LoggingDetail(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Rpcproto_ErrorInfo.LoggingDetail(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D02AC);
}

uint64_t sub_1000D02AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D0370);
}

uint64_t sub_1000D0370(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000D0418()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000D04B0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000D0514(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CPLResourceType(uint64_t a1)
{
}

void type metadata accessor for CPLCKResourceDownloadType(uint64_t a1)
{
}

void type metadata accessor for CPLCKSharedLibraryExitStage(uint64_t a1)
{
}

void type metadata accessor for CPLCKSharedLibraryExitStatus(uint64_t a1)
{
}

void sub_1000D05BC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000D0604()
{
  return sub_1000CE248(&qword_1002CA2C8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000D064C()
{
  return sub_1000CE248(&qword_1002CA2D0, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000D0694()
{
  return sub_1000CE248(&qword_1002CA2D8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1000D06DC()
{
  return sub_1000CE248(&qword_1002CA2E0, type metadata accessor for CPLResourceType);
}

Swift::Int sub_1000D075C()
{
  Swift::Int result = sub_1000D077C();
  qword_1002CA360 = result;
  return result;
}

Swift::Int sub_1000D077C()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    uint64_t v19 = v3;
    uint64_t v20 = v5;
    uint64_t v17 = 44;
    unint64_t v18 = 0xE100000000000000;
    sub_1000E14D4();
    uint64_t v6 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = self;
      swift_bridgeObjectRetain();
      uint64_t v9 = v6 + 40;
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        swift_bridgeObjectRetain();
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v12 = objc_msgSend(v8, "resourceTypeFromShortDescription:", v11, v17, v18, v19, v20);

        if (v12)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_1000DE24C(0, *((void *)v10 + 2) + 1, 1, v10);
          }
          unint64_t v14 = *((void *)v10 + 2);
          unint64_t v13 = *((void *)v10 + 3);
          if (v14 >= v13 >> 1) {
            uint64_t v10 = sub_1000DE24C((char *)(v13 > 1), v14 + 1, 1, v10);
          }
          *((void *)v10 + 2) = v14 + 1;
          *(void *)&v10[8 * v14 + 32] = v12;
        }
        v9 += 16;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_1000DEC54((uint64_t)v10);
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    return sub_1000DED00((uint64_t)&off_10027B578);
  }
}

BOOL sub_1000D09D8(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000D0AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

id sub_1000D0C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000D0514(&qword_1002CA450);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10024A2A0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  sub_100140430(inited);
  id v8 = objc_allocWithZone((Class)NSError);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithDomain:v9 code:a3 userInfo:isa];

  return v11;
}

id sub_1000D0D3C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  if (String.count.getter())
  {
    uint64_t v10 = *(void *)(a1 + 96);
    char v11 = *(unsigned char *)(a1 + 104);
    swift_bridgeObjectRetain();
    if ((v11 & 1) == 0)
    {
      if (v8)
      {
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        uint64_t v100 = v9;
        uint64_t v101 = v8;
        v12._countAndFlagsBits = 0xD000000000000015;
        v12._object = (void *)0x80000001002093A0;
        String.append(_:)(v12);
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        goto LABEL_12;
      }
LABEL_11:
      uint64_t v100 = 0;
      uint64_t v101 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v25._object = (void *)0x8000000100209360;
      v25._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v25);
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD00000000000001CLL;
      v27._object = (void *)0x8000000100209380;
      String.append(_:)(v27);
      id v28 = [a2 description];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v31 = v30;

      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
LABEL_12:
      swift_bridgeObjectRelease();
      id v33 = sub_1000D0C00(v100, v101, 150);
LABEL_13:
      swift_bridgeObjectRelease();
      return v33;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 96);
    if (*(unsigned char *)(a1 + 104) != 1) {
      goto LABEL_11;
    }
    unint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  switch(v10)
  {
    case 1:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10024A2A0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v35;
      *(void *)(inited + 72) = &type metadata for String;
      if (!v8)
      {
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        id v36 = [a2 zoneID];
        id v37 = [v36 description];
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v40 = v39;

        v41._countAndFlagsBits = v38;
        v41._object = v40;
        String.append(_:)(v41);

        swift_bridgeObjectRelease();
        v42._countAndFlagsBits = 0x756F6620746F6E20;
        v42._object = (void *)0xEA0000000000646ELL;
        String.append(_:)(v42);
        unint64_t v9 = 0x20656E6F5ALL;
        unint64_t v8 = 0xE500000000000000;
      }
      *(void *)(inited + 48) = v9;
      *(void *)(inited + 56) = v8;
      sub_100140430(inited);
      id v43 = objc_allocWithZone((Class)NSError);
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v23.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v24 = [v43 initWithDomain:v22 code:23 userInfo:v23.super.isa];
      goto LABEL_33;
    case 2:
      if (!v8)
      {
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        id v44 = [a2 description];
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        long long v47 = v46;

        v48._countAndFlagsBits = v45;
        v48._object = v47;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 0x756F6620746F6E20;
        v49._object = (void *)0xEA0000000000646ELL;
        String.append(_:)(v49);
        unint64_t v9 = 0x2064726F636552;
        unint64_t v8 = 0xE700000000000000;
      }
      uint64_t v50 = v9;
      uint64_t v51 = v8;
      uint64_t v52 = 25;
      goto LABEL_29;
    case 3:
      if (!v8)
      {
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease();
        v53._countAndFlagsBits = a3;
        v53._object = a4;
        String.append(_:)(v53);
        v54._countAndFlagsBits = 0x756F6620746F6E20;
        v54._object = (void *)0xEE00206E6920646ELL;
        String.append(_:)(v54);
        id v55 = [a2 description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v58 = v57;

        v59._countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0x656372756F736552;
        unint64_t v8 = 0xE900000000000020;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v60 = swift_initStackObject();
      *(_OWORD *)(v60 + 16) = xmmword_10024A2A0;
      *(void *)(v60 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v60 + 40) = v61;
      *(void *)(v60 + 72) = &type metadata for String;
      *(void *)(v60 + 48) = v9;
      *(void *)(v60 + 56) = v8;
      sub_100140430(v60);
      id v62 = objc_allocWithZone((Class)NSError);
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v64.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v65 = [v62 initWithDomain:v63 code:26 userInfo:v64.super.isa];
      goto LABEL_37;
    case 4:
      if (!v8)
      {
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v66._countAndFlagsBits = a3;
        v66._object = a4;
        String.append(_:)(v66);
        v67._countAndFlagsBits = 0x6C61747320736920;
        v67._object = (void *)0xED0000206E692065;
        String.append(_:)(v67);
        id v68 = [a2 description];
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v71 = v70;

        v72._countAndFlagsBits = v69;
        v72._object = v71;
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0x656372756F736552;
        unint64_t v8 = 0xE900000000000020;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v73 = swift_initStackObject();
      *(_OWORD *)(v73 + 16) = xmmword_10024A2A0;
      *(void *)(v73 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v73 + 40) = v74;
      *(void *)(v73 + 72) = &type metadata for String;
      *(void *)(v73 + 48) = v9;
      *(void *)(v73 + 56) = v8;
      sub_100140430(v73);
      id v75 = objc_allocWithZone((Class)NSError);
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v64.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v65 = [v75 initWithDomain:v63 code:27 userInfo:v64.super.isa];
      goto LABEL_37;
    case 5:
      if (!v8)
      {
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        id v76 = [a2 description];
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v79 = v78;

        v80._countAndFlagsBits = v77;
        v80._object = v79;
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0xD000000000000014;
        unint64_t v8 = 0x8000000100209410;
      }
      uint64_t v50 = v9;
      uint64_t v51 = v8;
      uint64_t v52 = 150;
LABEL_29:
      id v33 = sub_1000D0C00(v50, v51, v52);
      goto LABEL_13;
    case 6:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v81 = swift_initStackObject();
      *(_OWORD *)(v81 + 16) = xmmword_10024A2A0;
      *(void *)(v81 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v81 + 40) = v82;
      *(void *)(v81 + 72) = &type metadata for String;
      if (!v8)
      {
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        id v83 = [a2 description];
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v86 = v85;

        v87._countAndFlagsBits = v84;
        v87._object = v86;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0xD000000000000020;
        unint64_t v8 = 0x80000001002093E0;
      }
      *(void *)(v81 + 48) = v9;
      *(void *)(v81 + 56) = v8;
      sub_100140430(v81);
      id v88 = objc_allocWithZone((Class)NSError);
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v23.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v24 = [v88 initWithDomain:v22 code:80 userInfo:v23.super.isa];
      goto LABEL_33;
    case 7:
      if (!v8)
      {
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v89._countAndFlagsBits = a3;
        v89._object = a4;
        String.append(_:)(v89);
        v90._countAndFlagsBits = 0xD000000000000018;
        v90._object = (void *)0x80000001002093C0;
        String.append(_:)(v90);
        id v91 = [a2 description];
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v94 = v93;

        v95._countAndFlagsBits = v92;
        v95._object = v94;
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0x656372756F736552;
        unint64_t v8 = 0xE900000000000020;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v96 = swift_initStackObject();
      *(_OWORD *)(v96 + 16) = xmmword_10024A2A0;
      *(void *)(v96 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v96 + 40) = v97;
      *(void *)(v96 + 72) = &type metadata for String;
      *(void *)(v96 + 48) = v9;
      *(void *)(v96 + 56) = v8;
      sub_100140430(v96);
      id v98 = objc_allocWithZone((Class)NSError);
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v64.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v65 = [v98 initWithDomain:v63 code:51 userInfo:v64.super.isa];
LABEL_37:
      id v33 = v65;

      return v33;
    default:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v14 = swift_initStackObject();
      *(_OWORD *)(v14 + 16) = xmmword_10024A2A0;
      *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v14 + 40) = v15;
      *(void *)(v14 + 72) = &type metadata for String;
      if (!v8)
      {
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        id v16 = [a2 description];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        v20._countAndFlagsBits = v17;
        v20._object = v19;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        unint64_t v9 = 0xD000000000000024;
        unint64_t v8 = 0x8000000100209430;
      }
      *(void *)(v14 + 48) = v9;
      *(void *)(v14 + 56) = v8;
      sub_100140430(v14);
      id v21 = objc_allocWithZone((Class)NSError);
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v23.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v24 = [v21 initWithDomain:v22 code:27 userInfo:v23.super.isa];
LABEL_33:
      id v33 = v24;

      break;
  }
  return v33;
}

uint64_t sub_1000D19BC(uint64_t a1)
{
  if (a1 < 1)
  {
    id v1 = [self standardUserDefaults];
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 doubleForKey:v2];
  }
  return Date.init(timeIntervalSinceNow:)();
}

id sub_1000D1A9C(uint64_t a1, char a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    unint64_t v9 = a4;
    unint64_t v10 = a3;
    swift_bridgeObjectRetain();
    if ((a2 & 1) == 0)
    {
      if (v9)
      {
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        uint64_t v42 = v10;
        uint64_t v43 = v9;
        v11._countAndFlagsBits = 0xD000000000000015;
        v11._object = (void *)0x80000001002093A0;
        String.append(_:)(v11);
        v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
LABEL_9:
        id v15 = sub_1000D0C00(v42, v43, 150);
        swift_bridgeObjectRelease();
        return v15;
      }
LABEL_8:
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      uint64_t v42 = 0xD000000000000013;
      uint64_t v43 = 0x8000000100209360;
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0xD000000000000017;
      v14._object = (void *)0x8000000100209460;
      String.append(_:)(v14);
      goto LABEL_9;
    }
  }
  else
  {
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
    unint64_t v9 = 0;
    unint64_t v10 = 0;
  }
  switch(a1)
  {
    case 1:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10024A2A0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v37;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v38 = 0xD00000000000001FLL;
      if (v9) {
        unint64_t v38 = v10;
      }
      unint64_t v39 = 0x80000001002094C0;
      if (v9) {
        unint64_t v39 = v9;
      }
      *(void *)(inited + 48) = v38;
      *(void *)(inited + 56) = v39;
      sub_100140430(inited);
      id v40 = objc_allocWithZone((Class)NSError);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v40 initWithDomain:v21 code:2002 userInfo:v22.super.isa];
      goto LABEL_32;
    case 2:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_10024A2C0;
      *(void *)(v24 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v24 + 40) = v25;
      *(void *)(v24 + 72) = &type metadata for String;
      unint64_t v26 = 0xD00000000000001CLL;
      if (v9) {
        unint64_t v26 = v10;
      }
      unint64_t v27 = 0x8000000100209480;
      if (v9) {
        unint64_t v27 = v9;
      }
      *(void *)(v24 + 48) = v26;
      *(void *)(v24 + 56) = v27;
      *(void *)(v24 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v24 + 88) = v28;
      *(void *)(v24 + 120) = type metadata accessor for Date();
      sub_1000E1834((uint64_t *)(v24 + 96));
      sub_1000D19BC(a5);
      sub_100140430(v24);
      id v29 = objc_allocWithZone((Class)NSError);
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v15 = [v29 initWithDomain:v30 code:1004 userInfo:v22.super.isa];

      goto LABEL_33;
    case 3:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v31 = swift_initStackObject();
      *(_OWORD *)(v31 + 16) = xmmword_10024A2A0;
      *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v31 + 40) = v32;
      *(void *)(v31 + 72) = &type metadata for String;
      unint64_t v33 = 0xD00000000000001BLL;
      if (v9) {
        unint64_t v33 = v10;
      }
      unint64_t v34 = 0x80000001002094A0;
      if (v9) {
        unint64_t v34 = v9;
      }
      *(void *)(v31 + 48) = v33;
      *(void *)(v31 + 56) = v34;
      sub_100140430(v31);
      id v35 = objc_allocWithZone((Class)NSError);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v35 initWithDomain:v21 code:80 userInfo:v22.super.isa];
      goto LABEL_32;
    default:
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000D0514(&qword_1002CA450);
      uint64_t v16 = swift_initStackObject();
      *(_OWORD *)(v16 + 16) = xmmword_10024A2A0;
      *(void *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v16 + 40) = v17;
      *(void *)(v16 + 72) = &type metadata for String;
      unint64_t v18 = 0xD00000000000001FLL;
      if (v9) {
        unint64_t v18 = v10;
      }
      unint64_t v19 = 0x80000001002094E0;
      if (v9) {
        unint64_t v19 = v9;
      }
      *(void *)(v16 + 48) = v18;
      *(void *)(v16 + 56) = v19;
      sub_100140430(v16);
      id v20 = objc_allocWithZone((Class)NSError);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v20 initWithDomain:v21 code:150 userInfo:v22.super.isa];
LABEL_32:
      id v15 = v23;

LABEL_33:
      break;
  }
  return v15;
}

uint64_t sub_1000D20BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CMTime(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v21 - v10;
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v21 - v12;
  UnknownStorage.init()();
  int v14 = *(_DWORD *)(a1 + 8);
  *(void *)Swift::String v13 = *(void *)a1;
  *((_DWORD *)v13 + 2) = v14;
  UnknownStorage.init()();
  int v15 = *(_DWORD *)(a1 + 32);
  *(void *)Swift::String v11 = *(void *)(a1 + 24);
  *((_DWORD *)v11 + 2) = v15;
  UnknownStorage.init()();
  uint64_t v16 = type metadata accessor for CMTimeRange(0);
  uint64_t v17 = a2 + *(int *)(v16 + 20);
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v18(v17, 1, 1, v4);
  uint64_t v19 = a2 + *(int *)(v16 + 24);
  v18(v19, 1, 1, v4);
  sub_1000E2608((uint64_t)v13, (uint64_t)v8, type metadata accessor for CMTime);
  sub_1000E27E8(v17, &qword_1002CA4C0);
  sub_1000E2670((uint64_t)v8, v17, type metadata accessor for CMTime);
  v18(v17, 0, 1, v4);
  sub_1000E2608((uint64_t)v11, (uint64_t)v8, type metadata accessor for CMTime);
  sub_1000E27E8(v19, &qword_1002CA4C0);
  sub_1000E2670((uint64_t)v8, v19, type metadata accessor for CMTime);
  v18(v19, 0, 1, v4);
  sub_1000E26D8((uint64_t)v11, type metadata accessor for CMTime);
  return sub_1000E26D8((uint64_t)v13, type metadata accessor for CMTime);
}

Swift::Int sub_1000D2340(Swift::Int a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    UUID.init()();
    a1 = UUID.uuidString.getter();
    a2 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v12 = *a3;
  if (sub_1000D0AC8(a1, a2, *a3))
  {
    uint64_t v13 = 2;
    while (1)
    {
      Swift::Int v21 = a1;
      Swift::Int v22 = a2;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = 95;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v20[1] = v13;
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      Swift::Int v17 = v21;
      Swift::Int v16 = v22;
      if ((sub_1000D0AC8(v21, v22, v12) & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
      if (__OFADD__(v13++, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1000DCFAC(&v21, v17, v16);
    swift_bridgeObjectRelease();
    return v17;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRetain();
    sub_1000DCFAC(&v21, a1, a2);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1000D2558(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CA490);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000D0514(&qword_1002CA498);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000D0514(&qword_1002CA4A0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E2608(a1, (uint64_t)v12, type metadata accessor for ResourceDownloadRequest);
  uint64_t v13 = type metadata accessor for ResourceDownloadRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v6);
  id v14 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CA4A8));
  uint64_t v15 = CodeOperation.init(service:functionName:request:destinationServer:)();
  dispatch thunk of CodeOperation.shouldSendRecordPCSKeys.setter();
  strcpy(v5, "cmp.icloud.com");
  v5[15] = -18;
  *((void *)v5 + 2) = 0x2E342E332E322E31;
  *((void *)v5 + 3) = 0xEB00000000362E35;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for CodeOperation.DataProtectionType.trustedTarget<A, B>(_:), v2);
  dispatch thunk of CodeOperation.dataProtectionType.setter();
  return v15;
}

id sub_1000D2834()
{
  id v0 = [self standardUserDefaults];
  id v1 = [v0 dataForKey:CPLDropDerivativesTestRulesKey];

  if (v1)
  {
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;

    uint64_t v5 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v7 = [v5 unarchiveArrayOfCPLDropDerivativeRecipesFrom:isa];

    sub_1000E18FC(0, &qword_1002CA4D8);
    id v1 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E1938(v2, v4);
  }
  return v1;
}

void sub_1000D2944(uint64_t a1)
{
}

void sub_1000D2968(uint64_t a1)
{
}

void sub_1000D298C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  id v5 = [self standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned __int8 v7 = [v5 BOOLForKey:v6];

  *a4 = v7;
}

void static CPLCKResourceDownloadOperation.downloadOperation(withRecordIDsAndTasks:keys:downloadType:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000D2A20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  id v85 = a8;
  int v84 = a7;
  id v83 = a6;
  uint64_t v16 = type metadata accessor for CMTimeRange(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v82 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v19 = swift_retain();
    uint64_t v20 = sub_100100A48(v19);
    swift_release();
    *(void *)(a1 + v18) = v20;
    swift_release();
  }
  uint64_t v21 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  swift_bridgeObjectRelease();
  id v22 = [a4 recordName];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v26 = swift_retain();
    uint64_t v27 = sub_100100A48(v26);
    swift_release();
    *(void *)(a1 + v18) = v27;
    swift_release();
  }
  uint64_t v28 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v28 + 32) = v23;
  *(void *)(v28 + 40) = v25;
  swift_bridgeObjectRelease();
  uint64_t v81 = a4;
  id v88 = [a4 zoneID];
  id v29 = [v88 zoneName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v33 = swift_retain();
    uint64_t v34 = sub_100100A48(v33);
    swift_release();
    *(void *)(a1 + v18) = v34;
    swift_release();
  }
  uint64_t v35 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v35 + 64) = v30;
  *(void *)(v35 + 72) = v32;
  swift_bridgeObjectRelease();
  id v36 = [v88 ownerName];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_15;
    }
    id v42 = [v88 ownerName];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v46 = swift_retain();
      uint64_t v47 = sub_100100A48(v46);
      swift_release();
      *(void *)(a1 + v18) = v47;
      swift_release();
    }
    uint64_t v48 = *(void *)(a1 + v18);
    swift_beginAccess();
    *(void *)(v48 + 80) = v43;
    *(void *)(v48 + 88) = v45;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  NSString v49 = String._bridgeToObjectiveC()();
  id v50 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v49);

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v54 = swift_retain();
    uint64_t v55 = sub_100100A48(v54);
    swift_release();
    *(void *)(a1 + v18) = v55;
    swift_release();
  }
  id v83 = a12;
  uint64_t v56 = a11;
  uint64_t v57 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v57 + 112) = v51;
  *(void *)(v57 + 120) = v53;
  swift_bridgeObjectRelease();
  if (v84)
  {
    uint64_t v58 = v85;
    if (qword_1002C9C28 != -1) {
      swift_once();
    }
    Swift::String v59 = v81;
    if ((byte_1002CA369 & 1) == 0)
    {
      id v60 = [v58 cloudRecord];
      if (v60)
      {
        uint64_t v61 = v60;
        id v62 = [v59 recordName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v63 = v86;
        NSDictionary v64 = sub_1000D3240((uint64_t)v88);
        if (v63)
        {
          swift_errorRelease();

          uint64_t v86 = 0;
        }
        else
        {
          id v65 = v64;
          uint64_t v86 = 0;

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for RequestItem._StorageClass(0);
            swift_allocObject();
            uint64_t v66 = swift_retain();
            uint64_t v67 = sub_100100A48(v66);
            swift_release();
            *(void *)(a1 + v18) = v67;
            swift_release();
          }
          uint64_t v68 = *(void *)(a1 + v18);
          swift_beginAccess();
          *(void *)(v68 + 128) = v65;
        }
        uint64_t v58 = v85;
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v58 = v85;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v69 = swift_retain();
    uint64_t v70 = sub_100100A48(v69);
    swift_release();
    *(void *)(a1 + v18) = v70;
    swift_release();
  }
  uint64_t v71 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v71 + 48) = a9;
  *(void *)(v71 + 56) = a10;
  swift_bridgeObjectRelease();
  id v72 = [v83 resourceType];
  if (a11)
  {
    if (a11 == 2)
    {
      Swift::UInt v73 = (Swift::UInt)v72;
      if (qword_1002C9C18 != -1) {
        swift_once();
      }
      if (sub_1000D09D8(v73, qword_1002CA360)) {
        uint64_t v56 = 2;
      }
      else {
        uint64_t v56 = 0;
      }
    }
    else if (a11 != 1)
    {
      type metadata accessor for CPLCKResourceDownloadType(0);
      v87[6] = a11;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v74 = swift_retain();
    uint64_t v75 = sub_100100A48(v74);
    swift_release();
    *(void *)(a1 + v18) = v75;
    swift_release();
  }
  uint64_t v76 = *(void *)(a1 + v18);
  swift_beginAccess();
  *(void *)(v76 + 96) = v56;
  *(unsigned char *)(v76 + 104) = 1;
  id v77 = [v58 options];
  [v77 timeRange];

  if (CMTimeRange.isValid.getter())
  {
    id v78 = [v58 options];
    [v78 timeRange];

    uint64_t v79 = v82;
    sub_1000D20BC((uint64_t)v87, v82);
    RequestItem.timeRange.setter(v79);
  }
}

void *sub_1000D3240(uint64_t a1)
{
  uint64_t v20 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  NSString v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v1 allRelatedCKRecordsInZoneID:a1 identifier:v7];

  sub_1000E18FC(0, &qword_1002CA478);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      uint64_t v21 = &_swiftEmptyArrayStorage;
      uint64_t result = (void *)sub_1001482E8(0, v10 & ~(v10 >> 63), 0);
      if (v10 < 0) {
        break;
      }
      uint64_t v12 = 0;
      uint64_t v13 = v21;
      v18[1] = v4 + 32;
      unint64_t v19 = v9 & 0xC000000000000001;
      while (v10 != v12)
      {
        if (v19) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(v9 + 8 * v12 + 32);
        }
        id v15 = v14;
        Ckcode_RecordTransport.init(_:)();
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_release();

          return v13;
        }

        uint64_t v21 = v13;
        unint64_t v17 = v13[2];
        unint64_t v16 = v13[3];
        if (v17 >= v16 >> 1)
        {
          sub_1001482E8(v16 > 1, v17 + 1, 1);
          uint64_t v13 = v21;
        }
        ++v12;
        v13[2] = v17 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17, v6, v20);
        if (v10 == v12)
        {
          swift_bridgeObjectRelease();
          return v13;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v10) {
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000D34F4(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000D3560(uint64_t a1, uint64_t a2, void (*a3)(void, void, void, void, void, id, void, id), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v78 = a8;
  uint64_t v72 = a5;
  Swift::UInt v73 = a6;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v11 = type metadata accessor for ResponseItem(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11 - 8);
  uint64_t v75 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v16 = (void *)((char *)v68 - v15);
  uint64_t v17 = sub_1000D0514(&qword_1002CA470);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ResourceDownloadResponse(0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v19, &qword_1002CA470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return sub_1000E27E8((uint64_t)v19, &qword_1002CA470);
  }
  sub_1000E2670((uint64_t)v19, (uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
  uint64_t v25 = *(void *)v23;
  uint64_t v26 = *(void *)(*(void *)v23 + 16);
  if (!v26) {
    return sub_1000E26D8((uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
  }
  v68[1] = *(void *)v23;
  uint64_t v69 = v23;
  uint64_t v27 = (uint64_t *)(a2 + 16);
  uint64_t v74 = (uint64_t *)(a7 + 16);
  uint64_t v76 = (void *)(v78 + 16);
  uint64_t v28 = v25 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v78 = *(void *)(v12 + 72);
  swift_bridgeObjectRetain();
  uint64_t v29 = (uint64_t)v75;
  id v77 = v27;
  while (1)
  {
    sub_1000E2608(v28, (uint64_t)v16, type metadata accessor for ResponseItem);
    uint64_t v31 = *v16;
    uint64_t v30 = v16[1];
    if (!v16[12]) {
      break;
    }
    swift_beginAccess();
    uint64_t v32 = *v27;
    uint64_t v33 = *(void *)(*v27 + 16);
    swift_bridgeObjectRetain();
    if (v33)
    {
      unint64_t v34 = sub_1001466B8(v31, v30);
      if (v35)
      {
        id v36 = *(void **)(*(void *)(v32 + 56) + 8 * v34);
        swift_endAccess();
        id v37 = v36;
        id v38 = sub_1000D0D3C((uint64_t)v16, v37, v72, v73);
        v70(0, 0, 0, 0, 0, v37, 0, v38);
        swift_errorRelease();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v39 = sub_100146730((uint64_t)v37);
        char v41 = v40;
        swift_bridgeObjectRelease();
        if (v41)
        {
          id v42 = v74;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v44 = *v42;
          uint64_t v79 = (void *)*v42;
          *id v42 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100147CB4();
            uint64_t v44 = (uint64_t)v79;
          }

          sub_1000DEAA0(v39, v44);
          *id v42 = v44;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v45 = sub_1001466B8(v31, v30);
        char v47 = v46;
        swift_bridgeObjectRelease();
        uint64_t v48 = 0;
        uint64_t v29 = (uint64_t)v75;
        if (v47)
        {
          NSString v49 = v77;
          int v50 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v51 = *v49;
          uint64_t v79 = (void *)*v49;
          *NSString v49 = 0x8000000000000000;
          if (!v50)
          {
            sub_100147B00();
            uint64_t v51 = (uint64_t)v79;
          }
          swift_bridgeObjectRelease();
          uint64_t v48 = *(void **)(*(void *)(v51 + 56) + 8 * v45);
          sub_1000DE8C8(v45, v51);
          *NSString v49 = v51;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();

        sub_1000E26D8((uint64_t)v16, type metadata accessor for ResponseItem);
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_1000E26D8((uint64_t)v16, type metadata accessor for ResponseItem);
LABEL_6:
    v28 += v78;
    if (!--v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = v69;
      return sub_1000E26D8((uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
    }
  }
  uint64_t v52 = v76;
  swift_beginAccess();
  sub_1000E2608((uint64_t)v16, v29, type metadata accessor for ResponseItem);
  swift_bridgeObjectRetain();
  int v53 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v79 = (void *)*v52;
  uint64_t v54 = v79;
  void *v52 = 0x8000000000000000;
  unint64_t v56 = sub_1001466B8(v31, v30);
  uint64_t v57 = v54[2];
  BOOL v58 = (v55 & 1) == 0;
  uint64_t v59 = v57 + v58;
  if (!__OFADD__(v57, v58))
  {
    char v60 = v55;
    if (v54[3] < v59)
    {
      sub_100146F6C(v59, v53);
      unint64_t v61 = sub_1001466B8(v31, v30);
      if ((v60 & 1) != (v62 & 1)) {
        goto LABEL_36;
      }
      unint64_t v56 = v61;
      uint64_t v63 = v79;
      if ((v60 & 1) == 0) {
        goto LABEL_28;
      }
LABEL_26:
      sub_1000E2844(v29, v63[7] + v56 * v78, type metadata accessor for ResponseItem);
LABEL_30:
      *uint64_t v76 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_1000E26D8((uint64_t)v16, type metadata accessor for ResponseItem);
LABEL_31:
      uint64_t v27 = v77;
      goto LABEL_6;
    }
    if (v53)
    {
      uint64_t v63 = v79;
      if (v55) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_100147E6C();
      uint64_t v63 = v79;
      if (v60) {
        goto LABEL_26;
      }
    }
LABEL_28:
    v63[(v56 >> 6) + 8] |= 1 << v56;
    NSDictionary v64 = (uint64_t *)(v63[6] + 16 * v56);
    uint64_t *v64 = v31;
    v64[1] = v30;
    sub_1000E2670(v29, v63[7] + v56 * v78, type metadata accessor for ResponseItem);
    uint64_t v65 = v63[2];
    BOOL v66 = __OFADD__(v65, 1);
    uint64_t v67 = v65 + 1;
    if (v66) {
      goto LABEL_35;
    }
    v63[2] = v67;
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000D3C6C(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_100146730((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  sub_1000E18FC(0, &qword_1002CA418);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1000D3D44(void *a1, uint64_t a2, uint64_t (*a3)(id, double), double a4)
{
  swift_beginAccess();
  if (*(void *)(*(void *)(a2 + 16) + 16))
  {
    id v8 = a1;
    sub_100146730((uint64_t)v8);
    if (v9)
    {
      swift_endAccess();

      return a3(v8, a4);
    }
  }
  return swift_endAccess();
}

void sub_1000D3DEC(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, id), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v135 = a8;
  uint64_t v140 = a7;
  v141 = a6;
  uint64_t v14 = sub_1000D0514(&qword_1002CA4E0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v132 = (uint64_t)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v125 - v17;
  uint64_t v19 = type metadata accessor for ResponseItem(0);
  uint64_t v133 = *(void *)(v19 - 8);
  uint64_t v134 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v131 = (uint64_t)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v130 = (uint64_t)&v125 - v22;
  uint64_t v23 = sub_1000D0514(&qword_1002CA568);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000D0514(&qword_1002CA408);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v137 = v29;
  uint64_t v138 = v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v125 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v136 = (char *)&v125 - v34;
  uint64_t v139 = a4 + 16;
  swift_beginAccess();
  uint64_t v35 = *(void *)(a4 + 16);
  if (!*(void *)(v35 + 16)) {
    goto LABEL_6;
  }
  id v36 = a2;
  unint64_t v37 = sub_100146730((uint64_t)v36);
  if ((v38 & 1) == 0)
  {

LABEL_6:
    swift_endAccess();
    return;
  }
  uint64_t v39 = a5 + 16;
  char v40 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v37);
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  swift_endAccess();
  swift_bridgeObjectRetain();

  if (!a3)
  {
    uint64_t v128 = v41;
    uint64_t v129 = v42;
    id v127 = v36;
    if (a1)
    {
      sub_1000E18FC(0, &qword_1002CA478);
      sub_1000E18FC(0, &qword_1002CA480);
      id v44 = a1;
      CKRecordKeyValueSetting.subscript.getter();
      if (v142)
      {
        id v126 = v142;
        id v45 = [v142 fileURL];
        if (v45)
        {
          char v46 = v45;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          id v125 = v44;
          uint64_t v47 = v138;
          uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v138 + 32);
          NSString v49 = v33;
          uint64_t v50 = v137;
          v48(v28, v49, v137);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v28, 0, 1, v50);
          uint64_t v51 = v47;
          id v44 = v125;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v28, 1, v50) != 1)
          {
            uint64_t v52 = (void *)(v135 + 16);
            v48(v136, v28, v50);
            sub_1000D0514(&qword_1002CA570);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_10024A2A0;
            *(void *)(inited + 32) = NSURLFileSizeKey;
            uint64_t v54 = NSURLFileSizeKey;
            sub_1000DFD24(inited);
            swift_setDeallocating();
            type metadata accessor for URLResourceKey(0);
            swift_arrayDestroy();
            URL.resourceValues(forKeys:)();
            swift_bridgeObjectRelease();
            uint64_t v63 = type metadata accessor for URLResourceValues();
            uint64_t v64 = *(void *)(v63 - 8);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v25, 0, 1, v63);
            int v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v25, 1, v63);
            if (v65 == 1)
            {
              sub_1000E27E8((uint64_t)v25, &qword_1002CA568);
              id v66 = v125;
              uint64_t v67 = v129;
              goto LABEL_23;
            }
            uint64_t v101 = URLResourceValues.fileSize.getter();
            char v103 = v102;
            (*(void (**)(char *, uint64_t))(v64 + 8))(v25, v63);
            id v66 = v125;
            uint64_t v67 = v129;
            if ((v103 & 1) != 0 || v101) {
              goto LABEL_23;
            }
            swift_beginAccess();
            uint64_t v104 = *v52;
            if (*(void *)(*v52 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v105 = sub_1001466B8(v128, v67);
              if (v106)
              {
                uint64_t v107 = *(void *)(v104 + 56);
                uint64_t v108 = v133;
                sub_1000E2608(v107 + *(void *)(v133 + 72) * v105, (uint64_t)v18, type metadata accessor for ResponseItem);
                uint64_t v109 = 0;
              }
              else
              {
                uint64_t v109 = 1;
                uint64_t v108 = v133;
              }
              uint64_t v113 = v134;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v18, v109, 1, v134);
              swift_bridgeObjectRelease();
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v18, 1, v113) != 1)
              {
                v114 = v52;
                uint64_t v115 = v130;
                sub_1000E2670((uint64_t)v18, v130, type metadata accessor for ResponseItem);
                swift_endAccess();
                if (*(uint64_t *)(v115 + 88) >= 1)
                {
                  id v116 = sub_1000D0C00(0xD000000000000021, 0x80000001002099A0, 150);
                  v141(0, 0, 0, 0, 0, v127, 0, v116);
                  swift_errorRelease();
                  id v117 = [self defaultManager];
                  URL._bridgeToObjectiveC()(v118);
                  v120 = v119;
                  id v142 = 0;
                  unsigned int v121 = [v117 removeItemAtURL:v119 error:&v142];

                  if (v121)
                  {
                    id v122 = v142;
                  }
                  else
                  {
                    id v123 = v142;
                    _convertNSErrorToError(_:)();

                    swift_willThrow();
                    swift_errorRelease();
                    id v66 = v126;
                  }
                  uint64_t v124 = v128;

                  sub_1000E26D8(v115, type metadata accessor for ResponseItem);
                  (*(void (**)(char *, uint64_t))(v138 + 8))(v136, v50);
                  swift_beginAccess();
                  sub_1000DE7F0((uint64_t)v127);
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_beginAccess();
                  uint64_t v86 = v124;
                  goto LABEL_28;
                }
                sub_1000E26D8(v115, type metadata accessor for ResponseItem);
                uint64_t v52 = v114;
LABEL_23:
                id v68 = v127;
                uint64_t v69 = sub_1000D3C6C(v68, a9);

                if (v69)
                {
                  uint64_t v135 = v39;
                  id v70 = [v69 resource];
                  uint64_t v71 = v52;
                  id v72 = [v70 identity];

                  swift_beginAccess();
                  uint64_t v73 = *v71;
                  if (!*(void *)(v73 + 16))
                  {
                    uint64_t v75 = v132;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v132, 1, 1, v134);
LABEL_32:
                    sub_1000E27E8(v75, &qword_1002CA4E0);
                    swift_endAccess();
LABEL_33:
                    uint64_t v88 = 0;
LABEL_34:
                    id v89 = v126;
                    if (v72)
                    {
                      id v90 = [v72 fingerPrint];
                      if (v90)
                      {
                        id v91 = v90;
                        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v94 = v93;
                      }
                      else
                      {
                        uint64_t v92 = 0;
                        uint64_t v94 = 0;
                      }
                      id v110 = [v72 fileUTI];
                      if (v110)
                      {
                        v111 = v110;
                        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v96 = v112;
                      }
                      else
                      {
                        uint64_t v95 = 0;
                        uint64_t v96 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v95 = 0;
                      uint64_t v96 = 0;
                      uint64_t v92 = 0;
                      uint64_t v94 = 0;
                    }
                    v141(v126, v92, v94, v95, v96, v68, v88, 0);

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v138 + 8))(v136, v137);
                    swift_beginAccess();
                    sub_1000DE7F0((uint64_t)v68);
                    swift_endAccess();
                    swift_bridgeObjectRelease();
                    swift_beginAccess();
                    uint64_t v43 = v128;
                    uint64_t v61 = v129;
                    goto LABEL_19;
                  }
                  swift_bridgeObjectRetain();
                  unint64_t v74 = sub_1001466B8(v128, v67);
                  uint64_t v75 = v132;
                  uint64_t v76 = v133;
                  if (v77)
                  {
                    sub_1000E2608(*(void *)(v73 + 56) + *(void *)(v133 + 72) * v74, v132, type metadata accessor for ResponseItem);
                    uint64_t v78 = 0;
                  }
                  else
                  {
                    uint64_t v78 = 1;
                  }
                  uint64_t v87 = v134;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v75, v78, 1, v134);
                  swift_bridgeObjectRelease();
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v75, 1, v87) == 1) {
                    goto LABEL_32;
                  }
                  uint64_t v97 = v75;
                  uint64_t v98 = v131;
                  sub_1000E2670(v97, v131, type metadata accessor for ResponseItem);
                  swift_endAccess();
                  unint64_t v99 = *(void *)(v98 + 72);
                  if (*(unsigned char *)(v98 + 80) == 1)
                  {
                    if (v99 >= 2)
                    {
LABEL_40:
                      uint64_t v100 = v98;
                      uint64_t v88 = *(void *)(v98 + 64);
                      sub_1000E26D8(v100, type metadata accessor for ResponseItem);
                      goto LABEL_34;
                    }
                  }
                  else if (v99 == 2)
                  {
                    goto LABEL_40;
                  }
                  sub_1000E26D8(v98, type metadata accessor for ResponseItem);
                  goto LABEL_33;
                }
                id v142 = 0;
                uint64_t v143 = 0xE000000000000000;
                _StringGuts.grow(_:)(30);
                swift_bridgeObjectRelease();
                id v142 = (id)0xD00000000000001CLL;
                uint64_t v143 = 0x8000000100209980;
                id v79 = [v68 description];
                uint64_t v80 = v66;
                uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                id v83 = v82;

                v84._countAndFlagsBits = v81;
                v84._object = v83;
                String.append(_:)(v84);
                swift_bridgeObjectRelease();
                id v85 = sub_1000D0C00((uint64_t)v142, v143, 27);
                swift_bridgeObjectRelease();
                v141(0, 0, 0, 0, 0, v68, 0, v85);

                swift_errorRelease();
                (*(void (**)(char *, uint64_t))(v138 + 8))(v136, v137);
                swift_beginAccess();
                sub_1000DE7F0((uint64_t)v68);
                swift_endAccess();
                swift_bridgeObjectRelease();
                swift_beginAccess();
                uint64_t v86 = v128;
LABEL_28:
                char v62 = (void *)sub_1000DE720(v86, v67);
                swift_endAccess();
                goto LABEL_20;
              }
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v18, 1, 1, v134);
            }
            sub_1000E27E8((uint64_t)v18, &qword_1002CA4E0);
            swift_endAccess();
            goto LABEL_23;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56))(v28, 1, 1, v137);
        }
        sub_1000E27E8((uint64_t)v28, &qword_1002CA408);
        id v60 = sub_1000D0C00(0xD000000000000020, 0x8000000100209950, 27);
        uint64_t v59 = (uint64_t)v127;
        v141(0, 0, 0, 0, 0, v127, 0, v60);
        swift_errorRelease();
      }
      else
      {
        id v58 = sub_1000D0C00(0xD00000000000001ELL, 0x8000000100209930, 27);
        uint64_t v59 = (uint64_t)v127;
        v141(0, 0, 0, 0, 0, v127, 0, v58);
        swift_errorRelease();
      }
      swift_beginAccess();
      uint64_t v57 = v59;
    }
    else
    {
      id v55 = sub_1000D0C00(0xD000000000000022, 0x8000000100209900, 150);
      uint64_t v56 = (uint64_t)v127;
      v141(0, 0, 0, 0, 0, v127, 0, v55);
      swift_errorRelease();
      swift_beginAccess();
      uint64_t v57 = v56;
    }
    sub_1000DE7F0(v57);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v43 = v128;
    uint64_t v42 = v129;
    goto LABEL_18;
  }
  swift_errorRetain();
  v141(0, 0, 0, 0, 0, v36, 0, a3);
  swift_errorRelease();
  swift_beginAccess();
  sub_1000DE7F0((uint64_t)v36);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v43 = v41;
LABEL_18:
  uint64_t v61 = v42;
LABEL_19:
  char v62 = (void *)sub_1000DE720(v43, v61);
  swift_endAccess();
LABEL_20:
  swift_bridgeObjectRelease();
}

uint64_t sub_1000D4EDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void (*a11)(void, void, void, void, void, id, void, id, uint64_t), uint64_t a12)
{
  uint64_t v101 = a8;
  uint64_t v103 = a3;
  uint64_t v107 = a1;
  uint64_t v17 = type metadata accessor for ResponseItem(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17 - 8);
  uint64_t v21 = (uint64_t *)((char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v92 - v22;
  uint64_t v24 = sub_1000D0514(&qword_1002CA470);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v104 = (uint64_t)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v92 - v27;
  uint64_t v29 = type metadata accessor for ResourceDownloadResponse(0);
  uint64_t v105 = *(void *)(v29 - 8);
  char v106 = (void (*)(void, void, void, void, void, id, void, id, uint64_t))v29;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v92 - v33;
  if (qword_1002C9C20 != -1)
  {
    char v102 = (char *)&v92 - v33;
    swift_once();
    uint64_t v34 = v102;
  }
  if (byte_1002CA368 == 1)
  {
    char v102 = v34;
    unint64_t v99 = (void *)(a4 + 16);
    uint64_t v100 = a7;
    sub_1000E200C(v107, (uint64_t)v28, &qword_1002CA470);
    if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void, id, void, id, uint64_t)))(v105 + 48))(v28, 1, v106) == 1)
    {
      sub_1000E27E8((uint64_t)v28, &qword_1002CA470);
      type metadata accessor for ResourceDownloadRequest(0);
      sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
      Message.debugDescription.getter();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (a2) {
        id v36 = (void *)_convertErrorToNSError(_:)();
      }
      else {
        id v36 = 0;
      }
      int v65 = v99;
      swift_beginAccess();
      if (*v65)
      {
        swift_bridgeObjectRetain();
        v66.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v66.super.Class isa = 0;
      }
      CPLTaskLogCKCodeRequestAndResponse(v35, 0, v36, v66.super.isa);

      a7 = v100;
    }
    else
    {
      uint64_t v98 = v21;
      uint64_t v37 = (uint64_t)v102;
      sub_1000E2670((uint64_t)v28, (uint64_t)v102, type metadata accessor for ResourceDownloadResponse);
      uint64_t v38 = *(void *)v37;
      int64_t v39 = *(void *)(*(void *)v37 + 16);
      char v40 = &_swiftEmptyArrayStorage;
      uint64_t v97 = v18;
      if (v39)
      {
        uint64_t v93 = v32;
        uint64_t v94 = a2;
        uint64_t v95 = a6;
        uint64_t v96 = a5;
        id v110 = &_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_100148324(0, v39, 0);
        unint64_t v41 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        uint64_t v92 = v38;
        uint64_t v42 = v38 + v41;
        uint64_t v43 = *(void *)(v18 + 72);
        char v40 = v110;
        do
        {
          sub_1000E2608(v42, (uint64_t)v23, type metadata accessor for ResponseItem);
          Swift::Int v44 = sub_1000D5954();
          uint64_t v46 = v45;
          sub_1000E26D8((uint64_t)v23, type metadata accessor for ResponseItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100148324(0, v40[2] + 1, 1);
            char v40 = v110;
          }
          unint64_t v48 = v40[2];
          unint64_t v47 = v40[3];
          if (v48 >= v47 >> 1)
          {
            sub_100148324((char *)(v47 > 1), v48 + 1, 1);
            char v40 = v110;
          }
          v40[2] = v48 + 1;
          NSString v49 = (char *)&v40[2 * v48];
          *((void *)v49 + 4) = v44;
          *((void *)v49 + 5) = v46;
          v42 += v43;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        a5 = v96;
        a6 = v95;
        a2 = v94;
        uint64_t v32 = v93;
      }
      id v110 = v40;
      sub_1000D0514(&qword_1002CA550);
      sub_1000E2738();
      uint64_t v50 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v53 = *((void *)v102 + 1);
      if (v53)
      {
        char v54 = v102[16];
        uint64_t v55 = (uint64_t)v102;
        swift_bridgeObjectRelease();
        id v110 = 0;
        unint64_t v111 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v56._countAndFlagsBits = 0x646F43726F727265;
        v56._object = (void *)0xEB00000000203A65;
        String.append(_:)(v56);
        uint64_t v108 = v53;
        char v109 = v54;
        _print_unlocked<A, B>(_:_:)();
        v57._countAndFlagsBits = 0x654D726F7272650ALL;
        v57._object = (void *)0xEF203A6567617373;
        String.append(_:)(v57);
        uint64_t v58 = *(void *)(v55 + 24);
        uint64_t v59 = *(void **)(v55 + 32);
        swift_bridgeObjectRetain();
        v60._countAndFlagsBits = v58;
        v60._object = v59;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        uint64_t v50 = (uint64_t)v110;
        uint64_t v52 = (void *)v111;
      }
      a7 = v100;
      type metadata accessor for ResourceDownloadRequest(0);
      sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
      Message.debugDescription.getter();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v110 = (void *)0xD00000000000001ALL;
      unint64_t v111 = 0x80000001002097F0;
      v62._countAndFlagsBits = v50;
      v62._object = v52;
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (a2) {
        uint64_t v64 = (void *)_convertErrorToNSError(_:)();
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v67 = v99;
      swift_beginAccess();
      if (*v67)
      {
        swift_bridgeObjectRetain();
        v68.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v68.super.Class isa = 0;
      }
      uint64_t v18 = v97;
      CPLTaskLogCKCodeRequestAndResponse(v61, v63, v64, v68.super.isa);

      sub_1000E26D8((uint64_t)v102, type metadata accessor for ResourceDownloadResponse);
      uint64_t v21 = v98;
    }
  }
  uint64_t v69 = v104;
  sub_1000E200C(v107, v104, &qword_1002CA470);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(void, void, void, void, void, id, void, id, uint64_t)))(v105 + 48))(v69, 1, v106) != 1)
  {
    sub_1000E2670(v69, (uint64_t)v32, type metadata accessor for ResourceDownloadResponse);
    uint64_t v71 = *((void *)v32 + 1);
    if (v71)
    {
      char v72 = v32[16];
      unint64_t v73 = *((void *)v32 + 3);
      unint64_t v74 = *((void *)v32 + 4);
      uint64_t v75 = *((void *)v32 + 5);
      swift_bridgeObjectRetain();
      id v76 = sub_1000D1A9C(v71, v72, v73, v74, v75);
      swift_bridgeObjectRelease();
      a5(v76);
      swift_errorRelease();
      return sub_1000E26D8((uint64_t)v32, type metadata accessor for ResourceDownloadResponse);
    }
    swift_beginAccess();
    if (!*(void *)(*(void *)(a7 + 16) + 16)
      || (uint64_t v78 = *(void *)v32, (v79 = *(void *)(*(void *)v32 + 16)) == 0))
    {
LABEL_46:
      a5(a2);
      return sub_1000E26D8((uint64_t)v32, type metadata accessor for ResourceDownloadResponse);
    }
    uint64_t v93 = v32;
    uint64_t v94 = a2;
    uint64_t v95 = a6;
    uint64_t v96 = a5;
    char v106 = a11;
    uint64_t v107 = a12;
    uint64_t v80 = (uint64_t *)(v101 + 16);
    uint64_t v81 = v78 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v82 = *(void *)(v18 + 72);
    uint64_t v105 = v78;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000E2608(v81, (uint64_t)v21, type metadata accessor for ResponseItem);
      uint64_t v83 = (uint64_t)v21;
      uint64_t v85 = *v21;
      uint64_t v84 = v21[1];
      swift_beginAccess();
      uint64_t v86 = *v80;
      if (*(void *)(*v80 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v87 = sub_1001466B8(v85, v84);
        if (v88)
        {
          id v89 = *(void **)(*(void *)(v86 + 56) + 8 * v87);
          swift_endAccess();
          id v90 = v89;
          swift_bridgeObjectRelease();
          id v91 = sub_1000D0D3C(v83, v90, a9, a10);
          v106(0, 0, 0, 0, 0, v90, 0, v91, v92);

          swift_errorRelease();
          goto LABEL_41;
        }
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
LABEL_41:
      uint64_t v21 = (uint64_t *)v83;
      sub_1000E26D8(v83, type metadata accessor for ResponseItem);
      v81 += v82;
      if (!--v79)
      {
        swift_bridgeObjectRelease();
        a5 = v96;
        a2 = v94;
        uint64_t v32 = v93;
        goto LABEL_46;
      }
    }
  }
  sub_1000E27E8(v69, &qword_1002CA470);
  if (a2) {
    id v70 = a2;
  }
  else {
    id v70 = sub_1000D0C00(0xD000000000000022, 0x8000000100209290, 150);
  }
  swift_errorRetain();
  a5(v70);
  return swift_errorRelease();
}

Swift::Int sub_1000D5954()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v106 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v104 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000D0514(&qword_1002CA468);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  char v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v9 = (char *)&v103 - v8;
  uint64_t v11 = *v0;
  unint64_t v10 = v0[1];
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v12 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v13 = 0xE700000000000000;
  uint64_t v14 = 0x7B20736D657469;
  if (v12)
  {
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v107[0] = 0xD000000000000010;
    v107[1] = 0x8000000100209810;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v11;
    v15._object = (void *)v10;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = v107[0];
    uint64_t v17 = (void *)v107[1];
    strcpy((char *)v107, "items {");
    v107[1] = 0xE700000000000000;
    v16._object = v17;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v14 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v19 = v0[2];
  unint64_t v18 = v0[3];
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    strcpy((char *)v107, "\n  recordID: ");
    HIWORD(v107[1]) = -4864;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v19;
    v21._object = (void *)v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    uint64_t v22 = v107[0];
    uint64_t v23 = (void *)v107[1];
    v107[0] = v14;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = v22;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v26 = v0[4];
  unint64_t v25 = v0[5];
  uint64_t v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v27 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v107[0] = 0xD000000000000011;
    v107[1] = 0x8000000100209830;
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v26;
    v28._object = (void *)v25;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v107[0];
    uint64_t v30 = (void *)v107[1];
    v107[0] = v14;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = v29;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = v107[1];
    uint64_t v105 = v107[0];
  }
  else
  {
    uint64_t v105 = v14;
  }
  uint64_t v32 = (uint64_t)v0 + *(int *)(type metadata accessor for ResponseItem(0) + 52);
  sub_1000E200C(v32, (uint64_t)v9, &qword_1002CA468);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
  int v34 = v33(v9, 1, v2);
  sub_1000E27E8((uint64_t)v9, &qword_1002CA468);
  if (v34 != 1)
  {
    sub_1000E200C(v32, (uint64_t)v7, &qword_1002CA468);
    if (v33(v7, 1, v2) == 1)
    {
      id v36 = v104;
      Ckcode_RecordTransport.init()();
      sub_1000E27E8((uint64_t)v7, &qword_1002CA468);
      uint64_t v38 = v105;
      uint64_t v37 = v106;
    }
    else
    {
      uint64_t v37 = v106;
      id v36 = v104;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v104, v7, v2);
      uint64_t v38 = v105;
    }
    uint64_t v39 = Ckcode_RecordTransport.localSerialization.getter();
    unint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v2);
    uint64_t v42 = Data.debugDescription.getter();
    unint64_t v44 = v43;
    sub_1000E1938(v39, v41);
    if (String.count.getter() < 21) {
      goto LABEL_28;
    }
    if ((v44 & 0x2000000000000000) != 0) {
      uint64_t v45 = HIBYTE(v44) & 0xF;
    }
    else {
      uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v46 = 7;
    if (((v44 >> 60) & ((v42 & 0x800000000000000) == 0)) != 0) {
      uint64_t v46 = 11;
    }
    uint64_t v106 = v45;
    unint64_t v47 = (char *)(v46 | (v45 << 16));
    String.index(_:offsetBy:)();
    uint64_t v104 = v47;
    unint64_t v48 = String.index(_:offsetBy:)();
    uint64_t v49 = String.subscript.getter();
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v110 = 0;
    unint64_t v111 = 0xE000000000000000;
    uint64_t v56 = String.count.getter();
    uint64_t v57 = Substring.distance(from:to:)();
    BOOL v58 = __OFADD__(v56, v57);
    Swift::Int result = v56 + v57;
    if (v58)
    {
      __break(1u);
    }
    else
    {
      String.reserveCapacity(_:)(result);
      v107[0] = v49;
      v107[1] = v51;
      uint64_t v108 = v53;
      uint64_t v109 = v55;
      sub_1000E2794();
      String.append<A>(contentsOf:)();
      v107[0] = 3026478;
      v107[1] = 0xE300000000000000;
      String.append<A>(contentsOf:)();
      Swift::Int result = swift_bridgeObjectRelease();
      if (4 * v106 >= v48 >> 14)
      {
        uint64_t v61 = v110;
        unint64_t v60 = v111;
        uint64_t v62 = String.subscript.getter();
        uint64_t v64 = v63;
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        swift_bridgeObjectRelease();
        uint64_t v110 = v61;
        unint64_t v111 = v60;
        v107[0] = v62;
        v107[1] = v64;
        uint64_t v108 = v66;
        uint64_t v109 = v68;
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = v110;
        unint64_t v44 = v111;
        uint64_t v38 = v105;
LABEL_28:
        v107[0] = 0;
        v107[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v107[0] = 0xD000000000000025;
        v107[1] = 0x80000001002098D0;
        v69._countAndFlagsBits = v42;
        v69._object = (void *)v44;
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        uint64_t v70 = v107[0];
        uint64_t v71 = (void *)v107[1];
        v107[0] = v38;
        v107[1] = v13;
        swift_bridgeObjectRetain();
        v72._countAndFlagsBits = v70;
        v72._object = v71;
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = v107[0];
        unint64_t v13 = v107[1];
        goto LABEL_29;
      }
    }
    __break(1u);
    return result;
  }
  uint64_t v35 = v105;
LABEL_29:
  uint64_t v74 = v1[6];
  unint64_t v73 = v1[7];
  uint64_t v75 = HIBYTE(v73) & 0xF;
  if ((v73 & 0x2000000000000000) == 0) {
    uint64_t v75 = v74 & 0xFFFFFFFFFFFFLL;
  }
  if (v75)
  {
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v107[0] = 0xD000000000000011;
    v107[1] = 0x8000000100209850;
    swift_bridgeObjectRetain();
    v76._countAndFlagsBits = v74;
    v76._object = (void *)v73;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    uint64_t v77 = v107[0];
    uint64_t v78 = (void *)v107[1];
    v107[0] = v35;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v79._countAndFlagsBits = v77;
    v79._object = v78;
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v80 = v1[8];
  if (v80)
  {
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v107[0] = 0xD000000000000016;
    v107[1] = 0x8000000100209870;
    uint64_t v110 = v80;
    v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    uint64_t v82 = v107[0];
    uint64_t v83 = (void *)v107[1];
    v107[0] = v35;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v84._countAndFlagsBits = v82;
    v84._object = v83;
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v85 = v1[9];
  if (v85)
  {
    char v86 = *((unsigned char *)v1 + 80);
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v87._object = (void *)0x8000000100209890;
    v87._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v87);
    uint64_t v110 = v85;
    LOBYTE(v111) = v86;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v88 = v107[0];
    id v89 = (void *)v107[1];
    v107[0] = v35;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v90._countAndFlagsBits = v88;
    v90._object = v89;
    String.append(_:)(v90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v91 = v1[11];
  if (v91)
  {
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v107[0] = 0xD00000000000001ALL;
    v107[1] = 0x80000001002098B0;
    uint64_t v110 = v91;
    v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    uint64_t v93 = v107[0];
    uint64_t v94 = (void *)v107[1];
    v107[0] = v35;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v95._countAndFlagsBits = v93;
    v95._object = v94;
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v107[0];
    unint64_t v13 = v107[1];
  }
  uint64_t v96 = v1[12];
  if (v96)
  {
    char v97 = *((unsigned char *)v1 + 104);
    v107[0] = 0;
    v107[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v98._countAndFlagsBits = 0x726F72726520200ALL;
    v98._object = (void *)0xEE00203A65646F43;
    String.append(_:)(v98);
    uint64_t v110 = v96;
    LOBYTE(v111) = v97;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v99 = v107[0];
    uint64_t v100 = (void *)v107[1];
    v107[0] = v35;
    v107[1] = v13;
    swift_bridgeObjectRetain();
    v101._countAndFlagsBits = v99;
    v101._object = v100;
    String.append(_:)(v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v107[0];
    unint64_t v13 = v107[1];
  }
  v107[0] = v35;
  v107[1] = v13;
  swift_bridgeObjectRetain();
  v102._countAndFlagsBits = 32010;
  v102._object = (void *)0xE200000000000000;
  String.append(_:)(v102);
  swift_bridgeObjectRelease();
  return v107[0];
}

void sub_1000D64D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v12 = a5;
  if (a3)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v14 = 0;
  if (a5) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a8) {
    uint64_t v15 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v15 = 0;
  }
  id v16 = (id)v15;
  (*(void (**)(uint64_t, uint64_t, NSString, NSString, uint64_t, uint64_t))(a9 + 16))(a9, a1, v14, v12, a6, a7);
}

void sub_1000D65C0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void *static CPLCKResourceDownloadOperation.streamOperation(for:key:downloadType:filename:timeRange:mediaRequestHints:completionBlock:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000DFF54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000D6630(uint64_t *a1)
{
  sub_1000D0514(&qword_1002CA4B0);
  type metadata accessor for RequestItem(0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10024A2A0;
  sub_1000E1554(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  static Message.with(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000D67A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v159 = a7;
  uint64_t v161 = a6;
  uint64_t v156 = a3;
  unint64_t v157 = a5;
  uint64_t v10 = type metadata accessor for CMTimeRange(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v155 = (uint64_t)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  __chkstk_darwin(v154);
  v153 = (char *)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v20 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v163 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_100100A48(v22);
    uint64_t v20 = v163;
    swift_release();
    *(void *)(a1 + v20) = v23;
    swift_release();
  }
  uint64_t v24 = *(void *)(a1 + v20);
  swift_beginAccess();
  *(void *)(v24 + 16) = v17;
  *(void *)(v24 + 24) = v19;
  swift_bridgeObjectRelease();
  id v25 = [a2 recordName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v29 = swift_retain();
    uint64_t v30 = sub_100100A48(v29);
    uint64_t v20 = v163;
    swift_release();
    *(void *)(a1 + v20) = v30;
    swift_release();
  }
  uint64_t v31 = *(void *)(a1 + v20);
  swift_beginAccess();
  *(void *)(v31 + 32) = v26;
  *(void *)(v31 + 40) = v28;
  swift_bridgeObjectRelease();
  id v162 = [a2 zoneID];
  id v32 = [v162 zoneName];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v36 = swift_retain();
    uint64_t v37 = sub_100100A48(v36);
    uint64_t v20 = v163;
    swift_release();
    *(void *)(a1 + v20) = v37;
    swift_release();
  }
  uint64_t v160 = a1;
  uint64_t v38 = *(void *)(a1 + v20);
  swift_beginAccess();
  *(void *)(v38 + 64) = v33;
  *(void *)(v38 + 72) = v35;
  swift_bridgeObjectRelease();
  id v39 = [v162 ownerName];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v159;
    uint64_t v46 = v163;
    uint64_t v47 = v161;
    if (v44) {
      goto LABEL_15;
    }
    id v48 = [v162 ownerName];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;

    uint64_t v52 = v160;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v53 = swift_retain();
      uint64_t v54 = sub_100100A48(v53);
      uint64_t v46 = v163;
      swift_release();
      *(void *)(v52 + v46) = v54;
      swift_release();
    }
    uint64_t v55 = *(void *)(v52 + v46);
    swift_beginAccess();
    *(void *)(v55 + 80) = v49;
    *(void *)(v55 + 88) = v51;
  }
  uint64_t v45 = v159;
  uint64_t v47 = v161;
  swift_bridgeObjectRelease();
  uint64_t v46 = v163;
LABEL_15:
  swift_bridgeObjectRetain();
  uint64_t v56 = v160;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v57 = swift_retain();
    uint64_t v58 = sub_100100A48(v57);
    swift_release();
    *(void *)(v56 + v46) = v58;
    swift_release();
  }
  uint64_t v59 = *(void *)(v56 + v46);
  swift_beginAccess();
  *(void *)(v59 + 48) = v156;
  *(void *)(v59 + 56) = a4;
  swift_bridgeObjectRelease();
  uint64_t v60 = v157;
  if (v157 >= 3) {
    goto LABEL_101;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v61 = swift_retain();
    uint64_t v62 = sub_100100A48(v61);
    swift_release();
    *(void *)(v56 + v46) = v62;
    swift_release();
  }
  uint64_t v63 = *(void *)(v56 + v46);
  swift_beginAccess();
  *(void *)(v63 + 96) = v60;
  *(unsigned char *)(v63 + 104) = 1;
  if (!v47) {
    goto LABEL_96;
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v64 = sub_1001466B8(0x707954616964656DLL, 0xEA00000000007365);
    if (v65)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v64, (uint64_t)v166);
      sub_1000D0514(&qword_1002CA538);
      if (swift_dynamicCast())
      {
        unint64_t v66 = v164;
        if (v164 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
          if (v60) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v60 = *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v60)
          {
LABEL_26:
            if (v60 >= 1)
            {
              uint64_t v67 = 0;
              uint64_t v68 = (char *)&_swiftEmptyArrayStorage;
              do
              {
                if ((v66 & 0xC000000000000001) != 0) {
                  id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v69 = *(id *)(v66 + 8 * v67 + 32);
                }
                uint64_t v70 = v69;
                id v71 = [v69 integerValue];

                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v68 = sub_1000DE44C(0, *((void *)v68 + 2) + 1, 1, v68);
                }
                unint64_t v73 = *((void *)v68 + 2);
                unint64_t v72 = *((void *)v68 + 3);
                if (v73 >= v72 >> 1) {
                  uint64_t v68 = sub_1000DE44C((char *)(v72 > 1), v73 + 1, 1, v68);
                }
                ++v67;
                *((void *)v68 + 2) = v73 + 1;
                uint64_t v74 = &v68[16 * v73];
                *((void *)v74 + 4) = v71;
                v74[40] = (unint64_t)v71 < 3;
              }
              while (v60 != v67);
              goto LABEL_39;
            }
            __break(1u);
LABEL_101:
            type metadata accessor for CPLCKResourceDownloadType(0);
            v166[0] = v60;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
            return;
          }
        }
        uint64_t v68 = (char *)&_swiftEmptyArrayStorage;
LABEL_39:
        swift_bridgeObjectRelease_n();
        uint64_t v56 = v160;
        uint64_t v75 = v163;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v76 = swift_retain();
          uint64_t v77 = sub_100100A48(v76);
          swift_release();
          *(void *)(v56 + v75) = v77;
          swift_release();
        }
        uint64_t v78 = (char **)(*(void *)(v56 + v75)
                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
        swift_beginAccess();
        *uint64_t v78 = v68;
        swift_bridgeObjectRelease();
        uint64_t v45 = v159;
        uint64_t v46 = v75;
        uint64_t v47 = v161;
      }
    }
  }
  if (!*(void *)(v47 + 16)) {
    goto LABEL_54;
  }
  unint64_t v79 = sub_1001466B8(0x666F725063766568, 0xEB00000000656C69);
  if ((v80 & 1) == 0) {
    goto LABEL_54;
  }
  sub_1000E20C8(*(void *)(v47 + 56) + 32 * v79, (uint64_t)v166);
  sub_1000E18FC(0, &qword_1002CA4D0);
  if (swift_dynamicCast())
  {
    id v81 = (id)v164;
    if (*(void *)(v47 + 16))
    {
      unint64_t v82 = sub_1001466B8(0x7265695463766568, 0xE800000000000000);
      if (v83)
      {
        sub_1000E20C8(*(void *)(v47 + 56) + 32 * v82, (uint64_t)v166);
        if (swift_dynamicCast())
        {
          id v84 = (id)v164;
          if (!*(void *)(v47 + 16)
            || (unint64_t v85 = sub_1001466B8(0x6576654C63766568, 0xE90000000000006CLL), (v86 & 1) == 0)
            || (sub_1000E20C8(*(void *)(v47 + 56) + 32 * v85, (uint64_t)v166), uint64_t v87 = swift_dynamicCast(),
                                                                                (v87 & 1) == 0))
          {

            uint64_t v56 = v160;
            goto LABEL_53;
          }
          id v88 = (id)v164;
          __chkstk_darwin(v87);
          *(&v152 - 4) = (uint64_t)v81;
          *(&v152 - 3) = (uint64_t)v84;
          *(&v152 - 2) = (uint64_t)v88;
          sub_1000E1554(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
          uint64_t v89 = (uint64_t)v153;
          uint64_t v90 = v158;
          static Message.with(_:)();
          uint64_t v158 = v90;
          uint64_t v91 = v160;
          RequestItem.videoProfileTierLevelInformation.setter(v89);

          uint64_t v56 = v91;
        }
      }
    }
  }
LABEL_53:
  uint64_t v46 = v163;
LABEL_54:
  if (*(void *)(v47 + 16))
  {
    unint64_t v92 = sub_1001466B8(0xD00000000000001ALL, 0x8000000100209700);
    if (v93)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v92, (uint64_t)v166);
      sub_1000E18FC(0, &qword_1002CA4D0);
      if (swift_dynamicCast())
      {
        id v94 = (id)v164;
        uint64_t v95 = v46;
        unsigned int v96 = [(id)v164 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v97 = swift_retain();
          uint64_t v98 = sub_100100A48(v97);
          swift_release();
          *(void *)(v56 + v95) = v98;
          swift_release();
        }
        uint64_t v99 = (unsigned int *)(*(void *)(v56 + v95)
                             + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
        swift_beginAccess();
        unsigned int *v99 = v96;

        uint64_t v46 = v95;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v100 = sub_1001466B8(0xD00000000000001DLL, 0x8000000100209720);
    if (v101)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v100, (uint64_t)v166);
      sub_1000E18FC(0, &qword_1002CA4D0);
      if (swift_dynamicCast())
      {
        id v102 = (id)v164;
        uint64_t v103 = v46;
        unsigned int v104 = [(id)v164 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v105 = swift_retain();
          uint64_t v106 = sub_100100A48(v105);
          swift_release();
          *(void *)(v56 + v103) = v106;
          swift_release();
        }
        uint64_t v107 = (unsigned int *)(*(void *)(v56 + v103)
                              + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
        swift_beginAccess();
        unsigned int *v107 = v104;

        uint64_t v46 = v103;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v108 = sub_1001466B8(0xD00000000000001DLL, 0x8000000100209740);
    if (v109)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v108, (uint64_t)v166);
      sub_1000E18FC(0, &qword_1002CA4D0);
      if (swift_dynamicCast())
      {
        id v110 = (id)v164;
        uint64_t v111 = v46;
        unsigned int v112 = [(id)v164 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v113 = swift_retain();
          uint64_t v114 = sub_100100A48(v113);
          swift_release();
          *(void *)(v56 + v111) = v114;
          swift_release();
        }
        uint64_t v115 = (unsigned int *)(*(void *)(v56 + v111)
                              + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
        swift_beginAccess();
        unsigned int *v115 = v112;

        uint64_t v46 = v111;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v116 = sub_1001466B8(0xD00000000000002ALL, 0x8000000100209760);
    if (v117)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v116, (uint64_t)v166);
      if (swift_dynamicCast())
      {
        uint64_t v118 = v46;
        uint64_t v119 = v56;
        unint64_t v120 = v164;
        unint64_t v121 = v165;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v122 = swift_retain();
          uint64_t v123 = sub_100100A48(v122);
          swift_release();
          *(void *)(v119 + v118) = v123;
          swift_release();
        }
        uint64_t v124 = (unint64_t *)(*(void *)(v119 + v118)
                                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
        swift_beginAccess();
        unint64_t *v124 = v120;
        v124[1] = v121;
        swift_bridgeObjectRelease();
        uint64_t v56 = v119;
        uint64_t v46 = v118;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v125 = sub_1001466B8(0xD000000000000017, 0x8000000100209790);
    if (v126)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v125, (uint64_t)v166);
      if (swift_dynamicCast())
      {
        uint64_t v127 = v46;
        uint64_t v128 = v56;
        unint64_t v129 = v164;
        unint64_t v130 = v165;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v131 = swift_retain();
          uint64_t v132 = sub_100100A48(v131);
          swift_release();
          *(void *)(v128 + v127) = v132;
          swift_release();
        }
        uint64_t v133 = (unint64_t *)(*(void *)(v128 + v127)
                                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
        swift_beginAccess();
        unint64_t *v133 = v129;
        v133[1] = v130;
        swift_bridgeObjectRelease();
        uint64_t v56 = v128;
        uint64_t v46 = v127;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v134 = sub_1001466B8(0xD000000000000018, 0x80000001002097B0);
    if (v135)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v134, (uint64_t)v166);
      if (swift_dynamicCast())
      {
        uint64_t v136 = v46;
        uint64_t v137 = v56;
        unint64_t v138 = v164;
        unint64_t v139 = v165;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v140 = swift_retain();
          uint64_t v141 = sub_100100A48(v140);
          swift_release();
          *(void *)(v137 + v136) = v141;
          swift_release();
        }
        id v142 = (unint64_t *)(*(void *)(v137 + v136)
                                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
        swift_beginAccess();
        unint64_t *v142 = v138;
        v142[1] = v139;
        swift_bridgeObjectRelease();
        uint64_t v56 = v137;
        uint64_t v46 = v136;
        uint64_t v47 = v161;
      }
    }
  }
  if (*(void *)(v47 + 16))
  {
    unint64_t v143 = sub_1001466B8(0xD00000000000001ELL, 0x80000001002097D0);
    if (v144)
    {
      sub_1000E20C8(*(void *)(v47 + 56) + 32 * v143, (uint64_t)v166);
      sub_1000E18FC(0, &qword_1002CA4D0);
      if (swift_dynamicCast())
      {
        id v145 = v167;
        uint64_t v146 = v46;
        unsigned __int8 v147 = [v167 BOOLValue];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for RequestItem._StorageClass(0);
          swift_allocObject();
          uint64_t v148 = swift_retain();
          uint64_t v149 = sub_100100A48(v148);
          swift_release();
          *(void *)(v56 + v146) = v149;
          swift_release();
        }
        v150 = (unsigned __int8 *)(*(void *)(v56 + v146)
                                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
        swift_beginAccess();
        unsigned __int8 *v150 = v147;
      }
    }
  }
LABEL_96:
  if (CMTimeRange.isValid.getter())
  {
    uint64_t v151 = v155;
    sub_1000D20BC(v45, v155);
    RequestItem.timeRange.setter(v151);
  }
}

uint64_t sub_1000D7924(void *a1, uint64_t a2, uint64_t a3, char *a4, void (*a5)(void, void, void), uint64_t a6, void *a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t), void *a9)
{
  uint64_t v113 = a7;
  uint64_t v114 = a8;
  char v117 = a4;
  id v118 = a1;
  uint64_t v120 = type metadata accessor for Date();
  uint64_t v122 = *(void *)(v120 - 8);
  uint64_t v12 = __chkstk_darwin(v120);
  unint64_t v100 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v105 = (char *)&v99 - v14;
  uint64_t v123 = type metadata accessor for URL();
  uint64_t v121 = *(void *)(v123 - 8);
  uint64_t v15 = __chkstk_darwin(v123);
  uint64_t v103 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unsigned int v104 = (char *)&v99 - v17;
  uint64_t v18 = sub_1000D0514(&qword_1002CA468);
  __chkstk_darwin(v18 - 8);
  uint64_t v112 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v110 = *(void *)(v20 - 8);
  uint64_t v111 = v20;
  __chkstk_darwin(v20);
  unint64_t v108 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for ResponseItem(0);
  uint64_t v115 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v116 = (uint64_t)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000D0514(&qword_1002CA400);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  char v101 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v119 = (char *)&v99 - v26;
  uint64_t v27 = sub_1000D0514(&qword_1002CA408);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v106 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v99 - v30;
  uint64_t v32 = type metadata accessor for ResourceStreamResponse(0);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_1000D0514(&qword_1002CA520);
  uint64_t v37 = __chkstk_darwin(v36 - 8);
  id v39 = (char *)&v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v99 - v40;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  if (byte_1002CA368 == 1)
  {
    uint64_t v107 = v35;
    id v102 = v31;
    uint64_t v99 = a6;
    type metadata accessor for ResourceStreamRequest(0);
    sub_1000E1554(&qword_1002CA510, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
    Message.debugDescription.getter();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_1000E200C((uint64_t)v118, (uint64_t)v41, &qword_1002CA520);
    uint64_t v43 = a5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v41, 1, v32) == 1)
    {
      sub_1000E27E8((uint64_t)v41, &qword_1002CA520);
      NSString v44 = 0;
    }
    else
    {
      sub_1000E1554(&qword_1002CA528, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
      Message.debugDescription.getter();
      sub_1000E26D8((uint64_t)v41, type metadata accessor for ResourceStreamResponse);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v45 = v117 + 16;
    if (a2) {
      uint64_t v46 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v46 = 0;
    }
    swift_beginAccess();
    if (*v45)
    {
      swift_bridgeObjectRetain();
      v47.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v47.super.Class isa = 0;
    }
    uint64_t v35 = v107;
    CPLTaskLogCKCodeRequestAndResponse(v42, v44, v46, v47.super.isa);

    a5 = v43;
    uint64_t v31 = v102;
  }
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v123);
    id v48 = v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v120);
    swift_errorRetain();
    a5(v31, v48, a2);
    swift_errorRelease();
    uint64_t v49 = (uint64_t)v48;
LABEL_18:
    sub_1000E27E8(v49, &qword_1002CA400);
    return sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
  }
  sub_1000E200C((uint64_t)v118, (uint64_t)v39, &qword_1002CA520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v39, 1, v32) == 1)
  {
    sub_1000E27E8((uint64_t)v39, &qword_1002CA520);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v123);
    uint64_t v50 = v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v120);
    id v51 = sub_1000D0C00(0xD000000000000020, 0x8000000100209680, 150);
    a5(v31, v50, v51);
    swift_errorRelease();
    uint64_t v49 = (uint64_t)v50;
    goto LABEL_18;
  }
  sub_1000E2670((uint64_t)v39, (uint64_t)v35, type metadata accessor for ResourceStreamResponse);
  uint64_t v53 = *((void *)v35 + 1);
  uint64_t v54 = v123;
  if (!v53)
  {
    if (!*(void *)(*(void *)v35 + 16))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v123);
      uint64_t v68 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v120);
      id v69 = sub_1000D0C00(0xD00000000000001CLL, 0x80000001002096E0, 150);
      a5(v31, v68, v69);
      swift_errorRelease();
      sub_1000E27E8(v68, &qword_1002CA400);
      sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
      goto LABEL_27;
    }
    uint64_t v63 = v116;
    sub_1000E2608(*(void *)v35 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80)), v116, type metadata accessor for ResponseItem);
    uint64_t v64 = v120;
    if (*(void *)(v63 + 96))
    {
      id v65 = sub_1000D0D3C(v63, v113, (uint64_t)v114, a9);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v54);
      unint64_t v66 = v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v64);
LABEL_24:
      a5(v31, v66, v65);
      swift_errorRelease();
      uint64_t v67 = (uint64_t)v66;
LABEL_25:
      sub_1000E27E8(v67, &qword_1002CA400);
      sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
      sub_1000E26D8(v63, type metadata accessor for ResponseItem);
LABEL_27:
      uint64_t v62 = (uint64_t)v35;
      return sub_1000E26D8(v62, type metadata accessor for ResourceStreamResponse);
    }
    uint64_t v70 = v112;
    sub_1000E200C(v63 + *(int *)(v109 + 52), v112, &qword_1002CA468);
    uint64_t v72 = v110;
    uint64_t v71 = v111;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v70, 1, v111) == 1)
    {
      Ckcode_RecordTransport.init()();
      sub_1000E27E8(v70, &qword_1002CA468);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v108, v70, v71);
    }
    sub_1000E18FC(0, &qword_1002CA478);
    uint64_t v73 = CKRecord.init(_:)();
    if (!v73)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v54);
      unint64_t v66 = v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v64);
      id v65 = sub_1000D0C00(0xD000000000000022, 0x80000001002092C0, 25);
      goto LABEL_24;
    }
    uint64_t v74 = (char *)v73;
    sub_1000E18FC(0, &qword_1002CA480);
    CKRecordKeyValueSetting.subscript.getter();
    id v75 = v124;
    if (!v124)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v54);
      char v83 = v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v64);
      id v84 = sub_1000D0C00(0xD000000000000020, 0x80000001002092F0, 27);
      a5(v31, v83, v84);
      swift_errorRelease();

      uint64_t v67 = (uint64_t)v83;
      goto LABEL_25;
    }
    uint64_t v107 = v35;
    NSString v76 = String._bridgeToObjectiveC()();
    id v77 = [v75 downloadURLWithFileName:v76];

    if (!v77)
    {
      unint64_t v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56);
      uint64_t v81 = (uint64_t)v106;
      v82(v106, 1, 1, v54);
      goto LABEL_40;
    }
    char v117 = v74;
    id v118 = v75;
    uint64_t v78 = v103;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v79 = v121;
    char v80 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
    uint64_t v81 = (uint64_t)v106;
    v80(v106, v78, v54);
    uint64_t v115 = *(void *)(v79 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v115)(v81, 0, 1, v54);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v81, 1, v54) == 1)
    {
      uint64_t v74 = v117;
      id v75 = v118;
      unint64_t v82 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v115;
LABEL_40:
      sub_1000E27E8(v81, &qword_1002CA408);
      v82(v31, 1, 1, v54);
      uint64_t v85 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v64);
      id v86 = sub_1000D0C00(0xD000000000000024, 0x80000001002096B0, 27);
      a5(v31, v85, v86);

      swift_errorRelease();
      sub_1000E27E8(v85, &qword_1002CA400);
      sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
LABEL_48:
      sub_1000E26D8(v116, type metadata accessor for ResponseItem);
      uint64_t v62 = (uint64_t)v107;
      return sub_1000E26D8(v62, type metadata accessor for ResourceStreamResponse);
    }
    v80(v104, (char *)v81, v54);
    id v87 = [v118 downloadURLExpiration];
    if (v87)
    {
      id v88 = v87;
      id v102 = v31;
      uint64_t v89 = v100;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v90 = v122;
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v122 + 32);
      uint64_t v92 = (uint64_t)v101;
      v91(v101, v89, v64);
      uint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
      v114(v92, 0, 1, v64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v92, 1, v64) != 1)
      {
        v91(v105, (char *)v92, v64);
        uint64_t v31 = v102;
        uint64_t v93 = v123;
        goto LABEL_47;
      }
      uint64_t v31 = v102;
      uint64_t v93 = v123;
    }
    else
    {
      uint64_t v92 = (uint64_t)v101;
      uint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
      v114((uint64_t)v101, 1, 1, v64);
      uint64_t v93 = v123;
    }
    Date.init(timeIntervalSinceNow:)();
    sub_1000E27E8(v92, &qword_1002CA400);
LABEL_47:
    uint64_t v94 = v121;
    uint64_t v95 = v104;
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v31, v104, v93);
    ((void (*)(char *, void, uint64_t, uint64_t))v115)(v31, 0, 1, v93);
    uint64_t v96 = v122;
    uint64_t v97 = (uint64_t)v119;
    uint64_t v98 = v105;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v119, v105, v64);
    v114(v97, 0, 1, v64);
    a5(v31, v97, 0);

    sub_1000E27E8(v97, &qword_1002CA400);
    sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v64);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v123);
    goto LABEL_48;
  }
  char v55 = v35[16];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v31, 1, 1, v123);
  uint64_t v56 = (uint64_t)v119;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56))(v119, 1, 1, v120);
  uint64_t v57 = v35;
  unint64_t v58 = *((void *)v35 + 3);
  unint64_t v59 = *((void *)v35 + 4);
  uint64_t v60 = *((void *)v57 + 5);
  swift_bridgeObjectRetain();
  id v61 = sub_1000D1A9C(v53, v55, v58, v59, v60);
  swift_bridgeObjectRelease();
  a5(v31, v56, v61);
  swift_errorRelease();
  sub_1000E27E8(v56, &qword_1002CA400);
  sub_1000E27E8((uint64_t)v31, &qword_1002CA408);
  uint64_t v62 = (uint64_t)v57;
  return sub_1000E26D8(v62, type metadata accessor for ResourceStreamResponse);
}

void sub_1000D8C78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D0514(&qword_1002CA400);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CA408);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v13, &qword_1002CA408);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    uint64_t v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  sub_1000E200C(a2, (uint64_t)v10, &qword_1002CA400);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v19);
  }
  if (a3) {
    a3 = (void *)_convertErrorToNSError(_:)();
  }
  (*(void (**)(uint64_t, void *, Class, void *))(a4 + 16))(a4, v17, isa, a3);
}

uint64_t sub_1000D8EC0(uint64_t *a1)
{
  sub_1000D0514(&qword_1002CA4B0);
  type metadata accessor for RequestItem(0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10024A2A0;
  sub_1000E1554(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  static Message.with(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000D9030(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v77 = a6;
  uint64_t v76 = a5;
  v75[1] = a4;
  id v80 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v16 = swift_retain();
    uint64_t v17 = sub_100100A48(v16);
    swift_release();
    *(void *)(a1 + v15) = v17;
    swift_release();
  }
  uint64_t v18 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v18 + 16) = v12;
  *(void *)(v18 + 24) = v14;
  swift_bridgeObjectRelease();
  id v19 = [a2 recordName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v23 = swift_retain();
    uint64_t v24 = sub_100100A48(v23);
    swift_release();
    *(void *)(a1 + v15) = v24;
    swift_release();
  }
  uint64_t v25 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v25 + 32) = v20;
  *(void *)(v25 + 40) = v22;
  swift_bridgeObjectRelease();
  id v26 = [a2 zoneID];
  id v27 = [v26 zoneName];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v31 = swift_retain();
    uint64_t v32 = sub_100100A48(v31);
    swift_release();
    *(void *)(a1 + v15) = v32;
    swift_release();
  }
  uint64_t v33 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v33 + 64) = v28;
  *(void *)(v33 + 72) = v30;
  swift_bridgeObjectRelease();
  id v34 = [v26 ownerName];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_15;
    }
    id v40 = [v26 ownerName];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v43 = swift_retain();
      uint64_t v44 = sub_100100A48(v43);
      swift_release();
      *(void *)(a1 + v15) = v44;
      swift_release();
    }
    uint64_t v45 = *(void *)(a1 + v15);
    swift_beginAccess();
    *(void *)(v45 + 80) = v30;
    *(void *)(v45 + 88) = v42;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  id v46 = [v80 identity];
  if (!v46)
  {
    __break(1u);
    goto LABEL_43;
  }
  NSArray v47 = v46;
  id v48 = [v46 fingerPrint];

  if (!v48) {
    goto LABEL_22;
  }
  id v49 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v48);
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v53 = swift_retain();
    uint64_t v54 = sub_100100A48(v53);
    swift_release();
    *(void *)(a1 + v15) = v54;
    swift_release();
  }
  uint64_t v55 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v55 + 112) = v50;
  *(void *)(v55 + 120) = v52;

  swift_bridgeObjectRelease();
  if (qword_1002C9C28 != -1) {
    swift_once();
  }
  if ((byte_1002CA369 & 1) == 0)
  {
    id v56 = [a2 recordName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v57 = v78;
    unint64_t v58 = sub_1000D3240((uint64_t)v26);
    if (v57)
    {
      swift_errorRelease();
    }
    else
    {
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for RequestItem._StorageClass(0);
        swift_allocObject();
        uint64_t v60 = swift_retain();
        uint64_t v61 = sub_100100A48(v60);
        swift_release();
        *(void *)(a1 + v15) = v61;
        swift_release();
      }
      uint64_t v62 = *(void *)(a1 + v15);
      swift_beginAccess();
      *(void *)(v62 + 128) = v59;
    }
    uint64_t v30 = v77;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_22:
    uint64_t v30 = v77;
  }
  id v63 = (id)sub_1000967A4(v76);
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v67 = swift_retain();
    uint64_t v68 = sub_100100A48(v67);
    swift_release();
    *(void *)(a1 + v15) = v68;
    swift_release();
  }
  uint64_t v69 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v69 + 48) = v64;
  *(void *)(v69 + 56) = v66;
  swift_bridgeObjectRelease();
  id v70 = [v80 resourceType];
  if (!v30) {
    goto LABEL_39;
  }
  if (v30 == 2)
  {
    Swift::UInt v71 = (Swift::UInt)v70;
    if (qword_1002C9C18 != -1) {
      swift_once();
    }
    if (sub_1000D09D8(v71, qword_1002CA360)) {
      uint64_t v30 = 2;
    }
    else {
      uint64_t v30 = 0;
    }
    goto LABEL_39;
  }
  if (v30 != 1)
  {
LABEL_43:
    type metadata accessor for CPLCKResourceDownloadType(0);
    uint64_t v79 = v30;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v72 = swift_retain();
    uint64_t v73 = sub_100100A48(v72);
    swift_release();
    *(void *)(a1 + v15) = v73;
    swift_release();
  }
  uint64_t v74 = *(void *)(a1 + v15);
  swift_beginAccess();
  *(void *)(v74 + 96) = v30;
  *(unsigned char *)(v74 + 104) = 1;
}

uint64_t sub_1000D9800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CA470);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1000D0514(&qword_1002CA4E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ResponseItem(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v6, &qword_1002CA470);
  uint64_t v14 = type metadata accessor for ResourceDownloadResponse(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v6, 1, v14) == 1)
  {
    sub_1000E27E8((uint64_t)v6, &qword_1002CA470);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    return sub_1000E27E8((uint64_t)v9, &qword_1002CA4E0);
  }
  uint64_t v15 = *v6;
  swift_bridgeObjectRetain();
  sub_1000E26D8((uint64_t)v6, type metadata accessor for ResourceDownloadResponse);
  if (*(void *)(v15 + 16))
  {
    sub_1000E2608(v15 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v9, type metadata accessor for ResponseItem);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v16, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_1000E27E8((uint64_t)v9, &qword_1002CA4E0);
  }
  sub_1000E2670((uint64_t)v9, (uint64_t)v13, type metadata accessor for ResponseItem);
  BOOL v18 = *((void *)v13 + 9) == 2;
  sub_1000E26D8((uint64_t)v13, type metadata accessor for ResponseItem);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a2 + 16) = v18;
  return result;
}

void sub_1000D9B04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, unint64_t, uint64_t, uint64_t, void, void), uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v15 = (unsigned char *)(a4 + 16);
  swift_beginAccess();
  if ((*(unsigned char *)(a4 + 16) & 1) == 0)
  {
    uint64_t v16 = (void *)(a5 + 16);
    swift_beginAccess();
    if (!*(void *)(a5 + 16))
    {
      if (a3)
      {
        swift_beginAccess();
        *uint64_t v16 = a3;
        swift_errorRetain();
LABEL_5:
        swift_errorRelease();
        return;
      }
      if (a1)
      {
        sub_1000E18FC(0, &qword_1002CA478);
        sub_1000E18FC(0, &qword_1002CA480);
        id v17 = a1;
        CKRecordKeyValueSetting.subscript.getter();
        if (v30)
        {
          id v18 = [v30 assetContent];
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v22 = v21;

            swift_beginAccess();
            unsigned char *v15 = 1;
            sub_1000E1CE0(v20, v22);
            id v23 = [a8 identity];
            if (v23)
            {
              uint64_t v24 = v23;
              id v25 = [v23 fileUTI];

              if (v25)
              {
                uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v28 = v27;
              }
              else
              {
                uint64_t v26 = 0;
                uint64_t v28 = 0;
              }
              swift_beginAccess();
              a6(v20, v22, v26, v28, *(unsigned __int8 *)(a9 + 16), 0);
              swift_bridgeObjectRelease();
              sub_1000E1938(v20, v22);
              sub_1000E1938(v20, v22);
            }
            else
            {
              __break(1u);
            }
            return;
          }
          id v29 = sub_1000D0C00(0xD00000000000001CLL, 0x80000001002095F0, 27);
        }
        else
        {
          id v29 = sub_1000D0C00(0xD000000000000020, 0x80000001002092F0, 27);
        }

        swift_beginAccess();
        *uint64_t v16 = v29;
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_1000D9DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, void, void, void, void, void), uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v53 = a8;
  uint64_t v55 = a7;
  id v56 = a2;
  uint64_t v14 = type metadata accessor for ResponseItem(0);
  uint64_t v51 = *(void *)(v14 - 8);
  __chkstk_darwin(v14 - 8);
  uint64_t v52 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ResourceDownloadResponse(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000D0514(&qword_1002CA470);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v50 - v23;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  id v25 = (unsigned char *)(a5 + 16);
  if (byte_1002CA368 == 1)
  {
    uint64_t v50 = a6;
    type metadata accessor for ResourceDownloadRequest(0);
    sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
    Message.debugDescription.getter();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_1000E200C(a1, (uint64_t)v24, &qword_1002CA470);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, v16) == 1)
    {
      sub_1000E27E8((uint64_t)v24, &qword_1002CA470);
      NSString v27 = 0;
    }
    else
    {
      sub_1000E1554(&qword_1002CA488, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
      Message.debugDescription.getter();
      sub_1000E26D8((uint64_t)v24, type metadata accessor for ResourceDownloadResponse);
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v28 = (void *)(a4 + 16);
    if (v56) {
      id v29 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      id v29 = 0;
    }
    swift_beginAccess();
    if (*v28)
    {
      swift_bridgeObjectRetain();
      v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v30.super.Class isa = 0;
    }
    a6 = v50;
    CPLTaskLogCKCodeRequestAndResponse(v26, v27, v29, v30.super.isa);
  }
  uint64_t result = swift_beginAccess();
  if ((*v25 & 1) == 0)
  {
    sub_1000E200C(a1, (uint64_t)v22, &qword_1002CA470);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v22, 1, v16) == 1)
    {
      sub_1000E27E8((uint64_t)v22, &qword_1002CA470);
      if (v56) {
        id v32 = v56;
      }
      else {
        id v32 = sub_1000D0C00(0xD00000000000002CLL, 0x8000000100209570, 150);
      }
      swift_errorRetain();
      a6(0, 0xF000000000000000, 0, 0, 0, v32);
      return swift_errorRelease();
    }
    uint64_t v33 = v54;
    sub_1000E2670((uint64_t)v22, v54, type metadata accessor for ResourceDownloadResponse);
    uint64_t v34 = *(void *)(v33 + 8);
    if (v34)
    {
      char v35 = *(unsigned char *)(v33 + 16);
      unint64_t v36 = *(void *)(v33 + 24);
      unint64_t v37 = *(void *)(v33 + 32);
      uint64_t v38 = (void (*)(void, unint64_t, void, void, void, id))a6;
      uint64_t v39 = *(void *)(v33 + 40);
      swift_bridgeObjectRetain();
      id v40 = sub_1000D1A9C(v34, v35, v36, v37, v39);
      swift_bridgeObjectRelease();
      v38(0, 0xF000000000000000, 0, 0, 0, v40);
    }
    else
    {
      uint64_t v41 = (id *)(v53 + 16);
      if (*(void *)(*(void *)v33 + 16))
      {
        uint64_t v42 = v52;
        sub_1000E2608(*(void *)v33 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80)), v52, type metadata accessor for ResponseItem);
        if (*(void *)(v42 + 96))
        {
          id v43 = (id)sub_1000967A4(a10);
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v46 = v45;

          id v47 = sub_1000D0D3C(v42, a9, v44, v46);
          swift_bridgeObjectRelease();
          swift_errorRetain();
          a6(0, 0xF000000000000000, 0, 0, 0, v47);
          swift_errorRelease();
        }
        else
        {
          swift_beginAccess();
          if (*v41)
          {
            id v49 = *v41;
          }
          else
          {
            if (v56) {
              id v49 = v56;
            }
            else {
              id v49 = sub_1000D0C00(0xD00000000000001BLL, 0x80000001002095A0, 150);
            }
            swift_errorRetain();
          }
          swift_errorRetain();
          a6(0, 0xF000000000000000, 0, 0, 0, v49);
        }
        swift_errorRelease();
        sub_1000E26D8(v42, type metadata accessor for ResponseItem);
        return sub_1000E26D8(v33, type metadata accessor for ResourceDownloadResponse);
      }
      swift_beginAccess();
      if (*v41)
      {
        id v48 = *v41;
      }
      else
      {
        if (v56) {
          id v48 = v56;
        }
        else {
          id v48 = sub_1000D0C00(0xD000000000000028, 0x80000001002095C0, 150);
        }
        swift_errorRetain();
      }
      swift_errorRetain();
      a6(0, 0xF000000000000000, 0, 0, 0, v48);
    }
    swift_errorRelease();
    return sub_1000E26D8(v33, type metadata accessor for ResourceDownloadResponse);
  }
  return result;
}

void sub_1000DA63C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, uint64_t a7)
{
  NSString v10 = a4;
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  Class isa = 0;
  if (a4) {
LABEL_5:
  }
    NSString v10 = String._bridgeToObjectiveC()();
LABEL_6:
  if (a6) {
    uint64_t v12 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = (id)v12;
  (*(void (**)(uint64_t, Class, NSString, void))(a7 + 16))(a7, isa, v10, a5 & 1);
}

uint64_t sub_1000DA710@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UploadResource(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSString v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0);
  __chkstk_darwin(v11);
  id v13 = (void **)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *id v13 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v24 = a2;
  uint64_t result = sub_1000E2844((uint64_t)v13, (uint64_t)a2, type metadata accessor for UploadResourcesRequest);
  if (!(a1 >> 62))
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v17 = &_swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v23 = v24;
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v23 = v17;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_15;
  }
LABEL_3:
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    unint64_t v25 = a1 & 0xC000000000000001;
    uint64_t v17 = &_swiftEmptyArrayStorage;
    unint64_t v18 = a1;
    do
    {
      if (v25) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(a1 + 8 * v16 + 32);
      }
      id v20 = v19;
      sub_1000DCB3C(v20, (uint64_t)v10);
      sub_1000E2608((uint64_t)v10, (uint64_t)v8, type metadata accessor for UploadResource);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = (void *)sub_1000DE544(0, v17[2] + 1, 1, v17, &qword_1002CA4C8, type metadata accessor for UploadResource);
      }
      unint64_t v22 = v17[2];
      unint64_t v21 = v17[3];
      if (v22 >= v21 >> 1) {
        uint64_t v17 = (void *)sub_1000DE544(v21 > 1, v22 + 1, 1, v17, &qword_1002CA4C8, type metadata accessor for UploadResource);
      }
      ++v16;
      v17[2] = v22 + 1;
      sub_1000E2670((uint64_t)v8, (uint64_t)v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v22, type metadata accessor for UploadResource);

      sub_1000E26D8((uint64_t)v10, type metadata accessor for UploadResource);
      a1 = v18;
    }
    while (v15 != v16);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000DAA5C(uint64_t a1, void *a2, void (*a3)(id, id))
{
  uint64_t v6 = sub_1000D0514(&qword_1002CA440);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UploadResourcesResponse(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v8, &qword_1002CA440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    sub_1000E2670((uint64_t)v8, (uint64_t)v12, type metadata accessor for UploadResourcesResponse);
    id v14 = [objc_allocWithZone((Class)CPLDerivativesFilter) init];
    unint64_t result = sub_1000DAD28();
    unint64_t v16 = result;
    if (result >> 62)
    {
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v17 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_6:
        if (v17 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v17; ++i)
        {
          if ((v16 & 0xC000000000000001) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(v16 + 8 * i + 32);
          }
          id v20 = v19;
          [v14 addServerDropDerivativesRecipe:v19];
        }
      }
    }
    swift_bridgeObjectRelease();
    id v21 = v14;
    a3(v14, 0);

    return sub_1000E26D8((uint64_t)v12, type metadata accessor for UploadResourcesResponse);
  }
  sub_1000E27E8((uint64_t)v8, &qword_1002CA440);
  if (a2) {
    id v13 = a2;
  }
  else {
    id v13 = sub_1000D0C00(0xD000000000000038, 0x8000000100209210, 150);
  }
  swift_errorRetain();
  a3(0, v13);
  return swift_errorRelease();
}

uint64_t sub_1000DAD28()
{
  uint64_t v1 = type metadata accessor for UploadResource(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = &_swiftEmptyArrayStorage;
  unint64_t v27 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v23 = *(void *)(v5 + 16);
  if (!v23) {
    return (uint64_t)v6;
  }
  uint64_t v22 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  uint64_t v20 = v2;
  uint64_t v21 = v5;
  while (v8 < *(void *)(v5 + 16))
  {
    uint64_t result = sub_1000E2608(v22 + *(void *)(v2 + 72) * v8, (uint64_t)v4, type metadata accessor for UploadResource);
    if ((v4[8] & 1) == 0 && (*(void *)v4 & 0x8000000000000000) != 0) {
      goto LABEL_19;
    }
    uint64_t v9 = *((void *)v4 + 2);
    uint64_t v10 = *((void *)v4 + 4);
    if ((v4[40] & 1) == 0 && v10 < 0) {
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)v4;
    uint64_t v11 = *((void *)v4 + 6);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v24 = v9;
      NSString v26 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_1000E18FC(0, &qword_1002CA4D0);
      id v13 = (Swift::Int *)(v11 + 32);
      do
      {
        Swift::Int v14 = *v13;
        v13 += 2;
        NSNumber.init(integerLiteral:)(v14);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v12;
      }
      while (v12);
      uint64_t v2 = v20;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    id v15 = objc_allocWithZone((Class)CPLDropDerivativesRecipe);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_1000E18FC(0, &qword_1002CA4D0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = [v15 initWithSourceResourceType:v10 uti:v16 changeType:v25 droppingDerivativeTypes:isa];

    id v19 = v18;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v8;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t result = sub_1000E26D8((uint64_t)v4, type metadata accessor for UploadResource);
    uint64_t v5 = v21;
    if (v8 == v23)
    {
      swift_bridgeObjectRelease();
      return v27;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void *static CPLCKResourceDownloadOperation.assetDownloadOperation(for:key:fingerPrint:downloadType:timeRange:completionBlock:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000E0CCC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000DB084(uint64_t *a1)
{
  sub_1000D0514(&qword_1002CA4B0);
  type metadata accessor for RequestItem(0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10024A2A0;
  sub_1000E1554(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  static Message.with(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000DB204(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v72 = a8;
  unint64_t v71 = a7;
  uint64_t v70 = a5;
  v69[2] = a4;
  v69[1] = a3;
  uint64_t v11 = type metadata accessor for CMTimeRange(0);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v21 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_100100A48(v22);
    swift_release();
    *(void *)(a1 + v21) = v23;
    swift_release();
  }
  uint64_t v24 = *(void *)(a1 + v21);
  swift_beginAccess();
  *(void *)(v24 + 16) = v18;
  *(void *)(v24 + 24) = v20;
  swift_bridgeObjectRelease();
  id v25 = [a2 recordName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v29 = swift_retain();
    uint64_t v30 = sub_100100A48(v29);
    swift_release();
    *(void *)(a1 + v21) = v30;
    swift_release();
  }
  uint64_t v31 = *(void *)(a1 + v21);
  swift_beginAccess();
  *(void *)(v31 + 32) = v26;
  *(void *)(v31 + 40) = v28;
  swift_bridgeObjectRelease();
  id v32 = [a2 zoneID];
  id v33 = [v32 zoneName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v37 = swift_retain();
    uint64_t v38 = sub_100100A48(v37);
    swift_release();
    *(void *)(a1 + v21) = v38;
    swift_release();
  }
  uint64_t v39 = *(void *)(a1 + v21);
  swift_beginAccess();
  *(void *)(v39 + 64) = v34;
  *(void *)(v39 + 72) = v36;
  swift_bridgeObjectRelease();
  id v40 = [v32 ownerName];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_15;
    }
    id v46 = [v32 ownerName];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v50 = swift_retain();
      uint64_t v51 = sub_100100A48(v50);
      swift_release();
      *(void *)(a1 + v21) = v51;
      swift_release();
    }
    uint64_t v52 = *(void *)(a1 + v21);
    swift_beginAccess();
    *(void *)(v52 + 80) = v47;
    *(void *)(v52 + 88) = v49;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  NSString v53 = String._bridgeToObjectiveC()();
  id v54 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v53);

  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v58 = swift_retain();
    uint64_t v59 = sub_100100A48(v58);
    swift_release();
    *(void *)(a1 + v21) = v59;
    swift_release();
  }
  uint64_t v60 = *(void *)(a1 + v21);
  swift_beginAccess();
  *(void *)(v60 + 112) = v55;
  *(void *)(v60 + 120) = v57;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v61 = swift_retain();
    uint64_t v62 = sub_100100A48(v61);
    swift_release();
    *(void *)(a1 + v21) = v62;
    swift_release();
  }
  uint64_t v63 = *(void *)(a1 + v21);
  swift_beginAccess();
  *(void *)(v63 + 48) = v70;
  *(void *)(v63 + 56) = a6;
  swift_bridgeObjectRelease();
  unint64_t v64 = v71;
  if (v71 >= 3)
  {
    type metadata accessor for CPLCKResourceDownloadType(0);
    unint64_t v73 = v64;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v65 = swift_retain();
      uint64_t v66 = sub_100100A48(v65);
      swift_release();
      *(void *)(a1 + v21) = v66;
      swift_release();
    }
    uint64_t v67 = *(void *)(a1 + v21);
    swift_beginAccess();
    *(void *)(v67 + 96) = v64;
    *(unsigned char *)(v67 + 104) = 1;
    uint64_t v68 = v72;
    if (CMTimeRange.isValid.getter())
    {
      sub_1000D20BC(v68, (uint64_t)v13);
      RequestItem.timeRange.setter((uint64_t)v13);
    }
  }
}

void *sub_1000DB860(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (char **)(a2 + 16);
    id v3 = [result requestUUID];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    swift_beginAccess();
    uint64_t v7 = *v2;
    if (*v2)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v2 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v7 = sub_1000DE348(0, *((void *)v7 + 2) + 1, 1, v7);
        void *v2 = v7;
      }
      unint64_t v10 = *((void *)v7 + 2);
      unint64_t v9 = *((void *)v7 + 3);
      if (v10 >= v9 >> 1)
      {
        uint64_t v7 = sub_1000DE348((char *)(v9 > 1), v10 + 1, 1, v7);
        void *v2 = v7;
      }
      *((void *)v7 + 2) = v10 + 1;
      uint64_t v11 = &v7[16 * v10];
      *((void *)v11 + 4) = v4;
      *((void *)v11 + 5) = v6;
    }
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DB968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v74 = a7;
  uint64_t v75 = a8;
  uint64_t v79 = a1;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v68 = *(void *)(v13 - 8);
  uint64_t v69 = v13;
  __chkstk_darwin(v13);
  uint64_t v66 = (char *)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CA408);
  __chkstk_darwin(v15 - 8);
  uint64_t v67 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000D0514(&qword_1002CA468);
  __chkstk_darwin(v17 - 8);
  uint64_t v73 = (uint64_t)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v71 = *(void *)(v19 - 8);
  uint64_t v72 = v19;
  __chkstk_darwin(v19);
  uint64_t v70 = (char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ResponseItem(0);
  uint64_t v76 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v77 = (uint64_t)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ResourceDownloadResponse(0);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v78 = (uint64_t)v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000D0514(&qword_1002CA470);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v29 = (char *)v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)v64 - v30;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  if (byte_1002CA368 == 1)
  {
    v64[1] = a6;
    uint64_t v65 = a5;
    type metadata accessor for ResourceDownloadRequest(0);
    sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
    Message.debugDescription.getter();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_1000E200C(v79, (uint64_t)v31, &qword_1002CA470);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v31, 1, v23) == 1)
    {
      sub_1000E27E8((uint64_t)v31, &qword_1002CA470);
      NSString v33 = 0;
      uint64_t v34 = (void *)(a4 + 16);
      if (a2)
      {
LABEL_6:
        uint64_t v35 = (void *)_convertErrorToNSError(_:)();
LABEL_9:
        swift_beginAccess();
        if (*v34)
        {
          swift_bridgeObjectRetain();
          v36.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v36.super.Class isa = 0;
        }
        CPLTaskLogCKCodeRequestAndResponse(v32, v33, v35, v36.super.isa);

        a5 = v65;
        goto LABEL_13;
      }
    }
    else
    {
      sub_1000E1554(&qword_1002CA488, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
      Message.debugDescription.getter();
      sub_1000E26D8((uint64_t)v31, type metadata accessor for ResourceDownloadResponse);
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v34 = (void *)(a4 + 16);
      if (a2) {
        goto LABEL_6;
      }
    }
    uint64_t v35 = 0;
    goto LABEL_9;
  }
LABEL_13:
  if (a2) {
    return a5(0, a2);
  }
  sub_1000E200C(v79, (uint64_t)v29, &qword_1002CA470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v29, 1, v23) == 1)
  {
    sub_1000E27E8((uint64_t)v29, &qword_1002CA470);
    id v38 = sub_1000D0C00(0xD000000000000022, 0x8000000100209290, 150);
    a5(0, v38);
    return swift_errorRelease();
  }
  uint64_t v39 = v78;
  sub_1000E2670((uint64_t)v29, v78, type metadata accessor for ResourceDownloadResponse);
  uint64_t v40 = *(void *)(v39 + 8);
  if (!v40)
  {
    if (!*(void *)(*(void *)v39 + 16))
    {
      id v46 = sub_1000D0C00(0xD00000000000001ELL, 0x8000000100209340, 150);
      goto LABEL_19;
    }
    uint64_t v47 = v77;
    sub_1000E2608(*(void *)v39 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80)), v77, type metadata accessor for ResponseItem);
    if (*(void *)(v47 + 96))
    {
      id v48 = sub_1000D0D3C(v47, v74, v75, a9);
LABEL_23:
      a5(0, v48);
      swift_errorRelease();
LABEL_24:
      sub_1000E26D8(v47, type metadata accessor for ResponseItem);
      return sub_1000E26D8(v39, type metadata accessor for ResourceDownloadResponse);
    }
    uint64_t v49 = v73;
    sub_1000E200C(v47 + *(int *)(v21 + 52), v73, &qword_1002CA468);
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v49, 1, v72) == 1)
    {
      Ckcode_RecordTransport.init()();
      sub_1000E27E8(v49, &qword_1002CA468);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v70, v49, v50);
    }
    sub_1000E18FC(0, &qword_1002CA478);
    uint64_t v52 = CKRecord.init(_:)();
    if (!v52)
    {
      id v48 = sub_1000D0C00(0xD000000000000022, 0x80000001002092C0, 25);
      goto LABEL_23;
    }
    NSString v53 = (void *)v52;
    sub_1000E18FC(0, &qword_1002CA480);
    CKRecordKeyValueSetting.subscript.getter();
    id v54 = v80;
    if (v80)
    {
      id v55 = [v80 fileURL];
      if (v55)
      {
        uint64_t v56 = v55;
        uint64_t v57 = v66;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v59 = (uint64_t)v67;
        uint64_t v58 = v68;
        uint64_t v60 = v69;
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v57, v69);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v60);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v60) != 1)
        {
          sub_1000E27E8(v59, &qword_1002CA408);
          id v61 = v54;
          a5(v54, 0);

LABEL_37:
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v59 = (uint64_t)v67;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v67, 1, 1, v69);
      }
      sub_1000E27E8(v59, &qword_1002CA408);
      id v63 = sub_1000D0C00(0xD00000000000001DLL, 0x8000000100209320, 27);
      a5(0, v63);

      swift_errorRelease();
      goto LABEL_24;
    }
    id v62 = sub_1000D0C00(0xD000000000000020, 0x80000001002092F0, 27);
    a5(0, v62);
    swift_errorRelease();
    goto LABEL_37;
  }
  char v41 = *(unsigned char *)(v39 + 16);
  unint64_t v42 = *(void *)(v39 + 24);
  unint64_t v43 = *(void *)(v39 + 32);
  uint64_t v44 = *(void *)(v39 + 40);
  swift_bridgeObjectRetain();
  id v45 = sub_1000D1A9C(v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease();
  id v46 = v45;
LABEL_19:
  a5(0, v46);
  swift_errorRelease();
  return sub_1000E26D8(v39, type metadata accessor for ResourceDownloadResponse);
}

void sub_1000DC4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000DC534(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, id))
{
  uint64_t v6 = sub_1000D0514(&qword_1002CA440);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UploadResourcesResponse(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v22 - v14;
  sub_1000E200C(a1, (uint64_t)v8, &qword_1002CA440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000E27E8((uint64_t)v8, &qword_1002CA440);
    if (a2) {
      id v16 = a2;
    }
    else {
      id v16 = sub_1000D0C00(0xD000000000000038, 0x8000000100209210, 150);
    }
    swift_errorRetain();
    a3(0, 0, v16);
    return swift_errorRelease();
  }
  else
  {
    sub_1000E2670((uint64_t)v8, (uint64_t)v15, type metadata accessor for UploadResourcesResponse);
    sub_1000E2608((uint64_t)v15, (uint64_t)v13, type metadata accessor for UploadResourcesResponse);
    v22[4] = String.init<A>(describing:)();
    void v22[5] = v17;
    v22[2] = 0xD000000000000017;
    v22[3] = 0x8000000100209250;
    v22[0] = 0;
    v22[1] = 0xE000000000000000;
    sub_1000E14D4();
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    a3(v18, v20, 0);
    swift_bridgeObjectRelease();
    return sub_1000E26D8((uint64_t)v15, type metadata accessor for UploadResourcesResponse);
  }
}

id sub_1000DC848(int a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  unint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v10 = (void *)a6(a5, v9);
  swift_release();
  return v10;
}

void sub_1000DC8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v6 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

id CPLCKResourceDownloadOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKResourceDownloadOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t static CKOperation.cplOperationClassDescription()()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall CKOperation.cplOperationClassDescription()()
{
  swift_getObjectType();
  sub_1000D0514(&qword_1002CA370);
  uint64_t v0 = String.init<A>(describing:)();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

unint64_t sub_1000DCB3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UploadResource(0);
  __chkstk_darwin(v4);
  NSString v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *(void *)NSString v6 = 0;
  v6[8] = 1;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0xE000000000000000;
  *((void *)v6 + 4) = 0;
  v6[40] = 1;
  *((void *)v6 + 6) = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  sub_1000E2844((uint64_t)v6, a2, type metadata accessor for UploadResource);
  unint64_t result = (unint64_t)[a1 changeType];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  id v8 = [a1 uti];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    swift_bridgeObjectRelease();
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v12;
  }
  unint64_t result = (unint64_t)[a1 sourceResourceType];
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_27;
  }
  sub_1001013FC();
  if ((v14 & 0x100) == 0)
  {
    *(void *)(a2 + 32) = v13;
    *(unsigned char *)(a2 + 40) = v14 & 1;
  }
  id v15 = [a1 derivativeTypes];
  if (v15)
  {
    id v16 = v15;
    sub_1000E18FC(0, &qword_1002CA4D0);
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v17 >> 62)) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v17 = (unint64_t)&_swiftEmptyArrayStorage;
    if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
    {
LABEL_9:
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18) {
        goto LABEL_10;
      }
LABEL_24:
      swift_bridgeObjectRelease();

      uint64_t v20 = &_swiftEmptyArrayStorage;
LABEL_25:
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(a2 + 48) = v20;
      return result;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_24;
  }
LABEL_10:
  uint64_t v34 = &_swiftEmptyArrayStorage;
  unint64_t result = (unint64_t)sub_100148344(0, v18 & ~(v18 >> 63), 0);
  if ((v18 & 0x8000000000000000) == 0)
  {
    id v32 = a1;
    uint64_t v33 = a2;
    uint64_t v19 = 0;
    uint64_t v20 = v34;
    do
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v17 + 8 * v19 + 32);
      }
      uint64_t v22 = v21;
      [v21 integerValue];
      sub_1001013FC();
      uint64_t v24 = v23;
      __int16 v26 = v25;

      if ((v26 & 0x100) != 0) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v24;
      }
      uint64_t v34 = v20;
      unint64_t v29 = v20[2];
      unint64_t v28 = v20[3];
      if (v29 >= v28 >> 1)
      {
        sub_100148344((char *)(v28 > 1), v29 + 1, 1);
        uint64_t v20 = v34;
      }
      ++v19;
      void v20[2] = v29 + 1;
      uint64_t v30 = &v20[2 * v29];
      v30[4] = v27;
      *((unsigned char *)v30 + 40) = (v26 & 0x101) != 0;
    }
    while (v18 != v19);
    swift_bridgeObjectRelease();

    a2 = v33;
    goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000DCE8C(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_1000DD6E8(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000DCFAC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int16 v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000DD838(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000DD15C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D0514(&qword_1002CA4F0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    Swift::Int v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000DD408()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D0514(&qword_1002CA548);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_1000DD6E8(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000DD15C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_1000DD9D4();
      goto LABEL_14;
    }
    sub_1000DDD20();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for CPLResourceType(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_1000DD838(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::UInt v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000DD408();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000DDB6C();
      goto LABEL_22;
    }
    sub_1000DDF9C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1000DD9D4()
{
  uint64_t v1 = v0;
  sub_1000D0514(&qword_1002CA4F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000DDB6C()
{
  uint64_t v1 = v0;
  sub_1000D0514(&qword_1002CA548);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000DDD20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D0514(&qword_1002CA4F0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000DDF9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D0514(&qword_1002CA548);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

char *sub_1000DE24C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D0514(&qword_1002CA4F8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000DE348(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D0514(&qword_1002CA460);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000DE44C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D0514(&qword_1002CA540);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1000DE544(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    int64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000D0514(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  int64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

uint64_t sub_1000DE720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001466B8(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100147B00();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1000DE8C8(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000DE7F0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100146730(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100147CB4();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1000DEAA0(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1000DE8C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000DEAA0(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *unint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            BOOL v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_1000DEC54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for CPLResourceType(0);
  sub_1000E1554(&qword_1002CA4E8, type metadata accessor for CPLResourceType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      sub_1000DCE8C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

Swift::Int sub_1000DED00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000D0514(&qword_1002CA4F0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1000DEE44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v127 = a8;
  uint64_t v130 = a7;
  uint64_t v129 = a6;
  uint64_t v123 = a5;
  uint64_t v122 = a4;
  uint64_t v141 = a3;
  uint64_t v120 = type metadata accessor for ResourceDownloadRequest(0);
  uint64_t v124 = *(void *)(v120 - 8);
  uint64_t v11 = __chkstk_darwin(v120);
  uint64_t v126 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = v12;
  __chkstk_darwin(v11);
  uint64_t v132 = (uint64_t)&v119 - v13;
  uint64_t v140 = type metadata accessor for RequestItem(0);
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v14 = __chkstk_darwin(v140);
  uint64_t v16 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v148 = (uint64_t)&v119 - v17;
  unint64_t v18 = a1 & 0xC000000000000001;
  unint64_t v131 = a1;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v19 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v19 = *(void *)(a1 + 16);
  }
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = sub_1000E18FC(0, &qword_1002CA410);
  sub_1000E13E8();
  uint64_t v22 = Dictionary.init(minimumCapacity:)();
  uint64_t v145 = v20;
  *(void *)(v20 + 16) = v22;
  uint64_t v23 = swift_allocObject();
  uint64_t v134 = v21;
  uint64_t v24 = Dictionary.init(minimumCapacity:)();
  uint64_t v144 = v23;
  *(void *)(v23 + 16) = v24;
  uint64_t v25 = swift_allocObject();
  type metadata accessor for ResponseItem(0);
  uint64_t v26 = Dictionary.init(minimumCapacity:)();
  uint64_t v128 = v25;
  *(void *)(v25 + 16) = v26;
  size_t v155 = sub_1000DE544(0, v19 & ~(v19 >> 63), 0, &_swiftEmptyArrayStorage, &qword_1002CA4B0, type metadata accessor for RequestItem);
  id v27 = (id)sub_1000967A4(a2);
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v142 = v29;
  uint64_t v143 = v28;

  uint64_t v154 = Set.init(minimumCapacity:)();
  if (v18)
  {
    uint64_t v30 = (void *)v131;
    uint64_t v31 = __CocoaDictionary.makeIterator()();
    unint64_t v137 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    unint64_t v34 = v31 | 0x8000000000000000;
  }
  else
  {
    uint64_t v30 = (void *)v131;
    uint64_t v35 = -1 << *(unsigned char *)(v131 + 32);
    uint64_t v32 = ~v35;
    uint64_t v36 = *(void *)(v131 + 64);
    unint64_t v137 = v131 + 64;
    uint64_t v37 = -v35;
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v33 = v38 & v36;
    unint64_t v34 = v131;
  }
  uint64_t v121 = a9;
  swift_bridgeObjectRetain();
  int64_t v39 = 0;
  uint64_t v149 = 0;
  uint64_t v135 = v34 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v136 = (unint64_t)(v32 + 64) >> 6;
  uint64_t v133 = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v138 = v16;
  unint64_t v146 = v34;
  if ((v34 & 0x8000000000000000) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v40 = __CocoaDictionary.Iterator.next()();
  if (!v40) {
    goto LABEL_44;
  }
  uint64_t v42 = v41;
  uint64_t v152 = v40;
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v43 = (id)aBlock[0];
  swift_unknownObjectRelease();
  uint64_t v152 = v42;
  sub_1000E18FC(0, &qword_1002CA418);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v44 = (id)aBlock[0];
  swift_unknownObjectRelease();
  int64_t v45 = v39;
  uint64_t v46 = v33;
  if (!v43) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v151 = (void *)v46;
    id v52 = v44;
    uint64_t v19 = (uint64_t)v43;
    id v53 = [v52 taskIdentifier];
    Swift::Int v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;

    Swift::Int v57 = sub_1000D2340(v54, v56, &v154);
    uint64_t v30 = v58;
    swift_bridgeObjectRelease();
    id v59 = [v52 cloudResource];
    if (!v59)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return;
    }
    uint64_t v60 = v59;
    int64_t v150 = v45;
    id v61 = [v59 identity];
    if (!v61) {
      goto LABEL_51;
    }
    id v62 = v61;
    id v63 = [v61 fingerPrint];

    if (!v63) {
      goto LABEL_52;
    }
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    id v67 = [v52 cloudRecord];
    if (v67)
    {
      id v68 = (id)v19;
      swift_bridgeObjectRetain();
      uint64_t v69 = v145;
      uint64_t v70 = *(void *)(v145 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v70;
      uint64_t v147 = v64;
      *(void *)(v69 + 16) = 0x8000000000000000;
      sub_1001477BC(v57, (uint64_t)v30, v68, isUniquelyReferenced_nonNull_native);
      *(void *)(v69 + 16) = aBlock[0];

      swift_bridgeObjectRelease();
      id v72 = v68;
      swift_bridgeObjectRetain();
      uint64_t v73 = v144;
      uint64_t v74 = *(void *)(v144 + 16);
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v74;
      *(void *)(v73 + 16) = 0x8000000000000000;
      sub_10014764C((uint64_t)v72, v57, (uint64_t)v30, v75);
      *(void *)(v73 + 16) = aBlock[0];
      swift_bridgeObjectRelease();
      uint64_t v76 = swift_bridgeObjectRelease();
      __chkstk_darwin(v76);
      *(&v119 - 12) = v57;
      *(&v119 - 11) = (uint64_t)v30;
      uint64_t v77 = v147;
      *(&v119 - 10) = (uint64_t)v72;
      *(&v119 - 9) = v77;
      *(&v119 - 8) = v66;
      *((unsigned char *)&v119 - 56) = 1;
      uint64_t v78 = v143;
      *(&v119 - 6) = (uint64_t)v52;
      *(&v119 - 5) = v78;
      uint64_t v79 = v141;
      *(&v119 - 4) = v142;
      *(&v119 - 3) = v79;
      *(&v119 - 2) = (uint64_t)v60;
      sub_1000E1554(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
      uint64_t v81 = v148;
      uint64_t v80 = v149;
      static Message.with(_:)();
      uint64_t v149 = v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = (uint64_t)v138;
      sub_1000E2608(v81, (uint64_t)v138, type metadata accessor for RequestItem);
      uint64_t v30 = (void *)v155;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = (void *)sub_1000DE544(0, v30[2] + 1, 1, v30, &qword_1002CA4B0, type metadata accessor for RequestItem);
      }
      unint64_t v84 = v30[2];
      unint64_t v83 = v30[3];
      uint64_t v19 = v84 + 1;
      unint64_t v34 = v146;
      unint64_t v85 = (unint64_t)v151;
      if (v84 >= v83 >> 1) {
        uint64_t v30 = (void *)sub_1000DE544(v83 > 1, v84 + 1, 1, v30, &qword_1002CA4B0, type metadata accessor for RequestItem);
      }
      v30[2] = v19;
      sub_1000E2670(v82, (uint64_t)v30+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * v84, type metadata accessor for RequestItem);

      size_t v155 = (size_t)v30;
      sub_1000E26D8(v148, type metadata accessor for RequestItem);
      int64_t v39 = v150;
      unint64_t v33 = v85;
      if ((v34 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      int64_t v39 = v150;
      unint64_t v33 = (unint64_t)v151;
      unint64_t v34 = v146;
      if ((v146 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
    }
LABEL_14:
    if (!v33) {
      break;
    }
    uint64_t v46 = (v33 - 1) & v33;
    unint64_t v47 = __clz(__rbit64(v33)) | (v39 << 6);
    int64_t v45 = v39;
LABEL_25:
    uint64_t v50 = 8 * v47;
    uint64_t v51 = *(void **)(*(void *)(v34 + 56) + v50);
    id v43 = *(id *)(*(void *)(v34 + 48) + v50);
    id v44 = v51;
    if (!v43) {
      goto LABEL_44;
    }
  }
  int64_t v45 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v45 >= v136) {
    goto LABEL_44;
  }
  unint64_t v48 = *(void *)(v137 + 8 * v45);
  if (v48)
  {
LABEL_24:
    uint64_t v46 = (v48 - 1) & v48;
    unint64_t v47 = __clz(__rbit64(v48)) + (v45 << 6);
    goto LABEL_25;
  }
  int64_t v49 = v39 + 2;
  if (v39 + 2 >= v136) {
    goto LABEL_44;
  }
  unint64_t v48 = *(void *)(v137 + 8 * v49);
  if (v48) {
    goto LABEL_23;
  }
  int64_t v49 = v39 + 3;
  if (v39 + 3 >= v136) {
    goto LABEL_44;
  }
  unint64_t v48 = *(void *)(v137 + 8 * v49);
  if (v48)
  {
LABEL_23:
    int64_t v45 = v49;
    goto LABEL_24;
  }
  int64_t v45 = v39 + 4;
  if (v39 + 4 >= v136) {
    goto LABEL_44;
  }
  unint64_t v48 = *(void *)(v137 + 8 * v45);
  if (v48) {
    goto LABEL_24;
  }
  int64_t v86 = v39 + 5;
  while (v136 != v86)
  {
    unint64_t v48 = *(void *)(v137 + 8 * v86++);
    if (v48)
    {
      int64_t v45 = v86 - 1;
      goto LABEL_24;
    }
  }
LABEL_44:
  uint64_t v87 = sub_1000E2194();
  __chkstk_darwin(v87);
  *(&v119 - 2) = (uint64_t)&v155;
  sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  uint64_t v88 = v132;
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_1000D2558(v88);
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = 0;
  if (qword_1002C9C20 != -1) {
LABEL_49:
  }
    swift_once();
  if (byte_1002CA368 == 1)
  {
    v30[2] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1000E17FC;
    aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D34F4;
    aBlock[3] = &unk_10027C440;
    uint64_t v89 = _Block_copy(aBlock);
    id v90 = (id)v19;
    swift_retain();
    swift_release();
    [v90 setRequestCompletedBlock:v89];
    _Block_release(v89);
  }
  uint64_t v91 = (void *)swift_allocObject();
  uint64_t v92 = v144;
  uint64_t v93 = v145;
  uint64_t v94 = v129;
  v91[2] = v144;
  v91[3] = v94;
  uint64_t v95 = v94;
  uint64_t v96 = v130;
  uint64_t v98 = v142;
  uint64_t v97 = v143;
  v91[4] = v130;
  v91[5] = v97;
  v91[6] = v98;
  v91[7] = v93;
  uint64_t v99 = v128;
  v91[8] = v128;
  uint64_t v100 = v92;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter();
  char v101 = (void *)swift_allocObject();
  uint64_t v102 = v122;
  v101[2] = v93;
  v101[3] = v102;
  uint64_t v151 = v30;
  v101[4] = v123;
  swift_retain();
  swift_retain();
  dispatch thunk of CodeOperation.perRecordProgressBlock.setter();
  uint64_t v103 = (void *)swift_allocObject();
  v103[2] = v93;
  v103[3] = v100;
  v103[4] = v95;
  v103[5] = v96;
  v103[6] = v99;
  v103[7] = v131;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of CodeOperation.perRecordCompletionBlock.setter();
  uint64_t v104 = v126;
  sub_1000E2608(v132, v126, type metadata accessor for ResourceDownloadRequest);
  unint64_t v105 = (*(unsigned __int8 *)(v124 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
  unint64_t v106 = (v125 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v107 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v108 = (v107 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v109 = (v108 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v110 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v111 = swift_allocObject();
  sub_1000E2670(v104, v111 + v105, type metadata accessor for ResourceDownloadRequest);
  *(void *)(v111 + v106) = v151;
  uint64_t v112 = (void *)(v111 + v107);
  uint64_t v113 = v121;
  void *v112 = v127;
  v112[1] = v113;
  uint64_t v114 = v144;
  *(void *)(v111 + v108) = v145;
  *(void *)(v111 + v109) = v114;
  uint64_t v115 = (uint64_t *)(v111 + v110);
  uint64_t v116 = v142;
  uint64_t *v115 = v143;
  v115[1] = v116;
  char v117 = (void *)(v111 + ((v110 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v118 = v130;
  void *v117 = v129;
  v117[1] = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8(v132, type metadata accessor for ResourceDownloadRequest);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
}

void *sub_1000DFD24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000D0514(&qword_1002CA578);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      Swift::Int result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        Swift::Int result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          Swift::Int result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000DFF54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v51 = a8;
  uint64_t v57 = a6;
  uint64_t v58 = (char *)a7;
  uint64_t v54 = a5;
  uint64_t v49 = a4;
  uint64_t v13 = sub_1000D0514(&qword_1002CA500);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000D0514(&qword_1002CA508);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ResourceStreamRequest(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v52 = (uint64_t)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v47 - v24;
  unint64_t v55 = a1;
  uint64_t v56 = a3;
  id v59 = a1;
  uint64_t v60 = a2;
  uint64_t v53 = a2;
  uint64_t v61 = a3;
  uint64_t v62 = v49;
  uint64_t v63 = v51;
  uint64_t v64 = (uint64_t)v58;
  sub_1000E1554(&qword_1002CA510, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
  static Message.with(_:)();
  uint64_t v58 = v25;
  sub_1000E2608((uint64_t)v25, (uint64_t)v19, type metadata accessor for ResourceStreamRequest);
  uint64_t v51 = v21;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v13);
  id v26 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CA518));
  char v27 = (void *)CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  uint64_t v49 = a10;
  uint64_t v48 = a9;
  if (byte_1002CA368 == 1)
  {
    *(void *)(v28 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1000E17FC;
    aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D34F4;
    aBlock[3] = &unk_10027C300;
    BOOL v29 = _Block_copy(aBlock);
    id v30 = v27;
    swift_retain();
    swift_release();
    [v30 setRequestCompletedBlock:v29];
    _Block_release(v29);
  }
  uint64_t v31 = v52;
  sub_1000E2608((uint64_t)v58, v52, type metadata accessor for ResourceStreamRequest);
  unint64_t v32 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  unint64_t v33 = (v50 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  sub_1000E2670(v31, v37 + v32, type metadata accessor for ResourceStreamRequest);
  *(void *)(v37 + v33) = v28;
  uint64_t v38 = (void *)(v37 + v34);
  uint64_t v39 = v49;
  *uint64_t v38 = v48;
  v38[1] = v39;
  uint64_t v41 = v55;
  uint64_t v40 = v56;
  *(void *)(v37 + v35) = v55;
  uint64_t v42 = (void *)(v37 + v36);
  *uint64_t v42 = v53;
  v42[1] = v40;
  id v43 = (void *)(v37 + ((v36 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v44 = v57;
  *id v43 = v54;
  v43[1] = v44;
  swift_retain();
  swift_retain();
  id v45 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8((uint64_t)v58, type metadata accessor for ResourceStreamRequest);
  swift_release();
  return v27;
}

void *_s22CloudKitImplementation30CPLCKResourceDownloadOperationC08inMemoryeF03for8resource6record4keys12downloadType15completionBlockSo010CKDatabaseF0CSo10CKRecordIDC_So11CPLResourceCSo20CPLPlaceholderRecordCSo08CPLCloudB12ResourceKeysCSo0deN0Vy10Foundation4DataVSg_SSSgSbs5Error_pSgtctFZ_0(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = a6;
  uint64_t v13 = type metadata accessor for ResourceDownloadRequest(0);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v48 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v49 = (uint64_t)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v50 = a1;
  uint64_t v51 = a4;
  uint64_t v54 = a1;
  unint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  static Message.with(_:)();
  uint64_t v52 = v17;
  uint64_t v18 = (void *)sub_1000D2558((uint64_t)v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  if (byte_1002CA368 == 1)
  {
    *(void *)(v19 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1000E17FC;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D34F4;
    aBlock[3] = &unk_10027C2B0;
    uint64_t v20 = _Block_copy(aBlock);
    id v21 = v18;
    swift_retain();
    swift_release();
    [v21 setRequestCompletedBlock:v20];
    _Block_release(v20);
  }
  dispatch thunk of CodeOperation.shouldFetchAssetContentInMemory.setter();
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = 0;
  uint64_t v23 = v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 0;
  swift_retain();
  uint64_t v46 = v18;
  dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter();
  id v26 = (void *)swift_allocObject();
  uint64_t v45 = v23;
  v26[2] = v23;
  v26[3] = v24;
  uint64_t v44 = v24;
  void v26[4] = v53;
  v26[5] = a7;
  v26[6] = a2;
  v26[7] = v25;
  uint64_t v47 = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v27 = a2;
  dispatch thunk of CodeOperation.perRecordCompletionBlock.setter();
  uint64_t v28 = v49;
  sub_1000E2608((uint64_t)v52, v49, type metadata accessor for ResourceDownloadRequest);
  unint64_t v29 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  unint64_t v30 = (v14 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = v19;
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = a7;
  unint64_t v33 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = swift_allocObject();
  sub_1000E2670(v28, v36 + v29, type metadata accessor for ResourceDownloadRequest);
  *(void *)(v36 + v30) = v48;
  *(void *)(v36 + v31) = v45;
  uint64_t v37 = (void *)(v36 + v33);
  *uint64_t v37 = v53;
  v37[1] = v32;
  *(void *)(v36 + v34) = v44;
  uint64_t v39 = v50;
  uint64_t v38 = v51;
  *(void *)(v36 + v35) = v50;
  *(void *)(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8)) = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v40 = v39;
  id v41 = v38;
  uint64_t v42 = v46;
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8((uint64_t)v52, type metadata accessor for ResourceDownloadRequest);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v42;
}

uint64_t _s22CloudKitImplementation30CPLCKResourceDownloadOperationC35fetchDerivativesUploadConfiguration15completionBlockSo010CKDatabaseF0CySo20CPLDerivativesFilterCSg_s5Error_pSgtc_tFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CA428);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CA430);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = sub_1000D2834();
  if (v15)
  {
    sub_1000DA710((unint64_t)v15, v14);
  }
  else
  {
    *uint64_t v14 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
  }
  sub_1000E2608((uint64_t)v14, (uint64_t)v10, type metadata accessor for UploadResourcesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v4);
  id v16 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CA438));
  uint64_t v17 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8((uint64_t)v14, type metadata accessor for UploadResourcesRequest);
  return v17;
}

void *sub_1000E0CCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a8;
  uint64_t v16 = type metadata accessor for ResourceDownloadRequest(0);
  uint64_t v40 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v40 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v41 = (uint64_t)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v44 = a1;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a2;
  uint64_t v42 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  sub_1000E1554(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  static Message.with(_:)();
  id v21 = (void *)sub_1000D2558((uint64_t)v20);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  if (qword_1002C9C20 != -1) {
    swift_once();
  }
  uint64_t v39 = a9;
  if (byte_1002CA368 == 1)
  {
    *(void *)(v22 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1000E17FC;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D34F4;
    aBlock[3] = &unk_10027C1C0;
    uint64_t v23 = _Block_copy(aBlock);
    id v24 = v21;
    swift_retain();
    swift_release();
    [v24 setRequestCompletedBlock:v23];
    _Block_release(v23);
  }
  uint64_t v25 = v41;
  sub_1000E2608((uint64_t)v20, v41, type metadata accessor for ResourceDownloadRequest);
  unint64_t v26 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  unint64_t v27 = (v17 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = swift_allocObject();
  sub_1000E2670(v25, v30 + v26, type metadata accessor for ResourceDownloadRequest);
  *(void *)(v30 + v27) = v22;
  unint64_t v31 = (void *)(v30 + v28);
  uint64_t v32 = v44;
  uint64_t v33 = v39;
  *unint64_t v31 = v43;
  v31[1] = v33;
  *(void *)(v30 + v29) = v32;
  unint64_t v34 = (void *)(v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v35 = v45;
  void *v34 = v42;
  v34[1] = v35;
  swift_retain();
  swift_retain();
  id v36 = v32;
  swift_bridgeObjectRetain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8((uint64_t)v20, type metadata accessor for ResourceDownloadRequest);
  swift_release();
  return v21;
}

uint64_t _s22CloudKitImplementation30CPLCKResourceDownloadOperationC38fetchRawDerivativesUploadConfiguration15completionBlockSo010CKDatabaseF0CySSSg_s5Error_pSgtc_tFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CA428);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CA430);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v14 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  sub_1000E2608((uint64_t)v14, (uint64_t)v10, type metadata accessor for UploadResourcesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v4);
  id v15 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CA438));
  uint64_t v16 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_1000E26D8((uint64_t)v14, type metadata accessor for UploadResourcesRequest);
  return v16;
}

uint64_t type metadata accessor for CPLCKResourceDownloadOperation()
{
  return self;
}

uint64_t sub_1000E137C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E13B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC8CC(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_1000E13BC(uint64_t a1, uint64_t a2)
{
  sub_1000DC4C0(a1, a2, *(void *)(v2 + 16));
}

void sub_1000E13D8(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6)
{
  sub_1000DA63C(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16));
}

void sub_1000E13E0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1000D8C78(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t sub_1000E13E8()
{
  unint64_t result = qword_1002CA420;
  if (!qword_1002CA420)
  {
    sub_1000E18FC(255, &qword_1002CA410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA420);
  }
  return result;
}

uint64_t sub_1000E1450()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_1000E1464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D64D8(a1, a2, a3, a4, a5, a6, a7, a8, *(void *)(v8 + 16));
}

void sub_1000E148C(uint64_t a1)
{
  sub_1000D65C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000E1494()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E14CC(uint64_t a1, void *a2)
{
  return sub_1000DC534(a1, a2, *(void (**)(uint64_t, uint64_t, id))(v2 + 16));
}

unint64_t sub_1000E14D4()
{
  unint64_t result = qword_1002CA448;
  if (!qword_1002CA448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA448);
  }
  return result;
}

uint64_t sub_1000E1528(uint64_t a1)
{
  return sub_1000E18C4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000DB084);
}

uint64_t sub_1000E1554(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E159C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E15D4()
{
  uint64_t v1 = (int *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_1000E1724(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000DB968(a1, a2, v2 + v6, *(void *)(v2 + v7), *(uint64_t (**)(void, void))(v2 + v8), *(void *)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void *sub_1000E17FC(void *a1)
{
  return sub_1000DB860(a1, v1);
}

uint64_t sub_1000E1818(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E1828()
{
  return swift_release();
}

uint64_t *sub_1000E1834(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000E1898(uint64_t a1)
{
  return sub_1000E18C4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000DB204);
}

uint64_t sub_1000E18C4(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

unint64_t sub_1000E18F4(uint64_t a1, void *a2)
{
  return sub_1000DAA5C(a1, a2, *(void (**)(id, id))(v2 + 16));
}

uint64_t sub_1000E18FC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000E1938(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1000E1990(uint64_t a1)
{
  return sub_1000E1D64(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000D8EC0);
}

uint64_t sub_1000E19BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E19CC()
{
  swift_errorRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E1A04(uint64_t a1)
{
  return sub_1000D9800(a1, v1);
}

uint64_t sub_1000E1A0C()
{
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000E1A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2314(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1000D9B04);
}

uint64_t sub_1000E1A7C()
{
  uint64_t v1 = (int *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = v2 | 7;
  unint64_t v4 = (((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v10);
}

uint64_t sub_1000E1BF4(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D9DEC(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void (**)(void, void, void, void, void, void))(v2 + v9), *(void *)(v2 + v9 + 8), *(void *)(v2 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000E1CE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1000E1D38(uint64_t a1)
{
  return sub_1000E1D64(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000D9030);
}

uint64_t sub_1000E1D64(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1000E1D90(uint64_t a1)
{
  return sub_1000E209C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000D6630);
}

uint64_t sub_1000E1DBC()
{
  uint64_t v1 = (int *)(type metadata accessor for ResourceStreamRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_1000E1F20(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceStreamRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D7924(a1, a2, v2 + v6, *(char **)(v2 + v7), *(void (**)(void, void, void))(v2 + v8), *(void *)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2+ ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000E200C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000D0514(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E2070(uint64_t a1)
{
  return sub_1000E209C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000D67A8);
}

uint64_t sub_1000E209C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1000E20C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1000E2124(_DWORD *a1)
{
  uint64_t v3 = (void *)v1[2];
  uint64_t v4 = (void *)v1[3];
  uint64_t v5 = (void *)v1[4];
  *a1 = [v3 unsignedIntValue];
  a1[1] = [v4 unsignedIntValue];
  id result = [v5 unsignedIntValue];
  a1[2] = result;
  return result;
}

uint64_t sub_1000E2194()
{
  return swift_release();
}

uint64_t sub_1000E219C(void *a1)
{
  uint64_t v3 = **(void **)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_1000E21EC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000E2244(uint64_t a1)
{
  return sub_1000D3560(a1, *(void *)(v1 + 16), *(void (**)(void, void, void, void, void, id, void, id))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1000E2258()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E2298(void *a1, double a2)
{
  return sub_1000D3D44(a1, *(void *)(v2 + 16), *(uint64_t (**)(id, double))(v2 + 24), a2);
}

uint64_t sub_1000E22A4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000E22FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2314(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1000D3DEC);
}

uint64_t sub_1000E2314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t sub_1000E234C()
{
  uint64_t v1 = (int *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = v2 | 7;
  unint64_t v4 = (((((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + v1[7];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, v4 + 16, v9);
}

uint64_t sub_1000E24CC(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D4EDC(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void (**)(void))(v2 + v8), *(void *)(v2 + v8 + 8), *(void *)(v2 + v9), *(void *)(v2 + v10), *(void *)(v2 + v11), *(void **)(v2 + v11 + 8), *(void (**)(void, void, void, void, void, id, void, id, uint64_t))(v2+ ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_1000E25C4(uint64_t a1)
{
  sub_1000D2A20(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void **)(v1 + 96));
}

uint64_t sub_1000E2608(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E2670(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E26D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000E2738()
{
  unint64_t result = qword_1002CA558;
  if (!qword_1002CA558)
  {
    sub_1000CEB94(&qword_1002CA550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA558);
  }
  return result;
}

unint64_t sub_1000E2794()
{
  unint64_t result = qword_1002CA560;
  if (!qword_1002CA560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA560);
  }
  return result;
}

uint64_t sub_1000E27E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000D0514(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000E2844(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.items.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t Utility_DeleteAllZonesResponse.batchError.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Utility_DeleteAllZonesResponse.batchError.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*CMTime.timescale.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteAllZonesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E68(type metadata accessor for Utility_DeleteAllZonesResponse, a1);
}

uint64_t type metadata accessor for Utility_DeleteAllZonesResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA7D8);
}

uint64_t Utility_DeleteAllZonesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000E3F00(a1, type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t (*Utility_DeleteAllZonesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteAllZonesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  type metadata accessor for Utility_DeleteAllZonesResponse(0);
  return UnknownStorage.init()();
}

uint64_t Utility_DeleteZoneRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E31D4(type metadata accessor for Utility_DeleteZoneRequest, a1);
}

uint64_t type metadata accessor for Utility_DeleteZoneRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA870);
}

uint64_t Utility_DeleteZoneRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000E326C(a1, type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t (*Utility_DeleteZoneRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteZoneRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for Utility_DeleteZoneRequest(0);
  return UnknownStorage.init()();
}

uint64_t Utility_DeleteZoneResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CA580);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Utility_DeleteZoneResponse(0);
  sub_1000E200C(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1002CA580);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000E9404((uint64_t)v5, a1, type metadata accessor for Utility_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CA580);
}

uint64_t Utility_ErrorInfo.ResultError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t type metadata accessor for Utility_DeleteZoneResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CA900);
}

uint64_t type metadata accessor for Utility_ErrorInfo.ResultError(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CAAD0);
}

uint64_t type metadata accessor for Utility_ErrorInfo.DatabaseFailure(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CAA30);
}

uint64_t Utility_DeleteZoneResponse.error.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0) + 24);
  sub_1000E27E8(v3, &qword_1002CA580);
  sub_1000E9404(a1, v3, type metadata accessor for Utility_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Utility_DeleteZoneResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CA580);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  unint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CA580);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CA580);
  }
  else
  {
    sub_1000E9404((uint64_t)v5, (uint64_t)v10, type metadata accessor for Utility_ErrorInfo.ResultError);
  }
  return sub_1000E3030;
}

void sub_1000E3030(uint64_t a1, char a2)
{
}

BOOL Utility_DeleteZoneResponse.hasError.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CA580);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Utility_DeleteZoneResponse(0);
  sub_1000E200C(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1002CA580);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CA580);
  return v6;
}

Swift::Void __swiftcall Utility_DeleteZoneResponse.clearError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0) + 24);
  sub_1000E27E8(v1, &qword_1002CA580);
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Utility_DeleteZoneResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E31D4(type metadata accessor for Utility_DeleteZoneResponse, a1);
}

uint64_t sub_1000E31D4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Utility_DeleteZoneResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000E326C(a1, type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E326C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Utility_DeleteZoneResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteZoneResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Utility_DeleteZoneResponse(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t RequestItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t RequestItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t Utility_ErrorInfo.ResultErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000E355C(a1, (uint64_t (*)(void))sub_1000E93DC);
}

uint64_t sub_1000E34AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E359C((uint64_t (*)(void))sub_1000E93DC, a1);
}

uint64_t sub_1000E34C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E35F4(a1, (uint64_t (*)(void))sub_1000E93DC, a2);
}

uint64_t sub_1000E34DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E9630();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000E3528(uint64_t a1, uint64_t *a2)
{
  return sub_1000D0734(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t Utility_ErrorInfo.BatchErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000E355C(a1, (uint64_t (*)(void))sub_1000E93F0);
}

uint64_t sub_1000E355C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000E3584@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E359C((uint64_t (*)(void))sub_1000E93F0, a1);
}

uint64_t sub_1000E359C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t CMTime.value.getter()
{
  return *(void *)v0;
}

uint64_t sub_1000E35DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E35F4(a1, (uint64_t (*)(void))sub_1000E93F0, a2);
}

uint64_t sub_1000E35F4@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_1000E3630(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E95BC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Utility_ErrorInfo.DatabaseFailure.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_ErrorInfo.DatabaseFailure.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  return UnknownStorage.init()();
}

uint64_t Utility_ErrorInfo.ResultError.databaseFailure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CA588);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  sub_1000E200C(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1002CA588);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000E9404((uint64_t)v5, a1, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CA588);
}

uint64_t Utility_ErrorInfo.ResultError.databaseFailure.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0) + 28);
  sub_1000E27E8(v3, &qword_1002CA588);
  sub_1000E9404(a1, v3, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  char v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Utility_ErrorInfo.ResultError.databaseFailure.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CA588);
  char v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  unint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CA588);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    void v10[4] = 0;
    *((unsigned char *)v10 + 40) = 1;
    v10[6] = 0;
    *((unsigned char *)v10 + 56) = 1;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CA588);
  }
  else
  {
    sub_1000E9404((uint64_t)v5, (uint64_t)v10, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  }
  return sub_1000E3BA0;
}

void sub_1000E3BA0(uint64_t a1, char a2)
{
}

void sub_1000E3BC0(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    sub_1000E946C(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    sub_1000E27E8(v13, a3);
    sub_1000E9404((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    sub_1000E94D4((uint64_t)v9, a4);
  }
  else
  {
    sub_1000E27E8(**(void **)a1 + v7, a3);
    sub_1000E9404((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL Utility_ErrorInfo.ResultError.hasDatabaseFailure.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CA588);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  sub_1000E200C(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_1002CA588);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CA588);
  return v6;
}

Swift::Void __swiftcall Utility_ErrorInfo.ResultError.clearDatabaseFailure()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0) + 28);
  sub_1000E27E8(v1, &qword_1002CA588);
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Utility_ErrorInfo.ResultError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E68(type metadata accessor for Utility_ErrorInfo.ResultError, a1);
}

uint64_t sub_1000E3E68@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Utility_ErrorInfo.ResultError.unknownFields.setter(uint64_t a1)
{
  return sub_1000E3F00(a1, type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000E3F00(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Utility_ErrorInfo.ResultError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.ResultError.resultErrorCode.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Goldilocks_ErrorInfo.ResultError.resultErrorCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t Utility_ErrorInfo.BatchError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E68(type metadata accessor for Utility_ErrorInfo.BatchError, a1);
}

uint64_t Utility_ErrorInfo.BatchError.unknownFields.setter(uint64_t a1)
{
  return sub_1000E3F00(a1, type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t (*Utility_ErrorInfo.BatchError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_ErrorInfo.BatchError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for Utility_ErrorInfo.BatchError(0);
  return UnknownStorage.init()();
}

void sub_1000E40A0()
{
  static Utility_ErrorInfo.ResultErrorCode.allCases = (uint64_t)&off_10027B5D0;
}

uint64_t *Utility_ErrorInfo.ResultErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9C30 != -1) {
    swift_once();
  }
  return &static Utility_ErrorInfo.ResultErrorCode.allCases;
}

uint64_t static Utility_ErrorInfo.ResultErrorCode.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9C30);
}

uint64_t static Utility_ErrorInfo.ResultErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9C30, &static Utility_ErrorInfo.ResultErrorCode.allCases);
}

uint64_t (*static Utility_ErrorInfo.ResultErrorCode.allCases.modify())()
{
  if (qword_1002C9C30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000E41D0@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9C30, &static Utility_ErrorInfo.ResultErrorCode.allCases, a1);
}

void sub_1000E41F4()
{
  static Utility_ErrorInfo.BatchErrorCode.allCases = (uint64_t)&off_10027B680;
}

uint64_t *Utility_ErrorInfo.BatchErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9C38 != -1) {
    swift_once();
  }
  return &static Utility_ErrorInfo.BatchErrorCode.allCases;
}

uint64_t static Utility_ErrorInfo.BatchErrorCode.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9C38);
}

uint64_t static Utility_ErrorInfo.BatchErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9C38, &static Utility_ErrorInfo.BatchErrorCode.allCases);
}

uint64_t (*static Utility_ErrorInfo.BatchErrorCode.allCases.modify())()
{
  if (qword_1002C9C38 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1000E4324@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9C38, &static Utility_ErrorInfo.BatchErrorCode.allCases, a1);
}

void *Utility_DeleteAllZonesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteAllZonesRequest.protoMessageName;
}

unint64_t static Utility_DeleteAllZonesRequest.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000E4370(uint64_t a1)
{
  return sub_1000E58B0(a1, static Utility_DeleteAllZonesRequest._protobuf_nameMap);
}

uint64_t Utility_DeleteAllZonesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C40, (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap);
}

uint64_t static Utility_DeleteAllZonesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C40, (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitStatusFeedbackResponse.decodeMessage<A>(decoder:)()
{
  return sub_1000E5940();
}

Swift::Int Utility_DeleteAllZonesRequest.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_DeleteAllZonesRequest, &qword_1002CA590, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000E4428()
{
  return Goldilocks_ExitStatusFeedbackResponse.decodeMessage<A>(decoder:)();
}

uint64_t Goldilocks_ExitStatusFeedbackResponse.traverse<A>(visitor:)()
{
  return Goldilocks_ErrorInfo.traverse<A>(visitor:)();
}

uint64_t sub_1000E4458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABE8, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E44D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C40, (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000E44F8()
{
  sub_1000E9574(&qword_1002CA650, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E4564()
{
  sub_1000E9574(&qword_1002CA650, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
  return Message.hash(into:)();
}

void *Utility_DeleteAllZonesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteAllZonesResponse.protoMessageName;
}

unint64_t static Utility_DeleteAllZonesResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000E4608(uint64_t a1)
{
  return sub_1000E7824(a1, static Utility_DeleteAllZonesResponse._protobuf_nameMap, (uint64_t)"deleteZoneResponses", 19);
}

uint64_t Utility_DeleteAllZonesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C48, (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap);
}

uint64_t static Utility_DeleteAllZonesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C48, (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap, a1);
}

uint64_t Utility_DeleteAllZonesResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000E95BC();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for Utility_DeleteZoneResponse(0);
        sub_1000E9574(&qword_1002CA5A0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Utility_DeleteAllZonesResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for Utility_DeleteZoneResponse(0),
        sub_1000E9574(&qword_1002CA5A0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (sub_1000E95BC(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Utility_DeleteAllZonesResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Utility_DeleteAllZonesResponse.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_DeleteAllZonesResponse, &qword_1002CA5A8, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000E4928@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000E4964()
{
  return Utility_DeleteAllZonesResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E497C()
{
  return Utility_DeleteAllZonesResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000E4994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABE0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E4A10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C48, (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000E4A34()
{
  sub_1000E9574(&qword_1002CA668, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E4AA0()
{
  sub_1000E9574(&qword_1002CA668, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
  return Message.hash(into:)();
}

void *Utility_DeleteZoneRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteZoneRequest.protoMessageName;
}

unint64_t static Utility_DeleteZoneRequest.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_1000E4B44()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_DeleteZoneRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10024A2A0;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "zoneName";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_DeleteZoneRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C50, (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap);
}

uint64_t static Utility_DeleteZoneRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C50, (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_SilentMoverRampingRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t Utility_DeleteZoneRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for Utility_DeleteZoneRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Utility_DeleteZoneRequest.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_DeleteZoneRequest, &qword_1002CA5B0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000E4E48@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000E4E70()
{
  return Goldilocks_SilentMoverRampingRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E4E88()
{
  return Utility_DeleteZoneRequest.traverse<A>(visitor:)();
}

uint64_t sub_1000E4EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABD8, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E4F1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C50, (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000E4F40()
{
  sub_1000E9574((unint64_t *)&qword_1002CA680, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E4FAC()
{
  sub_1000E9574((unint64_t *)&qword_1002CA680, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
  return Message.hash(into:)();
}

void *Utility_DeleteZoneResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteZoneResponse.protoMessageName;
}

unint64_t static Utility_DeleteZoneResponse.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000E5050()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_DeleteZoneResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024A2C0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "error";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "zoneName";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_DeleteZoneResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C58, (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap);
}

uint64_t static Utility_DeleteZoneResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C58, (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap, a1);
}

uint64_t Utility_DeleteZoneResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for Utility_DeleteZoneResponse(0);
        type metadata accessor for Utility_ErrorInfo.ResultError(0);
        sub_1000E9574(&qword_1002CA5B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Utility_DeleteZoneResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v16[3] = a2;
  v16[1] = a1;
  uint64_t v5 = sub_1000D0514(&qword_1002CA580);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneResponse(0);
  sub_1000E200C((uint64_t)v4 + *(int *)(v12 + 24), (uint64_t)v7, &qword_1002CA580);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v7, &qword_1002CA580);
  }
  else
  {
    sub_1000E9404((uint64_t)v7, (uint64_t)v11, type metadata accessor for Utility_ErrorInfo.ResultError);
    sub_1000E9574(&qword_1002CA5B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_1000E94D4((uint64_t)v11, type metadata accessor for Utility_ErrorInfo.ResultError);
    if (v3) {
      return result;
    }
  }
  unint64_t v14 = v4[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (!v3) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Utility_DeleteZoneResponse.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_DeleteZoneResponse, &qword_1002CA5C0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E5638@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_1000E56C4()
{
  return Utility_DeleteZoneResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E56DC(uint64_t a1, uint64_t a2)
{
  return Utility_DeleteZoneResponse.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_1000E56F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABD0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E5770@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C58, (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000E5794()
{
  sub_1000E9574(&qword_1002CA5A0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E5800()
{
  sub_1000E9574(&qword_1002CA5A0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
  return Message.hash(into:)();
}

void *Utility_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_ErrorInfo.protoMessageName;
}

unint64_t static Utility_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_1000E58A4(uint64_t a1)
{
  return sub_1000E58B0(a1, static Utility_ErrorInfo._protobuf_nameMap);
}

uint64_t sub_1000E58B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_1000D04B0(v3, a2);
  sub_1000CDD9C(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t Utility_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C60, (uint64_t)static Utility_ErrorInfo._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C60, (uint64_t)static Utility_ErrorInfo._protobuf_nameMap, a1);
}

uint64_t sub_1000E5940()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t Goldilocks_ErrorInfo.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int Utility_ErrorInfo.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_ErrorInfo, &qword_1002CA5C8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
}

uint64_t sub_1000E5B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABC8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E5BEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C60, (uint64_t)static Utility_ErrorInfo._protobuf_nameMap, a1);
}

uint64_t sub_1000E5C10()
{
  sub_1000E9574(&qword_1002CA6A8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E5C7C()
{
  sub_1000E9574(&qword_1002CA6A8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
  return Message.hash(into:)();
}

uint64_t sub_1000E5CF8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10024B240;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "NO_ERROR";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "UNKNOWN";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "SERVER_ERROR";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "FAILED_CK_CALL";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)uint64_t v15 = "MISSING_ARGUMENTS";
  *((void *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "INVALID_ARGUMENTS";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ZONE_NOT_FOUND";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  id v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)id v21 = "RECORD_NOT_FOUND";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "PERMISSION_DENIED";
  *(void *)(v22 + 8) = 17;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C68, (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C68, (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000E60B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C68, (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000E60D4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B250;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "NO_BATCH_ERROR";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BATCH_SERVER_ERROR";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "MULTI_STATUS";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "INCOMPLETE_BATCH_REQUEST";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)uint64_t v16 = "INVALID_BATCHING";
  *((void *)v16 + 1) = 16;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "FORBIDDEN_BATCH_REQUEST";
  *((void *)v18 + 1) = 23;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C70, (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C70, (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000E63D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C70, (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap, a1);
}

void sub_1000E63F8(int a1)
{
  v1._object = (void *)0x8000000100209AA0;
  v1._countAndFlagsBits = 0xD000000000000010;
  sub_1000E772C(a1, v1, static Utility_ErrorInfo.DatabaseFailure.protoMessageName, &static Utility_ErrorInfo.DatabaseFailure.protoMessageName[1]);
}

void *Utility_ErrorInfo.DatabaseFailure.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9C78 != -1) {
    swift_once();
  }
  return static Utility_ErrorInfo.DatabaseFailure.protoMessageName;
}

uint64_t static Utility_ErrorInfo.DatabaseFailure.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9C78, static Utility_ErrorInfo.DatabaseFailure.protoMessageName);
}

uint64_t sub_1000E6494()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  Swift::String v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ckOperation";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "description";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "clientCode";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "serverCode";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C80, (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C80, (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap, a1);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          sub_1000CDE28();
          goto LABEL_9;
        case 4:
          sub_1000CDDD4();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Utility_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40))
        || (sub_1000CDE28(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0 + 48)
          || (sub_1000CDDD4(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int Utility_ErrorInfo.DatabaseFailure.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_ErrorInfo.DatabaseFailure, &qword_1002CA5D0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000E6A20@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000E6A60(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9C78, static Utility_ErrorInfo.DatabaseFailure.protoMessageName);
}

uint64_t sub_1000E6A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000E6AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000E6B68())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000E6B8C()
{
  return Utility_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E6BA4()
{
  return Utility_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)();
}

uint64_t sub_1000E6BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABC0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E6C38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C80, (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap, a1);
}

uint64_t sub_1000E6C5C()
{
  sub_1000E9574(&qword_1002CA5D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E6CC8()
{
  sub_1000E9574(&qword_1002CA5D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  return Message.hash(into:)();
}

void sub_1000E6D48(int a1)
{
  v1._countAndFlagsBits = 0x45746C757365522ELL;
  v1._object = (void *)0xEC000000726F7272;
  sub_1000E772C(a1, v1, static Utility_ErrorInfo.ResultError.protoMessageName, &static Utility_ErrorInfo.ResultError.protoMessageName[1]);
}

void *Utility_ErrorInfo.ResultError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9C88 != -1) {
    swift_once();
  }
  return static Utility_ErrorInfo.ResultError.protoMessageName;
}

uint64_t static Utility_ErrorInfo.ResultError.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9C88, static Utility_ErrorInfo.ResultError.protoMessageName);
}

uint64_t sub_1000E6DE8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Utility_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  Swift::String v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "errorMessage";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "resultErrorCode";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "databaseFailure";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_ErrorInfo.ResultError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9C90, (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo.ResultError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9C90, (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap, a1);
}

uint64_t Utility_ErrorInfo.ResultError.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        sub_1000E9630();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Utility_ErrorInfo.ResultError(0);
    type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    sub_1000E9574(&qword_1002CA5D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Utility_ErrorInfo.ResultError.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_1000D0514(&qword_1002CA588);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(v4 + 8);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *(void *)v4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v20 = a2;
  if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    if (!*(void *)(v4 + 16)
      || (char v16 = *(unsigned char *)(v4 + 24),
          uint64_t v18 = *(void *)(v4 + 16),
          char v19 = v16,
          sub_1000E9630(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v3))
    {
      uint64_t v17 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
      sub_1000E200C(v4 + *(int *)(v17 + 28), (uint64_t)v8, &qword_1002CA588);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_1000E27E8((uint64_t)v8, &qword_1002CA588);
      }
      else
      {
        sub_1000E9404((uint64_t)v8, (uint64_t)v12, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
        sub_1000E9574(&qword_1002CA5D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = sub_1000E94D4((uint64_t)v12, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
        if (v3) {
          return result;
        }
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Utility_ErrorInfo.ResultError.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_ErrorInfo.ResultError, &qword_1002CA5E8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000E7488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_1000E7520(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9C88, static Utility_ErrorInfo.ResultError.protoMessageName);
}

uint64_t sub_1000E7548()
{
  return Utility_ErrorInfo.ResultError.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E7560(uint64_t a1, uint64_t a2)
{
  return Utility_ErrorInfo.ResultError.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_1000E7578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABB8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E75F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9C90, (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap, a1);
}

uint64_t sub_1000E7618()
{
  sub_1000E9574(&qword_1002CA5B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E7684()
{
  sub_1000E9574(&qword_1002CA5B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
  return Message.hash(into:)();
}

void sub_1000E7700(int a1)
{
  v1._countAndFlagsBits = 0x724568637461422ELL;
  v1._object = (void *)0xEB00000000726F72;
  sub_1000E772C(a1, v1, static Utility_ErrorInfo.BatchError.protoMessageName, &static Utility_ErrorInfo.BatchError.protoMessageName[1]);
}

void sub_1000E772C(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000011;
  *a4 = 0x8000000100209A50;
}

void *Utility_ErrorInfo.BatchError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9C98 != -1) {
    swift_once();
  }
  return static Utility_ErrorInfo.BatchError.protoMessageName;
}

uint64_t static Utility_ErrorInfo.BatchError.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9C98, static Utility_ErrorInfo.BatchError.protoMessageName);
}

uint64_t sub_1000E780C(uint64_t a1)
{
  return sub_1000E7824(a1, static Utility_ErrorInfo.BatchError._protobuf_nameMap, (uint64_t)"errorMessage", 12);
}

uint64_t sub_1000E7824(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_1000D04B0(v7, a2);
  sub_1000CDD9C(v7, (uint64_t)a2);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v8 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10024A2C0;
  uint64_t v12 = (void *)(v11 + v10);
  unint64_t v13 = v11 + v10 + v8[14];
  *uint64_t v12 = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  char v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  uint64_t v17 = (char *)v12 + v9 + v8[14];
  *(void *)((char *)v12 + v9) = 2;
  *(void *)uint64_t v17 = "batchError";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Utility_ErrorInfo.BatchError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CA0, (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap);
}

uint64_t static Utility_ErrorInfo.BatchError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CA0, (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap, a1);
}

uint64_t Utility_ErrorInfo.BatchError.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000E95BC();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Utility_ErrorInfo.BatchError.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2]
      || (sub_1000E95BC(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Utility_ErrorInfo.BatchError(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Utility_ErrorInfo.BatchError.hashValue.getter()
{
  return sub_1000E7C40((void (*)(void))type metadata accessor for Utility_ErrorInfo.BatchError, &qword_1002CA5F0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
}

Swift::Int sub_1000E7C40(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000E7CC8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000E7CFC(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9C98, static Utility_ErrorInfo.BatchError.protoMessageName);
}

uint64_t sub_1000E7D24()
{
  return Utility_ErrorInfo.BatchError.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000E7D3C()
{
  return Utility_ErrorInfo.BatchError.traverse<A>(visitor:)();
}

uint64_t sub_1000E7D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E9574(&qword_1002CABB0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E7DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CA0, (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap, a1);
}

uint64_t sub_1000E7DF4()
{
  sub_1000E9574(&qword_1002CA6E0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
  return Message.debugDescription.getter();
}

uint64_t sub_1000E7E60()
{
  sub_1000E9574(&qword_1002CA6E0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
  return Message.hash(into:)();
}

uint64_t _s22CloudKitImplementation30Utility_DeleteAllZonesResponseV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v18 - v9;
  if ((sub_1001234F8(*a1, *(void *)a2) & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_7;
        }
        goto LABEL_5;
      case 2:
        if (v11 == 2) {
          goto LABEL_7;
        }
        goto LABEL_5;
      case 3:
        if (v11 == 3) {
          goto LABEL_7;
        }
        goto LABEL_5;
      case 4:
        if (v11 == 4) {
          goto LABEL_7;
        }
        goto LABEL_5;
      case 5:
        if (v11 == 5) {
          goto LABEL_7;
        }
        goto LABEL_5;
      default:
        if (v11) {
          goto LABEL_5;
        }
        goto LABEL_7;
    }
  }
  if (v11 == v12)
  {
LABEL_7:
    uint64_t v14 = type metadata accessor for Utility_DeleteAllZonesResponse(0);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, (char *)a1 + *(int *)(v14 + 24), v4);
    v15(v8, (char *)(a2 + *(int *)(v14 + 24)), v4);
    sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_5:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation26Utility_DeleteZoneResponseV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CABF8);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CA580);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v45 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = type metadata accessor for Utility_DeleteZoneResponse(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v51 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  sub_1000E200C(v26, (uint64_t)v23, &qword_1002CA580);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v52 = a2;
  sub_1000E200C((uint64_t)a2 + v28, (uint64_t)v21, &qword_1002CA580);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000E200C((uint64_t)v23, (uint64_t)v14, &qword_1002CA580);
  sub_1000E200C((uint64_t)v21, v29, &qword_1002CA580);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v21, &qword_1002CA580);
    sub_1000E27E8((uint64_t)v23, &qword_1002CA580);
    if (v30(v29, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v14, &qword_1002CA580);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_1000E200C((uint64_t)v14, (uint64_t)v18, &qword_1002CA580);
  if (v30(v29, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v21, &qword_1002CA580);
    sub_1000E27E8((uint64_t)v23, &qword_1002CA580);
    sub_1000E94D4((uint64_t)v18, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_6:
    sub_1000E27E8((uint64_t)v14, &qword_1002CABF8);
LABEL_12:
    char v35 = 0;
    return v35 & 1;
  }
  uint64_t v31 = v46;
  sub_1000E9404(v29, v46, type metadata accessor for Utility_ErrorInfo.ResultError);
  char v32 = _s22CloudKitImplementation17Utility_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v18, v31);
  sub_1000E94D4(v31, type metadata accessor for Utility_ErrorInfo.ResultError);
  sub_1000E27E8((uint64_t)v21, &qword_1002CA580);
  sub_1000E27E8((uint64_t)v23, &qword_1002CA580);
  sub_1000E94D4((uint64_t)v18, type metadata accessor for Utility_ErrorInfo.ResultError);
  sub_1000E27E8((uint64_t)v14, &qword_1002CA580);
  if ((v32 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v33 = v51;
  unint64_t v34 = v52;
  if (*v51 == *v52 && v51[1] == v52[1] || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    id v36 = (char *)v33 + *(int *)(v27 + 20);
    uint64_t v38 = v49;
    uint64_t v37 = v50;
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    uint64_t v40 = v47;
    v39(v47, v36, v50);
    uint64_t v41 = (char *)v34 + *(int *)(v27 + 20);
    uint64_t v42 = v48;
    v39(v48, v41, v37);
    sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
    v43(v42, v37);
    v43(v40, v37);
  }
  return v35 & 1;
}

uint64_t _s22CloudKitImplementation25Utility_DeleteZoneRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for Utility_DeleteZoneRequest(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, &a1[*(int *)(v13 + 20)], v4);
    v14(v8, &a2[*(int *)(v13 + 20)], v4);
    sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = *(void *)(a2 + 32);
      char v15 = *(unsigned char *)(a2 + 40);
      uint64_t v16 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      if (v16 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v14, v15)) {
        goto LABEL_17;
      }
      uint64_t v17 = *(void *)(a1 + 48);
      if (*(unsigned char *)(a1 + 56) == 1) {
        uint64_t v17 = qword_10024C180[v17];
      }
      uint64_t v18 = *(void *)(a2 + 48);
      if (*(unsigned char *)(a2 + 56))
      {
        switch(v18)
        {
          case 1:
            if (v17 == 1) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 2:
            if (v17 == 2) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 3:
            if (v17 == 3) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 4:
            if (v17 == 4) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 5:
            if (v17 == 6) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 6:
            if (v17 == 7) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 7:
            if (v17 == 8) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 8:
            if (v17 == 9) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 9:
            if (v17 == 200001) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 10:
            if (v17 == 200002) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 11:
            if (v17 == 200003) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 12:
            if (v17 == 200004) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 13:
            if (v17 == 200005) {
              goto LABEL_19;
            }
            goto LABEL_17;
          default:
            if (v17) {
              goto LABEL_17;
            }
            goto LABEL_19;
        }
      }
      if (v17 == v18)
      {
LABEL_19:
        uint64_t v19 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
        uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v20(v10, a1 + *(int *)(v19 + 32), v4);
        v20(v8, a2 + *(int *)(v19 + 32), v4);
        sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v21 = *(void (**)(char *, uint64_t))(v5 + 8);
        v21(v8, v4);
        v21(v10, v4);
      }
      else
      {
LABEL_17:
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CABF0);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CA588);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - v21;
  if (*a1 == *(void *)a2 && a1[1] == *(void *)(a2 + 8)
    || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v24 = a1[2];
    uint64_t v25 = *(void *)(a2 + 16);
    if (*(unsigned char *)(a2 + 24) == 1)
    {
      switch(v25)
      {
        case 1:
          if (v24 != 1) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 2:
          if (v24 != 2) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 3:
          if (v24 != 3) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 4:
          if (v24 != 4) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 5:
          if (v24 != 5) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 6:
          if (v24 != 6) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 7:
          if (v24 != 7) {
            goto LABEL_15;
          }
          goto LABEL_9;
        case 8:
          if (v24 != 8) {
            goto LABEL_15;
          }
          goto LABEL_9;
        default:
          if (!v24) {
            goto LABEL_9;
          }
          goto LABEL_15;
      }
    }
    if (v24 == v25)
    {
LABEL_9:
      uint64_t v45 = v17;
      uint64_t v26 = v9;
      uint64_t v27 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
      sub_1000E200C((uint64_t)a1 + *(int *)(v27 + 28), (uint64_t)v22, &qword_1002CA588);
      uint64_t v44 = v27;
      sub_1000E200C(a2 + *(int *)(v27 + 28), (uint64_t)v20, &qword_1002CA588);
      uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CA588);
      sub_1000E200C((uint64_t)v20, v28, &qword_1002CA588);
      uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
      if (v29((uint64_t)v13, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v20, &qword_1002CA588);
        sub_1000E27E8((uint64_t)v22, &qword_1002CA588);
        if (v29(v28, 1, v8) == 1)
        {
          sub_1000E27E8((uint64_t)v13, &qword_1002CA588);
LABEL_18:
          uint64_t v34 = v44;
          char v35 = (char *)a1 + *(int *)(v44 + 24);
          uint64_t v37 = v49;
          uint64_t v36 = v50;
          uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          uint64_t v39 = v47;
          v38(v47, v35, v50);
          uint64_t v40 = (char *)(a2 + *(int *)(v34 + 24));
          uint64_t v41 = v48;
          v38(v48, v40, v36);
          sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
          v42(v41, v36);
          v42(v39, v36);
          return v23 & 1;
        }
      }
      else
      {
        uint64_t v30 = (uint64_t)v45;
        sub_1000E200C((uint64_t)v13, (uint64_t)v45, &qword_1002CA588);
        if (v29(v28, 1, v8) != 1)
        {
          uint64_t v32 = v46;
          sub_1000E9404(v28, v46, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          char v33 = _s22CloudKitImplementation17Utility_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(v30, v32);
          sub_1000E94D4(v32, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          sub_1000E27E8((uint64_t)v20, &qword_1002CA588);
          sub_1000E27E8((uint64_t)v22, &qword_1002CA588);
          sub_1000E94D4(v30, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          sub_1000E27E8((uint64_t)v13, &qword_1002CA588);
          if (v33) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
        sub_1000E27E8((uint64_t)v20, &qword_1002CA588);
        sub_1000E27E8((uint64_t)v22, &qword_1002CA588);
        sub_1000E94D4(v30, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }
      sub_1000E27E8((uint64_t)v13, &qword_1002CABF0);
    }
LABEL_15:
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV05BatchE0V2eeoiySbAE_AEtFZ_0(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = *((void *)a1 + 2);
    uint64_t v14 = *(void *)(a2 + 16);
    if (*(unsigned char *)(a2 + 24) == 1)
    {
      switch(v14)
      {
        case 1:
          if (v13 == 1) {
            goto LABEL_11;
          }
          goto LABEL_9;
        case 2:
          if (v13 == 2) {
            goto LABEL_11;
          }
          goto LABEL_9;
        case 3:
          if (v13 == 3) {
            goto LABEL_11;
          }
          goto LABEL_9;
        case 4:
          if (v13 == 4) {
            goto LABEL_11;
          }
          goto LABEL_9;
        case 5:
          if (v13 == 5) {
            goto LABEL_11;
          }
          goto LABEL_9;
        default:
          if (v13) {
            goto LABEL_9;
          }
          goto LABEL_11;
      }
    }
    if (v13 == v14)
    {
LABEL_11:
      uint64_t v15 = type metadata accessor for Utility_ErrorInfo.BatchError(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, &a1[*(int *)(v15 + 24)], v4);
      v16(v8, (char *)(a2 + *(int *)(v15 + 24)), v4);
      sub_1000E9574(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
    else
    {
LABEL_9:
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_1000E9404(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E946C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E94D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Utility_ErrorInfo.BatchError(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CAB70);
}

uint64_t type metadata accessor for Utility_DeleteAllZonesRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA748);
}

uint64_t sub_1000E9574(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E95BC()
{
  unint64_t result = qword_1002CA598;
  if (!qword_1002CA598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA598);
  }
  return result;
}

uint64_t type metadata accessor for Utility_ErrorInfo(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CA9A0);
}

unint64_t sub_1000E9630()
{
  unint64_t result = qword_1002CA5E0;
  if (!qword_1002CA5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA5E0);
  }
  return result;
}

unint64_t sub_1000E9688()
{
  unint64_t result = qword_1002CA5F8;
  if (!qword_1002CA5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA5F8);
  }
  return result;
}

unint64_t sub_1000E96E0()
{
  unint64_t result = qword_1002CA600;
  if (!qword_1002CA600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA600);
  }
  return result;
}

unint64_t sub_1000E9738()
{
  unint64_t result = qword_1002CA608;
  if (!qword_1002CA608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA608);
  }
  return result;
}

unint64_t sub_1000E9790()
{
  unint64_t result = qword_1002CA610;
  if (!qword_1002CA610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA610);
  }
  return result;
}

unint64_t sub_1000E97E8()
{
  unint64_t result = qword_1002CA618;
  if (!qword_1002CA618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA618);
  }
  return result;
}

unint64_t sub_1000E9840()
{
  unint64_t result = qword_1002CA620;
  if (!qword_1002CA620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA620);
  }
  return result;
}

uint64_t sub_1000E9894()
{
  return sub_1000CEC04(&qword_1002CA628, &qword_1002CA630);
}

uint64_t sub_1000E98BC()
{
  return sub_1000CEC04(&qword_1002CA638, &qword_1002CA640);
}

uint64_t sub_1000E98E4()
{
  return sub_1000E9574(&qword_1002CA648, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000E992C()
{
  return sub_1000E9574(&qword_1002CA650, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000E9974()
{
  return sub_1000E9574(&qword_1002CA590, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000E99BC()
{
  return sub_1000E9574(&qword_1002CA658, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000E9A04()
{
  return sub_1000E9574(&qword_1002CA660, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000E9A4C()
{
  return sub_1000E9574(&qword_1002CA668, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000E9A94()
{
  return sub_1000E9574(&qword_1002CA5A8, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000E9ADC()
{
  return sub_1000E9574(&qword_1002CA670, (void (*)(uint64_t))type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000E9B24()
{
  return sub_1000E9574(&qword_1002CA678, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000E9B6C()
{
  return sub_1000E9574((unint64_t *)&qword_1002CA680, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000E9BB4()
{
  return sub_1000E9574(&qword_1002CA5B0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000E9BFC()
{
  return sub_1000E9574(&qword_1002CA688, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000E9C44()
{
  return sub_1000E9574(&qword_1002CA690, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E9C8C()
{
  return sub_1000E9574(&qword_1002CA5A0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E9CD4()
{
  return sub_1000E9574(&qword_1002CA5C0, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E9D1C()
{
  return sub_1000E9574(&qword_1002CA698, (void (*)(uint64_t))type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000E9D64()
{
  return sub_1000E9574(&qword_1002CA6A0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
}

uint64_t sub_1000E9DAC()
{
  return sub_1000E9574(&qword_1002CA6A8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
}

uint64_t sub_1000E9DF4()
{
  return sub_1000E9574(&qword_1002CA5C8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
}

uint64_t sub_1000E9E3C()
{
  return sub_1000E9574(&qword_1002CA6B0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo);
}

uint64_t sub_1000E9E84()
{
  return sub_1000E9574(&qword_1002CA6B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000E9ECC()
{
  return sub_1000E9574(&qword_1002CA5D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000E9F14()
{
  return sub_1000E9574(&qword_1002CA5D0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000E9F5C()
{
  return sub_1000E9574(&qword_1002CA6C0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000E9FA4()
{
  return sub_1000E9574(&qword_1002CA6C8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000E9FEC()
{
  return sub_1000E9574(&qword_1002CA5B8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000EA034()
{
  return sub_1000E9574(&qword_1002CA5E8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000EA07C()
{
  return sub_1000E9574(&qword_1002CA6D0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000EA0C4()
{
  return sub_1000E9574(&qword_1002CA6D8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000EA10C()
{
  return sub_1000E9574(&qword_1002CA6E0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000EA154()
{
  return sub_1000E9574(&qword_1002CA5F0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000EA19C()
{
  return sub_1000E9574(&qword_1002CA6E8, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t getEnumTagSinglePayload for Utility_DeleteAllZonesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA210);
}

uint64_t storeEnumTagSinglePayload for Utility_DeleteAllZonesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA228);
}

uint64_t initializeBufferWithCopyOfBuffer for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA614);
}

uint64_t sub_1000EA614(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    BOOL v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA6D8);
}

void *sub_1000EA6D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000EA780()
{
  return sub_1000EE558();
}

uint64_t *initializeBufferWithCopyOfBuffer for Utility_DeleteZoneRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Utility_DeleteZoneRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Utility_DeleteZoneRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteZoneRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EAB40);
}

uint64_t sub_1000EAB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Utility_DeleteZoneRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EAC04);
}

uint64_t sub_1000EAC04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000EACAC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Utility_DeleteZoneResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    uint64_t *v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    char v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CA580);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
      uint64_t v21 = *(int *)(v16 + 24);
      uint64_t v22 = (char *)v14 + v21;
      char v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      uint64_t v24 = *(int *)(v16 + 28);
      uint64_t v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t v27 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
      uint64_t v35 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v26, 1, v27))
      {
        uint64_t v28 = sub_1000D0514(&qword_1002CA588);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v29 = v26[1];
        void *v25 = *v26;
        v25[1] = v29;
        uint64_t v30 = v26[3];
        void v25[2] = v26[2];
        v25[3] = v30;
        void v25[4] = v26[4];
        *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
        void v25[6] = v26[6];
        *((unsigned char *)v25 + 56) = *((unsigned char *)v26 + 56);
        uint64_t v31 = *(int *)(v27 + 32);
        uint64_t v34 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v34, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v25, 0, 1, v27);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for Utility_DeleteZoneResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *initializeWithCopy for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CA580);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v19 = *(int *)(v15 + 24);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    uint64_t v22 = *(int *)(v15 + 28);
    char v23 = (void *)((char *)v13 + v22);
    uint64_t v24 = (void *)((char *)v14 + v22);
    uint64_t v25 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    uint64_t v33 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v24, 1, v25))
    {
      uint64_t v26 = sub_1000D0514(&qword_1002CA588);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = v24[1];
      *char v23 = *v24;
      v23[1] = v27;
      uint64_t v28 = v24[3];
      v23[2] = v24[2];
      v23[3] = v28;
      v23[4] = v24[4];
      *((unsigned char *)v23 + 40) = *((unsigned char *)v24 + 40);
      v23[6] = v24[6];
      *((unsigned char *)v23 + 56) = *((unsigned char *)v24 + 56);
      uint64_t v29 = *(int *)(v25 + 32);
      uint64_t v32 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v32, v30, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v55 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v32 = *((void *)v13 + 2);
      *(unsigned char *)(v12 + 24) = v13[24];
      *(void *)(v12 + 16) = v32;
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v57);
      uint64_t v33 = *(int *)(v14 + 28);
      uint64_t v34 = v12 + v33;
      uint64_t v35 = &v13[v33];
      uint64_t v36 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, v36);
      int v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *((void *)v35 + 1);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = *((void *)v35 + 3);
          uint64_t v41 = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 32) = v41;
          uint64_t v42 = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          *(void *)(v34 + 48) = v42;
          uint64_t v43 = *(int *)(v36 + 32);
          uint64_t v44 = v34 + v43;
          uint64_t v45 = &v35[v43];
          uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v46(v44, v45, v57);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *((void *)v35 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = *((void *)v35 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v52 = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 32) = v52;
          uint64_t v53 = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          *(void *)(v34 + 48) = v53;
          ((void (*)(uint64_t, char *, uint64_t))v10)(v34 + *(int *)(v36 + 32), &v35[*(int *)(v36 + 32)], v57);
          return a1;
        }
        sub_1000E94D4(v34, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }
      size_t v29 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CA588) - 8) + 64);
      uint64_t v30 = (void *)v34;
      uint64_t v31 = v35;
      goto LABEL_8;
    }
    sub_1000E94D4(v12, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_7:
    size_t v29 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CA580) - 8) + 64);
    uint64_t v30 = (void *)v12;
    uint64_t v31 = v13;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  uint64_t v18 = *((void *)v13 + 2);
  *(unsigned char *)(v12 + 24) = v13[24];
  *(void *)(v12 + 16) = v18;
  uint64_t v19 = *(int *)(v14 + 24);
  uint64_t v20 = (char *)(v12 + v19);
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  swift_bridgeObjectRetain();
  uint64_t v56 = v22;
  v22(v20, v21, v57);
  uint64_t v23 = *(int *)(v14 + 28);
  uint64_t v24 = (void *)(v12 + v23);
  uint64_t v25 = &v13[v23];
  uint64_t v26 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_1000D0514(&qword_1002CA588);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *(void *)v25;
    v24[1] = *((void *)v25 + 1);
    void v24[2] = *((void *)v25 + 2);
    v24[3] = *((void *)v25 + 3);
    uint64_t v47 = *((void *)v25 + 4);
    *((unsigned char *)v24 + 40) = v25[40];
    void v24[4] = v47;
    uint64_t v48 = *((void *)v25 + 6);
    *((unsigned char *)v24 + 56) = v25[56];
    v24[6] = v48;
    uint64_t v49 = *(int *)(v26 + 32);
    uint64_t v54 = (char *)v24 + v49;
    uint64_t v50 = &v25[v49];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v56(v54, v50, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *initializeWithTake for Utility_DeleteZoneResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CA580);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v17 = *(int *)(v14 + 28);
    uint64_t v18 = (_OWORD *)((char *)v12 + v17);
    uint64_t v19 = (_OWORD *)((char *)v13 + v17);
    uint64_t v20 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    uint64_t v24 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v20))
    {
      uint64_t v21 = sub_1000D0514(&qword_1002CA588);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      long long v22 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v22;
      *((void *)v18 + 4) = *((void *)v19 + 4);
      *((unsigned char *)v18 + 40) = *((unsigned char *)v19 + 40);
      *((void *)v18 + 6) = *((void *)v19 + 6);
      *((unsigned char *)v18 + 56) = *((unsigned char *)v19 + 56);
      v10((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v42 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17((uint64_t)v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v28 = *((void *)v14 + 1);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v28;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(unsigned char *)(v13 + 24) = v14[24];
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v44);
      uint64_t v29 = *(int *)(v15 + 28);
      uint64_t v30 = v13 + v29;
      uint64_t v31 = &v14[v29];
      uint64_t v32 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      int v35 = v34(v30, 1, v32);
      int v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          long long v37 = *((_OWORD *)v31 + 1);
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          *(_OWORD *)(v30 + 16) = v37;
          *(void *)(v30 + 32) = *((void *)v31 + 4);
          *(unsigned char *)(v30 + 40) = v31[40];
          *(void *)(v30 + 48) = *((void *)v31 + 6);
          *(unsigned char *)(v30 + 56) = v31[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v30 + *(int *)(v32 + 32), &v31[*(int *)(v32 + 32)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          uint64_t v40 = *((void *)v31 + 1);
          *(void *)uint64_t v30 = *(void *)v31;
          *(void *)(v30 + 8) = v40;
          swift_bridgeObjectRelease();
          uint64_t v41 = *((void *)v31 + 3);
          *(void *)(v30 + 16) = *((void *)v31 + 2);
          *(void *)(v30 + 24) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v30 + 32) = *((void *)v31 + 4);
          *(unsigned char *)(v30 + 40) = v31[40];
          *(void *)(v30 + 48) = *((void *)v31 + 6);
          *(unsigned char *)(v30 + 56) = v31[56];
          ((void (*)(uint64_t, char *, uint64_t))v11)(v30 + *(int *)(v32 + 32), &v31[*(int *)(v32 + 32)], v44);
          return a1;
        }
        sub_1000E94D4(v30, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }
      size_t v25 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CA588) - 8) + 64);
      uint64_t v26 = (void *)v30;
      uint64_t v27 = v31;
      goto LABEL_8;
    }
    sub_1000E94D4(v13, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CA580) - 8) + 64);
    uint64_t v26 = (void *)v13;
    uint64_t v27 = v14;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(unsigned char *)(v13 + 24) = v14[24];
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v43(v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v44);
  uint64_t v19 = *(int *)(v15 + 28);
  uint64_t v20 = (_OWORD *)(v13 + v19);
  uint64_t v21 = &v14[v19];
  uint64_t v22 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_1000D0514(&qword_1002CA588);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    long long v38 = *((_OWORD *)v21 + 1);
    *uint64_t v20 = *(_OWORD *)v21;
    v20[1] = v38;
    *((void *)v20 + 4) = *((void *)v21 + 4);
    *((unsigned char *)v20 + 40) = v21[40];
    *((void *)v20 + 6) = *((void *)v21 + 6);
    *((unsigned char *)v20 + 56) = v21[56];
    v43((uint64_t)v20 + *(int *)(v22 + 32), &v21[*(int *)(v22 + 32)], v44);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteZoneResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EC1E0);
}

uint64_t sub_1000EC1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA580);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Utility_DeleteZoneResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EC324);
}

uint64_t sub_1000EC324(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA580);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000EC454()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1000EDF8C(319, (unint64_t *)&unk_1002CA910, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.ResultError);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwxx_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EC7B8);
}

uint64_t sub_1000EC7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EC83C);
}

uint64_t sub_1000EC840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000EC8B0()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Utility_ErrorInfo.ResultErrorCode()
{
  return &type metadata for Utility_ErrorInfo.ResultErrorCode;
}

ValueMetadata *type metadata accessor for Utility_ErrorInfo.BatchErrorCode()
{
  return &type metadata for Utility_ErrorInfo.BatchErrorCode;
}

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    void *v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ECE04);
}

uint64_t sub_1000ECE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ECEC8);
}

uint64_t sub_1000ECEC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000ECF70()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CA588);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      void v14[4] = v15[4];
      *((unsigned char *)v14 + 40) = *((unsigned char *)v15 + 40);
      v14[6] = v15[6];
      *((unsigned char *)v14 + 56) = *((unsigned char *)v15 + 56);
      uint64_t v22 = *(int *)(v16 + 32);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CA588);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    void v13[4] = v14[4];
    *((unsigned char *)v13 + 40) = *((unsigned char *)v14 + 40);
    v13[6] = v14[6];
    *((unsigned char *)v13 + 56) = *((unsigned char *)v14 + 56);
    uint64_t v20 = *(int *)(v15 + 32);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v29 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v14 + 32);
      *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
      *(void *)(v13 + 32) = v27;
      uint64_t v28 = *(void *)(v14 + 48);
      *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
      *(void *)(v13 + 48) = v28;
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(v15 + 32), v14 + *(int *)(v15 + 32), v30);
      return a1;
    }
    sub_1000E94D4(v13, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v25 = sub_1000D0514(&qword_1002CA588);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  uint64_t v19 = *(void *)(v14 + 32);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
  *(void *)(v13 + 32) = v19;
  uint64_t v20 = *(void *)(v14 + 48);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
  *(void *)(v13 + 48) = v20;
  uint64_t v21 = *(int *)(v15 + 32);
  uint64_t v22 = v13 + v21;
  uint64_t v23 = v14 + v21;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v22, v23, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CA588);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((void *)v12 + 4) = *((void *)v13 + 4);
    *((unsigned char *)v12 + 40) = *((unsigned char *)v13 + 40);
    *((void *)v12 + 6) = *((void *)v13 + 6);
    *((unsigned char *)v12 + 56) = *((unsigned char *)v13 + 56);
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v24 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v22 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v23;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
      *(void *)(v13 + 48) = *(void *)(v14 + 48);
      *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(v15 + 32), v14 + *(int *)(v15 + 32), v25);
      return a1;
    }
    sub_1000E94D4(v13, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = sub_1000D0514(&qword_1002CA588);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  long long v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
  *(void *)(v13 + 48) = *(void *)(v14 + 48);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v13 + *(int *)(v15 + 32), v14 + *(int *)(v15 + 32), v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDC20);
}

uint64_t sub_1000EDC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA588);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDD64);
}

uint64_t sub_1000EDD64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA588);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000EDE94()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1000EDF8C(319, (unint64_t *)&unk_1002CAAE0, (void (*)(uint64_t))type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000EDF8C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE3E0);
}

uint64_t sub_1000EE3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE4A4);
}

uint64_t sub_1000EE4A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000EE54C()
{
  return sub_1000EE558();
}

uint64_t sub_1000EE558()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Utility_PhotosUtilityAPIAsync.deleteZone(zoneName:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_1000EE748();
  static Message.with(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  return sub_1000EE870((uint64_t)v14, type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000EE730(uint64_t a1)
{
  return sub_1000EEE54(a1);
}

unint64_t sub_1000EE748()
{
  unint64_t result = qword_1002CA680;
  if (!qword_1002CA680)
  {
    type metadata accessor for Utility_DeleteZoneRequest(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CA680);
  }
  return result;
}

uint64_t Utility_PhotosUtilityAPIAsync.deleteAllZones(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Utility_DeleteAllZonesRequest(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v10, a1, a2, a3, a4);
  return sub_1000EE870((uint64_t)v10, type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000EE870(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.__allocating_init(codeService:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.init(codeService:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void Utility_PhotosUtilityAPIAsyncClient.deleteZone(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CAC00);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Utility_DeleteZoneRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CAC08));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000EEC18(a1, (uint64_t)v4, type metadata accessor for Utility_DeleteZoneRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Utility_PhotosUtilityAPIAsyncClient.deleteAllZones(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CAC10);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Utility_DeleteAllZonesRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CAC18));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_1000EEC18(a1, (uint64_t)v4, type metadata accessor for Utility_DeleteAllZonesRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

uint64_t sub_1000EEC18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.deinit()
{
  return v0;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

void sub_1000EECD8(uint64_t a1)
{
}

void sub_1000EECFC(uint64_t a1)
{
}

uint64_t Utility_PhotosUtilityAPIAsyncOperation.deleteZone(zoneName:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  sub_1000EE748();
  static Message.with(_:)();
  uint64_t v15 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  sub_1000EE870((uint64_t)v14, type metadata accessor for Utility_DeleteZoneRequest);
  return v15;
}

uint64_t sub_1000EEE54(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    void *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperation.deleteAllZones(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Utility_DeleteAllZonesRequest(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v10, a1, a2, a3, a4);
  sub_1000EE870((uint64_t)v10, type metadata accessor for Utility_DeleteAllZonesRequest);
  return v11;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deinit()
{
  return v0;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deleteZone(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CAC00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Utility_DeleteZoneRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CAC08));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_1000EEC18(a1, (uint64_t)v4, type metadata accessor for Utility_DeleteZoneRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deleteAllZones(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CAC10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Utility_DeleteAllZonesRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CAC18));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_1000EEC18(a1, (uint64_t)v4, type metadata accessor for Utility_DeleteAllZonesRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

ValueMetadata *type metadata accessor for Utility_PhotosUtilityAPI()
{
  return &type metadata for Utility_PhotosUtilityAPI;
}

uint64_t type metadata accessor for Utility_PhotosUtilityAPIAsyncClient()
{
  return self;
}

uint64_t type metadata accessor for Utility_PhotosUtilityAPIAsyncOperationClient()
{
  return self;
}

uint64_t RequestItem.operationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RequestItem(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB550);
}

uint64_t type metadata accessor for RequestItem._StorageClass(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CBA90);
}

uint64_t RequestItem.recordID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.zoneName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 64) = a1;
  *(void *)(v9 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.ownerID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 80) = a1;
  *(void *)(v9 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.resourceFingerprint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 112) = a1;
  *(void *)(v9 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.records.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = sub_100100A48(v5);
    swift_release();
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  swift_beginAccess();
  *(void *)(v7 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.srcFieldName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 48) = a1;
  *(void *)(v9 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.downloadType.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  uint64_t result = swift_beginAccess();
  *(void *)(v9 + 96) = a1;
  *(unsigned char *)(v9 + 104) = a2 & 1;
  return result;
}

uint64_t RequestItem.timeRange.setter(uint64_t a1)
{
  return sub_1000EFA1C(a1, &qword_1002CAD80, type metadata accessor for CMTimeRange, type metadata accessor for CMTimeRange, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange);
}

uint64_t RequestItem.mediaTypeHint.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = sub_100100A48(v5);
    swift_release();
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = (void *)(*(void *)(v2 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  swift_beginAccess();
  *uint64_t v7 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.videoProfileTierLevelInformation.setter(uint64_t a1)
{
  return sub_1000EFA1C(a1, &qword_1002CAD98, type metadata accessor for VideoHEVCProfileTierLevelInformation, type metadata accessor for VideoHEVCProfileTierLevelInformation, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation);
}

uint64_t sub_1000EFA1C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v10 = v5;
  uint64_t v12 = sub_1000D0514(a2);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v25 = a3;
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v19 = swift_retain();
    uint64_t v20 = sub_100100A48(v19);
    a3 = v25;
    swift_release();
    *(void *)(v10 + v18) = v20;
    swift_release();
  }
  uint64_t v21 = *(void *)(v10 + v18);
  sub_10010124C(a1, (uint64_t)v17, a3);
  uint64_t v22 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 0, 1, v22);
  sub_1001012D4((uint64_t)v17, (uint64_t)v15, a2);
  uint64_t v23 = v21 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_100101338((uint64_t)v15, v23, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t RequestItem.apacAudioTrackChannelCount.setter(int a1)
{
  return sub_1000EFC10(a1, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
}

uint64_t RequestItem.apacAudioTrackHoachannelCount.setter(int a1)
{
  return sub_1000EFC10(a1, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
}

uint64_t sub_1000EFC10(int a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_100100A48(v7);
    swift_release();
    *(void *)(v4 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = (_DWORD *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v9 = a1;
  return result;
}

uint64_t RequestItem.apacAudioTrackBedchannelCount.setter(int a1)
{
  return sub_1000EFC10(a1, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
}

uint64_t RequestItem.apacAudioTrackCodecProfileLevelDescription.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000EFCF0(a1, a2, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
}

uint64_t RequestItem.cameraMake.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000EFCF0(a1, a2, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
}

uint64_t sub_1000EFCF0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_100100A48(v9);
    swift_release();
    *(void *)(v5 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (void *)(*(void *)(v5 + v8) + *a3);
  swift_beginAccess();
  void *v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestItem.cameraModel.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000EFCF0(a1, a2, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
}

uint64_t RequestItem.clientSupportsProMotionDisplay.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = sub_100100A48(v5);
    swift_release();
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = (unsigned char *)(*(void *)(v2 + v4)
               + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  uint64_t result = swift_beginAccess();
  *uint64_t v7 = a1 & 1;
  return result;
}

uint64_t ResponseItem.assetRecord.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CA468);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ResponseItem(0);
  sub_1000E200C(v1 + *(int *)(v6 + 52), (uint64_t)v5, &qword_1002CA468);
  uint64_t v7 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  }
  Ckcode_RecordTransport.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CA468);
}

uint64_t UploadResourcesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for UploadResourcesRequest, a1);
}

uint64_t UploadResource.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = &_swiftEmptyArrayStorage;
  type metadata accessor for UploadResource(0);
  return UnknownStorage.init()();
}

uint64_t ResourceType.init(rawValue:)(uint64_t a1)
{
  return sub_1000F053C(a1, (uint64_t (*)(void))sub_1001013FC);
}

BOOL ResponseItem.hasAssetRecord.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CA468);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ResponseItem(0);
  sub_1000E200C(v0 + *(int *)(v4 + 52), (uint64_t)v3, &qword_1002CA468);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport();
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CA468);
  return v6;
}

uint64_t sub_1000F0128(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10010186C();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000F0174()
{
  static DownloadType.allCases = (uint64_t)&off_10027B700;
}

uint64_t *DownloadType.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CA8 != -1) {
    swift_once();
  }
  return &static DownloadType.allCases;
}

uint64_t static DownloadType.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CA8);
}

uint64_t static DownloadType.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CA8, &static DownloadType.allCases);
}

uint64_t (*static DownloadType.allCases.modify())()
{
  if (qword_1002C9CA8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000F02A4@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CA8, &static DownloadType.allCases, a1);
}

uint64_t ItemErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000F053C(a1, (uint64_t (*)(void))sub_100101410);
}

uint64_t ItemErrorCode.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_10024E478[result];
  }
  return result;
}

uint64_t sub_1000F02F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F07DC((uint64_t (*)(void))sub_100101410, a1);
}

uint64_t sub_1000F030C()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_10024E478[result];
  }
  return result;
}

uint64_t sub_1000F032C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F0838(a1, sub_100101410, a2);
}

void sub_1000F0344(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_10024E478[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000F0368(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100101818();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F03B4(uint64_t a1, uint64_t a2)
{
  return sub_1000C88FC(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void sub_1000F03D0()
{
  static ItemErrorCode.allCases = (uint64_t)&off_10027B750;
}

uint64_t *ItemErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CB0 != -1) {
    swift_once();
  }
  return &static ItemErrorCode.allCases;
}

uint64_t static ItemErrorCode.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CB0);
}

uint64_t static ItemErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CB0, &static ItemErrorCode.allCases);
}

uint64_t (*static ItemErrorCode.allCases.modify())()
{
  if (qword_1002C9CB0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000F0500@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CB0, &static ItemErrorCode.allCases, a1);
}

uint64_t BatchErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000F053C(a1, (uint64_t (*)(void))sub_1001014F0);
}

uint64_t sub_1000F053C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t BatchErrorCode.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_10024E458[result];
  }
  return result;
}

uint64_t sub_1000F0578@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F07DC((uint64_t (*)(void))sub_1001014F0, a1);
}

uint64_t sub_1000F0590()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_10024E458[result];
  }
  return result;
}

uint64_t sub_1000F05B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F0838(a1, sub_1001014F0, a2);
}

void sub_1000F05C8(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_10024E458[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000F05EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001017C4();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F0638(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v2 = qword_10024E458[v2];
  }
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v3 = qword_10024E458[v3];
  }
  return v2 == v3;
}

void sub_1000F0670()
{
  static BatchErrorCode.allCases = (uint64_t)&off_10027B7F0;
}

uint64_t *BatchErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CB8 != -1) {
    swift_once();
  }
  return &static BatchErrorCode.allCases;
}

uint64_t static BatchErrorCode.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CB8);
}

uint64_t static BatchErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CB8, &static BatchErrorCode.allCases);
}

uint64_t (*static BatchErrorCode.allCases.modify())()
{
  if (qword_1002C9CB8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000F07A0@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CB8, &static BatchErrorCode.allCases, a1);
}

uint64_t sub_1000F07C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F07DC((uint64_t (*)(void))sub_1001013FC, a1);
}

uint64_t sub_1000F07DC@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_1000F0814()
{
  return Goldilocks_ExitType.rawValue.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8));
}

uint64_t sub_1000F0820@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F0838(a1, (uint64_t (*)(void))sub_1001013FC, a2);
}

uint64_t sub_1000F0838@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_1000F0874@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Goldilocks_ExitType.rawValue.getter(*(void *)v1, *(unsigned __int8 *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t sub_1000F08A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001018C0();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000F08F0(uint64_t a1, uint64_t *a2)
{
  return sub_1000C88CC(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_1000F090C()
{
  static ResourceType.allCases = (uint64_t)&off_10027B850;
}

uint64_t *ResourceType.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CC0 != -1) {
    swift_once();
  }
  return &static ResourceType.allCases;
}

uint64_t static ResourceType.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CC0);
}

uint64_t static ResourceType.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CC0, &static ResourceType.allCases);
}

uint64_t (*static ResourceType.allCases.modify())()
{
  if (qword_1002C9CC0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000F0A3C@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CC0, &static ResourceType.allCases, a1);
}

uint64_t sub_1000F0A60(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100101914();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000F0AAC()
{
  static UploadRecordType.allCases = (uint64_t)&off_10027BA40;
}

uint64_t *UploadRecordType.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CC8 != -1) {
    swift_once();
  }
  return &static UploadRecordType.allCases;
}

uint64_t static UploadRecordType.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CC8);
}

uint64_t static UploadRecordType.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CC8, &static UploadRecordType.allCases);
}

uint64_t (*static UploadRecordType.allCases.modify())()
{
  if (qword_1002C9CC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000F0BDC@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CC8, &static UploadRecordType.allCases, a1);
}

uint64_t ResourceAnalyzeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for ResourceAnalyzeRequest, a1);
}

uint64_t ResourceAnalyzeRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t (*ResourceAnalyzeRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for ResourceAnalyzeRequest, a1);
}

uint64_t sub_1000F0C90@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchID.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.recordIdsToMove.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0F4C(type metadata accessor for ResourceAnalyzeResponse, a1);
}

uint64_t ResourceAnalyzeResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0FE4(a1, type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t (*ResourceAnalyzeResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F10C0((void (*)(void))type metadata accessor for ResourceAnalyzeResponse, a1);
}

uint64_t ResourceDownloadRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for ResourceDownloadRequest, a1);
}

uint64_t sub_1000F0DC0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t ResourceDownloadRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_1000F0E58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*ResourceDownloadRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceDownloadRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for ResourceDownloadRequest, a1);
}

uint64_t ResourceDownloadResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0F4C(type metadata accessor for ResourceDownloadResponse, a1);
}

uint64_t sub_1000F0F4C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t ResourceDownloadResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0FE4(a1, type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_1000F0FE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*ResourceDownloadResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceDownloadResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F10C0((void (*)(void))type metadata accessor for ResourceDownloadResponse, a1);
}

uint64_t sub_1000F10C0@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0xE000000000000000;
  *(void *)(a2 + 40) = 0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t ResourceStreamRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for ResourceStreamRequest, a1);
}

uint64_t ResourceStreamRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for ResourceStreamRequest);
}

uint64_t (*ResourceStreamRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceStreamRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for ResourceStreamRequest, a1);
}

uint64_t Goldilocks_ExitMoveBatchResponse.batchID.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Goldilocks_ExitMoveBatchResponse.batchID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t ResourceStreamResponse.retryAfterMillis.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ResourceStreamResponse.retryAfterMillis.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t ResourceStreamResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0F4C(type metadata accessor for ResourceStreamResponse, a1);
}

uint64_t ResourceStreamResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0FE4(a1, type metadata accessor for ResourceStreamResponse);
}

uint64_t (*ResourceStreamResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceStreamResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F10C0((void (*)(void))type metadata accessor for ResourceStreamResponse, a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.profile.getter()
{
  return *v0;
}

uint64_t VideoHEVCProfileTierLevelInformation.profile.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t VideoHEVCProfileTierLevelInformation.tier.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t VideoHEVCProfileTierLevelInformation.tier.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*VideoHEVCProfileTierLevelInformation.tier.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t CMTime.timescale.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t CMTime.timescale.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t VideoHEVCProfileTierLevelInformation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4754(type metadata accessor for VideoHEVCProfileTierLevelInformation, a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.unknownFields.setter(uint64_t a1)
{
  return sub_1000F47EC(a1, type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t (*VideoHEVCProfileTierLevelInformation.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t VideoHEVCProfileTierLevelInformation.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  return UnknownStorage.init()();
}

uint64_t RequestItem.operationID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.operationID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F14A4;
}

void sub_1000F14A4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.recordID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.recordID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 40);
  v3[9] = *(void *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F1708;
}

void sub_1000F1708(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 32) = v3;
    *(void *)(v9 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 32) = v3;
    *(void *)(v14 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.srcFieldName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.srcFieldName.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 56);
  v3[9] = *(void *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F196C;
}

void sub_1000F196C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 48) = v3;
    *(void *)(v9 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 48) = v3;
    *(void *)(v14 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.zoneName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.zoneName.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 72);
  v3[9] = *(void *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F1BD0;
}

void sub_1000F1BD0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 64) = v3;
    *(void *)(v9 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 64) = v3;
    *(void *)(v14 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.ownerID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.ownerID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 88);
  v3[9] = *(void *)(v5 + 80);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F1E34;
}

void sub_1000F1E34(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 80) = v3;
    *(void *)(v9 + 88) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 80) = v3;
    *(void *)(v14 + 88) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.downloadType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  return *(void *)(v1 + 96);
}

void (*RequestItem.downloadType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 104);
  v3[9] = *(void *)(v5 + 96);
  *((unsigned char *)v3 + 80) = v6;
  return sub_1000F208C;
}

void sub_1000F208C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_100100A48(v9);
    swift_release();
    *(void *)(v8 + v7) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v11 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v11 + 96) = v4;
  *(unsigned char *)(v11 + 104) = v5;
  free((void *)v3);
}

uint64_t RequestItem.resourceFingerprint.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  swift_bridgeObjectRetain();
  return v2;
}

void (*RequestItem.resourceFingerprint.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 120);
  v3[9] = *(void *)(v5 + 112);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F226C;
}

void sub_1000F226C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_100100A48(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 112) = v3;
    *(void *)(v9 + 120) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_100100A48(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 112) = v3;
    *(void *)(v14 + 120) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.records.getter()
{
  return swift_bridgeObjectRetain();
}

void (*RequestItem.records.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(void *)(v5 + 128);
  swift_bridgeObjectRetain();
  return sub_1000F24C4;
}

void sub_1000F24C4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v6 = swift_retain();
      uint64_t v7 = sub_100100A48(v6);
      swift_release();
      *(void *)(v5 + v4) = v7;
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(void *)(v8 + 128) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 88);
      uint64_t v10 = *(void *)(v2 + 80);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      uint64_t v12 = sub_100100A48(v11);
      swift_release();
      *(void *)(v10 + v9) = v12;
      swift_release();
    }
    uint64_t v13 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(void *)(v13 + 128) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.timeRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CAD80);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20))
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  swift_beginAccess();
  sub_1000E200C(v6, (uint64_t)v5, &qword_1002CAD80);
  uint64_t v7 = type metadata accessor for CMTimeRange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10010124C((uint64_t)v5, a1, type metadata accessor for CMTimeRange);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CMTime(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + *(int *)(v7 + 24), 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CAD80);
}

void (*RequestItem.timeRange.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CAD80);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  void v3[4] = v5;
  uint64_t v6 = type metadata accessor for CMTimeRange(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20))
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  swift_beginAccess();
  sub_1000E200C(v10, (uint64_t)v5, &qword_1002CAD80);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for CMTime(0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(&v9[*(int *)(v6 + 24)], 1, 1, v12);
    sub_1000E27E8((uint64_t)v5, &qword_1002CAD80);
  }
  else
  {
    sub_10010124C((uint64_t)v5, (uint64_t)v9, type metadata accessor for CMTimeRange);
  }
  return sub_1000F2A08;
}

void sub_1000F2A08(uint64_t a1, char a2)
{
}

BOOL RequestItem.hasTimeRange.getter()
{
  return sub_1000F310C(&qword_1002CAD80, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange, type metadata accessor for CMTimeRange);
}

Swift::Void __swiftcall RequestItem.clearTimeRange()()
{
}

uint64_t RequestItem.mediaTypeHint.getter()
{
  return swift_bridgeObjectRetain();
}

void (*RequestItem.mediaTypeHint.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1000F2B7C;
}

void sub_1000F2B7C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v6 = swift_retain();
      uint64_t v7 = sub_100100A48(v6);
      swift_release();
      *(void *)(v5 + v4) = v7;
      swift_release();
    }
    size_t v8 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
    swift_beginAccess();
    void *v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 88);
      uint64_t v10 = *(void *)(v2 + 80);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      uint64_t v12 = sub_100100A48(v11);
      swift_release();
      *(void *)(v10 + v9) = v12;
      swift_release();
    }
    uint64_t v13 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
    swift_beginAccess();
    *uint64_t v13 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t RequestItem.videoProfileTierLevelInformation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CAD98);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20))
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  swift_beginAccess();
  sub_1000E200C(v6, (uint64_t)v5, &qword_1002CAD98);
  uint64_t v7 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10010124C((uint64_t)v5, a1, type metadata accessor for VideoHEVCProfileTierLevelInformation);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CAD98);
}

void (*RequestItem.videoProfileTierLevelInformation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CAD98);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  void v3[4] = v5;
  uint64_t v6 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20))
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  swift_beginAccess();
  sub_1000E200C(v10, (uint64_t)v5, &qword_1002CAD98);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v9 = 0;
    v9[2] = 0;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CAD98);
  }
  else
  {
    sub_10010124C((uint64_t)v5, (uint64_t)v9, type metadata accessor for VideoHEVCProfileTierLevelInformation);
  }
  return sub_1000F3008;
}

void sub_1000F3008(uint64_t a1, char a2)
{
}

void sub_1000F3034(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_100101614(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_10010167C((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL RequestItem.hasVideoProfileTierLevelInformation.getter()
{
  return sub_1000F310C(&qword_1002CAD98, &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation, type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

BOOL sub_1000F310C(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000D0514(a1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for RequestItem(0) + 20)) + *a2;
  swift_beginAccess();
  sub_1000E200C(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_1000E27E8((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall RequestItem.clearVideoProfileTierLevelInformation()()
{
}

uint64_t sub_1000F3248(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_1000D0514(a1);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_100100A48(v12);
    swift_release();
    *(void *)(v7 + v11) = v13;
    swift_release();
  }
  uint64_t v14 = *(void *)(v7 + v11);
  uint64_t v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_100101338((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t RequestItem.apacAudioTrackChannelCount.getter()
{
  return sub_1000F3470(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
}

void (*RequestItem.apacAudioTrackChannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000F3458;
}

void sub_1000F3458(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.apacAudioTrackHoachannelCount.getter()
{
  return sub_1000F3470(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
}

uint64_t sub_1000F3470(void *a1)
{
  uint64_t v2 = (unsigned int *)(*(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20)) + *a1);
  swift_beginAccess();
  return *v2;
}

void (*RequestItem.apacAudioTrackHoachannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000F355C;
}

void sub_1000F355C(uint64_t *a1, char a2)
{
}

void sub_1000F3568(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_100100A48(v10);
    swift_release();
    *(void *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (_DWORD *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3);
  swift_beginAccess();
  *uint64_t v12 = v6;
  free((void *)v5);
}

uint64_t RequestItem.apacAudioTrackBedchannelCount.getter()
{
  return sub_1000F3470(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
}

void (*RequestItem.apacAudioTrackBedchannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000F3700;
}

void sub_1000F3700(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.cameraMake.getter()
{
  return sub_1000F37CC(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
}

void (*RequestItem.cameraMake.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F37B4;
}

void sub_1000F37B4(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.cameraModel.getter()
{
  return sub_1000F37CC(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
}

uint64_t sub_1000F37CC(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0) + 20)) + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

void (*RequestItem.cameraModel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F38D0;
}

void sub_1000F38D0(uint64_t *a1, char a2)
{
}

void sub_1000F38DC(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v7 = *(int *)(v4 + 96);
      uint64_t v8 = *(void *)(v4 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v9 = swift_retain();
      uint64_t v10 = sub_100100A48(v9);
      swift_release();
      *(void *)(v8 + v7) = v10;
      swift_release();
    }
    uint64_t v11 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    void *v11 = v5;
    v11[1] = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = *(int *)(v4 + 96);
      uint64_t v13 = *(void *)(v4 + 88);
      type metadata accessor for RequestItem._StorageClass(0);
      swift_allocObject();
      uint64_t v14 = swift_retain();
      uint64_t v15 = sub_100100A48(v14);
      swift_release();
      *(void *)(v13 + v12) = v15;
      swift_release();
    }
    uint64_t v16 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *uint64_t v16 = v5;
    v16[1] = v6;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

uint64_t RequestItem.apacAudioTrackCodecProfileLevelDescription.getter()
{
  return sub_1000F37CC(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
}

void (*RequestItem.apacAudioTrackCodecProfileLevelDescription.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1000F3B18;
}

void sub_1000F3B18(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.clientSupportsProMotionDisplay.getter()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0) + 20))
                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess();
  return *v1;
}

void (*RequestItem.clientSupportsProMotionDisplay.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5;
  return sub_1000F3C10;
}

void sub_1000F3C10(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    uint64_t v9 = sub_100100A48(v8);
    swift_release();
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess();
  unsigned char *v10 = v4;
  free((void *)v3);
}

unint64_t sub_1000F3D04@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void *sub_1000F3D1C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1000F3D38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100107478();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t RequestItem.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if (qword_1002C9D40 != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = qword_1002CAD78;
  return swift_retain();
}

void sub_1000F3E00()
{
  static RequestItem.MediaTypeHint.allCases = (uint64_t)&off_10027BA90;
}

uint64_t *RequestItem.MediaTypeHint.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9CD0 != -1) {
    swift_once();
  }
  return &static RequestItem.MediaTypeHint.allCases;
}

uint64_t static RequestItem.MediaTypeHint.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9CD0);
}

uint64_t static RequestItem.MediaTypeHint.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9CD0, &static RequestItem.MediaTypeHint.allCases);
}

uint64_t (*static RequestItem.MediaTypeHint.allCases.modify())()
{
  if (qword_1002C9CD0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1000F3F30@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9CD0, &static RequestItem.MediaTypeHint.allCases, a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorDomain.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t ResponseItem.assetRecord.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0) + 52);
  sub_1000E27E8(v3, &qword_1002CA468);
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(v3, 0, 1, v4);
}

void (*ResponseItem.assetRecord.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CA468);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport();
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for ResponseItem(0) + 52);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CA468);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CA468);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v5, v6);
  }
  return sub_1000F4220;
}

void sub_1000F4220(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v7 + 16))(*(void *)(*(void *)a1 + 32), v5, v6);
    sub_1000E27E8(v9, &qword_1002CA468);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v4, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    sub_1000E27E8(**(void **)a1 + v3, &qword_1002CA468);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

Swift::Void __swiftcall ResponseItem.clearAssetRecord()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ResponseItem(0) + 52);
  sub_1000E27E8(v1, &qword_1002CA468);
  uint64_t v2 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t ResponseItem.errorMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ResponseItem.errorMessage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.exitSource.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t Goldilocks_InitiateExitRequest.exitSource.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.exitSource.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.downloadEstimatedSize.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t ResponseItem.downloadEstimatedSize.setter(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t ResponseItem.errorCode.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ResponseItem.errorCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 96) = result;
  *(unsigned char *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t (*ResponseItem.errorCode.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t ResponseItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*ResponseItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v2 = type metadata accessor for ResponseItem(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t CMTime.value.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t ResetInterval.endTimestamp.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ResetInterval.endTimestamp.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t Goldilocks_DuplicateState.foundDuplicates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Goldilocks_DuplicateState.foundDuplicates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t ResetInterval.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4754(type metadata accessor for ResetInterval, a1);
}

uint64_t sub_1000F4754@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t ResetInterval.unknownFields.setter(uint64_t a1)
{
  return sub_1000F47EC(a1, type metadata accessor for ResetInterval);
}

uint64_t sub_1000F47EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*ResetInterval.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResetInterval.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = &_swiftEmptyArrayStorage;
  type metadata accessor for ResetInterval(0);
  return UnknownStorage.init()();
}

uint64_t Goldilocks_InitiateExitRequest.participantUserIdsToRemove.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Goldilocks_InitiateExitRequest.participantUserIdsToRemove.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t UploadResource.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0F4C(type metadata accessor for UploadResource, a1);
}

uint64_t UploadResource.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0FE4(a1, type metadata accessor for UploadResource);
}

uint64_t (*UploadResource.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for UploadResourcesRequest, a1);
}

uint64_t UploadResourcesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for UploadResourcesRequest);
}

uint64_t (*UploadResourcesRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalImages.getter()
{
  return *v0;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalImages.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.skipUploadResources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UploadResourcesResponse.skipUploadResources.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t UploadResourcesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4754(type metadata accessor for UploadResourcesResponse, a1);
}

uint64_t UploadResourcesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000F47EC(a1, type metadata accessor for UploadResourcesResponse);
}

uint64_t (*UploadResourcesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = &_swiftEmptyArrayStorage;
  type metadata accessor for UploadResourcesResponse(0);
  return UnknownStorage.init()();
}

uint64_t Goldilocks_ExitMoveBatchResponse.movesComplete.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Goldilocks_ExitMoveBatchResponse.movesComplete.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t UntranscodableItem.ownerDsid.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UntranscodableItem.ownerDsid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.participantIdsToRemove.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableItem.referenceChecksumHex.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UntranscodableItem.referenceChecksumHex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t UntranscodableItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UntranscodableItem(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t UntranscodableItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UntranscodableItem(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*UntranscodableItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableItem.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xE000000000000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xE000000000000000;
  type metadata accessor for UntranscodableItem(0);
  return UnknownStorage.init()();
}

uint64_t UntranscodableRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for UntranscodableRequest, a1);
}

uint64_t UntranscodableRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for UntranscodableRequest);
}

uint64_t (*UntranscodableRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for UntranscodableRequest, a1);
}

uint64_t UntranscodableResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F0DC0(type metadata accessor for UntranscodableResponse, a1);
}

uint64_t UntranscodableResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000F0E58(a1, type metadata accessor for UntranscodableResponse);
}

uint64_t (*UntranscodableResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1000F0C90((void (*)(void))type metadata accessor for UntranscodableResponse, a1);
}

uint64_t sub_1000F4EF0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static DownloadType._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static DownloadType._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "DEFAULT";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "MMCS";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "TRANSCODE";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t DownloadType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CD8, (uint64_t)static DownloadType._protobuf_nameMap);
}

uint64_t static DownloadType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CD8, (uint64_t)static DownloadType._protobuf_nameMap, a1);
}

uint64_t sub_1000F5138@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CD8, (uint64_t)static DownloadType._protobuf_nameMap, a1);
}

uint64_t sub_1000F515C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ItemErrorCode._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ItemErrorCode._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10024C2F0;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "NO_ITEM_ERROR";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 101;
  *(void *)unint64_t v9 = "ZONE_NOT_FOUND";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 102;
  *(void *)uint64_t v11 = "RECORD_NOT_FOUND";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 103;
  *(void *)uint64_t v13 = "RESOURCE_NOT_FOUND";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 104;
  *(void *)uint64_t v15 = "STALE_FINGERPRINT";
  *((void *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 105;
  *(void *)uint64_t v17 = "INVALID_REQUEST";
  *((void *)v17 + 1) = 15;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 201;
  *(void *)uint64_t v19 = "SERVER_ITEM_ERROR";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 301;
  *(void *)uint64_t v21 = "NOT_TRANSCODABLE";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ItemErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CE0, (uint64_t)static ItemErrorCode._protobuf_nameMap);
}

uint64_t static ItemErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CE0, (uint64_t)static ItemErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000F54E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CE0, (uint64_t)static ItemErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000F5504()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static BatchErrorCode._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static BatchErrorCode._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "NO_BATCH_ERROR";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 101;
  *(void *)unint64_t v10 = "FEATURE_DISABLED";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 102;
  *(void *)uint64_t v12 = "THROTTLED";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 201;
  *(void *)uint64_t v14 = "SERVER_BATCH_ERROR";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t BatchErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CE8, (uint64_t)static BatchErrorCode._protobuf_nameMap);
}

uint64_t static BatchErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CE8, (uint64_t)static BatchErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000F5784@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CE8, (uint64_t)static BatchErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_1000F57A8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResourceType._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResourceType._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_10024C300;
  unint64_t v4 = v63 + v3;
  unint64_t v5 = v63 + v3 + v1[14];
  *(void *)(v63 + v3) = 0;
  *(void *)unint64_t v5 = "CPLResourceTypeUnknown";
  *(void *)(v5 + 8) = 22;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v63 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "CPLResourceTypeOriginal";
  *(void *)(v9 + 8) = 23;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v63 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "CPLResourceTypeJPEGFullSize";
  *((void *)v11 + 1) = 27;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v63 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "CPLResourceTypeJPEGLargeSize";
  *((void *)v13 + 1) = 28;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v63 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)uint64_t v15 = "CPLResourceTypeJPEGMediumSize";
  *((void *)v15 + 1) = 29;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v63 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "CPLResourceTypeJPEGThumbnail";
  *((void *)v17 + 1) = 28;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v63 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "CPLResourceTypeVideoMediumSize";
  *((void *)v19 + 1) = 30;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v63 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "CPLResourceTypeVideoSmallSize";
  *((void *)v21 + 1) = 29;
  v21[16] = 2;
  v8();
  uint64_t v22 = v63 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "CPLResourceTypeSidecarAudio";
  *(void *)(v22 + 8) = 27;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v63 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "CPLResourceTypeSidecarXMP";
  *((void *)v24 + 1) = 25;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v63 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "CPLResourceTypeMediaMetaData";
  *((void *)v26 + 1) = 28;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v63 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "CPLResourceTypeUnused1";
  *((void *)v28 + 1) = 22;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v63 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "CPLResourceTypeUnused2";
  *((void *)v30 + 1) = 22;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v63 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 13;
  *(void *)uint64_t v32 = "CPLResourceTypeAdjustmentData";
  *((void *)v32 + 1) = 29;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v63 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *uint64_t v33 = 14;
  *(void *)uint64_t v34 = "CPLResourceTypeAdjustmentSecondaryData";
  *((void *)v34 + 1) = 38;
  v34[16] = 2;
  v8();
  int v35 = (void *)(v63 + v3 + 15 * v2);
  int v36 = (char *)v35 + v1[14];
  *int v35 = 15;
  *(void *)int v36 = "CPLResourceTypeAdjustmentBaseJPEGFullSize";
  *((void *)v36 + 1) = 41;
  v36[16] = 2;
  v8();
  uint64_t v37 = v63 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "CPLResourceTypeVideoFullSize";
  *(void *)(v37 + 8) = 28;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  long long v38 = (void *)(v63 + v3 + 17 * v2);
  int v39 = (char *)v38 + v1[14];
  *long long v38 = 17;
  *(void *)int v39 = "CPLResourceTypeOriginalAlternate";
  *((void *)v39 + 1) = 32;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v63 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 18;
  *(void *)uint64_t v41 = "CPLResourceTypeOriginalVideoComplement";
  *((void *)v41 + 1) = 38;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v63 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 19;
  *(void *)uint64_t v43 = "CPLResourceTypeVideoComplement";
  *((void *)v43 + 1) = 30;
  uint64_t v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v63 + v3 + 20 * v2);
  uint64_t v45 = (char *)v44 + v1[14];
  *uint64_t v44 = 20;
  *(void *)uint64_t v45 = "CPLResourceTypeAdjustmentBaseVideoComplement";
  *((void *)v45 + 1) = 44;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v63 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 21;
  *(void *)uint64_t v47 = "CPLResourceTypeVideoLargeSize";
  *((void *)v47 + 1) = 29;
  v47[16] = 2;
  v8();
  uint64_t v48 = (void *)(v63 + v3 + 22 * v2);
  uint64_t v49 = (char *)v48 + v1[14];
  void *v48 = 22;
  *(void *)uint64_t v49 = "CPLResourceTypeSidecarOther";
  *((void *)v49 + 1) = 27;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v63 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  void *v50 = 23;
  *(void *)uint64_t v51 = "CPLResourceTypeOriginalSpatialOverCapture";
  *((void *)v51 + 1) = 41;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v63 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  void *v52 = 24;
  *(void *)uint64_t v53 = "CPLResourceTypeOriginalSpatialOverCaptureVideoComplement";
  *((void *)v53 + 1) = 56;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v63 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "CPLResourceTypeAdjustmentBaseVideo";
  *((void *)v55 + 1) = 34;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v63 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 26;
  *(void *)uint64_t v57 = "CPLResourceTypeVideoMetaData";
  *((void *)v57 + 1) = 28;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v63 + v3 + 27 * v2);
  id v59 = (char *)v58 + v1[14];
  void *v58 = 27;
  *(void *)id v59 = "CPLResourceTypeAdjustedMediaMetaData";
  *((void *)v59 + 1) = 36;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v63 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "CPLResourceTypeVideoHDRMediumSize";
  *((void *)v61 + 1) = 33;
  v61[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResourceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CF0, (uint64_t)static ResourceType._protobuf_nameMap);
}

uint64_t static ResourceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CF0, (uint64_t)static ResourceType._protobuf_nameMap, a1);
}

uint64_t sub_1000F6014@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CF0, (uint64_t)static ResourceType._protobuf_nameMap, a1);
}

uint64_t sub_1000F6038()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static UploadRecordType._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static UploadRecordType._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "Master";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "Asset";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UploadRecordType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9CF8, (uint64_t)static UploadRecordType._protobuf_nameMap);
}

uint64_t static UploadRecordType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9CF8, (uint64_t)static UploadRecordType._protobuf_nameMap, a1);
}

uint64_t sub_1000F6280@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9CF8, (uint64_t)static UploadRecordType._protobuf_nameMap, a1);
}

void *ResourceAnalyzeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceAnalyzeRequest.protoMessageName;
}

unint64_t static ResourceAnalyzeRequest.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000F62CC(uint64_t a1)
{
  return sub_1000FE748(a1, static ResourceAnalyzeRequest._protobuf_nameMap, (uint64_t)"items", 5);
}

uint64_t ResourceAnalyzeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D00, (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap);
}

uint64_t static ResourceAnalyzeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D00, (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap, a1);
}

uint64_t ResourceDownloadRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE8EC(a1, a2, a3, (void (*)(void))type metadata accessor for RequestItem, &qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t ResourceAnalyzeRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7348(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t static ResourceAnalyzeRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_1001242A8, type metadata accessor for ResourceAnalyzeRequest) & 1;
}

Swift::Int ResourceAnalyzeRequest.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceAnalyzeRequest, &qword_1002CADE0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t sub_1000F6440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000F6458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceAnalyzeRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F6470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDE0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F64EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D00, (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000F6510()
{
  sub_10010177C(&qword_1002CAFA0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F657C()
{
  sub_10010177C(&qword_1002CAFA0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
  return Message.hash(into:)();
}

void *ResourceAnalyzeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceAnalyzeResponse.protoMessageName;
}

unint64_t static ResourceAnalyzeResponse.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000F6620()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResourceAnalyzeResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "items";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "errorCode";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "errorMessage";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "retryAfterMillis";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResourceAnalyzeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D08, (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap);
}

uint64_t static ResourceAnalyzeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D08, (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap, a1);
}

uint64_t ResourceDownloadResponse.decodeMessage<A>(decoder:)()
{
  return sub_1000F7944();
}

uint64_t ResourceAnalyzeResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7AF8(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceAnalyzeResponse);
}

Swift::Int ResourceAnalyzeResponse.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceAnalyzeResponse, &qword_1002CADF8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t sub_1000F693C()
{
  return ResourceDownloadResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000F6954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceAnalyzeResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F696C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDD8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F69E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D08, (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000F6A0C()
{
  sub_10010177C(&qword_1002CAFB8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F6A78()
{
  sub_10010177C(&qword_1002CAFB8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
  return Message.hash(into:)();
}

void *ResourceDownloadRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceDownloadRequest.protoMessageName;
}

unint64_t static ResourceDownloadRequest.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000F6B1C(uint64_t a1)
{
  return sub_1000FE748(a1, static ResourceDownloadRequest._protobuf_nameMap, (uint64_t)"items", 5);
}

uint64_t ResourceDownloadRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D10, (uint64_t)static ResourceDownloadRequest._protobuf_nameMap);
}

uint64_t static ResourceDownloadRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D10, (uint64_t)static ResourceDownloadRequest._protobuf_nameMap, a1);
}

uint64_t ResourceDownloadRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7348(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceDownloadRequest);
}

uint64_t static ResourceDownloadRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_1001242A8, type metadata accessor for ResourceDownloadRequest) & 1;
}

Swift::Int ResourceDownloadRequest.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceDownloadRequest, &qword_1002CAE00, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_1000F6C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F6C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDD0, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F6CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D10, (uint64_t)static ResourceDownloadRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000F6CEC()
{
  sub_10010177C(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F6D58()
{
  sub_10010177C(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
  return Message.hash(into:)();
}

void *ResourceDownloadResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceDownloadResponse.protoMessageName;
}

unint64_t static ResourceDownloadResponse.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_1000F6DFC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResourceDownloadResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResourceDownloadResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "items";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "errorCode";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "errorMessage";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "retryAfterMillis";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResourceDownloadResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D18, (uint64_t)static ResourceDownloadResponse._protobuf_nameMap);
}

uint64_t static ResourceDownloadResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D18, (uint64_t)static ResourceDownloadResponse._protobuf_nameMap, a1);
}

uint64_t ResourceDownloadResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7AF8(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceDownloadResponse);
}

Swift::Int ResourceDownloadResponse.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceDownloadResponse, &qword_1002CAE08, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_1000F70F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F710C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDC8, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7188@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D18, (uint64_t)static ResourceDownloadResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000F71AC()
{
  sub_10010177C(&qword_1002CA488, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F7218()
{
  sub_10010177C(&qword_1002CA488, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
  return Message.hash(into:)();
}

void *ResourceStreamRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceStreamRequest.protoMessageName;
}

unint64_t static ResourceStreamRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000F72BC(uint64_t a1)
{
  return sub_1000FE748(a1, static ResourceStreamRequest._protobuf_nameMap, (uint64_t)"items", 5);
}

uint64_t ResourceStreamRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D20, (uint64_t)static ResourceStreamRequest._protobuf_nameMap);
}

uint64_t static ResourceStreamRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D20, (uint64_t)static ResourceStreamRequest._protobuf_nameMap, a1);
}

uint64_t ResourceStreamRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7348(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_1000F7348(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for RequestItem(0),
        sub_10010177C(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static ResourceStreamRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_1001242A8, type metadata accessor for ResourceStreamRequest) & 1;
}

Swift::Int ResourceStreamRequest.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceStreamRequest, &qword_1002CAE10, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_1000F74D0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000F74FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceStreamRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F7514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDC0, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7590@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D20, (uint64_t)static ResourceStreamRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000F75B4()
{
  sub_10010177C(&qword_1002CA510, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F7620()
{
  sub_10010177C(&qword_1002CA510, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
  return Message.hash(into:)();
}

void *ResourceStreamResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceStreamResponse.protoMessageName;
}

unint64_t static ResourceStreamResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000F76C4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResourceStreamResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResourceStreamResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "items";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "errorCode";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "errorMessage";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "retryAfterMillis";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResourceStreamResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D28, (uint64_t)static ResourceStreamResponse._protobuf_nameMap);
}

uint64_t static ResourceStreamResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D28, (uint64_t)static ResourceStreamResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000F7944()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for ResponseItem(0);
          sub_10010177C(&qword_1002CADF0, (void (*)(uint64_t))type metadata accessor for ResponseItem);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          sub_1001017C4();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ResourceStreamResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7AF8(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_1000F7AF8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*v4 + 16)
    || (type metadata accessor for ResponseItem(0),
        sub_10010177C(&qword_1002CADF0, (void (*)(uint64_t))type metadata accessor for ResponseItem),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v5))
  {
    if (!v4[1]
      || (sub_1001017C4(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v5))
    {
      unint64_t v8 = v4[4];
      uint64_t v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v9 = v4[3] & 0xFFFFFFFFFFFFLL;
      }
      if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
      {
        if (!v4[5] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v5))
        {
          a4(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int ResourceStreamResponse.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResourceStreamResponse, &qword_1002CAE18, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_1000F7CDC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000F7D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceStreamResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F7D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDB8, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7DB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D28, (uint64_t)static ResourceStreamResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000F7DD4()
{
  sub_10010177C(&qword_1002CA528, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F7E40()
{
  sub_10010177C(&qword_1002CA528, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
  return Message.hash(into:)();
}

void *VideoHEVCProfileTierLevelInformation.protoMessageName.unsafeMutableAddressor()
{
  return &static VideoHEVCProfileTierLevelInformation.protoMessageName;
}

unint64_t static VideoHEVCProfileTierLevelInformation.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_1000F7EE4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static VideoHEVCProfileTierLevelInformation._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "profile";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "tier";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "level";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t VideoHEVCProfileTierLevelInformation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D30, (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap);
}

uint64_t static VideoHEVCProfileTierLevelInformation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D30, (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap, a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t VideoHEVCProfileTierLevelInformation.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int VideoHEVCProfileTierLevelInformation.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for VideoHEVCProfileTierLevelInformation, &qword_1002CAE20, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000F8308@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

uint64_t (*sub_1000F8338())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000F835C()
{
  return VideoHEVCProfileTierLevelInformation.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000F8374()
{
  return VideoHEVCProfileTierLevelInformation.traverse<A>(visitor:)();
}

uint64_t sub_1000F838C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDB0, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F8408@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D30, (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap, a1);
}

uint64_t sub_1000F842C()
{
  sub_10010177C(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
  return Message.debugDescription.getter();
}

uint64_t sub_1000F8498()
{
  sub_10010177C(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
  return Message.hash(into:)();
}

const char *RequestItem.protoMessageName.unsafeMutableAddressor()
{
  return "RequestItem";
}

uint64_t static RequestItem.protoMessageName.getter()
{
  return 0x4974736575716552;
}

uint64_t sub_1000F8540()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static RequestItem._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static RequestItem._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10024C310;
  unint64_t v4 = v41 + v3;
  unint64_t v5 = v41 + v3 + v1[14];
  *(void *)(v41 + v3) = 1;
  *(void *)unint64_t v5 = "operationId";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v41 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "recordId";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v41 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "srcFieldName";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v41 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "zoneName";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v41 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "ownerId";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v41 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "downloadType";
  *((void *)v17 + 1) = 12;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v41 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "resourceFingerprint";
  *((void *)v19 + 1) = 19;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v41 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "records";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  uint64_t v22 = v41 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 101;
  *(void *)uint64_t v22 = "timeRange";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v41 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 102;
  *(void *)uint64_t v24 = "mediaTypeHint";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v41 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 104;
  *(void *)uint64_t v26 = "videoProfileTierLevelInformation";
  *((void *)v26 + 1) = 32;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v41 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 105;
  *(void *)uint64_t v28 = "apacAudioTrackChannelCount";
  *((void *)v28 + 1) = 26;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v41 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 106;
  *(void *)uint64_t v30 = "apacAudioTrackHOAChannelCount";
  *((void *)v30 + 1) = 29;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v41 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 107;
  *(void *)uint64_t v32 = "apacAudioTrackBEDChannelCount";
  *((void *)v32 + 1) = 29;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v41 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *uint64_t v33 = 108;
  *(void *)uint64_t v34 = "cameraMake";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  int v35 = (void *)(v41 + v3 + 15 * v2);
  int v36 = (char *)v35 + v1[14];
  *int v35 = 109;
  *(void *)int v36 = "cameraModel";
  *((void *)v36 + 1) = 11;
  v36[16] = 2;
  v8();
  uint64_t v37 = v41 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 110;
  *(void *)uint64_t v37 = "apacAudioTrackCodecProfileLevelDescription";
  *(void *)(v37 + 8) = 42;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  long long v38 = (void *)(v41 + v3 + 17 * v2);
  int v39 = (char *)v38 + v1[14];
  *long long v38 = 111;
  *(void *)int v39 = "clientSupportsProMotionDisplay";
  *((void *)v39 + 1) = 30;
  v39[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t RequestItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D38, (uint64_t)static RequestItem._protobuf_nameMap);
}

uint64_t static RequestItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D38, (uint64_t)static RequestItem._protobuf_nameMap, a1);
}

uint64_t sub_1000F8B2C()
{
  type metadata accessor for RequestItem._StorageClass(0);
  swift_allocObject();
  uint64_t result = sub_1000F8B6C();
  qword_1002CAD78 = result;
  return result;
}

uint64_t sub_1000F8B6C()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0xE000000000000000;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 1;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  *(void *)(v0 + 128) = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CMTimeRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint) = &_swiftEmptyArrayStorage;
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v4 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount) = 0;
  unint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  *unint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay) = 0;
  return v0;
}

uint64_t sub_1000F8CCC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000E27E8(v0+ OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange, &qword_1002CAD80);
  swift_bridgeObjectRelease();
  sub_1000E27E8(v0+ OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation, &qword_1002CAD98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000F8D98()
{
  uint64_t v0 = sub_1000F8CCC();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t RequestItem.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RequestItem._StorageClass(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    uint64_t v4 = sub_100100A48(v3);
    swift_release();
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  swift_retain();
  sub_1000F8EBC();
  return swift_release();
}

uint64_t sub_1000F8EBC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          swift_beginAccess();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          swift_endAccess();
          break;
        case 6:
          swift_beginAccess();
          sub_10010186C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 7:
        case 108:
        case 109:
        case 110:
          swift_beginAccess();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 8:
          swift_beginAccess();
          type metadata accessor for Ckcode_RecordTransport();
          sub_10010177C(&qword_1002CAE40, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_13;
        case 101:
          swift_beginAccess();
          type metadata accessor for CMTimeRange(0);
          sub_10010177C(&qword_1002CBE10, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 102:
          swift_beginAccess();
          sub_100107478();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          goto LABEL_13;
        case 104:
          swift_beginAccess();
          type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
          sub_10010177C(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 105:
        case 106:
        case 107:
          swift_beginAccess();
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_13;
        case 111:
          swift_beginAccess();
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_13:
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t RequestItem.traverse<A>(visitor:)()
{
  type metadata accessor for RequestItem(0);
  uint64_t v1 = swift_retain();
  sub_1000F9644(v1);
  uint64_t result = swift_release();
  if (!v0) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1000F9644(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CAD98);
  __chkstk_darwin(v4 - 8);
  uint64_t v55 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v51 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CAD80);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for CMTimeRange(0);
  uint64_t v54 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  unint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  unint64_t v21 = *(void *)(a1 + 88);
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
  }
  if (!v22) {
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_beginAccess();
  if (!*(void *)(a1 + 96)
    || (char v23 = *(unsigned char *)(a1 + 104),
        uint64_t v56 = *(void *)(a1 + 96),
        char v57 = v23,
        sub_10010186C(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    swift_beginAccess();
    unint64_t v25 = *(void *)(a1 + 120);
    uint64_t v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v26 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFLL;
    }
    if (v26)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      if (v1) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    uint64_t v50 = *(void *)(a1 + 128);
    if (*(void *)(v50 + 16))
    {
      type metadata accessor for Ckcode_RecordTransport();
      sub_10010177C(&qword_1002CAE40, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (v1) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v27 = a1
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
    swift_beginAccess();
    sub_1000E200C(v27, (uint64_t)v10, &qword_1002CAD80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v10, 1, v58) == 1)
    {
      sub_1000E27E8((uint64_t)v10, &qword_1002CAD80);
      uint64_t v28 = (uint64_t)v55;
    }
    else
    {
      sub_10010124C((uint64_t)v10, (uint64_t)v12, type metadata accessor for CMTimeRange);
      sub_10010177C(&qword_1002CBE10, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10010167C((uint64_t)v12, type metadata accessor for CMTimeRange);
      uint64_t v28 = (uint64_t)v55;
      if (v1) {
        return result;
      }
    }
    uint64_t v29 = a1
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint;
    swift_beginAccess();
    if (!*(void *)(*(void *)v29 + 16)
      || (sub_100107478(),
          swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
          uint64_t result = swift_bridgeObjectRelease(),
          !v1))
    {
      uint64_t v30 = a1
          + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
      swift_beginAccess();
      sub_1000E200C(v30, v28, &qword_1002CAD98);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v28, 1, v53) == 1)
      {
        sub_1000E27E8(v28, &qword_1002CAD98);
      }
      else
      {
        uint64_t v31 = v28;
        uint64_t v32 = v51;
        sub_10010124C(v31, v51, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        sub_10010177C(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = sub_10010167C(v32, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        if (v1) {
          return result;
        }
      }
      uint64_t v33 = (_DWORD *)(a1
                     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
      swift_beginAccess();
      if (!*v33 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        uint64_t v34 = (_DWORD *)(a1
                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
        swift_beginAccess();
        if (!*v34 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          int v35 = (_DWORD *)(a1
                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
          swift_beginAccess();
          if (!*v35 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            int v36 = (uint64_t *)(a1
                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
            swift_beginAccess();
            uint64_t v37 = *v36;
            unint64_t v38 = v36[1];
            uint64_t v39 = HIBYTE(v38) & 0xF;
            if ((v38 & 0x2000000000000000) == 0) {
              uint64_t v39 = v37 & 0xFFFFFFFFFFFFLL;
            }
            if (!v39
              || (swift_bridgeObjectRetain(),
                  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                  uint64_t result = swift_bridgeObjectRelease(),
                  !v2))
            {
              uint64_t v40 = (uint64_t *)(a1
                              + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
              swift_beginAccess();
              uint64_t v41 = *v40;
              unint64_t v42 = v40[1];
              uint64_t v43 = HIBYTE(v42) & 0xF;
              if ((v42 & 0x2000000000000000) == 0) {
                uint64_t v43 = v41 & 0xFFFFFFFFFFFFLL;
              }
              if (!v43
                || (swift_bridgeObjectRetain(),
                    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                    uint64_t result = swift_bridgeObjectRelease(),
                    !v2))
              {
                uint64_t v44 = (uint64_t *)(a1
                                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
                swift_beginAccess();
                uint64_t v45 = *v44;
                unint64_t v46 = v44[1];
                uint64_t v47 = HIBYTE(v46) & 0xF;
                if ((v46 & 0x2000000000000000) == 0) {
                  uint64_t v47 = v45 & 0xFFFFFFFFFFFFLL;
                }
                if (!v47
                  || (swift_bridgeObjectRetain(),
                      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                      uint64_t result = swift_bridgeObjectRelease(),
                      !v2))
                {
                  uint64_t v48 = (unsigned char *)(a1
                                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
                  uint64_t result = swift_beginAccess();
                  if (*v48 == 1) {
                    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000FA04C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  uint64_t v100 = *(void *)(v4 - 8);
  uint64_t v101 = v4;
  __chkstk_darwin(v4);
  uint64_t v97 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_1000D0514(&qword_1002CBE00);
  __chkstk_darwin(v99);
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CAD98);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v98 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v103 = (uint64_t)&v95 - v11;
  uint64_t v12 = type metadata accessor for CMTimeRange(0);
  uint64_t v104 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v102 = (uint64_t)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CBE08);
  __chkstk_darwin(v14);
  uint64_t v105 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000D0514(&qword_1002CAD80);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  unint64_t v19 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v95 - v20;
  swift_beginAccess();
  uint64_t v23 = a1[2];
  uint64_t v22 = a1[3];
  swift_beginAccess();
  if (v23 != *(void *)(a2 + 16) || v22 != *(void *)(a2 + 24))
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v25 = 0;
    if ((v24 & 1) == 0) {
      return v25 & 1;
    }
  }
  swift_beginAccess();
  uint64_t v26 = a1[4];
  uint64_t v27 = a1[5];
  swift_beginAccess();
  if (v26 != *(void *)(a2 + 32) || v27 != *(void *)(a2 + 40))
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v25 = 0;
    if ((v28 & 1) == 0) {
      return v25 & 1;
    }
  }
  swift_beginAccess();
  uint64_t v29 = a1[6];
  uint64_t v30 = a1[7];
  swift_beginAccess();
  if (v29 != *(void *)(a2 + 48) || v30 != *(void *)(a2 + 56))
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v25 = 0;
    if ((v31 & 1) == 0) {
      return v25 & 1;
    }
  }
  swift_beginAccess();
  uint64_t v32 = a1[8];
  uint64_t v33 = a1[9];
  swift_beginAccess();
  if (v32 != *(void *)(a2 + 64) || v33 != *(void *)(a2 + 72))
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v25 = 0;
    if ((v34 & 1) == 0) {
      return v25 & 1;
    }
  }
  swift_beginAccess();
  uint64_t v35 = a1[10];
  uint64_t v36 = a1[11];
  swift_beginAccess();
  if (v35 != *(void *)(a2 + 80) || v36 != *(void *)(a2 + 88))
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v25 = 0;
    if ((v37 & 1) == 0) {
      return v25 & 1;
    }
  }
  swift_beginAccess();
  uint64_t v38 = a1[12];
  swift_beginAccess();
  uint64_t v39 = *(void *)(a2 + 96);
  if (*(unsigned char *)(a2 + 104) != 1)
  {
    if (v38 != v39) {
      goto LABEL_60;
    }
    goto LABEL_26;
  }
  if (!v39)
  {
    if (!v38) {
      goto LABEL_26;
    }
LABEL_60:
    char v25 = 0;
    return v25 & 1;
  }
  if (v39 != 1)
  {
    if (v38 == 2) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
  if (v38 != 1) {
    goto LABEL_60;
  }
LABEL_26:
  swift_beginAccess();
  uint64_t v40 = a1[14];
  uint64_t v41 = a1[15];
  swift_beginAccess();
  if (v40 == *(void *)(a2 + 112) && v41 == *(void *)(a2 + 120)
    || (v42 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v25 = 0, (v42 & 1) != 0))
  {
    uint64_t v96 = v7;
    swift_beginAccess();
    uint64_t v43 = a1[16];
    swift_beginAccess();
    uint64_t v44 = *(void *)(a2 + 128);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v45 = sub_100124BE8(v43, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0) {
      goto LABEL_59;
    }
    uint64_t v46 = (uint64_t)a1
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
    swift_beginAccess();
    sub_1000E200C(v46, (uint64_t)v21, &qword_1002CAD80);
    uint64_t v47 = a2
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
    swift_beginAccess();
    uint64_t v48 = v105;
    uint64_t v49 = v105 + *(int *)(v14 + 48);
    sub_1000E200C((uint64_t)v21, v105, &qword_1002CAD80);
    sub_1000E200C(v47, v49, &qword_1002CAD80);
    uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v50(v48, 1, v12) == 1)
    {
      sub_1000E27E8((uint64_t)v21, &qword_1002CAD80);
      int v51 = v50(v49, 1, v12);
      uint64_t v52 = (uint64_t)v96;
      if (v51 == 1)
      {
        sub_1000E27E8(v48, &qword_1002CAD80);
LABEL_38:
        id v59 = (void *)((char *)a1
                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
        swift_beginAccess();
        uint64_t v60 = *v59;
        uint64_t v61 = (uint64_t *)(a2
                        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
        swift_beginAccess();
        if ((sub_100124E08(v60, *v61) & 1) == 0) {
          goto LABEL_59;
        }
        uint64_t v62 = (uint64_t)a1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
        swift_beginAccess();
        uint64_t v63 = v103;
        sub_1000E200C(v62, v103, &qword_1002CAD98);
        uint64_t v64 = a2
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
        swift_beginAccess();
        uint64_t v65 = v52 + *(int *)(v99 + 48);
        sub_1000E200C(v63, v52, &qword_1002CAD98);
        sub_1000E200C(v64, v65, &qword_1002CAD98);
        uint64_t v66 = v101;
        id v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
        if (v67(v52, 1, v101) == 1)
        {
          sub_1000E27E8(v63, &qword_1002CAD98);
          if (v67(v65, 1, v66) == 1)
          {
            sub_1000E27E8(v52, &qword_1002CAD98);
LABEL_46:
            uint64_t v71 = (int *)((char *)a1
                        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
            swift_beginAccess();
            int v72 = *v71;
            uint64_t v73 = (_DWORD *)(a2
                           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
            swift_beginAccess();
            if (v72 == *v73)
            {
              uint64_t v74 = (int *)((char *)a1
                          + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
              swift_beginAccess();
              int v75 = *v74;
              uint64_t v76 = (_DWORD *)(a2
                             + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
              swift_beginAccess();
              if (v75 == *v76)
              {
                uint64_t v77 = (int *)((char *)a1
                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
                swift_beginAccess();
                int v78 = *v77;
                uint64_t v79 = (_DWORD *)(a2
                               + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
                swift_beginAccess();
                if (v78 == *v79)
                {
                  if ((uint64_t v80 = (void *)((char *)a1
                                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake),
                        swift_beginAccess(),
                        uint64_t v81 = *v80,
                        uint64_t v82 = v80[1],
                        unint64_t v83 = (void *)(a2
                                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake),
                        swift_beginAccess(),
                        v81 == *v83)
                    && v82 == v83[1]
                    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    if ((unint64_t v84 = (void *)((char *)a1
                                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel),
                          swift_beginAccess(),
                          uint64_t v85 = *v84,
                          uint64_t v86 = v84[1],
                          uint64_t v87 = (void *)(a2
                                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel),
                          swift_beginAccess(),
                          v85 == *v87)
                      && v86 == v87[1]
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      if ((uint64_t v88 = (void *)((char *)a1
                                           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription),
                            swift_beginAccess(),
                            uint64_t v89 = *v88,
                            uint64_t v90 = v88[1],
                            uint64_t v91 = (void *)(a2
                                           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription),
                            swift_beginAccess(),
                            v89 == *v91)
                        && v90 == v91[1]
                        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        uint64_t v92 = (char *)a1
                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay;
                        swift_beginAccess();
                        LOBYTE(v92) = *v92;
                        swift_release();
                        uint64_t v93 = (unsigned char *)(a2
                                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
                        swift_beginAccess();
                        LOBYTE(v93) = *v93;
                        swift_release();
                        char v25 = v92 ^ v93 ^ 1;
                        return v25 & 1;
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_59;
          }
          goto LABEL_44;
        }
        id v68 = v98;
        sub_1000E200C(v52, (uint64_t)v98, &qword_1002CAD98);
        if (v67(v65, 1, v66) == 1)
        {
          sub_1000E27E8(v103, &qword_1002CAD98);
          sub_10010167C((uint64_t)v68, type metadata accessor for VideoHEVCProfileTierLevelInformation);
LABEL_44:
          uint64_t v54 = &qword_1002CBE00;
          uint64_t v55 = v52;
          goto LABEL_36;
        }
        uint64_t v69 = v97;
        sub_10010124C(v65, (uint64_t)v97, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        char v70 = _s22CloudKitImplementation36VideoHEVCProfileTierLevelInformationV2eeoiySbAC_ACtFZ_0(v68, v69);
        sub_10010167C((uint64_t)v69, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        sub_1000E27E8(v103, &qword_1002CAD98);
        sub_10010167C((uint64_t)v68, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        sub_1000E27E8(v52, &qword_1002CAD98);
        if (v70) {
          goto LABEL_46;
        }
LABEL_59:
        swift_release();
        swift_release();
        goto LABEL_60;
      }
    }
    else
    {
      sub_1000E200C(v48, (uint64_t)v19, &qword_1002CAD80);
      int v53 = v50(v49, 1, v12);
      uint64_t v52 = (uint64_t)v96;
      if (v53 != 1)
      {
        uint64_t v56 = v49;
        uint64_t v57 = v102;
        sub_10010124C(v56, v102, type metadata accessor for CMTimeRange);
        char v58 = static CMTimeRange.== infix(_:_:)(v19, v57);
        sub_10010167C(v57, type metadata accessor for CMTimeRange);
        sub_1000E27E8((uint64_t)v21, &qword_1002CAD80);
        sub_10010167C((uint64_t)v19, type metadata accessor for CMTimeRange);
        sub_1000E27E8(v48, &qword_1002CAD80);
        if ((v58 & 1) == 0) {
          goto LABEL_59;
        }
        goto LABEL_38;
      }
      sub_1000E27E8((uint64_t)v21, &qword_1002CAD80);
      sub_10010167C((uint64_t)v19, type metadata accessor for CMTimeRange);
    }
    uint64_t v54 = &qword_1002CBE08;
    uint64_t v55 = v48;
LABEL_36:
    sub_1000E27E8(v55, v54);
    goto LABEL_59;
  }
  return v25 & 1;
}

Swift::Int RequestItem.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for RequestItem, &qword_1002CAE28, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t sub_1000FACE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_1002C9D40 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_1002CAD78;
  return swift_retain();
}

uint64_t sub_1000FAD5C()
{
  return RequestItem.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FAD74()
{
  return RequestItem.traverse<A>(visitor:)();
}

uint64_t sub_1000FAD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDA8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FAE08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D38, (uint64_t)static RequestItem._protobuf_nameMap, a1);
}

uint64_t sub_1000FAE2C()
{
  sub_10010177C(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FAE98()
{
  sub_10010177C(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
  return Message.hash(into:)();
}

uint64_t sub_1000FAF14()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static RequestItem.MediaTypeHint._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "Unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "HDR";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "Spatial";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t RequestItem.MediaTypeHint._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D48, (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap);
}

uint64_t static RequestItem.MediaTypeHint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D48, (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap, a1);
}

uint64_t sub_1000FB15C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D48, (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap, a1);
}

const char *ResponseItem.protoMessageName.unsafeMutableAddressor()
{
  return "ResponseItem";
}

uint64_t static ResponseItem.protoMessageName.getter()
{
  return 0x65736E6F70736552;
}

uint64_t sub_1000FB1AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResponseItem._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResponseItem._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10024B240;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "operationId";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "recordId";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "srcFieldName";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "assetRecord";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "errorMessage";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "transcoderVersion";
  *((void *)v17 + 1) = 17;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  unint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)unint64_t v19 = "downloadType";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  unint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)unint64_t v21 = "downloadEstimatedSize";
  *((void *)v21 + 1) = 21;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "errorCode";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResponseItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D50, (uint64_t)static ResponseItem._protobuf_nameMap);
}

uint64_t static ResponseItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D50, (uint64_t)static ResponseItem._protobuf_nameMap, a1);
}

uint64_t ResponseItem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          type metadata accessor for ResponseItem(0);
          type metadata accessor for Ckcode_RecordTransport();
          sub_10010177C(&qword_1002CAE40, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 6:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        case 7:
          sub_10010186C();
          goto LABEL_10;
        case 9:
          sub_100101818();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ResponseItem.traverse<A>(visitor:)()
{
  uint64_t v2 = sub_1000D0514(&qword_1002CA468);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v14 = *(void *)(v0 + 40);
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        uint64_t v22 = type metadata accessor for ResponseItem(0);
        sub_1000E200C(v0 + *(int *)(v22 + 52), (uint64_t)v4, &qword_1002CA468);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          sub_1000E27E8((uint64_t)v4, &qword_1002CA468);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
          sub_10010177C(&qword_1002CAE40, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
          dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
          if (v1) {
            return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          }
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
        unint64_t v16 = *(void *)(v0 + 56);
        uint64_t v17 = HIBYTE(v16) & 0xF;
        if ((v16 & 0x2000000000000000) == 0) {
          uint64_t v17 = *(void *)(v0 + 48) & 0xFFFFFFFFFFFFLL;
        }
        if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0 + 64)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0 + 72)
              || (char v18 = *(unsigned char *)(v0 + 80),
                  uint64_t v20 = *(void *)(v0 + 72),
                  char v21 = v18,
                  sub_10010186C(),
                  uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                  !v1))
            {
              if (!*(void *)(v0 + 88)
                || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
              {
                if (!*(void *)(v0 + 96)) {
                  return UnknownStorage.traverse<A>(visitor:)();
                }
                char v19 = *(unsigned char *)(v0 + 104);
                uint64_t v20 = *(void *)(v0 + 96);
                char v21 = v19;
                sub_100101818();
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
                if (!v1) {
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int ResponseItem.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResponseItem, &qword_1002CAE48, (void (*)(uint64_t))type metadata accessor for ResponseItem);
}

uint64_t sub_1000FBBC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0xE000000000000000;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 1;
  *(unsigned char *)(a2 + 104) = 1;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_1000FBC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000FBCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000FBD50())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000FBD74()
{
  return ResponseItem.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FBD8C()
{
  return ResponseItem.traverse<A>(visitor:)();
}

uint64_t sub_1000FBDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBDA0, (void (*)(uint64_t))type metadata accessor for ResponseItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FBE20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D50, (uint64_t)static ResponseItem._protobuf_nameMap, a1);
}

uint64_t sub_1000FBE44()
{
  sub_10010177C(&qword_1002CADF0, (void (*)(uint64_t))type metadata accessor for ResponseItem);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FBEB0()
{
  sub_10010177C(&qword_1002CADF0, (void (*)(uint64_t))type metadata accessor for ResponseItem);
  return Message.hash(into:)();
}

const char *ResetInterval.protoMessageName.unsafeMutableAddressor()
{
  return "ResetInterval";
}

uint64_t static ResetInterval.protoMessageName.getter()
{
  return 0x746E497465736552;
}

uint64_t sub_1000FBF5C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static ResetInterval._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static ResetInterval._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "startTimestamp";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "endTimestamp";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "resources";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t ResetInterval._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D58, (uint64_t)static ResetInterval._protobuf_nameMap);
}

uint64_t static ResetInterval._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D58, (uint64_t)static ResetInterval._protobuf_nameMap, a1);
}

uint64_t ResetInterval.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_1001018C0();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ResetInterval.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[2] + 16)
        || (sub_1001018C0(), uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for ResetInterval(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int ResetInterval.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for ResetInterval, &qword_1002CAE58, (void (*)(uint64_t))type metadata accessor for ResetInterval);
}

uint64_t sub_1000FC3F0@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000FC420()
{
  return ResetInterval.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FC438()
{
  return ResetInterval.traverse<A>(visitor:)();
}

uint64_t sub_1000FC450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD98, (void (*)(uint64_t))type metadata accessor for ResetInterval);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FC4CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D58, (uint64_t)static ResetInterval._protobuf_nameMap, a1);
}

uint64_t sub_1000FC4F0()
{
  sub_10010177C(&qword_1002CB040, (void (*)(uint64_t))type metadata accessor for ResetInterval);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FC55C()
{
  sub_10010177C(&qword_1002CB040, (void (*)(uint64_t))type metadata accessor for ResetInterval);
  return Message.hash(into:)();
}

const char *UploadResource.protoMessageName.unsafeMutableAddressor()
{
  return "UploadResource";
}

uint64_t static UploadResource.protoMessageName.getter()
{
  return 0x655264616F6C7055;
}

uint64_t sub_1000FC608()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static UploadResource._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static UploadResource._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "itemType";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  unint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)unint64_t v12 = "sourceResourceType";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)unint64_t v14 = "uploadResourceTypes";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UploadResource._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D60, (uint64_t)static UploadResource._protobuf_nameMap);
}

uint64_t static UploadResource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D60, (uint64_t)static UploadResource._protobuf_nameMap, a1);
}

uint64_t UploadResource.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_100101914();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 3:
          sub_1001018C0();
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 4:
          sub_1001018C0();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t UploadResource.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (sub_100101914(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!Goldilocks_ExitType.rawValue.getter(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40))
        || (sub_1001018C0(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 48) + 16)
          || (sub_1001018C0(), uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for UploadResource(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int UploadResource.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UploadResource, &qword_1002CAE68, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t sub_1000FCBA8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000FCBF0()
{
  return UploadResource.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FCC08()
{
  return UploadResource.traverse<A>(visitor:)();
}

uint64_t sub_1000FCC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD90, (void (*)(uint64_t))type metadata accessor for UploadResource);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FCC9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D60, (uint64_t)static UploadResource._protobuf_nameMap, a1);
}

uint64_t sub_1000FCCC0()
{
  sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FCD2C()
{
  sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource);
  return Message.hash(into:)();
}

void *UploadResourcesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UploadResourcesRequest.protoMessageName;
}

unint64_t static UploadResourcesRequest.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000FCDD0(uint64_t a1)
{
  return sub_1000FE748(a1, static UploadResourcesRequest._protobuf_nameMap, (uint64_t)"forceSkipUploadResources", 24);
}

uint64_t UploadResourcesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D68, (uint64_t)static UploadResourcesRequest._protobuf_nameMap);
}

uint64_t static UploadResourcesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D68, (uint64_t)static UploadResourcesRequest._protobuf_nameMap, a1);
}

uint64_t UploadResourcesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE8EC(a1, a2, a3, (void (*)(void))type metadata accessor for UploadResource, &qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t UploadResourcesRequest.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for UploadResource(0),
        sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for UploadResourcesRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static UploadResourcesRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_100123BF4, type metadata accessor for UploadResourcesRequest) & 1;
}

Swift::Int UploadResourcesRequest.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UploadResourcesRequest, &qword_1002CAE78, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
}

uint64_t sub_1000FD004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResourcesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FD01C()
{
  return UploadResourcesRequest.traverse<A>(visitor:)();
}

uint64_t sub_1000FD034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD88, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FD0B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D68, (uint64_t)static UploadResourcesRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000FD0D4()
{
  sub_10010177C(&qword_1002CB068, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FD140()
{
  sub_10010177C(&qword_1002CB068, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
  return Message.hash(into:)();
}

void *UploadResourcesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UploadResourcesResponse.protoMessageName;
}

unint64_t static UploadResourcesResponse.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000FD1E4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static UploadResourcesResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static UploadResourcesResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "shouldUploadJPEGMediumForOriginalImages";
  *(void *)(v6 + 8) = 39;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "shouldUploadJPEGMediumForOriginalVideos";
  *((void *)v10 + 1) = 39;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "skipUploadResources";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UploadResourcesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D70, (uint64_t)static UploadResourcesResponse._protobuf_nameMap);
}

uint64_t static UploadResourcesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D70, (uint64_t)static UploadResourcesResponse._protobuf_nameMap, a1);
}

uint64_t UploadResourcesResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for UploadResource(0);
        sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t UploadResourcesResponse.traverse<A>(visitor:)()
{
  if (*(unsigned char *)v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 1) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 8) + 16)
        || (type metadata accessor for UploadResource(0),
            sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource),
            uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for UploadResourcesResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int UploadResourcesResponse.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UploadResourcesResponse, &qword_1002CAE80, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
}

uint64_t sub_1000FD700@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000FD730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000FD7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_1000FD810()
{
  return UploadResourcesResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FD828()
{
  return UploadResourcesResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000FD840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD80, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FD8BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D70, (uint64_t)static UploadResourcesResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000FD8E0()
{
  sub_10010177C(&qword_1002CB080, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FD94C()
{
  sub_10010177C(&qword_1002CB080, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
  return Message.hash(into:)();
}

void *UntranscodableItem.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableItem.protoMessageName;
}

unint64_t static UntranscodableItem.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t sub_1000FD9F0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static UntranscodableItem._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static UntranscodableItem._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B250;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "requestorDsid";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "fileChecksumHex";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  unint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)unint64_t v12 = "errorMessage";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)unint64_t v14 = "isTranscodable";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)unint64_t v16 = "ownerDsid";
  *((void *)v16 + 1) = 9;
  unsigned char v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  char v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)char v18 = "referenceChecksumHex";
  *((void *)v18 + 1) = 20;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UntranscodableItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D78, (uint64_t)static UntranscodableItem._protobuf_nameMap);
}

uint64_t static UntranscodableItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D78, (uint64_t)static UntranscodableItem._protobuf_nameMap, a1);
}

uint64_t UntranscodableItem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t UntranscodableItem.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = *(void *)(v0 + 40);
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 48) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          unint64_t v9 = *(void *)(v0 + 64);
          uint64_t v10 = HIBYTE(v9) & 0xF;
          if ((v9 & 0x2000000000000000) == 0) {
            uint64_t v10 = *(void *)(v0 + 56) & 0xFFFFFFFFFFFFLL;
          }
          if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            unint64_t v11 = *(void *)(v0 + 80);
            uint64_t v12 = HIBYTE(v11) & 0xF;
            if ((v11 & 0x2000000000000000) == 0) {
              uint64_t v12 = *(void *)(v0 + 72) & 0xFFFFFFFFFFFFLL;
            }
            if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for UntranscodableItem(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int UntranscodableItem.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UntranscodableItem, &qword_1002CAE88, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t sub_1000FDFFC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xE000000000000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000FE038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1000FE0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000FE118())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000FE13C()
{
  return UntranscodableItem.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000FE154()
{
  return UntranscodableItem.traverse<A>(visitor:)();
}

uint64_t sub_1000FE16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD78, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FE1E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D78, (uint64_t)static UntranscodableItem._protobuf_nameMap, a1);
}

uint64_t sub_1000FE20C()
{
  sub_10010177C(&qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FE278()
{
  sub_10010177C(&qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
  return Message.hash(into:)();
}

void *UntranscodableRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableRequest.protoMessageName;
}

unint64_t static UntranscodableRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000FE31C(uint64_t a1)
{
  return sub_1000FE748(a1, static UntranscodableRequest._protobuf_nameMap, (uint64_t)"items", 5);
}

uint64_t UntranscodableRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D80, (uint64_t)static UntranscodableRequest._protobuf_nameMap);
}

uint64_t static UntranscodableRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D80, (uint64_t)static UntranscodableRequest._protobuf_nameMap, a1);
}

uint64_t UntranscodableResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE8EC(a1, a2, a3, (void (*)(void))type metadata accessor for UntranscodableItem, &qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t UntranscodableRequest.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for UntranscodableItem(0),
        sub_10010177C(&qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for UntranscodableRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static UntranscodableRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_100124504, type metadata accessor for UntranscodableRequest) & 1;
}

Swift::Int UntranscodableRequest.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UntranscodableRequest, &qword_1002CAE98, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
}

uint64_t sub_1000FE550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000FE568()
{
  return UntranscodableRequest.traverse<A>(visitor:)();
}

uint64_t sub_1000FE580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD70, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FE5FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D80, (uint64_t)static UntranscodableRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000FE620()
{
  sub_10010177C(&qword_1002CB0A8, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FE68C()
{
  sub_10010177C(&qword_1002CB0A8, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
  return Message.hash(into:)();
}

void *UntranscodableResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableResponse.protoMessageName;
}

unint64_t static UntranscodableResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000FE730(uint64_t a1)
{
  return sub_1000FE748(a1, static UntranscodableResponse._protobuf_nameMap, (uint64_t)"items", 5);
}

uint64_t sub_1000FE748(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_1000D04B0(v7, a2);
  sub_1000CDD9C(v7, (uint64_t)a2);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v8 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10024A2A0;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UntranscodableResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D88, (uint64_t)static UntranscodableResponse._protobuf_nameMap);
}

uint64_t static UntranscodableResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D88, (uint64_t)static UntranscodableResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000FE8EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        sub_10010177C(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t UntranscodableResponse.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for UntranscodableItem(0),
        sub_10010177C(&qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for UntranscodableResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static UntranscodableResponse.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000FF8BC(a1, a2, sub_100124504, type metadata accessor for UntranscodableResponse) & 1;
}

Swift::Int UntranscodableResponse.hashValue.getter()
{
  return sub_1000FEB70((void (*)(void))type metadata accessor for UntranscodableResponse, &qword_1002CAEA0, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
}

Swift::Int sub_1000FEB70(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000FEBF8()
{
  return UntranscodableResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000FEC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010177C(&qword_1002CBD68, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FEC8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D88, (uint64_t)static UntranscodableResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000FECB0()
{
  sub_10010177C(&qword_1002CB0C0, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1000FED1C()
{
  sub_10010177C(&qword_1002CB0C0, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
  return Message.hash(into:)();
}

uint64_t _s22CloudKitImplementation36VideoHEVCProfileTierLevelInformationV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2))
  {
    uint64_t v11 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 28)], v4);
    v12(v8, &a2[*(int *)(v11 + 28)], v4);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation24ResourceDownloadResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v18 - v9;
  if ((sub_100123A04(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16) == 1) {
    uint64_t v11 = qword_10024E458[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 101) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 2:
        if (v11 == 102) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 3:
        if (v11 == 201) {
          goto LABEL_15;
        }
        goto LABEL_20;
      default:
        if (!v11) {
          goto LABEL_15;
        }
        goto LABEL_20;
    }
  }
  if (v11 != v12) {
    goto LABEL_20;
  }
LABEL_15:
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)
    || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v14 = type metadata accessor for ResourceDownloadResponse(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(v14 + 32), v4);
      v15(v8, a2 + *(int *)(v14 + 32), v4);
      sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
LABEL_20:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation23UploadResourcesResponseV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v16 - v9;
  if (*a1 == *a2 && a1[1] == a2[1] && (sub_100123BF4(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for UploadResourcesResponse(0);
    uint64_t v12 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 28)], v4);
    v12(v8, &a2[*(int *)(v11 + 28)], v4);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v18 - v9;
  if ((sub_100123A04(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16) == 1) {
    uint64_t v11 = qword_10024E458[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 101) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 2:
        if (v11 == 102) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 3:
        if (v11 == 201) {
          goto LABEL_15;
        }
        goto LABEL_20;
      default:
        if (!v11) {
          goto LABEL_15;
        }
        goto LABEL_20;
    }
  }
  if (v11 != v12) {
    goto LABEL_20;
  }
LABEL_15:
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)
    || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v14 = type metadata accessor for ResourceAnalyzeResponse(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(v14 + 32), v4);
      v15(v8, a2 + *(int *)(v14 + 32), v4);
      sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
LABEL_20:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation22ResourceStreamResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v18 - v9;
  if ((sub_100123A04(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16) == 1) {
    uint64_t v11 = qword_10024E458[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 101) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 2:
        if (v11 == 102) {
          goto LABEL_15;
        }
        goto LABEL_20;
      case 3:
        if (v11 == 201) {
          goto LABEL_15;
        }
        goto LABEL_20;
      default:
        if (!v11) {
          goto LABEL_15;
        }
        goto LABEL_20;
    }
  }
  if (v11 != v12) {
    goto LABEL_20;
  }
LABEL_15:
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)
    || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v14 = type metadata accessor for ResourceStreamResponse(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(v14 + 32), v4);
      v15(v8, a2 + *(int *)(v14 + 32), v4);
      sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
LABEL_20:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1000FF8BC(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t _s22CloudKitImplementation18UntranscodableItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
        {
          if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && *(void *)(a1 + 64) == *(void *)(a2 + 64)
            || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (*(void *)(a1 + 72) == *(void *)(a2 + 72) && *(void *)(a1 + 80) == *(void *)(a2 + 80)
              || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              uint64_t v14 = type metadata accessor for UntranscodableItem(0);
              uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v15(v10, a1 + *(int *)(v14 + 40), v4);
              v15(v8, a2 + *(int *)(v14 + 40), v4);
              sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
              char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
              v16(v8, v4);
              v16(v10, v4);
            }
          }
        }
        else
        {
          char v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation14UploadResourceV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
LABEL_19:
    char v14 = 0;
    return v14 & 1;
  }
  if (v12 != 1)
  {
    if (v11 == 2) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  if (v11 != 1) {
    goto LABEL_19;
  }
LABEL_11:
  BOOL v13 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v15 = a2[4];
    uint64_t v16 = *((unsigned __int8 *)a2 + 40);
    uint64_t v17 = Goldilocks_ExitType.rawValue.getter(a1[4], *((unsigned __int8 *)a1 + 40));
    if (v17 != Goldilocks_ExitType.rawValue.getter(v15, v16) || (sub_10012407C(a1[6], a2[6]) & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = type metadata accessor for UploadResource(0);
    char v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v19(v10, (char *)a1 + *(int *)(v18 + 32), v4);
    v19(v8, (char *)a2 + *(int *)(v18 + 32), v4);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }
  return v14 & 1;
}

uint64_t _s22CloudKitImplementation13ResetIntervalV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *((void *)a1 + 1) == *((void *)a2 + 1)
    && (sub_10012407C(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for ResetInterval(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 28)], v4);
    v12(v8, &a2[*(int *)(v11 + 28)], v4);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s22CloudKitImplementation12ResponseItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v50 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v49 = &v44[-v8];
  uint64_t v9 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v53 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v51 = &v44[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_1000D0514(&qword_1002CBDF0);
  __chkstk_darwin(v11);
  char v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_1000D0514(&qword_1002CA468);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v52 = &v44[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = &v44[-v18];
  __chkstk_darwin(v17);
  char v21 = &v44[-v20];
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v22 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v22 & 1;
    }
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    char v22 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v22 & 1;
    }
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
  {
    char v22 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v22 & 1;
    }
  }
  uint64_t v47 = v5;
  uint64_t v48 = v4;
  uint64_t v23 = type metadata accessor for ResponseItem(0);
  sub_1000E200C(a1 + *(int *)(v23 + 52), (uint64_t)v21, &qword_1002CA468);
  uint64_t v46 = v23;
  sub_1000E200C(a2 + *(int *)(v23 + 52), (uint64_t)v19, &qword_1002CA468);
  uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000E200C((uint64_t)v21, (uint64_t)v13, &qword_1002CA468);
  sub_1000E200C((uint64_t)v19, v24, &qword_1002CA468);
  uint64_t v25 = v53;
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v26((uint64_t)v13, 1, v9) == 1)
  {
    sub_1000E27E8((uint64_t)v19, &qword_1002CA468);
    sub_1000E27E8((uint64_t)v21, &qword_1002CA468);
    if (v26(v24, 1, v9) == 1)
    {
      sub_1000E27E8((uint64_t)v13, &qword_1002CA468);
      goto LABEL_17;
    }
LABEL_15:
    sub_1000E27E8((uint64_t)v13, &qword_1002CBDF0);
    goto LABEL_37;
  }
  sub_1000E200C((uint64_t)v13, (uint64_t)v52, &qword_1002CA468);
  if (v26(v24, 1, v9) == 1)
  {
    sub_1000E27E8((uint64_t)v19, &qword_1002CA468);
    sub_1000E27E8((uint64_t)v21, &qword_1002CA468);
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v52, v9);
    goto LABEL_15;
  }
  uint64_t v27 = v51;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 32))(v51, v24, v9);
  sub_10010177C(&qword_1002CBDF8, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
  char v28 = v52;
  int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
  v29(v27, v9);
  sub_1000E27E8((uint64_t)v19, &qword_1002CA468);
  sub_1000E27E8((uint64_t)v21, &qword_1002CA468);
  v29(v28, v9);
  sub_1000E27E8((uint64_t)v13, &qword_1002CA468);
  if ((v45 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_17:
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  if (*(void *)(a1 + 48) == *(void *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56)
    || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 64) == *(void *)(a2 + 64))
    {
      uint64_t v32 = *(void *)(a1 + 72);
      uint64_t v33 = *(void *)(a2 + 72);
      if (*(unsigned char *)(a2 + 80) == 1)
      {
        if (v33)
        {
          if (v33 == 1)
          {
            if (v32 == 1) {
              goto LABEL_31;
            }
          }
          else if (v32 == 2)
          {
LABEL_31:
            if (*(void *)(a1 + 88) == *(void *)(a2 + 88))
            {
              uint64_t v34 = *(void *)(a1 + 96);
              if (*(unsigned char *)(a1 + 104) == 1) {
                uint64_t v34 = qword_10024E478[v34];
              }
              uint64_t v35 = *(void *)(a2 + 96);
              if (*(unsigned char *)(a2 + 104))
              {
                switch(v35)
                {
                  case 1:
                    if (v34 == 101) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 2:
                    if (v34 == 102) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 3:
                    if (v34 == 103) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 4:
                    if (v34 == 104) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 5:
                    if (v34 == 105) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 6:
                    if (v34 == 201) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  case 7:
                    if (v34 == 301) {
                      goto LABEL_40;
                    }
                    goto LABEL_37;
                  default:
                    if (v34) {
                      goto LABEL_37;
                    }
                    goto LABEL_40;
                }
              }
              if (v34 == v35)
              {
LABEL_40:
                uint64_t v37 = v46;
                uint64_t v38 = a1 + *(int *)(v46 + 48);
                uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v31 + 16);
                uint64_t v40 = v49;
                v39(v49, v38, v30);
                uint64_t v41 = a2 + *(int *)(v37 + 48);
                char v42 = v50;
                v39(v50, v41, v30);
                sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
                char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v31 + 8);
                v43(v42, v30);
                v43(v40, v30);
                return v22 & 1;
              }
            }
          }
        }
        else if (!v32)
        {
          goto LABEL_31;
        }
      }
      else if (v32 == v33)
      {
        goto LABEL_31;
      }
    }
LABEL_37:
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t _s22CloudKitImplementation11RequestItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for RequestItem(0) + 20);
  uint64_t v12 = *(void **)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == (void *)v13
    || (swift_retain(), swift_retain(), char v14 = sub_1000FA04C(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_10010177C(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100100A48(uint64_t a1)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CAD98);
  __chkstk_darwin(v3 - 8);
  uint64_t v76 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000D0514(&qword_1002CAD80);
  __chkstk_darwin(v5 - 8);
  uint64_t v70 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0xE000000000000000;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0xE000000000000000;
  *(void *)(v1 + 80) = 0;
  uint64_t v64 = (void *)(v1 + 80);
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(void *)(v1 + 96) = 0;
  uint64_t v65 = (void *)(v1 + 96);
  *(unsigned char *)(v1 + 104) = 1;
  *(void *)(v1 + 112) = 0;
  uint64_t v66 = (void *)(v1 + 112);
  *(void *)(v1 + 120) = 0xE000000000000000;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  *(void *)(v1 + 128) = &_swiftEmptyArrayStorage;
  id v67 = (void *)(v1 + 128);
  uint64_t v68 = v7;
  uint64_t v8 = type metadata accessor for CMTimeRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v69 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  *(void *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint) = &_swiftEmptyArrayStorage;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v71 = v1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v10 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  int v72 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount) = 0;
  uint64_t v73 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount) = 0;
  uint64_t v74 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount) = 0;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  int v75 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  void *v11 = 0;
  v11[1] = 0xE000000000000000;
  uint64_t v12 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  uint64_t v77 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  int v78 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  *uint64_t v13 = 0;
  v13[1] = 0xE000000000000000;
  uint64_t v79 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay) = 0;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v15;
  *(void *)(v1 + 24) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v17;
  *(void *)(v1 + 40) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  swift_beginAccess();
  *(void *)(v1 + 48) = v19;
  *(void *)(v1 + 56) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 72);
  swift_beginAccess();
  *(void *)(v1 + 64) = v21;
  *(void *)(v1 + 72) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v24 = v64;
  swift_beginAccess();
  *uint64_t v24 = v23;
  *(void *)(v1 + 88) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 96);
  char v26 = *(unsigned char *)(a1 + 104);
  uint64_t v27 = v65;
  swift_beginAccess();
  *uint64_t v27 = v25;
  *(unsigned char *)(v1 + 104) = v26;
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 112);
  uint64_t v28 = *(void *)(a1 + 120);
  uint64_t v30 = v66;
  swift_beginAccess();
  *uint64_t v30 = v29;
  *(void *)(v1 + 120) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v31 = *(void *)(a1 + 128);
  uint64_t v32 = v67;
  swift_beginAccess();
  *uint64_t v32 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  swift_beginAccess();
  uint64_t v34 = v70;
  sub_1000E200C(v33, v70, &qword_1002CAD80);
  uint64_t v35 = v68;
  swift_beginAccess();
  sub_100101338(v34, v35, &qword_1002CAD80);
  swift_endAccess();
  uint64_t v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  swift_beginAccess();
  uint64_t v37 = *v36;
  uint64_t v38 = v69;
  swift_beginAccess();
  *uint64_t v38 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  swift_beginAccess();
  uint64_t v40 = v76;
  sub_1000E200C(v39, v76, &qword_1002CAD98);
  uint64_t v41 = v71;
  swift_beginAccess();
  sub_100101338(v40, v41, &qword_1002CAD98);
  swift_endAccess();
  char v42 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  swift_beginAccess();
  LODWORD(v42) = *v42;
  uint64_t v43 = v72;
  swift_beginAccess();
  *uint64_t v43 = v42;
  uint64_t v44 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  swift_beginAccess();
  LODWORD(v44) = *v44;
  int v45 = v73;
  swift_beginAccess();
  *int v45 = v44;
  uint64_t v46 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  swift_beginAccess();
  LODWORD(v46) = *v46;
  uint64_t v47 = v74;
  swift_beginAccess();
  *uint64_t v47 = v46;
  uint64_t v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  swift_beginAccess();
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  int v51 = v75;
  swift_beginAccess();
  void *v51 = v50;
  v51[1] = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  swift_beginAccess();
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  uint64_t v55 = v77;
  swift_beginAccess();
  void *v55 = v54;
  v55[1] = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  swift_beginAccess();
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  id v59 = v78;
  swift_beginAccess();
  void *v59 = v58;
  v59[1] = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess();
  LOBYTE(v60) = *v60;
  uint64_t v61 = v79;
  swift_beginAccess();
  *uint64_t v61 = (_BYTE)v60;
  return v1;
}

uint64_t sub_10010124C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for VideoHEVCProfileTierLevelInformation(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB4B8);
}

uint64_t sub_1001012D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000D0514(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100101338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000D0514(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ResponseItem(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CB5E0);
}

uint64_t type metadata accessor for UploadResourcesRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB7D0);
}

uint64_t type metadata accessor for UploadResource(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB730);
}

uint64_t sub_100101410(uint64_t result)
{
  if (result > 200)
  {
    if (result == 201)
    {
      return 6;
    }
    else if (result == 301)
    {
      return 7;
    }
  }
  else
  {
    switch(result)
    {
      case 'e':
        uint64_t result = 1;
        break;
      case 'f':
        uint64_t result = 2;
        break;
      case 'g':
        uint64_t result = 3;
        break;
      case 'h':
        uint64_t result = 4;
        break;
      case 'i':
        uint64_t result = 5;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1001014F0(uint64_t result)
{
  if (result > 101)
  {
    if (result == 102)
    {
      return 2;
    }
    else if (result == 201)
    {
      return 3;
    }
  }
  else if (result == 101)
  {
    return 1;
  }
  return result;
}

uint64_t type metadata accessor for ResourceAnalyzeRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB128);
}

uint64_t type metadata accessor for ResourceAnalyzeResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB1B8);
}

uint64_t type metadata accessor for ResourceDownloadRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB258);
}

uint64_t type metadata accessor for ResourceDownloadResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB2E8);
}

uint64_t type metadata accessor for ResourceStreamRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB388);
}

uint64_t type metadata accessor for ResourceStreamResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB418);
}

uint64_t sub_100101614(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10010167C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ResetInterval(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB698);
}

uint64_t type metadata accessor for UploadResourcesResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB860);
}

uint64_t type metadata accessor for UntranscodableItem(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB8F8);
}

uint64_t type metadata accessor for UntranscodableRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CB9A0);
}

uint64_t type metadata accessor for UntranscodableResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CBA30);
}

uint64_t sub_10010177C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001017C4()
{
  unint64_t result = qword_1002CADE8;
  if (!qword_1002CADE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CADE8);
  }
  return result;
}

unint64_t sub_100101818()
{
  unint64_t result = qword_1002CAE30;
  if (!qword_1002CAE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAE30);
  }
  return result;
}

unint64_t sub_10010186C()
{
  unint64_t result = qword_1002CAE38;
  if (!qword_1002CAE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAE38);
  }
  return result;
}

unint64_t sub_1001018C0()
{
  unint64_t result = qword_1002CAE50;
  if (!qword_1002CAE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAE50);
  }
  return result;
}

unint64_t sub_100101914()
{
  unint64_t result = qword_1002CAE60;
  if (!qword_1002CAE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAE60);
  }
  return result;
}

unint64_t sub_10010196C()
{
  unint64_t result = qword_1002CAEA8;
  if (!qword_1002CAEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAEA8);
  }
  return result;
}

unint64_t sub_1001019C4()
{
  unint64_t result = qword_1002CAEB0;
  if (!qword_1002CAEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAEB0);
  }
  return result;
}

unint64_t sub_100101A1C()
{
  unint64_t result = qword_1002CAEB8;
  if (!qword_1002CAEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAEB8);
  }
  return result;
}

uint64_t sub_100101A70()
{
  return sub_1000CEC04(&qword_1002CAEC0, &qword_1002CAEC8);
}

unint64_t sub_100101A9C()
{
  unint64_t result = qword_1002CAED0;
  if (!qword_1002CAED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAED0);
  }
  return result;
}

unint64_t sub_100101AF4()
{
  unint64_t result = qword_1002CAED8;
  if (!qword_1002CAED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAED8);
  }
  return result;
}

unint64_t sub_100101B4C()
{
  unint64_t result = qword_1002CAEE0;
  if (!qword_1002CAEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAEE0);
  }
  return result;
}

uint64_t sub_100101BA0()
{
  return sub_1000CEC04(&qword_1002CAEE8, &qword_1002CAEF0);
}

unint64_t sub_100101BCC()
{
  unint64_t result = qword_1002CAEF8;
  if (!qword_1002CAEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAEF8);
  }
  return result;
}

unint64_t sub_100101C24()
{
  unint64_t result = qword_1002CAF00;
  if (!qword_1002CAF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF00);
  }
  return result;
}

unint64_t sub_100101C7C()
{
  unint64_t result = qword_1002CAF08;
  if (!qword_1002CAF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF08);
  }
  return result;
}

uint64_t sub_100101CD0()
{
  return sub_1000CEC04(&qword_1002CAF10, &qword_1002CAF18);
}

unint64_t sub_100101CFC()
{
  unint64_t result = qword_1002CAF20;
  if (!qword_1002CAF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF20);
  }
  return result;
}

unint64_t sub_100101D54()
{
  unint64_t result = qword_1002CAF28;
  if (!qword_1002CAF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF28);
  }
  return result;
}

unint64_t sub_100101DAC()
{
  unint64_t result = qword_1002CAF30;
  if (!qword_1002CAF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF30);
  }
  return result;
}

uint64_t sub_100101E00()
{
  return sub_1000CEC04(&qword_1002CAF38, &qword_1002CAF40);
}

unint64_t sub_100101E2C()
{
  unint64_t result = qword_1002CAF48;
  if (!qword_1002CAF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF48);
  }
  return result;
}

unint64_t sub_100101E84()
{
  unint64_t result = qword_1002CAF50;
  if (!qword_1002CAF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF50);
  }
  return result;
}

unint64_t sub_100101EDC()
{
  unint64_t result = qword_1002CAF58;
  if (!qword_1002CAF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF58);
  }
  return result;
}

uint64_t sub_100101F30()
{
  return sub_1000CEC04(&qword_1002CAF60, &qword_1002CAF68);
}

unint64_t sub_100101F5C()
{
  unint64_t result = qword_1002CAF70;
  if (!qword_1002CAF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF70);
  }
  return result;
}

unint64_t sub_100101FB4()
{
  unint64_t result = qword_1002CAF78;
  if (!qword_1002CAF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF78);
  }
  return result;
}

unint64_t sub_10010200C()
{
  unint64_t result = qword_1002CAF80;
  if (!qword_1002CAF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CAF80);
  }
  return result;
}

uint64_t sub_100102060()
{
  return sub_1000CEC04(&qword_1002CAF88, &qword_1002CAF90);
}

uint64_t sub_100102088()
{
  return sub_10010177C(&qword_1002CAF98, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t sub_1001020D0()
{
  return sub_10010177C(&qword_1002CAFA0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t sub_100102118()
{
  return sub_10010177C(&qword_1002CADE0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t sub_100102160()
{
  return sub_10010177C(&qword_1002CAFA8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t sub_1001021A8()
{
  return sub_10010177C(&qword_1002CAFB0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t sub_1001021F0()
{
  return sub_10010177C(&qword_1002CAFB8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t sub_100102238()
{
  return sub_10010177C(&qword_1002CADF8, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t sub_100102280()
{
  return sub_10010177C(&qword_1002CAFC0, (void (*)(uint64_t))type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t sub_1001022C8()
{
  return sub_10010177C(&qword_1002CAFC8, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_100102310()
{
  return sub_10010177C(&qword_1002CA458, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_100102358()
{
  return sub_10010177C(&qword_1002CAE00, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_1001023A0()
{
  return sub_10010177C(&qword_1002CAFD0, (void (*)(uint64_t))type metadata accessor for ResourceDownloadRequest);
}

uint64_t sub_1001023E8()
{
  return sub_10010177C(&qword_1002CAFD8, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_100102430()
{
  return sub_10010177C(&qword_1002CA488, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_100102478()
{
  return sub_10010177C(&qword_1002CAE08, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_1001024C0()
{
  return sub_10010177C(&qword_1002CAFE0, (void (*)(uint64_t))type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_100102508()
{
  return sub_10010177C(&qword_1002CAFE8, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_100102550()
{
  return sub_10010177C(&qword_1002CA510, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_100102598()
{
  return sub_10010177C(&qword_1002CAE10, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_1001025E0()
{
  return sub_10010177C(&qword_1002CAFF0, (void (*)(uint64_t))type metadata accessor for ResourceStreamRequest);
}

uint64_t sub_100102628()
{
  return sub_10010177C(&qword_1002CAFF8, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_100102670()
{
  return sub_10010177C(&qword_1002CA528, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_1001026B8()
{
  return sub_10010177C(&qword_1002CAE18, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_100102700()
{
  return sub_10010177C(&qword_1002CB000, (void (*)(uint64_t))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_100102748()
{
  return sub_10010177C(&qword_1002CB008, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_100102790()
{
  return sub_10010177C(&qword_1002CA530, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1001027D8()
{
  return sub_10010177C(&qword_1002CAE20, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_100102820()
{
  return sub_10010177C(&qword_1002CB010, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_100102868()
{
  return sub_10010177C(&qword_1002CB018, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t sub_1001028B0()
{
  return sub_10010177C(&qword_1002CA4B8, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t sub_1001028F8()
{
  return sub_10010177C(&qword_1002CAE28, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t sub_100102940()
{
  return sub_10010177C(&qword_1002CB020, (void (*)(uint64_t))type metadata accessor for RequestItem);
}

uint64_t sub_100102988()
{
  return sub_10010177C(&qword_1002CB028, (void (*)(uint64_t))type metadata accessor for ResponseItem);
}

uint64_t sub_1001029D0()
{
  return sub_10010177C(&qword_1002CADF0, (void (*)(uint64_t))type metadata accessor for ResponseItem);
}

uint64_t sub_100102A18()
{
  return sub_10010177C(&qword_1002CAE48, (void (*)(uint64_t))type metadata accessor for ResponseItem);
}

uint64_t sub_100102A60()
{
  return sub_10010177C(&qword_1002CB030, (void (*)(uint64_t))type metadata accessor for ResponseItem);
}

uint64_t sub_100102AA8()
{
  return sub_10010177C(&qword_1002CB038, (void (*)(uint64_t))type metadata accessor for ResetInterval);
}

uint64_t sub_100102AF0()
{
  return sub_10010177C(&qword_1002CB040, (void (*)(uint64_t))type metadata accessor for ResetInterval);
}

uint64_t sub_100102B38()
{
  return sub_10010177C(&qword_1002CAE58, (void (*)(uint64_t))type metadata accessor for ResetInterval);
}

uint64_t sub_100102B80()
{
  return sub_10010177C(&qword_1002CB048, (void (*)(uint64_t))type metadata accessor for ResetInterval);
}

uint64_t sub_100102BC8()
{
  return sub_10010177C(&qword_1002CB050, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t sub_100102C10()
{
  return sub_10010177C(&qword_1002CAE70, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t sub_100102C58()
{
  return sub_10010177C(&qword_1002CAE68, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t sub_100102CA0()
{
  return sub_10010177C(&qword_1002CB058, (void (*)(uint64_t))type metadata accessor for UploadResource);
}

uint64_t sub_100102CE8()
{
  return sub_10010177C(&qword_1002CB060, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
}

uint64_t sub_100102D30()
{
  return sub_10010177C(&qword_1002CB068, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
}

uint64_t sub_100102D78()
{
  return sub_10010177C(&qword_1002CAE78, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
}

uint64_t sub_100102DC0()
{
  return sub_10010177C(&qword_1002CB070, (void (*)(uint64_t))type metadata accessor for UploadResourcesRequest);
}

uint64_t sub_100102E08()
{
  return sub_10010177C(&qword_1002CB078, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
}

uint64_t sub_100102E50()
{
  return sub_10010177C(&qword_1002CB080, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
}

uint64_t sub_100102E98()
{
  return sub_10010177C(&qword_1002CAE80, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
}

uint64_t sub_100102EE0()
{
  return sub_10010177C(&qword_1002CB088, (void (*)(uint64_t))type metadata accessor for UploadResourcesResponse);
}

uint64_t sub_100102F28()
{
  return sub_10010177C(&qword_1002CB090, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t sub_100102F70()
{
  return sub_10010177C(&qword_1002CAE90, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t sub_100102FB8()
{
  return sub_10010177C(&qword_1002CAE88, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t sub_100103000()
{
  return sub_10010177C(&qword_1002CB098, (void (*)(uint64_t))type metadata accessor for UntranscodableItem);
}

uint64_t sub_100103048()
{
  return sub_10010177C(&qword_1002CB0A0, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
}

uint64_t sub_100103090()
{
  return sub_10010177C(&qword_1002CB0A8, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
}

uint64_t sub_1001030D8()
{
  return sub_10010177C(&qword_1002CAE98, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
}

uint64_t sub_100103120()
{
  return sub_10010177C(&qword_1002CB0B0, (void (*)(uint64_t))type metadata accessor for UntranscodableRequest);
}

uint64_t sub_100103168()
{
  return sub_10010177C(&qword_1002CB0B8, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
}

uint64_t sub_1001031B0()
{
  return sub_10010177C(&qword_1002CB0C0, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
}

uint64_t sub_1001031F8()
{
  return sub_10010177C(&qword_1002CAEA0, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
}

uint64_t sub_100103240()
{
  return sub_10010177C(&qword_1002CB0C8, (void (*)(uint64_t))type metadata accessor for UntranscodableResponse);
}

ValueMetadata *type metadata accessor for DownloadType()
{
  return &type metadata for DownloadType;
}

ValueMetadata *type metadata accessor for ItemErrorCode()
{
  return &type metadata for ItemErrorCode;
}

ValueMetadata *type metadata accessor for BatchErrorCode()
{
  return &type metadata for BatchErrorCode;
}

ValueMetadata *type metadata accessor for ResourceType()
{
  return &type metadata for ResourceType;
}

ValueMetadata *type metadata accessor for UploadRecordType()
{
  return &type metadata for UploadRecordType;
}

uint64_t getEnumTagSinglePayload for ResourceAnalyzeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103304);
}

uint64_t storeEnumTagSinglePayload for ResourceAnalyzeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010331C);
}

uint64_t getEnumTagSinglePayload for ResourceAnalyzeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103350);
}

uint64_t storeEnumTagSinglePayload for ResourceAnalyzeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100103368);
}

uint64_t sub_10010336C()
{
  return sub_100105E9C();
}

uint64_t getEnumTagSinglePayload for ResourceDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001033AC);
}

uint64_t storeEnumTagSinglePayload for ResourceDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001033C4);
}

uint64_t getEnumTagSinglePayload for ResourceDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001033DC);
}

uint64_t storeEnumTagSinglePayload for ResourceDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001033F4);
}

uint64_t getEnumTagSinglePayload for ResourceStreamRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010340C);
}

uint64_t storeEnumTagSinglePayload for ResourceStreamRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100103424);
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResourceStreamResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103894);
}

uint64_t sub_100103898(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResourceStreamResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010395C);
}

void *sub_100103960(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for VideoHEVCProfileTierLevelInformation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103D70);
}

uint64_t sub_100103D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100103DF4);
}

uint64_t sub_100103DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_100103E68()
{
  return sub_1001064C4();
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for RequestItem(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001041DC);
}

uint64_t sub_1001041DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001042B0);
}

uint64_t sub_1001042B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10010436C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestItem.MediaTypeHint()
{
  return &type metadata for RequestItem.MediaTypeHint;
}

void *initializeBufferWithCopyOfBuffer for ResponseItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[7];
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v12 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v13 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v13;
    uint64_t v14 = *(int *)(a3 + 48);
    uint64_t v25 = (uint64_t)a2 + v14;
    uint64_t v26 = a1 + v14;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v26, v25, v15);
    uint64_t v17 = *(int *)(a3 + 52);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Ckcode_RecordTransport();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_1000D0514(&qword_1002CA468);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t destroy for ResponseItem(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v23 = a1 + v12;
  uint64_t v13 = a2 + v12;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v23, v13, v14);
  uint64_t v16 = *(int *)(a3 + 52);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_1000D0514(&qword_1002CA468);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 52);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v10) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v10)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_1000D0514(&qword_1002CA468);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_1000D0514(&qword_1002CA468);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 52);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v14)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = sub_1000D0514(&qword_1002CA468);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100104F80);
}

uint64_t sub_100104F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA468);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 52);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001050C4);
}

uint64_t sub_1001050C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CA468);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 52);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1001051F4()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_100107424(319, (unint64_t *)&unk_1002CB5F0, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ResetInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ResetInterval(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for ResetInterval(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001056DC);
}

uint64_t sub_1001056DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001057A0);
}

uint64_t sub_1001057A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100105848()
{
  return sub_1001064C4();
}

void *initializeBufferWithCopyOfBuffer for UploadResource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for UploadResource(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for UploadResource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100105D0C);
}

uint64_t sub_100105D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100105DD0);
}

uint64_t sub_100105DD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100105E78()
{
  return sub_100105E9C();
}

uint64_t sub_100105E9C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UploadResourcesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100105F44);
}

uint64_t storeEnumTagSinglePayload for UploadResourcesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100105F5C);
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadResourcesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for UploadResourcesResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106340);
}

uint64_t sub_100106340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106404);
}

uint64_t sub_100106404(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001064AC()
{
  return sub_1001064C4();
}

uint64_t sub_1001064C4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UntranscodableItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = a2[10];
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v16 = (uint64_t)a2 + v10;
    uint64_t v11 = a1 + v10;
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v16, v12);
  }
  return v3;
}

uint64_t destroy for UntranscodableItem(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v14 = a2 + v9;
  uint64_t v10 = a1 + v9;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v14, v11);
  return a1;
}

uint64_t assignWithCopy for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106AD0);
}

uint64_t sub_100106AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106B94);
}

uint64_t sub_100106B94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100106C3C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UntranscodableRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106CF8);
}

uint64_t storeEnumTagSinglePayload for UntranscodableRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106D10);
}

uint64_t *_s22CloudKitImplementation22ResourceAnalyzeRequestVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t _s22CloudKitImplementation22ResourceAnalyzeRequestVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *_s22CloudKitImplementation22ResourceAnalyzeRequestVwcp_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *_s22CloudKitImplementation22ResourceAnalyzeRequestVwca_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *_s22CloudKitImplementation22ResourceAnalyzeRequestVwtk_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *_s22CloudKitImplementation22ResourceAnalyzeRequestVwta_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for UntranscodableResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001070B8);
}

uint64_t sub_1001070BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UntranscodableResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100107180);
}

void *sub_100107184(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10010722C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001072C8()
{
  return type metadata accessor for RequestItem._StorageClass(0);
}

void sub_1001072D0()
{
  sub_100107424(319, &qword_1002CBAA0, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
  if (v0 <= 0x3F)
  {
    sub_100107424(319, (unint64_t *)&unk_1002CBAA8, (void (*)(uint64_t))type metadata accessor for VideoHEVCProfileTierLevelInformation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100107424(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_100107478()
{
  unint64_t result = qword_1002CBDE8;
  if (!qword_1002CBDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CBDE8);
  }
  return result;
}

uint64_t CMTime.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for CMTime(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for CMTime(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CBEA8);
}

uint64_t CMTimeRange.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CMTimeRange(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CMTime(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v7)((void *)(v4 - 8), v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  return v7(v5, 1, 1, v4);
}

uint64_t type metadata accessor for CMTimeRange(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CBF40);
}

uint64_t CMTimeRange.start.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTimeRange(0) + 20);
  sub_1000E27E8(v3, &qword_1002CA4C0);
  sub_1001076E0(a1, v3);
  uint64_t v4 = type metadata accessor for CMTime(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t sub_1001076E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CMTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CMTimeRange.duration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTimeRange(0) + 24);
  sub_1000E27E8(v3, &qword_1002CA4C0);
  sub_1001076E0(a1, v3);
  uint64_t v4 = type metadata accessor for CMTime(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t CMTime.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTime(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t CMTime.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTime(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CMTime.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t CMTimeRange.start.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CA4C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CMTimeRange(0);
  sub_100107A1C(v1 + *(int *)(v6 + 20), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for CMTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1001076E0((uint64_t)v5, a1);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CA4C0);
}

uint64_t sub_100107A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CA4C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t (*CMTimeRange.start.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CA4C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CMTime(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CMTimeRange(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100107A1C(v1 + v11, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = 0;
    void v10[2] = 0;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CA4C0);
  }
  else
  {
    sub_1001076E0((uint64_t)v5, (uint64_t)v10);
  }
  return sub_100107C00;
}

uint64_t sub_100107C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CMTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100107C68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CMTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL CMTimeRange.hasStart.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CA4C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CMTimeRange(0);
  sub_100107A1C(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for CMTime(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CA4C0);
  return v6;
}

Swift::Void __swiftcall CMTimeRange.clearStart()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CMTimeRange(0) + 20);
  sub_1000E27E8(v1, &qword_1002CA4C0);
  uint64_t v2 = type metadata accessor for CMTime(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t CMTimeRange.duration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CA4C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CMTimeRange(0);
  sub_100107A1C(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for CMTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1001076E0((uint64_t)v5, a1);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CA4C0);
}

uint64_t (*CMTimeRange.duration.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CA4C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CMTime(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CMTimeRange(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100107A1C(v1 + v11, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = 0;
    void v10[2] = 0;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CA4C0);
  }
  else
  {
    sub_1001076E0((uint64_t)v5, (uint64_t)v10);
  }
  return sub_100107C00;
}

void sub_1001080B0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    sub_100107C04(*(void *)(*(void *)a1 + 40), (uint64_t)v4);
    sub_1000E27E8(v9, &qword_1002CA4C0);
    sub_1001076E0((uint64_t)v4, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    sub_100107C68((uint64_t)v5);
  }
  else
  {
    sub_1000E27E8(**(void **)a1 + v3, &qword_1002CA4C0);
    sub_1001076E0((uint64_t)v5, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL CMTimeRange.hasDuration.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CA4C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CMTimeRange(0);
  sub_100107A1C(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for CMTime(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CA4C0);
  return v6;
}

Swift::Void __swiftcall CMTimeRange.clearDuration()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CMTimeRange(0) + 24);
  sub_1000E27E8(v1, &qword_1002CA4C0);
  uint64_t v2 = type metadata accessor for CMTime(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

const char *CMTime.protoMessageName.unsafeMutableAddressor()
{
  return "CMTime";
}

uint64_t static CMTime.protoMessageName.getter()
{
  return 0x656D69544D43;
}

uint64_t sub_100108344(uint64_t a1)
{
  return sub_100108784(a1, static CMTime._protobuf_nameMap, (uint64_t)"value", (uint64_t)"timescale", 9);
}

uint64_t CMTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D90, (uint64_t)static CMTime._protobuf_nameMap);
}

uint64_t static CMTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D90, (uint64_t)static CMTime._protobuf_nameMap, a1);
}

uint64_t CMTime.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CMTime.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 8) || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CMTime(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CMTime.hashValue.getter()
{
  return sub_100108DF4((void (*)(void))type metadata accessor for CMTime, &qword_1002CBE18, (void (*)(uint64_t))type metadata accessor for CMTime);
}

uint64_t sub_100108558@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_100108580()
{
  return CMTime.decodeMessage<A>(decoder:)();
}

uint64_t sub_100108598()
{
  return CMTime.traverse<A>(visitor:)();
}

uint64_t sub_1001085B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001092B8(&qword_1002CBF90, (void (*)(uint64_t))type metadata accessor for CMTime);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010862C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D90, (uint64_t)static CMTime._protobuf_nameMap, a1);
}

uint64_t sub_100108650()
{
  sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
  return Message.debugDescription.getter();
}

uint64_t sub_1001086BC()
{
  sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
  return Message.hash(into:)();
}

const char *CMTimeRange.protoMessageName.unsafeMutableAddressor()
{
  return "CMTimeRange";
}

uint64_t static CMTimeRange.protoMessageName.getter()
{
  return 0x6152656D69544D43;
}

uint64_t sub_100108764(uint64_t a1)
{
  return sub_100108784(a1, static CMTimeRange._protobuf_nameMap, (uint64_t)"start", (uint64_t)"duration", 8);
}

uint64_t sub_100108784(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_1000D04B0(v7, a2);
  sub_1000CDD9C(v7, (uint64_t)a2);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v8 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10024A2C0;
  uint64_t v12 = (void *)(v11 + v10);
  unint64_t v13 = v11 + v10 + v8[14];
  *uint64_t v12 = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = 5;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  uint64_t v17 = (char *)v12 + v9 + v8[14];
  *(void *)((char *)v12 + v9) = 2;
  *(void *)uint64_t v17 = a4;
  *((void *)v17 + 1) = a5;
  unsigned char v17[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CMTimeRange._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9D98, (uint64_t)static CMTimeRange._protobuf_nameMap);
}

uint64_t static CMTimeRange._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9D98, (uint64_t)static CMTimeRange._protobuf_nameMap, a1);
}

uint64_t CMTimeRange.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for CMTimeRange(0);
        type metadata accessor for CMTime(0);
        sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CMTimeRange.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v31 = a1;
  uint64_t v6 = sub_1000D0514(&qword_1002CA4C0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v27 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CMTime(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v26 = (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = type metadata accessor for CMTimeRange(0);
  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v30 = v3;
  sub_100107A1C(v3 + v18, (uint64_t)v10);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v20 = v19(v10, 1, v11);
  uint64_t v28 = a2;
  if (v20 == 1)
  {
    sub_1000E27E8((uint64_t)v10, &qword_1002CA4C0);
    uint64_t v21 = v30;
  }
  else
  {
    sub_1001076E0((uint64_t)v10, (uint64_t)v16);
    sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_100107C68((uint64_t)v16);
    uint64_t v21 = v30;
    if (v4) {
      return result;
    }
  }
  uint64_t v23 = v27;
  sub_100107A1C(v21 + *(int *)(v17 + 24), v27);
  if (v19((char *)v23, 1, v11) == 1)
  {
    sub_1000E27E8(v23, &qword_1002CA4C0);
  }
  else
  {
    uint64_t v24 = v26;
    sub_1001076E0(v23, v26);
    sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_100107C68(v24);
    if (v4) {
      return result;
    }
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int CMTimeRange.hashValue.getter()
{
  return sub_100108DF4((void (*)(void))type metadata accessor for CMTimeRange, &qword_1002CBE28, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
}

Swift::Int sub_100108DF4(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100108E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CMTime(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  return v8(v6, 1, 1, v5);
}

uint64_t sub_100108F38()
{
  return CMTimeRange.decodeMessage<A>(decoder:)();
}

uint64_t sub_100108F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMTimeRange.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100108F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001092B8(&qword_1002CBF88, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100108FE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9D98, (uint64_t)static CMTimeRange._protobuf_nameMap, a1);
}

uint64_t sub_100109008()
{
  sub_1001092B8(&qword_1002CBE10, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
  return Message.debugDescription.getter();
}

uint64_t sub_100109074()
{
  sub_1001092B8(&qword_1002CBE10, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
  return Message.hash(into:)();
}

uint64_t _s22CloudKitImplementation6CMTimeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v11 = type metadata accessor for CMTime(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v8, a2 + *(int *)(v11 + 24), v4);
    sub_1001092B8(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1001092B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s22CloudKitImplementation11CMTimeRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = type metadata accessor for UnknownStorage();
  uint64_t v65 = *(void *)(v67 - 8);
  uint64_t v4 = __chkstk_darwin(v67);
  uint64_t v64 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v61 - v6;
  uint64_t v7 = type metadata accessor for CMTime(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v62 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v68 = (uint64_t)&v61 - v11;
  uint64_t v12 = sub_1000D0514(&qword_1002CBF98);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v72 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = sub_1000D0514(&qword_1002CA4C0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v66 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v70 = (uint64_t)&v61 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v71 = (uint64_t)&v61 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v61 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v61 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = type metadata accessor for CMTimeRange(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v73 = a1;
  sub_100107A1C(a1 + v33, (uint64_t)v31);
  uint64_t v34 = *(int *)(v32 + 20);
  uint64_t v74 = a2;
  sub_100107A1C(a2 + v34, (uint64_t)v29);
  uint64_t v69 = v12;
  uint64_t v35 = *(int *)(v12 + 48);
  uint64_t v36 = v7;
  uint64_t v37 = (uint64_t)&v16[v35];
  sub_100107A1C((uint64_t)v31, (uint64_t)v16);
  sub_100107A1C((uint64_t)v29, v37);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v38((uint64_t)v16, 1, v7) == 1)
  {
    sub_1000E27E8((uint64_t)v29, &qword_1002CA4C0);
    sub_1000E27E8((uint64_t)v31, &qword_1002CA4C0);
    if (v38(v37, 1, v7) == 1)
    {
      sub_1000E27E8((uint64_t)v16, &qword_1002CA4C0);
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v53 = &qword_1002CBF98;
    uint64_t v54 = (uint64_t)v16;
    goto LABEL_24;
  }
  sub_100107A1C((uint64_t)v16, (uint64_t)v26);
  if (v38(v37, 1, v7) == 1)
  {
    sub_1000E27E8((uint64_t)v29, &qword_1002CA4C0);
    sub_1000E27E8((uint64_t)v31, &qword_1002CA4C0);
    sub_100107C68((uint64_t)v26);
    goto LABEL_10;
  }
  uint64_t v55 = v68;
  sub_1001076E0(v37, v68);
  if (*(void *)v26 != *(void *)v55 || *((_DWORD *)v26 + 2) != *(_DWORD *)(v55 + 8))
  {
    sub_100107C68(v55);
    sub_1000E27E8((uint64_t)v29, &qword_1002CA4C0);
    sub_1000E27E8((uint64_t)v31, &qword_1002CA4C0);
    sub_100107C68((uint64_t)v26);
    uint64_t v54 = (uint64_t)v16;
    uint64_t v53 = &qword_1002CA4C0;
    goto LABEL_24;
  }
  uint64_t v61 = v55 + *(int *)(v36 + 24);
  sub_1001092B8(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_100107C68(v55);
  sub_1000E27E8((uint64_t)v29, &qword_1002CA4C0);
  sub_1000E27E8((uint64_t)v31, &qword_1002CA4C0);
  sub_100107C68((uint64_t)v26);
  sub_1000E27E8((uint64_t)v16, &qword_1002CA4C0);
  if ((v56 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_4:
  uint64_t v39 = v73;
  uint64_t v40 = v71;
  sub_100107A1C(v73 + *(int *)(v32 + 24), v71);
  uint64_t v41 = v74;
  uint64_t v42 = v74 + *(int *)(v32 + 24);
  uint64_t v43 = v70;
  sub_100107A1C(v42, v70);
  uint64_t v44 = v72;
  uint64_t v45 = v72 + *(int *)(v69 + 48);
  sub_100107A1C(v40, v72);
  sub_100107A1C(v43, v45);
  if (v38(v44, 1, v36) != 1)
  {
    uint64_t v57 = v66;
    sub_100107A1C(v44, v66);
    if (v38(v45, 1, v36) == 1)
    {
      sub_1000E27E8(v43, &qword_1002CA4C0);
      sub_1000E27E8(v40, &qword_1002CA4C0);
      sub_100107C68(v57);
      goto LABEL_18;
    }
    uint64_t v58 = v62;
    sub_1001076E0(v45, v62);
    if (*(void *)v57 == *(void *)v58 && *(_DWORD *)(v57 + 8) == *(_DWORD *)(v58 + 8))
    {
      sub_1001092B8(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100107C68(v58);
      sub_1000E27E8(v43, &qword_1002CA4C0);
      sub_1000E27E8(v40, &qword_1002CA4C0);
      sub_100107C68(v57);
      sub_1000E27E8(v44, &qword_1002CA4C0);
      if (v59) {
        goto LABEL_7;
      }
LABEL_25:
      char v51 = 0;
      return v51 & 1;
    }
    sub_100107C68(v58);
    sub_1000E27E8(v43, &qword_1002CA4C0);
    sub_1000E27E8(v40, &qword_1002CA4C0);
    sub_100107C68(v57);
    uint64_t v54 = v44;
    uint64_t v53 = &qword_1002CA4C0;
LABEL_24:
    sub_1000E27E8(v54, v53);
    goto LABEL_25;
  }
  sub_1000E27E8(v43, &qword_1002CA4C0);
  sub_1000E27E8(v40, &qword_1002CA4C0);
  if (v38(v45, 1, v36) != 1)
  {
LABEL_18:
    uint64_t v53 = &qword_1002CBF98;
    uint64_t v54 = v44;
    goto LABEL_24;
  }
  sub_1000E27E8(v44, &qword_1002CA4C0);
LABEL_7:
  uint64_t v46 = v65;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  uint64_t v48 = v63;
  uint64_t v49 = v67;
  v47(v63, v39, v67);
  uint64_t v50 = v64;
  v47(v64, v41, v49);
  sub_1001092B8(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v46 + 8);
  v52(v50, v49);
  v52(v48, v49);
  return v51 & 1;
}

uint64_t sub_100109B44()
{
  return sub_1001092B8(&qword_1002CBE30, (void (*)(uint64_t))type metadata accessor for CMTime);
}

uint64_t sub_100109B8C()
{
  return sub_1001092B8(&qword_1002CBE20, (void (*)(uint64_t))type metadata accessor for CMTime);
}

uint64_t sub_100109BD4()
{
  return sub_1001092B8(&qword_1002CBE18, (void (*)(uint64_t))type metadata accessor for CMTime);
}

uint64_t sub_100109C1C()
{
  return sub_1001092B8(&qword_1002CBE38, (void (*)(uint64_t))type metadata accessor for CMTime);
}

uint64_t sub_100109C64()
{
  return sub_1001092B8(&qword_1002CBE40, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
}

uint64_t sub_100109CAC()
{
  return sub_1001092B8(&qword_1002CBE10, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
}

uint64_t sub_100109CF4()
{
  return sub_1001092B8(&qword_1002CBE28, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
}

uint64_t sub_100109D3C()
{
  return sub_1001092B8(&qword_1002CBE48, (void (*)(uint64_t))type metadata accessor for CMTimeRange);
}

void *initializeBufferWithCopyOfBuffer for CMTime(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CMTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010A0E4);
}

uint64_t sub_10010A0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CMTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010A168);
}

uint64_t sub_10010A168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_10010A1DC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CMTimeRange(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v24(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for CMTime(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_1000D0514(&qword_1002CA4C0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = v24;
    }
    else
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
      uint64_t v17 = *(int *)(v11 + 24);
      uint64_t v18 = &v10[v17];
      uint64_t v15 = v24;
      v24(&v9[v17], v18, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v19 = *(int *)(a3 + 24);
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    if (v13(v21, 1, v11))
    {
      uint64_t v22 = sub_1000D0514(&qword_1002CA4C0);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v20 = *(void *)v21;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      v15(&v20[*(int *)(v11 + 24)], &v21[*(int *)(v11 + 24)], v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t destroy for CMTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v11(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CMTime(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v11(v5 + *(int *)(v6 + 24), v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!result)
  {
    uint64_t v10 = v8 + *(int *)(v6 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v4);
  }
  return result;
}

char *initializeWithCopy for CMTimeRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v21 = a3;
  uint64_t v22 = a1;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for CMTime(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = v7;
  uint64_t v16 = *(int *)(v21 + 24);
  uint64_t v17 = &v22[v16];
  uint64_t v18 = &a2[v16];
  if (v13(v18, 1, v11))
  {
    uint64_t v19 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v17 = *(void *)v18;
    *((_DWORD *)v17 + 2) = *((_DWORD *)v18 + 2);
    v15(&v17[*(int *)(v11 + 24)], &v18[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
  }
  return v22;
}

uint64_t assignWithCopy for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24);
  v22(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CMTime(0);
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v12 = v11(v8, 1, v10);
  int v13 = v11(v9, 1, v10);
  if (v12)
  {
    if (!v13)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_100107C68((uint64_t)v8);
LABEL_6:
    uint64_t v14 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v22((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (_DWORD *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = v11((char *)(a1 + v15), 1, v10);
  int v19 = v11(v17, 1, v10);
  if (!v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      v16[2] = *((_DWORD *)v17 + 2);
      v22((uint64_t)v16 + *(int *)(v10 + 24), (uint64_t)&v17[*(int *)(v10 + 24)], v6);
      return a1;
    }
    sub_100107C68((uint64_t)v16);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  v16[2] = *((_DWORD *)v17 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)v16 + *(int *)(v10 + 24), &v17[*(int *)(v10 + 24)], v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v10);
  return a1;
}

char *initializeWithTake for CMTimeRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v21 = a3;
  uint64_t v22 = a1;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for CMTime(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = v7;
  uint64_t v16 = *(int *)(v21 + 24);
  uint64_t v17 = &v22[v16];
  int v18 = &a2[v16];
  if (v13(v18, 1, v11))
  {
    uint64_t v19 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v17 = *(void *)v18;
    *((_DWORD *)v17 + 2) = *((_DWORD *)v18 + 2);
    v15(&v17[*(int *)(v11 + 24)], &v18[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
  }
  return v22;
}

uint64_t assignWithTake for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v22(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CMTime(0);
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v12 = v11(v8, 1, v10);
  int v13 = v11(v9, 1, v10);
  if (v12)
  {
    if (!v13)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_100107C68((uint64_t)v8);
LABEL_6:
    uint64_t v14 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v22((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (_DWORD *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  int v18 = v11((char *)(a1 + v15), 1, v10);
  int v19 = v11(v17, 1, v10);
  if (!v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      v16[2] = *((_DWORD *)v17 + 2);
      v22((uint64_t)v16 + *(int *)(v10 + 24), (uint64_t)&v17[*(int *)(v10 + 24)], v6);
      return a1;
    }
    sub_100107C68((uint64_t)v16);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_1000D0514(&qword_1002CA4C0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  v16[2] = *((_DWORD *)v17 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v16 + *(int *)(v10 + 24), &v17[*(int *)(v10 + 24)], v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010B114);
}

uint64_t sub_10010B114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1000D0514(&qword_1002CA4C0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010B224);
}

uint64_t sub_10010B224(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1000D0514(&qword_1002CA4C0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10010B32C()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10010B3F4();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10010B3F4()
{
  if (!qword_1002CBF50)
  {
    type metadata accessor for CMTime(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002CBF50);
    }
  }
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.initiateExit(operationID:sharedZoneID:exitType:retentionPolicy:participantUserIdsToRemove:participantIdsToRemove:zoneTtlForIcplexit:exitSource:stopAtStage:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, __int16 a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v33 = a8;
  uint64_t v31 = a6;
  uint64_t v29 = a4;
  uint64_t v27 = a3;
  uint64_t v36 = a16;
  uint64_t v35 = a17;
  uint64_t v37 = a18;
  uint64_t v34 = a19;
  uint64_t v32 = a14;
  uint64_t v30 = a12;
  int v28 = a11;
  uint64_t v23 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v40 = v27;
  uint64_t v41 = v29;
  __int16 v42 = a5 & 0x1FF;
  uint64_t v43 = v31;
  __int16 v44 = a7 & 0x1FF;
  uint64_t v45 = v33;
  uint64_t v46 = a9;
  uint64_t v47 = a10;
  char v48 = a11 & 1;
  uint64_t v49 = a12;
  __int16 v50 = a13 & 0x1FF;
  uint64_t v51 = a14;
  __int16 v52 = a15 & 0x1FF;
  sub_10010BE10(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 8))(v25, v36, v35, v37);
  return sub_10010E99C((uint64_t)v25, type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_10010B6A8(uint64_t a1)
{
  return sub_10010CDAC(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.checkDuplicates(operationID:zoneID:recordIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
  __chkstk_darwin(v16);
  int v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[4] = a1;
  void v20[5] = a2;
  void v20[6] = a3;
  v20[7] = a4;
  sub_10010BE10(&qword_1002CBFA8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v18, a5, a6, a7, a8);
  return sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitMoveBatch(operationID:zoneID:batchSize:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  __chkstk_darwin(v16);
  int v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[4] = a1;
  void v20[5] = a2;
  void v20[6] = a3;
  int v21 = a4;
  char v22 = BYTE4(a4) & 1;
  sub_10010BE10(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24))(v18, a5, a6, a7, a8);
  return sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10010B99C(uint64_t a1)
{
  return sub_10010D5B4(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.silentMoverRampingService(operationID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_10010BE10(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v14, a3, a4, a5, a6);
  return sub_10010E99C((uint64_t)v14, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitMoveErrorFeedback(exitZoneID:items:moveBatchOperationID:moveBatchID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v22 = a8;
  uint64_t v21 = a7;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  sub_10010BE10(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 40))(v18, v21, v22, a9, a10);
  return sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10010BC74(void *a1)
{
  return sub_10010DB28(a1);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsync.exitStatusFeedback(operationID:shareID:status:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a8;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  __int16 v26 = a5 & 0x1FF;
  sub_10010BE10(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 48))(v18, a6, a7, v21, a9);
  return sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_10010BDF8(uint64_t a1)
{
  return sub_10010DF04(a1);
}

uint64_t sub_10010BE10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.initiateExit(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFC8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFD0));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_InitiateExitRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.checkDuplicates(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFD8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFE0));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitMoveBatch(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFE8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFF0));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.silentMoverRampingService(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD5F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFF8));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitMoveErrorFeedback(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD550);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CC000));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void Goldilocks_CloudPhotosGoldilocksAPIAsyncClient.exitStatusFeedback(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD510);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CC008));
  uint64_t v8 = (void *)CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  CKCodeService.add<A, B>(_:)();
}

void sub_10010C76C(uint64_t a1)
{
}

void sub_10010C790(uint64_t a1)
{
}

void sub_10010C7B4(uint64_t a1)
{
}

void sub_10010C7D8(uint64_t a1)
{
}

void sub_10010C7FC(uint64_t a1)
{
}

void sub_10010C820(uint64_t a1)
{
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.initiateExit(operationID:sharedZoneID:exitType:retentionPolicy:participantUserIdsToRemove:participantIdsToRemove:zoneTtlForIcplexit:exitSource:stopAtStage:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, __int16 a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v34 = a8;
  uint64_t v32 = a6;
  uint64_t v30 = a4;
  uint64_t v28 = a3;
  uint64_t v37 = a16;
  uint64_t v36 = a17;
  uint64_t v38 = a18;
  uint64_t v35 = a19;
  uint64_t v33 = a14;
  uint64_t v31 = a12;
  int v29 = a11;
  uint64_t v23 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v41 = v28;
  uint64_t v42 = v30;
  __int16 v43 = a5 & 0x1FF;
  uint64_t v44 = v32;
  __int16 v45 = a7 & 0x1FF;
  uint64_t v46 = v34;
  uint64_t v47 = a9;
  uint64_t v48 = a10;
  char v49 = a11 & 1;
  uint64_t v50 = a12;
  __int16 v51 = a13 & 0x1FF;
  uint64_t v52 = a14;
  __int16 v53 = a15 & 0x1FF;
  sub_10010BE10(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)();
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 8))(v25, v37, v36, v38);
  sub_10010E99C((uint64_t)v25, type metadata accessor for Goldilocks_InitiateExitRequest);
  return v26;
}

uint64_t sub_10010CAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, __int16 a14, uint64_t a15, __int16 a16)
{
  uint64_t v34 = a5;
  uint64_t v35 = a7;
  uint64_t v36 = a2;
  int v37 = a6;
  uint64_t v20 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  int v29 = (char *)&v34 - v28;
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a1 = v36;
    *(void *)(a1 + 8) = a3;
  }
  sub_10010E808(a4, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    uint64_t result = sub_10010E870((uint64_t)v22);
  }
  else
  {
    sub_10010E8D0((uint64_t)v22, (uint64_t)v29);
    sub_10010E934((uint64_t)v29, (uint64_t)v27, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v31 = a1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 52);
    sub_10010E870(v31);
    sub_10010E8D0((uint64_t)v27, v31);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v31, 0, 1, v23);
    uint64_t result = sub_10010E99C((uint64_t)v29, type metadata accessor for Goldilocks_ZoneID);
  }
  char v32 = v37;
  if ((v37 & 0x100) != 0)
  {
    uint64_t v33 = a10;
    if ((a8 & 0x100) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    *(void *)(a1 + 16) = v34;
    *(unsigned char *)(a1 + 24) = v32 & 1;
    uint64_t v33 = a10;
    if ((a8 & 0x100) != 0)
    {
LABEL_8:
      if (!*(void *)(a9 + 16)) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  *(void *)(a1 + 32) = v35;
  *(unsigned char *)(a1 + 40) = a8 & 1;
  if (*(void *)(a9 + 16))
  {
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = a9;
  }
LABEL_10:
  if (*(void *)(v33 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = v33;
  }
  if (a12)
  {
    if ((a14 & 0x100) != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(void *)(a1 + 64) = a11;
    if ((a14 & 0x100) != 0)
    {
LABEL_14:
      if ((a16 & 0x100) != 0) {
        return result;
      }
      goto LABEL_15;
    }
  }
  *(void *)(a1 + 72) = a13;
  *(unsigned char *)(a1 + 80) = a14 & 1;
  if ((a16 & 0x100) != 0) {
    return result;
  }
LABEL_15:
  *(void *)(a1 + 88) = a15;
  *(unsigned char *)(a1 + 96) = a16 & 1;
  return result;
}

uint64_t sub_10010CDAC(uint64_t a1)
{
  return sub_10010CAA8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 49) << 8), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 65) << 8), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(unsigned char *)(v1 + 96), *(void *)(v1 + 104), *(unsigned __int8 *)(v1 + 112) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 113) << 8), *(void *)(v1 + 120), *(unsigned __int8 *)(v1 + 128) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 129) << 8));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.checkDuplicates(operationID:zoneID:recordIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v21[4] = a1;
  v21[5] = a2;
  v21[6] = a3;
  v21[7] = a4;
  sub_10010BE10(&qword_1002CBFA8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  static Message.with(_:)();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v18, a5, a6, a7, a8);
  sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  return v19;
}

uint64_t sub_10010CFA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v9 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v22 - v17;
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
  }
  sub_10010E808(a4, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t result = sub_10010E870((uint64_t)v11);
  }
  else
  {
    sub_10010E8D0((uint64_t)v11, (uint64_t)v18);
    sub_10010E934((uint64_t)v18, (uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v20 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesRequest(0) + 28);
    sub_10010E870(v20);
    sub_10010E8D0((uint64_t)v16, v20);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
    uint64_t result = sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
  }
  uint64_t v21 = v23;
  if (*(void *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    a1[2] = v21;
  }
  return result;
}

uint64_t sub_10010D1E8(void *a1)
{
  return sub_10010CFA8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitMoveBatch(operationID:zoneID:batchSize:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v21[4] = a1;
  v21[5] = a2;
  v21[6] = a3;
  int v22 = a4;
  char v23 = BYTE4(a4) & 1;
  sub_10010BE10(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  static Message.with(_:)();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24))(v18, a5, a6, a7, a8);
  sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return v19;
}

uint64_t sub_10010D384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v9 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v22 - v17;
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
  }
  sub_10010E808(a4, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    sub_10010E8D0((uint64_t)v11, (uint64_t)v18);
    sub_10010E934((uint64_t)v18, (uint64_t)v16, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v21 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0) + 28);
    sub_10010E870(v21);
    sub_10010E8D0((uint64_t)v16, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
    uint64_t result = sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    int v20 = v23;
    if ((v23 & 0x100000000) != 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = sub_10010E870((uint64_t)v11);
  int v20 = v23;
  if ((v23 & 0x100000000) == 0) {
LABEL_7:
  }
    *(_DWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t sub_10010D5B4(uint64_t a1)
{
  return sub_10010D384(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.silentMoverRampingService(operationID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  sub_10010BE10(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)();
  uint64_t v15 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v14, a3, a4, a5, a6);
  sub_10010E99C((uint64_t)v14, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return v15;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitMoveErrorFeedback(exitZoneID:items:moveBatchOperationID:moveBatchID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = a8;
  uint64_t v22 = a7;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  sub_10010BE10(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 40))(v18, v22, v23, a9, a10);
  sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return v19;
}

uint64_t sub_10010D8C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v25 = a4;
  uint64_t v11 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  int v20 = (char *)&v24 - v19;
  sub_10010E808(a2, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    uint64_t result = sub_10010E870((uint64_t)v13);
  }
  else
  {
    sub_10010E8D0((uint64_t)v13, (uint64_t)v20);
    sub_10010E934((uint64_t)v20, (uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0) + 32);
    sub_10010E870(v22);
    sub_10010E8D0((uint64_t)v18, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
    uint64_t result = sub_10010E99C((uint64_t)v20, type metadata accessor for Goldilocks_ZoneID);
  }
  uint64_t v23 = v27;
  if (*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = a3;
  }
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    a1[1] = v25;
    a1[2] = a5;
  }
  if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    a1[3] = v26;
    a1[4] = v23;
  }
  return result;
}

uint64_t sub_10010DB28(void *a1)
{
  return sub_10010D8C0(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperation.exitStatusFeedback(operationID:shareID:status:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v22 = a8;
  uint64_t v16 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  __int16 v27 = a5 & 0x1FF;
  sub_10010BE10(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 48))(v18, a6, a7, v22, a9);
  sub_10010E99C((uint64_t)v18, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return v19;
}

uint64_t sub_10010DCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v23 = a5;
  int v24 = a6;
  uint64_t v10 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - v18;
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
  }
  sub_10010E808(a4, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    sub_10010E8D0((uint64_t)v12, (uint64_t)v19);
    sub_10010E934((uint64_t)v19, (uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v22 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0) + 28);
    sub_10010E870(v22);
    sub_10010E8D0((uint64_t)v17, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
    uint64_t result = sub_10010E99C((uint64_t)v19, type metadata accessor for Goldilocks_ZoneID);
    char v21 = v24;
    if ((v24 & 0x100) != 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = sub_10010E870((uint64_t)v12);
  char v21 = v24;
  if ((v24 & 0x100) == 0)
  {
LABEL_7:
    *(void *)(a1 + 16) = v23;
    *(unsigned char *)(a1 + 24) = v21 & 1;
  }
  return result;
}

uint64_t sub_10010DF04(uint64_t a1)
{
  return sub_10010DCC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 49) << 8));
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.initiateExit(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFC8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFD0));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_InitiateExitRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.checkDuplicates(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFD8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFE0));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient.exitMoveBatch(_:completion:)(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CBFE8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFF0));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC25silentMoverRampingService_10completion0aB4Code06CKCodeG0CyAA0d7_SilentjK7RequestVAA0d1_pjK8ResponseVGAJ_ys6ResultOyALs5Error_pGctF_0(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD5F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CBFF8));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC21exitMoveErrorFeedback_10completion0aB4Code06CKCodeG0CyAA0d5_Exitj5BatchkL7RequestVAA0d1_pjqkL8ResponseVGAJ_ys6ResultOyALs0K0_pGctF_0(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD550);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CC000));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

uint64_t _s22CloudKitImplementation011Goldilocks_a6PhotosD23APIAsyncOperationClientC18exitStatusFeedback_10completion0aB4Code06CKCodeG0CyAA0d5_ExitjK7RequestVAA0d1_ojK8ResponseVGAJ_ys6ResultOyALs5Error_pGctF_0(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514((uint64_t *)&unk_1002CD510);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  id v7 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CC008));
  uint64_t v8 = CKCodeOperation.init(functionName:request:)();
  sub_10010E934(a1, (uint64_t)v4, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  v6(v4, 0, 1, v5);
  dispatch thunk of CKCodeOperation.request.setter();
  swift_retain();
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
  return v8;
}

ValueMetadata *type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPI()
{
  return &type metadata for Goldilocks_CloudPhotosGoldilocksAPI;
}

uint64_t type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPIAsyncClient()
{
  return self;
}

uint64_t type metadata accessor for Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClient()
{
  return self;
}

uint64_t sub_10010E808(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E870(uint64_t a1)
{
  uint64_t v2 = sub_1000D0514(&qword_1002CD540);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010E8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010E934(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10010E99C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10010E9FC(void *a1)
{
  return sub_10010D1E8(a1);
}

uint64_t Goldilocks_InitiateExitRequest.sharedZoneID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 52);
  sub_1000E27E8(v3, &qword_1002CD540);
  sub_10012BB08(a1, v3, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for Goldilocks_InitiateExitRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CC5D0);
}

uint64_t type metadata accessor for Goldilocks_ZoneID(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCA20);
}

uint64_t Goldilocks_CheckDuplicatesRequest.zoneID.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_CheckDuplicatesRequest, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_CheckDuplicatesRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CC7C0);
}

uint64_t Goldilocks_ExitMoveBatchRequest.zoneID.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_ExitMoveBatchRequest, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCAB8);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.setter(uint64_t a1)
{
  return sub_100114048(a1, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCC90);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.shareID.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CD188);
}

uint64_t Goldilocks_ExitStage.init(rawValue:)(uint64_t a1)
{
  return sub_10011587C(a1, (uint64_t (*)(void))sub_10012B9A4);
}

uint64_t Goldilocks_ExitStage.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_100251488[result];
  }
  return result;
}

uint64_t sub_10010ECCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001158D0((uint64_t (*)(void))sub_10012B9A4, a1);
}

uint64_t sub_10010ECE4()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_100251488[result];
  }
  return result;
}

uint64_t sub_10010ED04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100115940(a1, sub_10012B9A4, a2);
}

void sub_10010ED1C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_100251488[v2];
  }
  *a1 = v2;
}

uint64_t sub_10010ED40(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BDD0();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_10010ED8C(uint64_t a1, uint64_t a2)
{
  return sub_1000C88A8(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void sub_10010EDA8()
{
  static Goldilocks_ExitStage.allCases = (uint64_t)&off_10027BAE0;
}

uint64_t *Goldilocks_ExitStage.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DA0 != -1) {
    swift_once();
  }
  return &static Goldilocks_ExitStage.allCases;
}

uint64_t static Goldilocks_ExitStage.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DA0);
}

uint64_t static Goldilocks_ExitStage.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DA0, &static Goldilocks_ExitStage.allCases);
}

uint64_t (*static Goldilocks_ExitStage.allCases.modify())()
{
  if (qword_1002C9DA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10010EED8@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DA0, &static Goldilocks_ExitStage.allCases, a1);
}

uint64_t Goldilocks_ExitSource.init(rawValue:)(uint64_t a1)
{
  return sub_10011587C(a1, (uint64_t (*)(void))sub_10012BA94);
}

uint64_t sub_10010EF14@<X0>(uint64_t a1@<X8>)
{
  return sub_1001158D0((uint64_t (*)(void))sub_10012BA94, a1);
}

uint64_t sub_10010EF2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100115940(a1, (uint64_t (*)(void))sub_10012BA94, a2);
}

uint64_t sub_10010EF44(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BE24();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_10010EF90()
{
  static Goldilocks_ExitSource.allCases = (uint64_t)&off_10027BB90;
}

uint64_t *Goldilocks_ExitSource.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DA8 != -1) {
    swift_once();
  }
  return &static Goldilocks_ExitSource.allCases;
}

uint64_t static Goldilocks_ExitSource.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DA8);
}

uint64_t static Goldilocks_ExitSource.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DA8, &static Goldilocks_ExitSource.allCases);
}

uint64_t (*static Goldilocks_ExitSource.allCases.modify())()
{
  if (qword_1002C9DA8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10010F0C0@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DA8, &static Goldilocks_ExitSource.allCases, a1);
}

uint64_t sub_10010F0E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BECC();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_10010F130()
{
  static Goldilocks_ExitType.allCases = (uint64_t)&off_10027BC00;
}

uint64_t *Goldilocks_ExitType.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DB0 != -1) {
    swift_once();
  }
  return &static Goldilocks_ExitType.allCases;
}

uint64_t static Goldilocks_ExitType.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DB0);
}

uint64_t static Goldilocks_ExitType.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DB0, &static Goldilocks_ExitType.allCases);
}

uint64_t (*static Goldilocks_ExitType.allCases.modify())()
{
  if (qword_1002C9DB0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_10010F260@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DB0, &static Goldilocks_ExitType.allCases, a1);
}

uint64_t sub_10010F284(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BE78();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_10010F2D0()
{
  static Goldilocks_RecordRetentionPolicy.allCases = (uint64_t)&off_10027BC50;
}

uint64_t *Goldilocks_RecordRetentionPolicy.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DB8 != -1) {
    swift_once();
  }
  return &static Goldilocks_RecordRetentionPolicy.allCases;
}

uint64_t static Goldilocks_RecordRetentionPolicy.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DB8);
}

uint64_t static Goldilocks_RecordRetentionPolicy.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DB8, &static Goldilocks_RecordRetentionPolicy.allCases);
}

uint64_t (*static Goldilocks_RecordRetentionPolicy.allCases.modify())()
{
  if (qword_1002C9DB8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10010F400@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DB8, &static Goldilocks_RecordRetentionPolicy.allCases, a1);
}

BOOL Goldilocks_DuplicateType.rawValue.getter(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

unint64_t sub_10010F44C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_10010F464()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_10010F480@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_10010F49C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_10010F4BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BF68();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_10010F508(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void sub_10010F544()
{
  static Goldilocks_DuplicateType.allCases = (uint64_t)&off_10027BCA0;
}

uint64_t *Goldilocks_DuplicateType.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DC0 != -1) {
    swift_once();
  }
  return &static Goldilocks_DuplicateType.allCases;
}

uint64_t static Goldilocks_DuplicateType.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DC0);
}

uint64_t static Goldilocks_DuplicateType.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DC0, &static Goldilocks_DuplicateType.allCases);
}

uint64_t (*static Goldilocks_DuplicateType.allCases.modify())()
{
  if (qword_1002C9DC0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10010F674@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DC0, &static Goldilocks_DuplicateType.allCases, a1);
}

uint64_t Goldilocks_InitiateExitRequest.sharedZoneID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  sub_1000E200C(v1 + *(int *)(v6 + 52), (uint64_t)v5, &qword_1002CD540);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Goldilocks_ZoneID);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
}

uint64_t Goldilocks_ZoneID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for Goldilocks_ZoneID(0);
  return UnknownStorage.init()();
}

void (*Goldilocks_InitiateExitRequest.sharedZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 52);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

void sub_10010F99C(uint64_t a1, char a2)
{
}

BOOL Goldilocks_InitiateExitRequest.hasSharedZoneID.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  sub_1000E200C(v0 + *(int *)(v4 + 52), (uint64_t)v3, &qword_1002CD540);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CD540);
  return v6;
}

Swift::Void __swiftcall Goldilocks_InitiateExitRequest.clearSharedZoneID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 52);
  sub_1000E27E8(v1, &qword_1002CD540);
  uint64_t v2 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Goldilocks_InitiateExitRequest.stopAtStage.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t Goldilocks_InitiateExitRequest.stopAtStage.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Goldilocks_InitiateExitRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Goldilocks_InitiateExitRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_InitiateExitRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  uint64_t v2 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_InitiateExitResponse.batchError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001126DC(type metadata accessor for Goldilocks_InitiateExitResponse, a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_InitiateExitResponse.batchError.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_InitiateExitResponse, &qword_1002CC1A8, type metadata accessor for Goldilocks_ErrorInfo.ResultError, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_InitiateExitResponse.batchError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_InitiateExitResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

void sub_10011008C(uint64_t a1, char a2)
{
}

BOOL Goldilocks_InitiateExitResponse.hasBatchError.getter()
{
  return sub_1001109C4(&qword_1002CC1A8, type metadata accessor for Goldilocks_InitiateExitResponse, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_InitiateExitResponse.clearBatchError()()
{
}

uint64_t Goldilocks_InitiateExitResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_InitiateExitResponse, a1);
}

uint64_t Goldilocks_InitiateExitResponse.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t (*Goldilocks_InitiateExitResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_InitiateExitResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1001110A4(type metadata accessor for Goldilocks_InitiateExitResponse, type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t Goldilocks_ParticipantExitResult.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
  sub_1000E200C(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1002CC1A8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 48);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
}

uint64_t Goldilocks_ParticipantExitResult.resultError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0) + 24);
  sub_1000E27E8(v3, &qword_1002CC1A8);
  sub_10012BB08(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Goldilocks_ParticipantExitResult.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_ParticipantExitResult.hasResultError.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
  sub_1000E200C(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1002CC1A8);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CC1A8);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ParticipantExitResult.clearResultError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0) + 24);
  sub_1000E27E8(v1, &qword_1002CC1A8);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Goldilocks_ParticipantExitResult.exitZoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_100115388(type metadata accessor for Goldilocks_ParticipantExitResult, a1);
}

uint64_t Goldilocks_ParticipantExitResult.exitZoneID.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_ParticipantExitResult, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

void (*Goldilocks_ParticipantExitResult.exitZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ParticipantExitResult(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

BOOL Goldilocks_ParticipantExitResult.hasExitZoneID.getter()
{
  return sub_1001109C4(&qword_1002CD540, type metadata accessor for Goldilocks_ParticipantExitResult, type metadata accessor for Goldilocks_ZoneID);
}

BOOL sub_1001109C4(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000D0514(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_1000E200C(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_1000E27E8((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Goldilocks_ParticipantExitResult.clearExitZoneID()()
{
}

uint64_t sub_100110AEC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  sub_1000E27E8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t Goldilocks_ParticipantExitResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100113804(type metadata accessor for Goldilocks_ParticipantExitResult, a1);
}

uint64_t Goldilocks_ParticipantExitResult.unknownFields.setter(uint64_t a1)
{
  return sub_10011389C(a1, type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t (*Goldilocks_ParticipantExitResult.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ParticipantExitResult.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t Goldilocks_CheckDuplicatesRequest.zoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_100115388(type metadata accessor for Goldilocks_CheckDuplicatesRequest, a1);
}

void (*Goldilocks_CheckDuplicatesRequest.zoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

BOOL Goldilocks_CheckDuplicatesRequest.hasZoneID.getter()
{
  return sub_1001109C4(&qword_1002CD540, type metadata accessor for Goldilocks_CheckDuplicatesRequest, type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_CheckDuplicatesRequest.clearZoneID()()
{
}

uint64_t Goldilocks_CheckDuplicatesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_CheckDuplicatesRequest, a1);
}

uint64_t sub_100110F1C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Goldilocks_CheckDuplicatesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_100110FB4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Goldilocks_CheckDuplicatesRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_CheckDuplicatesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1001110A4(type metadata accessor for Goldilocks_CheckDuplicatesRequest, type metadata accessor for Goldilocks_ZoneID, a1);
}

uint64_t sub_1001110A4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = &_swiftEmptyArrayStorage;
  uint64_t v5 = a1(0);
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(v5 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t Goldilocks_CheckDuplicatesResponse.batchError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001126DC(type metadata accessor for Goldilocks_CheckDuplicatesResponse, a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.batchError.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_CheckDuplicatesResponse, &qword_1002CC1A8, type metadata accessor for Goldilocks_ErrorInfo.ResultError, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_CheckDuplicatesResponse.batchError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_CheckDuplicatesResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_CheckDuplicatesResponse.hasBatchError.getter()
{
  return sub_1001109C4(&qword_1002CC1A8, type metadata accessor for Goldilocks_CheckDuplicatesResponse, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_CheckDuplicatesResponse.clearBatchError()()
{
}

uint64_t Goldilocks_CheckDuplicatesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_CheckDuplicatesResponse, a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t (*Goldilocks_CheckDuplicatesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_CheckDuplicatesResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1001110A4(type metadata accessor for Goldilocks_CheckDuplicatesResponse, type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t Goldilocks_DuplicateState.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001126DC(type metadata accessor for Goldilocks_DuplicateState, a1);
}

uint64_t Goldilocks_DuplicateState.resultError.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_DuplicateState, &qword_1002CC1A8, type metadata accessor for Goldilocks_ErrorInfo.ResultError, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_DuplicateState.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_DuplicateState(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_DuplicateState.hasResultError.getter()
{
  return sub_1001109C4(&qword_1002CC1A8, type metadata accessor for Goldilocks_DuplicateState, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_DuplicateState.clearResultError()()
{
}

uint64_t Goldilocks_DuplicateState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_DuplicateState, a1);
}

uint64_t Goldilocks_DuplicateState.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t (*Goldilocks_DuplicateState.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_DuplicateState.init()@<X0>(void *a1@<X8>)
{
  return sub_1001110A4(type metadata accessor for Goldilocks_DuplicateState, type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t Goldilocks_FoundDuplicate.duplicateZoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_100115388(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_FoundDuplicate.duplicateZoneID.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_FoundDuplicate, &qword_1002CD540, type metadata accessor for Goldilocks_ZoneID, type metadata accessor for Goldilocks_ZoneID);
}

void (*Goldilocks_FoundDuplicate.duplicateZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_FoundDuplicate(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

BOOL Goldilocks_FoundDuplicate.hasDuplicateZoneID.getter()
{
  return sub_1001109C4(&qword_1002CD540, type metadata accessor for Goldilocks_FoundDuplicate, type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_FoundDuplicate.clearDuplicateZoneID()()
{
}

uint64_t Goldilocks_FoundDuplicate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_FoundDuplicate.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t (*Goldilocks_FoundDuplicate.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_FoundDuplicate.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100115A3C(type metadata accessor for Goldilocks_FoundDuplicate, a1);
}

uint64_t Goldilocks_ZoneID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_ZoneID, a1);
}

uint64_t Goldilocks_ZoneID.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_ZoneID);
}

uint64_t (*Goldilocks_ZoneID.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchRequest.zoneID.getter@<X0>(void *a1@<X8>)
{
  return sub_100115388(type metadata accessor for Goldilocks_ExitMoveBatchRequest, a1);
}

void (*Goldilocks_ExitMoveBatchRequest.zoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

BOOL Goldilocks_ExitMoveBatchRequest.hasZoneID.getter()
{
  return sub_1001109C4(&qword_1002CD540, type metadata accessor for Goldilocks_ExitMoveBatchRequest, type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchRequest.clearZoneID()()
{
}

uint64_t Goldilocks_ExitMoveBatchRequest.batchSize.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t Goldilocks_ExitMoveBatchRequest.batchSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_ExitMoveBatchRequest, a1);
}

uint64_t Goldilocks_ExitMoveBatchRequest.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t (*Goldilocks_ExitMoveBatchRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_ExitMoveBatchResponse.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  sub_1000E200C(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_1002CC1A8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 48);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
}

uint64_t Goldilocks_ExitMoveBatchResponse.resultError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0) + 40);
  sub_1000E27E8(v3, &qword_1002CC1A8);
  sub_10012BB08(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Goldilocks_ExitMoveBatchResponse.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_ExitMoveBatchResponse.hasResultError.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  sub_1000E200C(v0 + *(int *)(v4 + 40), (uint64_t)v3, &qword_1002CC1A8);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CC1A8);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchResponse.clearResultError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0) + 40);
  sub_1000E27E8(v1, &qword_1002CC1A8);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Goldilocks_ExitMoveBatchResponse.retryAfterSec.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Goldilocks_ExitMoveBatchResponse.retryAfterSec.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.recordIdsToMove.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Goldilocks_ExitMoveBatchResponse.recordIdsToMove.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Goldilocks_ExitMoveBatchResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchResponse(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.error.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001126DC(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, a1);
}

uint64_t sub_1001126DC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_1000E200C(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_1002CC1A8);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return sub_10012BB08((uint64_t)v7, a2, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0xE000000000000000;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v10 = a2 + *(int *)(v9 + 48);
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return sub_1000E27E8((uint64_t)v7, &qword_1002CC1A8);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.error.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, &qword_1002CC1A8, type metadata accessor for Goldilocks_ErrorInfo.ResultError, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

void (*Goldilocks_ExitMoveBatchFeedbackItem.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_ExitMoveBatchFeedbackItem.hasError.getter()
{
  return sub_1001109C4(&qword_1002CC1A8, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchFeedbackItem.clearError()()
{
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, a1);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t (*Goldilocks_ExitMoveBatchFeedbackItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  sub_1000E200C(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1002CD540);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, (uint64_t)a1, type metadata accessor for Goldilocks_ZoneID);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
}

void (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.exitZoneID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

BOOL Goldilocks_ExitMoveBatchErrorFeedbackRequest.hasExitZoneID.getter()
{
  return sub_100114340(&qword_1002CD540, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest, type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchErrorFeedbackRequest.clearExitZoneID()()
{
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchOperationID.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchOperationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  a1[3] = 0;
  a1[4] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
  sub_1000E200C(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1002CC1A8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 48);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0) + 20);
  sub_1000E27E8(v3, &qword_1002CC1A8);
  sub_10012BB08(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Goldilocks_ExitMoveBatchErrorFeedbackResponse.serviceError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_ExitMoveBatchErrorFeedbackResponse.hasServiceError.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
  sub_1000E200C(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_1002CC1A8);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CC1A8);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ExitMoveBatchErrorFeedbackResponse.clearServiceError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0) + 20);
  sub_1000E27E8(v1, &qword_1002CC1A8);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.init()@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0) + 20);
  uint64_t v3 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t Goldilocks_SilentMoverRampingRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100113804(type metadata accessor for Goldilocks_SilentMoverRampingRequest, a1);
}

uint64_t sub_100113804@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Goldilocks_SilentMoverRampingRequest.unknownFields.setter(uint64_t a1)
{
  return sub_10011389C(a1, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10011389C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Goldilocks_SilentMoverRampingRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_SilentMoverRampingRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  return UnknownStorage.init()();
}

uint64_t Goldilocks_SilentMoverRampingResponse.operationControl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
  sub_1000E200C(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1002CC1B0);
  uint64_t v7 = type metadata accessor for Goldilocks_OperationControl(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_OperationControl);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1B0);
}

uint64_t Goldilocks_OperationControl.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  type metadata accessor for Goldilocks_OperationControl(0);
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  return UnknownStorage.init()();
}

uint64_t Goldilocks_SilentMoverRampingResponse.operationControl.setter(uint64_t a1)
{
  return sub_100113B5C(a1, type metadata accessor for Goldilocks_SilentMoverRampingResponse, &qword_1002CC1B0, type metadata accessor for Goldilocks_OperationControl, type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_100113B5C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  sub_1000E27E8(v10, a3);
  sub_10012BB08(a1, v10, a4);
  uint64_t v11 = a5(0);
  BOOL v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*Goldilocks_SilentMoverRampingResponse.operationControl.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_OperationControl(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1B0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = 0;
    v10[8] = 1;
    *(_DWORD *)(v10 + 9) = 0;
    *(_WORD *)(v10 + 13) = 0;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1B0);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_OperationControl);
  }
  return sub_100113DBC;
}

void sub_100113DBC(uint64_t a1, char a2)
{
}

BOOL Goldilocks_SilentMoverRampingResponse.hasOperationControl.getter()
{
  return sub_1001109C4(&qword_1002CC1B0, type metadata accessor for Goldilocks_SilentMoverRampingResponse, type metadata accessor for Goldilocks_OperationControl);
}

Swift::Void __swiftcall Goldilocks_SilentMoverRampingResponse.clearOperationControl()()
{
}

uint64_t Goldilocks_SilentMoverRampingResponse.resultError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
  sub_1000E200C(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1002CC1A8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 48);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
}

uint64_t Goldilocks_SilentMoverRampingResponse.resultError.setter(uint64_t a1)
{
  return sub_100114048(a1, type metadata accessor for Goldilocks_SilentMoverRampingResponse, &qword_1002CC1A8, type metadata accessor for Goldilocks_ErrorInfo.ResultError, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100114048(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  sub_1000E27E8(v10, a3);
  sub_10012BB08(a1, v10, a4);
  uint64_t v11 = a5(0);
  BOOL v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*Goldilocks_SilentMoverRampingResponse.resultError.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_SilentMoverRampingResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    void v10[4] = 0;
    void v10[5] = 0xE000000000000000;
    *((_DWORD *)v10 + 12) = 0;
    v10[7] = &_swiftEmptyArrayStorage;
    v10[8] = 0;
    v10[9] = 0xE000000000000000;
    v10[10] = 0;
    v10[11] = 0xE000000000000000;
    UnknownStorage.init()();
    BOOL v12 = (char *)v10 + *(int *)(v6 + 48);
    uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  }
  return sub_10011008C;
}

BOOL Goldilocks_SilentMoverRampingResponse.hasResultError.getter()
{
  return sub_100114340(&qword_1002CC1A8, type metadata accessor for Goldilocks_SilentMoverRampingResponse, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

BOOL sub_100114340(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000D0514(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_1000E200C(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_1000E27E8((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Goldilocks_SilentMoverRampingResponse.clearResultError()()
{
}

uint64_t sub_100114468(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  sub_1000E27E8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t Goldilocks_SilentMoverRampingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_SilentMoverRampingResponse, a1);
}

uint64_t Goldilocks_SilentMoverRampingResponse.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t (*Goldilocks_SilentMoverRampingResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_SilentMoverRampingResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  uint64_t v2 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Goldilocks_OperationControl(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

double Goldilocks_OperationControl.unshareOperationPercentage.getter()
{
  double result = *(double *)v0;
  if (*(unsigned char *)(v0 + 8)) {
    return 0.0;
  }
  return result;
}

void Goldilocks_OperationControl.unshareOperationPercentage.setter(double a1)
{
  *(double *)uint64_t v1 = a1;
  *(unsigned char *)(v1 + 8) = 0;
}

void *(*Goldilocks_OperationControl.unshareOperationPercentage.modify(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  double v2 = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    double v2 = 0.0;
  }
  *(double *)a1 = v2;
  return sub_1001146C8;
}

void *sub_1001146C8(void *result)
{
  uint64_t v1 = result[1];
  *(void *)uint64_t v1 = *result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

uint64_t Goldilocks_OperationControl.allowClone.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t Goldilocks_OperationControl.allowClone.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowClone.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowShare.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t Goldilocks_OperationControl.allowShare.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowShare.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowUnshare.getter()
{
  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t Goldilocks_OperationControl.allowUnshare.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 11) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowUnshare.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowExit.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t Goldilocks_OperationControl.allowExit.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowExit.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowCleanup.getter()
{
  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t Goldilocks_OperationControl.allowCleanup.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 13) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowCleanup.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.allowSharedLibrary.getter()
{
  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t Goldilocks_OperationControl.allowSharedLibrary.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 14) = result;
  return result;
}

uint64_t (*Goldilocks_OperationControl.allowSharedLibrary.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001150C0(type metadata accessor for Goldilocks_OperationControl, a1);
}

uint64_t Goldilocks_OperationControl.unknownFields.setter(uint64_t a1)
{
  return sub_100115158(a1, type metadata accessor for Goldilocks_OperationControl);
}

uint64_t (*Goldilocks_OperationControl.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

BOOL static Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

BOOL sub_10011487C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t Goldilocks_ErrorInfo.ResultErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_10011587C(a1, (uint64_t (*)(void))sub_10012BD78);
}

uint64_t sub_1001148A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001158D0((uint64_t (*)(void))sub_10012BD78, a1);
}

uint64_t sub_1001148C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100115940(a1, (uint64_t (*)(void))sub_10012BD78, a2);
}

uint64_t sub_1001148D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012BFDC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Goldilocks_ErrorInfo.DatabaseFailure.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  return UnknownStorage.init()();
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000D0514(&qword_1002CC1B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  sub_1000E200C(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_1002CC1B8);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10012BB08((uint64_t)v5, a1, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v5, &qword_1002CC1B8);
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailure.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0) + 48);
  sub_1000E27E8(v3, &qword_1002CC1B8);
  sub_10012BB08(a1, v3, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Goldilocks_ErrorInfo.ResultError.databaseFailure.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CC1B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0) + 48);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CC1B8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    void v10[4] = 0;
    *((unsigned char *)v10 + 40) = 1;
    v10[6] = 0;
    *((unsigned char *)v10 + 56) = 1;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CC1B8);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  }
  return sub_100114E48;
}

void sub_100114E48(uint64_t a1, char a2)
{
}

BOOL Goldilocks_ErrorInfo.ResultError.hasDatabaseFailure.getter()
{
  uint64_t v1 = sub_1000D0514(&qword_1002CC1B8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  sub_1000E200C(v0 + *(int *)(v4 + 48), (uint64_t)v3, &qword_1002CC1B8);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000E27E8((uint64_t)v3, &qword_1002CC1B8);
  return v6;
}

Swift::Void __swiftcall Goldilocks_ErrorInfo.ResultError.clearDatabaseFailure()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Goldilocks_ErrorInfo.ResultError(0) + 48);
  sub_1000E27E8(v1, &qword_1002CC1B8);
  uint64_t v2 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorCode.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorCode.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48) = result;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Goldilocks_ErrorInfo.ResultError.databaseFailures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.learnMoreLink.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.learnMoreLink.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001150C0(type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t sub_1001150C0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Goldilocks_ErrorInfo.ResultError.unknownFields.setter(uint64_t a1)
{
  return sub_100115158(a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100115158(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Goldilocks_ErrorInfo.ResultError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

void sub_10011521C()
{
  static Goldilocks_ErrorInfo.ResultErrorCode.allCases = (uint64_t)&off_10027BCE0;
}

uint64_t *Goldilocks_ErrorInfo.ResultErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DC8 != -1) {
    swift_once();
  }
  return &static Goldilocks_ErrorInfo.ResultErrorCode.allCases;
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DC8);
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DC8, &static Goldilocks_ErrorInfo.ResultErrorCode.allCases);
}

uint64_t (*static Goldilocks_ErrorInfo.ResultErrorCode.allCases.modify())()
{
  if (qword_1002C9DC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10011534C@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DC8, &static Goldilocks_ErrorInfo.ResultErrorCode.allCases, a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.shareID.getter@<X0>(void *a1@<X8>)
{
  return sub_100115388(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t sub_100115388@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_1000E200C(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_1002CD540);
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return sub_10012BB08((uint64_t)v7, (uint64_t)a2, type metadata accessor for Goldilocks_ZoneID);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  return sub_1000E27E8((uint64_t)v7, &qword_1002CD540);
}

void (*Goldilocks_ExitStatusFeedbackRequest.shareID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000D0514(&qword_1002CD540);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Goldilocks_ZoneID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  void v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1000E200C(v1 + v11, (uint64_t)v5, &qword_1002CD540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_1000E27E8((uint64_t)v5, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v5, (uint64_t)v10, type metadata accessor for Goldilocks_ZoneID);
  }
  return sub_10010F99C;
}

void sub_10011565C(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    sub_10012BB70(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    sub_1000E27E8(v15, a3);
    sub_10012BB08((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    sub_10012BBD8((uint64_t)v11, a6);
  }
  else
  {
    sub_1000E27E8(**(void **)a1 + v9, a3);
    sub_10012BB08((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

BOOL Goldilocks_ExitStatusFeedbackRequest.hasShareID.getter()
{
  return sub_1001109C4(&qword_1002CD540, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, type metadata accessor for Goldilocks_ZoneID);
}

Swift::Void __swiftcall Goldilocks_ExitStatusFeedbackRequest.clearShareID()()
{
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100110F1C(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.unknownFields.setter(uint64_t a1)
{
  return sub_100110FB4(a1, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t (*Goldilocks_ExitStatusFeedbackRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus.init(rawValue:)(uint64_t a1)
{
  return sub_10011587C(a1, (uint64_t (*)(void))sub_10012BD8C);
}

uint64_t sub_10011587C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_100251458[result];
  }
  return result;
}

uint64_t sub_1001158B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001158D0((uint64_t (*)(void))sub_10012BD8C, a1);
}

uint64_t sub_1001158D0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_100115908()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_100251458[result];
  }
  return result;
}

uint64_t sub_100115928@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100115940(a1, (uint64_t (*)(void))sub_10012BD8C, a2);
}

uint64_t sub_100115940@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

void sub_10011597C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_100251458[v2];
  }
  *a1 = v2;
}

uint64_t sub_1001159A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012C030();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1001159EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v2 = qword_100251458[v2];
  }
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v3 = qword_100251458[v3];
  }
  return v2 == v3;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_100115A3C(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, a1);
}

uint64_t sub_100115A3C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  uint64_t v3 = a1(0);
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

void sub_100115AE4()
{
  static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases = (uint64_t)&off_10027BDC0;
}

uint64_t *Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.unsafeMutableAddressor()
{
  if (qword_1002C9DD0 != -1) {
    swift_once();
  }
  return &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases;
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.getter()
{
  return sub_1000C91A8(&qword_1002C9DD0);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.setter(uint64_t a1)
{
  return sub_1000C9228(a1, &qword_1002C9DD0, &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases);
}

uint64_t (*static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases.modify())()
{
  if (qword_1002C9DD0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100115C14@<X0>(void *a1@<X8>)
{
  return sub_1000C933C(&qword_1002C9DD0, &static Goldilocks_ExitStatusFeedbackRequest.ClientStatus.allCases, a1);
}

uint64_t sub_100115C38()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitStage._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10024B240;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = -1;
  *(void *)unint64_t v5 = "UNKNOWN";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 0;
  *(void *)unint64_t v9 = "NOT_IN_EXIT";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 1000;
  *(void *)uint64_t v11 = "EXIT_INITIATED_COPY_IN_PROGRESS";
  *((void *)v11 + 1) = 31;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 1100;
  *(void *)uint64_t v13 = "EXIT_RECORD_COPY_COMPLETE";
  *((void *)v13 + 1) = 25;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 1200;
  *(void *)uint64_t v15 = "EXIT_ADDED_PARTICIPANT_TO_EXIT_SHARE";
  *((void *)v15 + 1) = 36;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 1300;
  *(void *)uint64_t v17 = "EXIT_REMOVE_PARTICIPANT_FROM_SHARED_ALBUM";
  *((void *)v17 + 1) = 41;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 1400;
  *(void *)uint64_t v19 = "EXIT_REMOVE_PARTICIPANT_FROM_EXIT_STATE";
  *((void *)v19 + 1) = 39;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  char v21 = (char *)v20 + v1[14];
  *int v20 = 2000;
  *(void *)char v21 = "MOVE_RECORDS_OUT";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 3000;
  *(void *)uint64_t v22 = "EXIT_COMPLETE_ZONE_NOT_IN_USE";
  *(void *)(v22 + 8) = 29;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitStage._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9DD8, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitStage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9DD8, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap, a1);
}

uint64_t sub_100115FF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9DD8, (uint64_t)static Goldilocks_ExitStage._protobuf_nameMap, a1);
}

uint64_t sub_10011601C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitSource._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024E920;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "USER_DRIVEN";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MANZANITA";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "ICPL_DISABLE_AND_DELETE";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "TRIGGER_EXIT_ENDPOINT";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "GROOMER_REENQUEUE";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9DE0, (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9DE0, (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap, a1);
}

uint64_t sub_1001162E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9DE0, (uint64_t)static Goldilocks_ExitSource._protobuf_nameMap, a1);
}

uint64_t sub_100116308()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitType._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PARTICIPANT_SELF_EXIT";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PARTICIPANT_REMOVAL";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "OWNER_DISMANTLE";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9DE8, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9DE8, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap, a1);
}

uint64_t sub_100116550@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9DE8, (uint64_t)static Goldilocks_ExitType._protobuf_nameMap, a1);
}

uint64_t sub_100116574()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_RecordRetentionPolicy._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "SERVER_CHOICE";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "CONTRIBUTED_ONLY";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "ALL";
  *(void *)(v11 + 8) = 3;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_RecordRetentionPolicy._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9DF0, (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap);
}

uint64_t static Goldilocks_RecordRetentionPolicy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9DF0, (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap, a1);
}

uint64_t sub_1001167BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9DF0, (uint64_t)static Goldilocks_RecordRetentionPolicy._protobuf_nameMap, a1);
}

uint64_t sub_1001167E0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_DuplicateType._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024A2C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "NOT_A_DUPLICATE";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "EXACT_DUPLICATE";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_DuplicateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9DF8, (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap);
}

uint64_t static Goldilocks_DuplicateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9DF8, (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap, a1);
}

uint64_t sub_1001169E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9DF8, (uint64_t)static Goldilocks_DuplicateType._protobuf_nameMap, a1);
}

void *Goldilocks_InitiateExitRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_InitiateExitRequest.protoMessageName;
}

unint64_t static Goldilocks_InitiateExitRequest.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100116A2C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_InitiateExitRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10024B240;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "operationID";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "sharedZoneID";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "exitType";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "retentionPolicy";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "participantUserIDsToRemove";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "participantIDsToRemove";
  *((void *)v17 + 1) = 22;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 8;
  *(void *)uint64_t v19 = "zoneTtlForICPLExit";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  char v21 = (char *)v20 + v1[14];
  *int v20 = 9;
  *(void *)char v21 = "exitSource";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 101;
  *(void *)uint64_t v22 = "stopAtStage";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_InitiateExitRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E00, (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_InitiateExitRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E00, (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_InitiateExitRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_15;
        case 2:
          type metadata accessor for Goldilocks_InitiateExitRequest(0);
          type metadata accessor for Goldilocks_ZoneID(0);
          sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_15;
        case 3:
          sub_10012BECC();
          goto LABEL_14;
        case 4:
          sub_10012BE78();
          goto LABEL_14;
        case 5:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          goto LABEL_15;
        case 7:
          goto LABEL_16;
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_15;
        case 9:
          sub_10012BE24();
          goto LABEL_14;
        default:
          if (result != 101) {
            goto LABEL_16;
          }
          sub_10012BDD0();
LABEL_14:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_15:
          uint64_t v3 = v4;
LABEL_16:
          uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
          break;
      }
    }
  }
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v18 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
    sub_1000E200C(v0 + *(int *)(v18 + 52), (uint64_t)v4, &qword_1002CD540);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1000E27E8((uint64_t)v4, &qword_1002CD540);
    }
    else
    {
      sub_10012BB08((uint64_t)v4, (uint64_t)v8, type metadata accessor for Goldilocks_ZoneID);
      sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v8, type metadata accessor for Goldilocks_ZoneID);
      if (v1) {
        return result;
      }
    }
    if (!*(void *)(v0 + 16)
      || (char v12 = *(unsigned char *)(v0 + 24),
          uint64_t v16 = *(void *)(v0 + 16),
          char v17 = v12,
          sub_10012BECC(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(void *)(v0 + 32)
        || (char v13 = *(unsigned char *)(v0 + 40),
            uint64_t v16 = *(void *)(v0 + 32),
            char v17 = v13,
            sub_10012BE78(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (!*(void *)(*(void *)(v0 + 48) + 16)
          || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 56) + 16)
            || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0 + 64)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
            {
              if (!*(void *)(v0 + 72)
                || (char v14 = *(unsigned char *)(v0 + 80),
                    uint64_t v16 = *(void *)(v0 + 72),
                    char v17 = v14,
                    sub_10012BE24(),
                    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                    !v1))
              {
                if (!*(void *)(v0 + 88)) {
                  return UnknownStorage.traverse<A>(visitor:)();
                }
                char v15 = *(unsigned char *)(v0 + 96);
                uint64_t v16 = *(void *)(v0 + 88);
                char v17 = v15;
                sub_10012BDD0();
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
                if (!v1) {
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int Goldilocks_InitiateExitRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_InitiateExitRequest, &qword_1002CC1E8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100117464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 1;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_100117520()
{
  return Goldilocks_InitiateExitRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_100117538()
{
  return Goldilocks_InitiateExitRequest.traverse<A>(visitor:)();
}

uint64_t sub_100117550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001175CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E00, (uint64_t)static Goldilocks_InitiateExitRequest._protobuf_nameMap, a1);
}

uint64_t sub_1001175F0()
{
  sub_10012BF20(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_10011765C()
{
  sub_10012BF20(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  return Message.hash(into:)();
}

void *Goldilocks_InitiateExitResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_InitiateExitResponse.protoMessageName;
}

unint64_t static Goldilocks_InitiateExitResponse.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100117700()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_InitiateExitResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "batchError";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "participantExitResult";
  *(void *)(v11 + 8) = 21;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_InitiateExitResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E08, (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_InitiateExitResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E08, (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap, a1);
}

uint64_t Goldilocks_InitiateExitResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_InitiateExitResponse(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Goldilocks_ParticipantExitResult(0);
    sub_10012BF20(&qword_1002CC1F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Goldilocks_InitiateExitResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = v5[1];
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  v19[3] = a3;
  v19[1] = a1;
  if (!v16 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v18 = type metadata accessor for Goldilocks_InitiateExitResponse(0);
    sub_1000E200C((uint64_t)v5 + *(int *)(v18 + 28), (uint64_t)v10, &qword_1002CC1A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      sub_1000E27E8((uint64_t)v10, &qword_1002CC1A8);
    }
    else
    {
      sub_10012BB08((uint64_t)v10, (uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v4) {
        return result;
      }
    }
    if (!*(void *)(v5[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for Goldilocks_ParticipantExitResult(0);
    sub_10012BF20(&qword_1002CC1F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_InitiateExitResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_InitiateExitResponse, &qword_1002CC1F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_100117E1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1001191D8(a1, type metadata accessor for Goldilocks_ErrorInfo.ResultError, a2);
}

uint64_t sub_100117E34()
{
  return Goldilocks_InitiateExitResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_100117E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_InitiateExitResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100117E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100117EE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E08, (uint64_t)static Goldilocks_InitiateExitResponse._protobuf_nameMap, a1);
}

uint64_t sub_100117F04()
{
  sub_10012BF20(&qword_1002CC408, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_100117F70()
{
  sub_10012BF20(&qword_1002CC408, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
  return Message.hash(into:)();
}

void *Goldilocks_ParticipantExitResult.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ParticipantExitResult.protoMessageName;
}

unint64_t static Goldilocks_ParticipantExitResult.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_100118014()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ParticipantExitResult._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "participantUserID";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "resultError";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "exitZoneID";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ParticipantExitResult._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E10, (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap);
}

uint64_t static Goldilocks_ParticipantExitResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E10, (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ParticipantExitResult.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_ParticipantExitResult(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        unint64_t v3 = (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError;
        uint64_t v4 = &qword_1002CD580;
        goto LABEL_5;
      }
      if (result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Goldilocks_ParticipantExitResult(0);
    type metadata accessor for Goldilocks_ZoneID(0);
    unint64_t v3 = (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID;
    uint64_t v4 = &qword_1002CC1E0;
LABEL_5:
    sub_10012BF20(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t Goldilocks_ParticipantExitResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v7 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v25 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = v3[1];
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v30 = a3;
  uint64_t v29 = a2;
  if (!v18 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v20 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
    sub_1000E200C((uint64_t)v3 + *(int *)(v20 + 24), (uint64_t)v12, &qword_1002CC1A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_1000E27E8((uint64_t)v12, &qword_1002CC1A8);
    }
    else
    {
      sub_10012BB08((uint64_t)v12, (uint64_t)v16, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v16, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v4) {
        return result;
      }
    }
    uint64_t v21 = v27;
    sub_1000E200C((uint64_t)v3 + *(int *)(v20 + 28), v27, &qword_1002CD540);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v21, 1, v28) == 1)
    {
      sub_1000E27E8(v21, &qword_1002CD540);
    }
    else
    {
      uint64_t v22 = v21;
      uint64_t v23 = v25;
      sub_10012BB08(v22, v25, type metadata accessor for Goldilocks_ZoneID);
      sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8(v23, type metadata accessor for Goldilocks_ZoneID);
      if (v4) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Goldilocks_ParticipantExitResult.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ParticipantExitResult, &qword_1002CC200, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_100118878@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  unint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t sub_100118954()
{
  return Goldilocks_ParticipantExitResult.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ParticipantExitResult.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100118984(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2E8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100118A00@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E10, (uint64_t)static Goldilocks_ParticipantExitResult._protobuf_nameMap, a1);
}

uint64_t sub_100118A24()
{
  sub_10012BF20(&qword_1002CC1F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
  return Message.debugDescription.getter();
}

uint64_t sub_100118A90()
{
  sub_10012BF20(&qword_1002CC1F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
  return Message.hash(into:)();
}

void *Goldilocks_CheckDuplicatesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_CheckDuplicatesRequest.protoMessageName;
}

unint64_t static Goldilocks_CheckDuplicatesRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t sub_100118B38()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "zoneID";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "recordIDs";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_CheckDuplicatesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E18, (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E18, (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_CheckDuplicatesRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
        type metadata accessor for Goldilocks_ZoneID(0);
        sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Goldilocks_CheckDuplicatesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = v4[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  v18[3] = a2;
  v18[1] = a1;
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    uint64_t v17 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
    sub_1000E200C((uint64_t)v4 + *(int *)(v17 + 28), (uint64_t)v9, &qword_1002CD540);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1000E27E8((uint64_t)v9, &qword_1002CD540);
    }
    else
    {
      sub_10012BB08((uint64_t)v9, (uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
      sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
      if (v3) {
        return result;
      }
    }
    if (!*(void *)(v4[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    if (!v3) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_CheckDuplicatesRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_CheckDuplicatesRequest, &qword_1002CC208, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_1001191C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1001191D8(a1, type metadata accessor for Goldilocks_ZoneID, a2);
}

uint64_t sub_1001191D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  unint64_t v6 = (char *)a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t sub_100119280()
{
  return Goldilocks_CheckDuplicatesRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_100119298(uint64_t a1, uint64_t a2)
{
  return Goldilocks_CheckDuplicatesRequest.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_1001192B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011932C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E18, (uint64_t)static Goldilocks_CheckDuplicatesRequest._protobuf_nameMap, a1);
}

uint64_t sub_100119350()
{
  sub_10012BF20(&qword_1002CBFA8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_1001193BC()
{
  sub_10012BF20(&qword_1002CBFA8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
  return Message.hash(into:)();
}

void *Goldilocks_CheckDuplicatesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_CheckDuplicatesResponse.protoMessageName;
}

unint64_t static Goldilocks_CheckDuplicatesResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_100119460()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "batchError";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "duplicateStates";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_CheckDuplicatesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E20, (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E20, (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap, a1);
}

uint64_t Goldilocks_CheckDuplicatesResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_CheckDuplicatesResponse(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Goldilocks_DuplicateState(0);
    sub_10012BF20(&qword_1002CC210, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Goldilocks_CheckDuplicatesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = v5[1];
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  v19[3] = a3;
  v19[1] = a1;
  if (!v16 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v18 = type metadata accessor for Goldilocks_CheckDuplicatesResponse(0);
    sub_1000E200C((uint64_t)v5 + *(int *)(v18 + 28), (uint64_t)v10, &qword_1002CC1A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      sub_1000E27E8((uint64_t)v10, &qword_1002CC1A8);
    }
    else
    {
      sub_10012BB08((uint64_t)v10, (uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v4) {
        return result;
      }
    }
    if (!*(void *)(v5[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for Goldilocks_DuplicateState(0);
    sub_10012BF20(&qword_1002CC210, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_CheckDuplicatesResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_CheckDuplicatesResponse, &qword_1002CC218, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_100119B7C()
{
  return Goldilocks_CheckDuplicatesResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_100119B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_CheckDuplicatesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100119BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2D8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100119C28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E20, (uint64_t)static Goldilocks_CheckDuplicatesResponse._protobuf_nameMap, a1);
}

uint64_t sub_100119C4C()
{
  sub_10012BF20(&qword_1002CC440, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_100119CB8()
{
  sub_10012BF20(&qword_1002CC440, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
  return Message.hash(into:)();
}

void *Goldilocks_DuplicateState.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_DuplicateState.protoMessageName;
}

unint64_t static Goldilocks_DuplicateState.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_100119D5C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_DuplicateState._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "recordID";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "resultError";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "foundDuplicates";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_DuplicateState._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E28, (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap);
}

uint64_t static Goldilocks_DuplicateState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E28, (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap, a1);
}

uint64_t Goldilocks_DuplicateState.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_DuplicateState(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Goldilocks_FoundDuplicate(0);
    sub_10012BF20(&qword_1002CC220, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Goldilocks_DuplicateState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = v5[1];
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  v19[3] = a3;
  v19[1] = a1;
  if (!v16 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v18 = type metadata accessor for Goldilocks_DuplicateState(0);
    sub_1000E200C((uint64_t)v5 + *(int *)(v18 + 28), (uint64_t)v10, &qword_1002CC1A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      sub_1000E27E8((uint64_t)v10, &qword_1002CC1A8);
    }
    else
    {
      sub_10012BB08((uint64_t)v10, (uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v4) {
        return result;
      }
    }
    if (!*(void *)(v5[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for Goldilocks_FoundDuplicate(0);
    sub_10012BF20(&qword_1002CC220, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_DuplicateState.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_DuplicateState, &qword_1002CC228, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t sub_10011A478()
{
  return Goldilocks_DuplicateState.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011A490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_DuplicateState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10011A4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011A524@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E28, (uint64_t)static Goldilocks_DuplicateState._protobuf_nameMap, a1);
}

uint64_t sub_10011A548()
{
  sub_10012BF20(&qword_1002CC210, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
  return Message.debugDescription.getter();
}

uint64_t sub_10011A5B4()
{
  sub_10012BF20(&qword_1002CC210, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
  return Message.hash(into:)();
}

void *Goldilocks_FoundDuplicate.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_FoundDuplicate.protoMessageName;
}

unint64_t static Goldilocks_FoundDuplicate.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_10011A658()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_FoundDuplicate._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "duplicateRecordID";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "duplicateZoneID";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "duplicateType";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_FoundDuplicate._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E30, (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap);
}

uint64_t static Goldilocks_FoundDuplicate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E30, (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap, a1);
}

uint64_t Goldilocks_FoundDuplicate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001214A4(a1, a2, a3, type metadata accessor for Goldilocks_FoundDuplicate, (void (*)(void))sub_10012BF68);
}

uint64_t Goldilocks_FoundDuplicate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012167C(a1, a2, a3, type metadata accessor for Goldilocks_FoundDuplicate, (uint64_t)sub_10012BF68, (uint64_t)&type metadata for Goldilocks_DuplicateType);
}

Swift::Int Goldilocks_FoundDuplicate.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_FoundDuplicate, &qword_1002CC238, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10011A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_FoundDuplicate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_10011A99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_FoundDuplicate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10011A9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2C8, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011AA30@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E30, (uint64_t)static Goldilocks_FoundDuplicate._protobuf_nameMap, a1);
}

uint64_t sub_10011AA54()
{
  sub_10012BF20(&qword_1002CC220, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
  return Message.debugDescription.getter();
}

uint64_t sub_10011AAC0()
{
  sub_10012BF20(&qword_1002CC220, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
  return Message.hash(into:)();
}

void *Goldilocks_ZoneID.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ZoneID.protoMessageName;
}

unint64_t static Goldilocks_ZoneID.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_10011AB68()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ZoneID._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024A2C0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ownerUserID";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ZoneID._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E38, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap);
}

uint64_t static Goldilocks_ZoneID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E38, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ZoneID.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Goldilocks_ZoneID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_ZoneID.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ZoneID, &qword_1002CC240, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
}

uint64_t sub_10011AE90()
{
  return Goldilocks_ZoneID.traverse<A>(visitor:)();
}

uint64_t sub_10011AEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2C0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011AF24@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E38, (uint64_t)static Goldilocks_ZoneID._protobuf_nameMap, a1);
}

uint64_t sub_10011AF48()
{
  sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  return Message.debugDescription.getter();
}

uint64_t sub_10011AFB4()
{
  sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  return Message.hash(into:)();
}

void *Goldilocks_ExitMoveBatchRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchRequest.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10011B058()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "zoneID";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "batchSize";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitMoveBatchRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E40, (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E40, (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitMoveBatchRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
        type metadata accessor for Goldilocks_ZoneID(0);
        sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t Goldilocks_ExitMoveBatchRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(void *)(v4 + 8);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *(void *)v4 & 0xFFFFFFFFFFFFLL;
  }
  v18[3] = a2;
  v18[1] = a1;
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
    sub_1000E200C(v4 + *(int *)(v17 + 28), (uint64_t)v9, &qword_1002CD540);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1000E27E8((uint64_t)v9, &qword_1002CD540);
    }
    else
    {
      sub_10012BB08((uint64_t)v9, (uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
      sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
      if (v3) {
        return result;
      }
    }
    if (!*(_DWORD *)(v4 + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v3) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_ExitMoveBatchRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitMoveBatchRequest, &qword_1002CC248, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10011B6DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10011B76C()
{
  return Goldilocks_ExitMoveBatchRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011B784(uint64_t a1, uint64_t a2)
{
  return Goldilocks_ExitMoveBatchRequest.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_10011B79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2B8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011B818@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E40, (uint64_t)static Goldilocks_ExitMoveBatchRequest._protobuf_nameMap, a1);
}

uint64_t sub_10011B83C()
{
  sub_10012BF20(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_10011B8A8()
{
  sub_10012BF20(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return Message.hash(into:)();
}

void *Goldilocks_ExitMoveBatchResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchResponse.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_10011B94C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10024B250;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "operationID";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "resultError";
  *(void *)(v8 + 8) = 11;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "retryAfterSec";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "batchID";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)unint64_t v14 = "recordIDsToMove";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)uint64_t v16 = "movesComplete";
  *((void *)v16 + 1) = 13;
  unsigned char v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitMoveBatchResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E48, (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E48, (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitMoveBatchResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
          type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
          sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ExitMoveBatchResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v15 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
    sub_1000E200C(v0 + *(int *)(v15 + 40), (uint64_t)v4, &qword_1002CC1A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1000E27E8((uint64_t)v4, &qword_1002CC1A8);
    }
    else
    {
      sub_10012BB08((uint64_t)v4, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v1) {
        return result;
      }
    }
    if (!*(void *)(v0 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      unint64_t v12 = *(void *)(v0 + 32);
      uint64_t v13 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000) == 0) {
        uint64_t v13 = *(void *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      }
      if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 40) + 16)
          || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 48) != 1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
          uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
          if (!v1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int Goldilocks_ExitMoveBatchResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitMoveBatchResponse, &qword_1002CC250, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10011C168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0xE000000000000000;
  *(void *)(a2 + 40) = &_swiftEmptyArrayStorage;
  *(unsigned char *)(a2 + 48) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10011C208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_10011C278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_10011C2E8())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_10011C30C()
{
  return Goldilocks_ExitMoveBatchResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011C324()
{
  return Goldilocks_ExitMoveBatchResponse.traverse<A>(visitor:)();
}

uint64_t sub_10011C33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2B0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011C3B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E48, (uint64_t)static Goldilocks_ExitMoveBatchResponse._protobuf_nameMap, a1);
}

uint64_t sub_10011C3DC()
{
  sub_10012BF20(&qword_1002CC498, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_10011C448()
{
  sub_10012BF20(&qword_1002CC498, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
  return Message.hash(into:)();
}

void *Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchFeedbackItem.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_10011C4EC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "originRecordID";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "destinationRecordID";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "error";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E50, (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E50, (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ExitMoveBatchFeedbackItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = v4[1];
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  v19[1] = a2;
  if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    unint64_t v16 = v4[3];
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v17 = v4[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
    {
      uint64_t v18 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
      sub_1000E200C((uint64_t)v4 + *(int *)(v18 + 28), (uint64_t)v8, &qword_1002CC1A8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_1000E27E8((uint64_t)v8, &qword_1002CC1A8);
      }
      else
      {
        sub_10012BB08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = sub_10012BBD8((uint64_t)v12, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        if (v3) {
          return result;
        }
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_ExitMoveBatchFeedbackItem.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem, &qword_1002CC258, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10011CB74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10011CC04()
{
  return Goldilocks_ExitMoveBatchFeedbackItem.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011CC1C(uint64_t a1, uint64_t a2)
{
  return Goldilocks_ExitMoveBatchFeedbackItem.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_10011CC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011CCB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E50, (uint64_t)static Goldilocks_ExitMoveBatchFeedbackItem._protobuf_nameMap, a1);
}

uint64_t sub_10011CCD4()
{
  sub_10012BF20(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
  return Message.debugDescription.getter();
}

uint64_t sub_10011CD40()
{
  sub_10012BF20(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
  return Message.hash(into:)();
}

void *Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchErrorFeedbackRequest.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10011CDE4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "exitZoneID";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "items";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  unint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 101;
  *(void *)unint64_t v12 = "moveBatchOperationID";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 102;
  *(void *)uint64_t v14 = "moveBatchID";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E58, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E58, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result > 100)
      {
        if (result == 101 || result == 102)
        {
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        }
      }
      else
      {
        if (result == 1)
        {
          type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
          type metadata accessor for Goldilocks_ZoneID(0);
          sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          goto LABEL_6;
        }
        if (result == 2)
        {
          type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
          sub_10012BF20(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        }
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[3] = a3;
  v17[1] = a1;
  uint64_t v5 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  sub_1000E200C((uint64_t)v3 + *(int *)(v17[0] + 32), (uint64_t)v7, &qword_1002CD540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v7, &qword_1002CD540);
  }
  else
  {
    sub_10012BB08((uint64_t)v7, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
    sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_10012BBD8((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*v3 + 16)
    || (type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0),
        sub_10012BF20(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    unint64_t v13 = v3[2];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = v3[1] & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      unint64_t v15 = v3[4];
      uint64_t v16 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        uint64_t v16 = v3[3] & 0xFFFFFFFFFFFFLL;
      }
      if (!v16) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int Goldilocks_ExitMoveBatchErrorFeedbackRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest, &qword_1002CC268, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10011D57C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = 0;
  a2[2] = 0xE000000000000000;
  a2[3] = 0;
  a2[4] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10011D618()
{
  return Goldilocks_ExitMoveBatchErrorFeedbackRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011D630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10011D648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD2A0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011D6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E58, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackRequest._protobuf_nameMap, a1);
}

uint64_t sub_10011D6E8()
{
  sub_10012BF20(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_10011D754()
{
  sub_10012BF20(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return Message.hash(into:)();
}

void *Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitMoveBatchErrorFeedbackResponse.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10011D7F8(uint64_t a1)
{
  return sub_1000FE748(a1, static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap, (uint64_t)"serviceError", 12);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E60, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E60, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
        type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[1] = a3;
  uint64_t v5 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
  sub_1000E200C(v3 + *(int *)(v12 + 20), (uint64_t)v7, &qword_1002CC1A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v7, &qword_1002CC1A8);
  }
  else
  {
    sub_10012BB08((uint64_t)v7, (uint64_t)v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_10012BBD8((uint64_t)v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v4) {
      return result;
    }
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int Goldilocks_ExitMoveBatchErrorFeedbackResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse, &qword_1002CC270, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10011DBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10011DC4C()
{
  return Goldilocks_ExitMoveBatchErrorFeedbackResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011DC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitMoveBatchErrorFeedbackResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10011DC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD298, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011DCF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E60, (uint64_t)static Goldilocks_ExitMoveBatchErrorFeedbackResponse._protobuf_nameMap, a1);
}

uint64_t sub_10011DD1C()
{
  sub_10012BF20(&qword_1002CC4D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_10011DD88()
{
  sub_10012BF20(&qword_1002CC4D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
  return Message.hash(into:)();
}

void *Goldilocks_SilentMoverRampingRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_SilentMoverRampingRequest.protoMessageName;
}

unint64_t static Goldilocks_SilentMoverRampingRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_10011DE2C(uint64_t a1)
{
  return sub_1000FE748(a1, static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap, (uint64_t)"operationID", 11);
}

uint64_t Goldilocks_SilentMoverRampingRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E68, (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E68, (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_SilentMoverRampingRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int Goldilocks_SilentMoverRampingRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_SilentMoverRampingRequest, &qword_1002CC278, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10011DF7C()
{
  return Goldilocks_SilentMoverRampingRequest.traverse<A>(visitor:)();
}

uint64_t sub_10011DF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD290, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011E010@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E68, (uint64_t)static Goldilocks_SilentMoverRampingRequest._protobuf_nameMap, a1);
}

uint64_t sub_10011E034()
{
  sub_10012BF20(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_10011E0A0()
{
  sub_10012BF20(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return Message.hash(into:)();
}

void *Goldilocks_SilentMoverRampingResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_SilentMoverRampingResponse.protoMessageName;
}

unint64_t static Goldilocks_SilentMoverRampingResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_10011E144()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "retryAfterSec";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "operationControl";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "resultError";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_SilentMoverRampingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E70, (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E70, (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap, a1);
}

uint64_t Goldilocks_SilentMoverRampingResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
          type metadata accessor for Goldilocks_OperationControl(0);
          sub_10012BF20(&qword_1002CC280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
          goto LABEL_12;
        case 4:
          type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
          type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
          sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_SilentMoverRampingResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v25 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v23 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000D0514(&qword_1002CC1B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = v3[1];
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v27 = a3;
  if (v17)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4) {
      return result;
    }
    if (!v3[2]) {
      goto LABEL_9;
    }
  }
  else if (!v3[2])
  {
    goto LABEL_9;
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  if (v4) {
    return result;
  }
LABEL_9:
  uint64_t v19 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
  sub_1000E200C((uint64_t)v3 + *(int *)(v19 + 28), (uint64_t)v11, &qword_1002CC1B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000E27E8((uint64_t)v11, &qword_1002CC1B0);
  }
  else
  {
    sub_10012BB08((uint64_t)v11, (uint64_t)v15, type metadata accessor for Goldilocks_OperationControl);
    sub_10012BF20(&qword_1002CC280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_10012BBD8((uint64_t)v15, type metadata accessor for Goldilocks_OperationControl);
    if (v4) {
      return result;
    }
  }
  uint64_t v20 = v25;
  sub_1000E200C((uint64_t)v3 + *(int *)(v19 + 32), v25, &qword_1002CC1A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v20, 1, v26) == 1)
  {
    sub_1000E27E8(v20, &qword_1002CC1A8);
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = v23;
    sub_10012BB08(v21, v23, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = sub_10012BBD8(v22, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v4) {
      return result;
    }
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int Goldilocks_SilentMoverRampingResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_SilentMoverRampingResponse, &qword_1002CC288, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_10011EA40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_OperationControl(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t sub_10011EB20()
{
  return Goldilocks_SilentMoverRampingResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011EB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_SilentMoverRampingResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10011EB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD288, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011EBCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E70, (uint64_t)static Goldilocks_SilentMoverRampingResponse._protobuf_nameMap, a1);
}

uint64_t sub_10011EBF0()
{
  sub_10012BF20(&qword_1002CC4F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_10011EC5C()
{
  sub_10012BF20(&qword_1002CC4F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
  return Message.hash(into:)();
}

void *Goldilocks_OperationControl.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_OperationControl.protoMessageName;
}

unint64_t static Goldilocks_OperationControl.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10011ED00()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_OperationControl._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_10024A280;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)unint64_t v4 = "unshareOperationPercentage";
  *(void *)(v4 + 8) = 26;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "allowClone";
  *(void *)(v8 + 8) = 10;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "allowShare";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "allowUnshare";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "allowExit";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v7();
  unint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)unint64_t v16 = "allowCleanup";
  *((void *)v16 + 1) = 12;
  unsigned char v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "allowSharedLibrary";
  *((void *)v18 + 1) = 18;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_OperationControl._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E78, (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap);
}

uint64_t static Goldilocks_OperationControl._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E78, (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap, a1);
}

uint64_t Goldilocks_OperationControl.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v3 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          if ((*(unsigned char *)(v0 + 8) & 1) == 0) {
            dispatch thunk of Decoder.handleConflictingOneOf()();
          }
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_OperationControl.traverse<A>(visitor:)()
{
  if ((v0[8] & 1) != 0 || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    if (v0[9] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (v0[10] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (v0[11] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (v0[12] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (v0[13] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (v0[14] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for Goldilocks_OperationControl(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int Goldilocks_OperationControl.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_OperationControl, &qword_1002CC290, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_10011F38C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 13) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_10011F3C8()
{
  return Goldilocks_OperationControl.decodeMessage<A>(decoder:)();
}

uint64_t sub_10011F3E0()
{
  return Goldilocks_OperationControl.traverse<A>(visitor:)();
}

uint64_t sub_10011F3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011F474@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E78, (uint64_t)static Goldilocks_OperationControl._protobuf_nameMap, a1);
}

uint64_t sub_10011F498()
{
  sub_10012BF20(&qword_1002CC280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
  return Message.debugDescription.getter();
}

uint64_t sub_10011F504()
{
  sub_10012BF20(&qword_1002CC280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
  return Message.hash(into:)();
}

void *Goldilocks_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ErrorInfo.protoMessageName;
}

unint64_t static Goldilocks_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t sub_10011F5A8(uint64_t a1)
{
  return sub_1000E58B0(a1, static Goldilocks_ErrorInfo._protobuf_nameMap);
}

uint64_t Goldilocks_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E80, (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap);
}

uint64_t static Goldilocks_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E80, (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap, a1);
}

Swift::Int Goldilocks_ErrorInfo.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ErrorInfo, &qword_1002CC298, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
}

uint64_t sub_10011F648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD278, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011F6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E80, (uint64_t)static Goldilocks_ErrorInfo._protobuf_nameMap, a1);
}

uint64_t sub_10011F6E8()
{
  sub_10012BF20(&qword_1002CC520, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
  return Message.debugDescription.getter();
}

uint64_t sub_10011F754()
{
  sub_10012BF20(&qword_1002CC520, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
  return Message.hash(into:)();
}

uint64_t sub_10011F7D0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  uint64_t v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_10024E930;
  unint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 0;
  *(void *)unint64_t v5 = "NO_ERROR";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "UNKNOWN";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "SERVER_ERROR";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "FAILED_CK_CALL";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v30 + v3 + 4 * v2);
  unint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)unint64_t v15 = "MISSING_ARGUMENTS";
  *((void *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *unint64_t v16 = 5;
  *(void *)uint64_t v17 = "INVALID_ARGUMENTS";
  *((void *)v17 + 1) = 17;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ZONE_NOT_FOUND";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v30 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "RECORD_NOT_FOUND";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  uint64_t v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "PERMISSION_DENIED";
  *(void *)(v22 + 8) = 17;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "MULTI_STATUS";
  *((void *)v24 + 1) = 12;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "NOT_YET_SUPPORTED";
  *((void *)v26 + 1) = 17;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "ALL_RECORDS_IN_PROGRESS";
  *((void *)v28 + 1) = 23;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E88, (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap);
}

uint64_t static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E88, (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap, a1);
}

uint64_t sub_10011FC34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E88, (uint64_t)static Goldilocks_ErrorInfo.ResultErrorCode._protobuf_nameMap, a1);
}

void sub_10011FC58(int a1)
{
  v1._object = (void *)0x8000000100209AA0;
  v1._countAndFlagsBits = 0xD000000000000010;
  sub_100120490(a1, v1, static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName, &static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName[1]);
}

void *Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9E90 != -1) {
    swift_once();
  }
  return static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName;
}

uint64_t static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9E90, static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName);
}

uint64_t sub_10011FCF4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  Swift::String v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B260;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ckOperation";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "description";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "clientCode";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "serverCode";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9E98, (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap);
}

uint64_t static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9E98, (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          sub_1000CDE28();
          goto LABEL_9;
        case 4:
          sub_1000CDDD4();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40))
        || (sub_1000CDE28(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0 + 48)
          || (sub_1000CDDD4(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int Goldilocks_ErrorInfo.DatabaseFailure.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure, &qword_1002CC2A0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_100120280(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9E90, static Goldilocks_ErrorInfo.DatabaseFailure.protoMessageName);
}

uint64_t sub_1001202A8()
{
  return Goldilocks_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)();
}

uint64_t sub_1001202C0()
{
  return Goldilocks_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)();
}

uint64_t sub_1001202D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD270, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100120354@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9E98, (uint64_t)static Goldilocks_ErrorInfo.DatabaseFailure._protobuf_nameMap, a1);
}

uint64_t sub_100120378()
{
  sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  return Message.debugDescription.getter();
}

uint64_t sub_1001203E4()
{
  sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  return Message.hash(into:)();
}

void sub_100120464(int a1)
{
  v1._countAndFlagsBits = 0x45746C757365522ELL;
  v1._object = (void *)0xEC000000726F7272;
  sub_100120490(a1, v1, static Goldilocks_ErrorInfo.ResultError.protoMessageName, &static Goldilocks_ErrorInfo.ResultError.protoMessageName[1]);
}

void sub_100120490(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000014;
  *a4 = 0x800000010020AAA0;
}

void *Goldilocks_ErrorInfo.ResultError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002C9EA0 != -1) {
    swift_once();
  }
  return static Goldilocks_ErrorInfo.ResultError.protoMessageName;
}

uint64_t static Goldilocks_ErrorInfo.ResultError.protoMessageName.getter()
{
  return sub_1000CC6AC(&qword_1002C9EA0, static Goldilocks_ErrorInfo.ResultError.protoMessageName);
}

uint64_t sub_100120570()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  Swift::String v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10024C2F0;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "errorMessage";
  *(void *)(v5 + 8) = 12;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "resultErrorCode";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "databaseFailure";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "errorDomain";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  unint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)unint64_t v15 = "errorCode";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *unint64_t v16 = 6;
  *(void *)uint64_t v17 = "databaseFailures";
  *((void *)v17 + 1) = 16;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "localizedErrorDescription";
  *((void *)v19 + 1) = 25;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "learnMoreLink";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ErrorInfo.ResultError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9EA8, (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap);
}

uint64_t static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9EA8, (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 7:
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_10;
        case 2:
          sub_10012BFDC();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 3:
          type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
          type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
          sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_10;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_10;
        case 6:
          type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
          sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_10:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ErrorInfo.ResultError.traverse<A>(visitor:)()
{
  uint64_t v2 = sub_1000D0514(&qword_1002CC1B8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 16)
      || (char v12 = *(unsigned char *)(v0 + 24),
          uint64_t v19 = *(void *)(v0 + 16),
          char v20 = v12,
          sub_10012BFDC(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
      sub_1000E200C(v0 + *(int *)(v21 + 48), (uint64_t)v4, &qword_1002CC1B8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_1000E27E8((uint64_t)v4, &qword_1002CC1B8);
      }
      else
      {
        sub_10012BB08((uint64_t)v4, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = sub_10012BBD8((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        if (v1) {
          return result;
        }
      }
      unint64_t v13 = *(void *)(v0 + 40);
      uint64_t v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0) {
        uint64_t v14 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 48)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 56) + 16)
            || (sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            unint64_t v15 = *(void *)(v0 + 72);
            uint64_t v16 = HIBYTE(v15) & 0xF;
            if ((v15 & 0x2000000000000000) == 0) {
              uint64_t v16 = *(void *)(v0 + 64) & 0xFFFFFFFFFFFFLL;
            }
            if (!v16 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
            {
              unint64_t v17 = *(void *)(v0 + 88);
              uint64_t v18 = HIBYTE(v17) & 0xF;
              if ((v17 & 0x2000000000000000) == 0) {
                uint64_t v18 = *(void *)(v0 + 80) & 0xFFFFFFFFFFFFLL;
              }
              if (!v18) {
                return UnknownStorage.traverse<A>(visitor:)();
              }
              uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
              if (!v1) {
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}