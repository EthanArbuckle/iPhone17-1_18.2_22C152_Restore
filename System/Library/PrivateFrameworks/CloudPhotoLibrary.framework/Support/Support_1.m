Swift::Int Goldilocks_ErrorInfo.ResultError.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ErrorInfo.ResultError, &qword_1002CC2B8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_100120F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0xE000000000000000;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_100121008(uint64_t a1, uint64_t a2)
{
  return sub_1000CCC84(a1, a2, &qword_1002C9EA0, static Goldilocks_ErrorInfo.ResultError.protoMessageName);
}

uint64_t sub_100121030()
{
  return Goldilocks_ErrorInfo.ResultError.decodeMessage<A>(decoder:)();
}

uint64_t sub_100121048()
{
  return Goldilocks_ErrorInfo.ResultError.traverse<A>(visitor:)();
}

uint64_t sub_100121060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD268, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001210DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9EA8, (uint64_t)static Goldilocks_ErrorInfo.ResultError._protobuf_nameMap, a1);
}

uint64_t sub_100121100()
{
  sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  return Message.debugDescription.getter();
}

uint64_t sub_10012116C()
{
  sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  return Message.hash(into:)();
}

void *Goldilocks_ExitStatusFeedbackRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitStatusFeedbackRequest.protoMessageName;
}

unint64_t static Goldilocks_ExitStatusFeedbackRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_100121210()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B270;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "operationID";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)v10 = "shareID";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "status";
  *(void *)(v11 + 8) = 6;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9EB0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9EB0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap, a1);
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001214A4(a1, a2, a3, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, (void (*)(void))sub_10012C030);
}

uint64_t sub_1001214A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v9 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          a5();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          a4(0);
          type metadata accessor for Goldilocks_ZoneID(0);
          sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012167C(a1, a2, a3, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, (uint64_t)sub_10012C030, (uint64_t)&type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus);
}

uint64_t sub_10012167C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  v23[0] = a5;
  v23[1] = a6;
  v24 = a4;
  uint64_t v8 = v6;
  uint64_t v11 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v11 - 8);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *(void *)(v8 + 8);
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = *(void *)v8 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v28 = a3;
  uint64_t v25 = a1;
  if (!v19 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v7))
  {
    uint64_t v21 = v24(0);
    sub_1000E200C(v8 + *(int *)(v21 + 28), (uint64_t)v13, &qword_1002CD540);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      uint64_t result = sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
    }
    else
    {
      sub_10012BB08((uint64_t)v13, (uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
      sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
      if (v7) {
        return result;
      }
    }
    if (!*(void *)(v8 + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    char v22 = *(unsigned char *)(v8 + 24);
    uint64_t v26 = *(void *)(v8 + 16);
    char v27 = v22;
    ((void (*)(uint64_t))v23[0])(result);
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (!v7) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Goldilocks_ExitStatusFeedbackRequest.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest, &qword_1002CC2C8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_1001219A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_100121A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitStatusFeedbackRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_100121A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitStatusFeedbackRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100121A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100121AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9EB0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest._protobuf_nameMap, a1);
}

uint64_t sub_100121B08()
{
  sub_10012BF20(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return Message.debugDescription.getter();
}

uint64_t sub_100121B74()
{
  sub_10012BF20(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return Message.hash(into:)();
}

uint64_t sub_100121BF0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000D04B0(v0, static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap);
  sub_1000CDD9C(v0, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap);
  sub_1000D0514(&qword_1002CA290);
  v1 = (int *)(sub_1000D0514(&qword_1002CA298) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10024B250;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UNKNOWN";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PARTICIPANT_WAITING_FOR_EXIT_ZONE";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "OWNER_WAITING_FOR_MOVEOUT_ELIGIBILITY";
  *((void *)v12 + 1) = 37;
  v12[16] = 2;
  v9();
  v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "WAITING_FOR_PARTICIPANT_EXIT_COMPLETION";
  *((void *)v14 + 1) = 39;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 10;
  *(void *)uint64_t v16 = "WAITING_FOR_DISCRETIONARY_WINDOW_MOVE_BATCH";
  *((void *)v16 + 1) = 43;
  v16[16] = 2;
  v9();
  v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 11;
  *(void *)unint64_t v18 = "WAITING_FOR_DISCRETIONARY_WINDOW_MOVE_RECORDS";
  *((void *)v18 + 1) = 45;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9EB8, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9EB8, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap, a1);
}

uint64_t sub_100121EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9EB8, (uint64_t)static Goldilocks_ExitStatusFeedbackRequest.ClientStatus._protobuf_nameMap, a1);
}

void *Goldilocks_ExitStatusFeedbackResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Goldilocks_ExitStatusFeedbackResponse.protoMessageName;
}

unint64_t static Goldilocks_ExitStatusFeedbackResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_100121F3C(uint64_t a1)
{
  return sub_1000E58B0(a1, static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap);
}

uint64_t Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000CC8DC(&qword_1002C9EC0, (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap);
}

uint64_t static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC954(&qword_1002C9EC0, (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap, a1);
}

uint64_t _s22CloudKitImplementation37Goldilocks_ExitStatusFeedbackResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int Goldilocks_ExitStatusFeedbackResponse.hashValue.getter()
{
  return sub_100122164((void (*)(void))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse, &qword_1002CC2D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
}

Swift::Int sub_100122164(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1001221EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BF20(&qword_1002CD258, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100122268@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CCEB0(&qword_1002C9EC0, (uint64_t)static Goldilocks_ExitStatusFeedbackResponse._protobuf_nameMap, a1);
}

uint64_t sub_10012228C()
{
  sub_10012BF20(&qword_1002CC568, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
  return Message.debugDescription.getter();
}

uint64_t sub_1001222F8()
{
  sub_10012BF20(&qword_1002CC568, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
  return Message.hash(into:)();
}

uint64_t sub_100122374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
  uint64_t v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v21 = (uint64_t *)((char *)&v40 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16))
  {
LABEL_30:
    char v36 = 0;
    return v36 & 1;
  }
  uint64_t v43 = v11;
  uint64_t v48 = v4;
  if (v22 && a1 != a2)
  {
    uint64_t v49 = v18;
    v41 = v7;
    v42 = v10;
    unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v44 = *(void *)(v19 + 72);
    uint64_t v45 = a1;
    uint64_t v46 = a2;
    v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v24 = v22 - 1;
    uint64_t v25 = v43;
    while (1)
    {
      sub_10012BB70(a1 + v23, (uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      sub_10012BB70(a2 + v23, (uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      BOOL v26 = *v21 == *v17 && v21[1] == v17[1];
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v27 = v21[2] == v17[2] && v21[3] == v17[3];
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v28 = *(int *)(v49 + 28);
      uint64_t v29 = (uint64_t)v17 + v28;
      uint64_t v30 = (uint64_t)&v13[*(int *)(v25 + 48)];
      sub_1000E200C((uint64_t)v21 + v28, (uint64_t)v13, &qword_1002CC1A8);
      sub_1000E200C(v29, v30, &qword_1002CC1A8);
      uint64_t v31 = v48;
      v32 = *v47;
      if ((*v47)(v13, 1, v48) == 1)
      {
        if (v32((char *)v30, 1, v31) != 1) {
          goto LABEL_28;
        }
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
      }
      else
      {
        uint64_t v33 = (uint64_t)v42;
        sub_1000E200C((uint64_t)v13, (uint64_t)v42, &qword_1002CC1A8);
        if (v32((char *)v30, 1, v31) == 1)
        {
          sub_10012BBD8(v33, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_28:
          sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
          break;
        }
        uint64_t v34 = (uint64_t)v41;
        sub_10012BB08(v30, (uint64_t)v41, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v35 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v33, v34);
        sub_10012BBD8(v34, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_10012BBD8(v33, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
        uint64_t v25 = v43;
        if ((v35 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      sub_10012BBD8((uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      BOOL v38 = v24-- != 0;
      if (v36)
      {
        a1 = v45;
        v23 += v44;
        a2 = v46;
        if (v38) {
          continue;
        }
      }
      return v36 & 1;
    }
    sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
    sub_10012BBD8((uint64_t)v21, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
    goto LABEL_30;
  }
  char v36 = 1;
  return v36 & 1;
}

uint64_t sub_100122898(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v4 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  v91 = (uint64_t *)((char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v6 - 8);
  v100 = (uint64_t *)((char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v95 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v95);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for Goldilocks_FoundDuplicate(0);
  uint64_t v10 = *(void *)(found - 8);
  uint64_t v11 = __chkstk_darwin(found);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v74 - v14;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v87 = (uint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000D0514(&qword_1002CC1A8);
  __chkstk_darwin(v19 - 8);
  uint64_t v88 = (uint64_t)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v89);
  uint64_t v90 = (uint64_t)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Goldilocks_DuplicateState(0);
  uint64_t v23 = __chkstk_darwin(v22);
  v98 = (uint64_t *)((char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = __chkstk_darwin(v23);
  v97 = (uint64_t *)((char *)&v74 - v27);
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28 != *(void *)(a2 + 16))
  {
LABEL_58:
    char v72 = 0;
    return v72 & 1;
  }
  if (!v28 || a1 == a2)
  {
    char v72 = 1;
    return v72 & 1;
  }
  uint64_t v85 = v25;
  uint64_t v82 = v16;
  uint64_t v75 = v10;
  uint64_t v29 = 0;
  unint64_t v30 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = *(void *)(v26 + 72);
  v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v84 = v34;
  uint64_t v79 = v28;
  uint64_t v78 = a1 + v30;
  uint64_t v77 = a2 + v30;
  uint64_t v76 = v33;
  while (1)
  {
    uint64_t v83 = v29;
    uint64_t v35 = v33 * v29;
    char v36 = v97;
    sub_10012BB70(v31 + v33 * v29, (uint64_t)v97, type metadata accessor for Goldilocks_DuplicateState);
    uint64_t v37 = v32 + v35;
    BOOL v38 = v98;
    sub_10012BB70(v37, (uint64_t)v98, type metadata accessor for Goldilocks_DuplicateState);
    BOOL v39 = *v36 == *v38 && v36[1] == v38[1];
    uint64_t v40 = v96;
    if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_57;
    }
    uint64_t v41 = *(int *)(v85 + 28);
    uint64_t v42 = (uint64_t)v98 + v41;
    uint64_t v43 = v90;
    uint64_t v44 = v90 + *(int *)(v89 + 48);
    sub_1000E200C((uint64_t)v97 + v41, v90, &qword_1002CC1A8);
    sub_1000E200C(v42, v44, &qword_1002CC1A8);
    uint64_t v45 = v82;
    uint64_t v46 = *v81;
    if ((*v81)(v43, 1, v82) == 1)
    {
      if (v46(v44, 1, v45) != 1) {
        goto LABEL_61;
      }
      sub_1000E27E8(v43, &qword_1002CC1A8);
    }
    else
    {
      uint64_t v47 = v88;
      sub_1000E200C(v43, v88, &qword_1002CC1A8);
      if (v46(v44, 1, v45) == 1)
      {
        sub_10012BBD8(v47, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_61:
        sub_1000E27E8(v43, &qword_1002CD310);
LABEL_57:
        sub_10012BBD8((uint64_t)v98, type metadata accessor for Goldilocks_DuplicateState);
        sub_10012BBD8((uint64_t)v97, type metadata accessor for Goldilocks_DuplicateState);
        goto LABEL_58;
      }
      uint64_t v48 = v87;
      sub_10012BB08(v44, v87, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      char v49 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v47, v48);
      sub_10012BBD8(v48, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_10012BBD8(v47, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000E27E8(v43, &qword_1002CC1A8);
      uint64_t v34 = v84;
      if ((v49 & 1) == 0) {
        goto LABEL_57;
      }
    }
    uint64_t v50 = v98[2];
    uint64_t v92 = v97[2];
    uint64_t v93 = *(void *)(v92 + 16);
    uint64_t v94 = v50;
    if (v93 != *(void *)(v50 + 16)) {
      goto LABEL_57;
    }
    uint64_t v51 = v94;
    if (v93)
    {
      if (v92 != v94) {
        break;
      }
    }
LABEL_47:
    uint64_t v71 = (uint64_t)v97;
    uint64_t v70 = (uint64_t)v98;
    type metadata accessor for UnknownStorage();
    sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_10012BBD8(v70, type metadata accessor for Goldilocks_DuplicateState);
    sub_10012BBD8(v71, type metadata accessor for Goldilocks_DuplicateState);
    if (v72)
    {
      uint64_t v29 = v83 + 1;
      uint64_t v31 = v78;
      uint64_t v32 = v77;
      uint64_t v33 = v76;
      if (v83 + 1 != v79) {
        continue;
      }
    }
    return v72 & 1;
  }
  unint64_t v52 = 0;
  unint64_t v53 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  uint64_t v86 = *(void *)(v75 + 72);
  v80 = v15;
  while (1)
  {
    uint64_t result = sub_10012BB70(v92 + v53, (uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
    if (v52 >= *(void *)(v51 + 16)) {
      break;
    }
    sub_10012BB70(v51 + v53, (uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
    BOOL v55 = *(void *)v15 == *(void *)v13 && *((void *)v15 + 1) == *((void *)v13 + 1);
    if (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_56;
    }
    uint64_t v56 = *(int *)(found + 28);
    uint64_t v57 = (uint64_t)&v13[v56];
    uint64_t v58 = (uint64_t)&v9[*(int *)(v95 + 48)];
    sub_1000E200C((uint64_t)&v15[v56], (uint64_t)v9, &qword_1002CD540);
    sub_1000E200C(v57, v58, &qword_1002CD540);
    v59 = *v34;
    if ((*v34)(v9, 1, v40) == 1)
    {
      if (v59((char *)v58, 1, v40) != 1)
      {
        v73 = &qword_1002CD300;
        goto LABEL_55;
      }
      sub_1000E27E8((uint64_t)v9, &qword_1002CD540);
    }
    else
    {
      sub_1000E200C((uint64_t)v9, (uint64_t)v100, &qword_1002CD540);
      if (v59((char *)v58, 1, v40) == 1)
      {
        v73 = &qword_1002CD300;
        goto LABEL_54;
      }
      v60 = v91;
      sub_10012BB08(v58, (uint64_t)v91, type metadata accessor for Goldilocks_ZoneID);
      if ((*v100 != *v60 || v100[1] != v60[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v100[2] != v60[2] || v100[3] != v60[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        sub_10012BBD8((uint64_t)v60, type metadata accessor for Goldilocks_ZoneID);
        v73 = &qword_1002CD540;
LABEL_54:
        sub_10012BBD8((uint64_t)v100, type metadata accessor for Goldilocks_ZoneID);
LABEL_55:
        sub_1000E27E8((uint64_t)v9, v73);
LABEL_56:
        sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
        sub_10012BBD8((uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
        goto LABEL_57;
      }
      uint64_t v61 = (uint64_t)v9;
      v62 = v100;
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v64 = (uint64_t)v60;
      v65 = v62;
      uint64_t v9 = (char *)v61;
      uint64_t v15 = v80;
      sub_10012BBD8(v64, type metadata accessor for Goldilocks_ZoneID);
      uint64_t v66 = (uint64_t)v65;
      uint64_t v34 = v84;
      sub_10012BBD8(v66, type metadata accessor for Goldilocks_ZoneID);
      sub_1000E27E8(v61, &qword_1002CD540);
      if ((v63 & 1) == 0) {
        goto LABEL_56;
      }
    }
    uint64_t v67 = *((void *)v15 + 2);
    uint64_t v68 = *((void *)v13 + 2);
    if (v15[24]) {
      uint64_t v67 = v67 != 0;
    }
    if (v13[24] == 1)
    {
      if (v68)
      {
        if (v67 != 1) {
          goto LABEL_56;
        }
      }
      else if (v67)
      {
        goto LABEL_56;
      }
    }
    else if (v67 != v68)
    {
      goto LABEL_56;
    }
    type metadata accessor for UnknownStorage();
    sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    uint64_t v40 = v96;
    char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
    sub_10012BBD8((uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
    if ((v69 & 1) == 0) {
      goto LABEL_57;
    }
    ++v52;
    v53 += v86;
    uint64_t v51 = v94;
    if (v93 == v52) {
      goto LABEL_47;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100123430(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001234F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CA580);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CABF8);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Utility_DeleteZoneResponse(0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v21 = (uint64_t *)((char *)&v38 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    goto LABEL_23;
  }
  uint64_t v41 = v11;
  uint64_t v46 = v4;
  if (!v22 || a1 == a2)
  {
    char v34 = 1;
    return v34 & 1;
  }
  uint64_t v47 = v18;
  BOOL v39 = v7;
  uint64_t v40 = v10;
  unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v42 = *(void *)(v19 + 72);
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v24 = v22 - 1;
  uint64_t v25 = v41;
  while (1)
  {
    sub_10012BB70(a1 + v23, (uint64_t)v21, type metadata accessor for Utility_DeleteZoneResponse);
    sub_10012BB70(a2 + v23, (uint64_t)v17, type metadata accessor for Utility_DeleteZoneResponse);
    uint64_t v26 = *(int *)(v47 + 24);
    uint64_t v27 = (uint64_t)v17 + v26;
    uint64_t v28 = (uint64_t)&v13[*(int *)(v25 + 48)];
    sub_1000E200C((uint64_t)v21 + v26, (uint64_t)v13, &qword_1002CA580);
    sub_1000E200C(v27, v28, &qword_1002CA580);
    uint64_t v29 = v46;
    unint64_t v30 = *v45;
    if ((*v45)(v13, 1, v46) != 1) {
      break;
    }
    if (v30((char *)v28, 1, v29) != 1) {
      goto LABEL_21;
    }
    sub_1000E27E8((uint64_t)v13, &qword_1002CA580);
LABEL_10:
    if ((*v21 != *v17 || v21[1] != v17[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_22;
    }
    type metadata accessor for UnknownStorage();
    sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_10012BBD8((uint64_t)v17, type metadata accessor for Utility_DeleteZoneResponse);
    sub_10012BBD8((uint64_t)v21, type metadata accessor for Utility_DeleteZoneResponse);
    BOOL v36 = v24-- != 0;
    if (v34)
    {
      a1 = v43;
      v23 += v42;
      a2 = v44;
      if (v36) {
        continue;
      }
    }
    return v34 & 1;
  }
  uint64_t v31 = (uint64_t)v40;
  sub_1000E200C((uint64_t)v13, (uint64_t)v40, &qword_1002CA580);
  if (v30((char *)v28, 1, v29) != 1)
  {
    uint64_t v32 = (uint64_t)v39;
    sub_10012BB08(v28, (uint64_t)v39, type metadata accessor for Utility_ErrorInfo.ResultError);
    char v33 = static Utility_ErrorInfo.ResultError.== infix(_:_:)(v31, v32);
    sub_10012BBD8(v32, type metadata accessor for Utility_ErrorInfo.ResultError);
    sub_10012BBD8(v31, type metadata accessor for Utility_ErrorInfo.ResultError);
    sub_1000E27E8((uint64_t)v13, &qword_1002CA580);
    uint64_t v25 = v41;
    if ((v33 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  sub_10012BBD8(v31, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_21:
  sub_1000E27E8((uint64_t)v13, &qword_1002CABF8);
LABEL_22:
  sub_10012BBD8((uint64_t)v17, type metadata accessor for Utility_DeleteZoneResponse);
  sub_10012BBD8((uint64_t)v21, type metadata accessor for Utility_DeleteZoneResponse);
LABEL_23:
  char v34 = 0;
  return v34 & 1;
}

uint64_t sub_100123A04(uint64_t a1, uint64_t a2)
{
  return sub_100123A58(a1, a2, type metadata accessor for ResponseItem, type metadata accessor for ResponseItem, (uint64_t (*)(char *, char *))static ResponseItem.== infix(_:_:), type metadata accessor for ResponseItem);
}

uint64_t sub_100123A58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  uint64_t v11 = a3(0) - 8;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v28 = a2;
      uint64_t v19 = a5;
      unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = v18 - 1;
      do
      {
        sub_10012BB70(a1 + v20, (uint64_t)v17, a4);
        sub_10012BB70(v28 + v20, (uint64_t)v14, a4);
        char v23 = v19(v17, v14);
        sub_10012BBD8((uint64_t)v14, a6);
        sub_10012BBD8((uint64_t)v17, a6);
        BOOL v25 = v22-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v20 += v21;
      }
      while (v25);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_100123BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UploadResource(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (uint64_t *)((char *)&v19 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v20 = *(void *)(v8 + 72);
    while (1)
    {
      sub_10012BB70(a1 + v12, (uint64_t)v10, type metadata accessor for UploadResource);
      sub_10012BB70(a2 + v12, (uint64_t)v7, type metadata accessor for UploadResource);
      uint64_t v13 = *v10;
      uint64_t v14 = *(void *)v7;
      if (v7[8] == 1)
      {
        if (v14)
        {
          if (v14 == 1)
          {
            if (v13 != 1) {
              break;
            }
          }
          else if (v13 != 2)
          {
            break;
          }
        }
        else if (v13)
        {
          break;
        }
      }
      else if (v13 != v14)
      {
        break;
      }
      BOOL v15 = v10[2] == *((void *)v7 + 2) && v10[3] == *((void *)v7 + 3);
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v16 = v10[4];
      uint64_t v17 = *((void *)v7 + 4);
      if (v7[40] == 1)
      {
        switch(v17)
        {
          case 3:
            if (v16 != 3) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 4:
            if (v16 != 4) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 5:
            if (v16 != 5) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 6:
            if (v16 != 6) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 7:
            if (v16 != 7) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 8:
            if (v16 != 8) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 9:
            if (v16 != 9) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 10:
            if (v16 != 10) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 11:
            if (v16 != 11) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 12:
            if (v16 != 12) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 13:
            if (v16 != 13) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 14:
            if (v16 != 14) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 15:
            if (v16 != 15) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 16:
            if (v16 != 16) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 17:
            if (v16 != 17) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 18:
            if (v16 != 18) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 19:
            if (v16 != 19) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 20:
            if (v16 != 20) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 21:
            if (v16 != 21) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 22:
            if (v16 != 22) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 23:
            if (v16 != 23) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 24:
            if (v16 != 24) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 25:
            if (v16 != 25) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 26:
            if (v16 != 26) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 27:
            if (v16 != 27) {
              goto LABEL_78;
            }
            goto LABEL_23;
          case 28:
            if (v16 != 28) {
              goto LABEL_78;
            }
            goto LABEL_23;
          default:
            break;
        }
      }
      if (v16 != v17) {
        break;
      }
LABEL_23:
      if ((sub_10012407C(v10[6], *((void *)v7 + 6)) & 1) == 0) {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_10012BBD8((uint64_t)v7, type metadata accessor for UploadResource);
      sub_10012BBD8((uint64_t)v10, type metadata accessor for UploadResource);
      v12 += v20;
      if (!--v11) {
        return 1;
      }
    }
LABEL_78:
    sub_10012BBD8((uint64_t)v7, type metadata accessor for UploadResource);
    sub_10012BBD8((uint64_t)v10, type metadata accessor for UploadResource);
    return 0;
  }
  return 1;
}

uint64_t sub_10012407C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (uint64_t *)(a1 + 32);
    for (i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)i - 1);
      if (*i == 1)
      {
        switch(v7)
        {
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            goto LABEL_6;
          case 6:
            if (v5 != 6) {
              return 0;
            }
            goto LABEL_6;
          case 7:
            if (v5 != 7) {
              return 0;
            }
            goto LABEL_6;
          case 8:
            if (v5 != 8) {
              return 0;
            }
            goto LABEL_6;
          case 9:
            if (v5 != 9) {
              return 0;
            }
            goto LABEL_6;
          case 10:
            if (v5 != 10) {
              return 0;
            }
            goto LABEL_6;
          case 11:
            if (v5 != 11) {
              return 0;
            }
            goto LABEL_6;
          case 12:
            if (v5 != 12) {
              return 0;
            }
            goto LABEL_6;
          case 13:
            if (v5 != 13) {
              return 0;
            }
            goto LABEL_6;
          case 14:
            if (v5 != 14) {
              return 0;
            }
            goto LABEL_6;
          case 15:
            if (v5 != 15) {
              return 0;
            }
            goto LABEL_6;
          case 16:
            if (v5 != 16) {
              return 0;
            }
            goto LABEL_6;
          case 17:
            if (v5 != 17) {
              return 0;
            }
            goto LABEL_6;
          case 18:
            if (v5 != 18) {
              return 0;
            }
            goto LABEL_6;
          case 19:
            if (v5 != 19) {
              return 0;
            }
            goto LABEL_6;
          case 20:
            if (v5 != 20) {
              return 0;
            }
            goto LABEL_6;
          case 21:
            if (v5 != 21) {
              return 0;
            }
            goto LABEL_6;
          case 22:
            if (v5 != 22) {
              return 0;
            }
            goto LABEL_6;
          case 23:
            if (v5 != 23) {
              return 0;
            }
            goto LABEL_6;
          case 24:
            if (v5 != 24) {
              return 0;
            }
            goto LABEL_6;
          case 25:
            if (v5 != 25) {
              return 0;
            }
            goto LABEL_6;
          case 26:
            if (v5 != 26) {
              return 0;
            }
            goto LABEL_6;
          case 27:
            if (v5 != 27) {
              return 0;
            }
            goto LABEL_6;
          case 28:
            if (v5 != 28) {
              return 0;
            }
            goto LABEL_6;
          default:
            break;
        }
      }
      if (v5 != v7) {
        break;
      }
LABEL_6:
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1001242A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RequestItem(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1;
    }
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v19 = *(void *)(v8 + 72);
    while (1)
    {
      sub_10012BB70(a1 + v12, (uint64_t)v10, type metadata accessor for RequestItem);
      sub_10012BB70(a2 + v12, (uint64_t)v7, type metadata accessor for RequestItem);
      uint64_t v13 = *(int *)(v4 + 20);
      uint64_t v14 = *(void **)&v10[v13];
      uint64_t v15 = *(void *)&v7[v13];
      if (v14 != (void *)v15)
      {
        swift_retain();
        swift_retain();
        char v16 = sub_1000FA04C(v14, v15);
        swift_release();
        swift_release();
        if ((v16 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_10012BBD8((uint64_t)v7, type metadata accessor for RequestItem);
      sub_10012BBD8((uint64_t)v10, type metadata accessor for RequestItem);
      v12 += v19;
      if (!--v11) {
        return 1;
      }
    }
    sub_10012BBD8((uint64_t)v7, type metadata accessor for RequestItem);
    sub_10012BBD8((uint64_t)v10, type metadata accessor for RequestItem);
  }
  return 0;
}

uint64_t sub_100124504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UntranscodableItem(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1;
    }
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v17 = *(void *)(v8 + 72);
    while (1)
    {
      sub_10012BB70(a1 + v12, (uint64_t)v10, type metadata accessor for UntranscodableItem);
      sub_10012BB70(a2 + v12, (uint64_t)v7, type metadata accessor for UntranscodableItem);
      BOOL v13 = *(void *)v10 == *(void *)v7 && *((void *)v10 + 1) == *((void *)v7 + 1);
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v14 = *((void *)v10 + 2) == *((void *)v7 + 2) && *((void *)v10 + 3) == *((void *)v7 + 3);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (*((void *)v10 + 4) != *((void *)v7 + 4) || *((void *)v10 + 5) != *((void *)v7 + 5))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      if (v10[48] != v7[48]
        || (*((void *)v10 + 7) != *((void *)v7 + 7) || *((void *)v10 + 8) != *((void *)v7 + 8))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      if ((*((void *)v10 + 9) != *((void *)v7 + 9) || *((void *)v10 + 10) != *((void *)v7 + 10))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_10012BBD8((uint64_t)v7, type metadata accessor for UntranscodableItem);
      sub_10012BBD8((uint64_t)v10, type metadata accessor for UntranscodableItem);
      v12 += v17;
      if (!--v11) {
        return 1;
      }
    }
    sub_10012BBD8((uint64_t)v7, type metadata accessor for UntranscodableItem);
    sub_10012BBD8((uint64_t)v10, type metadata accessor for UntranscodableItem);
  }
  return 0;
}

uint64_t sub_1001247E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0) - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10012BB70(a1 + v12, (uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        sub_10012BB70(a2 + v12, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        char v15 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0((uint64_t)v10, (uint64_t)v7);
        sub_10012BBD8((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        sub_10012BBD8((uint64_t)v10, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100124984(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v15 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2) {
      return 1;
    }
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v16 = *(void *)(v7 + 72);
    while (1)
    {
      sub_10012BB70(a1 + v11, (uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      sub_10012BB70(a2 + v11, (uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      BOOL v12 = *v9 == *v6 && v9[1] == v6[1];
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v13 = v9[2] == v6[2] && v9[3] == v6[3];
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_10012BBD8((uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      sub_10012BBD8((uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
      v11 += v16;
      if (!--v10) {
        return 1;
      }
    }
    sub_10012BBD8((uint64_t)v6, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
    sub_10012BBD8((uint64_t)v9, type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail);
  }
  return 0;
}

uint64_t sub_100124BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      BOOL v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      unint64_t v30 = (void (**)(uint64_t, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        uint64_t v20 = v9;
        uint64_t v21 = v32;
        v32((uint64_t)v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        sub_10012BF20(&qword_1002CBDF8, (void (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24((uint64_t)v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_100124E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (uint64_t *)(a1 + 32);
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)v4 - 1);
      if (*v4 == 1)
      {
        if (v7)
        {
          if (v7 == 1)
          {
            if (v5 != 1) {
              return 0;
            }
          }
          else if (v5 != 2)
          {
            return 0;
          }
        }
        else if (v5)
        {
          return 0;
        }
      }
      else if (v5 != v7)
      {
        return 0;
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t _s22CloudKitImplementation45Goldilocks_ExitMoveBatchErrorFeedbackResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  sub_1000E200C(a1 + v24, (uint64_t)v22, &qword_1002CC1A8);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  sub_1000E200C(a2 + v25, (uint64_t)v20, &qword_1002CC1A8);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000E200C((uint64_t)v22, (uint64_t)v14, &qword_1002CC1A8);
  sub_1000E200C((uint64_t)v20, v26, &qword_1002CC1A8);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    sub_1000E200C((uint64_t)v14, v46, &qword_1002CC1A8);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      sub_10012BB08(v26, v39, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      char v30 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v28, v29);
      sub_10012BBD8(v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      sub_10012BBD8(v28, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      sub_1000E27E8((uint64_t)v14, &qword_1002CC1A8);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
    sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
    sub_10012BBD8(v28, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_6:
    sub_1000E27E8((uint64_t)v14, &qword_1002CD310);
    goto LABEL_9;
  }
  sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
  sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_1000E27E8((uint64_t)v14, &qword_1002CC1A8);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t _s22CloudKitImplementation44Goldilocks_ExitMoveBatchErrorFeedbackRequestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v52 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)v49 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v57 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD300);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CD540);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (void *)((char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v49 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v49 - v22;
  uint64_t v24 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  uint64_t v25 = *(int *)(v24 + 32);
  BOOL v55 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  sub_1000E200C(v26, (uint64_t)v23, &qword_1002CD540);
  uint64_t v50 = v27;
  uint64_t v28 = *(int *)(v27 + 32);
  uint64_t v56 = a2;
  sub_1000E200C((uint64_t)a2 + v28, (uint64_t)v21, &qword_1002CD540);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000E200C((uint64_t)v23, (uint64_t)v14, &qword_1002CD540);
  sub_1000E200C((uint64_t)v21, v29, &qword_1002CD540);
  char v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
    sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
    if (v30(v29, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v14, &qword_1002CD540);
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  uint64_t v31 = v57;
  sub_1000E200C((uint64_t)v14, (uint64_t)v18, &qword_1002CD540);
  v49[1] = v8;
  if (v30(v29, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
    sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
    sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
LABEL_6:
    uint64_t v32 = &qword_1002CD300;
    uint64_t v33 = (uint64_t)v14;
LABEL_7:
    sub_1000E27E8(v33, v32);
LABEL_25:
    char v38 = 0;
    return v38 & 1;
  }
  sub_10012BB08(v29, (uint64_t)v31, type metadata accessor for Goldilocks_ZoneID);
  BOOL v34 = *v18 == *v31 && v18[1] == v31[1];
  if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v18[2] != v31[2] || v18[3] != v31[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    sub_10012BBD8((uint64_t)v31, type metadata accessor for Goldilocks_ZoneID);
    sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
    sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
    sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v33 = (uint64_t)v14;
    uint64_t v32 = &qword_1002CD540;
    goto LABEL_7;
  }
  sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_10012BBD8((uint64_t)v31, type metadata accessor for Goldilocks_ZoneID);
  sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
  sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
  sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
  sub_1000E27E8((uint64_t)v14, &qword_1002CD540);
  if ((v35 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_17:
  char v36 = v55;
  uint64_t v37 = v56;
  if ((sub_100122374(*v55, *v56) & 1) == 0) {
    goto LABEL_25;
  }
  if (v36[1] == v37[1] && v36[2] == v37[2] || (char v38 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v36[3] == v37[3] && v36[4] == v37[4] || (char v38 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v40 = v50;
      uint64_t v39 = v51;
      uint64_t v41 = (char *)v36 + *(int *)(v50 + 28);
      uint64_t v43 = v53;
      uint64_t v42 = v54;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v44(v51, v41, v54);
      uint64_t v45 = (char *)v37 + *(int *)(v40 + 28);
      uint64_t v46 = v52;
      v44(v52, v45, v42);
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
      v47(v46, v42);
      v47(v39, v42);
    }
  }
  return v38 & 1;
}

uint64_t _s22CloudKitImplementation37Goldilocks_SilentMoverRampingResponseV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v65 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v61 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v72 = *(void *)(v8 - 8);
  uint64_t v73 = v8;
  __chkstk_darwin(v8);
  uint64_t v63 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v69);
  uint64_t v74 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v70 = (uint64_t)&v61 - v15;
  __chkstk_darwin(v14);
  uint64_t v71 = (uint64_t)&v61 - v16;
  uint64_t v17 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v68 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000D0514(&qword_1002CD318);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000D0514(&qword_1002CC1B0);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v61 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = *a1;
  uint64_t v33 = a1[1];
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  if (v32 == *a2 && v33 == a2[1] || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    char v35 = v75;
    if (v75[2] == v76[2])
    {
      uint64_t v61 = v4;
      char v36 = v76;
      uint64_t v37 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
      sub_1000E200C((uint64_t)v35 + *(int *)(v37 + 28), (uint64_t)v31, &qword_1002CC1B0);
      uint64_t v62 = v37;
      sub_1000E200C((uint64_t)v36 + *(int *)(v37 + 28), (uint64_t)v29, &qword_1002CC1B0);
      uint64_t v38 = (uint64_t)&v22[*(int *)(v20 + 48)];
      sub_1000E200C((uint64_t)v31, (uint64_t)v22, &qword_1002CC1B0);
      sub_1000E200C((uint64_t)v29, v38, &qword_1002CC1B0);
      uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
      if (v39((uint64_t)v22, 1, v17) == 1)
      {
        sub_1000E27E8((uint64_t)v29, &qword_1002CC1B0);
        sub_1000E27E8((uint64_t)v31, &qword_1002CC1B0);
        if (v39(v38, 1, v17) == 1)
        {
          sub_1000E27E8((uint64_t)v22, &qword_1002CC1B0);
LABEL_12:
          uint64_t v44 = v62;
          uint64_t v45 = v71;
          sub_1000E200C((uint64_t)v75 + *(int *)(v62 + 32), v71, &qword_1002CC1A8);
          uint64_t v46 = v70;
          sub_1000E200C((uint64_t)v76 + *(int *)(v44 + 32), v70, &qword_1002CC1A8);
          uint64_t v47 = v74;
          uint64_t v48 = v74 + *(int *)(v69 + 48);
          sub_1000E200C(v45, v74, &qword_1002CC1A8);
          sub_1000E200C(v46, v48, &qword_1002CC1A8);
          uint64_t v49 = v73;
          uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
          if (v50(v47, 1, v73) == 1)
          {
            sub_1000E27E8(v46, &qword_1002CC1A8);
            sub_1000E27E8(v45, &qword_1002CC1A8);
            if (v50(v48, 1, v49) == 1)
            {
              sub_1000E27E8(v47, &qword_1002CC1A8);
LABEL_22:
              uint64_t v55 = v66;
              uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
              uint64_t v57 = v64;
              uint64_t v58 = v61;
              v56(v64, (char *)v75 + *(int *)(v44 + 24), v61);
              v59 = v65;
              v56(v65, (char *)v76 + *(int *)(v44 + 24), v58);
              sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
              char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
              v60 = *(void (**)(char *, uint64_t))(v55 + 8);
              v60(v59, v58);
              v60(v57, v58);
              return v34 & 1;
            }
          }
          else
          {
            uint64_t v51 = v67;
            sub_1000E200C(v47, v67, &qword_1002CC1A8);
            if (v50(v48, 1, v49) != 1)
            {
              uint64_t v53 = v63;
              sub_10012BB08(v48, v63, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              char v54 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v51, v53);
              sub_10012BBD8(v53, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              sub_1000E27E8(v46, &qword_1002CC1A8);
              sub_1000E27E8(v45, &qword_1002CC1A8);
              sub_10012BBD8(v51, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
              sub_1000E27E8(v47, &qword_1002CC1A8);
              if (v54) {
                goto LABEL_22;
              }
              goto LABEL_19;
            }
            sub_1000E27E8(v46, &qword_1002CC1A8);
            sub_1000E27E8(v45, &qword_1002CC1A8);
            sub_10012BBD8(v51, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          }
          uint64_t v40 = &qword_1002CD310;
          uint64_t v41 = v47;
          goto LABEL_18;
        }
LABEL_10:
        uint64_t v40 = &qword_1002CD318;
        uint64_t v41 = (uint64_t)v22;
LABEL_18:
        sub_1000E27E8(v41, v40);
        goto LABEL_19;
      }
      sub_1000E200C((uint64_t)v22, (uint64_t)v26, &qword_1002CC1B0);
      if (v39(v38, 1, v17) == 1)
      {
        sub_1000E27E8((uint64_t)v29, &qword_1002CC1B0);
        sub_1000E27E8((uint64_t)v31, &qword_1002CC1B0);
        sub_10012BBD8((uint64_t)v26, type metadata accessor for Goldilocks_OperationControl);
        goto LABEL_10;
      }
      uint64_t v42 = v68;
      sub_10012BB08(v38, v68, type metadata accessor for Goldilocks_OperationControl);
      char v43 = _s22CloudKitImplementation27Goldilocks_OperationControlV2eeoiySbAC_ACtFZ_0((uint64_t)v26, v42);
      sub_10012BBD8(v42, type metadata accessor for Goldilocks_OperationControl);
      sub_1000E27E8((uint64_t)v29, &qword_1002CC1B0);
      sub_1000E27E8((uint64_t)v31, &qword_1002CC1B0);
      sub_10012BBD8((uint64_t)v26, type metadata accessor for Goldilocks_OperationControl);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1B0);
      if (v43) {
        goto LABEL_12;
      }
    }
LABEL_19:
    char v34 = 0;
  }
  return v34 & 1;
}

uint64_t _s22CloudKitImplementation36Goldilocks_SilentMoverRampingRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, &a1[*(int *)(v13 + 20)], v4);
    v14(v8, &a2[*(int *)(v13 + 20)], v4);
    sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation36Goldilocks_ExitStatusFeedbackRequestV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v42 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v43 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
    sub_1000E200C((uint64_t)v48 + *(int *)(v26 + 28), (uint64_t)v22, &qword_1002CD540);
    sub_1000E200C((uint64_t)v49 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CD540);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CD540);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CD540);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
        uint64_t v29 = v43;
        goto LABEL_20;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CD540);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v33 = v47;
        sub_10012BB08(v27, (uint64_t)v47, type metadata accessor for Goldilocks_ZoneID);
        if (*v17 == *v33 && v17[1] == v33[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v17[2] == v33[2] && v17[3] == v33[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          uint64_t v29 = v43;
          char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_10012BBD8((uint64_t)v33, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
          sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
          if (v34)
          {
LABEL_20:
            uint64_t v35 = v48[2];
            if (*((unsigned char *)v48 + 24) == 1) {
              uint64_t v35 = qword_100251458[v35];
            }
            uint64_t v36 = v49[2];
            if (*((unsigned char *)v49 + 24))
            {
              switch(v36)
              {
                case 1:
                  if (v35 == 1) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
                case 2:
                  if (v35 == 2) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
                case 3:
                  if (v35 == 3) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
                case 4:
                  if (v35 == 10) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
                case 5:
                  if (v35 == 11) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
                default:
                  if (!v35) {
                    goto LABEL_27;
                  }
                  goto LABEL_11;
              }
            }
            if (v35 == v36)
            {
LABEL_27:
              uint64_t v37 = v46;
              uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
              uint64_t v39 = v44;
              v38(v44, (char *)v48 + *(int *)(v26 + 24), v29);
              uint64_t v40 = v45;
              v38(v45, (char *)v49 + *(int *)(v26 + 24), v29);
              sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
              char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
              v41(v40, v29);
              v41(v39, v29);
              return v25 & 1;
            }
          }
LABEL_11:
          char v25 = 0;
          return v25 & 1;
        }
        sub_10012BBD8((uint64_t)v33, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
        sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v31 = (uint64_t)v13;
        uint64_t v30 = &qword_1002CD540;
LABEL_10:
        sub_1000E27E8(v31, v30);
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    }
    uint64_t v30 = &qword_1002CD300;
    uint64_t v31 = (uint64_t)v13;
    goto LABEL_10;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation36Goldilocks_ExitMoveBatchFeedbackItemV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v39 - v20;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v41 = v4;
      uint64_t v23 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
      sub_1000E200C((uint64_t)a1 + *(int *)(v23 + 28), (uint64_t)v21, &qword_1002CC1A8);
      uint64_t v40 = v23;
      sub_1000E200C((uint64_t)a2 + *(int *)(v23 + 28), (uint64_t)v19, &qword_1002CC1A8);
      uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_1000E200C((uint64_t)v21, (uint64_t)v13, &qword_1002CC1A8);
      sub_1000E200C((uint64_t)v19, v24, &qword_1002CC1A8);
      char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v25((uint64_t)v13, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v19, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v21, &qword_1002CC1A8);
        if (v25(v24, 1, v8) == 1)
        {
          sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
LABEL_14:
          uint64_t v29 = v40;
          uint64_t v30 = (char *)a1 + *(int *)(v40 + 24);
          uint64_t v31 = v45;
          uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v33 = v43;
          uint64_t v34 = v41;
          v32(v43, v30, v41);
          uint64_t v35 = (char *)a2 + *(int *)(v29 + 24);
          uint64_t v36 = v44;
          v32(v44, v35, v34);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
          v37(v36, v34);
          v37(v33, v34);
          return v22 & 1;
        }
      }
      else
      {
        uint64_t v26 = v46;
        sub_1000E200C((uint64_t)v13, v46, &qword_1002CC1A8);
        if (v25(v24, 1, v8) != 1)
        {
          uint64_t v27 = v42;
          sub_10012BB08(v24, v42, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          char v28 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v26, v27);
          sub_10012BBD8(v27, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          sub_1000E27E8((uint64_t)v19, &qword_1002CC1A8);
          sub_1000E27E8((uint64_t)v21, &qword_1002CC1A8);
          sub_10012BBD8(v26, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
          if (v28) {
            goto LABEL_14;
          }
LABEL_15:
          char v22 = 0;
          return v22 & 1;
        }
        sub_1000E27E8((uint64_t)v19, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v21, &qword_1002CC1A8);
        sub_10012BBD8(v26, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      }
      sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
      goto LABEL_15;
    }
  }
  return v22 & 1;
}

uint64_t _s22CloudKitImplementation34Goldilocks_CheckDuplicatesResponseV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v41 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v42 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_CheckDuplicatesResponse(0);
    sub_1000E200C((uint64_t)&v47[*(int *)(v26 + 28)], (uint64_t)v22, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v48 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CC1A8);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CC1A8);
    char v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
LABEL_11:
        uint64_t v31 = v47;
        uint64_t v32 = v48;
        if (sub_100122898(*((void *)v47 + 2), v48[2]))
        {
          uint64_t v33 = v45;
          uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v35 = v42;
          uint64_t v36 = v43;
          v34(v43, &v31[*(int *)(v26 + 24)], v42);
          uint64_t v37 = (char *)v32 + *(int *)(v26 + 24);
          uint64_t v38 = v44;
          v34(v44, v37, v35);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
          v39(v38, v35);
          v39(v36, v35);
          return v25 & 1;
        }
LABEL_13:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CC1A8);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v46;
        sub_10012BB08(v27, v46, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v30 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v17, v29);
        sub_10012BBD8(v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
        if ((v30 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
    goto LABEL_13;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation33Goldilocks_CheckDuplicatesRequestV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v43 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v44 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_CheckDuplicatesRequest(0);
    sub_1000E200C((uint64_t)&v49[*(int *)(v26 + 28)], (uint64_t)v22, &qword_1002CD540);
    sub_1000E200C((uint64_t)v50 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CD540);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CD540);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CD540);
    char v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
        uint64_t v29 = v44;
LABEL_7:
        char v30 = v49;
        uint64_t v31 = v50;
        if (sub_100123430(*((void **)v49 + 2), (void *)v50[2]))
        {
          uint64_t v32 = v47;
          uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
          uint64_t v34 = v45;
          v33(v45, &v30[*(int *)(v26 + 24)], v29);
          uint64_t v35 = (char *)v31 + *(int *)(v26 + 24);
          uint64_t v36 = v46;
          v33(v46, v35, v29);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
          v37(v36, v29);
          v37(v34, v29);
          return v25 & 1;
        }
LABEL_13:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CD540);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v41 = v48;
        sub_10012BB08(v27, (uint64_t)v48, type metadata accessor for Goldilocks_ZoneID);
        if (*v17 == *v41 && v17[1] == v41[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v17[2] == v41[2] && v17[3] == v41[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          uint64_t v29 = v44;
          char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_10012BBD8((uint64_t)v41, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
          sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
          if ((v42 & 1) == 0) {
            goto LABEL_13;
          }
          goto LABEL_7;
        }
        sub_10012BBD8((uint64_t)v41, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
        sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v39 = (uint64_t)v13;
        uint64_t v38 = &qword_1002CD540;
LABEL_12:
        sub_1000E27E8(v39, v38);
        goto LABEL_13;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    }
    uint64_t v38 = &qword_1002CD300;
    uint64_t v39 = (uint64_t)v13;
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation32Goldilocks_ExitMoveBatchResponseV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v41 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  if (v23 != *a2 || v24 != a2[1])
  {
    char v25 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v25 & 1;
    }
  }
  uint64_t v42 = v4;
  uint64_t v26 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  sub_1000E200C((uint64_t)&v47[*(int *)(v26 + 40)], (uint64_t)v22, &qword_1002CC1A8);
  sub_1000E200C((uint64_t)v48 + *(int *)(v26 + 40), (uint64_t)v20, &qword_1002CC1A8);
  uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CC1A8);
  sub_1000E200C((uint64_t)v20, v27, &qword_1002CC1A8);
  char v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v28((uint64_t)v13, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
    sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
    if (v28(v27, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
      goto LABEL_11;
    }
LABEL_9:
    sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
    char v25 = 0;
    return v25 & 1;
  }
  sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CC1A8);
  if (v28(v27, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
    sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
    sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    goto LABEL_9;
  }
  uint64_t v29 = v46;
  sub_10012BB08(v27, v46, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  char v30 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v17, v29);
  sub_10012BBD8(v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
  sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
  sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
  if ((v30 & 1) == 0)
  {
LABEL_17:
    char v25 = 0;
    return v25 & 1;
  }
LABEL_11:
  if (*((void *)v47 + 2) != v48[2]) {
    goto LABEL_17;
  }
  uint64_t v31 = v42;
  if (*((void *)v47 + 3) == v48[3] && *((void *)v47 + 4) == v48[4]
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v32 = v47;
    uint64_t v33 = v48;
    if ((sub_100123430(*((void **)v47 + 5), (void *)v48[5]) & 1) != 0 && v32[48] == *((unsigned char *)v33 + 48))
    {
      uint64_t v35 = v45;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      uint64_t v37 = v43;
      v36(v43, &v32[*(int *)(v26 + 36)], v31);
      uint64_t v38 = (char *)v33 + *(int *)(v26 + 36);
      uint64_t v39 = v44;
      v36(v44, v38, v31);
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      v40(v39, v31);
      v40(v37, v31);
      return v25 & 1;
    }
    goto LABEL_17;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation32Goldilocks_ParticipantExitResultV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v62 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v58 - v7;
  uint64_t v70 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v67 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  v60 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v66);
  uint64_t v71 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000D0514(&qword_1002CD540);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v65 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v68 = (uint64_t)&v58 - v14;
  __chkstk_darwin(v13);
  uint64_t v69 = (uint64_t)&v58 - v15;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v20);
  char v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v58 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v58 - v30;
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *((void *)a1 + 1);
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  if (v32 == *(void *)a2 && v33 == *((void *)a2 + 1)
    || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v35 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
    sub_1000E200C((uint64_t)&v72[*(int *)(v35 + 24)], (uint64_t)v31, &qword_1002CC1A8);
    uint64_t v59 = v35;
    sub_1000E200C((uint64_t)&v73[*(int *)(v35 + 24)], (uint64_t)v29, &qword_1002CC1A8);
    uint64_t v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_1000E200C((uint64_t)v31, (uint64_t)v22, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v29, v36, &qword_1002CC1A8);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v37((uint64_t)v22, 1, v16) == 1)
    {
      sub_1000E27E8((uint64_t)v29, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v31, &qword_1002CC1A8);
      if (v37(v36, 1, v16) == 1)
      {
        sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
LABEL_11:
        uint64_t v41 = v59;
        uint64_t v42 = v69;
        sub_1000E200C((uint64_t)&v72[*(int *)(v59 + 28)], v69, &qword_1002CD540);
        uint64_t v43 = v68;
        sub_1000E200C((uint64_t)&v73[*(int *)(v41 + 28)], v68, &qword_1002CD540);
        uint64_t v44 = v71;
        uint64_t v45 = v71 + *(int *)(v66 + 48);
        sub_1000E200C(v42, v71, &qword_1002CD540);
        sub_1000E200C(v43, v45, &qword_1002CD540);
        uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
        uint64_t v47 = v70;
        if (v46(v44, 1, v70) == 1)
        {
          sub_1000E27E8(v43, &qword_1002CD540);
          sub_1000E27E8(v42, &qword_1002CD540);
          if (v46(v45, 1, v47) == 1)
          {
            sub_1000E27E8(v44, &qword_1002CD540);
LABEL_14:
            uint64_t v49 = v63;
            uint64_t v48 = v64;
            uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
            uint64_t v51 = v61;
            v50(v61, &v72[*(int *)(v41 + 20)], v64);
            unint64_t v52 = v62;
            v50(v62, &v73[*(int *)(v41 + 20)], v48);
            sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v53 = *(void (**)(char *, uint64_t))(v49 + 8);
            v53(v52, v48);
            v53(v51, v48);
            return v34 & 1;
          }
          goto LABEL_17;
        }
        char v54 = v65;
        sub_1000E200C(v44, (uint64_t)v65, &qword_1002CD540);
        if (v46(v45, 1, v47) == 1)
        {
          sub_1000E27E8(v43, &qword_1002CD540);
          sub_1000E27E8(v42, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v54, type metadata accessor for Goldilocks_ZoneID);
LABEL_17:
          uint64_t v38 = &qword_1002CD300;
          uint64_t v39 = v44;
          goto LABEL_18;
        }
        uint64_t v56 = v60;
        sub_10012BB08(v45, (uint64_t)v60, type metadata accessor for Goldilocks_ZoneID);
        if ((*v54 != *v56 || v54[1] != v56[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (v54[2] != v56[2] || v54[3] != v56[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          sub_10012BBD8((uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8(v43, &qword_1002CD540);
          sub_1000E27E8(v42, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v54, type metadata accessor for Goldilocks_ZoneID);
          uint64_t v39 = v44;
          uint64_t v38 = &qword_1002CD540;
          goto LABEL_18;
        }
        sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_10012BBD8((uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8(v43, &qword_1002CD540);
        sub_1000E27E8(v42, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v54, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8(v44, &qword_1002CD540);
        if (v57) {
          goto LABEL_14;
        }
LABEL_19:
        char v34 = 0;
        return v34 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v22, (uint64_t)v26, &qword_1002CC1A8);
      if (v37(v36, 1, v16) != 1)
      {
        sub_10012BB08(v36, (uint64_t)v19, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v40 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v26, (uint64_t)v19);
        sub_10012BBD8((uint64_t)v19, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v29, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v31, &qword_1002CC1A8);
        sub_10012BBD8((uint64_t)v26, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
        if ((v40 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v29, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v31, &qword_1002CC1A8);
      sub_10012BBD8((uint64_t)v26, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    uint64_t v38 = &qword_1002CD310;
    uint64_t v39 = (uint64_t)v22;
LABEL_18:
    sub_1000E27E8(v39, v38);
    goto LABEL_19;
  }
  return v34 & 1;
}

uint64_t _s22CloudKitImplementation31Goldilocks_InitiateExitResponseV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v41 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v42 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_InitiateExitResponse(0);
    sub_1000E200C((uint64_t)&v47[*(int *)(v26 + 28)], (uint64_t)v22, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v48 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CC1A8);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CC1A8);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
LABEL_11:
        uint64_t v31 = v47;
        uint64_t v32 = v48;
        if (sub_100123A58(*((void *)v47 + 2), v48[2], type metadata accessor for Goldilocks_ParticipantExitResult, type metadata accessor for Goldilocks_ParticipantExitResult, _s22CloudKitImplementation32Goldilocks_ParticipantExitResultV2eeoiySbAC_ACtFZ_0, type metadata accessor for Goldilocks_ParticipantExitResult))
        {
          uint64_t v33 = v45;
          char v34 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v35 = v42;
          uint64_t v36 = v43;
          v34(v43, &v31[*(int *)(v26 + 24)], v42);
          uint64_t v37 = (char *)v32 + *(int *)(v26 + 24);
          uint64_t v38 = v44;
          v34(v44, v37, v35);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
          v39(v38, v35);
          v39(v36, v35);
          return v25 & 1;
        }
LABEL_13:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CC1A8);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v46;
        sub_10012BB08(v27, v46, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v30 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v17, v29);
        sub_10012BBD8(v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
        if ((v30 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
    goto LABEL_13;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation31Goldilocks_ExitMoveBatchRequestV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v42 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v42 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v43 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
    sub_1000E200C((uint64_t)&v48[*(int *)(v26 + 28)], (uint64_t)v22, &qword_1002CD540);
    sub_1000E200C((uint64_t)v49 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CD540);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CD540);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CD540);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
        uint64_t v29 = v43;
LABEL_7:
        char v30 = v49;
        if (*((_DWORD *)v48 + 4) == *((_DWORD *)v49 + 4))
        {
          uint64_t v31 = v46;
          uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
          uint64_t v33 = v44;
          v32(v44, &v48[*(int *)(v26 + 24)], v29);
          char v34 = (char *)v30 + *(int *)(v26 + 24);
          uint64_t v35 = v45;
          v32(v45, v34, v29);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
          v36(v35, v29);
          v36(v33, v29);
          return v25 & 1;
        }
LABEL_13:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CD540);
      if (v28(v27, 1, v8) != 1)
      {
        char v40 = v47;
        sub_10012BB08(v27, (uint64_t)v47, type metadata accessor for Goldilocks_ZoneID);
        if (*v17 == *v40 && v17[1] == v40[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v17[2] == v40[2] && v17[3] == v40[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          uint64_t v29 = v43;
          char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_10012BBD8((uint64_t)v40, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
          sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
          if ((v41 & 1) == 0) {
            goto LABEL_13;
          }
          goto LABEL_7;
        }
        sub_10012BBD8((uint64_t)v40, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
        sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v38 = (uint64_t)v13;
        uint64_t v37 = &qword_1002CD540;
LABEL_12:
        sub_1000E27E8(v38, v37);
        goto LABEL_13;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    }
    uint64_t v37 = &qword_1002CD300;
    uint64_t v38 = (uint64_t)v13;
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation30Goldilocks_InitiateExitRequestV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v52 = (char *)&v51 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v56 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v51 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  char v57 = a1;
  uint64_t v58 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v55 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
    sub_1000E200C((uint64_t)v57 + *(int *)(v26 + 52), (uint64_t)v22, &qword_1002CD540);
    sub_1000E200C((uint64_t)v58 + *(int *)(v26 + 52), (uint64_t)v20, &qword_1002CD540);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CD540);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CD540);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
        uint64_t v29 = v55;
        goto LABEL_20;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CD540);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v33 = v56;
        sub_10012BB08(v27, (uint64_t)v56, type metadata accessor for Goldilocks_ZoneID);
        if (*v17 == *v33 && v17[1] == v33[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v17[2] == v33[2] && v17[3] == v33[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          uint64_t v29 = v55;
          char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_10012BBD8((uint64_t)v33, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
          sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v13, &qword_1002CD540);
          if ((v34 & 1) == 0) {
            goto LABEL_11;
          }
LABEL_20:
          uint64_t v35 = v57;
          uint64_t v36 = v58;
          uint64_t v37 = v57[2];
          uint64_t v38 = v58[2];
          if (*((unsigned char *)v58 + 24) == 1)
          {
            if (v38)
            {
              if (v38 == 1)
              {
                if (v37 != 1) {
                  goto LABEL_11;
                }
              }
              else if (v37 != 2)
              {
                goto LABEL_11;
              }
            }
            else if (v37)
            {
              goto LABEL_11;
            }
          }
          else if (v37 != v38)
          {
            goto LABEL_11;
          }
          uint64_t v39 = v57[4];
          uint64_t v40 = v58[4];
          if (*((unsigned char *)v58 + 40) == 1)
          {
            if (v40)
            {
              if (v40 == 1)
              {
                if (v39 == 1) {
                  goto LABEL_41;
                }
              }
              else if (v39 == 2)
              {
                goto LABEL_41;
              }
LABEL_11:
              char v25 = 0;
              return v25 & 1;
            }
            if (v39) {
              goto LABEL_11;
            }
          }
          else if (v39 != v40)
          {
            goto LABEL_11;
          }
LABEL_41:
          if ((sub_100123430((void *)v57[6], (void *)v58[6]) & 1) != 0
            && (sub_100123430((void *)v35[7], (void *)v36[7]) & 1) != 0
            && v35[8] == v36[8])
          {
            uint64_t v41 = v35[9];
            uint64_t v42 = v36[9];
            if (*((unsigned char *)v36 + 80) == 1)
            {
              switch(v42)
              {
                case 1:
                  if (v41 == 1) {
                    goto LABEL_49;
                  }
                  goto LABEL_11;
                case 2:
                  if (v41 == 2) {
                    goto LABEL_49;
                  }
                  goto LABEL_11;
                case 3:
                  if (v41 == 3) {
                    goto LABEL_49;
                  }
                  goto LABEL_11;
                case 4:
                  if (v41 == 4) {
                    goto LABEL_49;
                  }
                  goto LABEL_11;
                default:
                  if (!v41) {
                    goto LABEL_49;
                  }
                  goto LABEL_11;
              }
            }
            if (v41 == v42)
            {
LABEL_49:
              uint64_t v43 = v35[11];
              if (*((unsigned char *)v35 + 96) == 1) {
                uint64_t v43 = qword_100251488[v43];
              }
              uint64_t v44 = v36[11];
              if (*((unsigned char *)v36 + 96))
              {
                switch(v44)
                {
                  case 1:
                    if (v43 == -1) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 2:
                    if (v43 == 1000) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 3:
                    if (v43 == 1100) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 4:
                    if (v43 == 1200) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 5:
                    if (v43 == 1300) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 6:
                    if (v43 == 1400) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 7:
                    if (v43 == 2000) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  case 8:
                    if (v43 == 3000) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                  default:
                    if (!v43) {
                      goto LABEL_56;
                    }
                    goto LABEL_11;
                }
              }
              if (v43 == v44)
              {
LABEL_56:
                uint64_t v45 = v54;
                uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
                uint64_t v47 = v52;
                v46(v52, (char *)v35 + *(int *)(v26 + 48), v29);
                uint64_t v48 = (char *)v36 + *(int *)(v26 + 48);
                uint64_t v49 = v53;
                v46(v53, v48, v29);
                sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
                char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v50 = *(void (**)(char *, uint64_t))(v45 + 8);
                v50(v49, v29);
                v50(v47, v29);
                return v25 & 1;
              }
            }
          }
          goto LABEL_11;
        }
        sub_10012BBD8((uint64_t)v33, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
        sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v31 = (uint64_t)v13;
        char v30 = &qword_1002CD540;
LABEL_10:
        sub_1000E27E8(v31, v30);
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v22, &qword_1002CD540);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ZoneID);
    }
    char v30 = &qword_1002CD300;
    uint64_t v31 = (uint64_t)v13;
    goto LABEL_10;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation27Goldilocks_OperationControlV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  char v11 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v11 = 1;
    }
    if (v11) {
      goto LABEL_13;
    }
  }
  if (*(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)
    && *(unsigned __int8 *)(a1 + 11) == *(unsigned __int8 *)(a2 + 11)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14))
  {
    uint64_t v14 = type metadata accessor for Goldilocks_OperationControl(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1 + *(int *)(v14 + 44), v4);
    v15(v8, a2 + *(int *)(v14 + 44), v4);
    sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
    return v12 & 1;
  }
LABEL_13:
  char v12 = 0;
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_1000D0514(&qword_1002CD300);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CD540);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v44 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  if (v24 == *a2 && v25 == a2[1] || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t found = type metadata accessor for Goldilocks_FoundDuplicate(0);
    sub_1000E200C((uint64_t)v50 + *(int *)(found + 28), (uint64_t)v23, &qword_1002CD540);
    uint64_t v45 = found;
    sub_1000E200C((uint64_t)v51 + *(int *)(found + 28), (uint64_t)v21, &qword_1002CD540);
    uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
    sub_1000E200C((uint64_t)v23, (uint64_t)v14, &qword_1002CD540);
    sub_1000E200C((uint64_t)v21, v28, &qword_1002CD540);
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v29((uint64_t)v14, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
      if (v29(v28, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v14, &qword_1002CD540);
        goto LABEL_20;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v14, (uint64_t)v18, &qword_1002CD540);
      if (v29(v28, 1, v8) != 1)
      {
        sub_10012BB08(v28, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        if (*v18 == *v11 && v18[1] == v11[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
          && (v18[2] == v11[2] && v18[3] == v11[3] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_10012BBD8((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
          sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
          sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
          sub_1000E27E8((uint64_t)v14, &qword_1002CD540);
          if (v33)
          {
LABEL_20:
            uint64_t v34 = v50[2];
            uint64_t v35 = v51[2];
            if (*((unsigned char *)v50 + 24)) {
              uint64_t v34 = v34 != 0;
            }
            if (*((unsigned char *)v51 + 24) == 1)
            {
              if (v35)
              {
                if (v34 == 1) {
                  goto LABEL_30;
                }
              }
              else if (!v34)
              {
LABEL_30:
                uint64_t v36 = v45;
                uint64_t v37 = v46;
                uint64_t v38 = v49;
                uint64_t v39 = v48;
                uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
                v40(v46, (char *)v50 + *(int *)(v45 + 24), v49);
                uint64_t v41 = (char *)v51 + *(int *)(v36 + 24);
                uint64_t v42 = v47;
                v40(v47, v41, v38);
                sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
                char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
                v43(v42, v38);
                v43(v37, v38);
                return v26 & 1;
              }
            }
            else if (v34 == v35)
            {
              goto LABEL_30;
            }
          }
LABEL_11:
          char v26 = 0;
          return v26 & 1;
        }
        sub_10012BBD8((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
        sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
        sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        uint64_t v31 = (uint64_t)v14;
        char v30 = &qword_1002CD540;
LABEL_10:
        sub_1000E27E8(v31, v30);
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v21, &qword_1002CD540);
      sub_1000E27E8((uint64_t)v23, &qword_1002CD540);
      sub_10012BBD8((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }
    char v30 = &qword_1002CD300;
    uint64_t v31 = (uint64_t)v14;
    goto LABEL_10;
  }
  return v26 & 1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_DuplicateStateV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514(&qword_1002CD310);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v41 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  if (v23 == *a2 && v24 == a2[1] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v42 = v4;
    uint64_t v26 = type metadata accessor for Goldilocks_DuplicateState(0);
    sub_1000E200C((uint64_t)&v47[*(int *)(v26 + 28)], (uint64_t)v22, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v48 + *(int *)(v26 + 28), (uint64_t)v20, &qword_1002CC1A8);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000E200C((uint64_t)v22, (uint64_t)v13, &qword_1002CC1A8);
    sub_1000E200C((uint64_t)v20, v27, &qword_1002CC1A8);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      if (v28(v27, 1, v8) == 1)
      {
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
LABEL_11:
        uint64_t v31 = v47;
        uint64_t v32 = v48;
        if (sub_100123A58(*((void *)v47 + 2), v48[2], type metadata accessor for Goldilocks_FoundDuplicate, type metadata accessor for Goldilocks_FoundDuplicate, (uint64_t (*)(char *, char *))_s22CloudKitImplementation25Goldilocks_FoundDuplicateV2eeoiySbAC_ACtFZ_0, type metadata accessor for Goldilocks_FoundDuplicate))
        {
          uint64_t v33 = v45;
          uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v35 = v42;
          uint64_t v36 = v43;
          v34(v43, &v31[*(int *)(v26 + 24)], v42);
          uint64_t v37 = (char *)v32 + *(int *)(v26 + 24);
          uint64_t v38 = v44;
          v34(v44, v37, v35);
          sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
          v39(v38, v35);
          v39(v36, v35);
          return v25 & 1;
        }
LABEL_13:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      sub_1000E200C((uint64_t)v13, (uint64_t)v17, &qword_1002CC1A8);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v46;
        sub_10012BB08(v27, v46, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        char v30 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v17, v29);
        sub_10012BBD8(v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
        sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
        sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
        if ((v30 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
      sub_1000E27E8((uint64_t)v20, &qword_1002CC1A8);
      sub_1000E27E8((uint64_t)v22, &qword_1002CC1A8);
      sub_10012BBD8((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    sub_1000E27E8((uint64_t)v13, &qword_1002CD310);
    goto LABEL_13;
  }
  return v25 & 1;
}

uint64_t _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = *(void *)(a2 + 32);
      char v15 = *(unsigned char *)(a2 + 40);
      uint64_t v16 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      if (v16 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v14, v15)) {
        goto LABEL_17;
      }
      uint64_t v17 = *(void *)(a1 + 48);
      if (*(unsigned char *)(a1 + 56) == 1) {
        uint64_t v17 = qword_1002514D0[v17];
      }
      uint64_t v18 = *(void *)(a2 + 48);
      if (*(unsigned char *)(a2 + 56))
      {
        switch(v18)
        {
          case 1:
            if (v17 == 1) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 2:
            if (v17 == 2) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 3:
            if (v17 == 3) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 4:
            if (v17 == 4) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 5:
            if (v17 == 6) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 6:
            if (v17 == 7) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 7:
            if (v17 == 8) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 8:
            if (v17 == 9) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 9:
            if (v17 == 200001) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 10:
            if (v17 == 200002) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 11:
            if (v17 == 200003) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 12:
            if (v17 == 200004) {
              goto LABEL_19;
            }
            goto LABEL_17;
          case 13:
            if (v17 == 200005) {
              goto LABEL_19;
            }
            goto LABEL_17;
          default:
            if (v17) {
              goto LABEL_17;
            }
            goto LABEL_19;
        }
      }
      if (v17 == v18)
      {
LABEL_19:
        uint64_t v19 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
        uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v20(v10, a1 + *(int *)(v19 + 32), v4);
        v20(v8, a2 + *(int *)(v19 + 32), v4);
        sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
        v21(v8, v4);
        v21(v10, v4);
      }
      else
      {
LABEL_17:
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000D0514(&qword_1002CD308);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CC1B8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v50 = (uint64_t)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - v21;
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v23 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v23 & 1;
    }
  }
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v25)
    {
      case 1:
        if (v24 != 1) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 2:
        if (v24 != 2) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 3:
        if (v24 != 3) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 4:
        if (v24 != 4) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 5:
        if (v24 != 5) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 6:
        if (v24 != 6) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 7:
        if (v24 != 7) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 8:
        if (v24 != 8) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 9:
        if (v24 != 9) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 10:
        if (v24 != 10) {
          goto LABEL_49;
        }
        goto LABEL_9;
      case 11:
        if (v24 != 11) {
          goto LABEL_49;
        }
        goto LABEL_9;
      default:
        if (!v24) {
          goto LABEL_9;
        }
        goto LABEL_49;
    }
  }
  if (v24 != v25)
  {
LABEL_49:
    char v23 = 0;
    return v23 & 1;
  }
LABEL_9:
  uint64_t v45 = v11;
  uint64_t v26 = v9;
  uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  sub_1000E200C(a1 + *(int *)(v27 + 48), (uint64_t)v22, &qword_1002CC1B8);
  uint64_t v44 = v27;
  sub_1000E200C(a2 + *(int *)(v27 + 48), (uint64_t)v20, &qword_1002CC1B8);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_1000E200C((uint64_t)v22, (uint64_t)v14, &qword_1002CC1B8);
  sub_1000E200C((uint64_t)v20, v28, &qword_1002CC1B8);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v29((uint64_t)v14, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v20, &qword_1002CC1B8);
    sub_1000E27E8((uint64_t)v22, &qword_1002CC1B8);
    if (v29(v28, 1, v8) == 1)
    {
      sub_1000E27E8((uint64_t)v14, &qword_1002CC1B8);
      goto LABEL_16;
    }
LABEL_14:
    sub_1000E27E8((uint64_t)v14, &qword_1002CD308);
    goto LABEL_49;
  }
  uint64_t v30 = v50;
  sub_1000E200C((uint64_t)v14, v50, &qword_1002CC1B8);
  if (v29(v28, 1, v8) == 1)
  {
    sub_1000E27E8((uint64_t)v20, &qword_1002CC1B8);
    sub_1000E27E8((uint64_t)v22, &qword_1002CC1B8);
    sub_10012BBD8(v30, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_14;
  }
  uint64_t v31 = (uint64_t)v45;
  sub_10012BB08(v28, (uint64_t)v45, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  char v32 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(v30, v31);
  sub_10012BBD8(v31, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  sub_1000E27E8((uint64_t)v20, &qword_1002CC1B8);
  sub_1000E27E8((uint64_t)v22, &qword_1002CC1B8);
  sub_10012BBD8(v30, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  sub_1000E27E8((uint64_t)v14, &qword_1002CC1B8);
  if ((v32 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_16:
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
  {
    char v23 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v23 & 1;
    }
  }
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || (sub_1001247E4(*(void *)(a1 + 56), *(void *)(a2 + 56)) & 1) == 0)
  {
    goto LABEL_49;
  }
  if (*(void *)(a1 + 64) == *(void *)(a2 + 64) && *(void *)(a1 + 72) == *(void *)(a2 + 72)
    || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 80) == *(void *)(a2 + 80) && *(void *)(a1 + 88) == *(void *)(a2 + 88)
      || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v33 = v44;
      uint64_t v34 = a1 + *(int *)(v44 + 44);
      uint64_t v36 = v48;
      uint64_t v35 = v49;
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      uint64_t v38 = v46;
      v37(v46, v34, v49);
      uint64_t v39 = a2 + *(int *)(v33 + 44);
      uint64_t v40 = v47;
      v37(v47, v39, v35);
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
      v41(v40, v35);
      v41(v38, v35);
    }
  }
  return v23 & 1;
}

uint64_t _s22CloudKitImplementation17Goldilocks_ZoneIDV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(v14 + 24)], v4);
      v15(v8, &a2[*(int *)(v14 + 24)], v4);
      sub_10012BF20(&qword_1002CA288, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t sub_10012B9A4(uint64_t result)
{
  if (result <= 1199)
  {
    if (result > 999)
    {
      if (result == 1000)
      {
        return 2;
      }
      else if (result == 1100)
      {
        return 3;
      }
    }
    else if (result == -1)
    {
      return 1;
    }
  }
  else if (result <= 1399)
  {
    if (result == 1200)
    {
      return 4;
    }
    else if (result == 1300)
    {
      return 5;
    }
  }
  else
  {
    switch(result)
    {
      case 1400:
        return 6;
      case 2000:
        return 7;
      case 3000:
        return 8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Goldilocks_InitiateExitResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CC688);
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo.ResultError(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CD0D0);
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CD030);
}

uint64_t sub_10012BB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012BB70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012BBD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Goldilocks_ParticipantExitResult(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CC728);
}

uint64_t type metadata accessor for Goldilocks_CheckDuplicatesResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CC858);
}

uint64_t type metadata accessor for Goldilocks_DuplicateState(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CC8F0);
}

uint64_t type metadata accessor for Goldilocks_FoundDuplicate(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CC988);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCB50);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCBF8);
}

uint64_t type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCD30);
}

uint64_t type metadata accessor for Goldilocks_SilentMoverRampingRequest(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCDC0);
}

uint64_t type metadata accessor for Goldilocks_SilentMoverRampingResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, (uint64_t *)&unk_1002CCE50);
}

uint64_t type metadata accessor for Goldilocks_OperationControl(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCEF8);
}

unint64_t sub_10012BD8C(unint64_t result)
{
  uint64_t v1 = 5;
  uint64_t v2 = 4;
  if (result != 10) {
    uint64_t v2 = result;
  }
  if (result != 11) {
    uint64_t v1 = v2;
  }
  if (result >= 4) {
    return v1;
  }
  return result;
}

unint64_t sub_10012BDD0()
{
  unint64_t result = qword_1002CC1C0;
  if (!qword_1002CC1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC1C0);
  }
  return result;
}

unint64_t sub_10012BE24()
{
  unint64_t result = qword_1002CC1C8;
  if (!qword_1002CC1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC1C8);
  }
  return result;
}

unint64_t sub_10012BE78()
{
  unint64_t result = qword_1002CC1D0;
  if (!qword_1002CC1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC1D0);
  }
  return result;
}

unint64_t sub_10012BECC()
{
  unint64_t result = qword_1002CC1D8;
  if (!qword_1002CC1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC1D8);
  }
  return result;
}

uint64_t sub_10012BF20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10012BF68()
{
  unint64_t result = qword_1002CC230;
  if (!qword_1002CC230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC230);
  }
  return result;
}

uint64_t type metadata accessor for Goldilocks_ErrorInfo(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CCFA0);
}

unint64_t sub_10012BFDC()
{
  unint64_t result = qword_1002CC2B0;
  if (!qword_1002CC2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC2B0);
  }
  return result;
}

unint64_t sub_10012C030()
{
  unint64_t result = qword_1002CC2C0;
  if (!qword_1002CC2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC2C0);
  }
  return result;
}

uint64_t type metadata accessor for Goldilocks_ExitStatusFeedbackResponse(uint64_t a1)
{
  return sub_1000CDD64(a1, qword_1002CD220);
}

unint64_t sub_10012C0A8()
{
  unint64_t result = qword_1002CC2D8;
  if (!qword_1002CC2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC2D8);
  }
  return result;
}

unint64_t sub_10012C100()
{
  unint64_t result = qword_1002CC2E0;
  if (!qword_1002CC2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC2E0);
  }
  return result;
}

unint64_t sub_10012C158()
{
  unint64_t result = qword_1002CC2E8;
  if (!qword_1002CC2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC2E8);
  }
  return result;
}

uint64_t sub_10012C1AC()
{
  return sub_1000CEC04(&qword_1002CC2F0, &qword_1002CC2F8);
}

unint64_t sub_10012C1D8()
{
  unint64_t result = qword_1002CC300;
  if (!qword_1002CC300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC300);
  }
  return result;
}

unint64_t sub_10012C230()
{
  unint64_t result = qword_1002CC308;
  if (!qword_1002CC308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC308);
  }
  return result;
}

unint64_t sub_10012C288()
{
  unint64_t result = qword_1002CC310;
  if (!qword_1002CC310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC310);
  }
  return result;
}

uint64_t sub_10012C2DC()
{
  return sub_1000CEC04(&qword_1002CC318, &qword_1002CC320);
}

unint64_t sub_10012C308()
{
  unint64_t result = qword_1002CC328;
  if (!qword_1002CC328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC328);
  }
  return result;
}

unint64_t sub_10012C360()
{
  unint64_t result = qword_1002CC330;
  if (!qword_1002CC330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC330);
  }
  return result;
}

unint64_t sub_10012C3B8()
{
  unint64_t result = qword_1002CC338;
  if (!qword_1002CC338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC338);
  }
  return result;
}

uint64_t sub_10012C40C()
{
  return sub_1000CEC04(&qword_1002CC340, &qword_1002CC348);
}

unint64_t sub_10012C438()
{
  unint64_t result = qword_1002CC350;
  if (!qword_1002CC350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC350);
  }
  return result;
}

unint64_t sub_10012C490()
{
  unint64_t result = qword_1002CC358;
  if (!qword_1002CC358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC358);
  }
  return result;
}

unint64_t sub_10012C4E8()
{
  unint64_t result = qword_1002CC360;
  if (!qword_1002CC360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC360);
  }
  return result;
}

uint64_t sub_10012C53C()
{
  return sub_1000CEC04(&qword_1002CC368, &qword_1002CC370);
}

unint64_t sub_10012C568()
{
  unint64_t result = qword_1002CC378;
  if (!qword_1002CC378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC378);
  }
  return result;
}

unint64_t sub_10012C5C0()
{
  unint64_t result = qword_1002CC380;
  if (!qword_1002CC380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC380);
  }
  return result;
}

unint64_t sub_10012C618()
{
  unint64_t result = qword_1002CC388;
  if (!qword_1002CC388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC388);
  }
  return result;
}

uint64_t sub_10012C66C()
{
  return sub_1000CEC04(&qword_1002CC390, &qword_1002CC398);
}

unint64_t sub_10012C698()
{
  unint64_t result = qword_1002CC3A0;
  if (!qword_1002CC3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3A0);
  }
  return result;
}

unint64_t sub_10012C6F0()
{
  unint64_t result = qword_1002CC3A8;
  if (!qword_1002CC3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3A8);
  }
  return result;
}

unint64_t sub_10012C748()
{
  unint64_t result = qword_1002CC3B0;
  if (!qword_1002CC3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3B0);
  }
  return result;
}

uint64_t sub_10012C79C()
{
  return sub_1000CEC04(&qword_1002CC3B8, &qword_1002CC3C0);
}

unint64_t sub_10012C7C8()
{
  unint64_t result = qword_1002CC3C8;
  if (!qword_1002CC3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3C8);
  }
  return result;
}

unint64_t sub_10012C820()
{
  unint64_t result = qword_1002CC3D0;
  if (!qword_1002CC3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3D0);
  }
  return result;
}

unint64_t sub_10012C878()
{
  unint64_t result = qword_1002CC3D8;
  if (!qword_1002CC3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002CC3D8);
  }
  return result;
}

uint64_t sub_10012C8CC()
{
  return sub_1000CEC04(&qword_1002CC3E0, &qword_1002CC3E8);
}

uint64_t sub_10012C8F4()
{
  return sub_10012BF20(&qword_1002CC3F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_10012C93C()
{
  return sub_10012BF20(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_10012C984()
{
  return sub_10012BF20(&qword_1002CC1E8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_10012C9CC()
{
  return sub_10012BF20(&qword_1002CC3F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_10012CA14()
{
  return sub_10012BF20(&qword_1002CC400, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_10012CA5C()
{
  return sub_10012BF20(&qword_1002CC408, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_10012CAA4()
{
  return sub_10012BF20(&qword_1002CC1F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_10012CAEC()
{
  return sub_10012BF20(&qword_1002CC410, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitResponse);
}

uint64_t sub_10012CB34()
{
  return sub_10012BF20(&qword_1002CC418, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_10012CB7C()
{
  return sub_10012BF20(&qword_1002CC1F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_10012CBC4()
{
  return sub_10012BF20(&qword_1002CC200, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_10012CC0C()
{
  return sub_10012BF20(&qword_1002CC420, (void (*)(uint64_t))type metadata accessor for Goldilocks_ParticipantExitResult);
}

uint64_t sub_10012CC54()
{
  return sub_10012BF20(&qword_1002CC428, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_10012CC9C()
{
  return sub_10012BF20(&qword_1002CBFA8, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_10012CCE4()
{
  return sub_10012BF20(&qword_1002CC208, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_10012CD2C()
{
  return sub_10012BF20(&qword_1002CC430, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesRequest);
}

uint64_t sub_10012CD74()
{
  return sub_10012BF20(&qword_1002CC438, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_10012CDBC()
{
  return sub_10012BF20(&qword_1002CC440, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_10012CE04()
{
  return sub_10012BF20(&qword_1002CC218, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_10012CE4C()
{
  return sub_10012BF20(&qword_1002CC448, (void (*)(uint64_t))type metadata accessor for Goldilocks_CheckDuplicatesResponse);
}

uint64_t sub_10012CE94()
{
  return sub_10012BF20(&qword_1002CC450, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t sub_10012CEDC()
{
  return sub_10012BF20(&qword_1002CC210, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t sub_10012CF24()
{
  return sub_10012BF20(&qword_1002CC228, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t sub_10012CF6C()
{
  return sub_10012BF20(&qword_1002CC458, (void (*)(uint64_t))type metadata accessor for Goldilocks_DuplicateState);
}

uint64_t sub_10012CFB4()
{
  return sub_10012BF20(&qword_1002CC460, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10012CFFC()
{
  return sub_10012BF20(&qword_1002CC220, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10012D044()
{
  return sub_10012BF20(&qword_1002CC238, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10012D08C()
{
  return sub_10012BF20(&qword_1002CC468, (void (*)(uint64_t))type metadata accessor for Goldilocks_FoundDuplicate);
}

uint64_t sub_10012D0D4()
{
  return sub_10012BF20(&qword_1002CC470, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
}

uint64_t sub_10012D11C()
{
  return sub_10012BF20(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
}

uint64_t sub_10012D164()
{
  return sub_10012BF20(&qword_1002CC240, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
}

uint64_t sub_10012D1AC()
{
  return sub_10012BF20(&qword_1002CC478, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
}

uint64_t sub_10012D1F4()
{
  return sub_10012BF20(&qword_1002CC480, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10012D23C()
{
  return sub_10012BF20(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10012D284()
{
  return sub_10012BF20(&qword_1002CC248, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10012D2CC()
{
  return sub_10012BF20(&qword_1002CC488, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
}

uint64_t sub_10012D314()
{
  return sub_10012BF20(&qword_1002CC490, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10012D35C()
{
  return sub_10012BF20(&qword_1002CC498, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10012D3A4()
{
  return sub_10012BF20(&qword_1002CC250, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10012D3EC()
{
  return sub_10012BF20(&qword_1002CC4A0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchResponse);
}

uint64_t sub_10012D434()
{
  return sub_10012BF20(&qword_1002CC4A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10012D47C()
{
  return sub_10012BF20(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10012D4C4()
{
  return sub_10012BF20(&qword_1002CC258, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10012D50C()
{
  return sub_10012BF20(&qword_1002CC4B0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
}

uint64_t sub_10012D554()
{
  return sub_10012BF20(&qword_1002CC4B8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10012D59C()
{
  return sub_10012BF20(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10012D5E4()
{
  return sub_10012BF20(&qword_1002CC268, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10012D62C()
{
  return sub_10012BF20(&qword_1002CC4C0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
}

uint64_t sub_10012D674()
{
  return sub_10012BF20(&qword_1002CC4C8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10012D6BC()
{
  return sub_10012BF20(&qword_1002CC4D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10012D704()
{
  return sub_10012BF20(&qword_1002CC270, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10012D74C()
{
  return sub_10012BF20(&qword_1002CC4D8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
}

uint64_t sub_10012D794()
{
  return sub_10012BF20(&qword_1002CC4E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10012D7DC()
{
  return sub_10012BF20(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10012D824()
{
  return sub_10012BF20(&qword_1002CC278, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10012D86C()
{
  return sub_10012BF20(&qword_1002CC4E8, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
}

uint64_t sub_10012D8B4()
{
  return sub_10012BF20(&qword_1002CC4F0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_10012D8FC()
{
  return sub_10012BF20(&qword_1002CC4F8, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_10012D944()
{
  return sub_10012BF20(&qword_1002CC288, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_10012D98C()
{
  return sub_10012BF20(&qword_1002CC500, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingResponse);
}

uint64_t sub_10012D9D4()
{
  return sub_10012BF20(&qword_1002CC508, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_10012DA1C()
{
  return sub_10012BF20(&qword_1002CC280, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_10012DA64()
{
  return sub_10012BF20(&qword_1002CC290, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_10012DAAC()
{
  return sub_10012BF20(&qword_1002CC510, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
}

uint64_t sub_10012DAF4()
{
  return sub_10012BF20(&qword_1002CC518, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
}

uint64_t sub_10012DB3C()
{
  return sub_10012BF20(&qword_1002CC520, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
}

uint64_t sub_10012DB84()
{
  return sub_10012BF20(&qword_1002CC298, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
}

uint64_t sub_10012DBCC()
{
  return sub_10012BF20(&qword_1002CC528, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo);
}

uint64_t sub_10012DC14()
{
  return sub_10012BF20(&qword_1002CC530, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_10012DC5C()
{
  return sub_10012BF20(&qword_1002CC2A8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_10012DCA4()
{
  return sub_10012BF20(&qword_1002CC2A0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_10012DCEC()
{
  return sub_10012BF20(&qword_1002CC538, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
}

uint64_t sub_10012DD34()
{
  return sub_10012BF20(&qword_1002CC540, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_10012DD7C()
{
  return sub_10012BF20(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_10012DDC4()
{
  return sub_10012BF20(&qword_1002CC2B8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_10012DE0C()
{
  return sub_10012BF20(&qword_1002CC548, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
}

uint64_t sub_10012DE54()
{
  return sub_10012BF20(&qword_1002CC550, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_10012DE9C()
{
  return sub_10012BF20(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_10012DEE4()
{
  return sub_10012BF20(&qword_1002CC2C8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_10012DF2C()
{
  return sub_10012BF20(&qword_1002CC558, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
}

uint64_t sub_10012DF74()
{
  return sub_10012BF20(&qword_1002CC560, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_10012DFBC()
{
  return sub_10012BF20(&qword_1002CC568, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_10012E004()
{
  return sub_10012BF20(&qword_1002CC2D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
}

uint64_t sub_10012E04C()
{
  return sub_10012BF20(&qword_1002CC570, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackResponse);
}

ValueMetadata *type metadata accessor for Goldilocks_ExitStage()
{
  return &type metadata for Goldilocks_ExitStage;
}

ValueMetadata *type metadata accessor for Goldilocks_ExitSource()
{
  return &type metadata for Goldilocks_ExitSource;
}

ValueMetadata *type metadata accessor for Goldilocks_ExitType()
{
  return &type metadata for Goldilocks_ExitType;
}

ValueMetadata *type metadata accessor for Goldilocks_RecordRetentionPolicy()
{
  return &type metadata for Goldilocks_RecordRetentionPolicy;
}

ValueMetadata *type metadata accessor for Goldilocks_DuplicateType()
{
  return &type metadata for Goldilocks_DuplicateType;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[6];
    uint64_t v9 = a2[7];
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    *(void *)(a1 + 88) = a2[11];
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = a1 + v11;
    uint64_t v28 = (uint64_t)a2 + v11;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v12, v28, v13);
    uint64_t v15 = *(int *)(a3 + 52);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_1000D0514(&qword_1002CD540);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v22;
      uint64_t v23 = v17[3];
      v16[2] = v17[2];
      v16[3] = v23;
      uint64_t v24 = *(int *)(v18 + 24);
      uint64_t v25 = (char *)v16 + v24;
      uint64_t v26 = (char *)v17 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14((uint64_t)v25, (uint64_t)v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(a3 + 52);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_1000D0514(&qword_1002CD540);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v20;
    uint64_t v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    uint64_t v22 = *(int *)(v17 + 24);
    uint64_t v23 = (char *)v15 + v22;
    uint64_t v24 = (char *)v16 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13((uint64_t)v23, (uint64_t)v24, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithCopy for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  LOBYTE(v6) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v12 - 8);
  uint64_t v28 = v12;
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v27 + 24);
  ((void (*)(uint64_t, uint64_t))v13)(v10, v11);
  uint64_t v14 = *(int *)(a3 + 52);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v11) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v11)
  {
    if (!v20)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = *((void *)v16 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v13(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v28);
      return a1;
    }
    sub_10012BBD8((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v25 = sub_1000D0514(&qword_1002CD540);
    memcpy(v15, v16, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  *((void *)v15 + 2) = *((void *)v16 + 2);
  *((void *)v15 + 3) = *((void *)v16 + 3);
  uint64_t v21 = *(int *)(v17 + 24);
  uint64_t v22 = &v15[v21];
  uint64_t v23 = &v16[v21];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v22, v23, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 52);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_1000D0514(&qword_1002CD540);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    long long v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithTake for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  ((void (*)(uint64_t, uint64_t))v12)(v9, v10);
  uint64_t v13 = *(int *)(a3 + 52);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *((void *)v15 + 3);
      *((void *)v14 + 2) = *((void *)v15 + 2);
      *((void *)v14 + 3) = v24;
      swift_bridgeObjectRelease();
      v12(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v26);
      return a1;
    }
    sub_10012BBD8((uint64_t)v14, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_1000D0514(&qword_1002CD540);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v14[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012EDB8);
}

uint64_t sub_10012EDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CD540);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 52);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_InitiateExitRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012EEFC);
}

uint64_t sub_10012EEFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CD540);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 52);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10012F02C()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CC5E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for Goldilocks_InitiateExitResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012F174);
}

uint64_t sub_10012F174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CC1A8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_InitiateExitResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012F194);
}

uint64_t sub_10012F194(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CC1A8);
}

void sub_10012F1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10012F1CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ParticipantExitResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v52 = v17;
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
      uint64_t v54 = v11;
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      uint64_t v23 = v15[10];
      v14[9] = v15[9];
      v14[10] = v23;
      uint64_t v53 = v12;
      v14[11] = v15[11];
      uint64_t v24 = *(int *)(v16 + 44);
      uint64_t v49 = (char *)v15 + v24;
      uint64_t v50 = (char *)v14 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v50, v49, v11);
      uint64_t v25 = *(int *)(v16 + 48);
      uint64_t v26 = (void *)((char *)v14 + v25);
      uint64_t v27 = (void *)((char *)v15 + v25);
      uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v11 = v54;
      }
      else
      {
        uint64_t v31 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v31;
        uint64_t v32 = v27[3];
        v26[2] = v27[2];
        v26[3] = v32;
        v26[4] = v27[4];
        *((unsigned char *)v26 + 40) = *((unsigned char *)v27 + 40);
        v26[6] = v27[6];
        *((unsigned char *)v26 + 56) = *((unsigned char *)v27 + 56);
        uint64_t v33 = *(int *)(v28 + 32);
        uint64_t v51 = (char *)v26 + v33;
        uint64_t v34 = (char *)v27 + v33;
        swift_bridgeObjectRetain();
        uint64_t v12 = v53;
        swift_bridgeObjectRetain();
        uint64_t v35 = v34;
        uint64_t v11 = v54;
        v53(v51, v35, v54);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v14, 0, 1, v16);
    }
    uint64_t v36 = a3[7];
    uint64_t v37 = (uint64_t *)((char *)v4 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = sub_1000D0514(&qword_1002CD540);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v42 = v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v42;
      uint64_t v43 = v12;
      uint64_t v44 = v38[3];
      v37[2] = v38[2];
      v37[3] = v44;
      uint64_t v45 = *(int *)(v39 + 24);
      uint64_t v46 = (char *)v37 + v45;
      uint64_t v47 = (char *)v38 + v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43(v46, v47, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_ParticipantExitResult(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v6 + *(int *)(v7 + 44), v5);
    uint64_t v8 = v6 + *(int *)(v7 + 48);
    uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14(v8 + *(int *)(v9 + 32), v5);
    }
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v10 + *(int *)(v11 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
  }
  return result;
}

void *initializeWithCopy for Goldilocks_ParticipantExitResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v52 = v3;
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v19 = v14[5];
    v13[4] = v14[4];
    v13[5] = v19;
    *((_DWORD *)v13 + 12) = *((_DWORD *)v14 + 12);
    uint64_t v20 = v14[8];
    v13[7] = v14[7];
    v13[8] = v20;
    uint64_t v53 = v11;
    uint64_t v21 = v14[10];
    v13[9] = v14[9];
    v13[10] = v21;
    v13[11] = v14[11];
    uint64_t v22 = *(int *)(v15 + 44);
    uint64_t v50 = (char *)v13 + v22;
    uint64_t v48 = (char *)v14 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = v50;
    uint64_t v51 = v10;
    v11(v23, v48, v10);
    uint64_t v24 = *(int *)(v15 + 48);
    uint64_t v25 = (void *)((char *)v13 + v24);
    uint64_t v26 = (void *)((char *)v14 + v24);
    uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v10 = v51;
    }
    else
    {
      uint64_t v30 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v30;
      uint64_t v31 = v26[3];
      v25[2] = v26[2];
      v25[3] = v31;
      v25[4] = v26[4];
      *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
      v25[6] = v26[6];
      *((unsigned char *)v25 + 56) = *((unsigned char *)v26 + 56);
      uint64_t v32 = *(int *)(v27 + 32);
      uint64_t v49 = (char *)v25 + v32;
      uint64_t v33 = (char *)v26 + v32;
      swift_bridgeObjectRetain();
      uint64_t v11 = v53;
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
      uint64_t v10 = v51;
      v53(v49, v34, v51);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    uint64_t v3 = v52;
  }
  uint64_t v35 = *(int *)(v3 + 28);
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v38 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = sub_1000D0514(&qword_1002CD540);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v41;
    uint64_t v42 = v11;
    uint64_t v43 = v37[3];
    v36[2] = v37[2];
    v36[3] = v43;
    uint64_t v44 = *(int *)(v38 + 24);
    uint64_t v45 = (char *)v36 + v44;
    uint64_t v46 = (char *)v37 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v45, v46, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

void *assignWithCopy for Goldilocks_ParticipantExitResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v71 + 24);
  v70(v7, v8, v9);
  uint64_t v72 = a3;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t)v5 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v31 = *((void *)v12 + 2);
      *(unsigned char *)(v11 + 24) = v12[24];
      *(void *)(v11 + 16) = v31;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      *(void *)(v11 + 40) = *((void *)v12 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
      *(void *)(v11 + 56) = *((void *)v12 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 64) = *((void *)v12 + 8);
      *(void *)(v11 + 72) = *((void *)v12 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 80) = *((void *)v12 + 10);
      *(void *)(v11 + 88) = *((void *)v12 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v70((char *)(v11 + *(int *)(v13 + 44)), &v12[*(int *)(v13 + 44)], v9);
      uint64_t v32 = *(int *)(v13 + 48);
      uint64_t v33 = v11 + v32;
      uint64_t v34 = &v12[v32];
      uint64_t v35 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, v35);
      int v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = *((void *)v34 + 1);
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          *(void *)(v33 + 24) = *((void *)v34 + 3);
          uint64_t v40 = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          *(void *)(v33 + 32) = v40;
          uint64_t v41 = *((void *)v34 + 6);
          *(unsigned char *)(v33 + 56) = v34[56];
          *(void *)(v33 + 48) = v41;
          uint64_t v42 = *(int *)(v35 + 32);
          uint64_t v43 = v33 + v42;
          uint64_t v44 = &v34[v42];
          uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v69(v43, v44, v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v39)
        {
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = *((void *)v34 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          *(void *)(v33 + 24) = *((void *)v34 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v63 = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          *(void *)(v33 + 32) = v63;
          uint64_t v64 = *((void *)v34 + 6);
          *(unsigned char *)(v33 + 56) = v34[56];
          *(void *)(v33 + 48) = v64;
          v70((char *)(v33 + *(int *)(v35 + 32)), &v34[*(int *)(v35 + 32)], v9);
          goto LABEL_14;
        }
        sub_10012BBD8(v33, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v28 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v29 = (void *)v33;
      uint64_t v30 = v34;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    sub_10012BBD8(v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v29 = (void *)v11;
    uint64_t v30 = v12;
    goto LABEL_8;
  }
  if (v17) {
    goto LABEL_7;
  }
  uint64_t v68 = v5;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *((void *)v12 + 1);
  uint64_t v18 = *((void *)v12 + 2);
  *(unsigned char *)(v11 + 24) = v12[24];
  *(void *)(v11 + 16) = v18;
  *(void *)(v11 + 32) = *((void *)v12 + 4);
  *(void *)(v11 + 40) = *((void *)v12 + 5);
  *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
  *(void *)(v11 + 56) = *((void *)v12 + 7);
  *(void *)(v11 + 64) = *((void *)v12 + 8);
  *(void *)(v11 + 72) = *((void *)v12 + 9);
  *(void *)(v11 + 80) = *((void *)v12 + 10);
  *(void *)(v11 + 88) = *((void *)v12 + 11);
  uint64_t v19 = *(int *)(v13 + 44);
  v65 = &v12[v19];
  uint64_t v67 = v11 + v19;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v9;
  swift_bridgeObjectRetain();
  v20(v67, v65, v9);
  uint64_t v22 = *(int *)(v13 + 48);
  uint64_t v23 = (void *)(v11 + v22);
  uint64_t v24 = &v12[v22];
  uint64_t v25 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *uint64_t v23 = *(void *)v24;
    v23[1] = *((void *)v24 + 1);
    void v23[2] = *((void *)v24 + 2);
    v23[3] = *((void *)v24 + 3);
    uint64_t v45 = *((void *)v24 + 4);
    *((unsigned char *)v23 + 40) = v24[40];
    v23[4] = v45;
    uint64_t v46 = *((void *)v24 + 6);
    *((unsigned char *)v23 + 56) = v24[56];
    v23[6] = v46;
    uint64_t v47 = *(int *)(v25 + 32);
    uint64_t v66 = (char *)v23 + v47;
    uint64_t v48 = &v24[v47];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20((uint64_t)v66, v48, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v5 = v68;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  uint64_t v9 = v21;
LABEL_14:
  uint64_t v49 = *(int *)(v72 + 28);
  uint64_t v50 = (char *)v5 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = *((void *)v51 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v50 + 2) = *((void *)v51 + 2);
      *((void *)v50 + 3) = *((void *)v51 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v70(&v50[*(int *)(v52 + 24)], &v51[*(int *)(v52 + 24)], v9);
      return v5;
    }
    sub_10012BBD8((uint64_t)v50, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_19;
  }
  if (v56)
  {
LABEL_19:
    uint64_t v61 = sub_1000D0514(&qword_1002CD540);
    memcpy(v50, v51, *(void *)(*(void *)(v61 - 8) + 64));
    return v5;
  }
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  *((void *)v50 + 2) = *((void *)v51 + 2);
  *((void *)v50 + 3) = *((void *)v51 + 3);
  uint64_t v57 = *(int *)(v52 + 24);
  uint64_t v58 = &v50[v57];
  uint64_t v59 = &v51[v57];
  v60 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60(v58, v59, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  return v5;
}

_OWORD *initializeWithTake for Goldilocks_ParticipantExitResult(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    long long v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v34 = v9;
    uint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v33 = v10;
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v24 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v24;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((unsigned char *)v19 + 40) = *((unsigned char *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
      v33((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v34);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    uint64_t v10 = v33;
    uint64_t v9 = v34;
  }
  uint64_t v25 = a3[7];
  uint64_t v26 = (_OWORD *)((char *)a1 + v25);
  uint64_t v27 = (_OWORD *)((char *)a2 + v25);
  uint64_t v28 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = sub_1000D0514(&qword_1002CD540);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    long long v31 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v31;
    v10((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

void *assignWithTake for Goldilocks_ParticipantExitResult(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v60 + 40);
  v59(v8, v9, v10);
  uint64_t v61 = a3;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      uint64_t v29 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v29;
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(unsigned char *)(v12 + 24) = v13[24];
      uint64_t v30 = *((void *)v13 + 5);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      swift_bridgeObjectRelease();
      uint64_t v31 = *((void *)v13 + 9);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      *(void *)(v12 + 72) = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = *((void *)v13 + 11);
      *(void *)(v12 + 80) = *((void *)v13 + 10);
      *(void *)(v12 + 88) = v32;
      swift_bridgeObjectRelease();
      v59((char *)(v12 + *(int *)(v14 + 44)), &v13[*(int *)(v14 + 44)], v10);
      uint64_t v33 = *(int *)(v14 + 48);
      uint64_t v34 = v12 + v33;
      uint64_t v35 = &v13[v33];
      uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v37 = *(void *)(v36 - 8);
      int v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, v36);
      int v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          long long v41 = *((_OWORD *)v35 + 1);
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(_OWORD *)(v34 + 16) = v41;
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v34 + *(int *)(v36 + 32), &v35[*(int *)(v36 + 32)], v10);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v56 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v56;
          swift_bridgeObjectRelease();
          uint64_t v57 = *((void *)v35 + 3);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = v57;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          v59((char *)(v34 + *(int *)(v36 + 32)), &v35[*(int *)(v36 + 32)], v10);
          goto LABEL_14;
        }
        sub_10012BBD8(v34, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v34;
      uint64_t v28 = v35;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    sub_10012BBD8(v12, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v12;
    uint64_t v28 = v13;
    goto LABEL_8;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 24) = v13[24];
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
  *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  long long v19 = *((_OWORD *)v13 + 5);
  *(_OWORD *)(v12 + 64) = *((_OWORD *)v13 + 4);
  *(_OWORD *)(v12 + 80) = v19;
  uint64_t v58 = *(void (**)(uint64_t, char *))(v60 + 32);
  v58(v12 + *(int *)(v14 + 44), &v13[*(int *)(v14 + 44)]);
  uint64_t v20 = *(int *)(v14 + 48);
  uint64_t v21 = (_OWORD *)(v12 + v20);
  uint64_t v22 = &v13[v20];
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    long long v42 = *((_OWORD *)v22 + 1);
    *uint64_t v21 = *(_OWORD *)v22;
    v21[1] = v42;
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = v22[40];
    *((void *)v21 + 6) = *((void *)v22 + 6);
    *((unsigned char *)v21 + 56) = v22[56];
    ((void (*)(char *, char *, uint64_t))v58)((char *)v21 + *(int *)(v23 + 32), &v22[*(int *)(v23 + 32)], v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v43 = *(int *)(v61 + 28);
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      uint64_t v54 = *((void *)v45 + 1);
      *(void *)uint64_t v44 = *(void *)v45;
      *((void *)v44 + 1) = v54;
      swift_bridgeObjectRelease();
      uint64_t v55 = *((void *)v45 + 3);
      *((void *)v44 + 2) = *((void *)v45 + 2);
      *((void *)v44 + 3) = v55;
      swift_bridgeObjectRelease();
      v59(&v44[*(int *)(v46 + 24)], &v45[*(int *)(v46 + 24)], v10);
      return a1;
    }
    sub_10012BBD8((uint64_t)v44, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_19;
  }
  if (v50)
  {
LABEL_19:
    uint64_t v52 = sub_1000D0514(&qword_1002CD540);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
    return a1;
  }
  long long v51 = *((_OWORD *)v45 + 1);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *((_OWORD *)v44 + 1) = v51;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v44[*(int *)(v46 + 24)], &v45[*(int *)(v46 + 24)], v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ParticipantExitResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013104C);
}

uint64_t sub_10013104C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_1000D0514(&qword_1002CC1A8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ParticipantExitResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001311E0);
}

uint64_t sub_1001311E0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_1000D0514(&qword_1002CC1A8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = sub_1000D0514(&qword_1002CD540);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[7];
  return v15(v17, a2, a2, v16);
}

void sub_100131360()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CC698, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v1 <= 0x3F)
    {
      sub_10012F1CC(319, (unint64_t *)&unk_1002CC5E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_CheckDuplicatesRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CD540);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v23, v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v21, v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v24 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[2] = v13[2];
      v12[3] = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = (char *)v12 + v18;
  uint64_t v20 = (char *)v13 + v18;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for Goldilocks_CheckDuplicatesRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v24 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v22 = v14[1];
      void *v13 = *v14;
      v13[1] = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = v14[3];
      v13[2] = v14[2];
      v13[3] = v23;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  long long v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v19;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v25);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100131FDC);
}

uint64_t sub_100131FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CD540);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_CheckDuplicatesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100131FFC);
}

uint64_t sub_100131FFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CD540);
}

void sub_100132008(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v39 = v17;
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      uint64_t v23 = v15[10];
      v14[9] = v15[9];
      v14[10] = v23;
      int v40 = v12;
      v14[11] = v15[11];
      uint64_t v24 = *(int *)(v16 + 44);
      uint64_t v37 = (char *)v15 + v24;
      int v38 = (char *)v14 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v38, v37, v11);
      uint64_t v25 = *(int *)(v16 + 48);
      size_t v26 = (void *)((char *)v14 + v25);
      uint64_t v27 = (void *)((char *)v15 + v25);
      uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = v27[1];
        *size_t v26 = *v27;
        v26[1] = v31;
        uint64_t v32 = v27[3];
        v26[2] = v27[2];
        v26[3] = v32;
        v26[4] = v27[4];
        *((unsigned char *)v26 + 40) = *((unsigned char *)v27 + 40);
        v26[6] = v27[6];
        *((unsigned char *)v26 + 56) = *((unsigned char *)v27 + 56);
        uint64_t v33 = *(int *)(v28 + 32);
        uint64_t v34 = (char *)v26 + v33;
        uint64_t v35 = (char *)v27 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(v34, v35, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t _s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 44), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 48);
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwcp_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v16;
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    uint64_t v19 = v14[5];
    v13[4] = v14[4];
    v13[5] = v19;
    *((_DWORD *)v13 + 12) = *((_DWORD *)v14 + 12);
    uint64_t v20 = v14[8];
    v13[7] = v14[7];
    v13[8] = v20;
    uint64_t v21 = v14[10];
    v13[9] = v14[9];
    v13[10] = v21;
    int v38 = v11;
    v13[11] = v14[11];
    uint64_t v22 = *(int *)(v15 + 44);
    uint64_t v35 = (char *)v14 + v22;
    uint64_t v36 = (char *)v13 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v36, v35, v10);
    uint64_t v23 = *(int *)(v15 + 48);
    uint64_t v24 = (void *)((char *)v13 + v23);
    uint64_t v25 = (void *)((char *)v14 + v23);
    uint64_t v26 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v29;
      uint64_t v30 = v25[3];
      v24[2] = v25[2];
      v24[3] = v30;
      v24[4] = v25[4];
      *((unsigned char *)v24 + 40) = *((unsigned char *)v25 + 40);
      v24[6] = v25[6];
      *((unsigned char *)v24 + 56) = *((unsigned char *)v25 + 56);
      uint64_t v31 = *(int *)(v26 + 32);
      uint64_t v32 = (char *)v24 + v31;
      uint64_t v33 = (char *)v25 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v32, v33, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t _s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    long long v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v25 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v20, 1, v21))
    {
      uint64_t v22 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      long long v23 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v23;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((unsigned char *)v19 + 40) = *((unsigned char *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
      v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_CheckDuplicatesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100132B70);
}

uint64_t sub_100132B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CC1A8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_CheckDuplicatesResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100132B90);
}

uint64_t sub_100132B90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CC1A8);
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwca_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v55 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v9 = *(void (**)(char *, char *))(v56 + 24);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15((uint64_t)v12, 1, v13);
  if (!v8)
  {
    if (!v16)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v29 = *((void *)v12 + 2);
      *(unsigned char *)(v11 + 24) = v12[24];
      *(void *)(v11 + 16) = v29;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      *(void *)(v11 + 40) = *((void *)v12 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
      *(void *)(v11 + 56) = *((void *)v12 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 64) = *((void *)v12 + 8);
      *(void *)(v11 + 72) = *((void *)v12 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 80) = *((void *)v12 + 10);
      *(void *)(v11 + 88) = *((void *)v12 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v9)(v11 + *(int *)(v13 + 44), &v12[*(int *)(v13 + 44)], v55);
      uint64_t v30 = *(int *)(v13 + 48);
      uint64_t v31 = v11 + v30;
      uint64_t v32 = &v12[v30];
      uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, v33);
      int v37 = v35((uint64_t)v32, 1, v33);
      if (v36)
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *(void *)(v31 + 8) = *((void *)v32 + 1);
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          *(void *)(v31 + 24) = *((void *)v32 + 3);
          uint64_t v38 = *((void *)v32 + 4);
          *(unsigned char *)(v31 + 40) = v32[40];
          *(void *)(v31 + 32) = v38;
          uint64_t v39 = *((void *)v32 + 6);
          *(unsigned char *)(v31 + 56) = v32[56];
          *(void *)(v31 + 48) = v39;
          uint64_t v40 = *(int *)(v33 + 32);
          uint64_t v41 = v31 + v40;
          long long v42 = &v32[v40];
          uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43(v41, v42, v55);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *(void *)(v31 + 8) = *((void *)v32 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          *(void *)(v31 + 24) = *((void *)v32 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v50 = *((void *)v32 + 4);
          *(unsigned char *)(v31 + 40) = v32[40];
          *(void *)(v31 + 32) = v50;
          uint64_t v51 = *((void *)v32 + 6);
          *(unsigned char *)(v31 + 56) = v32[56];
          *(void *)(v31 + 48) = v51;
          ((void (*)(uint64_t, char *, uint64_t))v9)(v31 + *(int *)(v33 + 32), &v32[*(int *)(v33 + 32)], v55);
          return a1;
        }
        sub_10012BBD8(v31, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v31;
      uint64_t v28 = v32;
      goto LABEL_8;
    }
    sub_10012BBD8(v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v11;
    uint64_t v28 = v12;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v54 = v14;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *((void *)v12 + 1);
  uint64_t v17 = *((void *)v12 + 2);
  *(unsigned char *)(v11 + 24) = v12[24];
  *(void *)(v11 + 16) = v17;
  *(void *)(v11 + 32) = *((void *)v12 + 4);
  *(void *)(v11 + 40) = *((void *)v12 + 5);
  *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
  *(void *)(v11 + 56) = *((void *)v12 + 7);
  *(void *)(v11 + 64) = *((void *)v12 + 8);
  *(void *)(v11 + 72) = *((void *)v12 + 9);
  *(void *)(v11 + 80) = *((void *)v12 + 10);
  *(void *)(v11 + 88) = *((void *)v12 + 11);
  uint64_t v18 = *(int *)(v13 + 44);
  uint64_t v52 = &v12[v18];
  uint64_t v53 = v11 + v18;
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v53, v52, v55);
  uint64_t v20 = *(int *)(v13 + 48);
  uint64_t v21 = (void *)(v11 + v20);
  uint64_t v22 = &v12[v20];
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *(void *)v22;
    v21[1] = *((void *)v22 + 1);
    v21[2] = *((void *)v22 + 2);
    v21[3] = *((void *)v22 + 3);
    uint64_t v44 = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = v22[40];
    v21[4] = v44;
    uint64_t v45 = *((void *)v22 + 6);
    *((unsigned char *)v21 + 56) = v22[56];
    v21[6] = v45;
    uint64_t v46 = *(int *)(v23 + 32);
    uint64_t v47 = (char *)v21 + v46;
    uint64_t v48 = &v22[v46];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19((uint64_t)v47, v48, v55);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v11, 0, 1, v13);
  return a1;
}

void *_s22CloudKitImplementation31Goldilocks_InitiateExitResponseVwta_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v46 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17((uint64_t)v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v29 = *((void *)v14 + 1);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v29;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(unsigned char *)(v13 + 24) = v14[24];
      uint64_t v30 = *((void *)v14 + 5);
      *(void *)(v13 + 32) = *((void *)v14 + 4);
      *(void *)(v13 + 40) = v30;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 48) = *((_DWORD *)v14 + 12);
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRelease();
      uint64_t v31 = *((void *)v14 + 9);
      *(void *)(v13 + 64) = *((void *)v14 + 8);
      *(void *)(v13 + 72) = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = *((void *)v14 + 11);
      *(void *)(v13 + 80) = *((void *)v14 + 10);
      *(void *)(v13 + 88) = v32;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(v15 + 44), &v14[*(int *)(v15 + 44)], v48);
      uint64_t v33 = *(int *)(v15 + 48);
      uint64_t v34 = v13 + v33;
      uint64_t v35 = &v14[v33];
      uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, v36);
      int v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          long long v41 = *((_OWORD *)v35 + 1);
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(_OWORD *)(v34 + 16) = v41;
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v34 + *(int *)(v36 + 32), &v35[*(int *)(v36 + 32)], v48);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v44 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v44;
          swift_bridgeObjectRelease();
          uint64_t v45 = *((void *)v35 + 3);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = v45;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = v35[40];
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = v35[56];
          ((void (*)(uint64_t, char *, uint64_t))v11)(v34 + *(int *)(v36 + 32), &v35[*(int *)(v36 + 32)], v48);
          return a1;
        }
        sub_10012BBD8(v34, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v34;
      uint64_t v28 = v35;
      goto LABEL_8;
    }
    sub_10012BBD8(v13, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v13;
    uint64_t v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 24) = v14[24];
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
  *(_DWORD *)(v13 + 48) = *((_DWORD *)v14 + 12);
  *(void *)(v13 + 56) = *((void *)v14 + 7);
  long long v19 = *((_OWORD *)v14 + 5);
  *(_OWORD *)(v13 + 64) = *((_OWORD *)v14 + 4);
  *(_OWORD *)(v13 + 80) = v19;
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v46 + 32);
  v47(v13 + *(int *)(v15 + 44), &v14[*(int *)(v15 + 44)], v48);
  uint64_t v20 = *(int *)(v15 + 48);
  uint64_t v21 = (_OWORD *)(v13 + v20);
  uint64_t v22 = &v14[v20];
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    long long v42 = *((_OWORD *)v22 + 1);
    *uint64_t v21 = *(_OWORD *)v22;
    v21[1] = v42;
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = v22[40];
    *((void *)v21 + 6) = *((void *)v22 + 6);
    *((unsigned char *)v21 + 56) = v22[56];
    v47((uint64_t)v21 + *(int *)(v23 + 32), &v22[*(int *)(v23 + 32)], v48);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_DuplicateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001337AC);
}

uint64_t sub_1001337AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CC1A8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_DuplicateState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001337CC);
}

uint64_t sub_1001337CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CC1A8);
}

uint64_t getEnumTagSinglePayload for Goldilocks_FoundDuplicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100133804);
}

uint64_t sub_100133804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CD540);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_FoundDuplicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100133824);
}

uint64_t sub_100133824(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CD540);
}

void sub_100133830(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for Goldilocks_ZoneID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013386C);
}

uint64_t sub_10013386C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ZoneID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100133930);
}

uint64_t sub_100133930(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001339D8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CD540);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v24 + 24);
  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v12 + 2) = *((void *)v13 + 2);
      *((void *)v12 + 3) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((void *)v12 + 2) = *((void *)v13 + 2);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = &v12[v18];
  uint64_t v20 = &v13[v18];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v24 + 40);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v22 = *((void *)v14 + 1);
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *((void *)v14 + 3);
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = v23;
      swift_bridgeObjectRelease();
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  long long v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v19;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100134574);
}

uint64_t sub_100134574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CD540);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134594);
}

uint64_t sub_100134594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CD540);
}

void sub_1001345A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v44 = a1 + v10;
    uint64_t v11 = (uint64_t)a2 + v10;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v43 = v12;
    v13(v44, v11, v12);
    uint64_t v14 = *(int *)(a3 + 40);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v42 = v18;
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      v15[2] = v16[2];
      *((unsigned char *)v15 + 24) = *((unsigned char *)v16 + 24);
      uint64_t v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      *((_DWORD *)v15 + 12) = *((_DWORD *)v16 + 12);
      uint64_t v23 = v16[8];
      v15[7] = v16[7];
      v15[8] = v23;
      uint64_t v24 = v16[10];
      v15[9] = v16[9];
      v15[10] = v24;
      v15[11] = v16[11];
      uint64_t v25 = *(int *)(v17 + 44);
      size_t v26 = (char *)v15 + v25;
      int v40 = (char *)v16 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v27 = v40;
      long long v41 = (void (*)(char *, char *, uint64_t))v13;
      v13((uint64_t)v26, (uint64_t)v27, v12);
      uint64_t v28 = *(int *)(v17 + 48);
      uint64_t v29 = (void *)((char *)v15 + v28);
      uint64_t v30 = (void *)((char *)v16 + v28);
      uint64_t v31 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v34 = v30[1];
        *uint64_t v29 = *v30;
        v29[1] = v34;
        uint64_t v35 = v30[3];
        v29[2] = v30[2];
        v29[3] = v35;
        v29[4] = v30[4];
        *((unsigned char *)v29 + 40) = *((unsigned char *)v30 + 40);
        v29[6] = v30[6];
        *((unsigned char *)v29 + 56) = *((unsigned char *)v30 + 56);
        uint64_t v36 = *(int *)(v31 + 32);
        uint64_t v37 = (char *)v29 + v36;
        uint64_t v38 = (char *)v30 + v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v37, v38, v43);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 44), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 48);
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v42 = a1 + v9;
  uint64_t v10 = a2 + v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v11;
  v12(v42, v10, v11);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v40 = v17;
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
    uint64_t v20 = v15[5];
    v14[4] = v15[4];
    v14[5] = v20;
    *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
    uint64_t v21 = v15[8];
    v14[7] = v15[7];
    v14[8] = v21;
    uint64_t v22 = v15[10];
    v14[9] = v15[9];
    v14[10] = v22;
    v14[11] = v15[11];
    uint64_t v23 = *(int *)(v16 + 44);
    uint64_t v24 = (char *)v14 + v23;
    uint64_t v38 = (char *)v15 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = v38;
    int v39 = (void (*)(char *, char *, uint64_t))v12;
    v12((uint64_t)v24, (uint64_t)v25, v11);
    uint64_t v26 = *(int *)(v16 + 48);
    uint64_t v27 = (void *)((char *)v14 + v26);
    uint64_t v28 = (void *)((char *)v15 + v26);
    uint64_t v29 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v32 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v32;
      uint64_t v33 = v28[3];
      v27[2] = v28[2];
      v27[3] = v33;
      v27[4] = v28[4];
      *((unsigned char *)v27 + 40) = *((unsigned char *)v28 + 40);
      v27[6] = v28[6];
      *((unsigned char *)v27 + 56) = *((unsigned char *)v28 + 56);
      uint64_t v34 = *(int *)(v29 + 32);
      uint64_t v35 = (char *)v27 + v34;
      uint64_t v36 = (char *)v28 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v35, v36, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v55 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v56 + 24);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (!v8)
  {
    if (!v16)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v12 + 16);
      *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
      *(void *)(v11 + 16) = v29;
      *(void *)(v11 + 32) = *(void *)(v12 + 32);
      *(void *)(v11 + 40) = *(void *)(v12 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v11 + 48) = *(_DWORD *)(v12 + 48);
      *(void *)(v11 + 56) = *(void *)(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 64) = *(void *)(v12 + 64);
      *(void *)(v11 + 72) = *(void *)(v12 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 80) = *(void *)(v12 + 80);
      *(void *)(v11 + 88) = *(void *)(v12 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v11 + *(int *)(v13 + 44), v12 + *(int *)(v13 + 44), v55);
      uint64_t v30 = *(int *)(v13 + 48);
      uint64_t v31 = v11 + v30;
      uint64_t v32 = (void *)(v12 + v30);
      uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, v33);
      int v37 = v35((uint64_t)v32, 1, v33);
      if (v36)
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *v32;
          *(void *)(v31 + 8) = v32[1];
          *(void *)(v31 + 16) = v32[2];
          *(void *)(v31 + 24) = v32[3];
          uint64_t v38 = v32[4];
          *(unsigned char *)(v31 + 40) = *((unsigned char *)v32 + 40);
          *(void *)(v31 + 32) = v38;
          uint64_t v39 = v32[6];
          *(unsigned char *)(v31 + 56) = *((unsigned char *)v32 + 56);
          *(void *)(v31 + 48) = v39;
          uint64_t v40 = *(int *)(v33 + 32);
          uint64_t v41 = v31 + v40;
          uint64_t v42 = (char *)v32 + v40;
          uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43(v41, v42, v55);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *v32;
          *(void *)(v31 + 8) = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v31 + 16) = v32[2];
          *(void *)(v31 + 24) = v32[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v50 = v32[4];
          *(unsigned char *)(v31 + 40) = *((unsigned char *)v32 + 40);
          *(void *)(v31 + 32) = v50;
          uint64_t v51 = v32[6];
          *(unsigned char *)(v31 + 56) = *((unsigned char *)v32 + 56);
          *(void *)(v31 + 48) = v51;
          ((void (*)(uint64_t, char *, uint64_t))v9)(v31 + *(int *)(v33 + 32), (char *)v32 + *(int *)(v33 + 32), v55);
          return a1;
        }
        sub_10012BBD8(v31, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v31;
      uint64_t v28 = v32;
      goto LABEL_8;
    }
    sub_10012BBD8(v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v11;
    uint64_t v28 = (const void *)v12;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v54 = v14;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  uint64_t v17 = *(void *)(v12 + 16);
  *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
  *(void *)(v11 + 16) = v17;
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  *(void *)(v11 + 40) = *(void *)(v12 + 40);
  *(_DWORD *)(v11 + 48) = *(_DWORD *)(v12 + 48);
  *(void *)(v11 + 56) = *(void *)(v12 + 56);
  *(void *)(v11 + 64) = *(void *)(v12 + 64);
  *(void *)(v11 + 72) = *(void *)(v12 + 72);
  *(void *)(v11 + 80) = *(void *)(v12 + 80);
  *(void *)(v11 + 88) = *(void *)(v12 + 88);
  uint64_t v18 = *(int *)(v13 + 44);
  uint64_t v52 = v12 + v18;
  uint64_t v53 = v11 + v18;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v53, v52, v55);
  uint64_t v20 = *(int *)(v13 + 48);
  uint64_t v21 = (void *)(v11 + v20);
  uint64_t v22 = (void *)(v12 + v20);
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *v22;
    v21[1] = v22[1];
    v21[2] = v22[2];
    v21[3] = v22[3];
    uint64_t v44 = v22[4];
    *((unsigned char *)v21 + 40) = *((unsigned char *)v22 + 40);
    v21[4] = v44;
    uint64_t v45 = v22[6];
    *((unsigned char *)v21 + 56) = *((unsigned char *)v22 + 56);
    v21[6] = v45;
    uint64_t v46 = *(int *)(v23 + 32);
    uint64_t v47 = (char *)v21 + v46;
    uint64_t v48 = (char *)v22 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19((uint64_t)v47, (uint64_t)v48, v55);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    long long v17 = v13[5];
    v12[4] = v13[4];
    v12[5] = v17;
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    uint64_t v18 = *(int *)(v14 + 48);
    uint64_t v19 = (_OWORD *)((char *)v12 + v18);
    uint64_t v20 = (_OWORD *)((char *)v13 + v18);
    uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v25 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v20, 1, v21))
    {
      uint64_t v22 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      long long v23 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v23;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((unsigned char *)v19 + 40) = *((unsigned char *)v20 + 40);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
      v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v46 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v29 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v29;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(unsigned char *)(v13 + 24) = *(unsigned char *)(v14 + 24);
      uint64_t v30 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = v30;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 48) = *(_DWORD *)(v14 + 48);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v14 + 72);
      *(void *)(v13 + 64) = *(void *)(v14 + 64);
      *(void *)(v13 + 72) = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v14 + 88);
      *(void *)(v13 + 80) = *(void *)(v14 + 80);
      *(void *)(v13 + 88) = v32;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(v15 + 44), v14 + *(int *)(v15 + 44), v48);
      uint64_t v33 = *(int *)(v15 + 48);
      uint64_t v34 = v13 + v33;
      uint64_t v35 = (_OWORD *)(v14 + v33);
      uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, v36);
      int v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          long long v41 = v35[1];
          *(_OWORD *)uint64_t v34 = *v35;
          *(_OWORD *)(v34 + 16) = v41;
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = *((unsigned char *)v35 + 40);
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = *((unsigned char *)v35 + 56);
          (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v34 + *(int *)(v36 + 32), (char *)v35 + *(int *)(v36 + 32), v48);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v44 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v44;
          swift_bridgeObjectRelease();
          uint64_t v45 = *((void *)v35 + 3);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = v45;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(unsigned char *)(v34 + 40) = *((unsigned char *)v35 + 40);
          *(void *)(v34 + 48) = *((void *)v35 + 6);
          *(unsigned char *)(v34 + 56) = *((unsigned char *)v35 + 56);
          ((void (*)(uint64_t, char *, uint64_t))v11)(v34 + *(int *)(v36 + 32), (char *)v35 + *(int *)(v36 + 32), v48);
          return a1;
        }
        sub_10012BBD8(v34, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v34;
      uint64_t v28 = v35;
      goto LABEL_8;
    }
    sub_10012BBD8(v13, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v13;
    uint64_t v28 = (const void *)v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 24) = *(unsigned char *)(v14 + 24);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_DWORD *)(v13 + 48) = *(_DWORD *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  long long v19 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = v19;
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
  v47(v13 + *(int *)(v15 + 44), v14 + *(int *)(v15 + 44), v48);
  uint64_t v20 = *(int *)(v15 + 48);
  uint64_t v21 = (_OWORD *)(v13 + v20);
  uint64_t v22 = (_OWORD *)(v14 + v20);
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    long long v42 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v42;
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = *((unsigned char *)v22 + 40);
    *((void *)v21 + 6) = *((void *)v22 + 6);
    *((unsigned char *)v21 + 56) = *((unsigned char *)v22 + 56);
    v47((uint64_t)v21 + *(int *)(v23 + 32), (uint64_t)v22 + *(int *)(v23 + 32), v48);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100135DB8);
}

uint64_t sub_100135DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CC1A8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100135EFC);
}

uint64_t sub_100135EFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CC1A8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10013602C()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CC698, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v40 = v18;
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      v15[2] = v16[2];
      *((unsigned char *)v15 + 24) = *((unsigned char *)v16 + 24);
      uint64_t v22 = v16[5];
      v15[4] = v16[4];
      v15[5] = v22;
      *((_DWORD *)v15 + 12) = *((_DWORD *)v16 + 12);
      uint64_t v23 = v16[8];
      v15[7] = v16[7];
      v15[8] = v23;
      uint64_t v24 = v16[10];
      v15[9] = v16[9];
      v15[10] = v24;
      long long v41 = v13;
      v15[11] = v16[11];
      uint64_t v25 = *(int *)(v17 + 44);
      uint64_t v38 = (char *)v16 + v25;
      int v39 = (char *)v15 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v39, v38, v12);
      uint64_t v26 = *(int *)(v17 + 48);
      uint64_t v27 = (void *)((char *)v15 + v26);
      uint64_t v28 = (void *)((char *)v16 + v26);
      uint64_t v29 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v32 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v32;
        uint64_t v33 = v28[3];
        v27[2] = v28[2];
        v27[3] = v33;
        v27[4] = v28[4];
        *((unsigned char *)v27 + 40) = *((unsigned char *)v28 + 40);
        v27[6] = v28[6];
        *((unsigned char *)v27 + 56) = *((unsigned char *)v28 + 56);
        uint64_t v34 = *(int *)(v29 + 32);
        uint64_t v35 = (char *)v27 + v34;
        uint64_t v36 = (char *)v28 + v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v35, v36, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 44), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 48);
    uint64_t v10 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(v10 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *initializeWithCopy for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v38 = v17;
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
    uint64_t v20 = v15[5];
    v14[4] = v15[4];
    v14[5] = v20;
    *((_DWORD *)v14 + 12) = *((_DWORD *)v15 + 12);
    uint64_t v21 = v15[8];
    v14[7] = v15[7];
    v14[8] = v21;
    uint64_t v22 = v15[10];
    v14[9] = v15[9];
    v14[10] = v22;
    int v39 = v12;
    v14[11] = v15[11];
    uint64_t v23 = *(int *)(v16 + 44);
    uint64_t v36 = (char *)v15 + v23;
    uint64_t v37 = (char *)v14 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v37, v36, v11);
    uint64_t v24 = *(int *)(v16 + 48);
    uint64_t v25 = (void *)((char *)v14 + v24);
    uint64_t v26 = (void *)((char *)v15 + v24);
    uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v30;
      uint64_t v31 = v26[3];
      v25[2] = v26[2];
      v25[3] = v31;
      v25[4] = v26[4];
      *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
      v25[6] = v26[6];
      *((unsigned char *)v25 + 56) = *((unsigned char *)v26 + 56);
      uint64_t v32 = *(int *)(v27 + 32);
      uint64_t v33 = (char *)v25 + v32;
      uint64_t v34 = (char *)v26 + v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v33, v34, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *assignWithCopy for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v55 = type metadata accessor for UnknownStorage();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v9 = *(void (**)(char *, char *))(v56 + 24);
  v9(v7, v8);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v8) = v15(v11, 1, v13);
  int v16 = v15((uint64_t)v12, 1, v13);
  if (!v8)
  {
    if (!v16)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v29 = *((void *)v12 + 2);
      *(unsigned char *)(v11 + 24) = v12[24];
      *(void *)(v11 + 16) = v29;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      *(void *)(v11 + 40) = *((void *)v12 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
      *(void *)(v11 + 56) = *((void *)v12 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 64) = *((void *)v12 + 8);
      *(void *)(v11 + 72) = *((void *)v12 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 80) = *((void *)v12 + 10);
      *(void *)(v11 + 88) = *((void *)v12 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v9)(v11 + *(int *)(v13 + 44), &v12[*(int *)(v13 + 44)], v55);
      uint64_t v30 = *(int *)(v13 + 48);
      uint64_t v31 = v11 + v30;
      uint64_t v32 = &v12[v30];
      uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, v33);
      int v37 = v35((uint64_t)v32, 1, v33);
      if (v36)
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *(void *)(v31 + 8) = *((void *)v32 + 1);
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          *(void *)(v31 + 24) = *((void *)v32 + 3);
          uint64_t v38 = *((void *)v32 + 4);
          *(unsigned char *)(v31 + 40) = v32[40];
          *(void *)(v31 + 32) = v38;
          uint64_t v39 = *((void *)v32 + 6);
          *(unsigned char *)(v31 + 56) = v32[56];
          *(void *)(v31 + 48) = v39;
          uint64_t v40 = *(int *)(v33 + 32);
          uint64_t v41 = v31 + v40;
          long long v42 = &v32[v40];
          uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43(v41, v42, v55);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *(void *)(v31 + 8) = *((void *)v32 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v31 + 16) = *((void *)v32 + 2);
          *(void *)(v31 + 24) = *((void *)v32 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v50 = *((void *)v32 + 4);
          *(unsigned char *)(v31 + 40) = v32[40];
          *(void *)(v31 + 32) = v50;
          uint64_t v51 = *((void *)v32 + 6);
          *(unsigned char *)(v31 + 56) = v32[56];
          *(void *)(v31 + 48) = v51;
          ((void (*)(uint64_t, char *, uint64_t))v9)(v31 + *(int *)(v33 + 32), &v32[*(int *)(v33 + 32)], v55);
          return a1;
        }
        sub_10012BBD8(v31, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v27 = (void *)v31;
      uint64_t v28 = v32;
      goto LABEL_8;
    }
    sub_10012BBD8(v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v27 = (void *)v11;
    uint64_t v28 = v12;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v54 = v14;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *((void *)v12 + 1);
  uint64_t v17 = *((void *)v12 + 2);
  *(unsigned char *)(v11 + 24) = v12[24];
  *(void *)(v11 + 16) = v17;
  *(void *)(v11 + 32) = *((void *)v12 + 4);
  *(void *)(v11 + 40) = *((void *)v12 + 5);
  *(_DWORD *)(v11 + 48) = *((_DWORD *)v12 + 12);
  *(void *)(v11 + 56) = *((void *)v12 + 7);
  *(void *)(v11 + 64) = *((void *)v12 + 8);
  *(void *)(v11 + 72) = *((void *)v12 + 9);
  *(void *)(v11 + 80) = *((void *)v12 + 10);
  *(void *)(v11 + 88) = *((void *)v12 + 11);
  uint64_t v18 = *(int *)(v13 + 44);
  uint64_t v52 = &v12[v18];
  uint64_t v53 = v11 + v18;
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v53, v52, v55);
  uint64_t v20 = *(int *)(v13 + 48);
  uint64_t v21 = (void *)(v11 + v20);
  uint64_t v22 = &v12[v20];
  uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *(void *)v22;
    v21[1] = *((void *)v22 + 1);
    v21[2] = *((void *)v22 + 2);
    v21[3] = *((void *)v22 + 3);
    uint64_t v44 = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = v22[40];
    v21[4] = v44;
    uint64_t v45 = *((void *)v22 + 6);
    *((unsigned char *)v21 + 56) = v22[56];
    v21[6] = v45;
    uint64_t v46 = *(int *)(v23 + 32);
    uint64_t v47 = (char *)v21 + v46;
    uint64_t v48 = &v22[v46];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19((uint64_t)v47, v48, v55);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v11, 0, 1, v13);
  return a1;
}

_OWORD *initializeWithTake for Goldilocks_ExitMoveBatchFeedbackItem(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    _OWORD *v13 = *v14;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *((unsigned char *)v13 + 24) = *((unsigned char *)v14 + 24);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 12) = *((_DWORD *)v14 + 12);
    *((void *)v13 + 7) = *((void *)v14 + 7);
    long long v18 = v14[5];
    v13[4] = v14[4];
    v13[5] = v18;
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    uint64_t v19 = *(int *)(v15 + 48);
    uint64_t v20 = (_OWORD *)((char *)v13 + v19);
    uint64_t v21 = (_OWORD *)((char *)v14 + v19);
    uint64_t v22 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v26 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v22))
    {
      uint64_t v23 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v24 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v24;
      *((void *)v20 + 4) = *((void *)v21 + 4);
      *((unsigned char *)v20 + 40) = *((unsigned char *)v21 + 40);
      *((void *)v20 + 6) = *((void *)v21 + 6);
      *((unsigned char *)v20 + 56) = *((unsigned char *)v21 + 56);
      v11((char *)v20 + *(int *)(v22 + 32), (char *)v21 + *(int *)(v22 + 32), v10);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v22);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithTake for Goldilocks_ExitMoveBatchFeedbackItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v47 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  long long v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18((uint64_t)v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v30 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v30;
      swift_bridgeObjectRelease();
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      *(unsigned char *)(v14 + 24) = v15[24];
      uint64_t v31 = *((void *)v15 + 5);
      *(void *)(v14 + 32) = *((void *)v15 + 4);
      *(void *)(v14 + 40) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 48) = *((_DWORD *)v15 + 12);
      *(void *)(v14 + 56) = *((void *)v15 + 7);
      swift_bridgeObjectRelease();
      uint64_t v32 = *((void *)v15 + 9);
      *(void *)(v14 + 64) = *((void *)v15 + 8);
      *(void *)(v14 + 72) = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = *((void *)v15 + 11);
      *(void *)(v14 + 80) = *((void *)v15 + 10);
      *(void *)(v14 + 88) = v33;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v12)(v14 + *(int *)(v16 + 44), &v15[*(int *)(v16 + 44)], v49);
      uint64_t v34 = *(int *)(v16 + 48);
      uint64_t v35 = v14 + v34;
      int v36 = &v15[v34];
      uint64_t v37 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      int v40 = v39(v35, 1, v37);
      int v41 = v39((uint64_t)v36, 1, v37);
      if (v40)
      {
        if (!v41)
        {
          long long v42 = *((_OWORD *)v36 + 1);
          *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
          *(_OWORD *)(v35 + 16) = v42;
          *(void *)(v35 + 32) = *((void *)v36 + 4);
          *(unsigned char *)(v35 + 40) = v36[40];
          *(void *)(v35 + 48) = *((void *)v36 + 6);
          *(unsigned char *)(v35 + 56) = v36[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v35 + *(int *)(v37 + 32), &v36[*(int *)(v37 + 32)], v49);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          uint64_t v45 = *((void *)v36 + 1);
          *(void *)uint64_t v35 = *(void *)v36;
          *(void *)(v35 + 8) = v45;
          swift_bridgeObjectRelease();
          uint64_t v46 = *((void *)v36 + 3);
          *(void *)(v35 + 16) = *((void *)v36 + 2);
          *(void *)(v35 + 24) = v46;
          swift_bridgeObjectRelease();
          *(void *)(v35 + 32) = *((void *)v36 + 4);
          *(unsigned char *)(v35 + 40) = v36[40];
          *(void *)(v35 + 48) = *((void *)v36 + 6);
          *(unsigned char *)(v35 + 56) = v36[56];
          ((void (*)(uint64_t, char *, uint64_t))v12)(v35 + *(int *)(v37 + 32), &v36[*(int *)(v37 + 32)], v49);
          return a1;
        }
        sub_10012BBD8(v35, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v27 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v28 = (void *)v35;
      uint64_t v29 = v36;
      goto LABEL_8;
    }
    sub_10012BBD8(v14, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v28 = (void *)v14;
    uint64_t v29 = v15;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v19) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 24) = v15[24];
  *(void *)(v14 + 16) = *((void *)v15 + 2);
  *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
  *(_DWORD *)(v14 + 48) = *((_DWORD *)v15 + 12);
  *(void *)(v14 + 56) = *((void *)v15 + 7);
  long long v20 = *((_OWORD *)v15 + 5);
  *(_OWORD *)(v14 + 64) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v14 + 80) = v20;
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 32);
  v48(v14 + *(int *)(v16 + 44), &v15[*(int *)(v16 + 44)], v49);
  uint64_t v21 = *(int *)(v16 + 48);
  uint64_t v22 = (_OWORD *)(v14 + v21);
  uint64_t v23 = &v15[v21];
  uint64_t v24 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    long long v43 = *((_OWORD *)v23 + 1);
    *uint64_t v22 = *(_OWORD *)v23;
    v22[1] = v43;
    *((void *)v22 + 4) = *((void *)v23 + 4);
    *((unsigned char *)v22 + 40) = v23[40];
    *((void *)v22 + 6) = *((void *)v23 + 6);
    *((unsigned char *)v22 + 56) = v23[56];
    v48((uint64_t)v22 + *(int *)(v24 + 32), &v23[*(int *)(v24 + 32)], v49);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013787C);
}

uint64_t sub_10013787C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CC1A8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchFeedbackItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013789C);
}

uint64_t sub_10013789C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CC1A8);
}

void sub_1001378A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v26 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v26, v12);
    uint64_t v14 = *(int *)(a3 + 32);
    uint64_t v15 = (uint64_t *)((char *)v7 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_1000D0514(&qword_1002CD540);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v20;
      uint64_t v21 = v16[3];
      v15[2] = v16[2];
      v15[3] = v21;
      uint64_t v22 = *(int *)(v17 + 24);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v23, v24, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v7;
}

uint64_t destroy for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v24 = (char *)a2 + v8;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v24, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v21, v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v24 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12[2] = v13[2];
      v12[3] = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v12, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  uint64_t v18 = *(int *)(v14 + 24);
  uint64_t v19 = (char *)v12 + v18;
  uint64_t v20 = (char *)v13 + v18;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for Goldilocks_ExitMoveBatchErrorFeedbackRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v25 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = v15[3];
      v14[2] = v15[2];
      v14[3] = v24;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v26);
      return a1;
    }
    sub_10012BBD8((uint64_t)v14, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_1000D0514(&qword_1002CD540);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138478);
}

uint64_t sub_100138478(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CD540);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001385BC);
}

void *sub_1001385BC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CD540);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1001386EC()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CC5E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for Goldilocks_ExitMoveBatchErrorFeedbackResponse(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v35 = v13;
      uint64_t v16 = *((void *)v11 + 1);
      *(void *)uint64_t v10 = *(void *)v11;
      *((void *)v10 + 1) = v16;
      *((void *)v10 + 2) = *((void *)v11 + 2);
      v10[24] = v11[24];
      uint64_t v17 = *((void *)v11 + 5);
      *((void *)v10 + 4) = *((void *)v11 + 4);
      *((void *)v10 + 5) = v17;
      *((_DWORD *)v10 + 12) = *((_DWORD *)v11 + 12);
      uint64_t v18 = *((void *)v11 + 8);
      *((void *)v10 + 7) = *((void *)v11 + 7);
      *((void *)v10 + 8) = v18;
      int v36 = v8;
      uint64_t v19 = *((void *)v11 + 10);
      *((void *)v10 + 9) = *((void *)v11 + 9);
      *((void *)v10 + 10) = v19;
      *((void *)v10 + 11) = *((void *)v11 + 11);
      uint64_t v20 = *(int *)(v12 + 44);
      uint64_t v21 = &v10[v20];
      uint64_t v34 = &v11[v20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v21, v34, v7);
      uint64_t v22 = *(int *)(v12 + 48);
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      uint64_t v25 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v28 = *((void *)v24 + 1);
        *(void *)uint64_t v23 = *(void *)v24;
        *((void *)v23 + 1) = v28;
        uint64_t v29 = *((void *)v24 + 3);
        *((void *)v23 + 2) = *((void *)v24 + 2);
        *((void *)v23 + 3) = v29;
        *((void *)v23 + 4) = *((void *)v24 + 4);
        v23[40] = v24[40];
        *((void *)v23 + 6) = *((void *)v24 + 6);
        v23[56] = v24[56];
        uint64_t v30 = *(int *)(v25 + 32);
        uint64_t v31 = &v23[v30];
        uint64_t v32 = &v24[v30];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v36(v31, v32, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v11(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v5 + *(int *)(v6 + 44), v4);
    uint64_t v8 = v5 + *(int *)(v6 + 48);
    uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 + *(int *)(v9 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v4);
    }
  }
  return result;
}

char *initializeWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v33 = v12;
    uint64_t v14 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = *(void *)v10;
    *((void *)v9 + 1) = v14;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    v9[24] = v10[24];
    uint64_t v15 = *((void *)v10 + 5);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *((void *)v9 + 5) = v15;
    *((_DWORD *)v9 + 12) = *((_DWORD *)v10 + 12);
    uint64_t v16 = *((void *)v10 + 8);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    *((void *)v9 + 8) = v16;
    uint64_t v34 = v7;
    uint64_t v17 = *((void *)v10 + 10);
    *((void *)v9 + 9) = *((void *)v10 + 9);
    *((void *)v9 + 10) = v17;
    *((void *)v9 + 11) = *((void *)v10 + 11);
    uint64_t v18 = *(int *)(v11 + 44);
    uint64_t v19 = &v9[v18];
    uint64_t v32 = &v10[v18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7(v19, v32, v6);
    uint64_t v20 = *(int *)(v11 + 48);
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v26 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v26;
      uint64_t v27 = *((void *)v22 + 3);
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *((void *)v21 + 3) = v27;
      *((void *)v21 + 4) = *((void *)v22 + 4);
      v21[40] = v22[40];
      *((void *)v21 + 6) = *((void *)v22 + 6);
      v21[56] = v22[56];
      uint64_t v28 = *(int *)(v23 + 32);
      uint64_t v29 = &v21[v28];
      uint64_t v30 = &v22[v28];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34(v29, v30, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v55 + 24);
  uint64_t v54 = v6;
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void *)(v10 + 16);
      *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
      *(void *)(v9 + 16) = v28;
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      *(void *)(v9 + 40) = *(void *)(v10 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(v10 + 48);
      *(void *)(v9 + 56) = *(void *)(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 64) = *(void *)(v10 + 64);
      *(void *)(v9 + 72) = *(void *)(v10 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 80) = *(void *)(v10 + 80);
      *(void *)(v9 + 88) = *(void *)(v10 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v9 + *(int *)(v11 + 44), v10 + *(int *)(v11 + 44), v54);
      uint64_t v29 = *(int *)(v11 + 48);
      uint64_t v30 = v9 + v29;
      uint64_t v31 = (void *)(v10 + v29);
      uint64_t v32 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      int v35 = v34(v30, 1, v32);
      int v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(void *)uint64_t v30 = *v31;
          *(void *)(v30 + 8) = v31[1];
          *(void *)(v30 + 16) = v31[2];
          *(void *)(v30 + 24) = v31[3];
          uint64_t v37 = v31[4];
          *(unsigned char *)(v30 + 40) = *((unsigned char *)v31 + 40);
          *(void *)(v30 + 32) = v37;
          uint64_t v38 = v31[6];
          *(unsigned char *)(v30 + 56) = *((unsigned char *)v31 + 56);
          *(void *)(v30 + 48) = v38;
          uint64_t v39 = *(int *)(v32 + 32);
          uint64_t v40 = v30 + v39;
          int v41 = (char *)v31 + v39;
          long long v42 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v54);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(void *)uint64_t v30 = *v31;
          *(void *)(v30 + 8) = v31[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v30 + 16) = v31[2];
          *(void *)(v30 + 24) = v31[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v49 = v31[4];
          *(unsigned char *)(v30 + 40) = *((unsigned char *)v31 + 40);
          *(void *)(v30 + 32) = v49;
          uint64_t v50 = v31[6];
          *(unsigned char *)(v30 + 56) = *((unsigned char *)v31 + 56);
          *(void *)(v30 + 48) = v50;
          ((void (*)(uint64_t, char *, uint64_t))v7)(v30 + *(int *)(v32 + 32), (char *)v31 + *(int *)(v32 + 32), v54);
          return a1;
        }
        sub_10012BBD8(v30, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v25 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v26 = (void *)v30;
      uint64_t v27 = v31;
      goto LABEL_8;
    }
    sub_10012BBD8(v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v26 = (void *)v9;
    uint64_t v27 = (const void *)v10;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v53 = a1;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  uint64_t v16 = *(void *)(v10 + 16);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  *(void *)(v9 + 16) = v16;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(_DWORD *)(v9 + 48) = *(_DWORD *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  *(void *)(v9 + 64) = *(void *)(v10 + 64);
  *(void *)(v9 + 72) = *(void *)(v10 + 72);
  *(void *)(v9 + 80) = *(void *)(v10 + 80);
  *(void *)(v9 + 88) = *(void *)(v10 + 88);
  uint64_t v17 = *(int *)(v11 + 44);
  uint64_t v51 = v10 + v17;
  uint64_t v52 = v9 + v17;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v52, v51, v54);
  uint64_t v19 = *(int *)(v11 + 48);
  uint64_t v20 = (void *)(v9 + v19);
  uint64_t v21 = (void *)(v10 + v19);
  uint64_t v22 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *uint64_t v20 = *v21;
    v20[1] = v21[1];
    v20[2] = v21[2];
    v20[3] = v21[3];
    uint64_t v43 = v21[4];
    *((unsigned char *)v20 + 40) = *((unsigned char *)v21 + 40);
    v20[4] = v43;
    uint64_t v44 = v21[6];
    *((unsigned char *)v20 + 56) = *((unsigned char *)v21 + 56);
    v20[6] = v44;
    uint64_t v45 = *(int *)(v22 + 32);
    uint64_t v46 = (char *)v20 + v45;
    uint64_t v47 = (char *)v21 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18((uint64_t)v46, (uint64_t)v47, v54);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a1 = v53;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

char *initializeWithTake for Goldilocks_ExitMoveBatchErrorFeedbackResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((void *)v9 + 2) = *((void *)v10 + 2);
    v9[24] = v10[24];
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_DWORD *)v9 + 12) = *((_DWORD *)v10 + 12);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    long long v14 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v14;
    v7(&v9[*(int *)(v11 + 44)], &v10[*(int *)(v11 + 44)], v6);
    uint64_t v15 = *(int *)(v11 + 48);
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    uint64_t v18 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v22 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, v18))
    {
      uint64_t v19 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      long long v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
      *((void *)v16 + 4) = *((void *)v17 + 4);
      v16[40] = v17[40];
      *((void *)v16 + 6) = *((void *)v17 + 6);
      v16[56] = v17[56];
      v7(&v16[*(int *)(v18 + 32)], &v17[*(int *)(v18 + 32)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v18);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v45 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v27 = *(void *)(v10 + 8);
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = v27;
      swift_bridgeObjectRelease();
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
      uint64_t v28 = *(void *)(v10 + 40);
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      *(void *)(v9 + 40) = v28;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(v10 + 48);
      *(void *)(v9 + 56) = *(void *)(v10 + 56);
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v10 + 72);
      *(void *)(v9 + 64) = *(void *)(v10 + 64);
      *(void *)(v9 + 72) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v10 + 88);
      *(void *)(v9 + 80) = *(void *)(v10 + 80);
      *(void *)(v9 + 88) = v30;
      swift_bridgeObjectRelease();
      v7(v9 + *(int *)(v11 + 44), v10 + *(int *)(v11 + 44), v6);
      uint64_t v31 = *(int *)(v11 + 48);
      uint64_t v32 = v9 + v31;
      uint64_t v33 = (_OWORD *)(v10 + v31);
      uint64_t v34 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v35 = *(void *)(v34 - 8);
      int v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          long long v39 = v33[1];
          *(_OWORD *)uint64_t v32 = *v33;
          *(_OWORD *)(v32 + 16) = v39;
          *(void *)(v32 + 32) = *((void *)v33 + 4);
          *(unsigned char *)(v32 + 40) = *((unsigned char *)v33 + 40);
          *(void *)(v32 + 48) = *((void *)v33 + 6);
          *(unsigned char *)(v32 + 56) = *((unsigned char *)v33 + 56);
          (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v32 + *(int *)(v34 + 32), (char *)v33 + *(int *)(v34 + 32), v6);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return v45;
        }
      }
      else
      {
        if (!v38)
        {
          uint64_t v42 = *((void *)v33 + 1);
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = v42;
          swift_bridgeObjectRelease();
          uint64_t v43 = *((void *)v33 + 3);
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          *(void *)(v32 + 24) = v43;
          swift_bridgeObjectRelease();
          *(void *)(v32 + 32) = *((void *)v33 + 4);
          *(unsigned char *)(v32 + 40) = *((unsigned char *)v33 + 40);
          *(void *)(v32 + 48) = *((void *)v33 + 6);
          *(unsigned char *)(v32 + 56) = *((unsigned char *)v33 + 56);
          v7(v32 + *(int *)(v34 + 32), (uint64_t)v33 + *(int *)(v34 + 32), v6);
          return v45;
        }
        sub_10012BBD8(v32, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v24 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      size_t v25 = (void *)v32;
      uint64_t v26 = v33;
      goto LABEL_8;
    }
    sub_10012BBD8(v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    size_t v25 = (void *)v9;
    uint64_t v26 = (const void *)v10;
LABEL_8:
    memcpy(v25, v26, v24);
    return v45;
  }
  if (v15) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 48) = *(_DWORD *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  long long v16 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v16;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
  v17(v9 + *(int *)(v11 + 44), v10 + *(int *)(v11 + 44), v6);
  uint64_t v18 = *(int *)(v11 + 48);
  uint64_t v19 = (_OWORD *)(v9 + v18);
  long long v20 = (_OWORD *)(v10 + v18);
  uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    long long v40 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v40;
    *((void *)v19 + 4) = *((void *)v20 + 4);
    *((unsigned char *)v19 + 40) = *((unsigned char *)v20 + 40);
    *((void *)v19 + 6) = *((void *)v20 + 6);
    *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
    v17((uint64_t)v19 + *(int *)(v21 + 32), (uint64_t)v20 + *(int *)(v21 + 32), v6);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v45;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100139E38);
}

uint64_t sub_100139E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1000D0514(&qword_1002CC1A8);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitMoveBatchErrorFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100139F48);
}

uint64_t sub_100139F48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1000D0514(&qword_1002CC1A8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10013A050()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CC698, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for Goldilocks_SilentMoverRampingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A148);
}

uint64_t sub_10013A148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_SilentMoverRampingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A20C);
}

uint64_t sub_10013A20C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10013A2B4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Goldilocks_SilentMoverRampingResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_OperationControl(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CC1B0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      *(_DWORD *)((char *)v14 + 9) = *(_DWORD *)((char *)v15 + 9);
      *(_WORD *)((char *)v14 + 13) = *(_WORD *)((char *)v15 + 13);
      v12((char *)v14 + *(int *)(v16 + 44), (char *)v15 + *(int *)(v16 + 44), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v20 = a3[8];
    uint64_t v21 = (uint64_t *)((char *)v4 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_1000D0514(&qword_1002CC1A8);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v45 = v24;
      uint64_t v26 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v26;
      v21[2] = v22[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v22 + 24);
      uint64_t v27 = v22[5];
      v21[4] = v22[4];
      v21[5] = v27;
      *((_DWORD *)v21 + 12) = *((_DWORD *)v22 + 12);
      uint64_t v28 = v22[8];
      v21[7] = v22[7];
      v21[8] = v28;
      uint64_t v46 = v11;
      uint64_t v47 = v12;
      uint64_t v29 = v22[10];
      v21[9] = v22[9];
      v21[10] = v29;
      v21[11] = v22[11];
      uint64_t v30 = *(int *)(v23 + 44);
      uint64_t v31 = (char *)v21 + v30;
      uint64_t v44 = (char *)v22 + v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v31, v44, v46);
      uint64_t v32 = *(int *)(v23 + 48);
      uint64_t v33 = (void *)((char *)v21 + v32);
      uint64_t v34 = (void *)((char *)v22 + v32);
      uint64_t v35 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_1000D0514(&qword_1002CC1B8);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        uint64_t v38 = v34[1];
        *uint64_t v33 = *v34;
        v33[1] = v38;
        uint64_t v39 = v34[3];
        v33[2] = v34[2];
        v33[3] = v39;
        v33[4] = v34[4];
        *((unsigned char *)v33 + 40) = *((unsigned char *)v34 + 40);
        v33[6] = v34[6];
        *((unsigned char *)v33 + 56) = *((unsigned char *)v34 + 56);
        uint64_t v40 = *(int *)(v35 + 32);
        int v41 = (char *)v33 + v40;
        uint64_t v42 = (char *)v34 + v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47(v41, v42, v46);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v21, 0, 1, v23);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_SilentMoverRampingResponse(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Goldilocks_OperationControl(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v14(v6 + *(int *)(v7 + 44), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v8 + *(int *)(v9 + 44), v5);
    uint64_t v11 = v8 + *(int *)(v9 + 48);
    uint64_t v12 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v11 + *(int *)(v12 + 32);
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
    }
  }
  return result;
}

void *initializeWithCopy for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CC1B0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    void *v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    *(_DWORD *)((char *)v13 + 9) = *(_DWORD *)((char *)v14 + 9);
    *(_WORD *)((char *)v13 + 13) = *(_WORD *)((char *)v14 + 13);
    v11((char *)v13 + *(int *)(v15 + 44), (char *)v14 + *(int *)(v15 + 44), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v43 = v22;
    uint64_t v24 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((unsigned char *)v19 + 24) = *((unsigned char *)v20 + 24);
    uint64_t v25 = v20[5];
    v19[4] = v20[4];
    v19[5] = v25;
    *((_DWORD *)v19 + 12) = *((_DWORD *)v20 + 12);
    uint64_t v26 = v20[8];
    v19[7] = v20[7];
    v19[8] = v26;
    uint64_t v44 = v10;
    uint64_t v45 = v11;
    uint64_t v27 = v20[10];
    v19[9] = v20[9];
    v19[10] = v27;
    v19[11] = v20[11];
    uint64_t v28 = *(int *)(v21 + 44);
    uint64_t v29 = (char *)v19 + v28;
    uint64_t v42 = (char *)v20 + v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v29, v42, v44);
    uint64_t v30 = *(int *)(v21 + 48);
    uint64_t v31 = (void *)((char *)v19 + v30);
    uint64_t v32 = (void *)((char *)v20 + v30);
    uint64_t v33 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v36;
      uint64_t v37 = v32[3];
      v31[2] = v32[2];
      v31[3] = v37;
      v31[4] = v32[4];
      *((unsigned char *)v31 + 40) = *((unsigned char *)v32 + 40);
      v31[6] = v32[6];
      *((unsigned char *)v31 + 56) = *((unsigned char *)v32 + 56);
      uint64_t v38 = *(int *)(v33 + 32);
      uint64_t v39 = (char *)v31 + v38;
      uint64_t v40 = (char *)v32 + v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v39, v40, v44);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

void *assignWithCopy for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  uint64_t v71 = *(void (**)(char *, char *))(v67 + 24);
  v71(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(void *)v12;
      v11[8] = v12[8];
      *(void *)uint64_t v11 = v18;
      v11[9] = v12[9];
      v11[10] = v12[10];
      v11[11] = v12[11];
      v11[12] = v12[12];
      v11[13] = v12[13];
      v11[14] = v12[14];
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v67 + 16))(&v11[*(int *)(v13 + 44)], &v12[*(int *)(v13 + 44)], v68);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
      uint64_t v20 = (void (*)(uint64_t, char *, uint64_t))v71;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v19 = sub_1000D0514(&qword_1002CC1B0);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  if (v17)
  {
    sub_10012BBD8((uint64_t)v11, type metadata accessor for Goldilocks_OperationControl);
    goto LABEL_6;
  }
  uint64_t v42 = *(void *)v12;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = v42;
  v11[9] = v12[9];
  v11[10] = v12[10];
  v11[11] = v12[11];
  v11[12] = v12[12];
  v11[13] = v12[13];
  v11[14] = v12[14];
  uint64_t v20 = (void (*)(uint64_t, char *, uint64_t))v71;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v71)(&v11[*(int *)(v13 + 44)], &v12[*(int *)(v13 + 44)], v68);
LABEL_8:
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26((uint64_t)v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      *(void *)uint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = *((void *)v23 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = *((void *)v23 + 2);
      *(unsigned char *)(v22 + 24) = v23[24];
      *(void *)(v22 + 16) = v43;
      *(void *)(v22 + 32) = *((void *)v23 + 4);
      *(void *)(v22 + 40) = *((void *)v23 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v22 + 48) = *((_DWORD *)v23 + 12);
      *(void *)(v22 + 56) = *((void *)v23 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v22 + 64) = *((void *)v23 + 8);
      *(void *)(v22 + 72) = *((void *)v23 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v22 + 80) = *((void *)v23 + 10);
      *(void *)(v22 + 88) = *((void *)v23 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20(v22 + *(int *)(v24 + 44), &v23[*(int *)(v24 + 44)], v68);
      uint64_t v44 = *(int *)(v24 + 48);
      uint64_t v45 = v22 + v44;
      uint64_t v46 = &v23[v44];
      uint64_t v47 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
      int v50 = v49(v45, 1, v47);
      int v51 = v49((uint64_t)v46, 1, v47);
      if (v50)
      {
        if (!v51)
        {
          *(void *)uint64_t v45 = *(void *)v46;
          *(void *)(v45 + 8) = *((void *)v46 + 1);
          *(void *)(v45 + 16) = *((void *)v46 + 2);
          *(void *)(v45 + 24) = *((void *)v46 + 3);
          uint64_t v52 = *((void *)v46 + 4);
          *(unsigned char *)(v45 + 40) = v46[40];
          *(void *)(v45 + 32) = v52;
          uint64_t v53 = *((void *)v46 + 6);
          *(unsigned char *)(v45 + 56) = v46[56];
          *(void *)(v45 + 48) = v53;
          uint64_t v54 = *(int *)(v47 + 32);
          uint64_t v55 = v45 + v54;
          uint64_t v56 = &v46[v54];
          uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v57(v55, v56, v68);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
          return a1;
        }
      }
      else
      {
        if (!v51)
        {
          *(void *)uint64_t v45 = *(void *)v46;
          *(void *)(v45 + 8) = *((void *)v46 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v45 + 16) = *((void *)v46 + 2);
          *(void *)(v45 + 24) = *((void *)v46 + 3);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v64 = *((void *)v46 + 4);
          *(unsigned char *)(v45 + 40) = v46[40];
          *(void *)(v45 + 32) = v64;
          uint64_t v65 = *((void *)v46 + 6);
          *(unsigned char *)(v45 + 56) = v46[56];
          *(void *)(v45 + 48) = v65;
          ((void (*)(uint64_t, char *, uint64_t))v71)(v45 + *(int *)(v47 + 32), &v46[*(int *)(v47 + 32)], v68);
          return a1;
        }
        sub_10012BBD8(v45, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v39 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v40 = (void *)v45;
      int v41 = v46;
      goto LABEL_15;
    }
    sub_10012BBD8(v22, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_14:
    size_t v39 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v40 = (void *)v22;
    int v41 = v23;
LABEL_15:
    memcpy(v40, v41, v39);
    return a1;
  }
  if (v28) {
    goto LABEL_14;
  }
  uint64_t v72 = v25;
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = *((void *)v23 + 1);
  uint64_t v29 = *((void *)v23 + 2);
  *(unsigned char *)(v22 + 24) = v23[24];
  *(void *)(v22 + 16) = v29;
  *(void *)(v22 + 32) = *((void *)v23 + 4);
  *(void *)(v22 + 40) = *((void *)v23 + 5);
  *(_DWORD *)(v22 + 48) = *((_DWORD *)v23 + 12);
  *(void *)(v22 + 56) = *((void *)v23 + 7);
  *(void *)(v22 + 64) = *((void *)v23 + 8);
  *(void *)(v22 + 72) = *((void *)v23 + 9);
  *(void *)(v22 + 80) = *((void *)v23 + 10);
  *(void *)(v22 + 88) = *((void *)v23 + 11);
  uint64_t v30 = *(int *)(v24 + 44);
  uint64_t v69 = (char *)(v22 + v30);
  uint64_t v66 = &v23[v30];
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v69;
  uint64_t v70 = v31;
  v31(v32, v66, v68);
  uint64_t v33 = *(int *)(v24 + 48);
  uint64_t v34 = (void *)(v22 + v33);
  uint64_t v35 = &v23[v33];
  uint64_t v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    *uint64_t v34 = *(void *)v35;
    v34[1] = *((void *)v35 + 1);
    v34[2] = *((void *)v35 + 2);
    v34[3] = *((void *)v35 + 3);
    uint64_t v58 = *((void *)v35 + 4);
    *((unsigned char *)v34 + 40) = v35[40];
    v34[4] = v58;
    uint64_t v59 = *((void *)v35 + 6);
    *((unsigned char *)v34 + 56) = v35[56];
    v34[6] = v59;
    uint64_t v60 = *(int *)(v36 + 32);
    uint64_t v61 = (char *)v34 + v60;
    uint64_t v62 = &v35[v60];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v61, v62, v68);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_SilentMoverRampingResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v32 = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CC1B0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *(_DWORD *)((char *)v12 + 9) = *(_DWORD *)((char *)v13 + 9);
    *(_WORD *)((char *)v12 + 13) = *(_WORD *)((char *)v13 + 13);
    v10((char *)v12 + *(int *)(v14 + 44), (char *)v13 + *(int *)(v14 + 44), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_1000D0514(&qword_1002CC1A8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    *((void *)v18 + 2) = *((void *)v19 + 2);
    *((unsigned char *)v18 + 24) = *((unsigned char *)v19 + 24);
    v18[2] = v19[2];
    *((_DWORD *)v18 + 12) = *((_DWORD *)v19 + 12);
    *((void *)v18 + 7) = *((void *)v19 + 7);
    long long v23 = v19[5];
    v18[4] = v19[4];
    v18[5] = v23;
    v32((char *)v18 + *(int *)(v20 + 44), (char *)v19 + *(int *)(v20 + 44), v9);
    uint64_t v24 = *(int *)(v20 + 48);
    uint64_t v25 = (_OWORD *)((char *)v18 + v24);
    uint64_t v26 = (_OWORD *)((char *)v19 + v24);
    uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      long long v30 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v30;
      *((void *)v25 + 4) = *((void *)v26 + 4);
      *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
      *((void *)v25 + 6) = *((void *)v26 + 6);
      *((unsigned char *)v25 + 56) = *((unsigned char *)v26 + 56);
      v32((char *)v25 + *(int *)(v27 + 32), (char *)v26 + *(int *)(v27 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

void *assignWithTake for Goldilocks_SilentMoverRampingResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v57 = *(void (**)(char *, char *))(*(void *)(v10 - 8) + 40);
  uint64_t v58 = v10;
  uint64_t v59 = *(void *)(v10 - 8);
  v57(v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      v12[8] = v13[8];
      *(_DWORD *)(v12 + 9) = *(_DWORD *)(v13 + 9);
      *(_WORD *)(v12 + 13) = *(_WORD *)(v13 + 13);
      uint64_t v19 = v59;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 32))(&v12[*(int *)(v14 + 44)], &v13[*(int *)(v14 + 44)], v58);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_10012BBD8((uint64_t)v12, type metadata accessor for Goldilocks_OperationControl);
LABEL_6:
    uint64_t v20 = sub_1000D0514(&qword_1002CC1B0);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    uint64_t v19 = v59;
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  v12[9] = v13[9];
  v12[10] = v13[10];
  v12[11] = v13[11];
  v12[12] = v13[12];
  v12[13] = v13[13];
  v12[14] = v13[14];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v57)(&v12[*(int *)(v14 + 44)], &v13[*(int *)(v14 + 44)], v58);
  uint64_t v19 = v59;
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t)a1 + v21;
  long long v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26((uint64_t)v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v40 = *((void *)v23 + 1);
      *(void *)uint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v40;
      swift_bridgeObjectRelease();
      *(void *)(v22 + 16) = *((void *)v23 + 2);
      *(unsigned char *)(v22 + 24) = v23[24];
      uint64_t v41 = *((void *)v23 + 5);
      *(void *)(v22 + 32) = *((void *)v23 + 4);
      *(void *)(v22 + 40) = v41;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v22 + 48) = *((_DWORD *)v23 + 12);
      *(void *)(v22 + 56) = *((void *)v23 + 7);
      swift_bridgeObjectRelease();
      uint64_t v42 = *((void *)v23 + 9);
      *(void *)(v22 + 64) = *((void *)v23 + 8);
      *(void *)(v22 + 72) = v42;
      swift_bridgeObjectRelease();
      uint64_t v43 = *((void *)v23 + 11);
      *(void *)(v22 + 80) = *((void *)v23 + 10);
      *(void *)(v22 + 88) = v43;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v57)(v22 + *(int *)(v24 + 44), &v23[*(int *)(v24 + 44)], v58);
      uint64_t v44 = *(int *)(v24 + 48);
      uint64_t v45 = v22 + v44;
      uint64_t v46 = &v23[v44];
      uint64_t v47 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      uint64_t v48 = *(void *)(v47 - 8);
      uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
      int v50 = v49(v45, 1, v47);
      int v51 = v49((uint64_t)v46, 1, v47);
      if (v50)
      {
        if (!v51)
        {
          long long v52 = *((_OWORD *)v46 + 1);
          *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
          *(_OWORD *)(v45 + 16) = v52;
          *(void *)(v45 + 32) = *((void *)v46 + 4);
          *(unsigned char *)(v45 + 40) = v46[40];
          *(void *)(v45 + 48) = *((void *)v46 + 6);
          *(unsigned char *)(v45 + 56) = v46[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v45 + *(int *)(v47 + 32), &v46[*(int *)(v47 + 32)], v58);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
          return a1;
        }
      }
      else
      {
        if (!v51)
        {
          uint64_t v55 = *((void *)v46 + 1);
          *(void *)uint64_t v45 = *(void *)v46;
          *(void *)(v45 + 8) = v55;
          swift_bridgeObjectRelease();
          uint64_t v56 = *((void *)v46 + 3);
          *(void *)(v45 + 16) = *((void *)v46 + 2);
          *(void *)(v45 + 24) = v56;
          swift_bridgeObjectRelease();
          *(void *)(v45 + 32) = *((void *)v46 + 4);
          *(unsigned char *)(v45 + 40) = v46[40];
          *(void *)(v45 + 48) = *((void *)v46 + 6);
          *(unsigned char *)(v45 + 56) = v46[56];
          ((void (*)(uint64_t, char *, uint64_t))v57)(v45 + *(int *)(v47 + 32), &v46[*(int *)(v47 + 32)], v58);
          return a1;
        }
        sub_10012BBD8(v45, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }
      size_t v37 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1B8) - 8) + 64);
      uint64_t v38 = (void *)v45;
      size_t v39 = v46;
      goto LABEL_14;
    }
    sub_10012BBD8(v22, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_13:
    size_t v37 = *(void *)(*(void *)(sub_1000D0514(&qword_1002CC1A8) - 8) + 64);
    uint64_t v38 = (void *)v22;
    size_t v39 = v23;
LABEL_14:
    memcpy(v38, v39, v37);
    return a1;
  }
  if (v28) {
    goto LABEL_13;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(unsigned char *)(v22 + 24) = v23[24];
  *(void *)(v22 + 16) = *((void *)v23 + 2);
  *(_OWORD *)(v22 + 32) = *((_OWORD *)v23 + 2);
  *(_DWORD *)(v22 + 48) = *((_DWORD *)v23 + 12);
  *(void *)(v22 + 56) = *((void *)v23 + 7);
  long long v29 = *((_OWORD *)v23 + 5);
  *(_OWORD *)(v22 + 64) = *((_OWORD *)v23 + 4);
  *(_OWORD *)(v22 + 80) = v29;
  long long v30 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v30(v22 + *(int *)(v24 + 44), &v23[*(int *)(v24 + 44)], v58);
  uint64_t v31 = *(int *)(v24 + 48);
  uint64_t v32 = (_OWORD *)(v22 + v31);
  uint64_t v33 = &v23[v31];
  uint64_t v34 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    long long v53 = *((_OWORD *)v33 + 1);
    *uint64_t v32 = *(_OWORD *)v33;
    v32[1] = v53;
    *((void *)v32 + 4) = *((void *)v33 + 4);
    *((unsigned char *)v32 + 40) = v33[40];
    *((void *)v32 + 6) = *((void *)v33 + 6);
    *((unsigned char *)v32 + 56) = v33[56];
    v30((uint64_t)v32 + *(int *)(v34 + 32), &v33[*(int *)(v34 + 32)], v58);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_SilentMoverRampingResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013C194);
}

uint64_t sub_10013C194(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_1000D0514(&qword_1002CC1B0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_SilentMoverRampingResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013C328);
}

uint64_t sub_10013C328(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_1000D0514(&qword_1002CC1B0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];
  return v15(v17, a2, a2, v16);
}

void sub_10013C4A8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CCE60, (void (*)(uint64_t))type metadata accessor for Goldilocks_OperationControl);
    if (v1 <= 0x3F)
    {
      sub_10012F1CC(319, (unint64_t *)&unk_1002CC698, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_OperationControl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)(a1 + 9) = *(_DWORD *)((char *)a2 + 9);
    *(_WORD *)(a1 + 13) = *(_WORD *)((char *)a2 + 13);
    uint64_t v5 = *(int *)(a3 + 44);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Goldilocks_OperationControl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 44);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Goldilocks_OperationControl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(unsigned char *)(a1 + 10) = *((unsigned char *)a2 + 10);
  *(unsigned char *)(a1 + 11) = *((unsigned char *)a2 + 11);
  *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
  *(unsigned char *)(a1 + 13) = *((unsigned char *)a2 + 13);
  *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013C9EC);
}

uint64_t sub_10013C9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 44);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_OperationControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013CAB0);
}

uint64_t sub_10013CAB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 9) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10013CB54()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage()
{
  return &type metadata for Goldilocks_OperationControl.OneOf_OptionalUnshareOperationPercentage;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013CC78);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013CC90);
}

ValueMetadata *type metadata accessor for Goldilocks_ErrorInfo.ResultErrorCode()
{
  return &type metadata for Goldilocks_ErrorInfo.ResultErrorCode;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013CCB8);
}

uint64_t sub_10013CCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013CD7C);
}

uint64_t sub_10013CD7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10013CE24()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v9 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v10;
    uint64_t v11 = *(int *)(a3 + 44);
    uint64_t v27 = (uint64_t)a2 + v11;
    uint64_t v28 = a1 + v11;
    *(void *)(a1 + 88) = a2[11];
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v28, v27, v12);
    uint64_t v13 = *(int *)(a3 + 48);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CC1B8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      v14[4] = v15[4];
      *((unsigned char *)v14 + 40) = *((unsigned char *)v15 + 40);
      v14[6] = v15[6];
      *((unsigned char *)v14 + 56) = *((unsigned char *)v15 + 56);
      uint64_t v22 = *(int *)(v16 + 32);
      long long v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26((uint64_t)v23, (uint64_t)v24, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v25 = (char *)(a2 + v9);
  uint64_t v26 = (char *)(a1 + v9);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  v11(v26, v25, v10);
  uint64_t v13 = *(int *)(a3 + 48);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    v14[4] = v15[4];
    *((unsigned char *)v14 + 40) = *((unsigned char *)v15 + 40);
    v14[6] = v15[6];
    *((unsigned char *)v14 + 56) = *((unsigned char *)v15 + 56);
    uint64_t v21 = *(int *)(v16 + 32);
    uint64_t v22 = (char *)v14 + v21;
    long long v23 = (char *)v15 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v22, v23, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v29 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v14 + 32);
      *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
      *(void *)(v13 + 32) = v27;
      uint64_t v28 = *(void *)(v14 + 48);
      *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
      *(void *)(v13 + 48) = v28;
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(v15 + 32), v14 + *(int *)(v15 + 32), v30);
      return a1;
    }
    sub_10012BBD8(v13, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v25 = sub_1000D0514(&qword_1002CC1B8);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  uint64_t v19 = *(void *)(v14 + 32);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
  *(void *)(v13 + 32) = v19;
  uint64_t v20 = *(void *)(v14 + 48);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
  *(void *)(v13 + 48) = v20;
  uint64_t v21 = *(int *)(v15 + 32);
  uint64_t v22 = v13 + v21;
  uint64_t v23 = v14 + v21;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v22, v23, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 80);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CC1B8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    *((void *)v13 + 4) = *((void *)v14 + 4);
    *((unsigned char *)v13 + 40) = *((unsigned char *)v14 + 40);
    *((void *)v13 + 6) = *((void *)v14 + 6);
    *((unsigned char *)v13 + 56) = *((unsigned char *)v14 + 56);
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v28 = v13;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v27 + 40);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 48);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v25 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v17 + 24);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = v26;
      swift_bridgeObjectRelease();
      *(void *)(v16 + 32) = *(void *)(v17 + 32);
      *(unsigned char *)(v16 + 40) = *(unsigned char *)(v17 + 40);
      *(void *)(v16 + 48) = *(void *)(v17 + 48);
      *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v16 + *(int *)(v18 + 32), v17 + *(int *)(v18 + 32), v28);
      return a1;
    }
    sub_10012BBD8(v16, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v23 = sub_1000D0514(&qword_1002CC1B8);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  long long v22 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v22;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  *(unsigned char *)(v16 + 40) = *(unsigned char *)(v17 + 40);
  *(void *)(v16 + 48) = *(void *)(v17 + 48);
  *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v16 + *(int *)(v18 + 32), v17 + *(int *)(v18 + 32), v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013DC8C);
}

uint64_t sub_10013DC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CC1B8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013DDD0);
}

uint64_t sub_10013DDD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000D0514(&qword_1002CC1B8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10013DF00()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10012F1CC(319, (unint64_t *)&unk_1002CD0E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *_s22CloudKitImplementation25Goldilocks_FoundDuplicateVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Goldilocks_ZoneID(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_1000D0514(&qword_1002CD540);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    void *v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = *(int *)(v15 + 24);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v25 + 24);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = *((void *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v26);
      return a1;
    }
    sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v23 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *((void *)v13 + 3) = *((void *)v14 + 3);
  uint64_t v19 = *(int *)(v15 + 24);
  uint64_t v20 = &v13[v19];
  uint64_t v21 = &v14[v19];
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000D0514(&qword_1002CD540);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t _s22CloudKitImplementation25Goldilocks_FoundDuplicateVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v24 + 40);
  ((void (*)(uint64_t, uint64_t))v11)(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  long long v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v22 = *((void *)v14 + 1);
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *((void *)v14 + 3);
      *((void *)v13 + 2) = *((void *)v14 + 2);
      *((void *)v13 + 3) = v23;
      swift_bridgeObjectRelease();
      v11(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v25);
      return a1;
    }
    sub_10012BBD8((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = sub_1000D0514(&qword_1002CD540);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  long long v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v19;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013EA2C);
}

uint64_t sub_10013EA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013EA38(a1, a2, a3, &qword_1002CD540);
}

uint64_t sub_10013EA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = sub_1000D0514(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 28);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013EB7C);
}

uint64_t sub_10013EB7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10013EB88(a1, a2, a3, a4, &qword_1002CD540);
}

uint64_t sub_10013EB88(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = sub_1000D0514(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 28);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void sub_10013ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    sub_10012F1CC(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for Goldilocks_ExitStatusFeedbackRequest.ClientStatus()
{
  return &type metadata for Goldilocks_ExitStatusFeedbackRequest.ClientStatus;
}

uint64_t getEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013EDD8);
}

uint64_t storeEnumTagSinglePayload for Goldilocks_ExitStatusFeedbackResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013EDF0);
}

uint64_t sub_10013EE14(uint64_t a1)
{
  if (a1 < 1)
  {
    id v1 = [self standardUserDefaults];
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 doubleForKey:v2];
  }
  return Date.init(timeIntervalSinceNow:)();
}

id sub_10013EEF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000D0514(&qword_1002CA450);
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (a4 < 1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10024A2A0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v12;
    if (v8)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      a2 = 0x65206E776F6E6B55;
      a3 = 0xEC000000726F7272;
    }
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a2;
    *(void *)(inited + 56) = a3;
    sub_100140430(inited);
    id v14 = objc_allocWithZone((Class)NSError);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = swift_initStackObject();
    *(_OWORD *)(v9 + 16) = xmmword_10024A2C0;
    *(void *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v9 + 40) = v10;
    if (v8)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      a2 = 0x65206E776F6E6B55;
      a3 = 0xEC000000726F7272;
    }
    *(void *)(v9 + 72) = &type metadata for String;
    *(void *)(v9 + 48) = a2;
    *(void *)(v9 + 56) = a3;
    *(void *)(v9 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v9 + 88) = v13;
    *(void *)(v9 + 120) = type metadata accessor for Date();
    sub_1000E1834((uint64_t *)(v9 + 96));
    sub_10013EE14(a4);
    sub_100140430(v9);
    id v14 = objc_allocWithZone((Class)NSError);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v14 initWithDomain:v15 code:a1 userInfo:isa];

  return v17;
}

id sub_10013F16C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v5 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v5 = 0xD000000000000015;
      unint64_t v4 = 0x800000010020B280;
    }
    uint64_t v10 = qword_100251560[v3];
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = 0xD000000000000012;
      unint64_t v8 = 0x800000010020B2A0;
    }
    v12._countAndFlagsBits = v7;
    v12._object = (void *)v8;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x203A65646F632820;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    uint64_t v11 = 0;
    unint64_t v4 = 0xE000000000000000;
    uint64_t v10 = 150;
  }
  id v16 = sub_10013EEF4(v10, v11, v4, a2);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10013F2E4(uint64_t a1, void *a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000D0514(&qword_1002CA580);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v30 = (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v30 - v12;
  uint64_t v14 = sub_1000D0514((uint64_t *)&unk_1002CD370);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Utility_DeleteZoneResponse(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v16, (uint64_t *)&unk_1002CD370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1000E27E8((uint64_t)v16, (uint64_t *)&unk_1002CD370);
    if (v31) {
      id v21 = v31;
    }
    else {
      id v21 = sub_10013EEF4(150, 0xD00000000000001ALL, 0x800000010020B260, 0);
    }
    swift_errorRetain();
    v33(0, v21);
    return swift_errorRelease();
  }
  else
  {
    sub_1001403BC((uint64_t)v16, (uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
    uint64_t v22 = (uint64_t)&v20[*(int *)(v17 + 24)];
    sub_1000E200C(v22, (uint64_t)v13, &qword_1002CA580);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    int v24 = v23(v13, 1, v5);
    sub_1000E27E8((uint64_t)v13, &qword_1002CA580);
    if (v24 == 1)
    {
      v33(1, 0);
    }
    else
    {
      uint64_t v25 = v30;
      sub_1000E200C(v22, v30, &qword_1002CA580);
      if (v23((char *)v25, 1, v5) == 1)
      {
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0xE000000000000000;
        *((void *)v8 + 2) = 0;
        v8[24] = 1;
        UnknownStorage.init()();
        uint64_t v26 = &v8[*(int *)(v5 + 28)];
        uint64_t v27 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
        sub_1000E27E8(v25, &qword_1002CA580);
      }
      else
      {
        sub_1001403BC(v25, (uint64_t)v8, type metadata accessor for Utility_ErrorInfo.ResultError);
      }
      id v29 = sub_10013F16C((uint64_t)v8, 0);
      sub_10014035C((uint64_t)v8, type metadata accessor for Utility_ErrorInfo.ResultError);
      v33(0, v29);
      swift_errorRelease();
    }
    return sub_10014035C((uint64_t)v20, type metadata accessor for Utility_DeleteZoneResponse);
  }
}

uint64_t sub_10013F7F4(uint64_t a1, void *a2, void (*a3)(uint64_t, id))
{
  uint64_t v6 = sub_1000D0514(&qword_1002CD358);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Utility_DeleteAllZonesResponse(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v8, &qword_1002CD358);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000E27E8((uint64_t)v8, &qword_1002CD358);
    if (a2) {
      id v13 = a2;
    }
    else {
      id v13 = sub_10013EEF4(150, 0xD000000000000018, 0x800000010020B210, 0);
    }
    swift_errorRetain();
    a3(0, v13);
    return swift_errorRelease();
  }
  else
  {
    sub_1001403BC((uint64_t)v8, (uint64_t)v12, type metadata accessor for Utility_DeleteAllZonesResponse);
    if (*((void *)v12 + 1))
    {
      if (a2) {
        id v14 = a2;
      }
      else {
        id v14 = sub_10013EEF4(150, 0xD000000000000018, 0x800000010020B210, 0);
      }
      swift_errorRetain();
      a3(0, v14);
      swift_errorRelease();
    }
    else
    {
      a3(1, 0);
    }
    return sub_10014035C((uint64_t)v12, type metadata accessor for Utility_DeleteAllZonesResponse);
  }
}

id CPLCKPhotosSharedLibraryOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

id CPLCKUtilitiesOperation.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKUtilitiesOperation();
  return objc_msgSendSuper2(&v2, "init");
}

id CPLCKUtilitiesOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKUtilitiesOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s22CloudKitImplementation23CPLCKUtilitiesOperationC10deleteZone8withName17completionHandlerSo010CKDatabaseE0CSS_ySb_s5Error_pSgtctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = sub_1000D0514(&qword_1002CD360);
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CAC00);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Utility_DeleteZoneRequest(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char **)((char *)&v25 - v17);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - v19;
  *uint64_t v18 = 0;
  v18[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  sub_1000EE748();
  static Message.with(_:)();
  sub_10014035C((uint64_t)v18, type metadata accessor for Utility_DeleteZoneRequest);
  swift_bridgeObjectRelease();
  sub_1001403BC((uint64_t)v15, (uint64_t)v18, type metadata accessor for Utility_DeleteZoneRequest);
  sub_1001403BC((uint64_t)v18, (uint64_t)v20, type metadata accessor for Utility_DeleteZoneRequest);
  sub_1001402B4((uint64_t)v20, (uint64_t)v10, type metadata accessor for Utility_DeleteZoneRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v25, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v26);
  id v21 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD368));
  uint64_t v22 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v27;
  *(void *)(v23 + 24) = v28;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014035C((uint64_t)v20, type metadata accessor for Utility_DeleteZoneRequest);
  return v22;
}

uint64_t _s22CloudKitImplementation23CPLCKUtilitiesOperationC14deleteAllZones17completionHandlerSo010CKDatabaseE0CySb_s5Error_pSgtc_tFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D0514(&qword_1002CD348);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CAC10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Utility_DeleteAllZonesRequest(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  sub_1001402B4((uint64_t)v14, (uint64_t)v10, type metadata accessor for Utility_DeleteAllZonesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v4);
  id v15 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD350));
  uint64_t v16 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014035C((uint64_t)v14, type metadata accessor for Utility_DeleteAllZonesRequest);
  return v16;
}

uint64_t type metadata accessor for CPLCKUtilitiesOperation()
{
  return self;
}

uint64_t sub_100140220()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100140258(char a1, uint64_t a2)
{
  sub_100140568(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100140260(uint64_t a1, void *a2)
{
  return sub_10013F7F4(a1, a2, *(void (**)(uint64_t, id))(v2 + 16));
}

uint64_t sub_100140268(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001402B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014031C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100140354(uint64_t a1, void *a2)
{
  return sub_10013F2E4(a1, a2, *(void (**)(uint64_t, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014035C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001403BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100140430(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D0514(&qword_1002CD528);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000E200C(v6, (uint64_t)&v15, (uint64_t *)&unk_1002CD530);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001466B8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10014A55C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100140568(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

unint64_t sub_1001405D8(uint64_t a1, char a2)
{
  if (a2)
  {
    unint64_t result = 0xD000000000000018;
    switch(a1)
    {
      case 1:
        unint64_t result = 0xD000000000000014;
        break;
      case 2:
        unint64_t result = 0x4520726576726553;
        break;
      case 3:
        unint64_t result = 0xD000000000000014;
        break;
      case 4:
      case 5:
      case 8:
        unint64_t result = 0xD000000000000011;
        break;
      case 6:
        unint64_t result = 0x746F4E20656E6F5ALL;
        break;
      case 7:
        unint64_t result = 0xD000000000000010;
        break;
      case 9:
        unint64_t result = 0xD000000000000019;
        break;
      case 10:
        unint64_t result = 0xD000000000000016;
        break;
      case 11:
        unint64_t result = 0xD00000000000001BLL;
        break;
      default:
        return result;
    }
  }
  else
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0xD00000000000001FLL;
  }
  return result;
}

uint64_t sub_1001407C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15)
{
  int v37 = a8;
  uint64_t v36 = a7;
  int v34 = a6;
  uint64_t v32 = a5;
  uint64_t v28 = a3;
  uint64_t v35 = a14;
  int v33 = a11;
  uint64_t v31 = a10;
  uint64_t v30 = a13;
  uint64_t v29 = a12;
  uint64_t v19 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  __chkstk_darwin(v19);
  id v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0xE000000000000000;
  *(void *)(a9 + 16) = 0;
  *(unsigned char *)(a9 + 24) = 1;
  *(void *)(a9 + 32) = 0;
  *(unsigned char *)(a9 + 40) = 1;
  *(void *)(a9 + 48) = &_swiftEmptyArrayStorage;
  *(void *)(a9 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a9 + 64) = 0;
  *(void *)(a9 + 72) = 0;
  *(unsigned char *)(a9 + 80) = 1;
  *(void *)(a9 + 88) = 0;
  *(unsigned char *)(a9 + 96) = 1;
  UnknownStorage.init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(a9 + *(int *)(v19 + 52), 1, 1, v22);
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v51 = v28;
  uint64_t v52 = a4;
  sub_10014A7B8(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v25;
  uint64_t v39 = v32;
  char v40 = v34 & 1;
  uint64_t v41 = v29;
  uint64_t v42 = v30;
  uint64_t v43 = v36;
  char v44 = v37 & 1;
  uint64_t v45 = v31;
  char v46 = v33 & 1;
  uint64_t v47 = v35;
  __int16 v48 = a15 & 0x1FF;
  sub_10014A7B8(&qword_1002CBFA0, (void (*)(uint64_t))type metadata accessor for Goldilocks_InitiateExitRequest);
  static Message.with(_:)();
  sub_10014A808(a9, type metadata accessor for Goldilocks_InitiateExitRequest);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10014A808((uint64_t)v25, type metadata accessor for Goldilocks_ZoneID);
  return sub_10014A8D0((uint64_t)v21, a9, type metadata accessor for Goldilocks_InitiateExitRequest);
}

uint64_t sub_100140B74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unsigned __int16 a12)
{
  int v34 = a8;
  uint64_t v33 = a7;
  int v30 = a4;
  uint64_t v29 = a3;
  int v36 = a12;
  int v32 = a10;
  uint64_t v31 = a9;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014A868(a2, (uint64_t)v22, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v23 = a1 + *(int *)(type metadata accessor for Goldilocks_InitiateExitRequest(0) + 52);
  sub_1000E27E8(v23, &qword_1002CD540);
  sub_10014A8D0((uint64_t)v22, v23, type metadata accessor for Goldilocks_ZoneID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
  *(void *)(a1 + 32) = v29;
  *(unsigned char *)(a1 + 40) = v30 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 16) = v33;
  *(unsigned char *)(a1 + 24) = v34 & 1;
  *(void *)(a1 + 72) = v31;
  *(unsigned char *)(a1 + 80) = v32 & 1;
  UUID.init()();
  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v35);
  uint64_t result = swift_bridgeObjectRelease();
  __int16 v28 = v36;
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v26;
  if ((v28 & 0x100) == 0)
  {
    *(void *)(a1 + 88) = a11;
    *(unsigned char *)(a1 + 96) = v28 & 1;
  }
  return result;
}

uint64_t sub_100140E28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t sub_100140EA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014A868(a2, (uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v16 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchRequest(0) + 28);
  sub_1000E27E8(v16, &qword_1002CD540);
  sub_10014A8D0((uint64_t)v15, v16, type metadata accessor for Goldilocks_ZoneID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  *(_DWORD *)(a1 + 16) = a3;
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v21;
  }
  else
  {
    UUID.init()();
    uint64_t v18 = UUID.uuidString.getter();
    a5 = v19;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v18;
  }
  *(void *)(a1 + 8) = a5;
  return result;
}

uint64_t sub_1001410DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
  }
  else
  {
    UUID.init()();
    uint64_t v11 = UUID.uuidString.getter();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v11;
    a1[1] = v13;
  }
  return result;
}

uint64_t sub_1001411FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 48) = Int32.init(truncating:)();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  return result;
}

uint64_t sub_10014128C(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v31[0] = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v31 - v7;
  id v9 = [a2 originRecordID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  swift_bridgeObjectRelease();
  *a1 = v10;
  a1[1] = v12;
  id v13 = [a2 destinationRecordID];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  swift_bridgeObjectRelease();
  a1[2] = v14;
  a1[3] = v16;
  id v17 = [a2 errorMessage];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  id v21 = [a2 errorCode];
  id v22 = [a2 errorDomain];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0xE000000000000000;
  *((void *)v8 + 2) = 0;
  v8[24] = 1;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0xE000000000000000;
  *((_DWORD *)v8 + 12) = 0;
  *((void *)v8 + 7) = &_swiftEmptyArrayStorage;
  *((void *)v8 + 8) = 0;
  *((void *)v8 + 9) = 0xE000000000000000;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v26 = &v8[*(int *)(v4 + 48)];
  uint64_t v27 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v31[4] = v18;
  v31[5] = v20;
  v31[6] = v21;
  v31[7] = v23;
  v31[8] = v25;
  sub_10014A7B8(&qword_1002CD580, (void (*)(uint64_t))type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v28 = v31[0];
  static Message.with(_:)();
  sub_10014A808((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10014A8D0(v28, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v29 = (uint64_t)a1 + *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0) + 28);
  sub_1000E27E8(v29, &qword_1002CC1A8);
  sub_10014A8D0((uint64_t)v8, v29, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v4);
}

size_t sub_1001415FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6)
{
  unint64_t v62 = a6;
  uint64_t v65 = a5;
  uint64_t v10 = type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem(0);
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v63 = (char *)&v56 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (uint64_t *)((char *)&v56 - v16);
  __chkstk_darwin(v15);
  uint64_t v57 = (char *)&v56 - v18;
  uint64_t v19 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  id v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v56 - v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2;
  a1[2] = a3;
  uint64_t v26 = *(void *)(a4 + 24);
  uint64_t v25 = *(void *)(a4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = v26;
  a1[4] = v25;
  uint64_t v66 = v65;
  sub_10014A7B8(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  uint64_t v27 = v59;
  static Message.with(_:)();
  uint64_t v58 = v24;
  sub_10014A868((uint64_t)v24, (uint64_t)v22, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v28 = *(int *)(type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0) + 32);
  uint64_t v59 = a1;
  uint64_t v29 = (uint64_t)a1 + v28;
  sub_1000E27E8((uint64_t)a1 + v28, &qword_1002CD540);
  sub_10014A8D0((uint64_t)v22, v29, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v30 = v29;
  unint64_t v31 = v62;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v30, 0, 1, v19);
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v34 = (uint64_t)v61;
  if (!v32)
  {
LABEL_19:
    sub_10014A808((uint64_t)v58, type metadata accessor for Goldilocks_ZoneID);
    uint64_t v55 = v59;
    size_t result = swift_bridgeObjectRelease();
    *uint64_t v55 = v33;
    return result;
  }
  uint64_t v67 = &_swiftEmptyArrayStorage;
  size_t result = sub_100148364(0, v32 & ~(v32 >> 63), 0);
  if ((v32 & 0x8000000000000000) == 0)
  {
    uint64_t v65 = v27;
    if ((v31 & 0xC000000000000001) != 0)
    {
      uint64_t v36 = 0;
      uint64_t v37 = (uint64_t)v57;
      uint64_t v38 = (uint64_t)v63;
      do
      {
        uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        void *v17 = 0;
        v17[1] = 0xE000000000000000;
        v17[2] = 0;
        v17[3] = 0xE000000000000000;
        UnknownStorage.init()();
        char v40 = (char *)v17 + *(int *)(v10 + 28);
        uint64_t v41 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        uint64_t v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
        __chkstk_darwin(v42);
        *(&v56 - 2) = v39;
        sub_10014A7B8(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v43 = v65;
        static Message.with(_:)();
        uint64_t v65 = v43;
        sub_10014A808((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        swift_unknownObjectRelease();
        sub_10014A8D0(v38, (uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        sub_10014A8D0((uint64_t)v17, v37, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v33 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100148364(0, v33[2] + 1, 1);
          uint64_t v33 = v67;
        }
        unint64_t v45 = v33[2];
        unint64_t v44 = v33[3];
        if (v45 >= v44 >> 1)
        {
          sub_100148364(v44 > 1, v45 + 1, 1);
          uint64_t v33 = v67;
        }
        ++v36;
        v33[2] = v45 + 1;
        sub_10014A8D0(v37, (uint64_t)v33+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(void *)(v64 + 72) * v45, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
      }
      while (v32 != v36);
    }
    else
    {
      char v46 = (uint64_t *)(v31 + 32);
      uint64_t v47 = (uint64_t)v63;
      do
      {
        uint64_t v48 = *v46;
        void *v17 = 0;
        v17[1] = 0xE000000000000000;
        v17[2] = 0;
        v17[3] = 0xE000000000000000;
        swift_unknownObjectRetain();
        UnknownStorage.init()();
        uint64_t v49 = (char *)v17 + *(int *)(v10 + 28);
        uint64_t v50 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
        uint64_t v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 1, 1, v50);
        __chkstk_darwin(v51);
        *(&v56 - 2) = v48;
        sub_10014A7B8(&qword_1002CC260, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v52 = v65;
        static Message.with(_:)();
        uint64_t v65 = v52;
        sub_10014A808((uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        swift_unknownObjectRelease();
        sub_10014A8D0(v47, (uint64_t)v17, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        sub_10014A8D0((uint64_t)v17, v34, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        uint64_t v33 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100148364(0, v33[2] + 1, 1);
          uint64_t v33 = v67;
        }
        unint64_t v54 = v33[2];
        unint64_t v53 = v33[3];
        if (v54 >= v53 >> 1)
        {
          sub_100148364(v53 > 1, v54 + 1, 1);
          uint64_t v33 = v67;
        }
        v33[2] = v54 + 1;
        sub_10014A8D0(v34, (uint64_t)v33+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(void *)(v64 + 72) * v54, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
        ++v46;
        --v32;
      }
      while (v32);
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100141DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v23 = a5;
  uint64_t v9 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v21[-v14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v22 = a4;
  sub_10014A7B8(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  static Message.with(_:)();
  sub_10014A868((uint64_t)v15, (uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
  uint64_t v16 = a1 + *(int *)(type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0) + 28);
  sub_1000E27E8(v16, &qword_1002CD540);
  sub_10014A8D0((uint64_t)v13, v16, type metadata accessor for Goldilocks_ZoneID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  unint64_t v17 = sub_100148854(v23);
  __int16 v19 = v18;
  uint64_t result = sub_10014A808((uint64_t)v15, type metadata accessor for Goldilocks_ZoneID);
  if ((v19 & 0x100) == 0)
  {
    *(void *)(a1 + 16) = v17;
    *(unsigned char *)(a1 + 24) = v19 & 1;
  }
  return result;
}

uint64_t sub_100142008(uint64_t *a1, id a2)
{
  id v4 = [a2 zoneName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v7;
  id v8 = [a2 ownerName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = v9;
  a1[3] = v11;
  return result;
}

id sub_1001420B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  sub_100140430((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v60 = a8;
  if (a4 >= 1)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    uint64_t v65 = (void *)type metadata accessor for Date();
    sub_1000E1834((uint64_t *)&v64);
    Date.init(timeIntervalSinceNow:)();
    sub_10014A55C(&v64, v63);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100147940(v63, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __int16 v18 = self;
  id v19 = [v18 standardUserDefaults];
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 stringForKey:v20];

  if (v21)
  {
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
    uint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = v22;
    *((void *)&v64 + 1) = v24;
    sub_10014A55C(&v64, v63);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_100147940(v63, v25, v27, v28);
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v29 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v29 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;
    uint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = a5;
    *((void *)&v64 + 1) = a6;
    sub_10014A55C(&v64, v63);
    swift_bridgeObjectRetain();
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    sub_100147940(v63, v30, v32, v33);
    goto LABEL_9;
  }
LABEL_10:
  id v34 = [v18 standardUserDefaults];
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v34 stringForKey:v35];

  if (v36)
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
    uint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = v37;
    *((void *)&v64 + 1) = v39;
    sub_10014A55C(&v64, v63);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    sub_100147940(v63, v40, v42, v43);
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v44 = HIBYTE(v60) & 0xF;
  if ((v60 & 0x2000000000000000) == 0) {
    uint64_t v44 = a7 & 0xFFFFFFFFFFFFLL;
  }
  if (v44)
  {
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;
    uint64_t v65 = &type metadata for String;
    *(void *)&long long v64 = a7;
    *((void *)&v64 + 1) = v60;
    sub_10014A55C(&v64, v63);
    swift_bridgeObjectRetain();
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    sub_100147940(v63, v45, v47, v48);
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;
  uint64_t v52 = HIBYTE(a3) & 0xF;
  uint64_t v53 = a2;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v52 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v52)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a3 = 0xED0000726F727265;
    uint64_t v53 = 0x206E776F6E6B6E55;
  }
  uint64_t v65 = &type metadata for String;
  *(void *)&long long v64 = v53;
  *((void *)&v64 + 1) = a3;
  sub_10014A55C(&v64, v63);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  sub_100147940(v63, v49, v51, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v55 = objc_allocWithZone((Class)NSError);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v58 = [v55 initWithDomain:v56 code:a1 userInfo:isa];

  return v58;
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.participantUserID.getter()
{
  return sub_100142E44(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID);
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.participantUserID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100142F1C(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID);
}

uint64_t (*CPLCKPhotosSharedLibraryExitResponse.participantUserID.modify())()
{
  return j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_stagingZoneID);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.setter(void *a1)
{
}

uint64_t (*CPLCKPhotosSharedLibraryExitResponse.stagingZoneID.modify())()
{
  return j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.error.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_errorRetain();
  return v2;
}

uint64_t CPLCKPhotosSharedLibraryExitResponse.error.setter(uint64_t a1)
{
  Swift::String v3 = (void *)(v1 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error);
  swift_beginAccess();
  *Swift::String v3 = a1;
  return swift_errorRelease();
}

uint64_t (*CPLCKPhotosSharedLibraryExitResponse.error.modify())()
{
  return j_j__swift_endAccess;
}

void CPLCKPhotosSharedLibraryExitResponse.init()()
{
}

id CPLCKPhotosSharedLibraryExitResponse.__deallocating_deinit()
{
  return sub_100146680(type metadata accessor for CPLCKPhotosSharedLibraryExitResponse);
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryExitResponse()
{
  return self;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.getter()
{
  return sub_100142E44(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100142F1C(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID);
}

uint64_t (*CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.originRecordID.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.getter()
{
  return sub_100142E44(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.setter(uint64_t a1, uint64_t a2)
{
  return sub_100142F1C(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID);
}

uint64_t (*CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.getter()
{
  return sub_100142E44(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage);
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.setter(uint64_t a1, uint64_t a2)
{
  return sub_100142F1C(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage);
}

uint64_t (*CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorMessage.modify())()
{
  return j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorCode);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void sub_100142CA0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a3;
  id v7 = a3;
}

void CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.setter(void *a1)
{
}

void sub_100142D08(void *a1, void *a2)
{
  id v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *id v4 = a1;
}

uint64_t (*CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode.modify())()
{
  return j_j__swift_endAccess;
}

id sub_100142DC0()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.getter()
{
  return sub_100142E44(&OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain);
}

uint64_t sub_100142E44(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_100142EA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *uint64_t v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  return sub_100142F1C(a1, a2, &OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain);
}

uint64_t sub_100142F1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorDomain.modify())()
{
  return j_j__swift_endAccess;
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_originRecordID];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0xE000000000000000;
  uint64_t v2 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_destinationRecordID];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0xE000000000000000;
  uint64_t v3 = &v0[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorMessage];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0xE000000000000000;
  uint64_t v4 = OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorCode;
  id v5 = objc_allocWithZone((Class)NSNumber);
  uint64_t v6 = v0;
  *(void *)&v0[v4] = [v5 init];
  uint64_t v7 = &v6[OBJC_IVAR___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem_errorDomain];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0xE000000000000000;

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem()
{
  return self;
}

id CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.__deallocating_deinit()
{
  return sub_100146680(type metadata accessor for CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem);
}

uint64_t sub_10014322C(void *a1, int *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, int, void), uint64_t a4)
{
  uint64_t v83 = a4;
  v84 = a3;
  uint64_t v82 = a2;
  uint64_t v85 = a1;
  uint64_t v4 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Goldilocks_OperationControl(0);
  uint64_t v79 = *(void *)(v8 - 8);
  uint64_t v80 = v8;
  __chkstk_darwin(v8);
  uint64_t v77 = (uint64_t *)((char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_1000D0514(&qword_1002CC1B0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v76 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v78 = (uint64_t)&v74 - v13;
  uint64_t v14 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v81 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  __int16 v18 = (char *)&v74 - v17;
  uint64_t v19 = sub_1000D0514(&qword_1002CD610);
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Goldilocks_SilentMoverRampingResponse(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  char v28 = (char *)&v74 - v27;
  sub_1000E200C((uint64_t)v85, (uint64_t)v21, &qword_1002CD610);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
  {
    sub_10014A8D0((uint64_t)v21, (uint64_t)v28, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    uint64_t v30 = (uint64_t)&v28[*(int *)(v22 + 32)];
    sub_1000E200C(v30, (uint64_t)v18, &qword_1002CC1A8);
    uint64_t v31 = *(unsigned int (**)(void, void, void))(v5 + 48);
    uint64_t v82 = (int *)v4;
    uint64_t v75 = (unsigned int (*)(uint64_t, uint64_t, int *))v31;
    unsigned int v32 = v31(v18, 1, v4);
    sub_1000E27E8((uint64_t)v18, &qword_1002CC1A8);
    sub_10014A868((uint64_t)v28, (uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    uint64_t v85 = v28;
    if (v32 == 1)
    {
      uint64_t v33 = v78;
      sub_1000E200C((uint64_t)&v26[*(int *)(v22 + 28)], v78, &qword_1002CC1B0);
      uint64_t v34 = v80;
      NSString v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
      int v36 = v35(v33, 1, v80);
      sub_1000E27E8(v33, &qword_1002CC1B0);
      sub_10014A808((uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
      if (v36 != 1)
      {
        uint64_t v37 = v76;
        sub_1000E200C((uint64_t)v85 + *(int *)(v22 + 28), v76, &qword_1002CC1B0);
        if (v35(v37, 1, v34) == 1)
        {
          uint64_t v38 = v77;
          *uint64_t v77 = 0;
          *((unsigned char *)v38 + 8) = 1;
          *(_DWORD *)((char *)v38 + 9) = 0;
          *(_WORD *)((char *)v38 + 13) = 0;
          UnknownStorage.init()();
          uint64_t result = sub_1000E27E8(v37, &qword_1002CC1B0);
        }
        else
        {
          uint64_t v38 = v77;
          uint64_t result = sub_10014A8D0(v37, (uint64_t)v77, type metadata accessor for Goldilocks_OperationControl);
        }
        uint64_t v58 = *((unsigned __int8 *)v38 + 9);
        char v59 = *((unsigned char *)v38 + 11);
        char v60 = *((unsigned char *)v38 + 12);
        char v61 = *((unsigned char *)v38 + 13);
        char v62 = *((unsigned char *)v38 + 14);
        char v63 = *((unsigned char *)v38 + 8);
        uint64_t v40 = v85;
        uint64_t v64 = v85[2];
        LODWORD(v82) = *((unsigned __int8 *)v38 + 10);
        if (v63)
        {
          uint64_t v66 = *v85;
          uint64_t v65 = v85[1];
          uint64_t v67 = v64;
          swift_bridgeObjectRetain();
          HIBYTE(v72) = v62;
          BYTE2(v72) = v61;
          BYTE1(v72) = v60;
          LOBYTE(v72) = v59;
          v84(1, v66, v65, v67, 0, 0, v58, v82, v72, 0);
LABEL_30:
          swift_bridgeObjectRelease();
          sub_10014A808((uint64_t)v38, type metadata accessor for Goldilocks_OperationControl);
          return sub_10014A808((uint64_t)v40, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
        }
        if ((~*v38 & 0x7FF0000000000000) != 0)
        {
          double v68 = *(double *)v38;
          if (*(double *)v38 > -2147483650.0)
          {
            uint64_t v80 = v64;
            LODWORD(v81) = v58;
            if (v68 < 2147483650.0)
            {
              uint64_t v70 = *v85;
              uint64_t v69 = v85[1];
              uint64_t v71 = (int)v68;
              swift_bridgeObjectRetain();
              HIBYTE(v73) = v62;
              BYTE2(v73) = v61;
              BYTE1(v73) = v60;
              LOBYTE(v73) = v59;
              v84(1, v70, v69, v80, 1, v71, v81, v82, v73, 0);
              uint64_t v38 = v77;
              goto LABEL_30;
            }
LABEL_36:
            __break(1u);
            return result;
          }
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    else
    {
      sub_10014A808((uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    }
    uint64_t v40 = v85;
    uint64_t v42 = *v85;
    uint64_t v41 = v85[1];
    uint64_t v43 = v85[2];
    uint64_t v44 = v81;
    sub_1000E200C(v30, v81, &qword_1002CC1A8);
    uint64_t v45 = v82;
    if (v75(v44, 1, v82) == 1)
    {
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0xE000000000000000;
      *((void *)v7 + 2) = 0;
      v7[24] = 1;
      *((void *)v7 + 4) = 0;
      *((void *)v7 + 5) = 0xE000000000000000;
      *((_DWORD *)v7 + 12) = 0;
      *((void *)v7 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v7 + 8) = 0;
      *((void *)v7 + 9) = 0xE000000000000000;
      *((void *)v7 + 10) = 0;
      *((void *)v7 + 11) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      uint64_t v46 = &v7[v45[12]];
      uint64_t v47 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 1, 1, v47);
      uint64_t result = sub_1000E27E8(v44, &qword_1002CC1A8);
    }
    else
    {
      sub_10014A8D0(v44, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v48 = v40[2];
    uint64_t v49 = 1000 * v48;
    if ((unsigned __int128)(v48 * (__int128)1000) >> 64 != (1000 * v48) >> 63)
    {
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v50 = *((void *)v7 + 1);
    uint64_t v51 = *((void *)v7 + 2);
    int v52 = v7[24];
    unint64_t v53 = *(void *)v7;
    uint64_t v54 = HIBYTE(v50) & 0xF;
    if ((v50 & 0x2000000000000000) == 0) {
      uint64_t v54 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v54)
    {
      swift_bridgeObjectRetain();
      if (v52)
      {
LABEL_19:
        uint64_t v55 = qword_100251670[v51];
LABEL_22:
        id v57 = sub_1001420B4(v55, v53, v50, v49, *((void *)v7 + 8), *((void *)v7 + 9), *((void *)v7 + 10), *((void *)v7 + 11));
        swift_bridgeObjectRelease();
        sub_10014A808((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v84(0, v42, v41, v43, 0, 0, 0, 0, 0, v57);
        swift_errorRelease();
        swift_bridgeObjectRelease();
        return sub_10014A808((uint64_t)v40, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
      }
    }
    else
    {
      unint64_t v53 = sub_1001405D8(*((void *)v7 + 2), v7[24]);
      unint64_t v50 = v56;
      if (v52) {
        goto LABEL_19;
      }
    }
    uint64_t v55 = 150;
    goto LABEL_22;
  }
  sub_1000E27E8((uint64_t)v21, &qword_1002CD610);
  if (v82) {
    id v29 = v82;
  }
  else {
    id v29 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  swift_errorRetain();
  v84(0, 0, 0, 0, 0, 0, 0, 0, 0, v29);
  return swift_errorRelease();
}

void sub_100143C1C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, char a7, char a8, int a9, uint64_t a10, uint64_t a11)
{
  if (a3)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    if (a10)
    {
LABEL_3:
      uint64_t v15 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v14 = 0;
    if (a10) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = 0;
LABEL_6:
  id v16 = (id)v15;
  (*(void (**)(uint64_t, void, NSString, uint64_t, void, void, void, void, int, uint64_t))(a11 + 16))(a11, a1 & 1, v14, a4, a5 & 1, a6, a7 & 1, a8 & 1, a9 & 0x1010101, v15);
}

uint64_t sub_100143D2C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, id), uint64_t a4)
{
  uint64_t v59 = a4;
  char v60 = a3;
  uint64_t v58 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v6 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v14 = sub_1000D0514(&qword_1002CD5E0);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v16, &qword_1002CD5E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    sub_10014A8D0((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    uint64_t v22 = (uint64_t)&v20[*(int *)(v17 + 40)];
    sub_1000E200C(v22, (uint64_t)v13, &qword_1002CC1A8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v24 = v58;
    int v25 = v23(v13, 1, v58);
    sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
    if (v25 == 1)
    {
      uint64_t v26 = *((void *)v20 + 5);
      if (*(void *)(v26 + 16))
      {
        uint64_t v27 = *(void *)v20;
        uint64_t v28 = *((void *)v20 + 1);
        uint64_t v30 = *((void *)v20 + 3);
        uint64_t v29 = *((void *)v20 + 4);
        char v31 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60(v26, v27, v28, v30, v29, (v31 & 1) == 0, 0);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v48 = *(void *)v20;
        uint64_t v49 = *((void *)v20 + 1);
        uint64_t v50 = *((void *)v20 + 3);
        uint64_t v51 = *((void *)v20 + 4);
        char v52 = v20[48];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60((uint64_t)&_swiftEmptyArrayStorage, v48, v49, v50, v51, (v52 & 1) == 0, 0);
      }
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    uint64_t v33 = *(void *)v20;
    uint64_t v32 = *((void *)v20 + 1);
    uint64_t v34 = *((void *)v20 + 4);
    uint64_t v56 = *((void *)v20 + 3);
    uint64_t v35 = v57;
    sub_1000E200C(v22, v57, &qword_1002CC1A8);
    if (v23((char *)v35, 1, v24) == 1)
    {
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0xE000000000000000;
      *((void *)v8 + 2) = 0;
      v8[24] = 1;
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0xE000000000000000;
      *((_DWORD *)v8 + 12) = 0;
      *((void *)v8 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v8 + 8) = 0;
      *((void *)v8 + 9) = 0xE000000000000000;
      *((void *)v8 + 10) = 0;
      *((void *)v8 + 11) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      int v36 = &v8[*(int *)(v24 + 48)];
      uint64_t v37 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
      uint64_t result = sub_1000E27E8(v35, &qword_1002CC1A8);
    }
    else
    {
      sub_10014A8D0(v35, (uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v39 = *((void *)v20 + 2);
    uint64_t v40 = 1000 * v39;
    if ((unsigned __int128)(v39 * (__int128)1000) >> 64 != (1000 * v39) >> 63)
    {
      __break(1u);
      return result;
    }
    uint64_t v41 = v33;
    unint64_t v42 = *((void *)v8 + 1);
    uint64_t v43 = *((void *)v8 + 2);
    int v44 = v8[24];
    unint64_t v45 = *(void *)v8;
    uint64_t v46 = HIBYTE(v42) & 0xF;
    if ((v42 & 0x2000000000000000) == 0) {
      uint64_t v46 = *(void *)v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v46)
    {
      swift_bridgeObjectRetain();
      if (v44)
      {
LABEL_17:
        uint64_t v47 = qword_100251670[v43];
LABEL_22:
        id v54 = sub_1001420B4(v47, v45, v42, v40, *((void *)v8 + 8), *((void *)v8 + 9), *((void *)v8 + 10), *((void *)v8 + 11));
        swift_bridgeObjectRelease();
        sub_10014A808((uint64_t)v8, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v60(0, v41, v32, v56, v34, 0, v54);
        swift_errorRelease();
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        return sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
      }
    }
    else
    {
      unint64_t v45 = sub_1001405D8(*((void *)v8 + 2), v8[24]);
      unint64_t v42 = v53;
      if (v44) {
        goto LABEL_17;
      }
    }
    uint64_t v47 = 150;
    goto LABEL_22;
  }
  sub_1000E27E8((uint64_t)v16, &qword_1002CD5E0);
  if (a2) {
    id v21 = a2;
  }
  else {
    id v21 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  swift_errorRetain();
  v60(0, 0, 0, 0, 0, 0, v21);
  return swift_errorRelease();
}

void sub_1001443F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5, char a6, uint64_t a7, uint64_t a8)
{
  NSString v12 = a3;
  if (a1)
  {
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v13.super.Class isa = 0;
  if (a3) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a7) {
    uint64_t v14 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v14 = 0;
  }
  id v15 = (id)v14;
  (*(void (**)(uint64_t, Class, NSString, NSString, void))(a8 + 16))(a8, v13.super.isa, v12, a5, a6 & 1);
}

uint64_t sub_1001444F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id), uint64_t a4)
{
  uint64_t v64 = a4;
  uint64_t v65 = a3;
  char v62 = (char *)a2;
  uint64_t v63 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSArray v13 = (char *)&v56 - v12;
  uint64_t v14 = sub_1000D0514(&qword_1002CD5E0);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchResponse(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v16, &qword_1002CD5E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    char v62 = v11;
    sub_10014A8D0((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    uint64_t v22 = (uint64_t)&v20[*(int *)(v17 + 40)];
    sub_1000E200C(v22, (uint64_t)v13, &qword_1002CC1A8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    int v24 = v23(v13, 1, v63);
    sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
    uint64_t v25 = v20[48];
    uint64_t v26 = *(void *)v20;
    uint64_t v27 = *((void *)v20 + 1);
    if (v24 == 1)
    {
      uint64_t v28 = *(void *)v20;
      uint64_t v30 = *((void *)v20 + 2);
      uint64_t v29 = *((void *)v20 + 3);
      uint64_t v31 = *((void *)v20 + 4);
      uint64_t v32 = *((void *)v20 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(1, v25, v28, v27, v29, v31, v30, v32, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      return sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchResponse);
    }
    uint64_t v33 = *((void *)v20 + 3);
    uint64_t v57 = *((void *)v20 + 1);
    uint64_t v58 = v33;
    uint64_t v59 = *((void *)v20 + 2);
    uint64_t v35 = *((void *)v20 + 4);
    uint64_t v34 = *((void *)v20 + 5);
    uint64_t v36 = (uint64_t)v62;
    sub_1000E200C(v22, (uint64_t)v62, &qword_1002CC1A8);
    int v37 = v23((char *)v36, 1, v63);
    uint64_t v61 = v26;
    unsigned int v60 = v25;
    if (v37 == 1)
    {
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0xE000000000000000;
      *((void *)v7 + 2) = 0;
      v7[24] = 1;
      *((void *)v7 + 4) = 0;
      *((void *)v7 + 5) = 0xE000000000000000;
      *((_DWORD *)v7 + 12) = 0;
      *((void *)v7 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v7 + 8) = 0;
      *((void *)v7 + 9) = 0xE000000000000000;
      *((void *)v7 + 10) = 0;
      *((void *)v7 + 11) = 0xE000000000000000;
      uint64_t v38 = v63;
      uint64_t v39 = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v40 = v34;
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      uint64_t v41 = &v7[*(int *)(v38 + 48)];
      uint64_t v42 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
      sub_1000E27E8(v36, &qword_1002CC1A8);
    }
    else
    {
      sub_10014A8D0(v36, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      uint64_t v39 = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v40 = v34;
      swift_bridgeObjectRetain();
    }
    uint64_t v45 = v35;
    unint64_t v46 = *((void *)v7 + 1);
    uint64_t v47 = *((void *)v7 + 2);
    int v48 = v7[24];
    unint64_t v49 = *(void *)v7;
    uint64_t v50 = HIBYTE(v46) & 0xF;
    if ((v46 & 0x2000000000000000) == 0) {
      uint64_t v50 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v50)
    {
      swift_bridgeObjectRetain();
      if (v48)
      {
LABEL_15:
        uint64_t v51 = qword_100251670[v47];
LABEL_18:
        unint64_t v53 = v65;
        uint64_t v54 = v58;
        id v55 = sub_1001420B4(v51, v49, v46, 0, *((void *)v7 + 8), *((void *)v7 + 9), *((void *)v7 + 10), *((void *)v7 + 11));
        swift_bridgeObjectRelease();
        sub_10014A808((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v53(0, v60, v61, v39, v54, v45, v59, v40, v55);
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v49 = sub_1001405D8(*((void *)v7 + 2), v7[24]);
      unint64_t v46 = v52;
      if (v48) {
        goto LABEL_15;
      }
    }
    uint64_t v51 = 150;
    goto LABEL_18;
  }
  sub_1000E27E8((uint64_t)v16, &qword_1002CD5E0);
  if (v62) {
    id v21 = v62;
  }
  else {
    id v21 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  uint64_t v43 = v65;
  swift_errorRetain();
  v43(0, 0, 0, 0, 0, 0, 0, 0, v21);
  return swift_errorRelease();
}

void sub_100144BF0(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, Class isa, uint64_t a9, uint64_t a10)
{
  NSString v12 = a6;
  if (a4)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v15 = 0;
  if (a6) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (isa) {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a9) {
    uint64_t v16 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v16 = 0;
  }
  id v17 = (id)v16;
  (*(void (**)(uint64_t, void, void, NSString, NSString, uint64_t, Class))(a10 + 16))(a10, a1 & 1, a2 & 1, v15, v12, a7, isa);
}

void static CPLCKPhotosSharedLibraryOperation.exitSharedLibraryOperation(with:retentionPolicy:exitType:exitSource:stopAt:participantUserIDsToRemove:participantIDsToRemove:completionHandler:)(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100144D0C(uint64_t a1, void *a2, void (*a3)(void, void, void, void, id), uint64_t a4)
{
  uint64_t v130 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v117 = *(void *)(v130 - 8);
  uint64_t v8 = __chkstk_darwin(v130);
  uint64_t v118 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v120 = (uint64_t *)((char *)&v110 - v10);
  uint64_t v11 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v113 = (uint64_t)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v119 = (uint64_t)&v110 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v128 = (uint64_t)&v110 - v17;
  __chkstk_darwin(v16);
  uint64_t v116 = (uint64_t)&v110 - v18;
  uint64_t v19 = sub_1000D0514(&qword_1002CD540);
  __chkstk_darwin(v19 - 8);
  uint64_t v127 = (uint64_t)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v132 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  v129 = (uint64_t *)((char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v133 = type metadata accessor for Goldilocks_ParticipantExitResult(0);
  uint64_t v22 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  v121 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1000D0514(&qword_1002CD5A8);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Goldilocks_InitiateExitResponse(0);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v26, &qword_1002CD5A8);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v115 = v27;
  if (v31(v26, 1, v27) == 1)
  {
    sub_1000E27E8((uint64_t)v26, &qword_1002CD5A8);
    if (a2) {
      id v32 = a2;
    }
    else {
      id v32 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
    }
    swift_errorRetain();
    a3(0, 0, 0, 0, v32);
    return swift_errorRelease();
  }
  sub_10014A8D0((uint64_t)v26, (uint64_t)v30, type metadata accessor for Goldilocks_InitiateExitResponse);
  unint64_t v135 = (unint64_t)&_swiftEmptyArrayStorage;
  v114 = (uint64_t *)v30;
  uint64_t v33 = *((void *)v30 + 2);
  uint64_t v34 = *(void *)(v33 + 16);
  uint64_t v112 = a4;
  if (!v34) {
    goto LABEL_26;
  }
  v111 = a3;
  uint64_t v35 = sub_1000E18FC(0, (unint64_t *)&unk_1002CD5B0);
  uint64_t v36 = v33 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  uint64_t v124 = *(void *)(v22 + 72);
  uint64_t v125 = v35;
  v123 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
  int v37 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  uint64_t v110 = v33;
  swift_bridgeObjectRetain();
  uint64_t v38 = (uint64_t *)v121;
  uint64_t v39 = v129;
  v122 = v37;
  do
  {
    uint64_t v132 = v34;
    sub_10014A868(v36, (uint64_t)v38, type metadata accessor for Goldilocks_ParticipantExitResult);
    uint64_t v40 = v127;
    sub_1000E200C((uint64_t)v38 + *(int *)(v133 + 28), v127, &qword_1002CD540);
    if ((*v123)(v40, 1, v126) == 1)
    {
      *uint64_t v39 = 0;
      v39[1] = 0xE000000000000000;
      v39[2] = 0;
      v39[3] = 0xE000000000000000;
      UnknownStorage.init()();
      sub_1000E27E8(v40, &qword_1002CD540);
    }
    else
    {
      sub_10014A8D0(v40, (uint64_t)v39, type metadata accessor for Goldilocks_ZoneID);
    }
    uint64_t v41 = *v39;
    uint64_t v42 = (void *)v39[1];
    uint64_t v43 = v39[2];
    int v44 = (void *)v39[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45._countAndFlagsBits = v41;
    v45._object = v42;
    v46._countAndFlagsBits = v43;
    v46._object = v44;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v45, v46).super.isa;
    uint64_t v47 = (uint64_t)v38 + *(int *)(v133 + 24);
    uint64_t v48 = v128;
    sub_1000E200C(v47, v128, &qword_1002CC1A8);
    unint64_t v49 = *v37;
    uint64_t v50 = v130;
    LODWORD(v43) = (*v37)(v48, 1, v130);
    sub_1000E27E8(v48, &qword_1002CC1A8);
    if (v43 == 1)
    {
      id v51 = 0;
      goto LABEL_22;
    }
    uint64_t v52 = v119;
    sub_1000E200C(v47, v119, &qword_1002CC1A8);
    if (v49(v52, 1, v50) == 1)
    {
      unint64_t v53 = v120;
      void *v120 = 0;
      v53[1] = 0xE000000000000000;
      v53[2] = 0;
      v53[4] = 0;
      v53[5] = 0xE000000000000000;
      *((_DWORD *)v53 + 12) = 0;
      v53[7] = &_swiftEmptyArrayStorage;
      v53[8] = 0;
      v53[9] = 0xE000000000000000;
      v53[10] = 0;
      v53[11] = 0xE000000000000000;
      *((unsigned char *)v53 + 24) = 1;
      UnknownStorage.init()();
      uint64_t v54 = (char *)v53 + *(int *)(v50 + 48);
      uint64_t v55 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
      sub_1000E27E8(v52, &qword_1002CC1A8);
    }
    else
    {
      unint64_t v53 = v120;
      sub_10014A8D0(v52, (uint64_t)v120, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    unint64_t v56 = v53[1];
    uint64_t v57 = v53[2];
    int v58 = *((unsigned __int8 *)v53 + 24);
    unint64_t v59 = *v53;
    uint64_t v60 = HIBYTE(v56) & 0xF;
    if ((v56 & 0x2000000000000000) == 0) {
      uint64_t v60 = *v53 & 0xFFFFFFFFFFFFLL;
    }
    if (v60)
    {
      swift_bridgeObjectRetain();
      if (!v58) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v59 = sub_1001405D8(v53[2], *((unsigned char *)v53 + 24));
      unint64_t v56 = v62;
      if (!v58)
      {
LABEL_20:
        uint64_t v61 = 150;
        goto LABEL_21;
      }
    }
    uint64_t v61 = qword_100251670[v57];
LABEL_21:
    uint64_t v38 = (uint64_t *)v121;
    id v51 = sub_1001420B4(v61, v59, v56, 0, v53[8], v53[9], v53[10], v53[11]);
    swift_bridgeObjectRelease();
    sub_10014A808((uint64_t)v53, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_22:
    uint64_t v64 = *v38;
    uint64_t v63 = v38[1];
    uint64_t v65 = (objc_class *)type metadata accessor for CPLCKPhotosSharedLibraryExitResponse();
    uint64_t v66 = (char *)objc_allocWithZone(v65);
    uint64_t v67 = &v66[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_participantUserID];
    *(void *)uint64_t v67 = 0;
    *((void *)v67 + 1) = 0xE000000000000000;
    double v68 = &v66[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error];
    *(void *)&v66[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_error] = 0;
    swift_beginAccess();
    *(void *)uint64_t v67 = v64;
    *((void *)v67 + 1) = v63;
    swift_bridgeObjectRetain();
    uint64_t v69 = isa;
    swift_errorRetain();
    uint64_t v70 = v66;
    swift_bridgeObjectRelease();
    *(void *)&v70[OBJC_IVAR___CPLCKPhotosSharedLibraryExitResponse_stagingZoneID] = v69;
    swift_beginAccess();
    *(void *)double v68 = v51;
    uint64_t v71 = v69;
    swift_errorRetain();
    swift_errorRelease();

    v134.receiver = v70;
    v134.super_class = v65;
    id v72 = objc_msgSendSuper2(&v134, "init");
    swift_errorRelease();

    id v73 = v72;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    swift_errorRelease();
    uint64_t v39 = v129;
    sub_10014A808((uint64_t)v129, type metadata accessor for Goldilocks_ZoneID);
    sub_10014A808((uint64_t)v38, type metadata accessor for Goldilocks_ParticipantExitResult);
    v36 += v124;
    uint64_t v34 = v132 - 1;
    int v37 = v122;
  }
  while (v132 != 1);
  swift_bridgeObjectRelease();
  a3 = v111;
LABEL_26:
  uint64_t v74 = a3;
  id v75 = [self standardUserDefaults];
  NSString v76 = String._bridgeToObjectiveC()();
  unsigned __int8 v77 = [v75 BOOLForKey:v76];

  uint64_t v78 = v114;
  uint64_t v79 = (uint64_t)v114 + *(int *)(v115 + 28);
  uint64_t v80 = v116;
  sub_1000E200C(v79, v116, &qword_1002CC1A8);
  uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  uint64_t v82 = v130;
  int v83 = v81(v80, 1, v130);
  sub_1000E27E8(v80, &qword_1002CC1A8);
  if (v83 != 1)
  {
    if ((v77 & 1) == 0)
    {
      uint64_t v93 = v113;
      sub_1000E200C(v79, v113, &qword_1002CC1A8);
      if (v81(v93, 1, v82) == 1)
      {
        uint64_t v94 = v118;
        *(void *)uint64_t v118 = 0;
        *(void *)(v94 + 8) = 0xE000000000000000;
        *(void *)(v94 + 16) = 0;
        *(unsigned char *)(v94 + 24) = 1;
        *(void *)(v94 + 32) = 0;
        *(void *)(v94 + 40) = 0xE000000000000000;
        *(_DWORD *)(v94 + 48) = 0;
        *(void *)(v94 + 56) = &_swiftEmptyArrayStorage;
        *(void *)(v94 + 64) = 0;
        *(void *)(v94 + 72) = 0xE000000000000000;
        *(void *)(v94 + 80) = 0;
        *(void *)(v94 + 88) = 0xE000000000000000;
        UnknownStorage.init()();
        uint64_t v95 = v94 + *(int *)(v82 + 48);
        uint64_t v96 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 1, 1, v96);
        sub_1000E27E8(v93, &qword_1002CC1A8);
      }
      else
      {
        sub_10014A8D0(v93, v118, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      }
      goto LABEL_38;
    }
LABEL_32:
    uint64_t v89 = v118;
    *(void *)uint64_t v118 = 0;
    *(void *)(v89 + 8) = 0xE000000000000000;
    *(void *)(v89 + 16) = 0;
    *(unsigned char *)(v89 + 24) = 1;
    *(void *)(v89 + 32) = 0;
    *(void *)(v89 + 40) = 0xE000000000000000;
    *(_DWORD *)(v89 + 48) = 0;
    *(void *)(v89 + 56) = &_swiftEmptyArrayStorage;
    *(void *)(v89 + 64) = 0;
    *(void *)(v89 + 72) = 0xE000000000000000;
    *(void *)(v89 + 80) = 0;
    *(void *)(v89 + 88) = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v90 = v89 + *(int *)(v82 + 48);
    uint64_t v91 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
LABEL_38:
    uint64_t v98 = *v78;
    uint64_t v97 = v78[1];
    v99 = (void *)v135;
    if (v135 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000D0514(&qword_1002CD500);
      uint64_t v100 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      uint64_t v100 = (uint64_t)v99;
    }
    swift_bridgeObjectRelease();
    unint64_t v101 = *(void *)(v118 + 8);
    uint64_t v102 = *(void *)(v118 + 16);
    int v103 = *(unsigned __int8 *)(v118 + 24);
    unint64_t v104 = *(void *)v118;
    uint64_t v105 = HIBYTE(v101) & 0xF;
    if ((v101 & 0x2000000000000000) == 0) {
      uint64_t v105 = v104 & 0xFFFFFFFFFFFFLL;
    }
    if (v105)
    {
      swift_bridgeObjectRetain();
      if (v103)
      {
LABEL_44:
        uint64_t v106 = qword_100251670[v102];
LABEL_47:
        uint64_t v108 = v118;
        id v109 = sub_1001420B4(v106, v104, v101, 0, *(void *)(v118 + 64), *(void *)(v118 + 72), *(void *)(v118 + 80), *(void *)(v118 + 88));
        swift_bridgeObjectRelease();
        v74(0, v98, v97, v100, v109);
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10014A808(v108, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v88 = (uint64_t)v114;
        return sub_10014A808(v88, type metadata accessor for Goldilocks_InitiateExitResponse);
      }
    }
    else
    {
      unint64_t v104 = sub_1001405D8(*(void *)(v118 + 16), *(unsigned char *)(v118 + 24));
      unint64_t v101 = v107;
      if (v103) {
        goto LABEL_44;
      }
    }
    uint64_t v106 = 150;
    goto LABEL_47;
  }
  if (v77) {
    goto LABEL_32;
  }
  uint64_t v85 = *v78;
  uint64_t v84 = v78[1];
  uint64_t v86 = (void *)v135;
  if (v135 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000D0514(&qword_1002CD500);
    uint64_t v87 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t)v86;
  }
  v74(1, v85, v84, v87, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v88 = (uint64_t)v78;
  return sub_10014A808(v88, type metadata accessor for Goldilocks_InitiateExitResponse);
}

void sub_100145CF8(char a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  Class isa = a4;
  if (a3)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v10 = 0;
  if (a4)
  {
LABEL_3:
    sub_1000D0514(&qword_1002CD500);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
LABEL_4:
  if (a5) {
    uint64_t v11 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v11 = 0;
  }
  id v12 = (id)v11;
  (*(void (**)(uint64_t, void, NSString, Class))(a6 + 16))(a6, a1 & 1, v10, isa);
}

uint64_t sub_100145DD4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  uint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v40 = (char *)a2;
  uint64_t v41 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0);
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CC1A8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = sub_1000D0514((uint64_t *)&unk_1002CD570);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E200C(a1, (uint64_t)v16, (uint64_t *)&unk_1002CD570);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    uint64_t v40 = v11;
    sub_10014A8D0((uint64_t)v16, (uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
    uint64_t v22 = (uint64_t)&v20[*(int *)(v17 + 20)];
    sub_1000E200C(v22, (uint64_t)v13, &qword_1002CC1A8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v24 = v41;
    int v25 = v23(v13, 1, v41);
    sub_1000E27E8((uint64_t)v13, &qword_1002CC1A8);
    if (v25 == 1)
    {
      v43(1, 0);
      return sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
    }
    uint64_t v26 = (uint64_t)v40;
    sub_1000E200C(v22, (uint64_t)v40, &qword_1002CC1A8);
    if (v23((char *)v26, 1, v24) == 1)
    {
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0xE000000000000000;
      *((void *)v7 + 2) = 0;
      v7[24] = 1;
      *((void *)v7 + 4) = 0;
      *((void *)v7 + 5) = 0xE000000000000000;
      *((_DWORD *)v7 + 12) = 0;
      *((void *)v7 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v7 + 8) = 0;
      *((void *)v7 + 9) = 0xE000000000000000;
      *((void *)v7 + 10) = 0;
      *((void *)v7 + 11) = 0xE000000000000000;
      UnknownStorage.init()();
      uint64_t v27 = &v7[*(int *)(v24 + 48)];
      uint64_t v28 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
      sub_1000E27E8(v26, &qword_1002CC1A8);
    }
    else
    {
      sub_10014A8D0(v26, (uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }
    uint64_t v31 = v43;
    unint64_t v32 = *((void *)v7 + 1);
    uint64_t v33 = *((void *)v7 + 2);
    int v34 = v7[24];
    unint64_t v35 = *(void *)v7;
    uint64_t v36 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0) {
      uint64_t v36 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      swift_bridgeObjectRetain();
      if (v34)
      {
LABEL_15:
        uint64_t v37 = qword_100251670[v33];
LABEL_18:
        id v39 = sub_1001420B4(v37, v35, v32, 0, *((void *)v7 + 8), *((void *)v7 + 9), *((void *)v7 + 10), *((void *)v7 + 11));
        swift_bridgeObjectRelease();
        sub_10014A808((uint64_t)v7, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v31(0, v39);
        swift_errorRelease();
        return sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackResponse);
      }
    }
    else
    {
      unint64_t v35 = sub_1001405D8(*((void *)v7 + 2), v7[24]);
      unint64_t v32 = v38;
      if (v34) {
        goto LABEL_15;
      }
    }
    uint64_t v37 = 150;
    goto LABEL_18;
  }
  sub_1000E27E8((uint64_t)v16, (uint64_t *)&unk_1002CD570);
  if (v40) {
    id v21 = v40;
  }
  else {
    id v21 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  uint64_t v29 = v43;
  swift_errorRetain();
  v29(0, v21);
  return swift_errorRelease();
}

uint64_t sub_100146410(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, id))
{
  uint64_t v6 = type metadata accessor for Goldilocks_ExitStatusFeedbackResponse(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(a1, 1, v6) != 1) {
    return a3(1, 0);
  }
  if (a2) {
    id v7 = a2;
  }
  else {
    id v7 = sub_1001420B4(150, 0xD00000000000001ALL, 0x800000010020B260, 0, 0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  swift_errorRetain();
  a3(0, v7);
  return swift_errorRelease();
}

id CPLCKPhotosSharedLibraryOperation.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKPhotosSharedLibraryOperation();
  return objc_msgSendSuper2(&v2, "init");
}

id CPLCKPhotosSharedLibraryOperation.__deallocating_deinit()
{
  return sub_100146680(type metadata accessor for CPLCKPhotosSharedLibraryOperation);
}

id sub_100146680(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_1001466B8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_100146774(a1, a2, v4);
}

unint64_t sub_100146730(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100146858(a1, v4);
}

unint64_t sub_100146774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100146858(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000E18FC(0, &qword_1002CA410);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100146974(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D0514((uint64_t *)&unk_1002CD628);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100146C84(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D0514((uint64_t *)&unk_1002CD638);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      id v34 = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100146F6C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ResponseItem(0);
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000D0514(&qword_1002CD648);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  id v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    char v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_10014A8D0(v30, (uint64_t)v7, type metadata accessor for ResponseItem);
    }
    else
    {
      sub_10014A868(v30, (uint64_t)v7, type metadata accessor for ResponseItem);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_10014A8D0((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, type metadata accessor for ResponseItem);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10014734C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D0514(&qword_1002CD528);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10014A55C(v24, v35);
      }
      else
      {
        sub_1000E20C8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10014A55C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_10014764C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001466B8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100147B00();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_100146974(v15, a4 & 1);
  unint64_t v20 = sub_1001466B8(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;
  swift_bridgeObjectRetain();
}

id sub_1001477BC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_100146730((uint64_t)a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_100147CB4();
LABEL_7:
    uint64_t v17 = (void *)*v5;
    if (v15)
    {
LABEL_8:
      int64_t v18 = (void *)(v17[7] + 16 * v11);
      id result = (id)swift_bridgeObjectRelease();
      *int64_t v18 = a1;
      v18[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100146C84(v14, a4 & 1);
  unint64_t v20 = sub_100146730((uint64_t)a3);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_17:
    sub_1000E18FC(0, &qword_1002CA410);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  uint64_t v17 = (void *)*v5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  v17[(v11 >> 6) + 8] |= 1 << v11;
  *(void *)(v17[6] + 8 * v11) = a3;
  uint64_t v22 = (void *)(v17[7] + 16 * v11);
  *uint64_t v22 = a1;
  v22[1] = a2;
  uint64_t v23 = v17[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v17[2] = v25;
  return a3;
}

_OWORD *sub_100147940(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_1001466B8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100148100();
      goto LABEL_7;
    }
    sub_10014734C(v15, a4 & 1);
    unint64_t v21 = sub_1001466B8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10014A56C((uint64_t)v19);
    return sub_10014A55C(a1, v19);
  }
LABEL_13:
  sub_100147A94(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_100147A94(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  id result = sub_10014A55C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_100147B00()
{
  uint64_t v1 = v0;
  sub_1000D0514((uint64_t *)&unk_1002CD628);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100147CB4()
{
  uint64_t v1 = v0;
  sub_1000D0514((uint64_t *)&unk_1002CD638);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v20;
    v22[1] = v21;
    id v23 = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100147E6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ResponseItem(0);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D0514(&qword_1002CD648);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  unint64_t v27 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_10014A868(*(void *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for ResponseItem);
    int64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *int64_t v22 = v19;
    v22[1] = v20;
    sub_10014A8D0((uint64_t)v4, *(void *)(v7 + 56) + v21, type metadata accessor for ResponseItem);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100148100()
{
  uint64_t v1 = v0;
  sub_1000D0514(&qword_1002CD528);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000E20C8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10014A55C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

size_t sub_1001482E8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10014859C(a1, a2, a3, (void *)*v3, &qword_1002CD620, (uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport);
  *uint64_t v3 = result;
  return result;
}

char *sub_100148324(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1001483A0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100148344(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1001484A4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100148364(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10014859C(a1, a2, a3, (void *)*v3, &qword_1002CD588, type metadata accessor for Goldilocks_ExitMoveBatchFeedbackItem);
  *uint64_t v3 = result;
  return result;
}

char *sub_1001483A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D0514(&qword_1002CA460);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1001484A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D0514(&qword_1002CD618);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

size_t sub_10014859C(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000D0514(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

uint64_t sub_100148778(uint64_t result)
{
  switch(result)
  {
    case 0:
      return result;
    case 1:
      size_t result = 2;
      break;
    case 2:
      size_t result = 3;
      break;
    case 3:
      size_t result = 4;
      break;
    case 4:
      size_t result = 5;
      break;
    case 5:
      size_t result = 6;
      break;
    default:
      type metadata accessor for CPLCKSharedLibraryExitStage(0);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x10014883CLL);
  }
  return result;
}

unint64_t sub_100148854(unint64_t result)
{
  if (result >= 6)
  {
    type metadata accessor for CPLCKSharedLibraryExitStatus(0);
    size_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  return result;
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC021silentMoverServerRampG004withG2ID17completionHandlerSo010CKDatabaseG0CSSSg_ySb_AIs5Int64VSbs5Int32VS6bs5Error_pSgtctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = sub_1000D0514(&qword_1002CD5E8);
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  int64_t v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514((uint64_t *)&unk_1002CD5F0);
  __chkstk_darwin(v8 - 8);
  int64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Goldilocks_SilentMoverRampingRequest(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char **)((char *)&v25 - v17);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - v19;
  *uint64_t v18 = 0;
  v18[1] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  sub_10014A7B8(&qword_1002CBFB0, (void (*)(uint64_t))type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  static Message.with(_:)();
  sub_10014A808((uint64_t)v18, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  swift_bridgeObjectRelease();
  sub_10014A8D0((uint64_t)v15, (uint64_t)v18, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  sub_10014A8D0((uint64_t)v18, (uint64_t)v20, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  sub_10014A868((uint64_t)v20, (uint64_t)v10, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v25, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v26);
  id v21 = objc_allocWithZone((Class)sub_1000D0514((uint64_t *)&unk_1002CD600));
  uint64_t v22 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v27;
  *(void *)(v23 + 24) = v28;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_SilentMoverRampingRequest);
  return v22;
}

void _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC18getNextBatchToMove4with9batchSize17completionHandlerSo010CKDatabaseG0CSo14CKRecordZoneIDC_SiySaySSGSg_SSSgANSbs5Error_pSgtctFZ_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v6 = sub_1000D0514((uint64_t *)&unk_1002CD5C0);
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D0514(&qword_1002CBFE8);
  __chkstk_darwin(v8 - 8);
  uint64_t v35 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  int64_t v33 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - v17;
  id v19 = [a1 zoneName];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  id v22 = [a1 ownerName];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0xE000000000000000;
    *((_DWORD *)v18 + 4) = 0;
    UnknownStorage.init()();
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(&v18[*(int *)(v14 + 28)], 1, 1, v10);
    __chkstk_darwin(v26);
    *(&v32 - 4) = v32;
    *(&v32 - 3) = v21;
    *(&v32 - 2) = v23;
    *(&v32 - 1) = v25;
    sub_10014A7B8(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_bridgeObjectRelease();
    __chkstk_darwin(v27);
    *(&v32 - 4) = (uint64_t)v13;
    *((_DWORD *)&v32 - 6) = a2;
    sub_10014A7B8(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    *(&v32 - 2) = 0;
    *(&v32 - 1) = 0;
    uint64_t v28 = (uint64_t)v33;
    static Message.with(_:)();
    sub_10014A808((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    sub_10014A808((uint64_t)v13, type metadata accessor for Goldilocks_ZoneID);
    sub_10014A8D0(v28, (uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    uint64_t v29 = v35;
    sub_10014A868((uint64_t)v18, v35, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v29, 0, 1, v14);
    (*(void (**)(char *, void, uint64_t))(v36 + 104))(v38, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v37);
    id v30 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD5D8));
    CodeOperation.init(service:functionName:request:destinationServer:)();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v39;
    *(void *)(v31 + 24) = v40;
    swift_retain();
    dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
    sub_10014A808((uint64_t)v18, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
    return;
  }
  __break(1u);
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC09moveBatchefG04with9batchSize11operationID17completionHandlerSo010CKDatabaseG0CSo012CKRecordZoneN0C_s5Int32VSSSgySb_SbA2Os5Int64VSaySSGSgs5Error_pSgtctFZ_0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v40 = a3;
  int v39 = a2;
  uint64_t v8 = sub_1000D0514((uint64_t *)&unk_1002CD5C0);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000D0514(&qword_1002CBFE8);
  __chkstk_darwin(v10 - 8);
  uint64_t v41 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Goldilocks_ZoneID(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Goldilocks_ExitMoveBatchRequest(0);
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v37 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v19 = (char *)&v35 - v18;
  id v20 = [a1 zoneName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  id v24 = [a1 ownerName];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)id v19 = 0;
  *((void *)v19 + 1) = 0xE000000000000000;
  *((_DWORD *)v19 + 4) = 0;
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(&v19[*(int *)(v15 + 28)], 1, 1, v12);
  uint64_t v51 = v21;
  uint64_t v52 = v23;
  uint64_t v53 = v25;
  uint64_t v54 = v27;
  sub_10014A7B8(&qword_1002CC1E0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ZoneID);
  uint64_t v28 = (uint64_t)v36;
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = v28;
  int v48 = v39;
  uint64_t v49 = v40;
  uint64_t v50 = a4;
  sub_10014A7B8(&qword_1002CD5D0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  uint64_t v29 = (uint64_t)v37;
  static Message.with(_:)();
  sub_10014A808((uint64_t)v19, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  swift_bridgeObjectRelease();
  sub_10014A808(v28, type metadata accessor for Goldilocks_ZoneID);
  sub_10014A8D0(v29, (uint64_t)v19, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  uint64_t v30 = v41;
  sub_10014A868((uint64_t)v19, v41, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v44);
  id v31 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD5D8));
  uint64_t v32 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v45;
  *(void *)(v33 + 24) = v46;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014A808((uint64_t)v19, type metadata accessor for Goldilocks_ExitMoveBatchRequest);
  return v32;
}

void sub_100149788(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v53 = a8;
  uint64_t v47 = a7;
  uint64_t v48 = a6;
  uint64_t v13 = sub_1000D0514((uint64_t *)&unk_1002CD590);
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000D0514(&qword_1002CBFC8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for Goldilocks_InitiateExitRequest(0);
  uint64_t v18 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v49 = (uint64_t)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012BA94();
  uint64_t v45 = v21;
  if ((v20 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    char v22 = v20;
    uint64_t v44 = a9;
    BOOL v42 = a2 < 3;
    BOOL v43 = a3 < 3;
    uint64_t v41 = sub_100148778(a5);
    __int16 v24 = v23;
    id v25 = [a1 zoneName];
    unint64_t v40 = a3;
    id v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    id v30 = [a1 ownerName];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    LOBYTE(v30) = v22 & 1;
    uint64_t v34 = v48;
    swift_bridgeObjectRetain();
    uint64_t v35 = swift_bridgeObjectRetain();
    __int16 v39 = v24 & 0x1FF;
    uint64_t v36 = v49;
    sub_1001407C4(v27, v29, v31, v33, a2, v42, v40, v43, v49, v45, v30, v34, v35, v41, v39);
    sub_10014A868(v36, (uint64_t)v17, type metadata accessor for Goldilocks_InitiateExitRequest);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v46);
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v52, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v51);
    id v37 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD5A0));
    CodeOperation.init(service:functionName:request:destinationServer:)();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v53;
    *(void *)(v38 + 24) = v44;
    swift_retain();
    dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
    sub_10014A808(v36, type metadata accessor for Goldilocks_InitiateExitRequest);
  }
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC25sendExitMoveBatchFeedback04withjkG2ID04movekN008exitZoneN013feedbackItems17completionHandlerSo010CKDatabaseG0CSSSg_ALSo08CKRecordqN0CSaySo0defijkL4Item_pGySb_s5Error_pSgtctFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  id v36 = a5;
  uint64_t v11 = sub_1000D0514(&qword_1002CD548);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  __chkstk_darwin(v11);
  unint64_t v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000D0514((uint64_t *)&unk_1002CD550);
  __chkstk_darwin(v13 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (uint64_t *)((char *)&v35 - v20);
  __chkstk_darwin(v19);
  uint64_t v37 = (uint64_t)&v35 - v22;
  if (a2) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = 0;
  }
  if (a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v25 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v21 = &_swiftEmptyArrayStorage;
  v21[1] = 0;
  v21[2] = 0xE000000000000000;
  v21[3] = 0;
  v21[4] = 0xE000000000000000;
  UnknownStorage.init()();
  id v26 = (char *)v21 + *(int *)(v15 + 32);
  uint64_t v27 = type metadata accessor for Goldilocks_ZoneID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v45 = v23;
  unint64_t v46 = v24;
  uint64_t v47 = v21;
  id v48 = v25;
  uint64_t v49 = a6;
  sub_10014A7B8(&qword_1002CBFB8, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10014A604((uint64_t)v18, (uint64_t)v21);
  uint64_t v28 = (uint64_t)v21;
  uint64_t v29 = v37;
  sub_10014A8D0(v28, v37, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  uint64_t v30 = v39;
  sub_10014A868(v29, v39, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v42);
  id v31 = objc_allocWithZone((Class)sub_1000D0514((uint64_t *)&unk_1002CD560));
  uint64_t v32 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v43;
  *(void *)(v33 + 24) = v44;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014A808(v29, type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest);
  return v32;
}

uint64_t _s22CloudKitImplementation33CPLCKPhotosSharedLibraryOperationC22sendExitStatusFeedback04withG2ID5share6status17completionHandlerSo010CKDatabaseG0CSSSg_So012CKRecordZoneM0CSo011CPLCKSharedfiJ0VySb_s5Error_pSgtctFZ_0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v34 = a4;
  uint64_t v9 = sub_1000D0514(&qword_1002CD508);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  __chkstk_darwin(v9);
  id v36 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000D0514((uint64_t *)&unk_1002CD510);
  __chkstk_darwin(v11 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Goldilocks_ExitStatusFeedbackRequest(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v33 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v33 - v21;
  if (a2) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = 0;
  }
  if (a2) {
    unint64_t v24 = a2;
  }
  else {
    unint64_t v24 = 0xE000000000000000;
  }
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0xE000000000000000;
  *((void *)v20 + 2) = 0;
  v20[24] = 1;
  swift_bridgeObjectRetain();
  id v25 = a3;
  UnknownStorage.init()();
  id v26 = &v20[*(int *)(v13 + 28)];
  uint64_t v27 = type metadata accessor for Goldilocks_ZoneID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v41 = v23;
  unint64_t v42 = v24;
  id v43 = v25;
  uint64_t v44 = v34;
  sub_10014A7B8(&qword_1002CBFC0, (void (*)(uint64_t))type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  static Message.with(_:)();
  sub_10014A808((uint64_t)v20, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  swift_bridgeObjectRelease();

  sub_10014A8D0((uint64_t)v17, (uint64_t)v20, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  sub_10014A8D0((uint64_t)v20, (uint64_t)v22, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  uint64_t v28 = v35;
  sub_10014A868((uint64_t)v22, v35, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v38);
  id v29 = objc_allocWithZone((Class)sub_1000D0514(&qword_1002CD520));
  uint64_t v30 = CodeOperation.init(service:functionName:request:destinationServer:)();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v39;
  *(void *)(v31 + 24) = v40;
  swift_retain();
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
  sub_10014A808((uint64_t)v22, type metadata accessor for Goldilocks_ExitStatusFeedbackRequest);
  return v30;
}

uint64_t type metadata accessor for CPLCKPhotosSharedLibraryOperation()
{
  return self;
}

uint64_t sub_10014A43C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10014A474(char a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5)
{
  sub_100145CF8(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

void sub_10014A47C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, objc_class *a8, uint64_t a9)
{
  sub_100144BF0(a1, a2, a3, a4, a5, a6, a7, a8, a9, *(void *)(v9 + 16));
}

void sub_10014A4A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6, uint64_t a7)
{
  sub_1001443F8(a1, a2, a3, a4, a5, a6, a7, *(void *)(v7 + 16));
}

void sub_10014A4B0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, char a7, char a8, int a9, uint64_t a10)
{
  sub_100143C1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *(void *)(v10 + 16));
}

uint64_t sub_10014A4FC(uint64_t a1)
{
  return sub_100141DD4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10014A51C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014A554(uint64_t a1, void *a2)
{
  return sub_100146410(a1, a2, *(uint64_t (**)(uint64_t, id))(v2 + 16));
}

_OWORD *sub_10014A55C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10014A56C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10014A5BC(uint64_t *a1)
{
  return sub_100142008(a1, *(id *)(v1 + 16));
}

uint64_t sub_10014A5D8(uint64_t a1)
{
  return sub_10014A6B8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1001415FC);
}

uint64_t sub_10014A604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Goldilocks_ExitMoveBatchErrorFeedbackRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014A668(uint64_t a1, uint64_t a2)
{
  return sub_100145DD4(a1, a2, *(void (**)(uint64_t, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014A670(uint64_t *a1)
{
  return sub_10014128C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10014A68C(uint64_t a1)
{
  return sub_10014A6B8(a1, sub_1001411FC);
}

uint64_t sub_10014A6B8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10014A6E4(uint64_t a1, void *a2)
{
  return sub_100144D0C(a1, a2, *(void (**)(void, void, void, void, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014A6EC(void *a1)
{
  return sub_100140E28(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10014A70C(uint64_t a1)
{
  return sub_100140B74(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80), *(void *)(v1 + 88), *(unsigned __int8 *)(v1 + 96) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 97) << 8));
}

uint64_t sub_10014A768(uint64_t a1)
{
  return sub_100140EA0(a1, *(void *)(v1 + 16), *(_DWORD *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10014A78C(uint64_t a1, uint64_t a2)
{
  return sub_1001444F8(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014A794(uint64_t a1, void *a2)
{
  return sub_100143D2C(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, id))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014A79C(uint64_t *a1)
{
  return sub_1001410DC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10014A7B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10014A800(void *a1, int *a2)
{
  return sub_10014322C(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, int, void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10014A808(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10014A868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014A8D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10014A938(uint64_t *a1)
{
  return sub_10014A5BC(a1);
}

uint64_t sub_10014A950(uint64_t *a1)
{
  return sub_10014A670(a1);
}

uint64_t sub_10014A994(void *a1)
{
  return sub_10014A6EC(a1);
}

uint64_t sub_10014A9AC(uint64_t a1)
{
  return sub_10014A768(a1);
}

void sub_10014AEAC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10014B004();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(v3 + 96);
      *(_DWORD *)buf = 138412546;
      uint64_t v11 = v3;
      __int16 v12 = 2112;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%@ attaching to %@", buf, 0x16u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 96);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10014B058;
  v7[3] = &unk_10027D3B0;
  v7[4] = v5;
  char v9 = *(unsigned char *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  [v6 attachObject:v5 withCompletionHandler:v7];
}

id sub_10014B004()
{
  if (qword_1002DBCB0 != -1) {
    dispatch_once(&qword_1002DBCB0, &stru_10027E928);
  }
  uint64_t v0 = (void *)qword_1002DBCB8;
  return v0;
}

void sub_10014B058(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(v5 + 96);
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v54 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to attach to %@: %@", buf, 0x20u);
      }
    }
    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    _OWORD v26[2] = sub_10014BDDC;
    v26[3] = &unk_100276210;
    id v28 = *(id *)(a1 + 40);
    uint64_t v27 = v3;
    id v8 = v26;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10016C96C;
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t))&unk_100275DF8;
    uint64_t v55 = v8;
    char v9 = v7;
    dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v9, v10);

    uint64_t v11 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v11 + 8))
    {
      if (!_CPLSilentLogging)
      {
        __int16 v12 = sub_10014B004();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 96);
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Closing %@ now", buf, 0xCu);
        }

        uint64_t v11 = *(void *)(a1 + 32);
      }
      uint64_t v14 = *(void **)(v11 + 96);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10014BE00;
      v25[3] = &unk_100276328;
      v25[4] = v11;
      [v14 closeAndDeactivate:0 completionHandler:v25];
    }

    id v15 = v28;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v16 = sub_10014B004();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(v17 + 96);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@ attached successfully to %@.", buf, 0x16u);
      }
    }
    uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 96) store];
    uint64_t v20 = [v19 outgoingResources];
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    uint64_t v54 = sub_10014B620;
    uint64_t v55 = sub_10014B630;
    id v56 = 0;
    v52[0] = 0;
    v52[1] = v52;
    v52[2] = 0x2020000000;
    v52[3] = 0;
    v51[0] = 0;
    v51[1] = v51;
    v51[2] = 0x2020000000;
    v51[3] = 0;
    v50[0] = 0;
    v50[1] = v50;
    v50[2] = 0x2020000000;
    v50[3] = 0;
    v49[0] = 0;
    v49[1] = v49;
    void v49[2] = 0x2020000000;
    v49[3] = 0;
    v48[0] = 0;
    v48[1] = v48;
    v48[2] = 0x2020000000;
    v48[3] = 0;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10014B638;
    v37[3] = &unk_10027D338;
    uint64_t v41 = buf;
    id v15 = v19;
    id v38 = v15;
    unint64_t v42 = v52;
    id v43 = v51;
    uint64_t v44 = v50;
    id v21 = v20;
    uint64_t v45 = v49;
    unint64_t v46 = v48;
    char v47 = *(unsigned char *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 32);
    id v39 = v21;
    uint64_t v40 = v22;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10014B8BC;
    v29[3] = &unk_10027D388;
    id v23 = *(id *)(a1 + 40);
    v29[4] = *(void *)(a1 + 32);
    id v30 = v23;
    uint64_t v31 = v52;
    uint64_t v32 = v51;
    uint64_t v33 = v50;
    uint64_t v34 = v49;
    uint64_t v35 = v48;
    id v36 = buf;
    id v24 = [v15 performWriteTransactionWithBlock:v37 completionHandler:v29];

    _Block_object_dispose(v48, 8);
    _Block_object_dispose(v49, 8);
    _Block_object_dispose(v50, 8);
    _Block_object_dispose(v51, 8);
    _Block_object_dispose(v52, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_10014B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 240), 8);
  _Block_object_dispose((const void *)(v55 - 208), 8);
  _Block_object_dispose((const void *)(v55 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014B620(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014B630(uint64_t a1)
{
}

void sub_10014B638(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014B708;
  v6[3] = &unk_10027D310;
  uint64_t v10 = *(void *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  id v4 = *(id *)(a1 + 40);
  long long v13 = *(_OWORD *)(a1 + 88);
  char v14 = *(unsigned char *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  [a2 do:v6];
}

uint64_t sub_10014B708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) libraryVersion];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = [*(id *)(a1 + 32) resourceStorage];
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v7 sizeOfResourcesToUpload];

  id v8 = [*(id *)(a1 + 32) resourceStorage];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v8 sizeOfOriginalResourcesToUpload];

  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalImages];
  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalVideos];
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [*(id *)(a1 + 40) countOfOriginalOthers];
  if (!_CPLSilentLogging)
  {
    uint64_t v9 = sub_10014B004();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      int v15 = 138412290;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Got inital library version %@", (uint8_t *)&v15, 0xCu);
    }
  }
  if (!*(unsigned char *)(a1 + 104)) {
    return 1;
  }
  long long v11 = *(void **)(a1 + 32);
  uint64_t v12 = [*(id *)(a1 + 48) abstractObject];
  id v13 = objc_msgSend(v11, "updateLibraryOptions:error:", objc_msgSend(v12, "libraryOptions"), a2);

  return (uint64_t)v13;
}

void sub_10014B8BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_10014B004();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = [v3 error];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to get initial library version: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [v3 error];
    (*(void (**)(uint64_t, void *, void, void, void, void))(v7 + 16))(v7, v8, 0, 0, 0, 0);

    uint64_t v9 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v9 + 8))
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v10 = sub_10014B004();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 96);
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Closing %@ now", (uint8_t *)&buf, 0xCu);
        }

        uint64_t v9 = *(void *)(a1 + 32);
      }
      uint64_t v12 = *(void **)(v9 + 96);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      _OWORD v26[2] = sub_10014BBE4;
      v26[3] = &unk_100276328;
      void v26[4] = v9;
      [v12 closeAndDeactivate:0 completionHandler:v26];
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 32);
    char v14 = *(void **)(v13 + 104);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10014BCC8;
    v21[3] = &unk_10027D360;
    v21[4] = v13;
    long long v15 = *(_OWORD *)(a1 + 72);
    long long v23 = *(_OWORD *)(a1 + 56);
    long long v24 = v15;
    long long v20 = *(_OWORD *)(a1 + 40);
    id v16 = (id)v20;
    long long v22 = v20;
    uint64_t v25 = *(void *)(a1 + 88);
    uint64_t v17 = v21;
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v28 = sub_10016C96C;
    id v29 = &unk_100275DF8;
    id v30 = v17;
    uint64_t v18 = v14;
    dispatch_block_t v19 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
    dispatch_async(v18, v19);
  }
}

void sub_10014BBE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 96);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ closed with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10014BCC8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) abstractObject];
  [v2 _setSizeOfResourcesToUpload:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) sizeOfOriginalResourcesToUpload:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) numberOfImages:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) numberOfVideos:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) numberOfOtherItems:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];

  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = [*(id *)(*(void *)(a1 + 32) + 96) libraryIdentifier];
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 96) mainScopeIdentifier];
  int v6 = [*(id *)(*(void *)(a1 + 32) + 96) clientLibraryBaseURL];
  (*(void (**)(uint64_t, void, uint64_t, id, void *, void *))(v4 + 16))(v4, 0, v3, v7, v5, v6);
}

uint64_t sub_10014BDDC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0, 0, 0);
}

void sub_10014BE00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 96);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ closed with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10014BEE4(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1[4] + 96);
        int v8 = 138412546;
        uint64_t v9 = v5;
        __int16 v10 = 2112;
        id v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to open: %@", (uint8_t *)&v8, 0x16u);
      }
    }
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      int v6 = sub_10014B004();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1[4] + 96);
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ opened successfully.", (uint8_t *)&v8, 0xCu);
      }
    }
    (*(void (**)(void))(a1[5] + 16))();
  }
}

id sub_10014C3C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  int v6 = *(void **)(v2 + 64);
  if (v6)
  {
    [v6 cancelTask];
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  [*(id *)(v2 + 72) makeObjectsPerformSelector:"cancel"];
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 72);
  return [v9 removeAllObjects];
}

void sub_10014C464(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 96);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014C52C;
  v8[3] = &unk_10027A2C0;
  v8[4] = v4;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v5 detachObject:v4 withCompletionHandler:v8];
}

void sub_10014C52C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && !_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(v5 + 96);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to detach from %@: %@", buf, 0x20u);
    }
  }
  id v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014C728;
  v12[3] = &unk_100276C98;
  id v15 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 40);
  id v14 = v3;
  int v8 = v12;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_10016C96C;
  uint64_t v17 = &unk_100275DF8;
  id v18 = v8;
  id v9 = v7;
  id v10 = v3;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v9, v11);
}

uint64_t sub_10014C728(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (!v3) {
    uint64_t v3 = a1[5];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_10014C748(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && !_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(v5 + 96);
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ failed to detach from %@: %@", buf, 0x20u);
    }
  }
  id v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10014C930;
  v13[3] = &unk_100276210;
  id v8 = *(id *)(a1 + 40);
  id v14 = v3;
  id v15 = v8;
  id v9 = v13;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_10016C96C;
  uint64_t v17 = &unk_100275DF8;
  id v18 = v9;
  id v10 = v7;
  id v11 = v3;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v10, v12);
}

uint64_t sub_10014C930(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10014CAC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(void **)(v2 + 64);
  if (v6)
  {
    [v6 cancelTask];
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = 0;
  }
}

void sub_10014CB48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 138412290;
        id v7 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Can't deactivate library: %@", (uint8_t *)&v6, 0xCu);
      }
    }
    uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v5();
}

void sub_10014CD80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) scopes];
  uint64_t v5 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10014CEAC;
  v13[3] = &unk_1002773D8;
  id v14 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10014CF44;
  v10[3] = &unk_10027D428;
  int v6 = *(void **)(a1 + 48);
  v10[4] = *(void *)(a1 + 40);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10014CEAC(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014CF38;
  v3[3] = &unk_10027D400;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_10014CF38(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) enablePrimaryScopeWithError:a2];
}

void sub_10014CF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014D090;
  v9[3] = &unk_100276C98;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v5;
  int v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10014D090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
  id v4 = *(void **)(a1 + 40);
  return [v4 unblock];
}

void sub_10014D1C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) scopes];
  uint64_t v5 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10014D2F4;
  v13[3] = &unk_1002773D8;
  id v14 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10014D38C;
  v10[3] = &unk_10027D428;
  int v6 = *(void **)(a1 + 48);
  v10[4] = *(void *)(a1 + 40);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = [v5 performWriteTransactionByPassBlocker:v7 withBlock:v13 completionHandler:v10];
}

void sub_10014D2F4(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014D380;
  v3[3] = &unk_10027D400;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_10014D380(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) disablePrimaryScopeWithError:a2];
}

void sub_10014D38C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014D4D8;
  v9[3] = &unk_100276C98;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v5;
  int v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10014D4D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
  id v4 = *(void **)(a1 + 40);
  return [v4 unblock];
}

void sub_10014D67C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) scopes];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014D7D4;
  v12[3] = &unk_10027D478;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014DA80;
  v9[3] = &unk_10027D428;
  uint64_t v5 = *(void **)(a1 + 56);
  void v9[4] = *(void *)(a1 + 48);
  id v10 = v3;
  id v11 = v5;
  id v6 = v3;
  id v7 = v13;
  id v8 = [v4 performWriteTransactionByPassBlocker:v6 withBlock:v12 completionHandler:v9];
}

void sub_10014D7D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = sub_10014B620;
  id v13 = sub_10014B630;
  id v14 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  if (v10[5])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10014D938;
    v5[3] = &unk_100277428;
    id v6 = *(id *)(a1 + 48);
    id v8 = &v9;
    id v7 = *(id *)(a1 + 32);
    [v3 do:v5];

    id v4 = v6;
  }
  else
  {
    id v4 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
    [v3 setError:v4];
  }

  _Block_object_dispose(&v9, 8);
}

void sub_10014D920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014D938(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) canActivateScope:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) error:a2];
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v4)
  {
    return (uint64_t)_[v5 activateScope:v6 error:a2];
  }
  else if ([v5 valueForFlag:16 forScope:v6])
  {
    return 0;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10014B004();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        int v10 = 138412290;
        uint64_t v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Client is trying to activate %@ while it should not - fortunately it is already active", (uint8_t *)&v10, 0xCu);
      }
    }
    return 1;
  }
}

void sub_10014DA80(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014DBCC;
  v9[3] = &unk_100276C98;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v5;
  uint64_t v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10014DBCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
  unsigned int v4 = *(void **)(a1 + 40);
  return [v4 unblock];
}

void sub_10014DD70(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) scopes];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014DEC8;
  v12[3] = &unk_10027D478;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v4 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014E144;
  v9[3] = &unk_10027D428;
  uint64_t v5 = *(void **)(a1 + 56);
  void v9[4] = *(void *)(a1 + 48);
  id v10 = v3;
  id v11 = v5;
  id v6 = v3;
  id v7 = v13;
  id v8 = [v4 performWriteTransactionByPassBlocker:v6 withBlock:v12 completionHandler:v9];
}

void sub_10014DEC8(id *a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3032000000;
  v9[3] = sub_10014B620;
  void v9[4] = sub_10014B630;
  id v10 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10014DFF4;
  v4[3] = &unk_10027D4C8;
  id v8 = v9;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  [v3 do:v4];

  _Block_object_dispose(v9, 8);
}

void sub_10014DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014DFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v7)
  {
    uint64_t result = (uint64_t)[*(id *)(a1 + 48) canActivateScope:v7 error:a2];
    if (result)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      return (uint64_t)_[v9 deactivateScope:v10 error:a2];
    }
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_10014B004();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = 138412290;
        uint64_t v14 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Disabling unknown scope %@", (uint8_t *)&v13, 0xCu);
      }
    }
    return 1;
  }
  return result;
}

void sub_10014E144(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014E290;
  v9[3] = &unk_100276C98;
  id v12 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10014E290(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 unblock];
}

void sub_10014E444(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10014E548;
    v6[3] = &unk_10027D4F0;
    id v7 = *(id *)(a1 + 32);
    id v8 = v4;
    [v3 do:v6];
  }
  else
  {
    uint64_t v5 = +[CPLErrors cplErrorWithCode:2001, @"%@ is unknown", *(void *)(a1 + 40) description];
    [v3 setError:v5];
  }
}

id sub_10014E548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) flagsForScope:*(void *)(a1 + 40)];
  [v4 setValue:1 forFlag:0x20000];
  id v5 = [*(id *)(a1 + 32) updateFlags:v4 forScope:*(void *)(a1 + 40) error:a2];

  return v5;
}

void sub_10014E5B0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10014E7D8(uint64_t a1, void *a2)
{
  id v30 = a2;
  id v3 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v4 = [v3 resourceProgressDelegate];
  uint64_t v31 = v3;
  if (objc_opt_respondsToSelector())
  {
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    void v49[2] = sub_10014ED54;
    v49[3] = &unk_10027D540;
    void v49[4] = *(void *)(a1 + 32);
    id v50 = v4;
    id v51 = v3;
    id v5 = objc_retainBlock(v49);
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x3032000000;
  unint64_t v46 = sub_10014B620;
  char v47 = sub_10014B630;
  id v48 = 0;
  id v6 = [*(id *)(a1 + 40) downloadQueue];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = v5;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10014EEB8;
  v40[3] = &unk_10027D568;
  v40[4] = *(void *)(a1 + 32);
  id v29 = v4;
  id v41 = v29;
  id v42 = v31;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10014F010;
  v37[3] = &unk_10027D5B8;
  void v37[4] = *(void *)(a1 + 32);
  id v12 = v42;
  id v38 = v12;
  id v39 = &v43;
  int v13 = [v6 downloadTaskForLocalResource:v7 clientBundleID:v8 options:v10 proposedTaskIdentifier:v11 didStartHandler:v40 progressHandler:v9 completionHandler:v37];

  if (v13)
  {
    if ([*(id *)(a1 + 64) shouldKeepPower])
    {
      id v14 = +[CPLTransaction newTransactionWithIdentifier:@"cpl.downloadresource" description:@"client downloading resources" keepPower:1];
      id v15 = (void *)v44[5];
      v44[5] = (uint64_t)v14;
    }
    id v16 = [*(id *)(*(void *)(a1 + 32) + 96) syncManager];
    [v16 beginClientWork:@"client downloading resources"];

    uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 104);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10014F250;
    v34[3] = &unk_100276210;
    id v36 = *(id *)(a1 + 80);
    id v18 = v13;
    id v35 = v18;
    dispatch_block_t v19 = v34;
    *(void *)&long long block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472;
    uint64_t v53 = sub_10016C96C;
    uint64_t v54 = &unk_100275DF8;
    id v55 = v19;
    long long v20 = v17;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v20, v21);

    [v18 launch];
    long long v22 = &v36;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      long long v23 = sub_10014B004();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 48);
        LODWORD(block) = 138412290;
        *(void *)((char *)&block + 4) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Can't get a task to download %@", (uint8_t *)&block, 0xCu);
      }
    }
    uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 104);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10014F264;
    v32[3] = &unk_100275DF8;
    id v33 = *(id *)(a1 + 80);
    id v26 = v32;
    *(void *)&long long block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472;
    uint64_t v53 = sub_10016C96C;
    uint64_t v54 = &unk_100275DF8;
    id v55 = v26;
    uint64_t v27 = v25;
    dispatch_block_t v28 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v27, v28);

    long long v22 = &v33;
  }

  _Block_object_dispose(&v43, 8);
}

void sub_10014ED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_10014ED54(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  id v6 = *(void **)(*(void *)(a1 + 32) + 104);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014EEA4;
  v12[3] = &unk_100276FA0;
  id v13 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  float v16 = a3;
  id v14 = v7;
  id v15 = v5;
  uint64_t v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v18 = v8;
  uint64_t v9 = v6;
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

id sub_10014EEA4(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 56);
  return _[*(id *)(a1 + 32) libraryManager:*(void *)(a1 + 40) downloadDidProgress:*(void *)(a1 + 48) forResourceTransferTask:a2];
}

void sub_10014EEB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10014F000;
  v9[3] = &unk_1002760B0;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_10014F000(uint64_t a1)
{
  return _[*(id *)(a1 + 32) libraryManager:*(void *)(a1 + 40) downloadDidStartForResourceTransferTask:*(void *)(a1 + 48)];
}

void sub_10014F010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(*(void *)(a1 + 32) + 96) syncManager];
  [v7 endClientWork:@"client downloading resources"];

  dispatch_block_t v8 = *(void **)(*(void *)(a1 + 32) + 104);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10014F1A0;
  v15[3] = &unk_10027D590;
  id v16 = *(id *)(a1 + 40);
  id v17 = v5;
  uint64_t v9 = *(void *)(a1 + 48);
  id v18 = v6;
  uint64_t v19 = v9;
  id v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v21 = v10;
  id v11 = v8;
  id v12 = v6;
  id v13 = v5;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

id sub_10014F1A0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = [v2 resourceProgressDelegate];
  uint64_t v4 = (void *)a1[5];
  id v5 = [v4 resource];
  uint64_t v6 = a1[6];
  id v7 = v4;
  id v8 = v2;
  [v3 libraryManager:v8 downloadDidFinishForResourceTransferTask:v7 finalResource:v5 withError:v6];

  uint64_t v9 = *(void **)(*(void *)(a1[7] + 8) + 40);
  return _[v9 endTransaction];
}

uint64_t sub_10014F250(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10014F264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10014F6E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors cplErrorWithCode:1013 description:@"Network is constrained. We should avoid autoplay"];
  (*(void (**)(uint64_t, void, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, 0, v2);
}

void sub_10014F764(uint64_t a1, void *a2)
{
  id v3 = [a2 error];
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104);
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_10014FBEC;
    v56[3] = &unk_100276C98;
    id v59 = *(id *)(a1 + 88);
    id v57 = v3;
    id v58 = *(id *)(a1 + 40);
    *(void *)&long long block = _NSConcreteStackBlock;
    *((void *)&block + 1) = 3221225472;
    *(void *)&long long v46 = sub_10016C96C;
    *((void *)&v46 + 1) = &unk_100275DF8;
    *(void *)&long long v47 = v56;
    id v5 = v4;
    dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v5, v6);

    id v7 = v59;
  }
  else
  {
    char v55 = 0;
    id v8 = *(void **)(a1 + 56);
    id v9 = *(id *)(a1 + 48);
    id v10 = [v8 transactionTransportScopeMapping];
    id v11 = *(void **)(a1 + 64);
    id v53 = 0;
    id v54 = v9;
    id v52 = 0;
    id v12 = [v11 cloudResourceForLocalResource:&v54 cloudRecord:0 target:&v53 shouldNotTrustCaches:&v55 allowUnsafeClientCache:1 transportScopeMapping:v10 error:&v52];
    id v7 = v54;

    id v13 = v53;
    id v14 = v52;
    uint64_t v15 = *(void *)(a1 + 32);
    if (v12)
    {
      id v16 = [*(id *)(v15 + 96) transport];
      uint64_t v37 = *(void *)(a1 + 96);
      id v38 = v13;
      id v17 = v12;
      id v18 = v10;
      id v19 = v14;
      uint64_t v21 = *(void *)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_10014FC50;
      v48[3] = &unk_10027D690;
      id v22 = *(id *)(a1 + 88);
      uint64_t v23 = *(void *)(a1 + 32);
      id v51 = v22;
      void v48[4] = v23;
      id v49 = *(id *)(a1 + 48);
      id v50 = *(id *)(a1 + 40);
      long long v24 = *(_OWORD *)(a1 + 120);
      long long block = *(_OWORD *)(a1 + 104);
      long long v46 = v24;
      long long v47 = *(_OWORD *)(a1 + 136);
      uint64_t v36 = v20;
      id v14 = v19;
      id v10 = v18;
      id v12 = v17;
      uint64_t v25 = v21;
      id v13 = v38;
      id v26 = [v16 getStreamingURLTaskForResource:v17 intent:v37 hints:v25 timeRange:&block target:v38 transportScopeMapping:v10 clientBundleID:v36 completionHandler:v48];

      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_10014FF30;
      v43[3] = &unk_100276018;
      uint64_t v27 = *(void **)(a1 + 40);
      v43[4] = *(void *)(a1 + 32);
      id v44 = v26;
      id v28 = v26;
      id v29 = &v51;
      id v30 = v28;
      [v27 performAsCurrentWithPendingUnitCount:1 usingBlock:v43];

      uint64_t v31 = v49;
    }
    else
    {
      uint64_t v32 = *(void **)(v15 + 104);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10014FF8C;
      v39[3] = &unk_100276C98;
      id v29 = &v42;
      id v42 = *(id *)(a1 + 88);
      id v40 = v14;
      id v41 = *(id *)(a1 + 40);
      id v33 = v39;
      *(void *)&long long block = _NSConcreteStackBlock;
      *((void *)&block + 1) = 3221225472;
      *(void *)&long long v46 = sub_10016C96C;
      *((void *)&v46 + 1) = &unk_100275DF8;
      *(void *)&long long v47 = v33;
      uint64_t v34 = v32;
      dispatch_block_t v35 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v34, v35);

      uint64_t v31 = v40;
    }
  }
}

id sub_10014FBEC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v2 = [*(id *)(a1 + 40) totalUnitCount];
  id v3 = *(void **)(a1 + 40);
  return [v3 setCompletedUnitCount:v2];
}

void sub_10014FC50(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (*(void *)(a1 + 56))
  {
    id v17 = *(void **)(*(void *)(a1 + 32) + 104);
    uint64_t v21 = _NSConcreteStackBlock;
    uint64_t v22 = 3221225472;
    uint64_t v23 = sub_10014FE44;
    long long v24 = &unk_10027D668;
    id v25 = v15;
    id v26 = *(id *)(a1 + 40);
    id v31 = *(id *)(a1 + 56);
    id v27 = v11;
    id v28 = v12;
    id v29 = v13;
    id v30 = v14;
    id v18 = &v21;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v33 = v18;
    id v19 = v17;
    dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v19, v20);
  }
  objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount", v21, v22, v23, v24));
}

uint64_t sub_10014FE44(void *a1)
{
  if (a1[4]) {
    BOOL v2 = _CPLSilentLogging == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    id v3 = sub_10014B004();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = a1[4];
      uint64_t v4 = a1[5];
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Getting a streaming URL for %@ failed: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(a1[10] + 16))();
}

id sub_10014FF30(uint64_t a1)
{
  BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 96) syncManager];
  [v2 configureDirectTransportTask:*(void *)(a1 + 40)];

  id v3 = *(void **)(a1 + 40);
  return [v3 runWithNoSyncSession];
}

id sub_10014FF8C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v2 = [*(id *)(a1 + 40) totalUnitCount];
  id v3 = *(void **)(a1 + 40);
  return [v3 setCompletedUnitCount:v2];
}

void sub_10014FFF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors incorrectParametersErrorForParameter:@"itemScopedIdentifier"];
  (*(void (**)(uint64_t, void, void, void, void, id))(v1 + 16))(v1, 0, 0, 0, 0, v2);
}

void sub_100150230(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  if (v2[7])
  {
    [v2[7] cancel];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0;

    id v2 = *(id **)(a1 + 32);
  }
  uint64_t v5 = [v2 engineLibrary];
  dispatch_block_t v6 = [v5 transport];

  uint64_t v18 = 0;
  id v19 = (id *)&v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = sub_10014B620;
  uint64_t v22 = sub_10014B630;
  id v23 = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10015042C;
  v14[3] = &unk_10027D708;
  v14[4] = *(void *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  id v17 = &v18;
  id v15 = *(id *)(a1 + 40);
  uint64_t v9 = [v6 rampingRequestTaskForResourceType:v7 numRequested:v8 completionHandler:v14];
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(v10 + 56);
  *(void *)(v10 + 56) = v9;

  objc_storeStrong(v19 + 5, *(id *)(*(void *)(a1 + 32) + 56));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100150634;
  v13[3] = &unk_100275EA0;
  id v12 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v13];

  _Block_object_dispose(&v18, 8);
}

void sub_100150414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015042C(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 104);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100150594;
  v17[3] = &unk_10027D6E0;
  id v9 = *(id *)(a1 + 48);
  char v24 = a2;
  uint64_t v10 = *(void *)(a1 + 56);
  id v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = a3;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v18 = v7;
  uint64_t v19 = v11;
  id v20 = v12;
  id v13 = v17;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v26 = v13;
  id v14 = v8;
  id v15 = v7;
  dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v14, v16);
}

id sub_100150594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 80), *(void *)(a1 + 72), *(void *)(a1 + 32));
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4 == *(void **)(v5 + 56))
  {
    *(void *)(v5 + 56) = 0;

    uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
  }
  *(void *)(v3 + 40) = 0;

  id v6 = [*(id *)(a1 + 48) totalUnitCount];
  id v7 = *(void **)(a1 + 48);
  return [v7 setCompletedUnitCount:v6];
}

id sub_100150634(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  uint64_t v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(*(void *)(a1 + 32) + 56)];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 56);
  return [v4 runWithNoSyncSession];
}

void sub_1001507F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v60 = 0;
  uint64_t v61 = &v60;
  uint64_t v62 = 0x3032000000;
  uint64_t v63 = sub_10014B620;
  uint64_t v64 = sub_10014B630;
  id v65 = 0;
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_100150DB8;
  v58[3] = &unk_10027D780;
  v58[4] = *(void *)(a1 + 32);
  id v5 = v4;
  id v59 = v5;
  id v6 = objc_retainBlock(v58);
  id v7 = [v3 error];
  if (!v7)
  {
    id v39 = v3;
    LOBYTE(block[0]) = 0;
    id v11 = *(id *)(a1 + 40);
    id v12 = [*(id *)(a1 + 48) transactionTransportScopeMapping];
    id v13 = *(void **)(a1 + 56);
    id v56 = 0;
    id v57 = v11;
    id v54 = 0;
    id v55 = 0;
    id v14 = [v13 cloudResourceForLocalResource:&v57 cloudRecord:&v56 target:&v55 shouldNotTrustCaches:block allowUnsafeClientCache:0 transportScopeMapping:v12 error:&v54];
    id v15 = v57;

    id v16 = v56;
    id v41 = v55;
    id v10 = v54;
    id v40 = v16;
    if (!v14 || v16)
    {
      if (v14)
      {
        id v37 = v15;
        id v38 = v12;
        id v18 = [v14 itemScopedIdentifier];
        uint64_t v19 = [v18 scopeIdentifier];
        id v20 = [*(id *)(a1 + 48) scopes];
        id v53 = 0;
        unsigned int v21 = [v38 addTransportScopeForScopeIdentifier:v19 scopes:v20 useStagingScopeIfNecessary:1 error:&v53];
        id v36 = v53;

        if (v21)
        {
          id v22 = objc_alloc((Class)CPLInMemoryResourceDownloadTask);
          uint64_t v23 = +[NSUUID UUID];
          char v24 = [v23 UUIDString];
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472;
          void v49[2] = sub_10015103C;
          v49[3] = &unk_10027D7D0;
          void v49[4] = *(void *)(a1 + 32);
          id v50 = v41;
          id v51 = v38;
          id v52 = *(id *)(a1 + 64);
          v46[0] = _NSConcreteStackBlock;
          v46[1] = 3221225472;
          v46[2] = sub_100151178;
          v46[3] = &unk_10027D820;
          v46[4] = *(void *)(a1 + 32);
          id v48 = &v60;
          id v47 = v5;
          id v25 = [v22 initWithResource:v37 taskIdentifier:v24 launchHandler:v49 completionHandler:v46];
          id v26 = (void *)v61[5];
          v61[5] = (uint64_t)v25;

          [(id)v61[5] associateCloudResource:v14 ofRecord:v40];
          [(id)v61[5] setHighPriority:0];
          [(id)v61[5] setClientBundleID:*(void *)(a1 + 64)];
        }
        else
        {
          uint64_t v29 = ((void (*)(void *, id, id))v6[2])(v6, v36, v37);
          id v30 = (void *)v61[5];
          v61[5] = v29;
        }
        char v9 = 1;
        id v15 = v37;
        id v12 = v38;
LABEL_14:

        id v3 = v39;
        goto LABEL_15;
      }
    }
    else
    {

      uint64_t v17 = +[CPLErrors cplErrorWithCode:25 description:@"Record is not found in storage"];

      id v10 = (id)v17;
    }
    id v27 = v15;
    if (!v15) {
      id v27 = *(id *)(a1 + 40);
    }
    uint64_t v28 = ((void (*)(void *, id, id))v6[2])(v6, v10, v27);
    char v9 = 0;
    id v14 = (void *)v61[5];
    v61[5] = v28;
    goto LABEL_14;
  }
  uint64_t v8 = ((void (*)(void *, void *, void))v6[2])(v6, v7, *(void *)(a1 + 40));
  char v9 = 0;
  id v10 = (id)v61[5];
  v61[5] = v8;
LABEL_15:

  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v32 = *(void **)(v31 + 104);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_100151398;
  v42[3] = &unk_10027D848;
  char v45 = v9;
  v42[4] = v31;
  id v44 = &v60;
  id v43 = *(id *)(a1 + 72);
  id v33 = v42;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v67 = v33;
  uint64_t v34 = v32;
  dispatch_block_t v35 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v34, v35);

  _Block_object_dispose(&v60, 8);
}

void sub_100150D94(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

id sub_100150DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100150E80;
  v8[3] = &unk_10027D758;
  id v5 = *(void **)(a1 + 40);
  v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v6 = +[CPLInMemoryResourceDownloadTask failedTaskForResource:a3 error:a2 completionHandler:v8];

  return v6;
}

void sub_100150E80(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100150FE0;
  v14[3] = &unk_1002760B0;
  id v15 = *(id *)(a1 + 40);
  id v16 = v6;
  id v17 = v7;
  id v9 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v19 = v9;
  id v10 = v8;
  id v11 = v7;
  id v12 = v6;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v13);
}

void sub_100150FE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) resourceProgressDelegate];
  [v2 libraryManager:*(void *)(a1 + 32) inMemoryDownloadDidFinishForResourceTransferTask:*(void *)(a1 + 40) data:0 withError:*(void *)(a1 + 48)];
}

void sub_10015103C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1[4] + 96) transport];
  id v5 = [v3 cloudResource];
  id v6 = [v3 cloudRecord];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100151168;
  v12[3] = &unk_10027D7A8;
  id v13 = v3;
  id v10 = v3;
  id v11 = [v4 inMemoryDownloadTaskForResource:v5 record:v6 target:v7 transportScopeMapping:v8 clientBundleID:v9 completionHandler:v12];

  [v10 launchTransportTask:v11];
}

id sub_100151168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) finishWithData:a2 error:a3];
}

void sub_100151178(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a1[4];
  id v11 = (void *)a1[5];
  id v12 = *(void **)(v10 + 104);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100151300;
  v19[3] = &unk_10027D7F8;
  uint64_t v24 = a1[6];
  v19[4] = v10;
  id v20 = v11;
  id v21 = v7;
  id v22 = v8;
  id v23 = v9;
  id v13 = v19;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v26 = v13;
  id v14 = v12;
  id v15 = v9;
  id v16 = v8;
  id v17 = v7;
  dispatch_block_t v18 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v14, v18);
}

void sub_100151300(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8);
  id v3 = *(void **)(v2 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == *(void **)(v4 + 64))
  {
    *(void *)(v4 + 64) = 0;

    uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8);
    id v3 = *(void **)(v2 + 40);
  }
  *(void *)(v2 + 40) = 0;

  id v5 = [*(id *)(a1 + 40) resourceProgressDelegate];
  [v5 libraryManager:*(void *)(a1 + 40) inMemoryDownloadDidFinishForResourceTransferTask:*(void *)(a1 + 48) data:*(void *)(a1 + 56) withError:*(void *)(a1 + 64)];
}

id sub_100151398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(v2 + 64);
    if (v3)
    {
      [v3 cancelTask];
      uint64_t v2 = *(void *)(a1 + 32);
    }
    objc_storeStrong((id *)(v2 + 64), *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  return [v4 launch];
}

void sub_1001515AC(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100151664;
  v4[3] = &unk_10027D898;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  [a2 do:v4];
}

uint64_t sub_100151664(id *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        id v8 = objc_msgSend(a1[5], "localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:", v7, (void)v10);
        if (v8) {
          [a1[6] setObject:v8 forKey:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_100151788(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 error];

  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = [v6 error];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v4 + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
  }
}

void sub_100151944(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (!v4)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v7 = *(id *)(a1 + 32);
    id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (!v8) {
      goto LABEL_17;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    while (1)
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        char v16 = 0;
        long long v13 = *(void **)(a1 + 40);
        if (!*(unsigned char *)(a1 + 56))
        {
          id v15 = [v13 localScopedIdentifierForCloudScopedIdentifier:v12 isFinal:&v16];
          if (!v15) {
            continue;
          }
LABEL_13:
          [v6 setObject:v15 forKey:v12];
LABEL_14:

          continue;
        }
        uint64_t v14 = [v13 cloudScopedIdentifierForLocalScopedIdentifier:v12 isFinal:&v16];
        id v15 = (void *)v14;
        if (!v16) {
          goto LABEL_14;
        }
        if (v14) {
          goto LABEL_13;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (!v9)
      {
LABEL_17:

        (*(void (**)(void, id, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v6, 0);
        goto LABEL_18;
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [v3 error];
  (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
LABEL_18:
}

void sub_100151E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100151E94(uint64_t a1, void *a2)
{
  id v3 = a2;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1001520D8;
  v25[3] = &unk_10027D910;
  id v28 = *(id *)(a1 + 64);
  id v4 = v3;
  id v26 = v4;
  id v27 = *(id *)(a1 + 32);
  uint64_t v5 = objc_retainBlock(v25);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100152134;
  v18[3] = &unk_10027DA28;
  id v6 = *(void **)(a1 + 48);
  v18[4] = *(void *)(a1 + 40);
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 72);
  id v19 = v7;
  uint64_t v24 = v8;
  id v20 = *(id *)(a1 + 56);
  id v9 = v4;
  id v21 = v9;
  uint64_t v10 = v5;
  id v23 = v10;
  id v22 = *(id *)(a1 + 32);
  long long v11 = objc_retainBlock(v18);
  if ([*(id *)(a1 + 48) scopeType] == (id)4)
  {
    uint64_t v12 = *(void **)(a1 + 56);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100152DEC;
    v14[3] = &unk_10027DA50;
    id v15 = v12;
    char v16 = v11;
    long long v17 = v10;
    id v13 = [v15 performReadTransactionWithBlock:v14];
  }
  else
  {
    ((void (*)(void *))v11[2])(v11);
  }
}

id sub_1001520D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  id v3 = [*(id *)(a1 + 40) totalUnitCount];
  id v4 = *(void **)(a1 + 40);
  return [v4 setCompletedUnitCount:v3];
}

void sub_100152134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001522A8;
  v9[3] = &unk_10027DA28;
  void v9[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 80);
  id v10 = v4;
  uint64_t v15 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 64);
  id v6 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v17 = v6;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v8);
}

void sub_1001522A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_10014B620;
  void v17[4] = sub_10014B630;
  id v18 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100152484;
  v11[3] = &unk_10027DA00;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 80);
  v11[4] = v4;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  uint64_t v15 = v17;
  id v14 = *(id *)(a1 + 72);
  id v6 = [v3 createScopeTaskForScope:v5 completionHandler:v11];
  id v7 = *(void **)(a1 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100152D84;
  v9[3] = &unk_100276018;
  void v9[4] = *(void *)(a1 + 32);
  id v8 = v6;
  id v10 = v8;
  [v7 performAsCurrentWithPendingUnitCount:1 usingBlock:v9];

  _Block_object_dispose(v17, 8);
}

void sub_10015246C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100152484(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = *(void **)(*(void *)(a1 + 32) + 104);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100152D6C;
    v24[3] = &unk_100276C98;
    id v11 = &v27;
    id v27 = *(id *)(a1 + 56);
    id v12 = &v25;
    id v25 = v7;
    id v13 = &v26;
    id v26 = v9;
    id v14 = v24;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v37 = v14;
    uint64_t v15 = v10;
    dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v15, v16);

LABEL_5:
    return;
  }
  if (![v7 needsToSetScopeIdentifier])
  {
    id v17 = *(void **)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100152730;
    v32[3] = &unk_10027D960;
    id v11 = &v33;
    id v19 = v7;
    id v33 = v19;
    id v12 = &v34;
    id v34 = *(id *)(a1 + 40);
    id v13 = (id *)v35;
    v35[0] = v8;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1001529B0;
    v28[3] = &unk_10027D9D8;
    long long v20 = *(_OWORD *)(a1 + 64);
    v35[1] = *(void *)(a1 + 64);
    long long v31 = v20;
    v28[4] = *(void *)(a1 + 32);
    id v29 = v19;
    id v30 = *(id *)(a1 + 56);
    id v21 = [v17 performWriteTransactionByPassBlocker:v18 withBlock:v32 completionHandler:v28];

    goto LABEL_5;
  }
  uint64_t v22 = sub_1001CF6E4(v7, a1);
  sub_100152730(v22, v23);
}

void sub_100152730(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001527EC;
  v6[3] = &unk_10027D938;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v9 = v4;
  uint64_t v10 = v5;
  [a2 do:v6];
}

uint64_t sub_1001527EC(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) scopeIdentifier];
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138543362;
      dispatch_block_t v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating scope with identifier %{public}@ after publishing", (uint8_t *)&v15, 0xCu);
    }
  }
  id v6 = [*(id *)(a1 + 40) scopes];
  unint64_t v7 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  if (!objc_msgSend(v6, "shouldAutoactivateScopeWithIdentifier:scopeType:", v4, objc_msgSend(*(id *)(a1 + 32), "scopeType")))v7 |= 0x10uLL; {
  uint64_t v8 = objc_msgSend(v6, "createScopeWithIdentifier:scopeType:flags:transportScope:error:", v4, objc_msgSend(*(id *)(a1 + 32), "scopeType"), v7, *(void *)(a1 + 48), a2);
  }
  if (v8)
  {
    id v9 = (void *)v8;
    if ([v6 setPullFromTransportExpirationInterval:v8 scope:a2 error:86400.0]
      && [v6 storeScopeChange:*(void *)(a1 + 32) forScope:v9 error:a2])
    {
      uint64_t v10 = [v6 scopeChangeForScope:v9];
      uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;

      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_1001529B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v4 && [v4 needsToSetScopeIdentifier])
  {
    sub_1001CF8B0(a1 + 56, a1);
    goto LABEL_13;
  }
  uint64_t v5 = [v3 error];

  if (!v5)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      dispatch_block_t v16 = *(void **)(*(void *)(a1 + 32) + 104);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100152D4C;
      v22[3] = &unk_10027D9B0;
      uint64_t v10 = (id *)v23;
      id v17 = *(id *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      v23[0] = v17;
      v23[1] = v18;
      id v19 = v22;
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10016C96C;
      id v28 = &unk_100275DF8;
      id v29 = v19;
      long long v20 = v16;
      dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v20, v21);

      goto LABEL_11;
    }
LABEL_13:
    sub_1001CF7C4(a1);
  }
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10014B004();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = [v3 error];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to create %@: %@", buf, 0x16u);
    }
  }
  id v9 = *(void **)(*(void *)(a1 + 32) + 104);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100152CE0;
  v24[3] = &unk_10027D988;
  uint64_t v10 = (id *)v26;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  v26[0] = v11;
  v26[1] = v12;
  id v25 = v3;
  uint64_t v13 = v24;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_10016C96C;
  id v28 = &unk_100275DF8;
  id v29 = v13;
  id v14 = v9;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v14, v15);

LABEL_11:
}

void sub_100152CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100152D4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

uint64_t sub_100152D6C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_100152D84(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_100152DEC(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) scopes];
  uint64_t v2 = [v8 primaryScope];
  id v3 = @"iCPL scope has not been seen by CPL yet";
  if (v2) {
    id v4 = 0;
  }
  else {
    id v4 = @"iCPL scope has not been seen by CPL yet";
  }
  uint64_t v5 = v4;
  if (v2)
  {
    if ([v8 valueForFlag:16 forScope:v2])
    {
      id v3 = @"iCPL has not been activated by client";
    }
    else
    {
      id v6 = [v8 transportScopeForScope:v2];

      if (v6)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        goto LABEL_13;
      }
      id v3 = @"iCPL zone has not been fetched or created yet";
    }
  }
  if ([*(id *)(a1 + 32) hasPendingResetSync])
  {
    id v3 = [(__CFString *)v3 stringByAppendingString:@" - maybe because of a reset sync"];
  }
  uint64_t v7 = +[CPLErrors cplErrorWithCode:100, @"Can't create a Shared Library: %@", v3 description];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

LABEL_13:
}

void sub_100153194(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100153210(uint64_t a1, void *a2)
{
  id v3 = a2;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100153448;
  v27[3] = &unk_10027D910;
  id v30 = *(id *)(a1 + 64);
  id v4 = v3;
  id v28 = v4;
  id v29 = *(id *)(a1 + 32);
  uint64_t v5 = objc_retainBlock(v27);
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3032000000;
  v25[3] = sub_10014B620;
  void v25[4] = sub_10014B630;
  id v26 = 0;
  id v6 = [*(id *)(a1 + 40) scopes];
  uint64_t v7 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001534A4;
  v15[3] = &unk_10027DB18;
  id v8 = v6;
  id v16 = v8;
  id v9 = *(id *)(a1 + 48);
  id v23 = v25;
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 40);
  id v11 = v4;
  id v20 = v11;
  uint64_t v12 = v5;
  uint64_t v13 = *(void *)(a1 + 72);
  id v22 = v12;
  uint64_t v24 = v13;
  id v21 = *(id *)(a1 + 32);
  id v14 = [v7 performReadTransactionWithBlock:v15];

  _Block_object_dispose(v25, 8);
}

void sub_100153430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100153448(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  id v3 = [*(id *)(a1 + 40) totalUnitCount];
  id v4 = *(void **)(a1 + 40);
  return [v4 setCompletedUnitCount:v3];
}

void sub_1001534A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) scopeIdentifier];
  id v4 = [v2 scopeWithIdentifier:v3];

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) transportScopeForScope:v4];
    uint64_t v6 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  else if (!_CPLSilentLogging)
  {
    id v8 = sub_10014B004();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Trying to update share for an unknown scope %@ – will proceed anyway", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = *(void **)(v10 + 104);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10015372C;
  v19[3] = &unk_10027DAF0;
  v19[4] = v10;
  id v12 = *(id *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 88);
  id v20 = v12;
  id v21 = v4;
  id v22 = *(id *)(a1 + 56);
  id v23 = *(id *)(a1 + 64);
  id v24 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 96);
  id v26 = v13;
  uint64_t v28 = v14;
  id v25 = *(id *)(a1 + 72);
  dispatch_block_t v15 = v19;
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472;
  id v30 = sub_10016C96C;
  long long v31 = &unk_100275DF8;
  id v32 = v15;
  id v16 = v11;
  id v17 = v4;
  dispatch_block_t v18 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
  dispatch_async(v16, v18);
}

void sub_10015372C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3032000000;
  v24[3] = sub_10014B620;
  void v24[4] = sub_10014B630;
  id v25 = 0;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100153944;
  v15[3] = &unk_10027DAC8;
  uint64_t v5 = *(void *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v6 = *(id *)(a1 + 72);
  id v22 = v24;
  uint64_t v7 = *(void *)(a1 + 32);
  id v19 = v6;
  uint64_t v20 = v7;
  id v8 = *(id *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 104);
  id v21 = v8;
  uint64_t v23 = v9;
  uint64_t v10 = [v3 updateShareTaskForScope:v5 transportScope:v4 completionHandler:v15];
  id v11 = *(void **)(a1 + 80);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100154090;
  v13[3] = &unk_100276018;
  void v13[4] = *(void *)(a1 + 32);
  id v12 = v10;
  id v14 = v12;
  [v11 performAsCurrentWithPendingUnitCount:1 usingBlock:v13];

  _Block_object_dispose(v24, 8);
}

void sub_10015392C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100153944(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || !*(void *)(a1 + 32))
  {
    uint64_t v7 = *(void **)(*(void *)(a1 + 64) + 104);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100154078;
    v23[3] = &unk_100276C98;
    id v8 = &v26;
    id v26 = *(id *)(a1 + 72);
    uint64_t v9 = &v24;
    id v24 = v5;
    uint64_t v10 = &v25;
    id v25 = v6;
    id v11 = v23;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v37 = v11;
    id v12 = v7;
    dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v12, v13);
  }
  else
  {
    id v14 = *(void **)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100153BCC;
    v32[3] = &unk_10027D960;
    id v8 = &v33;
    id v33 = *(id *)(a1 + 56);
    uint64_t v9 = &v34;
    id v16 = v5;
    id v34 = v16;
    uint64_t v10 = (id *)v35;
    id v17 = *(id *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 80);
    v35[0] = v17;
    v35[1] = v18;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100153CE8;
    v27[3] = &unk_10027DAA0;
    id v19 = v16;
    uint64_t v20 = *(void *)(a1 + 64);
    id v21 = *(void **)(a1 + 72);
    id v28 = v19;
    uint64_t v29 = v20;
    id v30 = v21;
    long long v31 = *(_OWORD *)(a1 + 80);
    id v22 = [v14 performWriteTransactionByPassBlocker:v15 withBlock:v32 completionHandler:v27];
  }
}

void sub_100153BCC(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100153C88;
  v6[3] = &unk_10027D938;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v9 = v4;
  uint64_t v10 = v5;
  [a2 do:v6];
}

id sub_100153C88(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(a1 + 40) forScope:*(void *)(a1 + 48) error:a2];
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) scopeChangeForScope:*(void *)(a1 + 48)];
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  return v3;
}

void sub_100153CE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_10014B004();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v7 = [v3 error];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to update share for %@ in storage: %@", buf, 0x16u);
      }
    }
    id v8 = *(void **)(*(void *)(a1 + 40) + 104);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100153FEC;
    v23[3] = &unk_10027D988;
    id v9 = (id *)v25;
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    v25[0] = v10;
    v25[1] = v11;
    id v24 = v3;
    id v12 = v23;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10016C96C;
    uint64_t v27 = &unk_100275DF8;
    id v28 = v12;
    dispatch_block_t v13 = v8;
    dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v13, v14);
  }
  else
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
      sub_1001CF9A8(a1);
    }
    uint64_t v15 = *(void **)(*(void *)(a1 + 40) + 104);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100154058;
    v21[3] = &unk_10027D9B0;
    id v9 = (id *)v22;
    id v16 = *(id *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 56);
    v22[0] = v16;
    v22[1] = v17;
    uint64_t v18 = v21;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10016C96C;
    uint64_t v27 = &unk_100275DF8;
    id v28 = v18;
    id v19 = v15;
    dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v19, v20);
  }
}

void sub_100153FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100154058(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

uint64_t sub_100154078(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_100154090(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_100154354(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1001543CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  uint64_t v4 = [*(id *)(a1 + 32) engineLibrary];
  uint64_t v5 = [v4 store];

  uint64_t v6 = [v5 scopes];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100154530;
  v13[3] = &unk_10027DB68;
  id v20 = *(id *)(a1 + 56);
  id v14 = v6;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v3;
  id v18 = v5;
  char v21 = *(unsigned char *)(a1 + 64);
  id v19 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_100154530(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    uint64_t v6 = [v3 error];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
    if (v7)
    {
      uint64_t v8 = [*(id *)(a1 + 32) transportScopeForScope:v7];
      if (v8)
      {
        id v9 = [*(id *)(a1 + 48) engineLibrary];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_10015476C;
        v16[3] = &unk_10027DB40;
        id v24 = *(id *)(a1 + 80);
        id v17 = *(id *)(a1 + 56);
        id v18 = v8;
        id v19 = v7;
        id v20 = *(id *)(a1 + 64);
        id v21 = *(id *)(a1 + 32);
        char v25 = *(unsigned char *)(a1 + 88);
        id v10 = *(id *)(a1 + 72);
        uint64_t v11 = *(void *)(a1 + 48);
        id v22 = v10;
        uint64_t v23 = v11;
        [v9 blockEngineWithReason:@"Deleting scope" onlyIfBlocked:0 block:v16];
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 80);
        id v15 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 80);
      dispatch_block_t v13 = +[CPLErrors cplErrorWithCode:2001, @"Unknown scope %@", *(void *)(a1 + 40) description];
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
    }
  }
}

void sub_10015476C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1001549A8;
    v22[3] = &unk_100276390;
    id v24 = *(id *)(a1 + 88);
    id v4 = v3;
    id v23 = v4;
    uint64_t v5 = objc_retainBlock(v22);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1001549EC;
    v16[3] = &unk_100279E30;
    id v21 = v5;
    uint64_t v8 = *(void **)(a1 + 48);
    id v17 = v8;
    id v18 = *(id *)(a1 + 56);
    id v19 = v4;
    id v20 = *(id *)(a1 + 64);
    id v9 = v5;
    id v10 = [v6 deleteTransportScope:v7 scope:v8 completionHandler:v16];
    [v10 setForced:*(unsigned __int8 *)(a1 + 96)];
    uint64_t v11 = [*(id *)(a1 + 32) createGroupForTransportScopeDelete];
    [v10 setTransportGroup:v11];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100154CE4;
    v14[3] = &unk_100276018;
    uint64_t v12 = *(void **)(a1 + 72);
    void v14[4] = *(void *)(a1 + 80);
    id v15 = v10;
    id v13 = v10;
    [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v14];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

id sub_1001549A8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(void **)(a1 + 32);
  return [v2 unblock];
}

void sub_1001549EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully deleted %@", buf, 0xCu);
      }
    }
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = [*(id *)(a1 + 48) writeTransactionBlocker];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100154BC8;
    v11[3] = &unk_100276590;
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100154C84;
    v9[3] = &unk_10027D518;
    id v10 = *(id *)(a1 + 64);
    id v8 = [v6 performWriteTransactionByPassBlocker:v7 withBlock:v11 completionHandler:v9];
  }
}

void sub_100154BC8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100154C6C;
  v4[3] = &unk_10027D4F0;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [a2 do:v4];
}

id sub_100154C6C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setValue:1 forFlag:4 forScope:*(void *)(a1 + 40) error:a2];
}

void sub_100154C84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_100154CE4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

uint64_t sub_100154EE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100154EF8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_1001551EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100155268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1001554E8;
    v30[3] = &unk_10027D910;
    id v33 = *(id *)(a1 + 64);
    id v7 = v5;
    id v31 = v7;
    id v32 = *(id *)(a1 + 32);
    id v8 = objc_retainBlock(v30);
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x3032000000;
    v28[3] = sub_10014B620;
    v28[4] = sub_10014B630;
    id v29 = 0;
    id v9 = [*(id *)(a1 + 40) scopes];
    id v10 = *(void **)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100155544;
    v18[3] = &unk_10027DB18;
    id v11 = v9;
    id v19 = v11;
    id v12 = *(id *)(a1 + 48);
    id v26 = v28;
    uint64_t v13 = *(void *)(a1 + 56);
    id v20 = v12;
    uint64_t v21 = v13;
    id v22 = *(id *)(a1 + 40);
    id v14 = v7;
    uint64_t v15 = *(void *)(a1 + 72);
    id v23 = v14;
    uint64_t v27 = v15;
    uint64_t v16 = v8;
    id v25 = v16;
    id v24 = *(id *)(a1 + 32);
    id v17 = [v10 performReadTransactionWithBlock:v18];

    _Block_object_dispose(v28, 8);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
  }
}

void sub_1001554D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001554E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) unblock];
  id v3 = [*(id *)(a1 + 40) totalUnitCount];
  id v4 = *(void **)(a1 + 40);
  return [v4 setCompletedUnitCount:v3];
}

void sub_100155544(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v54 = 0;
  id v55 = &v54;
  uint64_t v56 = 0x3032000000;
  id v57 = sub_10014B620;
  id v58 = sub_10014B630;
  id v59 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v4 = v55[5];
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) scopeChangeForScope:v55[5]];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_10014B004();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v61 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Trying to refresh scope for an scope %{public}@", buf, 0xCu);
      }
    }
    id v8 = [objc_alloc((Class)CPLEngineScope) initWithScopeIdentifier:*(void *)(a1 + 40) scopeType:0];
    id v9 = (void *)v55[5];
    v55[5] = (uint64_t)v8;

    id v5 = 0;
  }
  uint64_t v10 = [*(id *)(a1 + 32) transportScopeForScope:v55[5]];
  uint64_t v11 = *(void *)(*(void *)(a1 + 88) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  id v13 = *(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  id v14 = [*(id *)(a1 + 48) engineLibrary];
  uint64_t v15 = [v14 transport];

  uint64_t v16 = [v15 createGroupForTransportScopeRefresh];
  BOOL v17 = v4 == 0;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100155A08;
  v38[3] = &unk_10027DCC0;
  id v18 = v15;
  uint64_t v19 = *(void *)(a1 + 88);
  id v39 = v18;
  uint64_t v50 = v19;
  id v51 = &v54;
  id v20 = v5;
  id v40 = v20;
  id v41 = *(id *)(a1 + 56);
  id v42 = *(id *)(a1 + 64);
  BOOL v53 = v17;
  id v43 = *(id *)(a1 + 32);
  id v44 = *(id *)(a1 + 40);
  id v21 = v13;
  uint64_t v52 = *(void *)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 48);
  id v45 = v21;
  uint64_t v46 = v22;
  id v49 = *(id *)(a1 + 80);
  id v23 = v16;
  id v47 = v23;
  id v48 = *(id *)(a1 + 72);
  id v24 = objc_retainBlock(v38);
  id v25 = v24;
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    ((void (*)(void *))v24[2])(v24);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v26 = sub_10014B004();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = v55[5];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v61 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Trying to refresh scope with an unknown transport scope for %@ - will try to find transport scope first", buf, 0xCu);
      }
    }
    id v28 = *(void **)(a1 + 48);
    uint64_t v29 = v55[5];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1001566B4;
    v33[3] = &unk_10027DCE8;
    uint64_t v30 = *(void *)(a1 + 72);
    id v35 = *(id *)(a1 + 80);
    id v31 = *(id *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 88);
    id v34 = v31;
    uint64_t v37 = v32;
    id v36 = v25;
    [v28 _fetchTransportScopeForScope:v29 transportGroup:v23 progress:v30 completionHandler:v33];
  }
  _Block_object_dispose(&v54, 8);
}

void sub_1001559DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100155A08(uint64_t a1)
{
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3032000000;
  v29[3] = sub_10014B620;
  v29[4] = sub_10014B630;
  id v30 = 0;
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40);
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100155C54;
  v16[3] = &unk_10027DC98;
  id v17 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  char v28 = *(unsigned char *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 128);
  id v18 = v6;
  uint64_t v25 = v7;
  id v19 = *(id *)(a1 + 64);
  id v20 = *(id *)(a1 + 72);
  id v21 = *(id *)(a1 + 80);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 88);
  id v22 = v8;
  uint64_t v23 = v10;
  id v26 = v29;
  uint64_t v27 = v9;
  id v24 = *(id *)(a1 + 112);
  uint64_t v11 = [v5 getScopeInfoWithTransportScope:v2 scope:v3 previousScopeChange:v4 completionHandler:v16];
  [v11 setTransportGroup:*(void *)(a1 + 96)];
  id v12 = *(void **)(a1 + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10015664C;
  v14[3] = &unk_100276018;
  void v14[4] = *(void *)(a1 + 88);
  id v13 = v11;
  id v15 = v13;
  [v12 performAsCurrentWithPendingUnitCount:1 usingBlock:v14];

  _Block_object_dispose(v29, 8);
}

void sub_100155C3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100155C54(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v28 = a5;
  id v13 = a6;
  if (v13)
  {
    id v14 = *(void **)(*(void *)(a1 + 80) + 104);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100156634;
    v29[3] = &unk_100276C98;
    id v15 = &v32;
    id v32 = *(id *)(a1 + 88);
    uint64_t v16 = &v30;
    id v30 = v11;
    id v17 = &v31;
    id v31 = v13;
    id v18 = v29;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v54 = v18;
    id v19 = v14;
    dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v19, v20);
  }
  else
  {
    id v21 = *(void **)(a1 + 32);
    id v22 = [*(id *)(a1 + 40) writeTransactionBlocker];
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_100155F7C;
    v38[3] = &unk_10027DC48;
    char v52 = *(unsigned char *)(a1 + 120);
    uint64_t v48 = *(void *)(a1 + 96);
    id v15 = &v39;
    id v39 = *(id *)(a1 + 48);
    uint64_t v16 = &v40;
    id v40 = *(id *)(a1 + 56);
    id v17 = &v41;
    id v41 = v28;
    uint64_t v50 = a2;
    id v42 = v11;
    id v43 = v12;
    id v44 = *(id *)(a1 + 64);
    id v45 = *(id *)(a1 + 32);
    id v23 = *(id *)(a1 + 72);
    uint64_t v24 = *(void *)(a1 + 80);
    id v46 = v23;
    uint64_t v47 = v24;
    uint64_t v25 = *(void *)(a1 + 104);
    uint64_t v51 = *(void *)(a1 + 112);
    uint64_t v49 = v25;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100156270;
    v33[3] = &unk_10027DC70;
    uint64_t v35 = v25;
    void v33[4] = v24;
    id v26 = *(void **)(a1 + 88);
    uint64_t v36 = *(void *)(a1 + 96);
    uint64_t v37 = v51;
    id v34 = v26;
    id v27 = [v21 performWriteTransactionByPassBlocker:v22 withBlock:v38 completionHandler:v33];
  }
}

void sub_100155F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 136))
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10015614C;
    v17[3] = &unk_10027D4C8;
    uint64_t v21 = *(void *)(a1 + 104);
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    [v3 do:v17];
  }
  uint64_t v4 = [v3 error];

  if (!v4) {
    +[CPLScopeUpdateScopeTask updateScopeWithNewScopeType:*(void *)(a1 + 120) scope:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) updatedScopeChange:*(void *)(a1 + 56) updatedFlags:*(void *)(a1 + 64) oldTransportScope:*(void *)(a1 + 72) updatedTransportScope:*(void *)(a1 + 48) shouldUpdateTransportScope:&stru_10027DBF8 store:*(void *)(a1 + 80) transport:*(void *)(a1 + 88) session:0 inTransaction:v3];
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001561B8;
  v9[3] = &unk_10027DC20;
  uint64_t v14 = *(void *)(a1 + 104);
  id v10 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 96);
  id v11 = v5;
  uint64_t v12 = v6;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 112);
  id v13 = v7;
  uint64_t v15 = v8;
  [v3 do:v9];
}

BOOL sub_10015614C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) createScopeWithIdentifier:*(void *)(a1 + 40) scopeType:0 flags:16 transportScope:*(void *)(a1 + 48) error:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

BOOL sub_1001561B0(id a1, NSData *a2)
{
  return 1;
}

uint64_t sub_1001561B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  uint64_t v5 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = *(void *)(*(void *)(*(void *)(v4 + 24) + 8) + 40);
  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(a1 + 56) forScope:v8 error:a2];
    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 32) scopeChangeForScope:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
      uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    return (uint64_t)v9;
  }
  else
  {
    uint64_t v14 = sub_1001CFA94(v4, a1);
    return sub_100156270(v14);
  }
}

void sub_100156270(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v4 && [v4 needsToSetScopeIdentifier])
  {
    sub_1001CFC78(a1 + 48, a1);
    goto LABEL_13;
  }
  uint64_t v5 = [v3 error];

  if (!v5)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 104);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_100156614;
      v22[3] = &unk_10027D9B0;
      uint64_t v10 = (id *)v23;
      id v17 = *(id *)(a1 + 40);
      uint64_t v18 = *(void *)(a1 + 48);
      v23[0] = v17;
      v23[1] = v18;
      id v19 = v22;
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10016C96C;
      id v28 = &unk_100275DF8;
      id v29 = v19;
      id v20 = v16;
      dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v20, v21);

      goto LABEL_11;
    }
LABEL_13:
    sub_1001CFB7C(a1);
  }
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10014B004();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      uint64_t v8 = [v3 error];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to refresh %@: %@", buf, 0x16u);
    }
  }
  id v9 = *(void **)(*(void *)(a1 + 32) + 104);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001565A8;
  v24[3] = &unk_10027D988;
  uint64_t v10 = (id *)v26;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  v26[0] = v11;
  v26[1] = v12;
  id v25 = v3;
  id v13 = v24;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_10016C96C;
  id v28 = &unk_100275DF8;
  id v29 = v13;
  uint64_t v14 = v9;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v14, v15);

LABEL_11:
}

void sub_1001565A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

uint64_t sub_100156614(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

uint64_t sub_100156634(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_10015664C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_1001566B4(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(a1[5] + 16))();
  }
  else if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a2);
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = +[CPLErrors cplErrorWithCode:2001, @"Unknown transport scope for %@", a1[4] description];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
}

void sub_100156B78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100156BF4(id *a1)
{
  id v2 = [a1[4] engineLibrary];
  id v3 = [v2 transport];
  uint64_t v4 = [v2 store];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100156D10;
  v7[3] = &unk_10027DDB0;
  v7[4] = a1[4];
  id v12 = a1[7];
  id v8 = a1[5];
  id v9 = v3;
  id v10 = a1[6];
  id v11 = v4;
  id v5 = v4;
  id v6 = v3;
  [v5 blockWriteTransactionsWithCompletionHandler:v7];
}

void sub_100156D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100156EEC;
  v18[3] = &unk_10027DD60;
  void v18[4] = *(void *)(a1 + 32);
  id v21 = *(id *)(a1 + 72);
  id v19 = v3;
  id v20 = *(id *)(a1 + 40);
  id v4 = v3;
  id v5 = objc_retainBlock(v18);
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100157134;
  v14[3] = &unk_10027D910;
  id v17 = v5;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  id v8 = v5;
  id v9 = [v6 fetchTaskForScopeWithShareURL:v7 completionHandler:v14];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001575D0;
  v12[3] = &unk_100276018;
  id v10 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v9;
  id v11 = v9;
  [v10 performAsCurrentWithPendingUnitCount:1 usingBlock:v12];
}

void sub_100156EEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100157078;
  v16[3] = &unk_10027DD38;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v17 = v5;
  uint64_t v18 = v9;
  id v22 = v8;
  id v19 = v6;
  id v20 = v10;
  id v21 = *(id *)(a1 + 48);
  id v11 = v16;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v24 = v11;
  id v12 = v7;
  id v13 = v6;
  id v14 = v5;
  dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v15);
}

id sub_100157078(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      id v4 = *(void **)(a1 + 40);
      id v9 = 0;
      unsigned int v5 = [v4 _isValidScopeForClient:v3 error:&v9];
      id v6 = v9;
      uint64_t v2 = *(void *)(a1 + 72);
      if (!v5)
      {
        uint64_t v7 = *(void (**)(void))(v2 + 16);
        goto LABEL_8;
      }
    }
    else
    {
      id v6 = 0;
    }
    uint64_t v7 = *(void (**)(void))(v2 + 16);
LABEL_8:
    v7();
  }
  [*(id *)(a1 + 56) unblock];
  return objc_msgSend(*(id *)(a1 + 64), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 64), "totalUnitCount"));
}

void sub_100157134(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    id v6 = a1[4];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10015723C;
    v8[3] = &unk_10027DD88;
    id v12 = a1[6];
    id v9 = v5;
    id v10 = a1[4];
    id v11 = a1[5];
    id v7 = [v6 performReadTransactionWithBlock:v8];
  }
}

void sub_10015723C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (!v4)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) scopes];
    id v9 = [*(id *)(a1 + 32) scopeIdentifier];
    id v10 = [v8 scopeWithIdentifier:v9];

    if (!v10)
    {
      [v7 setActivated:0];
      dispatch_block_t v15 = 0;
LABEL_20:
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

      goto LABEL_21;
    }
    id v11 = [v8 flagsForScope:v10];
    if ([v11 valueForFlag:32])
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10014B004();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v13 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
          *(_DWORD *)long long buf = 138543618;
          id v20 = v13;
          __int16 v21 = 2112;
          id v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Trying to fetch a share at %{public}@ resulting to %@ which has already been scheduled to be deleted by client", buf, 0x16u);
        }
      }

      id v14 = [v10 scopeIdentifier];
      +[CPLErrors cplErrorWithCode:23, @"%@ has been deleted by client already", v14 description];
    }
    else
    {
      if (![v11 valueForFlag:4])
      {
        objc_msgSend(v7, "setActivated:", objc_msgSend(v11, "valueForFlag:", 16) ^ 1);
        dispatch_block_t v15 = 0;
        if (![v7 isActivated] || _CPLSilentLogging) {
          goto LABEL_19;
        }
        id v14 = sub_10014B004();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
          *(_DWORD *)long long buf = 138543618;
          id v20 = v18;
          __int16 v21 = 2112;
          id v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Client fetched share at %{public}@ which is already active as %@", buf, 0x16u);
        }
        dispatch_block_t v15 = 0;
LABEL_18:

LABEL_19:
        goto LABEL_20;
      }
      if (!_CPLSilentLogging)
      {
        id v16 = sub_10014B004();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          id v17 = objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL");
          *(_DWORD *)long long buf = 138543618;
          id v20 = v17;
          __int16 v21 = 2112;
          id v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Trying to fetch a share at %{public}@ resulting to %@ which has already been found to be deleted", buf, 0x16u);
        }
      }

      id v14 = [v10 scopeIdentifier];
      +[CPLErrors cplErrorWithCode:23, @"%@ has been deleted on server already", v14 description];
    dispatch_block_t v15 = };
    id v7 = 0;
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = [v3 error];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);

LABEL_21:
}

id sub_1001575D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_100157924(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_10015799C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100157BE4;
  v21[3] = &unk_100277AD8;
  void v21[4] = *(void *)(a1 + 32);
  id v24 = *(id *)(a1 + 64);
  id v4 = v3;
  id v22 = v4;
  id v23 = *(id *)(a1 + 40);
  uint64_t v5 = objc_retainBlock(v21);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100157DA4;
  v15[3] = &unk_10027DEA0;
  void v15[4] = *(void *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v6 = v4;
  id v18 = v6;
  id v7 = v5;
  id v20 = v7;
  id v19 = *(id *)(a1 + 40);
  id v8 = objc_retainBlock(v15);
  if ([*(id *)(a1 + 48) scopeType] == (id)5)
  {
    id v9 = *(void **)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100158608;
    v11[3] = &unk_10027DA50;
    id v12 = v9;
    id v13 = v8;
    id v14 = v7;
    id v10 = [v12 performReadTransactionWithBlock:v11];
  }
  else
  {
    ((void (*)(void *))v8[2])(v8);
  }
}

void sub_100157BE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100157D44;
  v9[3] = &unk_10027DDD8;
  id v13 = *(id *)(a1 + 56);
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  uint64_t v5 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v15 = v5;
  id v6 = v4;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v8);
}

id sub_100157D44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 32));
  }
  [*(id *)(a1 + 40) unblock];
  id v3 = [*(id *)(a1 + 48) totalUnitCount];
  id v4 = *(void **)(a1 + 48);
  return [v4 setCompletedUnitCount:v3];
}

void sub_100157DA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 104);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100157F10;
  v7[3] = &unk_10027DEA0;
  v7[4] = v2;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 72);
  id v11 = *(id *)(a1 + 64);
  id v4 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v4;
  uint64_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);
}

void sub_100157F10(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100158080;
  v10[3] = &unk_10027DE78;
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 72);
  uint64_t v5 = [v3 acceptTaskForSharedScope:v4 completionHandler:v10];
  dispatch_block_t v6 = *(void **)(a1 + 64);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001585A0;
  v8[3] = &unk_100276018;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v7 = v5;
  [v6 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
}

void sub_100158080(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (a5)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100158218;
    v18[3] = &unk_10027DE28;
    id v19 = v9;
    id v20 = *(id *)(a1 + 32);
    id v21 = v11;
    id v22 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10015846C;
    v15[3] = &unk_10027DE50;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    id v14 = [v12 performWriteTransactionByPassBlocker:v13 withBlock:v18 completionHandler:v15];
  }
}

void sub_100158218(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001582E4;
  v4[3] = &unk_10027DE00;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  [a2 do:v4];
}

id sub_1001582E4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Creating %@ after accepting", (uint8_t *)&v13, 0xCu);
    }
  }
  id v6 = [*(id *)(a1 + 32) scopeIdentifier];
  id v7 = [*(id *)(a1 + 40) scopes];
  unint64_t v8 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  unint64_t v9 = (unint64_t)[*(id *)(a1 + 48) flags] | v8;
  if (!objc_msgSend(v7, "shouldAutoactivateScopeWithIdentifier:scopeType:", v6, objc_msgSend(*(id *)(a1 + 32), "scopeType")))v9 |= 0x10uLL; {
  id v10 = objc_msgSend(v7, "createScopeWithIdentifier:scopeType:flags:transportScope:error:", v6, objc_msgSend(*(id *)(a1 + 32), "scopeType"), v9, *(void *)(a1 + 56), a2);
  }
  if (v10) {
    id v11 = [v7 storeScopeChange:*(void *)(a1 + 32) forScope:v10 error:a2];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

void sub_10015846C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4 && !_CPLSilentLogging)
  {
    uint64_t v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = [v3 error];
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to create %@: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = [v3 error];
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
}

id sub_1001585A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_100158608(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) scopes];
  uint64_t v2 = [v8 primaryScope];
  id v3 = @"iCPL scope has not been seen by CPL yet";
  if (v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = @"iCPL scope has not been seen by CPL yet";
  }
  uint64_t v5 = v4;
  if (v2)
  {
    if ([v8 valueForFlag:16 forScope:v2])
    {
      id v3 = @"iCPL has not been activated by client";
    }
    else
    {
      uint64_t v6 = [v8 transportScopeForScope:v2];

      if (v6)
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        goto LABEL_13;
      }
      id v3 = @"iCPL zone has not been fetched or created yet";
    }
  }
  if ([*(id *)(a1 + 32) hasPendingResetSync])
  {
    id v3 = [(__CFString *)v3 stringByAppendingString:@" - maybe because of a reset sync"];
  }
  id v7 = +[CPLErrors cplErrorWithCode:100, @"Can't join a Shared Library: %@", v3 description];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

LABEL_13:
}

void sub_1001588EC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (a5)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    __int16 v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100158A90;
    v18[3] = &unk_10027DE28;
    id v19 = v9;
    id v20 = *(id *)(a1 + 32);
    id v21 = v11;
    id v22 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100158CE4;
    v15[3] = &unk_10027DE50;
    id v16 = v19;
    id v17 = *(id *)(a1 + 48);
    id v14 = [v12 performWriteTransactionByPassBlocker:v13 withBlock:v18 completionHandler:v15];
  }
}

void sub_100158A90(id *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100158B5C;
  v4[3] = &unk_10027DE00;
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  [a2 do:v4];
}

id sub_100158B5C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10014B004();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Creating %@ after accepting", (uint8_t *)&v13, 0xCu);
    }
  }
  id v6 = [*(id *)(a1 + 32) scopeIdentifier];
  id v7 = [*(id *)(a1 + 40) scopes];
  unint64_t v8 = (unint64_t)[*(id *)(a1 + 32) defaultFlags];
  unint64_t v9 = (unint64_t)[*(id *)(a1 + 48) flags] | v8;
  if (!objc_msgSend(v7, "shouldAutoactivateScopeWithIdentifier:scopeType:", v6, objc_msgSend(*(id *)(a1 + 32), "scopeType")))v9 |= 0x10uLL; {
  id v10 = objc_msgSend(v7, "createScopeWithIdentifier:scopeType:flags:transportScope:error:", v6, objc_msgSend(*(id *)(a1 + 32), "scopeType"), v9, *(void *)(a1 + 56), a2);
  }
  if (v10) {
    id v11 = [v7 storeScopeChange:*(void *)(a1 + 32) forScope:v10 error:a2];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

void sub_100158CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v5 = sub_10014B004();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v7 = [v3 error];
        int v10 = 138412546;
        uint64_t v11 = v6;
        __int16 v12 = 2112;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to store %@: %@", (uint8_t *)&v10, 0x16u);
      }
    }
    uint64_t v8 = *(void *)(a1 + 40);
    unint64_t v9 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_100158E34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_1001590DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100159158(uint64_t a1, void *a2)
{
  id v3 = a2;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1001593FC;
  v31[3] = &unk_10027DD60;
  v31[4] = *(void *)(a1 + 32);
  id v34 = *(id *)(a1 + 56);
  id v4 = v3;
  id v32 = v4;
  id v33 = *(id *)(a1 + 40);
  uint64_t v5 = objc_retainBlock(v31);
  uint64_t v6 = +[NSUserDefaults standardUserDefaults];
  unsigned int v7 = [v6 BOOLForKey:@"CPLAlwaysFetchExistingSharedScopeFromTransport"];

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unint64_t v9 = *(void **)(v8 + 104);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1001595E4;
    v27[3] = &unk_1002763D8;
    void v27[4] = v8;
    id v28 = *(id *)(a1 + 40);
    id v29 = v4;
    id v30 = v5;
    int v10 = v27;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v36 = v10;
    uint64_t v11 = v5;
    __int16 v12 = v9;
    dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v12, v13);

    uint64_t v14 = v28;
  }
  else
  {
    id v15 = *(void **)(a1 + 48);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001595F4;
    v21[3] = &unk_10027DF40;
    id v16 = v15;
    id v26 = v5;
    uint64_t v17 = *(void *)(a1 + 32);
    id v18 = *(void **)(a1 + 40);
    id v22 = v16;
    uint64_t v23 = v17;
    id v24 = v18;
    id v25 = v4;
    id v19 = v5;
    id v20 = [v16 performReadTransactionWithBlock:v21];

    uint64_t v14 = v22;
  }
}

void sub_1001593FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100159584;
  v13[3] = &unk_10027DF18;
  id v18 = *(id *)(a1 + 56);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  uint64_t v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v20 = v8;
  unint64_t v9 = v7;
  id v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v12);
}

id sub_100159584(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  [*(id *)(a1 + 48) unblock];
  id v3 = [*(id *)(a1 + 56) totalUnitCount];
  id v4 = *(void **)(a1 + 56);
  return [v4 setCompletedUnitCount:v3];
}

id sub_1001595E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchExistingSharedLibraryScopeWithProgress:*(void *)(a1 + 40) blocker:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_1001595F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) scopes];
  id v5 = [v4 primaryScope];
  if (v5
    && ([v4 sharingScopeForScope:v5], (uint64_t v6 = objc_claimAutoreleasedReturnValue()) != 0)
    && (unsigned int v7 = (void *)v6,
        [v4 scopeChangeForScope:v6],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        v7,
        v8))
  {
LABEL_20:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    unint64_t v9 = [v4 allScopeIdentifiersIncludeInactive:1];
    id v10 = [v9 countByEnumeratingWithState:&v27 objects:v33 count:16];
    if (v10)
    {
      id v11 = v10;
      id v22 = v3;
      uint64_t v8 = 0;
      uint64_t v12 = *(void *)v28;
      do
      {
        dispatch_block_t v13 = 0;
        do
        {
          if (*(void *)v28 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = [v4 scopeWithIdentifier:*(void *)(*((void *)&v27 + 1) + 8 * (void)v13)];
          if (v14 && ([v4 valueForFlag:4 forScope:v14] & 1) == 0)
          {
            if (((unint64_t)[v14 scopeType] & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              uint64_t v15 = [v4 scopeChangeForScope:v14];

              uint64_t v8 = (void *)v15;
            }
          }
          else if (v8)
          {

            id v3 = v22;
            goto LABEL_20;
          }

          dispatch_block_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v16 = [v9 countByEnumeratingWithState:&v27 objects:v33 count:16];
        id v11 = v16;
      }
      while (v16);

      id v3 = v22;
      if (v8) {
        goto LABEL_20;
      }
    }
    else
    {
    }
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(v17 + 104);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100159924;
    v23[3] = &unk_1002763D8;
    void v23[4] = v17;
    id v24 = *(id *)(a1 + 48);
    id v25 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 64);
    id v19 = v23;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v32 = v19;
    id v20 = v18;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v20, v21);

    uint64_t v8 = 0;
  }
}

id sub_100159924(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchExistingSharedLibraryScopeWithProgress:*(void *)(a1 + 40) blocker:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_100159B9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_100159C18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  id v4 = [*(id *)(a1 + 32) engineLibrary];
  id v5 = [v4 store];

  uint64_t v6 = [v5 scopes];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100159D7C;
  v13[3] = &unk_10027E058;
  id v20 = *(id *)(a1 + 56);
  id v14 = v6;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v8;
  long long v21 = *(_OWORD *)(a1 + 64);
  id v17 = v3;
  id v18 = v5;
  id v19 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_100159D7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (!v4)
  {
    id v7 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
    if (!v7)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      uint64_t v11 = +[CPLErrors cplErrorWithCode:2001, @"Unknown scope %@", *(void *)(a1 + 40) description];
LABEL_19:
      id v19 = (void *)v11;
      (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v10, 0, v11);

LABEL_20:
      goto LABEL_21;
    }
    if ([*(id *)(a1 + 32) valueForFlag:16 forScope:v7])
    {
      if (_CPLSilentLogging)
      {
LABEL_18:
        uint64_t v10 = *(void *)(a1 + 80);
        uint64_t v11 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
        goto LABEL_19;
      }
      uint64_t v8 = sub_10014B004();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
LABEL_17:

        goto LABEL_18;
      }
      *(_DWORD *)long long buf = 138412290;
      id v36 = v7;
      id v9 = "Trying to exit %@ but it is inactive";
    }
    else
    {
      if (((unint64_t)[v7 scopeType] & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        id v12 = [*(id *)(a1 + 32) scopeChangeForScope:v7];
        dispatch_block_t v13 = [v12 share];

        if (v13)
        {
          id v14 = [*(id *)(a1 + 32) transportScopeForScope:v7];
          if (v14)
          {
            id v15 = [*(id *)(a1 + 48) engineLibrary];
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10015A1BC;
            v24[3] = &unk_10027E030;
            id v33 = *(id *)(a1 + 80);
            id v25 = *(id *)(a1 + 56);
            id v26 = v7;
            id v14 = v14;
            id v27 = v14;
            id v28 = v13;
            long long v34 = *(_OWORD *)(a1 + 88);
            id v29 = *(id *)(a1 + 64);
            id v30 = *(id *)(a1 + 32);
            id v16 = *(id *)(a1 + 72);
            uint64_t v17 = *(void *)(a1 + 48);
            id v31 = v16;
            uint64_t v32 = v17;
            [v15 blockEngineWithReason:@"Exiting shared library" onlyIfBlocked:0 block:v24];
          }
          else
          {
            uint64_t v22 = *(void *)(a1 + 80);
            uint64_t v23 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
            (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v23);
          }
        }
        else
        {
          if (!_CPLSilentLogging)
          {
            id v20 = sub_10014B004();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v36 = v7;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Trying to exit %@ but we have no share", buf, 0xCu);
            }
          }
          uint64_t v21 = *(void *)(a1 + 80);
          id v14 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
          (*(void (**)(uint64_t, void, id))(v21 + 16))(v21, 0, v14);
        }

        goto LABEL_20;
      }
      if (_CPLSilentLogging) {
        goto LABEL_18;
      }
      uint64_t v8 = sub_10014B004();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      id v18 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      id v36 = v18;
      id v9 = "Trying to exit non library share %@";
    }
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = [v3 error];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);

LABEL_21:
}

void sub_10015A1BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_10015A414;
    v26[3] = &unk_10027DF90;
    id v28 = *(id *)(a1 + 96);
    id v4 = v3;
    id v27 = v4;
    uint64_t v5 = objc_retainBlock(v26);
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = *(void *)(a1 + 112);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10015A458;
    v19[3] = &unk_10027E008;
    id v24 = v5;
    id v20 = v7;
    id v21 = *(id *)(a1 + 64);
    id v22 = v4;
    id v23 = *(id *)(a1 + 72);
    long long v25 = *(_OWORD *)(a1 + 104);
    id v12 = v5;
    dispatch_block_t v13 = [v6 startExitTaskFromSharedScope:v7 transportScope:v8 share:v9 retentionPolicy:v10 exitSource:v11 completionHandler:v19];
    id v14 = [*(id *)(a1 + 32) createGroupForExitSharedLibrary];
    [v13 setTransportGroup:v14];

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10015AA64;
    v17[3] = &unk_100276018;
    id v15 = *(void **)(a1 + 80);
    void v17[4] = *(void *)(a1 + 88);
    id v18 = v13;
    id v16 = v13;
    [v15 performAsCurrentWithPendingUnitCount:1 usingBlock:v17];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  }
}

id sub_10015A414(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(void **)(a1 + 32);
  return [v2 unblock];
}

void sub_10015A458(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      dispatch_block_t v13 = sub_10014B004();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully started exit for %@", (uint8_t *)&buf, 0xCu);
      }
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v28 = 0x3032000000;
    id v29 = sub_10014B620;
    id v30 = sub_10014B630;
    id v31 = 0;
    id v15 = *(void **)(a1 + 40);
    id v16 = [*(id *)(a1 + 48) writeTransactionBlocker];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10015A70C;
    v21[3] = &unk_10027DFB8;
    p_long long buf = &buf;
    id v22 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 32);
    id v24 = v11;
    long long v26 = *(_OWORD *)(a1 + 72);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10015A9B4;
    v18[3] = &unk_10027DFE0;
    id v19 = *(id *)(a1 + 64);
    id v20 = &buf;
    id v17 = [v15 performWriteTransactionByPassBlocker:v16 withBlock:v21 completionHandler:v18];

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10015A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015A70C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = [v3 scopeChangeForScope:v4];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_10014B004();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v23 = v11;
        __int16 v24 = 2114;
        uint64_t v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "After requesting exit from %@, exiting user identifiers are: %{public}@", buf, 0x16u);
      }

      id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    }
    [v9 addExitingUserIdentifiers:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setExitRetentionPolicy:*(void *)(a1 + 64)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setExitSource:*(void *)(a1 + 72)];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10015A954;
    v18[3] = &unk_100277428;
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    id v19 = v13;
    uint64_t v21 = v14;
    id v20 = *(id *)(a1 + 40);
    [v5 do:v18];

    id v15 = v19;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v16 = sub_10014B004();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@ has disappeared while starting exit", buf, 0xCu);
      }
    }
    id v15 = +[CPLErrors unknownError];
    [v5 setError:v15];
  }
}

id sub_10015A954(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
  if (v4) {
    [*(id *)(a1 + 32) setScopeNeedsUpdateFromTransport:*(void *)(a1 + 40) error:a2];
  }
  return v4;
}

void sub_10015A9B4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 error];

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = [v6 error];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v4 + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  }
}

id sub_10015AA64(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_10015AD54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[CPLErrors readOnlyError];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_10015ADD0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  uint64_t v4 = [*(id *)(a1 + 32) engineLibrary];
  id v5 = [v4 store];

  id v6 = [v5 scopes];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10015AF48;
  v13[3] = &unk_10027E120;
  id v21 = *(id *)(a1 + 64);
  id v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v16 = v7;
  uint64_t v17 = v8;
  long long v22 = *(_OWORD *)(a1 + 72);
  id v18 = v3;
  id v19 = v5;
  id v20 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  id v12 = [v9 performReadTransactionWithBlock:v13];
}

void sub_10015AF48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    id v6 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);

    goto LABEL_85;
  }
  id v7 = [*(id *)(a1 + 32) scopeWithIdentifier:*(void *)(a1 + 40)];
  if (!v7)
  {
    uint64_t v10 = *(void *)(a1 + 88);
    uint64_t v11 = +[CPLErrors cplErrorWithCode:2001, @"Unknown scope %@", *(void *)(a1 + 40) description];
LABEL_83:
    id v59 = (void *)v11;
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v10, 0, v11);

    goto LABEL_84;
  }
  if ([*(id *)(a1 + 32) valueForFlag:16 forScope:v7])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v8 = sub_10014B004();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = v7;
        id v9 = "Trying to remove participants from %@ but it is inactive";
LABEL_80:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
        goto LABEL_81;
      }
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  if (((unint64_t)[v7 scopeType] & 0xFFFFFFFFFFFFFFFELL) != 4)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v8 = sub_10014B004();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v58 = *(NSObject **)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = v58;
        id v9 = "Trying to remove participants from a non library share %@";
        goto LABEL_80;
      }
LABEL_81:
    }
LABEL_82:
    uint64_t v10 = *(void *)(a1 + 88);
    uint64_t v11 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
    goto LABEL_83;
  }
  id v12 = [*(id *)(a1 + 32) scopeChangeForScope:v7];
  id v13 = [v12 share];
  id v14 = v13;
  if (!v13)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v60 = sub_10014B004();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = v7;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Trying to remove participants from %@ but we have no share", buf, 0xCu);
      }
    }
    uint64_t v61 = *(void *)(a1 + 88);
    uint64_t v62 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
    goto LABEL_96;
  }
  if (([v13 ownerIsCurrentUser] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v63 = sub_10014B004();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v125 = v7;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "Non-owner trying to remove users from %@", buf, 0xCu);
      }
    }
    uint64_t v61 = *(void *)(a1 + 88);
    uint64_t v62 = +[CPLErrors cplErrorWithCode:52 description:@"Permission denied: not an owner"];
LABEL_96:
    id v16 = (void *)v62;
    (*(void (**)(uint64_t, void, uint64_t))(v61 + 16))(v61, 0, v62);
    goto LABEL_129;
  }
  uint64_t v15 = [*(id *)(a1 + 32) transportScopeForScope:v7];
  id v16 = (void *)v15;
  if (!v15)
  {
    uint64_t v64 = *(void *)(a1 + 88);
    id v65 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, void, void *))(v64 + 16))(v64, 0, v65);

    goto LABEL_129;
  }
  uint64_t v88 = (void *)v15;
  uint64_t v93 = v14;
  id v91 = v3;
  id v17 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
  id v99 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
  id v95 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
  id v18 = objc_alloc((Class)NSMutableArray);
  id v19 = [*(id *)(a1 + 48) count];
  id v20 = v18;
  id v21 = v17;
  id v94 = [v20 initWithCapacity:v19];
  uint64_t v90 = v12;
  uint64_t v96 = [v12 exitingUserIdentifiers];
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  uint64_t v89 = a1;
  id v22 = *(id *)(a1 + 48);
  id v23 = [v22 countByEnumeratingWithState:&v119 objects:v128 count:16];
  uint64_t v100 = v21;
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v120;
    do
    {
      for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v120 != v25) {
          objc_enumerationMutation(v22);
        }
        id v27 = *(NSObject **)(*((void *)&v119 + 1) + 8 * i);
        if (((unint64_t)[v27 acceptanceStatus] & 0xFFFFFFFFFFFFFFFDLL) == 0)
        {
          uint64_t v30 = [v27 userIdentifier];
          if (v30)
          {
            uint64_t v28 = (void *)v30;
            id v29 = v99;
            goto LABEL_23;
          }
        }
        uint64_t v28 = [v27 participantID];
        if (v28)
        {
          id v29 = v21;
LABEL_23:
          [v29 addObject:v28];
          goto LABEL_28;
        }
        if (!_CPLSilentLogging)
        {
          id v31 = sub_10014B004();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v125 = v27;
            __int16 v126 = 2112;
            uint64_t v127 = v7;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Trying to remove %@ from %@ but there is no user identifier or participant ID attached to this participant", buf, 0x16u);
          }

          id v21 = v100;
        }
LABEL_28:
      }
      id v24 = [v22 countByEnumeratingWithState:&v119 objects:v128 count:16];
    }
    while (v24);
  }

  id v32 = objc_alloc_init((Class)NSMutableArray);
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v33 = [v14 participants];
  id v34 = [v33 countByEnumeratingWithState:&v115 objects:v123 count:16];
  uint64_t v87 = v32;
  if (!v34) {
    goto LABEL_72;
  }
  id v35 = v34;
  id v36 = v32;
  uint64_t v97 = *(void *)v116;
  do
  {
    uint64_t v37 = 0;
    do
    {
      if (*(void *)v116 != v97) {
        objc_enumerationMutation(v33);
      }
      id v38 = *(NSObject **)(*((void *)&v115 + 1) + 8 * (void)v37);
      id v39 = [v38 userIdentifier];
      id v40 = [v38 participantID];
      if (!v39 || ![v99 containsObject:v39])
      {
        if (!v40 || ![v21 containsObject:v40]) {
          goto LABEL_67;
        }
        [v21 removeObject:v40];
        id v43 = v39;
        id v39 = 0;
LABEL_47:

        goto LABEL_48;
      }
      [v99 removeObject:v39];
      if (v40) {
        [v21 removeObject:v40];
      }
      if ([v96 containsObject:v39])
      {
        id v41 = +[NSUserDefaults standardUserDefaults];
        unsigned __int8 v42 = [v41 BOOLForKey:@"CPLSharedLibraryAllowMultipleRemoveParticipantCalls"];

        if ((v42 & 1) == 0)
        {
          if (_CPLSilentLogging)
          {
            id v21 = v100;
            id v32 = v36;
          }
          else
          {
            uint64_t v47 = sub_10014B004();
            id v21 = v100;
            id v32 = v36;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543618;
              uint64_t v125 = v39;
              __int16 v126 = 2112;
              uint64_t v127 = v7;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Ignoring %{public}@ who is already exiting %@", buf, 0x16u);
            }
          }
          goto LABEL_67;
        }
        if (!_CPLSilentLogging)
        {
          id v43 = sub_10014B004();
          id v21 = v100;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543618;
            uint64_t v125 = v39;
            __int16 v126 = 2112;
            uint64_t v127 = v7;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%{public}@ is already exiting %@ but will retry the exit request", buf, 0x16u);
          }
          goto LABEL_47;
        }
        id v21 = v100;
LABEL_48:
        id v32 = v36;
      }
      if ([v38 isCurrentUser])
      {
        id v12 = v90;
        id v3 = v91;
        id v14 = v93;
        id v16 = v88;
        if (!_CPLSilentLogging)
        {
          uint64_t v66 = sub_10014B004();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v125 = v7;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "Can't remove current user from %@", buf, 0xCu);
          }
        }
        uint64_t v67 = *(void *)(v89 + 88);
        CFStringRef v68 = @"Permission denied: can't remove current user";
        goto LABEL_108;
      }
      if ([v38 role] == (id)1)
      {
        id v12 = v90;
        id v3 = v91;
        id v14 = v93;
        id v16 = v88;
        if (!_CPLSilentLogging)
        {
          uint64_t v69 = sub_10014B004();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v125 = v7;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Can't remove owner from %@", buf, 0xCu);
          }
        }
        uint64_t v67 = *(void *)(v89 + 88);
        CFStringRef v68 = @"Permission denied: can't remove owner";
LABEL_108:
        uint64_t v70 = +[CPLErrors cplErrorWithCode:52 description:v68];
        (*(void (**)(uint64_t, void, void *))(v67 + 16))(v67, 0, v70);

        id v54 = v100;
        goto LABEL_109;
      }
      if (v39 && [v38 acceptanceStatus] == (id)2)
      {
        id v44 = v94;
        id v45 = v39;
LABEL_57:
        [v44 addObject:v45];
        goto LABEL_67;
      }
      if (v40)
      {
        [v95 addObject:v40];
        if ([v38 acceptanceStatus] == (id)2) {
          goto LABEL_67;
        }
        id v44 = v32;
        id v45 = v40;
        goto LABEL_57;
      }
      if (!_CPLSilentLogging)
      {
        id v46 = sub_10014B004();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          uint64_t v125 = v38;
          __int16 v126 = 2112;
          uint64_t v127 = v7;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Trying to remove pending %@ from %@ but it has no participant ID set yet", buf, 0x16u);
        }
      }
      id v21 = v100;
LABEL_67:

      uint64_t v37 = (char *)v37 + 1;
    }
    while (v35 != v37);
    id v48 = [v33 countByEnumeratingWithState:&v115 objects:v123 count:16];
    id v35 = v48;
  }
  while (v48);
LABEL_72:

  id v49 = [v99 count];
  uint64_t v50 = v21;
  id v51 = v49;
  id v52 = [v50 count];
  if (!v51)
  {
    id v12 = v90;
    id v3 = v91;
    id v14 = v93;
    uint64_t v53 = v89;
    id v54 = v100;
    if (!v52 || _CPLSilentLogging) {
      goto LABEL_125;
    }
    id v55 = sub_10014B004();
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_124;
    }
    uint64_t v74 = [v100 allObjects];
    id v75 = [v74 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v125 = v75;
    NSString v76 = "Some participants have already been removed or have never been part of the share: %@";
    goto LABEL_123;
  }
  id v12 = v90;
  id v3 = v91;
  uint64_t v53 = v89;
  if (!v52)
  {
    unsigned __int8 v77 = +[NSUserDefaults standardUserDefaults];
    unsigned __int8 v78 = [v77 BOOLForKey:@"CPLSharedLibraryAllowMultipleRemoveParticipantCalls"];

    id v14 = v93;
    if (v78)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v79 = sub_10014B004();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = [v99 allObjects];
          uint64_t v81 = [v80 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138543362;
          uint64_t v125 = v81;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Some participants have already been removed or have never been part of the share - will retry exit request: %{public}@", buf, 0xCu);
        }
      }
      uint64_t v82 = [v99 allObjects];
      [v94 addObjectsFromArray:v82];

      [v99 removeAllObjects];
      id v54 = v100;
      goto LABEL_125;
    }
    id v54 = v100;
    if (_CPLSilentLogging) {
      goto LABEL_125;
    }
    id v55 = sub_10014B004();
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_124;
    }
    uint64_t v74 = [v99 allObjects];
    id v75 = [v74 componentsJoinedByString:@", "];
    *(_DWORD *)long long buf = 138543362;
    uint64_t v125 = v75;
    NSString v76 = "Some participants have already been removed or have never been part of the share: %{public}@";
LABEL_123:
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, v76, buf, 0xCu);

    id v54 = v100;
    goto LABEL_124;
  }
  id v14 = v93;
  id v54 = v100;
  if (!_CPLSilentLogging)
  {
    id v55 = sub_10014B004();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v98 = [v99 allObjects];
      uint64_t v92 = [v98 componentsJoinedByString:@", "];
      uint64_t v56 = [v100 allObjects];
      id v57 = [v56 componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v125 = v92;
      __int16 v126 = 2114;
      uint64_t v127 = v57;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Some participants have already been removed or have never been part of the share: %{public}@ / %{public}@", buf, 0x16u);

      id v54 = v100;
    }
LABEL_124:
  }
LABEL_125:
  if ([v94 count] || objc_msgSend(v95, "count"))
  {
    int v83 = [*(id *)(v53 + 56) engineLibrary];
    v101[0] = _NSConcreteStackBlock;
    v101[1] = 3221225472;
    v101[2] = sub_10015BF10;
    v101[3] = &unk_10027E0F8;
    id v113 = *(id *)(v53 + 88);
    id v102 = *(id *)(v53 + 64);
    int v103 = v7;
    id v16 = v88;
    id v104 = v88;
    id v105 = v14;
    long long v114 = *(_OWORD *)(v53 + 96);
    id v106 = v94;
    id v72 = v95;
    id v107 = v95;
    id v108 = *(id *)(v53 + 72);
    id v109 = *(id *)(v53 + 32);
    id v73 = v87;
    id v110 = v87;
    id v84 = *(id *)(v53 + 80);
    uint64_t v85 = *(void *)(v53 + 56);
    id v111 = v84;
    uint64_t v112 = v85;
    [v83 blockEngineWithReason:@"Removing shared library participant" onlyIfBlocked:0 block:v101];

    uint64_t v71 = v94;
  }
  else
  {
    id v16 = v88;
    if (!_CPLSilentLogging)
    {
      uint64_t v86 = sub_10014B004();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Trying to remove participants that are all already removed or not participating", buf, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(v53 + 88) + 16))();
LABEL_109:
    uint64_t v71 = v94;
    id v72 = v95;
    id v73 = v87;
  }

LABEL_129:
LABEL_84:

LABEL_85:
}

void sub_10015BF10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10015C1AC;
    v30[3] = &unk_10027DF90;
    id v32 = *(id *)(a1 + 120);
    id v4 = v3;
    id v31 = v4;
    uint64_t v5 = objc_retainBlock(v30);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 128);
    uint64_t v8 = *(void *)(a1 + 136);
    uint64_t v10 = *(void **)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10015C1F0;
    v21[3] = &unk_10027E0D0;
    id v29 = v5;
    id v22 = v10;
    id v23 = *(id *)(a1 + 72);
    id v24 = *(id *)(a1 + 40);
    id v25 = *(id *)(a1 + 80);
    id v26 = v4;
    id v27 = *(id *)(a1 + 88);
    id v28 = *(id *)(a1 + 96);
    uint64_t v11 = v5;
    id v12 = [v18 removeParticipantInSharedLibraryTaskFromSharedScope:v17 transportScope:v16 share:v6 retentionPolicy:v7 exitSource:v8 userIdentifiersToRemove:v10 participantIDsToRemove:v9 completionHandler:v21];
    id v13 = [*(id *)(a1 + 32) createGroupForExitSharedLibrary];
    [v12 setTransportGroup:v13];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10015C868;
    v19[3] = &unk_100276018;
    id v14 = *(void **)(a1 + 104);
    void v19[4] = *(void *)(a1 + 112);
    id v20 = v12;
    id v15 = v12;
    [v14 performAsCurrentWithPendingUnitCount:1 usingBlock:v19];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
  }
}

id sub_10015C1AC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(void **)(a1 + 32);
  return [v2 unblock];
}

void sub_10015C1F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v7 = sub_10014B004();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void **)(a1 + 32);
        if (v8) {
          [v8 componentsJoinedByString:@","];
        }
        else {
        uint64_t v9 = [*(id *)(a1 + 40) componentsJoinedByString:@","];
        }
        uint64_t v10 = *(void *)(a1 + 48);
        uint64_t v11 = [v5 componentsJoinedByString:@","];
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2114;
        id v25 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully removed %{public}@ for %@ - Exiting user identifiers: %{public}@", buf, 0x20u);
      }
    }
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    id v25 = sub_10014B620;
    id v26 = sub_10014B630;
    id v27 = 0;
    id v12 = *(void **)(a1 + 56);
    id v13 = [*(id *)(a1 + 64) writeTransactionBlocker];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10015C4F4;
    v18[3] = &unk_10027E0A8;
    id v23 = buf;
    id v19 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 48);
    id v21 = v5;
    id v22 = *(id *)(a1 + 80);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10015C7B8;
    v15[3] = &unk_10027DFE0;
    id v16 = *(id *)(a1 + 88);
    uint64_t v17 = buf;
    id v14 = [v12 performWriteTransactionByPassBlocker:v13 withBlock:v18 completionHandler:v15];

    _Block_object_dispose(buf, 8);
  }
}

void sub_10015C4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015C4F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) scopeChangeForScope:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v7)
  {
    [v7 addExitingUserIdentifiers:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) removePendingParticipantIDs:*(void *)(a1 + 56)];
    if (!_CPLSilentLogging)
    {
      uint64_t v8 = sub_10014B004();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) exitingUserIdentifiers];
        uint64_t v11 = [v10 componentsJoinedByString:@","];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v22 = v9;
        __int16 v23 = 2114;
        id v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "After removing participants from %@, exiting user identifiers are: %{public}@", buf, 0x16u);
      }
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10015C758;
    v17[3] = &unk_100277428;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 64);
    id v18 = v12;
    uint64_t v20 = v13;
    id v19 = *(id *)(a1 + 40);
    [v3 do:v17];

    id v14 = v18;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v15 = sub_10014B004();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@ has disappeared while starting exit", buf, 0xCu);
      }
    }
    id v14 = +[CPLErrors unknownError];
    [v3 setError:v14];
  }
}

id sub_10015C758(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) storeScopeChange:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
  if (v4) {
    [*(id *)(a1 + 32) setScopeNeedsUpdateFromTransport:*(void *)(a1 + 40) error:a2];
  }
  return v4;
}

void sub_10015C7B8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 error];

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = [v6 error];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v4 + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  }
}

id sub_10015C868(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_10015CAB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors incorrectParametersErrorForParameter:@"maximumCount"];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10015CB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 32) scopes];
    uint64_t v8 = [v7 scopeWithIdentifier:*(void *)(a1 + 40)];
    if (v8)
    {
      uint64_t v9 = [v7 scopeForSharingScope:v8];
      uint64_t v10 = v9;
      if (v9)
      {
        id v55 = v8;
        uint64_t v56 = v7;
        id v57 = v3;
        id v59 = v9;
        uint64_t v11 = [v9 scopeIdentifier];
        id v12 = [*(id *)(a1 + 32) pushRepository];
        uint64_t v54 = a1;
        id v58 = [objc_alloc((Class)NSMutableSet) initWithCapacity:*(void *)(a1 + 64)];
        [v12 storedExtractedBatch];
        long long v67 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        uint64_t v53 = v70 = 0u;
        uint64_t v13 = [v53 batch];
        id v14 = [v13 countByEnumeratingWithState:&v67 objects:v83 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v68;
          do
          {
            for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v68 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = *(void **)(*((void *)&v67 + 1) + 8 * i);
              id v19 = [v18 scopedIdentifier];
              uint64_t v20 = [v19 scopeIdentifier];
              unsigned int v21 = [v20 isEqualToString:v11];

              if (v21)
              {
                uint64_t v22 = [v18 _pushContext];
                unsigned __int8 v23 = [v22 flags];

                if (v23)
                {
                  id v24 = [v59 localIndex];
                  id v25 = [v18 scopedIdentifier];
                  [v25 setScopeIndex:v24];

                  id v26 = [v18 scopedIdentifier];
                  id v27 = [v12 changeWithScopedIdentifier:v26];

                  if (v27)
                  {
                    id v28 = [v27 _pushContext];
                    unsigned __int8 v29 = [v28 flags];

                    if ((v29 & 2) == 0)
                    {
                      uint64_t v30 = [v18 scopedIdentifier];
                      [v58 addObject:v30];
                    }
                  }
                }
              }
            }
            id v15 = [v13 countByEnumeratingWithState:&v67 objects:v83 count:16];
          }
          while (v15);
        }

        uint64_t v7 = v56;
        id v3 = v57;
        if ((unint64_t)[v58 count] < *(void *)(v54 + 64))
        {
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          id v31 = [v12 scopedIdentifiersForChangesWithFlag:1 forScopeWithIdentifier:v11];
          id v32 = [v31 countByEnumeratingWithState:&v63 objects:v82 count:16];
          if (v32)
          {
            id v33 = v32;
            uint64_t v34 = *(void *)v64;
LABEL_21:
            uint64_t v35 = 0;
            while (1)
            {
              if (*(void *)v64 != v34) {
                objc_enumerationMutation(v31);
              }
              [v58 addObject:*(void *)(*((void *)&v63 + 1) + 8 * v35)];
              if ((unint64_t)[v58 count] >= *(void *)(v54 + 64)) {
                break;
              }
              if (v33 == (id)++v35)
              {
                id v33 = [v31 countByEnumeratingWithState:&v63 objects:v82 count:16];
                if (v33) {
                  goto LABEL_21;
                }
                break;
              }
            }
          }
        }
        id v36 = [*(id *)(v54 + 32) statusCenter];
        uint64_t v37 = [v58 allObjects];
        id v38 = [v36 statusesForRecordsWithScopedIdentifiers:v37];

        id v39 = *(void **)(*(void *)(v54 + 48) + 104);
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472;
        v60[2] = sub_10015D2EC;
        v60[3] = &unk_100276210;
        id v40 = *(id *)(v54 + 56);
        id v61 = v38;
        id v62 = v40;
        id v41 = v60;
        long long block = _NSConcreteStackBlock;
        uint64_t v78 = 3221225472;
        uint64_t v79 = sub_10016C96C;
        uint64_t v80 = &unk_100275DF8;
        id v81 = v41;
        unsigned __int8 v42 = v39;
        id v43 = v38;
        dispatch_block_t v44 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v42, v44);

        uint64_t v8 = v55;
        uint64_t v10 = v59;
      }
      else
      {
        id v49 = *(void **)(*(void *)(a1 + 48) + 104);
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 3221225472;
        v71[2] = sub_10015D280;
        v71[3] = &unk_100276210;
        id v73 = *(id *)(a1 + 56);
        id v72 = *(id *)(a1 + 40);
        uint64_t v50 = v71;
        long long block = _NSConcreteStackBlock;
        uint64_t v78 = 3221225472;
        uint64_t v79 = sub_10016C96C;
        uint64_t v80 = &unk_100275DF8;
        id v81 = v50;
        id v51 = v49;
        dispatch_block_t v52 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v51, v52);

        uint64_t v11 = v73;
      }
    }
    else
    {
      id v45 = *(void **)(*(void *)(a1 + 48) + 104);
      v74[0] = _NSConcreteStackBlock;
      v74[1] = 3221225472;
      v74[2] = sub_10015D214;
      v74[3] = &unk_100276210;
      id v76 = *(id *)(a1 + 56);
      id v75 = *(id *)(a1 + 40);
      id v46 = v74;
      long long block = _NSConcreteStackBlock;
      uint64_t v78 = 3221225472;
      uint64_t v79 = sub_10016C96C;
      uint64_t v80 = &unk_100275DF8;
      id v81 = v46;
      uint64_t v47 = v45;
      dispatch_block_t v48 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v47, v48);

      uint64_t v10 = v76;
    }
  }
}

void sub_10015D214(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 32)];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10015D280(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:*(void *)(a1 + 32)];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10015D2EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) allValues];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10015D4FC(id *a1)
{
  id v2 = [a1[4] engineLibrary];
  id v3 = [v2 transport];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10015D644;
  v9[3] = &unk_10027E1C0;
  void v9[4] = a1[4];
  id v11 = a1[6];
  id v10 = a1[5];
  uint64_t v4 = [v3 sharedLibraryServerRampTaskWithCompletionHandler:v9];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10015D7FC;
  v7[3] = &unk_100276018;
  id v5 = a1[5];
  v7[4] = a1[4];
  id v8 = v4;
  id v6 = v4;
  [v5 performAsCurrentWithPendingUnitCount:1 usingBlock:v7];
}

void sub_10015D644(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(*(void *)(a1 + 32) + 104);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10015D7A0;
  v12[3] = &unk_10027E198;
  id v7 = *(id *)(a1 + 48);
  char v16 = a2;
  id v15 = v7;
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v18 = v8;
  uint64_t v9 = v6;
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

id sub_10015D7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
  }
  id v3 = [*(id *)(a1 + 40) totalUnitCount];
  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 setCompletedUnitCount:v3];
}

id sub_10015D7FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_10015DA34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 transport];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10015DB84;
  v10[3] = &unk_10027E1E8;
  uint64_t v4 = *(void *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v5 = [v3 queryUserDetailsTaskForParticipants:v4 completionHandler:v10];
  id v6 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10015DD50;
  v8[3] = &unk_100276018;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v5;
  id v7 = v5;
  [v6 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
}

void sub_10015DB84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10015DCF8;
  v13[3] = &unk_10027DDD8;
  id v17 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 40);
  id v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v19 = v8;
  id v9 = v7;
  id v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v12);
}

id sub_10015DCF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  id v3 = [*(id *)(a1 + 48) totalUnitCount];
  uint64_t v4 = *(void **)(a1 + 48);
  return [v4 setCompletedUnitCount:v3];
}

id sub_10015DD50(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  return [v4 runWithNoSyncSession];
}

void sub_10015DF24(uint64_t a1)
{
  id v6 = [objc_alloc((Class)CPLForceSyncTask) initWithScopeIdentifiers:*(void *)(a1 + 32)];
  uint64_t v2 = +[NSUUID UUID];
  id v3 = [v2 UUIDString];
  [v6 setTaskIdentifier:v3];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v4 = [*(id *)(a1 + 40) abstractObject];
  id v5 = [v4 forceSyncDelegate];
  [v5 libraryManager:v4 didFinishForceSyncTask:v6 withErrors:*(void *)(a1 + 48)];
}

void sub_10015E108(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 < 5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10015E1E0;
  v7[3] = &unk_10027E238;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  v7[4] = *(void *)(a1 + 40);
  id v8 = v5;
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  BOOL v11 = v3;
  id v6 = [v4 performReadTransactionWithBlock:v7];
}

void sub_10015E1E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [v3 error];
    id v8 = +[CPLErrors errorsForIdentifiers:v6 error:v7];
    [v5 _dispatchForceSyncForScopeIdentifiers:v6 errors:v8 completionHandler:*(void *)(a1 + 56)];

    goto LABEL_52;
  }
  id v46 = v3;
  id v9 = [*(id *)(a1 + 48) scopes];
  unsigned int v49 = [*(id *)(a1 + 32) _isManagementLibraryManager];
  id v10 = objc_alloc_init((Class)NSMutableDictionary);
  id v48 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v47 = a1;
  id obj = *(id *)(a1 + 40);
  id v11 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
  uint64_t v50 = v10;
  if (!v11) {
    goto LABEL_42;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v59;
  do
  {
    id v14 = 0;
    do
    {
      if (*(void *)v59 != v13) {
        objc_enumerationMutation(obj);
      }
      uint64_t v15 = *(void *)(*((void *)&v58 + 1) + 8 * (void)v14);
      id v16 = [v9 scopeWithIdentifier:v15];
      if (!v16)
      {
        unsigned int v21 = +[CPLErrors cplErrorWithCode:2001, @"Scope %@ is unknown", v15 description];
        [v10 setObject:v21 forKeyedSubscript:v15];

        goto LABEL_31;
      }
      id v17 = [v9 flagsForScope:v16];
      unsigned int v18 = [v17 flags];

      if ((v18 & 8) != 0)
      {
        id v19 = +[CPLErrors cplErrorWithCode:33, @"Scope %@ is disabled", v15 description];
        if (v19) {
          goto LABEL_26;
        }
      }
      if ((v18 & 0x10) != 0)
      {
        uint64_t v20 = +[CPLErrors cplErrorWithCode:2001, @"Scope %@ is inactive", v15 description];
        if (v20) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v20 = 0;
      }
      if ((v18 & 0x24) != 0)
      {
        uint64_t v22 = +[CPLErrors cplErrorWithCode:23, @"Scope %@ has been deleted", v15 description];
        [v10 setObject:v22 forKeyedSubscript:v15];
      }
LABEL_17:
      char v23 = v49;
      if (v20 | v18 & 1) {
        char v23 = 1;
      }
      if (v23)
      {
        id v19 = (void *)v20;
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        id v24 = +[NSUserDefaults standardUserDefaults];
        unsigned __int8 v25 = [v24 BOOLForKey:@"CPLAllowForceSyncOnAllScopes"];

        id v19 = 0;
        if (v25)
        {
          id v10 = v50;
        }
        else
        {
          id v10 = v50;
          if ((v18 & 0x20000) == 0)
          {
            id v19 = +[CPLErrors cplErrorWithCode:10, @"Scope %@ is not read-only", v15 description];
          }
          if (v19) {
            goto LABEL_26;
          }
        }
      }
      if ((v18 & 0x40000) == 0
        || (+[CPLErrors cplErrorWithCode:1002, @"Feature for scope %@ is disabled", v15 description], (id v19 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        if (!_CPLSilentLogging)
        {
          id v28 = sub_10014B004();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}@ is a valid scope for a forced sync", buf, 0xCu);
          }
        }
        [v48 addObject:v15];
        goto LABEL_31;
      }
LABEL_26:
      if (!_CPLSilentLogging)
      {
        id v26 = sub_10014B004();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = [v19 localizedDescription];
          *(_DWORD *)long long buf = 138543618;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Won't do a forced sync for %{public}@ because %@", buf, 0x16u);

          id v10 = v50;
        }
      }
      [v10 setObject:v19 forKeyedSubscript:v15];

LABEL_31:
      id v14 = (char *)v14 + 1;
    }
    while (v12 != v14);
    id v29 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
    id v12 = v29;
  }
  while (v29);
LABEL_42:

  id v30 = [v48 count];
  id v31 = *(id **)(v47 + 32);
  if (v30)
  {
    id v32 = [v31[12] syncManager];
    id v33 = [v9 filterForIncludedScopeIdentifiers:v48];
    if ((v49 & 1) != 0 || *(unsigned char *)(v47 + 64) || [v9 doScopesNeedMetadataSync:v33])
    {
      id v34 = [objc_alloc((Class)CPLEngineForceSyncTask) initWithScopeIdentifiers:*(void *)(v47 + 40) engineLibrary:*(void *)(*(void *)(v47 + 32) + 96) filter:v33 delegate:v32];
      uint64_t v35 = v34;
      if (v49) {
        [v34 setBypassForceSyncLimitations:1];
      }
      id v36 = +[NSUUID UUID];
      uint64_t v37 = [v36 UUIDString];
      [v35 setTaskIdentifier:v37];

      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_10015E9E4;
      v55[3] = &unk_10027E210;
      v55[4] = *(void *)(v47 + 32);
      id v56 = v48;
      id v57 = v50;
      [v35 setTaskDidFinishWithErrorBlock:v55];
      id v38 = *(void **)(*(void *)(v47 + 32) + 104);
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472;
      v52[2] = sub_10015EC6C;
      v52[3] = &unk_100276210;
      id v39 = *(id *)(v47 + 56);
      id v53 = v35;
      id v54 = v39;
      id v40 = v52;
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10016C96C;
      long long v64 = &unk_100275DF8;
      id v65 = v40;
      id v41 = v38;
      id v42 = v35;
      dispatch_block_t v43 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v41, v43);

      id v10 = v50;
      [v42 launchTask];

      id v3 = v46;
    }
    else
    {
      id v3 = v46;
      if (!_CPLSilentLogging)
      {
        dispatch_block_t v44 = sub_10014B004();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          id v45 = [v48 componentsJoinedByString:@", "];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Nothing is planned for %@ so we won't dispatch a forced sync", buf, 0xCu);

          id v10 = v50;
        }
      }
      [*(id *)(v47 + 32) _dispatchForceSyncForScopeIdentifiers:*(void *)(v47 + 40) errors:v10 completionHandler:*(void *)(v47 + 56)];
    }
  }
  else
  {
    [v31 _dispatchForceSyncForScopeIdentifiers:*(void *)(v47 + 40) errors:v10 completionHandler:*(void *)(v47 + 56)];
    id v3 = v46;
  }

LABEL_52:
}

void sub_10015E9E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10015EB58;
  v14[3] = &unk_100276FC8;
  void v14[4] = v7;
  id v15 = v6;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v5;
  id v9 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v20 = v9;
  id v10 = v8;
  id v11 = v5;
  id v12 = v6;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v13);
}

void sub_10015EB58(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = v2;
    if ([v3 isCPLOperationCancelledError])
    {
      uint64_t v4 = +[CPLErrors cplErrorWithCode:10 description:@"Scope will be synchronized in background"];

      id v3 = (id)v4;
    }
    id v5 = +[CPLErrors errorsForIdentifiers:*(void *)(a1 + 48) error:v3];
    if ([*(id *)(a1 + 56) count])
    {
      [*(id *)(a1 + 56) addEntriesFromDictionary:v5];
      id v6 = *(id *)(a1 + 56);

      id v5 = v6;
    }
  }
  else
  {
    id v5 = *(id *)(a1 + 56);
  }
  uint64_t v7 = [v8 forceSyncDelegate];
  [v7 libraryManager:v8 didFinishForceSyncTask:*(void *)(a1 + 64) withErrors:v5];
}

uint64_t sub_10015EC6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10015F72C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) store];
  id v5 = [v2 downloadQueue];

  id v3 = [v5 hasActiveOrQueuedBackgroundDownloadOperations];
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v3, 0);
  }
}

void sub_10015F8B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) statusCenter];
  id v3 = [v2 statusesForRecordsWithScopedIdentifiers:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 48) + 104);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10015FA04;
    v9[3] = &unk_100276210;
    id v11 = v4;
    id v10 = v3;
    id v6 = v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v13 = v6;
    uint64_t v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v7, v8);
  }
}

uint64_t sub_10015FA04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10015FAF8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) statusCenter];
  id v3 = [v2 statusChanges];

  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 40) + 104);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10015FC48;
    v9[3] = &unk_100276210;
    id v11 = v4;
    id v10 = v3;
    id v6 = v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v13 = v6;
    uint64_t v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v7, v8);
  }
}

uint64_t sub_10015FC48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10015FD94(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10015FE38;
  v4[3] = &unk_10027D4F0;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [a2 do:v4];
}

id sub_10015FE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) statusCenter];
  id v5 = [v4 acknowledgeChangedStatuses:*(void *)(a1 + 40) error:a2];

  return v5;
}

void sub_10015FE8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4 && !_CPLSilentLogging)
  {
    id v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = [v3 error];
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      id v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to acknowledege status changes for %@: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_1001600C8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100160174;
  v4[3] = &unk_10027E2B0;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  [a2 do:v4];
}

uint64_t sub_100160174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) statusCenter];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = objc_msgSend(v4, "recordViewForStatusWithScopedIdentifier:", *(void *)(*((void *)&v14 + 1) + 8 * (void)v9), (void)v14);
        unsigned int v11 = [v4 notifyStatusForRecordViewHasChanged:v10 persist:*(unsigned __int8 *)(a1 + 48) error:a2];

        if (!v11)
        {
          uint64_t v12 = 0;
          goto LABEL_11;
        }
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v12 = 1;
LABEL_11:

  return v12;
}

void sub_1001602C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4 && !_CPLSilentLogging)
  {
    id v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = [*(id *)(a1 + 32) componentsJoinedByString:@", "];
      id v7 = [v3 error];
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      unsigned int v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to add status changes for %@: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_1001604E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 104);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1001608B4;
    v29[3] = &unk_100276210;
    id v31 = *(id *)(a1 + 56);
    id v30 = v3;
    id v6 = v29;
    long long block = _NSConcreteStackBlock;
    uint64_t v33 = 3221225472;
    id v34 = sub_10016C96C;
    uint64_t v35 = &unk_100275DF8;
    id v36 = v6;
    id v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v7, v8);
  }
  else
  {
    uint64_t v9 = [*(id *)(a1 + 40) scopes];
    __int16 v10 = [v9 scopeWithIdentifier:*(void *)(a1 + 48)];
    if (v10)
    {
      if ([v9 valueForFlag:16 forScope:v10])
      {
        unsigned int v11 = [v9 scopeForSharingScope:v10];
        uint64_t v12 = v11;
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 56);
        if (v11)
        {
          long long v15 = [v11 scopeIdentifier];
          long long v16 = +[CPLErrors cplErrorWithCode:2001, @"%@ is a shared scope and counts should be asked through %@", v14, v15 description];
          (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v16);
        }
        else
        {
          long long v15 = +[CPLErrors cplErrorWithCode:2001, @"%@ is not active", *(void *)(a1 + 48) description];
          (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v15);
        }
      }
      else
      {
        uint64_t v12 = [*(id *)(a1 + 40) pushRepository];
        id v18 = [v12 countPerFlagsForScopeWithIdentifier:*(void *)(a1 + 48)];
        id v19 = [objc_alloc((Class)CPLScopeStatusCounts) initWithFlagsCounts:v18];
        id v20 = *(void **)(*(void *)(a1 + 32) + 104);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_100160914;
        v26[3] = &unk_100276210;
        id v21 = *(id *)(a1 + 56);
        id v27 = v19;
        id v28 = v21;
        uint64_t v22 = v26;
        long long block = _NSConcreteStackBlock;
        uint64_t v33 = 3221225472;
        id v34 = sub_10016C96C;
        uint64_t v35 = &unk_100275DF8;
        id v36 = v22;
        char v23 = v20;
        id v24 = v19;
        dispatch_block_t v25 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v23, v25);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v12 = +[CPLErrors cplErrorWithCode:2001, @"%@ is unknown", *(void *)(a1 + 48) description];
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v12);
    }
  }
}

void sub_1001608B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_100160914(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100160E34(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (v5) {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_100161018(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v10 = a3;
  uint64_t v7 = *(void *)(a1 + 48);
  if (a4)
  {
    (*(void (**)(void, void, void, uint64_t))(v7 + 16))(*(void *)(a1 + 48), 0, 0, a4);
  }
  else
  {
    dispatch_block_t v8 = [*(id *)(a1 + 32) _localResourceFromCloudResources:a2 usingMapping:*(void *)(a1 + 40)];
    uint64_t v9 = [*(id *)(a1 + 32) _localResourceFromCloudResourcesAndErrors:v10 usingMapping:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, void *, void *, void))(v7 + 16))(v7, v8, v9, 0);
  }
}

void sub_100162030(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  id v9 = a4;
  id v10 = a2;
  [v7 notePruningRequestForResource:v10 realPrune:v8 successful:0];
  id v11 = +[CPLErrors cplErrorWithCode:a3, @"Resource unsafe to prune: %@", v9 description];

  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v10];
}

void sub_10016287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose((const void *)(v51 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001628EC(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  id v5 = +[CPLErrors unknownError];
  uint64_t v4 = +[CPLErrors unsafeResources:v3 withError:v5 realPrune:0 resourceStorage:a1[5]];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

void sub_100162990(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  id v9 = a4;
  id v10 = a2;
  [v7 notePruningRequestForResource:v10 realPrune:v8 successful:0];
  id v11 = +[CPLErrors cplErrorWithCode:a3, @"Resource unsafe to prune: %@", v9 description];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v10];
}

void sub_100162A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 identity];
  id v5 = [v4 fileURL];

  if (v5)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
      goto LABEL_28;
    }
    id v10 = *(void **)(a1 + 40);
    id v17 = 0;
    unsigned int v11 = [v10 removeItemAtURL:v5 error:&v17];
    id v12 = v17;
    if (v11)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v13 = sub_10014B004();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = [v5 path];
          *(_DWORD *)long long buf = 138412546;
          id v19 = (const char *)v3;
          __int16 v20 = 2112;
          id v21 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Successfully deleted %@ at %@", buf, 0x16u);
        }
      }
      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1];
    }
    else
    {
      if (![*(id *)(a1 + 40) cplIsFileDoesNotExistError:v12])
      {
        [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:0];
        [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v12 forKeyedSubscript:v3];
        goto LABEL_27;
      }
      if (!_CPLSilentLogging)
      {
        long long v15 = sub_10014B004();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          long long v16 = [v5 path];
          *(_DWORD *)long long buf = 138412546;
          id v19 = (const char *)v3;
          __int16 v20 = 2112;
          id v21 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "File does not exist for %@ at %@. Considering it deleted", buf, 0x16u);
        }
      }
      [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:1 prunedSize:0];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
LABEL_27:

    goto LABEL_28;
  }
  if (!_CPLSilentLogging)
  {
    id v6 = sub_10014B004();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = "check (prune)";
      BOOL v8 = *(unsigned char *)(a1 + 72) == 0;
      if (!*(unsigned char *)(a1 + 72)) {
        uint64_t v7 = "delete";
      }
      *(_DWORD *)long long buf = 136315650;
      id v19 = v7;
      id v9 = "check";
      if (v8) {
        id v9 = "delete";
      }
      __int16 v20 = 2112;
      id v21 = v3;
      __int16 v22 = 2080;
      char v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Client asked to %s %@ but did not provide a file URL to %s", buf, 0x20u);
    }
  }
  [*(id *)(a1 + 32) notePruningRequestForResource:v3 realPrune:*(unsigned __int8 *)(a1 + 73) successful:0];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_28:
}

void sub_100162DA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 120))
  {
    BOOL v4 = 1;
  }
  else
  {
    if (qword_1002DBCC0 != -1) {
      dispatch_once(&qword_1002DBCC0, &stru_10027E968);
    }
    BOOL v4 = byte_1002DBCC8 != 0;
  }
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 121);
  id obj = *(id *)(v7 + 40);
  id v9 = [v5 safeResourcesToDeleteFromProposedResources:*(void *)(a1 + 40) realPrune:v8 checkServerIfNecessary:v4 allowUnconfirmed:0 resourcesToCheckOnServer:&obj targetScopeMapping:*(void *)(a1 + 48) unsafeResources:*(void *)(*(void *)(v6 + 8) + 40)];
  objc_storeStrong((id *)(v7 + 40), obj);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v9;
  unsigned int v11 = (char *)[v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (unint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
      }
      id v12 = (char *)[v10 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v12);
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count])
  {
    if (!v4) {
      sub_1001CFD70(a1, (uint64_t *)(a1 + 32));
    }
    uint64_t v15 = [*(id *)(a1 + 56) clientCacheIdentifier];
    uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v18 = [*(id *)(a1 + 32) _cloudResourcesToLocalResourcesWithLocalResources:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) targetMapping:*(void *)(a1 + 64)];
    uint64_t v19 = *(void *)(*(void *)(a1 + 104) + 8);
    __int16 v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
}

void sub_100162FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 error];

  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10014B004();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(a1 + 136)) {
          uint64_t v6 = "check (prune)";
        }
        else {
          uint64_t v6 = "prune";
        }
        uint64_t v7 = [v3 error];
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Got a transaction error trying to %s some resources: %@", buf, 0x16u);
      }
    }
    if (![*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count])
    {
      uint64_t v35 = *(void **)(*(void *)(a1 + 32) + 104);
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472;
      v53[2] = sub_1001635B4;
      v53[3] = &unk_10027E418;
      id v17 = &v57;
      id v57 = *(id *)(a1 + 80);
      id v54 = *(id *)(a1 + 40);
      id v55 = v3;
      char v58 = *(unsigned char *)(a1 + 137);
      id v56 = *(id *)(a1 + 48);
      id v36 = v53;
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10016C96C;
      long long v60 = &unk_100275DF8;
      v61[0] = v36;
      uint64_t v37 = v35;
      dispatch_block_t v38 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v37, v38);

      long long v24 = v54;
LABEL_28:

      goto LABEL_29;
    }
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) count])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v8 = sub_10014B004();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 136)) {
          id v9 = "Checked-prune";
        }
        else {
          id v9 = "Pruned";
        }
        id v10 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count];
        id v11 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
        id v12 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) count];
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2048;
        long long v60 = v11;
        LOWORD(v61[0]) = 2048;
        *(id *)((char *)v61 + 2) = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s %lu resources, and found %lu resources unsafe to prune but %lu resources need to be checked on server", buf, 0x2Au);
      }
    }
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100163654;
    v41[3] = &unk_10027E4B8;
    long long v48 = *(_OWORD *)(a1 + 112);
    char v51 = *(unsigned char *)(a1 + 137);
    id v17 = (id *)v42;
    id v18 = *(id *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 32);
    v42[0] = v18;
    v42[1] = v19;
    id v20 = *(id *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 96);
    id v46 = v20;
    uint64_t v49 = v21;
    id v22 = *(id *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 128);
    id v43 = v22;
    uint64_t v50 = v23;
    id v44 = *(id *)(a1 + 64);
    id v47 = *(id *)(a1 + 88);
    char v52 = *(unsigned char *)(a1 + 136);
    id v45 = *(id *)(a1 + 40);
    [v13 checkServerForResources:v14 targetMapping:v15 transportScopeMapping:v16 completionHandler:v41];

    long long v24 = v46;
    goto LABEL_28;
  }
  if (!_CPLSilentLogging)
  {
    dispatch_block_t v25 = sub_10014B004();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 136)) {
        id v26 = "Checked (prune)";
      }
      else {
        id v26 = "Pruned";
      }
      id v27 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) count];
      id v28 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 2048;
      long long v60 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s %lu resources, and found %lu resources unsafe to prune", buf, 0x20u);
    }
  }
  id v29 = *(void **)(*(void *)(a1 + 32) + 104);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_1001641CC;
  v39[3] = &unk_10027E440;
  id v17 = (id *)v40;
  id v30 = *(id *)(a1 + 80);
  uint64_t v31 = *(void *)(a1 + 96);
  v40[0] = v30;
  v40[1] = v31;
  v40[2] = *(void *)(a1 + 112);
  id v32 = v39;
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_10016C96C;
  long long v60 = &unk_100275DF8;
  v61[0] = v32;
  uint64_t v33 = v29;
  dispatch_block_t v34 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v33, v34);

LABEL_29:
}

void sub_1001635B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) error];
  BOOL v4 = +[CPLErrors unsafeResources:v3 withError:v5 realPrune:*(unsigned __int8 *)(a1 + 64) resourceStorage:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

void sub_100163654(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_10014B004();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to check resources to prune on server: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    id v11 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    uint64_t v13 = +[CPLErrors cplErrorWithCode:80 description:@"Failed to check server"];
    uint64_t v14 = +[CPLErrors unsafeResources:v12 withError:v13 realPrune:*(unsigned __int8 *)(a1 + 120) resourceStorage:*(void *)(a1 + 32)];
    [v11 addEntriesFromDictionary:v14];

    uint64_t v15 = *(void **)(*(void *)(a1 + 40) + 104);
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_100163AB4;
    v51[3] = &unk_10027E440;
    uint64_t v16 = (id *)v52;
    id v17 = *(id *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 104);
    v52[0] = v17;
    v52[1] = v18;
    v52[2] = *(void *)(a1 + 88);
    uint64_t v19 = v51;
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v54 = sub_10016C96C;
    id v55 = &unk_100275DF8;
    id v56 = v19;
    id v20 = v15;
    dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
    dispatch_async(v20, v21);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v22 = sub_10014B004();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = [v7 count];
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "After checking server, found %lu additional resources are safe to prune", (uint8_t *)&buf, 0xCu);
      }
    }
    if ([v8 count]) {
      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) addEntriesFromDictionary:v8];
    }
    uint64_t v23 = *(void **)(a1 + 48);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100163ADC;
    v41[3] = &unk_10027E468;
    uint64_t v16 = &v42;
    id v24 = v23;
    uint64_t v25 = *(void *)(a1 + 112);
    id v42 = v24;
    uint64_t v26 = *(void *)(a1 + 88);
    uint64_t v48 = v25;
    uint64_t v49 = v26;
    id v43 = v7;
    char v50 = *(unsigned char *)(a1 + 120);
    id v27 = *(id *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 40);
    id v44 = v27;
    uint64_t v45 = v28;
    id v46 = *(id *)(a1 + 56);
    id v47 = *(id *)(a1 + 80);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100163D04;
    v33[3] = &unk_10027E490;
    char v39 = *(unsigned char *)(a1 + 121);
    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v37 = *(void *)(a1 + 104);
    void v33[4] = v29;
    id v36 = *(id *)(a1 + 72);
    id v34 = *(id *)(a1 + 64);
    char v40 = *(unsigned char *)(a1 + 120);
    id v30 = *(id *)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 88);
    id v35 = v30;
    uint64_t v38 = v31;
    id v32 = [v24 performWriteTransactionWithBlock:v41 completionHandler:v33];
  }
}

uint64_t sub_100163AB4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_100163ADC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) clientCacheIdentifier];
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (!(v3 | v2)) {
      goto LABEL_13;
    }
  }
  else if ([(id)v3 isEqual:v2])
  {
LABEL_13:
    id v8 = [*(id *)(a1 + 56) safeResourcesToDeleteFromProposedResources:*(void *)(a1 + 40) realPrune:*(unsigned __int8 *)(a1 + 96) checkServerIfNecessary:0 allowUnconfirmed:1 resourcesToCheckOnServer:0 targetScopeMapping:*(void *)(a1 + 64) unsafeResources:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v10 = (char *)[v8 countByEnumeratingWithState:&v14 objects:v19 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v8);
          }
          (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        }
        id v11 = (char *)[v8 countByEnumeratingWithState:&v14 objects:v19 count:16];
      }
      while (v11);
    }
    goto LABEL_20;
  }
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Store has been reset during the resources check on server", buf, 2u);
    }
  }
  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = +[CPLErrors cplErrorWithCode:27 description:@"Store has been reset"];
  id v9 = +[CPLErrors unsafeResources:v7 withError:v8 realPrune:*(unsigned __int8 *)(a1 + 96) resourceStorage:*(void *)(a1 + 48)];
  [v6 addEntriesFromDictionary:v9];

LABEL_20:
}

void sub_100163D04(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 error];

  if (!v4) {
    goto LABEL_10;
  }
  if (!_CPLSilentLogging)
  {
    id v5 = sub_10014B004();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a1 + 80)) {
        uint64_t v6 = "check (prune)";
      }
      else {
        uint64_t v6 = "prune";
      }
      uint64_t v7 = [v3 error];
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Got a transaction error trying to %s some resources: %@", buf, 0x16u);
    }
  }
  if (![*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    long long v17 = *(void **)(*(void *)(a1 + 32) + 104);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100164104;
    v24[3] = &unk_10027E418;
    uint64_t v13 = &v28;
    id v28 = *(id *)(a1 + 56);
    id v25 = *(id *)(a1 + 40);
    id v26 = v3;
    char v29 = *(unsigned char *)(a1 + 81);
    id v27 = *(id *)(a1 + 48);
    uint64_t v18 = v24;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10016C96C;
    uint64_t v31 = &unk_100275DF8;
    id v32 = v18;
    uint64_t v19 = v17;
    dispatch_block_t v20 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v19, v20);
  }
  else
  {
LABEL_10:
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10014B004();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 80)) {
          id v9 = "Checked (prune)";
        }
        else {
          id v9 = "Pruned";
        }
        id v10 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count];
        id v11 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v31 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s %lu resources, and found %lu resources unsafe to prune", buf, 0x20u);
      }
    }
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 104);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001641A4;
    v21[3] = &unk_10027E440;
    uint64_t v13 = &v22;
    id v22 = *(id *)(a1 + 56);
    long long v23 = *(_OWORD *)(a1 + 64);
    long long v14 = v21;
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10016C96C;
    uint64_t v31 = &unk_100275DF8;
    id v32 = v14;
    long long v15 = v12;
    dispatch_block_t v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v15, v16);
  }
}

void sub_100164104(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [*(id *)(a1 + 40) error];
  BOOL v4 = +[CPLErrors unsafeResources:v3 withError:v5 realPrune:*(unsigned __int8 *)(a1 + 64) resourceStorage:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, &__NSArray0__struct, v4);
}

uint64_t sub_1001641A4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
}

uint64_t sub_1001641CC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_10016438C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3032000000;
  v29[3] = sub_10014B620;
  void v29[4] = sub_10014B630;
  id v30 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001646D8;
  v21[3] = &unk_10027E508;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  id v24 = *(id *)(a1 + 48);
  id v25 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void **)(a1 + 80);
  id v26 = v4;
  uint64_t v27 = v5;
  id v28 = v6;
  [v3 do:v21];
  uint64_t v7 = [v3 error];

  id v8 = *(void **)(*(void *)(a1 + 72) + 104);
  if (v7)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100164B84;
    v18[3] = &unk_100276210;
    id v9 = &v20;
    id v20 = *(id *)(a1 + 80);
    id v19 = v3;
    id v10 = v18;
    long long block = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472;
    uint64_t v33 = sub_10016C96C;
    id v34 = &unk_100275DF8;
    id v35 = v10;
    id v11 = v8;
    dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v11, v12);
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100164BE4;
    v16[3] = &unk_10027D9B0;
    id v9 = (id *)v17;
    v17[0] = *(id *)(a1 + 80);
    v17[1] = v29;
    uint64_t v13 = v16;
    long long block = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472;
    uint64_t v33 = sub_10016C96C;
    id v34 = &unk_100275DF8;
    id v35 = v13;
    long long v14 = v8;
    dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v14, v15);
  }
  _Block_object_dispose(v29, 8);
}

void sub_1001646C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001646D8(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v4 = [*(id *)(a1 + 40) transactionClientCacheView];
    uint64_t v5 = [v4 recordViewWithScopedIdentifier:*(void *)(a1 + 32)];
    uint64_t v6 = [v5 changeForType:8];

    if (v6)
    {
      if ([v6 supportsResources])
      {
        char v45 = 0;
        uint64_t v7 = [*(id *)(a1 + 48) cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 32) isFinal:&v45];
        if (v7)
        {
          uint64_t v32 = v7;
          id v8 = [*(id *)(a1 + 56) recordWithScopedIdentifier:v7 isFinal:0];
          long long v41 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          uint64_t v33 = v6;
          id v9 = [v6 resources];
          id v10 = [v9 countByEnumeratingWithState:&v41 objects:v49 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v42;
            do
            {
              for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v42 != v12) {
                  objc_enumerationMutation(v9);
                }
                long long v14 = *(void **)(*((void *)&v41 + 1) + 8 * i);
                dispatch_block_t v15 = objc_msgSend(v8, "resourceForType:", objc_msgSend(v14, "resourceType"));
                dispatch_block_t v16 = [v15 identity];
                unsigned int v17 = [v16 isAvailable];

                if (v17) {
                  uint64_t v18 = [*(id *)(a1 + 64) shouldUploadResource:v14] ^ 1;
                }
                else {
                  uint64_t v18 = 0;
                }
                id v19 = [v14 identity];
                [v19 setAvailable:v18];
              }
              id v11 = [v9 countByEnumeratingWithState:&v41 objects:v49 count:16];
            }
            while (v11);
          }

          uint64_t v7 = v32;
          uint64_t v6 = v33;
        }
        else
        {
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          id v8 = [v6 resources];
          id v22 = [v8 countByEnumeratingWithState:&v37 objects:v48 count:16];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v38;
            do
            {
              for (j = 0; j != v23; j = (char *)j + 1)
              {
                if (*(void *)v38 != v24) {
                  objc_enumerationMutation(v8);
                }
                id v26 = [*(id *)(*((void *)&v37 + 1) + 8 * (void)j) identity];
                [v26 setAvailable:0];
              }
              id v23 = [v8 countByEnumeratingWithState:&v37 objects:v48 count:16];
            }
            while (v23);
          }
        }

        uint64_t v27 = *(void **)(*(void *)(a1 + 72) + 104);
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_100164B24;
        v34[3] = &unk_100276210;
        id v36 = *(id *)(a1 + 80);
        id v35 = v6;
        id v28 = v34;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10016C96C;
        block[3] = &unk_100275DF8;
        id v47 = v28;
        char v29 = v27;
        dispatch_block_t v30 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
        dispatch_async(v29, v30);

        uint64_t v20 = 1;
        goto LABEL_33;
      }
      if (a2)
      {
        dispatch_block_t v21 = +[CPLErrors incorrectParametersErrorForParameter:@"itemScopedIdentifier"];
        goto LABEL_22;
      }
    }
    else if (a2)
    {
      dispatch_block_t v21 = +[CPLErrors cplErrorWithCode:25, @"%@ is not in client cache", *(void *)(a1 + 32) description];
LABEL_22:
      uint64_t v20 = 0;
      *a2 = v21;
LABEL_33:

      return v20;
    }
    uint64_t v20 = 0;
    goto LABEL_33;
  }
  if (!a2) {
    return 0;
  }
  +[CPLErrors incorrectParametersErrorForParameter:@"itemScopedIdentifier"];
  uint64_t v20 = 0;
  *a2 = (id)objc_claimAutoreleasedReturnValue();
  return v20;
}

void sub_100164B24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) resources];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100164B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_100164BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100164D10(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100164D9C;
  v3[3] = &unk_10027D400;
  id v4 = *(id *)(a1 + 32);
  [a2 do:v3];
}

id sub_100164D9C(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) resourceStorage];
  id v4 = [v3 compactWithError:a2];

  return v4;
}

void sub_100164DE0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100165140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = [*(id *)(a1 + 32) ownerNameForEngineLibrary:*(void *)(*(void *)(a1 + 32) + 96)];
  CFStringRef v3 = @"client";
  if (v2) {
    CFStringRef v3 = (const __CFString *)v2;
  }
  id v5 = (id)v2;
  id v4 = +[CPLErrors cplErrorWithCode:150, @"%@ is not allowed to perform this action", v3 description];
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v4);
}

void sub_1001651E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100165344;
  v14[3] = &unk_100276C98;
  id v8 = *(id *)(a1 + 40);
  id v16 = v6;
  id v17 = v8;
  id v15 = v5;
  id v9 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v19 = v9;
  id v10 = v7;
  id v11 = v6;
  id v12 = v5;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v13);
}

uint64_t sub_100165344(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100165454(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) cloudCache];
    id v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v8 = *(id *)(a1 + 40);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          long long v14 = objc_msgSend(v6, "targetForRecordWithCloudScopedIdentifier:", v13, (void)v15);
          if (v14) {
            [v7 setObject:v14 forKeyedSubscript:v13];
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1001658A8(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v2 = [v4 delegate];
  id v3 = [*(id *)(a1 + 32) abstractObject];
  [v2 libraryManagerHasChangesToPull:v3];
}

void sub_100165AD8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) abstractObject];
  id v4 = [v2 delegate];

  if (v4 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v3 = [*(id *)(a1 + 32) abstractObject];
    [v4 libraryManagerHasStatusChanges:v3];
  }
}

void sub_100165D54(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v2 = [v4 resourceProgressDelegate];
  id v3 = [*(id *)(a1 + 32) abstractObject];
  [v2 libraryManager:v3 backgroundDownloadDidFinishForResource:*(void *)(a1 + 40)];
}

void sub_100165FC0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) abstractObject];
  id v4 = [v2 resourceProgressDelegate];

  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1 + 32) abstractObject];
    [v4 libraryManager:v3 backgroundDownloadDidFailForResource:*(void *)(a1 + 40)];
  }
}

void sub_100166174(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v2 = [v4 resourceProgressDelegate];
  id v3 = [*(id *)(a1 + 32) abstractObject];
  [v2 libraryManager:v3 uploadDidStartForResourceTransferTask:*(void *)(a1 + 40)];
}

void sub_100166348(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) resourceProgressDelegate];
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v2) = *(_DWORD *)(a1 + 48);
    [v3 libraryManager:*(void *)(a1 + 32) uploadDidProgress:*(void *)(a1 + 40) forResourceTransferTask:v2];
  }
}

void sub_1001664F8(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) abstractObject];
  double v2 = [v4 resourceProgressDelegate];
  id v3 = [*(id *)(a1 + 32) abstractObject];
  [v2 libraryManager:v3 uploadDidFinishForResourceTransferTask:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_100166680(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) abstractObject];
  [v2 _setSizeOfResourcesToUpload:*(void *)(a1 + 40) sizeOfOriginalResourcesToUpload:*(void *)(a1 + 48) numberOfImages:*(void *)(a1 + 56) numberOfVideos:*(void *)(a1 + 64) numberOfOtherItems:*(void *)(a1 + 72)];
}

void sub_10016682C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) abstractObject];
  id v3 = [v2 delegate];
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_10014B004();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 138412290;
          id v9 = v3;
          uint64_t v5 = "%@ does not support data recovery yet";
          id v6 = v4;
          uint32_t v7 = 12;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v8, v7);
          goto LABEL_11;
        }
        goto LABEL_11;
      }
    }
    else if (!_CPLSilentLogging)
    {
      id v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        uint64_t v5 = "Library manager has no delegate";
        id v6 = v4;
        uint32_t v7 = 2;
        goto LABEL_10;
      }
LABEL_11:
    }
    (*(void (**)(void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0);
    goto LABEL_13;
  }
  [v3 libraryManager:v2 provideLocalResource:*(void *)(a1 + 40) recordClass:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
LABEL_13:
}

void sub_100166AB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) abstractObject];
  id v3 = [v2 delegate];
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_10014B004();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v10 = 138412290;
          *(void *)&void v10[4] = v3;
          uint64_t v5 = "%@ does not support pushing all changes yet";
          id v6 = v4;
          uint32_t v7 = 12;
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, v10, v7);
          goto LABEL_11;
        }
        goto LABEL_11;
      }
    }
    else if (!_CPLSilentLogging)
    {
      id v4 = sub_10014B004();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        uint64_t v5 = "Library manager has no delegate";
        id v6 = v4;
        uint32_t v7 = 2;
        goto LABEL_10;
      }
LABEL_11:
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = +[CPLErrors notImplementedError];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

    goto LABEL_13;
  }
  [v3 libraryManager:v2 pushAllChangesWithCompletionHandler:*(void *)(a1 + 40)];
LABEL_13:
}

void sub_100166DCC(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100166EA0;
  v4[3] = &unk_100276428;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = v3;
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 64);
  [v2 performAsCurrentWithPendingUnitCount:1 usingBlock:v4];
}

void sub_100166EA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) abstractObject];
  id v3 = [v2 recordComputeStateDelegate];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100167010;
    v10[3] = &unk_10027E5F8;
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    [v3 libraryManager:v2 providePayloadForComputeStates:v4 inFolderWithURL:v5 completionHandler:v10];

    id v6 = v11;
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10014B004();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Library manager has no compute state delegate", v9, 2u);
      }
    }
    uint64_t v8 = *(void *)(a1 + 64);
    id v6 = +[CPLErrors notImplementedError];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v6);
  }
}

void sub_100167010(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  unsigned int v6 = [*(id *)(a1 + 32) isCancelled];
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v8 = +[CPLErrors operationCancelledError];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
  else
  {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v9, v5);
  }
}

void sub_1001673C0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:CPLLibraryMustBeWipedNotificationName object:*(void *)(*(void *)(a1 + 32) + 96)];
}

void sub_100167430(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001674E0;
  v6[3] = &unk_10027E620;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  void v6[4] = v4;
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [a2 do:v6];
}

uint64_t sub_1001674E0(uint64_t a1, void *a2)
{
  switch(*(void *)(a1 + 56))
  {
    case 0:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetLocalSyncStateWithCause:error:";
      goto LABEL_17;
    case 1:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetCompleteSyncStateWithCause:error:";
      goto LABEL_17;
    case 2:
      uint64_t result = (uint64_t)[*(id *)(a1 + 32) _resetStore:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) resetSelector:"resetCompleteSyncStateIncludingIDMappingWithCause:error:" error:a2];
      if (!result) {
        return result;
      }
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v10 = [*(id *)(a1 + 40) scopes];
      id v11 = [v10 enumeratorForScopesIncludeInactive:0];

      id v12 = [v11 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (!v12) {
        goto LABEL_15;
      }
      id v13 = v12;
      uint64_t v14 = *(void *)v24;
      break;
    case 3:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = "resetSyncAnchorWithCause:error:";
LABEL_17:
      return (uint64_t)[v4 _resetStore:v5 reason:v6 resetSelector:v7 error:a2];
    case 4:
      if (!_CPLSilentLogging)
      {
        uint64_t v20 = sub_10014B004();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Client tried to unquarantine all records at once but it's not supported anymore", v22, 2u);
        }
      }
      return 1;
    case 5:
      if (!_CPLSilentLogging)
      {
        dispatch_block_t v21 = sub_10014B004();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Will refresh list of disabled features", v22, 2u);
        }
      }
      return (uint64_t)[*(id *)(a1 + 40) setShouldUpdateDisabledFeaturesWithError:a2];
    default:
      if (!a2) {
        return 0;
      }
      id v8 = +[CPLErrors incorrectParametersErrorForParameter:@"option"];
      uint64_t result = 0;
      *a2 = v8;
      return result;
  }
  while (2)
  {
    for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v24 != v14) {
        objc_enumerationMutation(v11);
      }
      long long v16 = *(void **)(*((void *)&v23 + 1) + 8 * i);
      long long v17 = [*(id *)(a1 + 40) scopes];
      long long v18 = [v16 scopeIdentifier];
      unsigned int v19 = [v17 resetStableRecordsForScopeWithIdentifier:v18 error:a2];

      if (!v19)
      {

        return 0;
      }
    }
    id v13 = [v11 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v13) {
      continue;
    }
    break;
  }
LABEL_15:

  return 1;
}

void sub_10016784C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 104);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100167980;
  v10[3] = &unk_100276210;
  id v5 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v5;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  id v7 = v4;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100167980(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100167B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (!v4)
  {
    if (*(unsigned char *)(a1 + 64))
    {
      id v7 = [*(id *)(a1 + 32) storages];
      id v8 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v7, "count"));
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id v9 = v7;
      id v10 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v49;
        do
        {
          for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v49 != v12) {
              objc_enumerationMutation(v9);
            }
            id v14 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            if ([v14 shouldIncludeInStatus] && objc_msgSend(v14, "scopeType"))
            {
              long long v15 = [v14 statusPerScopeIndex];
              if (v15)
              {
                long long v16 = [v14 name];
                [v8 setObject:v15 forKeyedSubscript:v16];
              }
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
        }
        while (v11);
      }
    }
    else
    {
      id v9 = 0;
      id v8 = 0;
    }
    id v17 = objc_alloc_init((Class)NSMutableDictionary);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    void v42[2] = sub_100167F68;
    v42[3] = &unk_10027E670;
    char v47 = *(unsigned char *)(a1 + 64);
    id v43 = *(id *)(a1 + 40);
    id v18 = v8;
    id v44 = v18;
    id v19 = v9;
    id v45 = v19;
    id v20 = v17;
    id v46 = v20;
    dispatch_block_t v21 = objc_retainBlock(v42);
    if ([*(id *)(a1 + 48) count])
    {
      long long v40 = 0uLL;
      long long v41 = 0uLL;
      long long v38 = 0uLL;
      long long v39 = 0uLL;
      id v22 = *(id *)(a1 + 48);
      id v23 = [v22 countByEnumeratingWithState:&v38 objects:v53 count:16];
      if (v23)
      {
        id v24 = v23;
        id v32 = v18;
        id v33 = v19;
        uint64_t v25 = *(void *)v39;
        do
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(void *)v39 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v27 = objc_msgSend(*(id *)(a1 + 40), "scopeWithIdentifier:", *(void *)(*((void *)&v38 + 1) + 8 * (void)j), v32);
            if (v27) {
              ((void (*)(void *, void *))v21[2])(v21, v27);
            }
          }
          id v24 = [v22 countByEnumeratingWithState:&v38 objects:v53 count:16];
        }
        while (v24);
        id v18 = v32;
LABEL_36:
        id v19 = v33;
      }
    }
    else
    {
      long long v36 = 0uLL;
      long long v37 = 0uLL;
      long long v34 = 0uLL;
      long long v35 = 0uLL;
      id v22 = [*(id *)(a1 + 40) enumeratorForScopesIncludeInactive:1];
      id v28 = [v22 countByEnumeratingWithState:&v34 objects:v52 count:16];
      if (v28)
      {
        id v29 = v28;
        id v33 = v19;
        uint64_t v30 = *(void *)v35;
        do
        {
          for (k = 0; k != v29; k = (char *)k + 1)
          {
            if (*(void *)v35 != v30) {
              objc_enumerationMutation(v22);
            }
            ((void (*)(void *, void))v21[2])(v21, *(void *)(*((void *)&v34 + 1) + 8 * (void)k));
          }
          id v29 = [v22 countByEnumeratingWithState:&v34 objects:v52 count:16];
        }
        while (v29);
        goto LABEL_36;
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = [v3 error];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);

LABEL_38:
}

void sub_100167F68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 scopeIdentifier];
  int v5 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v25 = v3;
  uint64_t v6 = [*(id *)(a1 + 32) statusDictionaryForScope:v3];
  id v7 = v6;
  if (v5)
  {
    id v23 = v4;
    id v22 = [v6 mutableCopy];

    id v24 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v8 = *(id *)(a1 + 48);
    id v9 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          switch((unint64_t)objc_msgSend(v13, "scopeType", v22))
          {
            case 0uLL:
              continue;
            case 1uLL:
              id v14 = [v25 localIndex];
              goto LABEL_11;
            case 2uLL:
              id v14 = [v25 cloudIndex];
              goto LABEL_11;
            case 3uLL:
              id v14 = [v25 stableIndex];
LABEL_11:
              id v15 = v14;
              break;
            default:
              id v15 = 0;
              break;
          }
          long long v16 = *(void **)(a1 + 40);
          id v17 = [v13 name];
          id v18 = [v16 objectForKeyedSubscript:v17];
          id v19 = +[NSNumber numberWithUnsignedInteger:v15];
          id v20 = [v18 objectForKeyedSubscript:v19];

          if (v20)
          {
            dispatch_block_t v21 = [v13 name];
            [v24 setObject:v20 forKeyedSubscript:v21];
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v10);
    }

    [v22 setObject:v24 forKeyedSubscript:CPLEngineScopeStatusKeyStorages];
    uint64_t v4 = v23;
    [*(id *)(a1 + 56) setObject:v22 forKeyedSubscript:v23];
  }
  else
  {
    [*(id *)(a1 + 56) setObject:v6 forKeyedSubscript:v4];
  }
}

void sub_100168324(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    int v5 = *(void **)(*(void *)(a1 + 32) + 104);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1001687A4;
    v37[3] = &unk_100276210;
    id v39 = *(id *)(a1 + 56);
    id v38 = v3;
    uint64_t v6 = v37;
    long long block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    long long v42 = sub_10016C96C;
    id v43 = &unk_100275DF8;
    id v44 = v6;
    id v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v7, v8);

    id v9 = v39;
LABEL_3:

    goto LABEL_10;
  }
  if (!*(void *)(a1 + 40))
  {
    id v20 = *(void **)(*(void *)(a1 + 32) + 104);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100168898;
    v28[3] = &unk_100275DF8;
    id v29 = *(id *)(a1 + 56);
    dispatch_block_t v21 = v28;
    long long block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    long long v42 = sub_10016C96C;
    id v43 = &unk_100275DF8;
    id v44 = v21;
    id v22 = v20;
    dispatch_block_t v23 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v22, v23);

    id v9 = v29;
    goto LABEL_3;
  }
  char v36 = 0;
  id v10 = [*(id *)(a1 + 48) idMapping];
  uint64_t v11 = [v10 cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 40) isFinal:&v36];

  if (v11)
  {
    uint64_t v12 = [*(id *)(a1 + 48) cloudCache];
    id v13 = [v12 recordWithScopedIdentifier:v11 isFinal:1];

    id v14 = *(void **)(*(void *)(a1 + 32) + 104);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100168804;
    v33[3] = &unk_100276210;
    id v15 = *(id *)(a1 + 56);
    id v34 = v13;
    id v35 = v15;
    long long v16 = v33;
    long long block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    long long v42 = sub_10016C96C;
    id v43 = &unk_100275DF8;
    id v44 = v16;
    id v17 = v14;
    id v18 = v13;
    dispatch_block_t v19 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v17, v19);
  }
  else
  {
    id v24 = *(void **)(*(void *)(a1 + 32) + 104);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10016881C;
    v30[3] = &unk_100276210;
    id v32 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 40);
    uint64_t v25 = v30;
    long long block = _NSConcreteStackBlock;
    uint64_t v41 = 3221225472;
    long long v42 = sub_10016C96C;
    id v43 = &unk_100275DF8;
    id v44 = v25;
    long long v26 = v24;
    dispatch_block_t v27 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
    dispatch_async(v26, v27);

    id v18 = v32;
  }

LABEL_10:
}

void sub_1001687A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_100168804(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10016881C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[CPLErrors cplErrorWithCode:25, @"record with identifier %@ is not known", *(void *)(a1 + 32) description];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100168898(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors incorrectParametersErrorForParameter:@"scopedIdentifier"];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100168A04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (!v4)
  {
    if (!*(void *)(a1 + 40))
    {
      id v31 = *(void **)(*(void *)(a1 + 32) + 104);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472;
      v50[2] = sub_10016924C;
      v50[3] = &unk_100275DF8;
      id v51 = *(id *)(a1 + 56);
      id v32 = v50;
      long long block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      uint64_t v74 = sub_10016C96C;
      id v75 = &unk_100275DF8;
      id v76 = v32;
      id v33 = v31;
      dispatch_block_t v34 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v33, v34);

      id v9 = v51;
      goto LABEL_3;
    }
    char v68 = 0;
    id v10 = [*(id *)(a1 + 48) idMapping];
    uint64_t v11 = [v10 cloudScopedIdentifierForLocalScopedIdentifier:*(void *)(a1 + 40) isFinal:&v68];

    if (!v11)
    {
      id v35 = *(void **)(*(void *)(a1 + 32) + 104);
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472;
      v52[2] = sub_1001691CC;
      void v52[3] = &unk_100276210;
      id v54 = *(id *)(a1 + 56);
      id v53 = *(id *)(a1 + 40);
      char v36 = v52;
      long long block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      uint64_t v74 = sub_10016C96C;
      id v75 = &unk_100275DF8;
      id v76 = v36;
      long long v37 = v35;
      dispatch_block_t v38 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v37, v38);

      id v17 = v54;
LABEL_25:

      goto LABEL_26;
    }
    int v12 = *(unsigned __int8 *)(a1 + 64);
    id v13 = [*(id *)(a1 + 48) cloudCache];
    id v14 = v13;
    if (v12)
    {
      long long v49 = v11;
      id v15 = [v13 recordsWithRelatedScopedIdentifier:v11 isFinal:0];

      id v16 = objc_alloc_init((Class)NSMutableArray);
      long long v64 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      id v17 = v15;
      id v18 = [v17 countByEnumeratingWithState:&v64 objects:v77 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v65;
        do
        {
          dispatch_block_t v21 = 0;
          do
          {
            if (*(void *)v65 != v20) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = *(void *)(*((void *)&v64 + 1) + 8 * (void)v21);
            id v24 = +[CPLArchiver displayablePropertyListWithRootObject:v22];
            if (v24) {
              [v16 addObject:v24];
            }

            dispatch_block_t v21 = (char *)v21 + 1;
          }
          while (v19 != v21);
          id v19 = [v17 countByEnumeratingWithState:&v64 objects:v77 count:16];
        }
        while (v19);
      }

      uint64_t v25 = *(void **)(*(void *)(a1 + 32) + 104);
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3221225472;
      v61[2] = sub_100169194;
      id v61[3] = &unk_100276210;
      id v26 = *(id *)(a1 + 56);
      id v62 = v16;
      id v63 = v26;
      dispatch_block_t v27 = v61;
      long long block = _NSConcreteStackBlock;
      uint64_t v73 = 3221225472;
      uint64_t v74 = sub_10016C96C;
      id v75 = &unk_100275DF8;
      id v76 = v27;
      long long v28 = v25;
      id v29 = v16;
      dispatch_block_t v30 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
      dispatch_async(v28, v30);

      uint64_t v11 = v49;
      goto LABEL_25;
    }
    id v59 = 0;
    id v60 = 0;
    [v13 getCommittedRecord:&v60 stagedRecord:&v59 forScopedIdentifier:v11];
    id v17 = v60;
    id v39 = v59;

    if (v17)
    {
      long long v40 = +[CPLArchiver displayablePropertyListWithRootObject:v17];
      if (v39)
      {
LABEL_21:
        uint64_t v41 = +[CPLArchiver displayablePropertyListWithRootObject:v17];
LABEL_24:
        long long v42 = *(void **)(*(void *)(a1 + 32) + 104);
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_1001691B0;
        v55[3] = &unk_100276C98;
        id v43 = *(id *)(a1 + 56);
        id v57 = v41;
        id v58 = v43;
        id v56 = v40;
        id v44 = v55;
        long long block = _NSConcreteStackBlock;
        uint64_t v73 = 3221225472;
        uint64_t v74 = sub_10016C96C;
        id v75 = &unk_100275DF8;
        id v76 = v44;
        id v45 = v42;
        id v46 = v41;
        id v47 = v40;
        dispatch_block_t v48 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
        dispatch_async(v45, v48);

        goto LABEL_25;
      }
    }
    else
    {
      long long v40 = 0;
      if (v39) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
    goto LABEL_24;
  }
  int v5 = *(void **)(*(void *)(a1 + 32) + 104);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_100169130;
  v69[3] = &unk_100276210;
  id v71 = *(id *)(a1 + 56);
  id v70 = v3;
  uint64_t v6 = v69;
  long long block = _NSConcreteStackBlock;
  uint64_t v73 = 3221225472;
  uint64_t v74 = sub_10016C96C;
  id v75 = &unk_100275DF8;
  id v76 = v6;
  id v7 = v5;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
  dispatch_async(v7, v8);

  id v9 = v71;
LABEL_3:

LABEL_26:
}

void sub_100169130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

uint64_t sub_100169194(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0);
}

uint64_t sub_1001691B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void sub_1001691CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[CPLErrors cplErrorWithCode:25, @"record with identifier %@ is not known", *(void *)(a1 + 32) description];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_10016924C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors incorrectParametersErrorForParameter:@"scopedIdentifier"];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_1001698CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1001698FC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = [v3 recordComputeStatePushQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001699E0;
  v7[3] = &unk_10027E6E8;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v6 = v5;
  [v4 do:v7];
}

uint64_t sub_1001699E0(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 32) isClientInSyncWithClientCache])
  {
    id v4 = [*(id *)(a1 + 32) scopes];
    id v33 = objc_alloc_init((Class)NSMutableSet);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id obj = *(id *)(a1 + 40);
    id v5 = [obj countByEnumeratingWithState:&v39 objects:v46 count:16];
    if (v5)
    {
      id v6 = v5;
      id v7 = 0;
      uint64_t v8 = *(void *)v40;
LABEL_4:
      id v9 = 0;
      id v10 = v7;
      while (1)
      {
        if (*(void *)v40 != v8) {
          objc_enumerationMutation(obj);
        }
        long long v11 = *(void **)(*((void *)&v39 + 1) + 8 * (void)v9);
        int v12 = *(void **)(a1 + 48);
        id v38 = v10;
        unsigned int v13 = [v12 addComputeState:v11 error:&v38];
        id v7 = v38;

        if (!v13) {
          break;
        }
        id v14 = [v11 itemScopedIdentifier];
        id v15 = [v14 scopeIdentifier];
        id v16 = [v4 scopeWithIdentifier:v15];

        if ([v4 valueForFlag:16 forScope:v16])
        {
          dispatch_block_t v30 = [v16 scopeIdentifier];
          id v18 = +[CPLErrors cplErrorWithCode:2001, @"Scope %@ is inactive", v30 description];

          if (a2) {
            *a2 = v18;
          }

          uint64_t v19 = 0;
          goto LABEL_41;
        }
        if (v16)
        {
          [v33 addObject:v16];
          ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        }

        id v9 = (char *)v9 + 1;
        id v10 = v7;
        if (v6 == v9)
        {
          id v6 = [obj countByEnumeratingWithState:&v39 objects:v46 count:16];
          if (v6) {
            goto LABEL_4;
          }
          goto LABEL_17;
        }
      }

      if (a2)
      {
        id v18 = v7;
        uint64_t v19 = 0;
        *a2 = v18;
        goto LABEL_41;
      }
      uint64_t v19 = 0;
    }
    else
    {
      id v7 = 0;
LABEL_17:

      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v20 = v33;
        id v21 = [v20 countByEnumeratingWithState:&v34 objects:v45 count:16];
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = *(void *)v35;
          do
          {
            for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v35 != v23) {
                objc_enumerationMutation(v20);
              }
              [v4 setScopeNeedsToUploadComputeState:*(void *)(*((void *)&v34 + 1) + 8 * i) error:a2];
            }
            id v22 = [v20 countByEnumeratingWithState:&v34 objects:v45 count:16];
          }
          while (v22);
        }

        uint64_t v25 = [*(id *)(a1 + 32) engineLibrary];
        id v26 = [v25 configuration];

        id v27 = [v26 maximumComputeStatesToUploadPerBatch];
        if ([*(id *)(a1 + 48) countOfComputeStates] >= v27) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
        }
        if (!_CPLSilentLogging)
        {
          long long v28 = sub_10014B004();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
            *(_DWORD *)long long buf = 134217984;
            uint64_t v44 = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Added %lu record compute states to the record compute state push queue", buf, 0xCu);
          }
        }
      }
      uint64_t v19 = 1;
    }
    id v18 = v7;
LABEL_41:
  }
  else
  {
    id v17 = +[CPLErrors cplErrorWithCode:20, @"Engine is not in sync with client. Should try again later to attach compute states for %@", *(void *)(a1 + 40) description];
    id v18 = v17;
    if (a2)
    {
      id v18 = v17;
      uint64_t v19 = 0;
      *a2 = v18;
    }
    else
    {
      uint64_t v19 = 0;
    }
  }

  return v19;
}

uint64_t sub_100169E1C(uint64_t a1, void *a2)
{
  id v3 = [a2 error];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = v3;
  if (!v3) {
    id v5 = *(void **)(v4 + 40);
  }
  objc_storeStrong((id *)(v4 + 40), v5);

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v6 = [*(id *)(a1 + 32) engineLibrary];
    id v7 = [v6 scheduler];
    [v7 noteScopeNeedsToUploadComputeState];
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v8();
}

void sub_100169FAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 104);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016A0EC;
  block[3] = &unk_100275F88;
  void block[4] = v4;
  block[5] = &v9;
  dispatch_sync(v5, block);
  if (*((unsigned char *)v10 + 24))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10016A110;
    v6[3] = &unk_10027D400;
    id v7 = *(id *)(a1 + 40);
    [v3 do:v6];
  }
  _Block_object_dispose(&v9, 8);
}

void sub_10016A0D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016A0EC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 80) == 0;
  return result;
}

id sub_10016A110(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) recordComputeStatePushQueue];
  id v4 = [v3 deleteIncomingDownloadFolderWithError:a2];

  return v4;
}

void sub_10016A154(id a1, CPLEngineStoreTransaction *a2)
{
  id v2 = a2;
  uint64_t v3 = [(CPLEngineStoreTransaction *)v2 error];
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = [(CPLEngineStoreTransaction *)v2 error];
    unsigned __int8 v6 = [v5 isCPLErrorWithCode:2];

    if ((v6 & 1) == 0 && !_CPLSilentLogging)
    {
      id v7 = sub_10014B004();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = [(CPLEngineStoreTransaction *)v2 error];
        int v9 = 138412290;
        id v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to clean-up compute state temp folder: %@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

void sub_10016A41C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3 == v2[11])
  {
    [v2 _cleanupComputeStateDownloadQueue];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 88);
    *(void *)(v4 + 88) = 0;
  }
}

void sub_10016AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose((const void *)(v70 - 248), 8);
  _Block_object_dispose((const void *)(v70 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_10016AB60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 104);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10016ACE8;
  v15[3] = &unk_10027E780;
  long long v20 = *(_OWORD *)(a1 + 56);
  void v15[4] = v7;
  uint64_t v21 = *(void *)(a1 + 72);
  id v16 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v18 = v6;
  id v19 = v9;
  id v17 = v5;
  id v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016C96C;
  block[3] = &unk_100275DF8;
  id v23 = v10;
  uint64_t v11 = v8;
  id v12 = v6;
  id v13 = v5;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

void *sub_10016ACE8(void *result)
{
  uint64_t v1 = *(void *)(result[9] + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    id v2 = result;
    *(unsigned char *)(v1 + 24) = 1;
    if (*(void *)(*(void *)(result[10] + 8) + 40))
    {
      objc_msgSend(*(id *)(result[4] + 72), "removeObject:");
      uint64_t v3 = *(void *)(v2[10] + 8);
      uint64_t v4 = *(void **)(v3 + 40);
      *(void *)(v3 + 40) = 0;
    }
    if (*(void *)(*(void *)(v2[11] + 8) + 40))
    {
      dispatch_time_t v5 = dispatch_time(0, 600000000000);
      id v6 = *(NSObject **)(v2[4] + 104);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10016AE18;
      block[3] = &unk_100275F60;
      void block[4] = v2[11];
      dispatch_after(v5, v6, block);
    }
    objc_msgSend((id)v2[5], "setCompletedUnitCount:", objc_msgSend((id)v2[5], "totalUnitCount"));
    (*(void (**)(void))(v2[8] + 16))();
    return [(id)v2[4] _endComputeStateDownload];
  }
  return result;
}

void sub_10016AE18(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v8 = 0;
  unsigned __int8 v4 = [v2 removeItemAtURL:v3 error:&v8];
  id v5 = v8;

  if ((v4 & 1) == 0 && !_CPLSilentLogging)
  {
    id v6 = sub_10014B004();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) path];
      *(_DWORD *)long long buf = 138412546;
      id v10 = v7;
      __int16 v11 = 2112;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to remove temporary folder at %@: %@", buf, 0x16u);
    }
  }
}

id sub_10016AF44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startComputeStateDownload];
}

void sub_10016AF4C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10016B030;
  v6[3] = &unk_10027E7D0;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v11 = v5;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 88);
  [a2 do:v6];
}

BOOL sub_10016B030(uint64_t a1, void *a2)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v50 objects:v54 count:16];
  if (!v5) {
    goto LABEL_14;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)v51;
  while (2)
  {
    id v8 = 0;
    do
    {
      if (*(void *)v51 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(void **)(*((void *)&v50 + 1) + 8 * (void)v8);
      if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
      {
        id v10 = [*(id *)(*((void *)&v50 + 1) + 8 * (void)v8) scopeIdentifier];
        uint64_t v11 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier];
        unsigned __int8 v12 = [v10 isEqualToString:v11];

        if ((v12 & 1) == 0)
        {
          id v22 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier];
          uint64_t v23 = +[CPLErrors cplErrorWithCode:50, @"Can't download compute state for this scope:%@", v22 description];
LABEL_17:
          id v21 = (id)v23;

          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v13 = *(void **)(a1 + 40);
        dispatch_block_t v14 = [*(id *)(*((void *)&v50 + 1) + 8 * (void)v8) scopeIdentifier];
        uint64_t v15 = [v13 scopeWithIdentifier:v14];
        uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
        id v17 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v15;

        if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
        {
          id v22 = [0 scopeIdentifier];
          uint64_t v23 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:v22];
          goto LABEL_17;
        }
      }
      char v49 = 0;
      id v18 = [*(id *)(a1 + 48) idMapping];
      id v19 = [v18 cloudScopedIdentifierForLocalScopedIdentifier:v9 isFinal:&v49];

      if (!v19) {
        id v19 = [v9 copy];
      }
      [*(id *)(a1 + 56) addObject:v19];

      id v8 = (char *)v8 + 1;
    }
    while (v6 != v8);
    id v6 = [v4 countByEnumeratingWithState:&v50 objects:v54 count:16];
    if (v6) {
      continue;
    }
    break;
  }
LABEL_14:

  if ([*(id *)(a1 + 40) valueForFlag:16 forScope:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)])
  {
    long long v20 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier];
    id v21 = +[CPLErrors cplErrorWithCode:2001, @"Scope %@ is inactive", v20 description];

    goto LABEL_18;
  }
  uint64_t v26 = [*(id *)(a1 + 48) transactionTransportScopeMapping];
  uint64_t v27 = *(void *)(*(void *)(a1 + 72) + 8);
  long long v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v26;

  uint64_t v29 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  dispatch_block_t v30 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier];
  id v31 = [*(id *)(a1 + 48) scopes];
  id v48 = 0;
  LODWORD(v29) = [v29 addTransportScopeForScopeIdentifier:v30 scopes:v31 useStagingScopeIfNecessary:1 error:&v48];
  id v21 = v48;

  if (v29)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)
      && (objc_msgSend(*(id *)(a1 + 40), "sharingScopeForScope:"),
          uint64_t v32 = objc_claimAutoreleasedReturnValue(),
          uint64_t v33 = *(void *)(*(void *)(a1 + 80) + 8),
          long long v34 = *(void **)(v33 + 40),
          *(void *)(v33 + 40) = v32,
          v34,
          (long long v35 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40)) != 0))
    {
      long long v36 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      long long v37 = [v35 scopeIdentifier];
      id v38 = [*(id *)(a1 + 48) scopes];
      id v47 = v21;
      unsigned int v39 = [v36 addTransportScopeForScopeIdentifier:v37 scopes:v38 useStagingScopeIfNecessary:1 error:&v47];
      id v40 = v47;

      if (v39)
      {
        id v21 = v40;
        goto LABEL_28;
      }
      BOOL v24 = 0;
      id v21 = v40;
    }
    else
    {
LABEL_28:
      long long v41 = [*(id *)(a1 + 48) recordComputeStatePushQueue];
      id v46 = v21;
      uint64_t v42 = [v41 createNewTempDownloadFolderWithError:&v46];
      id v43 = v46;

      uint64_t v44 = *(void *)(*(void *)(a1 + 88) + 8);
      id v45 = *(void **)(v44 + 40);
      *(void *)(v44 + 40) = v42;

      BOOL v24 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) != 0;
      id v21 = v43;
    }
  }
  else
  {
LABEL_18:
    BOOL v24 = 0;
  }
  if (a2 && !v24) {
    *a2 = v21;
  }

  return v24;
}

void sub_10016B4BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    id v6 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
  else if ([*(id *)(a1 + 32) count])
  {
    uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 104);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10016B708;
    v16[3] = &unk_10027E8C0;
    id v8 = *(id *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 96);
    id v17 = v8;
    uint64_t v24 = v9;
    int8x16_t v15 = *(int8x16_t *)(a1 + 32);
    id v10 = (id)v15.i64[0];
    int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
    long long v11 = *(_OWORD *)(a1 + 120);
    long long v25 = *(_OWORD *)(a1 + 104);
    long long v26 = v11;
    id v23 = *(id *)(a1 + 88);
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    char v27 = *(unsigned char *)(a1 + 136);
    id v21 = *(id *)(a1 + 72);
    char v28 = *(unsigned char *)(a1 + 137);
    id v22 = *(id *)(a1 + 80);
    unsigned __int8 v12 = v16;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10016C96C;
    block[3] = &unk_100275DF8;
    id v30 = v12;
    uint64_t v13 = v7;
    dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v13, v14);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

void sub_10016B708(uint64_t a1)
{
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  id v3 = [*(id *)(*(void *)(a1 + 40) + 96) transport];
  id v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_10016B964;
  v22[3] = &unk_10027E870;
  id v9 = v4;
  uint64_t v10 = *(void *)(a1 + 40);
  id v23 = v9;
  uint64_t v24 = v10;
  id v28 = *(id *)(a1 + 88);
  id v25 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  uint64_t v29 = *(void *)(a1 + 104);
  id v26 = v11;
  id v27 = v2;
  id v12 = v2;
  uint64_t v13 = [v3 downloadComputeStatesWithScopedIdentifiers:v9 scope:v5 sharedScope:v6 targetStorageURL:v7 transportScopeMapping:v8 completionHandler:v22];
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8);
  int8x16_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setShouldDecrypt:*(unsigned __int8 *)(a1 + 136)];
  [*(id *)(*(void *)(a1 + 40) + 72) addObject:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10016BE3C;
  v18[3] = &unk_10027E898;
  uint64_t v16 = *(void *)(a1 + 96);
  void v18[4] = *(void *)(a1 + 40);
  uint64_t v20 = v16;
  char v21 = *(unsigned char *)(a1 + 137);
  id v17 = *(void **)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  [v17 performAsCurrentWithPendingUnitCount:1 usingBlock:v18];
}

void sub_10016B964(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) count];
  id v8 = [v5 count];
  id v9 = [*(id *)(a1 + 40) engineLibrary];
  uint64_t v10 = v9;
  if (v6 || v7 == v8)
  {
    uint64_t v11 = 0;
    id v12 = v6;
  }
  else
  {
    uint64_t v11 = 1;
    id v12 = 0;
  }
  [v9 updateComputeSyncMetrics:1 silentDecryptionFailed:v11 error:v12];

  if ([v5 count])
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10016BB14;
    v17[3] = &unk_10027E848;
    uint64_t v13 = *(void **)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    long long v16 = *(_OWORD *)(a1 + 72);
    id v14 = (id)v16;
    long long v23 = v16;
    id v19 = v5;
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    id v22 = v6;
    id v15 = [v13 performReadTransactionWithBlock:v17];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_10016BB14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) validLocalScopeIndexes];
  if (objc_msgSend(v2, "containsIndex:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "localIndex")))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10016BC5C;
    v7[3] = &unk_10027E820;
    id v3 = *(void **)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v3 enumerateKeysAndObjectsUsingBlock:v7];
    (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  }
  else
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) scopeIdentifier];
    id v6 = +[CPLErrors invalidScopeErrorWithScopeIdentifier:v5];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_10016BC5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  char v18 = 0;
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = [v6 idMapping];
  id v9 = [v8 localScopedIdentifierForCloudScopedIdentifier:v5 isFinal:&v18];

  if (!v9)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v10 = sub_10014B004();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Couldn't find localScopedIdentifier for cloudScopedIdentifier %@ in cloudCache for compute state", buf, 0xCu);
      }
    }
    id v9 = [v5 copy];
  }
  id v11 = objc_alloc((Class)CPLRecordComputeState);
  id v12 = [v7 fileStorageIdentifier];
  uint64_t v13 = [v7 version];
  id v14 = [v7 fileURL];
  id v15 = [v7 adjustmentFingerprint];
  long long v16 = [v7 lastUpdatedDate];

  id v17 = [v11 initWithItemScopedIdentifier:v9 fileStorageIdentifier:v12 version:v13 fileURL:v14 adjustmentFingerprint:v15 lastUpdatedDate:v16];
  [*(id *)(a1 + 40) setObject:v17 forKeyedSubscript:v9];
}

id sub_10016BE3C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engineLibrary];
  id v3 = [v2 syncManager];
  [v3 configureDirectTransportTask:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  uint64_t v4 = *(void **)(a1 + 40);
  if (*(unsigned char *)(a1 + 56)) {
    [v4 createGroupForComputeStateDownloadOnDemand];
  }
  else {
  id v5 = [v4 createGroupForComputeStateDownloadPrefetch];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setTransportGroup:v5];

  id v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  return [v6 runWithNoSyncSession];
}

void sub_10016C090(uint64_t a1, void *a2)
{
  id v29 = a2;
  if (qword_1002DBCA8 != -1) {
    dispatch_once(&qword_1002DBCA8, &stru_10027E908);
  }
  id v3 = [*(id *)(a1 + 32) mutableCopy];
  [v3 removeObjectForKey:CPLMiscInformationAppendCPLReport];
  uint64_t v4 = +[NSDate date];
  id v5 = sub_10016C430((uint64_t)v4, v4);
  [v3 setObject:v5 forKeyedSubscript:@"deviceTimestamp"];

  id v6 = [*(id *)(a1 + 40) scopes];
  id v7 = [v6 primaryScope];
  if (v7)
  {
    unsigned int v8 = [v6 valueForFlag:16 forScope:v7];
    char v9 = v8;
    if (v8) {
      CFStringRef v10 = @"off";
    }
    else {
      CFStringRef v10 = @"on";
    }
    [v3 setObject:v10 forKeyedSubscript:@"iCPL"];
    if ((v9 & 1) == 0)
    {
      id v11 = [v6 lastDateOfClearedPushRepositoryForScope:v7];
      id v12 = v11;
      if (v11)
      {
        uint64_t v13 = sub_10016C430((uint64_t)v11, v11);
        [v3 setObject:v13 forKeyedSubscript:@"iCPLLastClearedPush"];
      }
      id v14 = [v6 lastDateOfCompletedPullFromTransportForScope:v7];

      if (v14)
      {
        long long v16 = sub_10016C430(v15, v14);
        [v3 setObject:v16 forKeyedSubscript:@"iCPLLastDownSync"];
      }
      id v17 = [v7 scopeIdentifier];
      char v18 = [*(id *)(a1 + 40) pushRepository];
      id v19 = [v18 countOfChangesInScopeWithIdentifier:v17];

      id v20 = (void *)qword_1002DBCA0;
      id v21 = +[NSNumber numberWithUnsignedInteger:v19];
      id v22 = [v20 stringFromNumber:v21];
      [v3 setObject:v22 forKeyedSubscript:@"iCPLPushCount"];

      long long v23 = [*(id *)(a1 + 40) quarantinedRecords];
      id v24 = [v23 countOfQuarantinedRecordsInScopeWithIdentifier:v17];

      id v25 = (void *)qword_1002DBCA0;
      id v26 = +[NSNumber numberWithUnsignedInteger:v24];
      id v27 = [v25 stringFromNumber:v26];
      [v3 setObject:v27 forKeyedSubscript:@"iCPLQuarantineCount"];
    }
  }
  else
  {
    [v3 setObject:@"off" forKeyedSubscript:@"iCPL"];
  }

  id v28 = [*(id *)(*(void *)(a1 + 48) + 96) feedback];
  [v28 reportMiscInformation:v3];
}

void sub_10016C39C(id a1)
{
  id v1 = objc_alloc_init((Class)NSNumberFormatter);
  id v2 = (void *)qword_1002DBCA0;
  qword_1002DBCA0 = (uint64_t)v1;

  id v3 = +[NSLocale localeWithLocaleIdentifier:@"en_US"];
  [(id)qword_1002DBCA0 setLocale:v3];
  [(id)qword_1002DBCA0 setNumberStyle:1];
  [(id)qword_1002DBCA0 setUsesGroupingSeparator:0];
}

id sub_10016C430(uint64_t a1, void *a2)
{
  id v2 = (void *)qword_1002DBCA0;
  [a2 timeIntervalSinceReferenceDate];
  uint64_t v4 = +[NSNumber numberWithLongLong:(uint64_t)v3];
  id v5 = [v2 stringFromNumber:v4];

  return v5;
}

void sub_10016C92C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "client.librarymanager.directlibrarymanager");
  uint64_t v3 = qword_1002DBCB8;
  qword_1002DBCB8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_10016C96C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10016C9B8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    os_log_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = NSStringFromSelector(*(SEL *)(a1 + 40));
      int v5 = 138412546;
      uint64_t v6 = v3;
      __int16 v7 = 2112;
      unsigned int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "-[%@ %@] was cancelled by caller", (uint8_t *)&v5, 0x16u);
    }
  }
}

void sub_10016CA94(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1002DBCC8 = [v1 BOOLForKey:@"CPLAlwaysCheckServerForDeleteResources"];
}

id sub_10016CEC4()
{
  if (qword_1002DBCF0 != -1) {
    dispatch_once(&qword_1002DBCF0, &stru_10027EB08);
  }
  uint64_t v0 = (void *)qword_1002DBCF8;
  return v0;
}

void sub_10016CF18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10016CF7C(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(*(void *)(a1 + 32) + 98);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10016D08C;
  v11[3] = &unk_10027D898;
  uint64_t v6 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = *(id *)(a1 + 48);
  [v4 do:v11];

  id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  uint64_t v8 = [v7 libraryVersion];
  uint64_t v9 = *(void *)(a1 + 32);
  CFStringRef v10 = *(void **)(v9 + 82);
  *(void *)(v9 + 82) = v8;
}

uint64_t sub_10016D08C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  int v5 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 48) resetTracker];
  LODWORD(v6) = [WeakRetained beginChangeSession:v5 withLibraryVersion:v6 resetTracker:v7 error:a2];

  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = objc_loadWeakRetained((id *)(v8 + 98));
  unsigned int v11 = [(id)v8 processSessionContext:v9 inStore:v10 error:a2];

  if (!v11) {
    return 0;
  }
  uint64_t result = 1;
  if (!*(void *)(a1 + 40)) {
    *(unsigned char *)(*(void *)(a1 + 32) + 34) = 1;
  }
  return result;
}

void sub_10016D184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (!v4) {
    [*(id *)(a1 + 32) beginClientWork];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10016D250;
  v8[3] = &unk_100276210;
  int v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v5 dispatchCallback:v8];
}

void sub_10016D250(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10016D55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10016D588(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_10016D5F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016D600(uint64_t a1)
{
}

void sub_10016D608(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  [WeakRetained dropUnacknowledgedBatch];

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10016D790;
  v16[3] = &unk_10027D400;
  void v16[4] = *(void *)(a1 + 32);
  [v3 do:v16];
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  id v10 = sub_10016D7F8;
  unsigned int v11 = &unk_10027E990;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v14 = v5;
  id v6 = v3;
  id v13 = v6;
  long long v15 = *(_OWORD *)(a1 + 48);
  [v6 do:&v8];
  id v7 = objc_msgSend(v6, "error", v8, v9, v10, v11, v12);
  if (v7 || *(void *)(*(void *)(a1 + 32) + 66)) {
    goto LABEL_5;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count])
  {
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
    [v7 keepUnacknowledgedBatch:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
LABEL_5:
  }
}

id sub_10016D790(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10016D7F8(void *a1, void *a2)
{
  id v4 = a1 + 4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 98));
  [WeakRetained assertNoUnacknowledgedChanges];

  id v6 = objc_loadWeakRetained((id *)(*v4 + 98));
  id v7 = [v6 transactionClientCacheView];

  id v8 = objc_loadWeakRetained((id *)(*v4 + 106));
  uint64_t v9 = [v8 scopeChangesNeedingToBePulledByClientWithMaximumCount:5];
  id v10 = *(void **)(*v4 + 66);
  *(void *)(*v4 + 66) = v9;

  uint64_t v11 = *v4;
  if (*(void *)(*v4 + 66))
  {
    id v12 = *(id *)(v11 + 74);
    *(void *)(v11 + 74) = 0;
  }
  else
  {
    id v12 = objc_loadWeakRetained((id *)(v11 + 98));
    id v13 = [v12 revertRecords];
    uint64_t v14 = [v13 nextBatchOfRecordsToRevert];
    long long v15 = *(void **)(*v4 + 74);
    *(void *)(*v4 + 74) = v14;
  }
  uint64_t v16 = *v4;
  id v17 = *(void **)(*v4 + 66);
  if (v17 || (id v17 = *(void **)(v16 + 74)) != 0)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v17);
    objc_storeStrong((id *)(a1[4] + 42), *(id *)(*(void *)(a1[6] + 8) + 40));
    id v18 = 0;
LABEL_7:
    uint64_t v19 = 1;
    goto LABEL_8;
  }
  id v21 = objc_loadWeakRetained((id *)(v16 + 98));
  id v22 = [v21 pushPullGatekeepers];
  id v23 = [v22 count];

  long long v64 = a2;
  if (v23)
  {
    if (!_CPLSilentLogging)
    {
      id v24 = sub_10016CEC4();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Removing all push/pull gatekeepers", buf, 2u);
      }
    }
    id v25 = objc_loadWeakRetained((id *)(*v4 + 98));
    id v70 = 0;
    unsigned int v26 = [v25 clearAllPushPullGatekeepersWithError:&v70];
    id v18 = v70;

    if (!v26)
    {
      uint64_t v19 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    id v18 = 0;
  }
  if (*(void *)(*v4 + 42))
  {
    if (!_CPLSilentLogging)
    {
      id v27 = sub_10016CEC4();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(*v4 + 42);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v72 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Trying to get a batch while we are still waiting to acknowledge the previous one:\n%@", buf, 0xCu);
      }
    }
    id v29 = (void *)a1[5];
    id v30 = +[CPLErrors incorrectMachineStateErrorWithReason:@"Trying to pull a batch before acknowledging the previous one"];
    [v29 setError:v30];

    goto LABEL_7;
  }
  id v31 = objc_loadWeakRetained((id *)(*v4 + 114));
  uint64_t v66 = 99;
  long long v65 = v31;
  while (1)
  {
    uint64_t v33 = [v31 nextBatch];
    uint64_t v34 = a1[4];
    long long v35 = *(void **)(v34 + 50);
    *(void *)(v34 + 50) = v33;

    uint64_t v36 = a1[4];
    long long v37 = *(void **)(v36 + 58);
    *(void *)(v36 + 58) = 0;

    uint64_t v38 = *(void *)(a1[6] + 8);
    unsigned int v39 = *(void **)(v38 + 40);
    *(void *)(v38 + 40) = 0;

    uint64_t v40 = a1[4];
    uint64_t v41 = *(void *)(v40 + 50);
    if (!v41) {
      break;
    }
    if (!_CPLSilentLogging)
    {
      uint64_t v42 = sub_10016CEC4();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v43 = *(void *)(*v4 + 50);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v72 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Next cloud batch is %@", buf, 0xCu);
      }

      uint64_t v40 = *v4;
      uint64_t v41 = *(void *)(*v4 + 50);
    }
    id v44 = objc_loadWeakRetained((id *)(v40 + 122));
    id v69 = 0;
    uint64_t v45 = [v7 localChangeBatchFromCloudBatch:v41 usingMapping:v44 withError:&v69];
    id v46 = v69;
    id v47 = *(void **)(*v4 + 58);
    *(void *)(*v4 + 58) = v45;

    if (!*(void *)(*v4 + 58))
    {
      id v31 = v65;
LABEL_43:

LABEL_44:
      uint64_t v19 = 0;
      id v18 = v46;
      goto LABEL_50;
    }
    uint64_t v48 = objc_msgSend(v7, "compactedBatchFromExpandedBatch:");
    uint64_t v49 = *(void *)(a1[6] + 8);
    long long v50 = *(void **)(v49 + 40);
    *(void *)(v49 + 40) = v48;

    if (!_CPLSilentLogging)
    {
      long long v51 = sub_10016CEC4();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v52 = *(void *)(*(void *)(a1[6] + 8) + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v72 = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Compacted client batch is %@", buf, 0xCu);
      }
    }
    if (!*(void *)(*(void *)(a1[6] + 8) + 40)) {
      sub_1001CFF40(v4, 58, (uint64_t)a1);
    }

    id v31 = v65;
    if ([*(id *)(*(void *)(a1[6] + 8) + 40) count]) {
      goto LABEL_47;
    }
    id v68 = 0;
    unsigned int v53 = [v65 popNextBatchWithError:&v68];
    id v54 = v68;
    id v46 = v54;
    if (!v53) {
      goto LABEL_43;
    }

    if (!v66)
    {
      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
      uint64_t v56 = *(void *)(a1[6] + 8);
      id v55 = *(NSObject **)(v56 + 40);
      *(void *)(v56 + 40) = 0;
      goto LABEL_46;
    }
    --v66;
  }
  if (!_CPLSilentLogging)
  {
    id v55 = sub_10016CEC4();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Pull queue has no batches left to serve", buf, 2u);
    }
LABEL_46:
  }
LABEL_47:
  uint64_t v57 = a1[6];
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24) && !*(void *)(*(void *)(v57 + 8) + 40) && *(unsigned char *)(*v4 + 34))
  {
    if (!_CPLSilentLogging)
    {
      id v58 = sub_10016CEC4();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Sending an empty batch so the client can know the current library version", buf, 2u);
      }
    }
    id v59 = objc_alloc_init((Class)CPLChangeBatch);
    uint64_t v60 = *(void *)(a1[6] + 8);
    long long v61 = *(void **)(v60 + 40);
    *(void *)(v60 + 40) = v59;

    id v62 = objc_loadWeakRetained((id *)(a1[4] + 98));
    id v67 = 0;
    unsigned int v63 = [v62 storeClientIsInSyncWithClientCacheWithError:&v67];
    id v46 = v67;

    if (!v63)
    {

      goto LABEL_44;
    }

    uint64_t v57 = a1[6];
  }
  objc_storeStrong((id *)(*v4 + 42), *(id *)(*(void *)(v57 + 8) + 40));
  uint64_t v19 = 1;
LABEL_50:

LABEL_51:
  if (v64 && (v19 & 1) == 0)
  {
    id v18 = v18;
    uint64_t v19 = 0;
    *long long v64 = v18;
  }
LABEL_8:

  return v19;
}

void sub_10016DF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    [*(id *)(a1 + 32) endClientWork];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10016E150;
    v14[3] = &unk_100276210;
    id v5 = *(void **)(a1 + 32);
    id v16 = *(id *)(a1 + 40);
    id v15 = v3;
    [v5 dispatchCallback:v14];

    id v6 = v16;
LABEL_3:

    goto LABEL_11;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    id v8 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10016E1B0;
    v11[3] = &unk_10027E9E0;
    void v11[4] = v8;
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 56);
    id v12 = v9;
    uint64_t v13 = v10;
    [v8 dispatchCallback:v11];
    id v6 = v12;
    goto LABEL_3;
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count]) {
    sub_1001D0050(_CPLSilentLogging == 0, a1);
  }
  if (!_CPLSilentLogging)
  {
    id v7 = sub_10016CEC4();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v18 = 100;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to get a non empty batch after getting %lu batches from the pull queue - will continue to look for one", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 32) getChangeBatchWithCompletionHandler:*(void *)(a1 + 40)];
LABEL_11:
}

void sub_10016E150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_10016E1B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 130));
  [WeakRetained willRunEngineElement:CPLEngineElementClientPullsBatch];

  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_10016E4D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10016E4F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10016E558(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 98);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10016E6A0;
  v11[3] = &unk_10027D400;
  void v11[4] = *(void *)(a1 + 32);
  [v4 do:v11];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10016E708;
  v8[3] = &unk_10027EA78;
  id v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  long long v10 = *(_OWORD *)(a1 + 48);
  [v4 do:v8];
  id v7 = [v4 error];

  if (!v7) {
    [*(id *)(a1 + 32) registerTentativeResetReason];
  }
}

id sub_10016E6A0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  id v5 = [WeakRetained checkExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10016E708(uint64_t a1, void *a2)
{
  if (qword_1002DBCD8 != -1) {
    dispatch_once(&qword_1002DBCD8, &stru_10027EA28);
  }
  id v4 = *(void **)(*(void *)(a1 + 32) + 42);
  id v5 = &OBJC_IVAR___CPLCloudKitFeatureVersion__serverToken;
  if (!v4)
  {
    if (a2)
    {
      CFStringRef v14 = @"Trying to acknowledge a pulled batch before actually getting one";
      goto LABEL_18;
    }
LABEL_19:
    uint64_t v19 = 0;
    goto LABEL_27;
  }
  if (([v4 isEqual:*(void *)(a1 + 40)] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_10016CEC4();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id v7 = NSStringFromSelector(*(SEL *)(a1 + 56));
        id v8 = [*(id *)(*(void *)(a1 + 32) + 42) summaryDescription];
        id v9 = [*(id *)(a1 + 40) summaryDescription];
        *(_DWORD *)long long buf = 138412802;
        uint64_t v48 = v7;
        __int16 v49 = 2112;
        long long v50 = v8;
        __int16 v51 = 2112;
        uint64_t v52 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Wrong batch passed in %@ - expected: %@ - ack: %@", buf, 0x20u);
      }
    }
    uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 42) records];
    id v12 = [*(id *)(a1 + 40) records];
    id v13 = [v11 count];
    if (v13 == [v12 count])
    {
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_10016EC3C;
      v45[3] = &unk_10027EA50;
      id v46 = v12;
      [v11 enumerateObjectsUsingBlock:v45];
    }
    id v5 = &OBJC_IVAR___CPLCloudKitFeatureVersion__serverToken;
    if (byte_1002DBCD0)
    {
      if (a2)
      {
        CFStringRef v14 = @"Client acknowledged an incorrect batch";
LABEL_18:
        +[CPLErrors incorrectMachineStateErrorWithReason:v14];
        uint64_t v19 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_27;
      }
      goto LABEL_19;
    }
  }
  uint64_t v15 = *(void *)(a1 + 32);
  if (*(void *)(v15 + 66))
  {
    id v16 = objc_alloc((Class)CPLPullSessionScopesAcknowledgement);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
    id v18 = [v16 initWithStore:WeakRetained scopesChangeBatch:*(void *)(*(void *)(a1 + 32) + 66)];
  }
  else if (*(void *)(v15 + 74))
  {
    id v20 = objc_alloc((Class)CPLPullSessionRevertRecords);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
    id v18 = [v20 initWithStore:WeakRetained revertedChangesBatch:*(void *)(*(void *)(a1 + 32) + 74)];
  }
  else
  {
    if (!*(void *)(v15 + 50))
    {
      id v41 = objc_loadWeakRetained((id *)(v15 + 98));
      uint64_t v42 = [v41 libraryVersion];
      uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 8);
      id v44 = *(void **)(v43 + 40);
      *(void *)(v43 + 40) = v42;

      uint64_t v19 = 1;
      goto LABEL_27;
    }
    id v21 = objc_alloc((Class)CPLPullSessionUpdate);
    id v22 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
    id v23 = v5;
    id WeakRetained = v22;
    id v18 = [v21 initWithStore:v22 expandedClientBatch:*(void *)(*(void *)(a1 + 32) + v23[91]) expandedCloudBatch:*(void *)(*(void *)(a1 + 32) + 50)];
  }
  id v24 = v18;

  id v25 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  uint64_t v19 = (uint64_t)[v25 storeChangeSessionUpdate:v24 error:a2];

  if (v19)
  {
    uint64_t v26 = [v24 libraryVersion];
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 82), *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }

  id v5 = &OBJC_IVAR___CPLCloudKitFeatureVersion__serverToken;
LABEL_27:
  uint64_t v29 = *(void *)(a1 + 32);
  id v30 = *(void **)(v29 + 42);
  *(void *)(v29 + 42) = 0;

  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v32 = *(void **)(v31 + 50);
  *(void *)(v31 + 50) = 0;

  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = v5[91];
  long long v35 = *(void **)(v33 + v34);
  *(void *)(v33 + v34) = 0;

  uint64_t v36 = *(void *)(a1 + 32);
  long long v37 = *(void **)(v36 + 66);
  *(void *)(v36 + 66) = 0;

  uint64_t v38 = *(void *)(a1 + 32);
  unsigned int v39 = *(void **)(v38 + 74);
  *(void *)(v38 + 74) = 0;

  return v19;
}

void sub_10016EBA8(id a1)
{
  int has_internal_content = os_variant_has_internal_content();
  byte_1002DBCD0 = has_internal_content;
  if (has_internal_content) {
    BOOL v2 = _CPLSilentLogging == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    id v3 = sub_10016CEC4();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking acknowledged batches in pull session", v4, 2u);
    }
  }
}

void sub_10016EC3C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) objectAtIndex:a3];
  uint64_t v7 = objc_opt_class();
  if (v7 == objc_opt_class())
  {
    id v8 = objc_alloc_init((Class)CPLDiffTracker);
    if ([v5 cplProperties:0 areEqualToPropertiesOf:v6 diffTracker:v8 withEqualityBlock:0])
    {
LABEL_16:

      goto LABEL_17;
    }
    id v9 = [v8 differingProperties];
    long long v10 = [v9 anyObject];

    if (v10)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v11 = sub_10016CEC4();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          id v12 = [v5 valueForKey:v10];
          id v13 = [v6 valueForKey:v10];
          int v17 = 138413314;
          id v18 = v5;
          __int16 v19 = 2112;
          id v20 = v6;
          __int16 v21 = 2112;
          id v22 = v10;
          __int16 v23 = 2112;
          id v24 = v12;
          __int16 v25 = 2112;
          uint64_t v26 = v13;
          CFStringRef v14 = "Expected record:\n%@\nvs. acknowledged record:\n%@\nDifferent on %@: %@ vs. %@";
          uint64_t v15 = v11;
          uint32_t v16 = 52;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v17, v16);

          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else if (!_CPLSilentLogging)
    {
      uint64_t v11 = sub_10016CEC4();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = [v5 cplFullDescription];
        id v13 = [v6 cplFullDescription];
        int v17 = 138412546;
        id v18 = v12;
        __int16 v19 = 2112;
        id v20 = v13;
        CFStringRef v14 = "Expected record:\n%@\n====\nReceived:\n%@";
        uint64_t v15 = v11;
        uint32_t v16 = 22;
        goto LABEL_13;
      }
LABEL_14:
    }
    goto LABEL_16;
  }
  if (!_CPLSilentLogging)
  {
    id v8 = sub_10016CEC4();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v17 = 138412546;
      id v18 = v5;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Expected record:\n%@\nvs. acknowledged record:\n%@", (uint8_t *)&v17, 0x16u);
    }
    goto LABEL_16;
  }
LABEL_17:
}

void sub_10016EEE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v5 = [v3 error];

    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_10016CEC4();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Engine is returning a nil library version but no error. This is a bug", buf, 2u);
        }
      }
      uint64_t v7 = +[CPLErrors missingError];
      [v4 setError:v7];
    }
  }
  id v8 = [v4 error];

  id v9 = *(void **)(a1 + 32);
  if (v8)
  {
    [v9 endClientWork];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10016F100;
    v20[3] = &unk_100276210;
    long long v10 = *(void **)(a1 + 32);
    id v22 = *(id *)(a1 + 40);
    id v21 = v4;
    [v10 dispatchCallback:v20];

    uint64_t v11 = v22;
  }
  else
  {
    id v12 = [v9 abstractObject];
    id v13 = [v12 libraryManager];
    [v13 _setLibraryVersion:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

    *(unsigned char *)(*(void *)(a1 + 32) + 34) = 0;
    CFStringRef v14 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10016F160;
    v17[3] = &unk_10027E9E0;
    void v17[4] = v14;
    id v15 = *(id *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    id v18 = v15;
    uint64_t v19 = v16;
    [v14 dispatchCallback:v17];
    uint64_t v11 = v18;
  }
}

void sub_10016F100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_10016F160(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 130));
  [WeakRetained willRunEngineElement:CPLEngineElementPullSweetSpot];

  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_10016F3EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10016F450(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 98);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained dropUnacknowledgedBatch];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10016F558;
  v7[3] = &unk_10027D400;
  void v7[4] = *(void *)(a1 + 32);
  [v4 do:v7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10016F5C0;
  v6[3] = &unk_10027D400;
  void v6[4] = *(void *)(a1 + 32);
  [v4 do:v6];
}

id sub_10016F558(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 82) error:a2];

  return v5;
}

uint64_t sub_10016F5C0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  [WeakRetained assertNoUnacknowledgedChanges];

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 42);
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_10016CEC4();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 42);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v56 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client did not acknowledge %@. We will send it back the next time", buf, 0xCu);
      }

      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 42);
    }
    *(void *)(v4 + 42) = 0;

    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 50);
    *(void *)(v8 + 50) = 0;
  }
  if (!_CPLSilentLogging)
  {
    long long v10 = sub_10016CEC4();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Compacting pull queue", buf, 2u);
    }
  }
  id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 114));
  unsigned int v12 = [v11 compactChangeBatchesWithError:a2];

  if (!v12) {
    return 0;
  }
  id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 114));
  unsigned int v14 = [v13 isEmpty];

  if (!v14) {
    return 1;
  }
  if (!_CPLSilentLogging)
  {
    id v15 = sub_10016CEC4();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "No remaining changes in pull queue, comitting remaining records in cloud cache", buf, 2u);
    }
  }
  id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  int v17 = [v16 transientPullRepository];

  id v18 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  uint64_t v48 = [v18 cloudCache];

  id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98));
  id v46 = [v19 pushRepository];

  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v20 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106));
  id v21 = [v20 enumeratorForScopesIncludeInactive:0];

  id v22 = [v21 countByEnumeratingWithState:&v50 objects:v54 count:16];
  if (!v22)
  {
    LOBYTE(v26) = 1;
    goto LABEL_49;
  }
  id v24 = v22;
  uint64_t v25 = *(void *)v51;
  LOBYTE(v26) = 1;
  *(void *)&long long v23 = 138412290;
  long long v45 = v23;
  uint64_t v27 = a2;
  id v47 = v21;
  while (2)
  {
    for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v51 != v25) {
        objc_enumerationMutation(v21);
      }
      uint64_t v29 = *(void **)(*((void *)&v50 + 1) + 8 * i);
      id v30 = objc_msgSend(v29, "scopeIdentifier", v45);
      if (v26)
      {
        if (![v17 hasOnlyMingledRecordsWithScopeIdentifier:v30])
        {
LABEL_41:
          LOBYTE(v26) = [v17 deleteMingledRecordsForScopeWithIdentifier:v30 error:v27];
          goto LABEL_42;
        }
        id v31 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106));
        uint64_t v32 = [v31 transientSyncAnchorForScope:v29];

        if (v32)
        {
          if ([v46 hasChangesInScopeWithIdentifier:v30])
          {
            if (_CPLSilentLogging) {
              goto LABEL_40;
            }
            uint64_t v33 = sub_10016CEC4();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v34 = [v29 scopeIdentifier];
              *(_DWORD *)long long buf = v45;
              uint64_t v56 = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "No more changes for %@, but there are still changes to push to the transport", buf, 0xCu);
            }
LABEL_33:

            goto LABEL_40;
          }
          id v35 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106));
          unsigned int v36 = [v35 doesScopeNeedToPullChangesFromTransport:v29];

          if (v36)
          {
            uint64_t v27 = a2;
            if (_CPLSilentLogging) {
              goto LABEL_40;
            }
            uint64_t v33 = sub_10016CEC4();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              long long v37 = [v29 scopeIdentifier];
              *(_DWORD *)long long buf = v45;
              uint64_t v56 = v37;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "No more changes for %@, but there are still changes to pull from the transport", buf, 0xCu);

              uint64_t v27 = a2;
            }
            goto LABEL_33;
          }
          if (!_CPLSilentLogging)
          {
            uint64_t v38 = sub_10016CEC4();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v39 = [v29 scopeIdentifier];
              *(_DWORD *)long long buf = v45;
              uint64_t v56 = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "No more changes for %@, nothing to push or pull from/to transport - committing transient sync anchor", buf, 0xCu);
            }
          }
          id v40 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106));
          unsigned int v41 = [v40 setSyncAnchor:v32 forScope:v29 error:a2];

          if (!v41
            || (id v42 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106)),
                unsigned __int8 v43 = [v42 storeTransientSyncAnchor:0 forScope:v29 error:a2],
                v42,
                uint64_t v27 = a2,
                (v43 & 1) == 0))
          {

            LOBYTE(v26) = 0;
            id v21 = v47;
            goto LABEL_49;
          }
        }
LABEL_40:
        unsigned int v26 = [v48 commitStagedChangesForScopeWithIdentifier:v30 error:v27];

        id v21 = v47;
        if (!v26) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
LABEL_42:

      if ((v26 & 1) == 0) {
        goto LABEL_49;
      }
    }
    id v24 = [v21 countByEnumeratingWithState:&v50 objects:v54 count:16];
    if (v24) {
      continue;
    }
    break;
  }
LABEL_49:

  return v26 & 1;
}

void sub_10016FBD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) endClientWork];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10016FC90;
  v7[3] = &unk_100276210;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

void sub_10016FC90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10016FD40(id a1)
{
  id v1 = objc_alloc((Class)NSString);
  id v5 = +[NSProcessInfo processInfo];
  id v2 = [v5 processName];
  id v3 = [v1 initWithFormat:@"%@ unexpectedly quit during pull session", v2];
  uint64_t v4 = (void *)qword_1002DBCE8;
  qword_1002DBCE8 = (uint64_t)v3;
}

void sub_10016FED4(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "client.session.pull.direct");
  uint64_t v3 = qword_1002DBCF8;
  qword_1002DBCF8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1001700DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 33) && !*(unsigned char *)(v1 + 32))
  {
    +[CPLTransaction beginTransactionWithIdentifier:@"cpl.clientwork" description:@"client work" keepPower:1];
    uint64_t v3 = [*(id *)(a1 + 32) abstractObject];
    uint64_t v4 = [v3 libraryManager];
    id v5 = [v4 platformObject];
    id v6 = [v5 engineLibrary];
    uint64_t v7 = [v6 syncManager];
    id v8 = [*(id *)(a1 + 32) clientWorkDescription];
    [v7 beginClientWork:v8];

    *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  }
}

unsigned char *sub_1001704A4(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[32])
  {
    uint64_t v3 = [result abstractObject];
    uint64_t v4 = [v3 libraryManager];
    id v5 = [v4 platformObject];
    id v6 = [v5 engineLibrary];
    uint64_t v7 = [v6 syncManager];
    id v8 = [*(id *)(a1 + 32) clientWorkDescription];
    [v7 endClientWork:v8];

    uint64_t result = +[CPLTransaction endTransactionWithIdentifier:@"cpl.clientwork"];
    *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
  }
  return result;
}

void sub_100170738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unsigned char *sub_100170754(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[32])
  {
    uint64_t v3 = [result abstractObject];
    uint64_t v4 = [v3 libraryManager];
    id v5 = [v4 platformObject];
    id v6 = [v5 engineLibrary];
    uint64_t v7 = [v6 syncManager];
    id v8 = [*(id *)(a1 + 32) clientWorkDescription];
    [v7 endClientWork:v8];

    +[CPLTransaction endTransactionWithIdentifier:@"cpl.clientwork"];
    *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
    uint64_t result = *(unsigned char **)(a1 + 32);
  }
  if (!result[33])
  {
    result[33] = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_100170854(uint64_t a1)
{
  [*(id *)(a1 + 32) dropUnacknowledgedBatch];
  os_log_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

uint64_t sub_100170A14(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 33);
  return result;
}

void sub_100170A84(id a1)
{
  id v1 = objc_alloc((Class)NSString);
  id v5 = +[NSProcessInfo processInfo];
  os_log_t v2 = [v5 processName];
  id v3 = [v1 initWithFormat:@"%@ unexpectedly quit during generic session", v2];
  uint64_t v4 = (void *)qword_1002DBD08;
  qword_1002DBD08 = (uint64_t)v3;
}

void sub_100170C68(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100171058()
{
  if (qword_1002DBD20 != -1) {
    dispatch_once(&qword_1002DBD20, &stru_10027EC58);
  }
  uint64_t v0 = (void *)qword_1002DBD28;
  return v0;
}

void sub_1001710AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100171110(uint64_t a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001711F4;
  v9[3] = &unk_10027D898;
  uint64_t v4 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v11 = *(id *)(a1 + 48);
  [a2 do:v9];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  uint64_t v6 = [WeakRetained libraryVersion];
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 42);
  *(void *)(v7 + 42) = v6;
}

id sub_1001711F4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  id v5 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = [*(id *)(a1 + 48) resetTracker];
  LODWORD(v6) = [WeakRetained beginChangeSession:v5 withLibraryVersion:v6 resetTracker:v7 error:a2];

  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = objc_loadWeakRetained((id *)(v8 + 58));
  id v11 = [(id)v8 processSessionContext:v9 inStore:v10 error:a2];

  return v11;
}

void sub_1001712D0(uint64_t a1, void *a2)
{
  id v3 = [a2 error];
  if (!v3) {
    [*(id *)(a1 + 32) beginClientWork];
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100171394;
  v7[3] = &unk_100276210;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

uint64_t sub_100171394(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001715DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100171640(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100171720;
  v5[3] = &unk_10027D400;
  void v5[4] = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 do:v5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100171788;
  v4[3] = &unk_10027D400;
  void v4[4] = *(void *)(a1 + 32);
  [v3 do:v4];
}

id sub_100171720(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 42) error:a2];

  return v5;
}

uint64_t sub_100171788(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100171058();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(*(void *)(a1 + 32) + 34)) {
        id v3 = "some changes";
      }
      else {
        id v3 = "no changes";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Finalized push session and %s were pushed by the client", buf, 0xCu);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 34))
  {
    if (*(unsigned char *)(v4 + 35))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v4 + 50));
      id v6 = [WeakRetained syncManager];
      uint64_t v7 = [v6 lastError];
      unsigned int v8 = [v7 isCPLErrorWithCode:30];

      if (v8)
      {
        id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
        id v10 = [v9 scopes];

        id v11 = objc_alloc_init((Class)NSMutableArray);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v12 = *(id *)(*(void *)(a1 + 32) + 82);
        id v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v24;
          do
          {
            for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v24 != v15) {
                objc_enumerationMutation(v12);
              }
              uint64_t v17 = *(void *)(*((void *)&v23 + 1) + 8 * i);
              id v18 = objc_msgSend(v10, "scopeWithIdentifier:", v17, (void)v23);
              if (v18 && [v10 valueForFlag:2 forScope:v18]) {
                [v11 addObject:v17];
              }
            }
            id v14 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
          }
          while (v14);
        }

        if ([v11 count])
        {
          if (!_CPLSilentLogging)
          {
            id v19 = sub_100171058();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              id v20 = [v11 componentsJoinedByString:@", "];
              *(_DWORD *)long long buf = 138412290;
              uint64_t v29 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Resetting scheduler back-off to try to move %@ under quota", buf, 0xCu);
            }
          }
          id v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 74));
          [v21 resetBackoffInterval];
        }
      }
    }
  }
  return 1;
}

void sub_100171AA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) endClientWork];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100171B60;
  v7[3] = &unk_100276210;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchCallback:v7];
}

void sub_100171B60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100171F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100171F3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[CPLErrors libraryClosedError];
  (*(void (**)(uint64_t, id, void, void, void))(v1 + 16))(v1, v2, 0, 0, 0);
}

uint64_t sub_100171FAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100171FBC(uint64_t a1)
{
}

void sub_100171FC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100172508;
  void v40[3] = &unk_10027D400;
  uint64_t v4 = (id *)(a1 + 32);
  v40[4] = *(void *)(a1 + 32);
  [v3 do:v40];
  id v5 = [v3 error];

  if (v5) {
    goto LABEL_35;
  }
  id v6 = *(id *)(a1 + 40);
  if (CPLIsInTestReadonlyMode() && [v6 count])
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v7 = sub_100171058();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v42 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Automatically dropping batch in read-only mode: %@", buf, 0xCu);
      }
    }
    id v8 = objc_alloc_init((Class)CPLChangeBatch);

    id v6 = v8;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  [WeakRetained assertNoUnacknowledgedChanges];

  id v10 = objc_alloc((Class)CPLPushSessionTracker);
  id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  id v39 = 0;
  id v12 = [v10 initWithIncomingBatch:v6 store:v11 error:&v39];
  id v13 = v39;
  uint64_t v14 = a1 + 48;
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v12;

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v17 = +[NSDate date];
    [*(id *)(*(void *)(*(void *)v14 + 8) + 40) setNow:v17];
    id v18 = *(void **)(*(void *)(*(void *)v14 + 8) + 40);
    id v38 = 0;
    unsigned __int8 v19 = [v18 computeExpandedBatchWithError:&v38];
    id v20 = v38;
    if (v19)
    {
      if (!_CPLSilentLogging)
      {
        id v21 = sub_100171058();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          id v22 = [*(id *)(*(void *)(*(void *)v14 + 8) + 40) expandedBatch];
          *(_DWORD *)long long buf = 138412546;
          id v42 = v6;
          __int16 v43 = 2112;
          id v44 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Expanded batch from: \n%@\nis:\n%@", buf, 0x16u);
        }
      }
      if (([*(id *)(*(void *)(*(void *)v14 + 8) + 40) computeDiff] & 1) == 0) {
        sub_1001D0234(a1 + 48, a1, (uint64_t *)(a1 + 32));
      }
      if (!*((unsigned char *)*v4 + 35)) {
        *((unsigned char *)*v4 + 35) = [*(id *)(*(void *)(*(void *)v14 + 8) + 40) diffedBatchCanLowerQuota];
      }
      long long v23 = [*(id *)(*(void *)(*(void *)v14 + 8) + 40) diffedBatch];
    }
    else
    {
      [v3 setError:v20];
      long long v23 = 0;
    }
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      long long v24 = sub_100171058();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v42 = v13;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Client tried to push an invalid batch: %@", buf, 0xCu);
      }
    }
    [v3 setError:v13];
    long long v23 = 0;
  }
  long long v25 = [v3 error];
  if (v25)
  {
  }
  else if ([v23 count] {
         || ([*(id *)(*(void *)(*(void *)v14 + 8) + 40) revertedChanges],
  }
             uint64_t v28 = objc_claimAutoreleasedReturnValue(),
             id v29 = [v28 count],
             v28,
             v29))
  {
    v36[2] = _NSConcreteStackBlock;
    v36[3] = 3221225472;
    v36[4] = sub_100172570;
    v36[5] = &unk_10027EB50;
    uint64_t v30 = *(void *)(a1 + 48);
    v36[6] = *(void *)(a1 + 32);
    v36[7] = v30;
    long long v26 = &v37;
    uint64_t v27 = (uint64_t *)(a1 + 56);
    goto LABEL_32;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 42));
  uint64_t v32 = _NSConcreteStackBlock;
  uint64_t v33 = 3221225472;
  uint64_t v34 = sub_100172658;
  id v35 = &unk_10027EB78;
  v36[1] = *(void *)(a1 + 48);
  long long v26 = v36;
  uint64_t v27 = (uint64_t *)(a1 + 32);
LABEL_32:
  *long long v26 = *v27;
  objc_msgSend(v3, "do:", v32, v33, v34, v35);
  id v31 = [v3 error];

  if (!v31) {
    [*v4 registerTentativeResetReason];
  }

LABEL_35:
}

id sub_100172508(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
  id v5 = [WeakRetained applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:*(void *)(*(void *)(a1 + 32) + 42) error:a2];

  return v5;
}

uint64_t sub_100172570(void *a1, uint64_t a2)
{
  id v4 = [objc_alloc((Class)CPLPushSessionUpdate) initWithPushSessionTracker:*(void *)(*(void *)(a1[5] + 8) + 40) error:a2];
  if (v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 58));
    uint64_t v6 = (uint64_t)[WeakRetained storeChangeSessionUpdate:v4 error:a2];

    if (v6)
    {
      uint64_t v7 = [v4 libraryVersion];
      uint64_t v8 = *(void *)(a1[6] + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v6 = 1;
      *(unsigned char *)(a1[4] + 34) = 1;
      objc_storeStrong((id *)(a1[4] + 42), *(id *)(*(void *)(a1[6] + 8) + 40));
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id sub_100172658(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) notifyClientOfStatusChangesIfNecessaryWithError:a2];
  if (result)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 58));
    id v6 = [WeakRetained storeClientIsInSyncWithClientCacheWithError:a2];

    return v6;
  }
  return result;
}

void sub_1001726C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v5 = [v3 error];

    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_100171058();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Engine is returning a nil library version but no error. This is a bug", buf, 2u);
        }
      }
      uint64_t v7 = +[CPLErrors missingError];
      [v4 setError:v7];
    }
  }
  uint64_t v8 = [v4 error];

  if (v8)
  {
    [*(id *)(a1 + 32) endClientWork];
    id v9 = *(void **)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100172A74;
    v24[3] = &unk_1002768F8;
    id v10 = v4;
    uint64_t v28 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v25 = v10;
    uint64_t v26 = v11;
    id v27 = v12;
    [v9 dispatchCallback:v24];

    id v13 = v25;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v14 = sub_100171058();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 50));
          id v16 = [WeakRetained syncManager];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v34 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Cancelling upload for %@", buf, 0xCu);
        }
      }
      id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 50));
      id v18 = [v17 syncManager];
      [v18 cancelCurrentSyncSession];
    }
    unsigned __int8 v19 = [*(id *)(a1 + 32) abstractObject];
    id v20 = [v19 libraryManager];
    [v20 _setLibraryVersion:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

    id v21 = *(void **)(a1 + 32);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1001729E4;
    v29[3] = &unk_10027EBC8;
    void v29[4] = v21;
    id v22 = *(id *)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 64);
    id v30 = v22;
    uint64_t v31 = v23;
    uint64_t v32 = *(void *)(a1 + 48);
    [v21 dispatchCallback:v29];
    id v13 = v30;
  }
}

uint64_t sub_1001729E4(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 74));
  [WeakRetained willRunEngineElement:CPLEngineElementPushSweetSpot];

  uint64_t v3 = a1[5];
  id v4 = [*(id *)(*(void *)(a1[6] + 8) + 40) ignoredRecordCount];
  id v5 = *(uint64_t (**)(uint64_t, void, id, void, uint64_t))(v3 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1[7] + 8) + 40);
  return v5(v3, 0, v4, 0, v6);
}

void sub_100172A74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];
  unsigned int v3 = [v2 isCPLErrorWithCode:18];

  if (v3)
  {
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) pushChangeTasks];
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x3032000000;
    v13[3] = sub_100171FAC;
    void v13[4] = sub_100171FBC;
    id v14 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100172C08;
    v9[3] = &unk_10027EBF0;
    id v5 = objc_alloc_init((Class)NSMutableIndexSet);
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = v5;
    uint64_t v11 = v6;
    id v12 = v13;
    [v4 enumerateScopedTasksWithBlock:v9];

    _Block_object_dispose(v13, 8);
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, void *, void, void *, void))(v7 + 16))(v7, v8, 0, v4, 0);
}

void sub_100172BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100172C08(uint64_t a1, uint64_t a2)
{
  if (([*(id *)(a1 + 32) containsIndex:a2] & 1) == 0)
  {
    [*(id *)(a1 + 32) addIndex:a2];
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (!v4)
    {
      id v5 = [*(id *)(a1 + 40) abstractObject];
      uint64_t v6 = [v5 libraryManager];
      uint64_t v7 = [v6 platformObject];
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 50));
      uint64_t v9 = [v7 displayableNameForEngineLibrary:WeakRetained];
      uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    }
    id v12 = +[CPLPushChangeTasks descriptionForTaskType:a2];
    +[CPLResetTracker registerLikelyResetReason:@"rejected record pushed by %@ (%@)", v4, v12];
  }
}

void sub_100172DA4(id a1)
{
  id v1 = objc_alloc((Class)NSString);
  id v5 = +[NSProcessInfo processInfo];
  id v2 = [v5 processName];
  id v3 = [v1 initWithFormat:@"%@ unexpectedly quit during push session", v2];
  uint64_t v4 = (void *)qword_1002DBD18;
  qword_1002DBD18 = (uint64_t)v3;
}

void sub_100172EC8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "client.session.push.direct");
  uint64_t v3 = qword_1002DBD28;
  qword_1002DBD28 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_10017319C()
{
  if (qword_1002DBE48 != -1) {
    dispatch_once(&qword_1002DBE48, &stru_10027EF28);
  }
  uint64_t v0 = (void *)qword_1002DBE50;
  return v0;
}

void sub_1001732B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001732D0()
{
  if (qword_1002DBE60 != -1) {
    dispatch_once(&qword_1002DBE60, &stru_10027EF48);
  }
  uint64_t v0 = (void *)qword_1002DBE58;
  return v0;
}

void sub_100173324(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  if ([a3 containsIndex:a1[5]]
    && (a1[6] & (unint64_t)[v7 integerValue]) != 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_10017347C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if ((*(void *)(a1 + 40) & (unint64_t)[a2 integerValue]) != 0) {
    [*(id *)(a1 + 32) addIndexes:v5];
  }
}

id sub_100176038(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_100176060(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_100176088(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_1001760B0(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_1001760D8(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &stru_10027FEB8;
  }
}

id sub_1001760EC(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_100176114(id a1, id a2)
{
  id v2 = a2;
  return v2;
}

id sub_10017613C(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &off_100291F80;
  }
}

id sub_100176150(id a1, id a2)
{
  if (a2) {
    return a2;
  }
  else {
    return &off_100291F80;
  }
}

id sub_100176164(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = a2;
    uint64_t v4 = [v2 engineLibrary];
    id v5 = [v4 transport];
    uint64_t v6 = [v5 transportScopeForUpgradeFromScopeName:v3];
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

id sub_1001761EC(id a1, id a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2) {
    uint64_t v4 = (_UNKNOWN **)v2;
  }
  else {
    uint64_t v4 = &off_100291FB0;
  }

  return v4;
}

void sub_1001766CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_100176718(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) mainTable];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(v8 + 68);
  uint64_t v10 = [*(id *)(v8 + 60) scopeTypeVar];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"UPDATE %@ SET %@ = (%@ | %ld) WHERE %@ = %ld", v7, v9, v9, 0x10000, v10, a2];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [*(id *)(a1 + 32) changes];
  }
  else {
    *a3 = 1;
  }
}

id sub_100176804(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

void sub_10017694C(id a1, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  if (sqlite3_value_type(*a4) == 1)
  {
    int v6 = sqlite3_value_int(*a4);
    if (v6 < 0)
    {
      LODWORD(v7) = 7;
    }
    else
    {
      LODWORD(v7) = v6;
      if (v6 <= 7) {
        uint64_t v7 = *(void *)(pql_sqlite3_value_pointer() + 8 * v6);
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  sqlite3_result_int(a2, v7);
}

id sub_100177190(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100177230(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_1001774B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100177680(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100177C2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002DBD30 withOrderOfScopeTypes:&off_100294368 name:@"push-highpriority-to-transport"];
}

id sub_100177C4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100177FDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002DBD70 withOrderOfScopeTypes:&off_100294380 name:@"push-to-transport"];
}

id sub_100177FFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100178558(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002DBDB0 withOrderOfScopeTypes:&off_100294398 name:@"pull-from-transport"];
}

id sub_100178578(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100178B80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fillScopeTypeOrder:&unk_1002DBDF0 withOrderOfScopeTypes:&off_1002943B0 name:@"mingling"];
}

id sub_100178BA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100178F30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100179354(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_100179720(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

id sub_10017A38C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLEngineScope);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 60) valuesInSet:v3];

  id v6 = [v4 initWithPrequeliteDictionary:v5 base:*(void *)(*(void *)(a1 + 32) + 60)];
  return v6;
}

void sub_10017AC14(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  uint64_t v4 = qword_1002DBE30;
  qword_1002DBE30 = (uint64_t)v3;
  _objc_release_x1(v3, v4);
}

id sub_10017B5C8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) valueFromSet:a2 atIndex:0];
}

id sub_10017BA58(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 260) valuesInSet:a2];
  id v4 = objc_alloc_init((Class)CPLLibraryState);
  id v5 = [v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 68)];
  objc_msgSend(v4, "setDisabled:", ((unint64_t)objc_msgSend(v5, "integerValue") >> 3) & 1);

  id v6 = [v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 76)];
  [v4 setDisabledDate:v6];

  uint64_t v7 = [v3 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 84)];
  [v4 setDeleteDate:v7];

  return v4;
}

id sub_10017DC3C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pqStore];
  id v3 = [*(id *)(a1 + 32) mainTable];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 124) stagedSyncAnchorVar];
  id v5 = +[PQLFormatInjection formatInjection:@"(%@ IS NOT NULL)", v4];
  id v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v2 table:v3 hasRecordsMatchingQuery:v5]);

  return v6;
}

id sub_10017EDC4()
{
  if (qword_1002DBE70 != -1) {
    dispatch_once(&qword_1002DBE70, &stru_10027EF68);
  }
  uint64_t v0 = (void *)qword_1002DBE68;
  return v0;
}

void sub_100180750(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.scopestorage.pql");
  uint64_t v3 = qword_1002DBE50;
  qword_1002DBE50 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100180790(id a1)
{
  v20[0] = &off_100292088;
  id v1 = +[NSIndexSet indexSetWithIndex:1];
  v21[0] = v1;
  v20[1] = &off_1002920A0;
  uint64_t v9 = sub_100180898(2, v2, v3, v4, v5, v6, v7, v8, 3);
  v21[1] = v9;
  v20[2] = &off_1002920B8;
  id v17 = sub_100180898(4, v10, v11, v12, v13, v14, v15, v16, 5);
  v21[2] = v17;
  uint64_t v18 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:3];
  unsigned __int8 v19 = (void *)qword_1002DBE58;
  qword_1002DBE58 = v18;
}

id sub_100180898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = &a9;
  id v10 = objc_alloc_init((Class)NSMutableIndexSet);
  uint64_t v11 = v10;
  uint64_t v12 = a1;
  while (1)
  {
    [v10 addIndex:v12];
    uint64_t v13 = v15++;
    uint64_t v12 = *v13;
    if (!*v13) {
      break;
    }
    id v10 = v11;
  }
  return v11;
}

void sub_100180910(id a1)
{
  uint64_t v1 = +[PQLNameInjection nameWithString:@"scopeIndex"];
  uint64_t v2 = qword_1002DBE68;
  qword_1002DBE68 = v1;
  _objc_release_x1(v1, v2);
}

id sub_100181A74()
{
  if (qword_1002DBE78 != -1) {
    dispatch_once(&qword_1002DBE78, &stru_10027EF88);
  }
  uint64_t v0 = (void *)qword_1002DBE80;
  return v0;
}

void sub_10018235C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.101386451");
  uint64_t v3 = qword_1002DBE80;
  qword_1002DBE80 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001825C0()
{
  if (qword_1002DBE88 != -1) {
    dispatch_once(&qword_1002DBE88, &stru_10027EFD0);
  }
  uint64_t v0 = (void *)qword_1002DBE90;
  return v0;
}

void sub_100184244(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  objc_msgSend(v5, "additionalStatusForScopeWithIndex:baseRecordCount:", objc_msgSend(v6, "integerValue"), a3);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  id v7 = objc_alloc((Class)NSMutableString);
  uint64_t v8 = [*(id *)(a1 + 32) recordsDesignation];
  if (v12) {
    id v9 = [v7 initWithFormat:@"%lu %@ (%@)", a3, v8, v12];
  }
  else {
    id v9 = [v7 initWithFormat:@"%lu %@", a3, v8, v11];
  }
  id v10 = v9;
  [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:v6];
}

void sub_10018518C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.storage.pql");
  uint64_t v3 = qword_1002DBE90;
  qword_1002DBE90 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001854B8()
{
  if (qword_1002DBF80 != -1) {
    dispatch_once(&qword_1002DBF80, &stru_10027F018);
  }
  uint64_t v0 = (void *)qword_1002DBF88;
  return v0;
}

void *sub_100185684(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 16) == result[5] && *(double *)(v1 + 24) > 0.0)
  {
    *(void *)(v1 + 24) = 0;
    if (!_CPLSilentLogging)
    {
      os_log_t v2 = result;
      uint64_t v3 = sub_1001854B8();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = v2[4];
        int v5 = 138412290;
        uint64_t v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%@ stop showing sync indicator", (uint8_t *)&v5, 0xCu);
      }
    }
    return +[CPLSyncIndicator hideSyncIndicator];
  }
  return result;
}

id sub_1001859DC(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 8) count]) {
    [*(id *)(a1 + 32) _actuallyStartShowingIndicatorLocked];
  }
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  os_log_t v2 = *(void **)(a1 + 32);
  return [v2 _emitActivityStateLog];
}

id sub_100185B64(uint64_t a1)
{
  os_log_t v2 = (uint64_t *)(a1 + 32);
  if (![*(id *)(*(void *)(a1 + 32) + 8) countForObject:*(void *)(a1 + 40)]) {
    sub_1001D1458(a1, v2);
  }
  id result = [*(id *)(*(void *)(a1 + 32) + 8) countForObject:*(void *)(a1 + 40)];
  if (result)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _emitActivityStateLog];
    id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
    if (!result)
    {
      uint64_t v4 = (void *)*v2;
      return _[v4 _actuallyStopShowingIndicatorLocked];
    }
  }
  return result;
}

id sub_100185F08()
{
  if (qword_1002DBF90 != -1) {
    dispatch_once(&qword_1002DBF90, &stru_10027F038);
  }
  uint64_t v0 = (void *)qword_1002DBF98;
  return v0;
}

id sub_100186828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) setUserInfoObject:a3 forKey:a2];
}

void sub_100186D3C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.syncmanager.activity");
  uint64_t v3 = qword_1002DBF88;
  qword_1002DBF88 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100186D7C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100186DC8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.syncmanager.syncstate");
  uint64_t v3 = qword_1002DBF98;
  qword_1002DBF98 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100186E08(id a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    uint64_t v3 = v1 + 1;
    if ((unint64_t)(v1 + 1) > 0xD) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = qword_100251758[v1];
    }
    qword_1002DBEA0[v1] = v4;
    qword_1002DBF10[v1] = v2;
    v2 += v4;
    ++v1;
  }
  while (v3 != 13);
  qword_1002DBE98 = v2;
}

id sub_10018796C()
{
  if (qword_1002DBFB0 != -1) {
    dispatch_once(&qword_1002DBFB0, &stru_10027F228);
  }
  uint64_t v0 = (void *)qword_1002DBFB8;
  return v0;
}

id sub_100187C74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 32) executeRaw:@"CREATE TABLE IF NOT EXISTS globals (libraryVersion TEXT)"])
  {
    if ([v3 executeRaw:@"INSERT INTO globals values (NULL)"])
    {
      uint64_t v4 = [*(id *)(a1 + 32) abstractObject];
      int v5 = [v4 engineLibrary];
      id v6 = [v5 libraryOptions];

      id v7 = *(void **)(a1 + 32);
      uint64_t v8 = v7[22];
      id v9 = +[NSNumber numberWithUnsignedInteger:v6];
      id v10 = [v7 addGlobalVariable:v8 defaultValue:v9 error:0];

      if (!v10) {
        goto LABEL_42;
      }
      uint64_t v11 = [*(id *)(a1 + 32) abstractObject];
      id v12 = [v11 storages];

      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v13 = v12;
      id v14 = [v13 countByEnumeratingWithState:&v40 objects:v48 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v41;
        while (2)
        {
          for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            if ((objc_msgSend(v18, "shouldBeCreatedDynamically", (void)v40) & 1) == 0)
            {
              unsigned __int8 v19 = [v18 platformObject];
              if (([v19 createStorage] & 1) == 0)
              {
                if (!_CPLSilentLogging)
                {
                  uint64_t v34 = sub_10018796C();
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                  {
                    id v35 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
                    unsigned int v36 = [v35 localizedDescription];
                    *(_DWORD *)long long buf = 138412546;
                    long long v45 = v18;
                    __int16 v46 = 2112;
                    id v47 = v36;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Unable to initialize %@: %@", buf, 0x16u);
                  }
                }

                goto LABEL_40;
              }
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v40 objects:v48 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }

      id v20 = *(void **)(a1 + 32);
      id v21 = [v20 createNewLibraryVersion];
      LOBYTE(v20) = [v20 storeLibraryVersion:v21 withError:0];

      if ((v20 & 1) != 0
        && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 88) defaultValue:0 error:0]&& objc_msgSend(*(id *)(a1 + 32), "addGlobalVariable:defaultValue:error:", *(void *)(*(void *)(a1 + 32) + 96), 0, 0))
      {
        id v22 = *(void **)(a1 + 32);
        uint64_t v23 = v22[13];
        long long v24 = [v22 createNewClientCacheIdentifier];
        id v10 = [v22 addGlobalVariable:v23 defaultValue:v24 error:0];

        if (!v10) {
          goto LABEL_42;
        }
        if ([*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 112) defaultValue:0 error:0])
        {
          id v25 = *(void **)(a1 + 32);
          uint64_t v26 = v25[15];
          id v27 = +[NSDate date];
          id v10 = [v25 addGlobalVariable:v26 defaultValue:v27 error:0];

          if (!v10) {
            goto LABEL_42;
          }
          if ([*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 128) defaultValue:0 error:0]&& objc_msgSend(*(id *)(a1 + 32), "addGlobalVariable:defaultValue:error:", *(void *)(*(void *)(a1 + 32) + 136), 0, 0)&& objc_msgSend(*(id *)(a1 + 32), "addGlobalVariable:defaultValue:error:", *(void *)(*(void *)(a1 + 32) + 184), &off_100292118, 0)&& objc_msgSend(*(id *)(a1 + 32),
                               "addGlobalVariable:defaultValue:error:",
                               *(void *)(*(void *)(a1 + 32) + 192),
                               0,
                               0)
            && [*(id *)(a1 + 32) addGlobalVariable:*(void *)(*(void *)(a1 + 32) + 208) defaultValue:0 error:0]&& objc_msgSend(*(id *)(a1 + 32), "addGlobalVariable:defaultValue:error:", *(void *)(*(void *)(a1 + 32) + 216), &off_100292118, 0))
          {
            uint64_t v28 = [*(id *)(a1 + 32) abstractObject];
            id v29 = [v28 mainScopeIdentifier];

            if (!_CPLSilentLogging)
            {
              id v30 = sub_10018796C();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                long long v45 = v29;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Store is created with main scope identifier %@", buf, 0xCu);
              }
            }
            unsigned int v31 = objc_msgSend(*(id *)(a1 + 32), "addGlobalVariable:defaultValue:error:", *(void *)(*(void *)(a1 + 32) + 224), v29, 0, (void)v40);

            if (v31)
            {
              id v10 = [*(id *)(*(void *)(a1 + 32) + 32) setUserVersion:92];
              goto LABEL_42;
            }
          }
        }
      }
    }
  }
  else
  {
    if (_CPLSilentLogging)
    {
      id v10 = 0;
      goto LABEL_46;
    }
    uint64_t v13 = sub_10018796C();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
      uint64_t v33 = [v32 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      long long v45 = v33;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to create database globals table: %@", buf, 0xCu);
    }
LABEL_40:
  }
  id v10 = 0;
LABEL_42:
  if (!_CPLSilentLogging)
  {
    uint64_t v37 = sub_10018796C();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      id v38 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      long long v45 = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "End of %@ initialization", buf, 0xCu);
    }
  }
LABEL_46:

  return v10;
}

void sub_1001885EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100188618(uint64_t a1, void *a2, sqlite3_stmt *a3, unint64_t a4)
{
  id v7 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = sqlite3_sql(a3);
    id v10 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v9 length:strlen(v9) encoding:4 freeWhenDone:0];
    uint64_t v11 = [WeakRetained[45] objectForKeyedSubscript:v10];
    if (!v11)
    {
      uint64_t v11 = [[_CPLPrequeliteStatementStatistic alloc] initWithStatement:v10];
      id v12 = WeakRetained[45];
      uint64_t v13 = [(_CPLPrequeliteStatementStatistic *)v11 statement];
      [v12 setObject:v11 forKeyedSubscript:v13];
    }
    [(_CPLPrequeliteStatementStatistic *)v11 setCount:(char *)[(_CPLPrequeliteStatementStatistic *)v11 count] + 1];
    [(_CPLPrequeliteStatementStatistic *)v11 setResultsCount:(char *)[(_CPLPrequeliteStatementStatistic *)v11 resultsCount] + a4];
    unint64_t v14 = sqlite3_stmt_status(a3, 1, 1);
    if (sqlite3_stmt_readonly(a3))
    {
      if (a4 < 0xB)
      {
        if (a4 + 3 >= v14 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v15 = sub_10018895C();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }
      else
      {
        if (v14 < 2 * a4 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v15 = sub_10018895C();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
LABEL_24:

LABEL_25:
          goto LABEL_26;
        }
      }
      int v18 = 136315650;
      unsigned __int8 v19 = v9;
      __int16 v20 = 2048;
      unint64_t v21 = v14;
      __int16 v22 = 2048;
      unint64_t v23 = a4;
      uint64_t v16 = "'%s' performed %lu steps to return %lu rows";
    }
    else
    {
      unint64_t v17 = (unint64_t)[v7 changes];
      if (v17 < 0xB)
      {
        if (v17 + 3 >= v14 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v15 = sub_10018895C();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }
      else
      {
        if (v14 < 2 * v17 || _CPLSilentLogging) {
          goto LABEL_25;
        }
        id v15 = sub_10018895C();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
      }
      int v18 = 136315650;
      unsigned __int8 v19 = v9;
      __int16 v20 = 2048;
      unint64_t v21 = v14;
      __int16 v22 = 2048;
      unint64_t v23 = a4;
      uint64_t v16 = "'%s' performed %lu steps to perform %lu changes";
    }
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v18, 0x20u);
    goto LABEL_24;
  }
LABEL_26:
}

id sub_10018895C()
{
  if (qword_1002DBFC0 != -1) {
    dispatch_once(&qword_1002DBFC0, &stru_10027F248);
  }
  uint64_t v0 = (void *)qword_1002DBFC8;
  return v0;
}

uint64_t sub_1001889B0(int a1, void *a2, sqlite3_stmt *a3, void *a4)
{
  id v7 = a2;
  if (a1 == 2)
  {
    uint64_t v8 = sqlite3_sql(a3);
    id v9 = [objc_alloc((Class)NSString) initWithBytesNoCopy:v8 length:strlen(v8) encoding:4 freeWhenDone:0];
    id v10 = [v7[45] objectForKeyedSubscript:v9];
    if (!v10)
    {
      id v10 = [[_CPLPrequeliteStatementStatistic alloc] initWithStatement:v9];
      id v11 = v7[45];
      id v12 = [(_CPLPrequeliteStatementStatistic *)v10 statement];
      [v11 setObject:v10 forKeyedSubscript:v12];
    }
    [(_CPLPrequeliteStatementStatistic *)v10 setDurationInNanoSeconds:(char *)[(_CPLPrequeliteStatementStatistic *)v10 durationInNanoSeconds] + *a4];
  }
  return 0;
}

void sub_100188DF4()
{
}

void sub_100188E40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x100188E14);
  }
  _Unwind_Resume(a1);
}

void sub_100188E60(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x100188E6CLL);
}

id sub_100189444(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 32);
  if (result)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10018796C();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dropping clientCache now", v4, 2u);
      }

      id result = *(id *)(*(void *)(a1 + 32) + 32);
    }
    id result = [result execute:@"DROP TABLE clientCache"];
    if (result) {
      return [*(id *)(a1 + 32) startVacuumWithCompletionHandler:&stru_10027F120];
    }
  }
  return result;
}

id sub_10018B3A0(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _upgradeToVersion:*(void *)(a1 + 48)])
  {
    if (_CPLSilentLogging) {
      return 0;
    }
    uint64_t v2 = sub_10018796C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      unint64_t v17 = *(id **)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 48);
      id v15 = [v17[4] lastCPLError];
      uint64_t v8 = [v15 localizedDescription];
      *(_DWORD *)long long buf = 138412802;
      long long v43 = v17;
      __int16 v44 = 2048;
      uint64_t v45 = v18;
      __int16 v46 = 2112;
      id v47 = v8;
      uint64_t v16 = "Unable to upgrade %@ to version %lld: %@";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, v16, buf, 0x20u);

LABEL_27:
    }
LABEL_28:

    return 0;
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v2 = *(id *)(a1 + 40);
  id v3 = [v2 countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v39;
    while (2)
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v8 = [v7 platformObject];
        if ([v7 isAlive]
          && ([v8 upgradeStorageToVersion:*(void *)(a1 + 48)] & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            unsigned __int8 v19 = sub_10018796C();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *(void *)(a1 + 48);
              unint64_t v21 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
              __int16 v22 = [v21 localizedDescription];
              *(_DWORD *)long long buf = 138412802;
              long long v43 = (id *)v7;
              __int16 v44 = 2048;
              uint64_t v45 = v20;
              __int16 v46 = 2112;
              id v47 = v22;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Unable to upgrade %@ to version %lld: %@", buf, 0x20u);
            }
          }
          unint64_t v23 = *(void **)(a1 + 32);
          long long v24 = [v7 name];
          uint64_t v25 = *(void *)(a1 + 48);
          uint64_t v26 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
          id v27 = [v26 localizedDescription];
          [v23 recordUpgradeEvent:@"Failed to upgrade %@ to %lld: %@", v24, v25, v27];

          goto LABEL_27;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v38 objects:v48 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v9 = *(id **)(a1 + 32);
  if (v9[38])
  {
    id v10 = [v9[38] platformObject];
    unsigned int v11 = [v10 upgradeStorageToVersion:*(void *)(a1 + 48)];

    if (!v11)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v28 = sub_10018796C();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(a1 + 32);
          id v30 = *(id **)(v29 + 304);
          uint64_t v31 = *(void *)(a1 + 48);
          uint64_t v32 = [*(id *)(v29 + 32) lastCPLError];
          uint64_t v33 = [v32 localizedDescription];
          *(_DWORD *)long long buf = 138412802;
          long long v43 = v30;
          __int16 v44 = 2048;
          uint64_t v45 = v31;
          __int16 v46 = 2112;
          id v47 = v33;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Unable to upgrade %@ to version %lld: %@", buf, 0x20u);
        }
      }
      uint64_t v34 = *(id **)(a1 + 32);
      uint64_t v2 = [v34[38] name];
      uint64_t v35 = *(void *)(a1 + 48);
      unsigned int v36 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
      uint64_t v37 = [v36 localizedDescription];
      [v34 recordUpgradeEvent:@"Failed to upgrade %@ to %lld: %@", v2, v35, v37];

      goto LABEL_28;
    }
    id v9 = *(id **)(a1 + 32);
  }
  id result = [v9 _postUpgradeToVersion:*(void *)(a1 + 48)];
  if ((result & 1) == 0 && !_CPLSilentLogging)
  {
    uint64_t v2 = sub_10018796C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(id **)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 48);
      id v15 = [v13[4] lastCPLError];
      uint64_t v8 = [v15 localizedDescription];
      *(_DWORD *)long long buf = 138412802;
      long long v43 = v13;
      __int16 v44 = 2048;
      uint64_t v45 = v14;
      __int16 v46 = 2112;
      id v47 = v8;
      uint64_t v16 = "Unable to do post-upgrade %@ to version %lld: %@";
      goto LABEL_21;
    }
    goto LABEL_28;
  }
  return result;
}

void sub_10018CA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, id a20)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_10018CA8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  id v9 = a4;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v10 = objc_loadWeakRetained(&to);
  BOOL v11 = v10 == 0;

  if (v11)
  {
    if (!_CPLSilentLogging)
    {
      long long v38 = sub_10018796C();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Prequelite store is not referenced anymore", buf, 2u);
      }
    }
    long long v39 = +[NSAssertionHandler currentHandler];
    uint64_t v40 = *(void *)(a1 + 48);
    id v41 = objc_loadWeakRetained(&to);
    long long v42 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
    [v39 handleFailureInMethod:v40 object:v41 file:v42 lineNumber:1170 description:@"Prequelite store is not referenced anymore"];

    abort();
  }
  id v12 = [v9 domain];
  unsigned int v13 = [v12 isEqual:PQLSqliteErrorDomain];

  if (!v13) {
    goto LABEL_15;
  }
  id v14 = [v9 code];
  if (v14 <= 0x1Au && ((1 << (char)v14) & 0x5000800) != 0)
  {
    id v15 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v16 = +[NSDate date];
    [v15 setObject:v16 forKeyedSubscript:@"date"];

    unint64_t v17 = +[NSNumber numberWithInteger:v14];
    [v15 setObject:v17 forKeyedSubscript:@"SQLErrorCode"];

    uint64_t v18 = (id *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained(v18);
    uint64_t v20 = (sqlite3 *)[WeakRetained dbHandle];

    if (v20)
    {
      unint64_t v21 = sqlite3_errmsg(v20);
      if (v21)
      {
        id v22 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"corrupted database: %s", v21);
        [v15 setObject:v22 forKeyedSubscript:@"comment"];
      }
      unint64_t v23 = +[NSNumber numberWithInt:sqlite3_extended_errcode(v20)];
      [v15 setObject:v23 forKeyedSubscript:@"extendedSQLErrorCode"];
    }
    long long v24 = +[NSNumber numberWithInt:*__error()];
    [v15 setObject:v24 forKeyedSubscript:@"POSIXErrorCode"];

    id v25 = objc_loadWeakRetained(&to);
    uint64_t v26 = [v25 abstractObject];
    id v27 = [v26 engineLibrary];
    uint64_t v28 = [v27 systemMonitor];
    uint64_t v29 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v28 freeDiskSpaceSize]);
    [v15 setObject:v29 forKeyedSubscript:@"FreeDiskSpace"];

    if (!_CPLSilentLogging)
    {
      id v30 = sub_10018796C();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v45 = v15;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Database is corrupted. Extra information:\n%@", buf, 0xCu);
      }
    }
    id v31 = objc_loadWeakRetained(&to);
    [v31 _markLibraryAsCorruptedWithInfo:v15];

    id v32 = objc_loadWeakRetained(v18);
    uint64_t v33 = +[CPLErrors cplErrorWithCode:3 underlyingError:v9 userInfo:0 description:@"Library is corrupted"];
    [v32 setLastError:v33];

    uint64_t v34 = +[NSNotificationCenter defaultCenter];
    id v35 = objc_loadWeakRetained(&to);
    unsigned int v36 = [v35 abstractObject];
    uint64_t v37 = [v36 engineLibrary];
    [v34 postNotificationName:CPLLibraryMustBeWipedNotificationName object:v37];

LABEL_18:
    goto LABEL_19;
  }
  if ([v9 code] != (id)19)
  {
LABEL_15:
    if (!_CPLSilentLogging)
    {
      id v15 = sub_10018796C();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v45 = v8;
        __int16 v46 = 2112;
        id v47 = v9;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "SQL error executing %@: %@", buf, 0x16u);
      }
      goto LABEL_18;
    }
  }
LABEL_19:
  objc_destroyWeak(&to);
}

void sub_10018CFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_10018D45C(uint64_t a1)
{
  uint64_t v20 = 0;
  unint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  id v3 = *(os_unfair_lock_s **)(a1 + 32);
  id v4 = v3 + 6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  uint64_t v16 = sub_10018D76C;
  unint64_t v17 = &unk_100275F88;
  uint64_t v18 = v3;
  unsigned __int8 v19 = &v20;
  uint64_t v5 = v15;
  os_unfair_lock_lock(v4);
  v16((uint64_t)v5);
  os_unfair_lock_unlock(v4);

  id v6 = *(void **)(a1 + 32);
  if (v6[4] && !*((unsigned char *)v21 + 24))
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v25 = 0x3032000000;
    uint64_t v26 = sub_10018D788;
    id v27 = sub_10018D798;
    id v28 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10018D7A0;
    v12[3] = &unk_10027F198;
    id v13 = *(id *)(a1 + 48);
    p_long long buf = &buf;
    [v6 _performWithFlags:2 action:v12];
    BOOL v11 = *(void **)(*((void *)&buf + 1) + 40);
    if (v11) {
      objc_exception_throw(v11);
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10018796C();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Trying to perform %@ while the database is already closed", (uint8_t *)&buf, 0xCu);
      }
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = +[CPLErrors libraryClosedError];
    [v9 setError:v10];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  _Block_object_dispose(&v20, 8);
}

void sub_10018D700()
{
}

void sub_10018D738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  JUMPOUT(0x10018D764);
}

void sub_10018D744(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10018D764);
}

uint64_t sub_10018D76C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 28);
  return result;
}

uint64_t sub_10018D788(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10018D798(uint64_t a1)
{
}

BOOL sub_10018D7A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;

  return v4;
}

void sub_10018D7F4(void *a1, uint64_t a2)
{
  sub_1001D17BC(a1, a2, v2);
  JUMPOUT(0x10018D7CCLL);
}

void sub_10018D9A0(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  if (v3[4])
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v20 = 0x3032000000;
    unint64_t v21 = sub_10018D788;
    uint64_t v22 = sub_10018D798;
    id v23 = 0;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10018DC60;
    v15[3] = &unk_10027F1C0;
    id v17 = *(id *)(a1 + 56);
    p_long long buf = &buf;
    id v16 = *(id *)(a1 + 40);
    unsigned int v4 = [v3 _performWithFlags:10 action:v15];
    uint64_t v5 = *(void **)(*((void *)&buf + 1) + 40);
    if (v5) {
      objc_exception_throw(v5);
    }
    uint64_t v6 = *(void *)(a1 + 48);
    if (v4)
    {
      (*(void (**)(void, void))(v6 + 16))(*(void *)(a1 + 48), 0);
    }
    else
    {
      id v13 = [*(id *)(a1 + 40) error];
      id v14 = v13;
      if (!v13)
      {
        id v14 = [*(id *)(*(void *)(a1 + 32) + 32) lastCPLError];
      }
      (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v14);
      if (!v13) {
    }
      }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10018796C();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Trying to perform %@ while the database is already closed", (uint8_t *)&buf, 0xCu);
      }
    }
    id v9 = *(void **)(a1 + 40);
    id v10 = +[CPLErrors libraryClosedError];
    [v9 setError:v10];

    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = [*(id *)(a1 + 40) error];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
  }
}

void sub_10018DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10018DC60(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  unsigned int v4 = [*(id *)(a1 + 32) error];
  if (v4) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) == 0;
  }

  return v5;
}

void sub_10018DCD0(void *a1, uint64_t a2)
{
  sub_1001D180C(a1, a2, v2);
  JUMPOUT(0x10018DC8CLL);
}

void sub_10018DDFC(uint64_t a1)
{
  uint64_t v2 = [[CPLPrequeliteWriteTransactionBlocker alloc] initWithBypassQueue:*(void *)(*(void *)(a1 + 32) + 8) blockedQueue:*(void *)(*(void *)(a1 + 32) + 16)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10018DFE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10018E7F8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) valueFromSet:a2 atIndex:0];
}

void sub_10018EEA8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 248) = 1;
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = sub_10018796C();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Client is now in sync with client cache", v2, 2u);
    }
  }
}

void sub_10018F034(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 248) = 0;
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = sub_10018796C();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Client is not in sync with client cache any more", v2, 2u);
    }
  }
}

uint64_t sub_10018F170(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 248);
  return result;
}

void sub_100190FF8(void *a1)
{
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v2 = a1[5];
  uint64_t v18 = v2;
  if (v2 > 0)
  {
    id v3 = &v18;
    do
    {
      if (v2 >= 10485760) {
        uint64_t v4 = 10485760;
      }
      else {
        uint64_t v4 = v2;
      }
      *id v3 = v2 - v4;
      uint64_t v5 = a1[4];
      uint64_t v6 = *(NSObject **)(v5 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001911D4;
      block[3] = &unk_100277E38;
      void block[5] = &v15;
      void block[6] = v4;
      void block[4] = v5;
      dispatch_sync(v6, block);
      id v3 = v16 + 3;
      uint64_t v2 = v16[3];
    }
    while (v2 > 0);
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void **)(v7 + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100191290;
  v13[3] = &unk_100275EC8;
  uint64_t v9 = a1[6];
  void v13[4] = v7;
  void v13[5] = v9;
  id v10 = v13;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100192E24;
  v19[3] = &unk_100275DF8;
  id v20 = v10;
  uint64_t v11 = v8;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, v19);
  dispatch_async(v11, v12);

  _Block_object_dispose(&v15, 8);
}

void sub_1001911D4(void *a1)
{
  uint64_t v1 = a1[4];
  if (*(unsigned char *)(v1 + 328))
  {
    id v3 = *(void **)(v1 + 32);
    if (!v3 || ([v3 incrementalVacuum:a1[6]] & 1) == 0) {
      *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
    }
  }
  else if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10018796C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Vacuum has been interrupted", v5, 2u);
    }
  }
}

id sub_100191290(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    id v3 = [(id)v2 _sizeInBytes];
    if ((uint64_t)v3 < *(void *)(a1 + 40) && _CPLSilentLogging == 0)
    {
      id v5 = v3;
      uint64_t v6 = sub_10018796C();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = +[NSByteCountFormatter stringFromByteCount:*(void *)(a1 + 40) - (void)v5 countStyle:0];
        *(_DWORD *)long long buf = 138412290;
        id v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reclaimed %@ after vacuum", buf, 0xCu);
      }
    }
    uint64_t v8 = +[CPLPrequeliteTable tableWithName:@"initialQueryTracker"];
    if ([*(id *)(a1 + 32) hasTable:v8])
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v9 = sub_10018796C();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [v8 tableName];
          *(_DWORD *)long long buf = 138543362;
          id v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dropping %{public}@", buf, 0xCu);
        }
      }
      if (([*(id *)(*(void *)(a1 + 32) + 32) cplExecute:@"DROP TABLE %@", v8] & 1) == 0
        && !_CPLSilentLogging)
      {
        uint64_t v11 = sub_10018796C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          dispatch_block_t v12 = [v8 tableName];
          id v13 = [*(id *)(*(void *)(a1 + 32) + 32) lastError];
          *(_DWORD *)long long buf = 138543618;
          id v16 = v12;
          __int16 v17 = 2112;
          uint64_t v18 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to drop %{public}@: %@", buf, 0x16u);
        }
      }
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v2 + 328) = 0;
  return [*(id *)(a1 + 32) _notifyVacuumDidComplete];
}

id sub_100191620(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 336);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 336);
    *(void *)(v4 + 336) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 336);
  }
  id v6 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 addObject:v6];

  id result = *(id *)(a1 + 32);
  if (*((void *)result + 4))
  {
    if (*((unsigned char *)result + 328)) {
      return result;
    }
    uint64_t v8 = (uint64_t)[*((id *)result + 4) autovacuumableSpaceInBytes];
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10018796C();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = +[NSByteCountFormatter stringFromByteCount:v9 countStyle:0];
          int v12 = 138412290;
          id v13 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Starting vacuum for %@", (uint8_t *)&v12, 0xCu);
        }
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 328) = 1;
      return objc_msgSend(*(id *)(a1 + 32), "_vacuum:withInitialDatabaseSize:", v9, objc_msgSend(*(id *)(a1 + 32), "_sizeInBytes"));
    }
    id result = *(id *)(a1 + 32);
  }
  return [result _notifyVacuumDidComplete];
}

uint64_t sub_1001918F0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 328) = 0;
  return result;
}

void sub_100191B98(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100191BE4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 28)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 0;
  }
  else {
    *(unsigned char *)(v1 + 28) = 1;
  }
  return result;
}

uint64_t sub_100191C14(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24))
  {
    uint64_t v3 = result;
    if (!_CPLSilentLogging)
    {
      uint64_t v1 = sub_10018796C();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      {
        uint64_t v2 = *(void *)(v3 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v5 = v2;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Emergency close of %@ timed out. Exiting now", buf, 0xCu);
      }
    }
    exit(0);
  }
  return result;
}

void sub_100191CE8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10018796C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suspending queue for %@", buf, 0xCu);
    }
  }
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  [*(id *)(a1 + 32) closeWithError:0];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100191E28;
  block[3] = &unk_100275F60;
  uint64_t v4 = *(NSObject **)(a1 + 40);
  void block[4] = *(void *)(a1 + 48);
  dispatch_sync(v4, block);
}

uint64_t sub_100191E28(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_100191F34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v9[0] = @"date";
  uint64_t v3 = +[NSDate date];
  v9[1] = @"comment";
  v10[0] = v3;
  v10[1] = @"manually marked as corrupted";
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
  [v2 _markLibraryAsCorruptedWithInfo:v4];

  uint64_t v5 = +[NSNotificationCenter defaultCenter];
  uint64_t v6 = CPLLibraryMustBeWipedNotificationName;
  uint64_t v7 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v8 = [v7 engineLibrary];
  [v5 postNotificationName:v6 object:v8];
}

void sub_100192A88(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10018796C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unblocking write queue", v3, 2u);
    }
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_100192D08(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.pql");
  uint64_t v3 = qword_1002DBFB8;
  qword_1002DBFB8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100192D48(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.pql.statistics");
  uint64_t v3 = qword_1002DBFC8;
  qword_1002DBFC8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_100192D88(id a1)
{
  v3[0] = @"wiping database because the current version is really too old";
  v3[1] = @"wiping database because the current version is too new";
  v4[0] = @"Local Synchronization state is really too old and needs to be wiped and rebuilt";
  v4[1] = @"Framework version has been downgraded and the local Synchronization state needs to be rebuilt from scratch to match what's on the server";
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
  os_log_t v2 = (void *)qword_1002DBFD0;
  qword_1002DBFD0 = v1;
}

void sub_100192E24(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10019316C()
{
  if (qword_1002DBFE0 != -1) {
    dispatch_once(&qword_1002DBFE0, &stru_10027F318);
  }
  uint64_t v0 = (void *)qword_1002DBFE8;
  return v0;
}

void sub_100194468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100194480(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100194490(uint64_t a1)
{
}

void sub_100194498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = [*(id *)(a1 + 32) countOfOriginalImages];
    if (v7)
    {
      id v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%lu images", v7);
      [v6 addObject:v8];
    }
    id v9 = [*(id *)(a1 + 32) countOfOriginalVideos];
    if (v9)
    {
      id v10 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%lu videos", v9);
      [v6 addObject:v10];
    }
    id v11 = [*(id *)(a1 + 32) countOfOriginalOthers];
    if (v11)
    {
      id v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%lu others", v11);
      [v6 addObject:v12];
    }
    if ([v6 count])
    {
      id v13 = objc_alloc((Class)NSString);
      id v14 = [v6 componentsJoinedByString:@", "];
      uint64_t v15 = (__CFString *)[v13 initWithFormat:@" (%@)", v14];
    }
    else
    {
      uint64_t v15 = &stru_10027FEB8;
    }
  }
  else
  {
    uint64_t v15 = &stru_10027FEB8;
  }
  id v16 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v16)
  {
    __int16 v17 = +[CPLResource shortDescriptionForResourceType:a2];
    [v16 appendFormat:@"\n\t%@: %ld%@", v17, a3, v15];
  }
  else
  {
    v23.receiver = *(id *)(a1 + 32);
    v23.super_class = (Class)CPLPrequeliteOutgoingResources;
    uint64_t v18 = objc_msgSendSuper2(&v23, "status");
    unsigned __int8 v19 = +[CPLResource shortDescriptionForResourceType:a2];
    uint64_t v20 = +[NSMutableString stringWithFormat:@"%@\n\t%@: %ld%@", v18, v19, a3, v15];
    uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;
  }
}

NSString *__cdecl sub_100194738(id a1, NSNumber *a2)
{
  NSUInteger v2 = [(NSNumber *)a2 unsignedIntegerValue];
  return (NSString *)+[CPLResource shortDescriptionForResourceType:v2];
}

void sub_100194A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100194AA4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) mainTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_100194B30(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.outgoingResources.pql");
  uint64_t v3 = qword_1002DBFE8;
  qword_1002DBFE8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001958F0()
{
  if (qword_1002DBFF0 != -1) {
    dispatch_once(&qword_1002DBFF0, &stru_10027F560);
  }
  uint64_t v0 = (void *)qword_1002DBFF8;
  return v0;
}

id sub_100195A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(unsigned char **)(a1 + 32) = [v3 intAtIndex:1] == 0;
  uint64_t v4 = [v3 stringAtIndex:0];

  return v4;
}

id sub_100197074(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:1];
  id v5 = v4;
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (v6)
  {
    id v12 = [v3 cplChangeAtIndex:2];
    if (v12)
    {
      id v8 = v12;
      [v12 setScopedIdentifier:*(void *)(a1 + 32)];
      id v13 = [v3 stringAtIndex:7];
      [v8 setRelatedIdentifier:v13];

      id v10 = [v3 stringAtIndex:8];
      [v8 setSecondaryIdentifier:v10];
      uint64_t v11 = 9;
      goto LABEL_9;
    }
LABEL_12:
    id v8 = +[NSNull null];
    goto LABEL_16;
  }
  id v7 = [v3 cplChangeAtIndex:3];
  if (!v7) {
    goto LABEL_12;
  }
  id v8 = v7;
  [v7 setScopedIdentifier:*(void *)(a1 + 32)];
  id v9 = [v3 stringAtIndex:4];
  [v8 setRelatedIdentifier:v9];

  id v10 = [v3 stringAtIndex:5];
  [v8 setSecondaryIdentifier:v10];
  uint64_t v11 = 6;
LABEL_9:

  objc_msgSend(*(id *)(a1 + 40), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v8, objc_msgSend(v3, "integerAtIndex:", v11));
  id v14 = *(unsigned __int8 **)(a1 + 48);
  if (v14)
  {
    if (v5)
    {
      unsigned __int8 v15 = [v3 BOOLAtIndex:10];
      id v14 = *(unsigned __int8 **)(a1 + 48);
    }
    else
    {
      unsigned __int8 v15 = 1;
    }
    *id v14 = v15;
  }
  [v8 awakeFromStorage];
LABEL_16:

  return v8;
}

id sub_10019739C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:1];
  id v5 = *(unsigned char **)(a1 + 48);
  if (v4)
  {
    *id v5 = 0;
    BOOL v6 = [v3 cplChangeAtIndex:3];
    if (v6)
    {
      id v7 = v6;
      [v6 setScopedIdentifier:*(void *)(a1 + 32)];
      **(unsigned char **)(a1 + 56) = [v3 BOOLAtIndex:10];
      id v8 = [v3 stringAtIndex:4];
      [v7 setRelatedIdentifier:v8];

      id v9 = [v3 stringAtIndex:5];
      [v7 setSecondaryIdentifier:v9];
      uint64_t v10 = 6;
LABEL_6:

      objc_msgSend(*(id *)(a1 + 40), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v7, objc_msgSend(v3, "integerAtIndex:", v10));
      [v7 awakeFromStorage];
      goto LABEL_8;
    }
  }
  else
  {
    *id v5 = 1;
    uint64_t v11 = [v3 cplChangeAtIndex:2];
    if (v11)
    {
      id v7 = v11;
      [v11 setScopedIdentifier:*(void *)(a1 + 32)];
      **(unsigned char **)(a1 + 56) = 1;
      id v12 = [v3 stringAtIndex:7];
      [v7 setRelatedIdentifier:v12];

      id v9 = [v3 stringAtIndex:8];
      [v7 setSecondaryIdentifier:v9];
      uint64_t v10 = 9;
      goto LABEL_6;
    }
  }
  **(unsigned char **)(a1 + 56) = 0;
  id v7 = +[NSNull null];
LABEL_8:

  return v7;
}

id sub_100197800(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72) | [v3 intAtIndex:1];
  BOOL v5 = v4 != 0;
  if (v4) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 2;
  }
  id v7 = [v3 cplChangeAtIndex:v6];
  if (*(void *)(a1 + 56) && (objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_18;
  }
  if (!v7)
  {
LABEL_18:
    id v7 = +[NSNull null];
    goto LABEL_28;
  }
  if (v5) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 7;
  }
  uint64_t v9 = [v3 stringAtIndex:v8];
  uint64_t v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 32);
  if (v9) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (!(v9 | v11))
    {
LABEL_20:
      id v13 = [v3 stringAtIndex:0];
      id v14 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(a1 + 40) identifier:v13];
      [v14 setScopeIndex:*(void *)(a1 + 64)];
      [v7 setScopedIdentifier:v14];
      [v7 setRelatedIdentifier:v10];
      if (v5) {
        uint64_t v15 = 5;
      }
      else {
        uint64_t v15 = 8;
      }
      if (v5) {
        uint64_t v16 = 6;
      }
      else {
        uint64_t v16 = 9;
      }
      __int16 v17 = [v3 stringAtIndex:v15];
      [v7 setSecondaryIdentifier:v17];

      objc_msgSend(*(id *)(a1 + 48), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v7, objc_msgSend(v3, "integerAtIndex:", v16));
      [v7 awakeFromStorage];

      goto LABEL_27;
    }
  }
  else if (objc_msgSend((id)v9, "isEqual:"))
  {
    goto LABEL_20;
  }
  +[NSNull null];
  id v7 = v13 = v7;
LABEL_27:

LABEL_28:
  return v7;
}

id sub_100197BB0(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  unsigned int v4 = [(PQLResultSet *)v3 stringAtIndex:1];
  if (!v4)
  {
    unsigned int v4 = [(PQLResultSet *)v3 stringAtIndex:0];
    if (!v4)
    {
      unsigned int v4 = +[NSNull null];
    }
  }

  return v4;
}

id sub_100198004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 integerAtIndex:5] == *(id *)(a1 + 48)
    && ([v3 cplChangeAtIndex:1], (unsigned int v4 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    BOOL v5 = v4;
    [v4 setScopedIdentifier:*(void *)(a1 + 32)];
    uint64_t v6 = [v3 stringAtIndex:2];
    [v5 setRelatedIdentifier:v6];

    id v7 = [v3 stringAtIndex:3];
    [v5 setSecondaryIdentifier:v7];

    [v5 awakeFromStorage];
    objc_msgSend(*(id *)(a1 + 40), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v5, objc_msgSend(v3, "integerAtIndex:", 4));
  }
  else
  {
    BOOL v5 = +[NSNull null];
  }

  return v5;
}

id sub_1001984DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 integerAtIndex:5] == *(id *)(a1 + 48))
  {
    unsigned int v4 = [v3 cplChangeAtIndex:1];
    if (*(void *)(a1 + 56) && (objc_opt_isKindOfClass() & 1) == 0)
    {
    }
    else if (v4)
    {
      BOOL v5 = [v3 stringAtIndex:0];
      id v6 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(a1 + 32) identifier:v5];
      [v6 setScopeIndex:*(void *)(a1 + 64)];
      [v4 setScopedIdentifier:v6];
      id v7 = [v3 stringAtIndex:2];
      [v4 setRelatedIdentifier:v7];

      uint64_t v8 = [v3 stringAtIndex:3];
      [v4 setSecondaryIdentifier:v8];

      [v4 awakeFromStorage];
      objc_msgSend(*(id *)(a1 + 40), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v4, objc_msgSend(v3, "integerAtIndex:", 4));

      goto LABEL_8;
    }
  }
  unsigned int v4 = +[NSNull null];
LABEL_8:

  return v4;
}

id sub_100199438(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (*(unsigned __int8 *)(a1 + 40) | [v3 intAtIndex:1]) == 0;
  BOOL v5 = v4;
  if (v4) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = 3;
  }
  uint64_t v7 = [v3 cplChangeAtIndex:v6];
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = [v3 stringAtIndex:0];
    uint64_t v11 = objc_msgSend(v9, "scopedIdentifierForCloudIdentifier:scopeIndex:", v10, objc_msgSend(v3, "integerAtIndex:", 10));

    if (v11)
    {
      [v8 setScopedIdentifier:v11];
      if (v5) {
        uint64_t v12 = 7;
      }
      else {
        uint64_t v12 = 4;
      }
      if (v5) {
        uint64_t v13 = 8;
      }
      else {
        uint64_t v13 = 5;
      }
      if (v5) {
        uint64_t v14 = 9;
      }
      else {
        uint64_t v14 = 6;
      }
      uint64_t v15 = [v3 stringAtIndex:v12];
      [v8 setRelatedIdentifier:v15];

      uint64_t v16 = [v3 stringAtIndex:v13];
      [v8 setSecondaryIdentifier:v16];

      objc_msgSend(*(id *)(a1 + 32), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v8, objc_msgSend(v3, "integerAtIndex:", v14));
      [v8 awakeFromStorage];
    }
    else
    {
      uint64_t v17 = +[NSNull null];

      uint64_t v8 = (void *)v17;
    }
  }
  else
  {
    uint64_t v8 = +[NSNull null];
  }

  return v8;
}

id sub_1001997B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (*(unsigned __int8 *)(a1 + 40) | [v3 intAtIndex:1]) == 0;
  BOOL v5 = v4;
  if (v4) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = 3;
  }
  uint64_t v7 = [v3 cplChangeAtIndex:v6];
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = [v3 stringAtIndex:0];
    uint64_t v11 = objc_msgSend(v9, "scopedIdentifierForCloudIdentifier:scopeIndex:", v10, objc_msgSend(v3, "integerAtIndex:", 10));

    if (v11)
    {
      [v8 setScopedIdentifier:v11];
      if (v5) {
        uint64_t v12 = 7;
      }
      else {
        uint64_t v12 = 4;
      }
      if (v5) {
        uint64_t v13 = 8;
      }
      else {
        uint64_t v13 = 5;
      }
      if (v5) {
        uint64_t v14 = 9;
      }
      else {
        uint64_t v14 = 6;
      }
      uint64_t v15 = [v3 stringAtIndex:v12];
      [v8 setRelatedIdentifier:v15];

      uint64_t v16 = [v3 stringAtIndex:v13];
      [v8 setSecondaryIdentifier:v16];

      objc_msgSend(*(id *)(a1 + 32), "_updateOtherScopeIdentifierInRecord:otherScopeIndex:", v8, objc_msgSend(v3, "integerAtIndex:", v14));
      [v8 awakeFromStorage];
    }
    else
    {
      uint64_t v17 = +[NSNull null];

      uint64_t v8 = (void *)v17;
    }
  }
  else
  {
    uint64_t v8 = +[NSNull null];
  }

  return v8;
}

void sub_100199BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100199BF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5
    || (v8 = v5, v6 = (uint64_t)[v5 integerValue], id v5 = v8, v6 < 1)
    || (objc_msgSend(*(id *)(a1 + 32), "scopeWithLocalScopeIndex:"),
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        id v5 = v8,
        !v7))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a3;
  }
}

void sub_100199E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100199E58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100199E68(uint64_t a1)
{
}

void sub_100199E70(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  if (v5) {
    CFStringRef v6 = v5;
  }
  else {
    CFStringRef v6 = @"(nil)";
  }
  uint64_t v7 = (__CFString *)v6;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendFormat:@"\n\t%@: %ld", v6, a3];
}

void sub_10019A044(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  if (!v5) {
    CFStringRef v5 = @"(nil)";
  }
  id v8 = (__CFString *)v5;
  CFStringRef v6 = *(void **)(a1 + 32);
  uint64_t v7 = +[NSNumber numberWithUnsignedInteger:a3];
  [v6 setObject:v7 forKey:v8];
}

NSString *__cdecl sub_10019A284(id a1, NSString *a2)
{
  os_log_t v2 = a2;
  return v2;
}

id sub_10019A37C(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = a2;
  BOOL v4 = [(PQLResultSet *)v3 stringAtIndex:1];
  if (!v4)
  {
    BOOL v4 = [(PQLResultSet *)v3 stringAtIndex:0];
    if (!v4)
    {
      BOOL v4 = +[NSNull null];
    }
  }

  return v4;
}

void sub_10019A914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10019A93C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) cplExecute:@"UPDATE %@ SET otherScopeIndex = 0, stagedOtherScopeIndex = 0 WHERE rowID = %lu", *(void *)(a1 + 40), a2];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v5 = [*(id *)(a1 + 32) lastError];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    *a3 = 1;
  }
}

void sub_10019A9D8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.cloudcache.pql");
  uint64_t v3 = qword_1002DBFF8;
  qword_1002DBFF8 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

uint64_t sub_10019AAB8(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"INTEGER" defaultValue:&off_100292148 objcClass:objc_opt_class()];
  uint64_t v2 = qword_1002DC000;
  qword_1002DC000 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

uint64_t sub_10019ABC4(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"DATA" defaultValue:0 objcClass:objc_opt_class()];
  uint64_t v2 = qword_1002DC010;
  qword_1002DC010 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

uint64_t sub_10019ACCC(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initWithTypeName:"TEXT" defaultValue:0 objcClass:objc_opt_class()];
  uint64_t v2 = qword_1002DC020;
  qword_1002DC020 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

void sub_10019AD88(id a1)
{
  id v1 = objc_alloc_init(_CPLPrequeliteDateType);
  uint64_t v2 = qword_1002DC030;
  qword_1002DC030 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

uint64_t sub_10019D6C4(sqlite3_context *a1)
{
  id v1 = (uint64_t (*)(void))*((void *)sqlite3_user_data(a1) + 2);
  return v1();
}

void sub_10019D738(id a1, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  if (sqlite3_value_type(*a4) == 1)
  {
    sqlite3_int64 v6 = sqlite3_value_int64(*a4);
    pql_sqlite3_value_object();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    sqlite3_result_int(a2, (int)[v7 containsIndex:v6]);
  }
  else
  {
    sqlite3_result_int(a2, 0);
  }
}

id sub_10019E37C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 stringAtIndex:0];
  unsigned int v5 = [v3 intAtIndex:1];

  **(unsigned char **)(a1 + 40) = v5 == 1;
  id v6 = objc_alloc((Class)CPLScopedIdentifier);
  id v7 = [*(id *)(a1 + 32) scopeIdentifier];
  id v8 = [v6 initWithScopeIdentifier:v7 identifier:v4];

  return v8;
}

id sub_10019E5FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 stringAtIndex:0];
  unsigned int v5 = [v3 intAtIndex:1];

  **(unsigned char **)(a1 + 40) = v5 == 1;
  id v6 = objc_alloc((Class)CPLScopedIdentifier);
  id v7 = [*(id *)(a1 + 32) scopeIdentifier];
  id v8 = [v6 initWithScopeIdentifier:v7 identifier:v4];

  return v8;
}

id sub_10019EB80()
{
  if (qword_1002DC048 != -1) {
    dispatch_once(&qword_1002DC048, &stru_10027F5E8);
  }
  uint64_t v0 = (void *)qword_1002DC050;
  return v0;
}

void sub_10019F9F4(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.idmapping.pql");
  uint64_t v3 = qword_1002DC050;
  qword_1002DC050 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_10019FCA8()
{
  if (qword_1002DC058 != -1) {
    dispatch_once(&qword_1002DC058, &stru_10027F650);
  }
  uint64_t v0 = (void *)qword_1002DC060;
  return v0;
}

id sub_1001A1B4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[CPLPrequeliteDownloadResource alloc] initFromPQLResultSet:v3 error:0];

  unsigned int v5 = [v4 resourceWithDownloadQueue:*(void *)(a1 + 32)];
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = +[NSNull null];
  }
  id v8 = v7;

  return v8;
}

void sub_1001A1F3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A1F70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A1F80(uint64_t a1)
{
}

void sub_1001A1F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v7 = +[CPLResource shortDescriptionForResourceType:a2];
  id v8 = (id)v7;
  if (v5)
  {
    [v6 appendFormat:@":\n\t%@: %ld", v7, a3];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    [v6 appendFormat:@"\n\t%@: %ld", v7, a3];
  }
}

NSString *__cdecl sub_1001A20AC(id a1, NSNumber *a2)
{
  NSUInteger v2 = [(NSNumber *)a2 unsignedIntegerValue];
  return (NSString *)+[CPLResource shortDescriptionForResourceType:v2];
}

void sub_1001A2214(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.downloadQueue.pql");
  uint64_t v3 = qword_1002DC060;
  qword_1002DC060 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001A2DC8()
{
  if (qword_1002DC068 != -1) {
    dispatch_once(&qword_1002DC068, &stru_10027F700);
  }
  uint64_t v0 = (void *)qword_1002DC070;
  return v0;
}

id sub_1001A32D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = [v3 cplChangeAtIndex:1];
    [v4 setScopeIndex:0];
  }
  else
  {
    id v4 = +[NSNull null];
  }

  return v4;
}

id sub_1001A34A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = [v3 cplChangeAtIndex:1];
    [v4 setScopeIndex:0];
  }
  else
  {
    id v4 = +[NSNull null];
  }

  return v4;
}

id sub_1001A369C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = [v3 cplChangeAtIndex:1];
    [v4 setScopeIndex:0];
  }
  else
  {
    id v4 = +[NSNull null];
  }

  return v4;
}

id sub_1001A3824(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = [(PQLResultSet *)a2 cplChangeAtIndex:0];
  [v3 setScopeIndex:0];
  return v3;
}

id sub_1001A3B64(id a1, PQLResultSet *a2, id *a3)
{
  id v3 = [(PQLResultSet *)a2 cplChangeAtIndex:0];
  [v3 setScopeIndex:0];
  return v3;
}

id sub_1001A40F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 integerAtIndex:2] == (id)1
    || !objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = +[NSNull null];
  }
  else
  {
    id v4 = [v3 cplChangeAtIndex:1];
    [v4 setScopeIndex:0];
  }

  return v4;
}

id sub_1001A430C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = [v3 cplChangeAtIndex:1];
    [v4 setScopeIndex:0];
  }
  else
  {
    id v4 = +[NSNull null];
  }

  return v4;
}

id sub_1001A4600(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isLocalScopeIndexValid:", objc_msgSend(v3, "integerAtIndex:", 0)))
  {
    id v4 = [v3 cplChangeAtIndex:1];
    if (objc_opt_isKindOfClass())
    {
      [v4 setScopeIndex:0];
      id v5 = v4;
    }
    else
    {
      id v5 = +[NSNull null];
    }
    id v6 = v5;
  }
  else
  {
    id v6 = +[NSNull null];
  }

  return v6;
}

void sub_1001A5678(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.transientrepository.pql");
  uint64_t v3 = qword_1002DC070;
  qword_1002DC070 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001A573C(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"CPLPreventWipeUntil-%@", v1];

  return v2;
}

id sub_1001A6618()
{
  if (qword_1002DC078 != -1) {
    dispatch_once(&qword_1002DC078, &stru_10027F720);
  }
  uint64_t v0 = (void *)qword_1002DC080;
  return v0;
}

uint64_t sub_1001A6930(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    id result = sub_1001A755C(result, (uint64_t)[(id)result totalResourceSize] + a2, a3);
    if (result)
    {
      if ((unint64_t)+[CPLResource largeResourceSizeThreshold] >= a2)
      {
        return 1;
      }
      else
      {
        return sub_1001A7314(v5, a2, a3);
      }
    }
  }
  return result;
}

char *sub_1001A69C0(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    id v4 = result;
    uint64_t v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)[result totalOriginalResourceSize] + a2);
    id v6 = [v4 setValue:v5 forVariable:*(void *)(v4 + 44) error:a3];

    return (char *)v6;
  }
  return result;
}

uint64_t sub_1001A6BC4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  unint64_t v6 = (unint64_t)[(id)a1 totalResourceSize];
  unint64_t v7 = v6 - a2;
  if (v6 < a2)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1001A6618();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v20 = 134218240;
        unint64_t v21 = a2;
        __int16 v22 = 2048;
        unint64_t v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Total resource size inconsistency (removing %llu from %llu)", (uint8_t *)&v20, 0x16u);
      }
    }
    unint64_t v7 = 0;
  }
  if (v6 >> 24 >= 0x19 && v7 >> 24 <= 0x18)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v9 = sub_1001A6618();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = NSLocalizedFileSizeDescription();
        uint64_t v11 = NSLocalizedFileSizeDescription();
        int v20 = 138412546;
        unint64_t v21 = (unint64_t)v10;
        __int16 v22 = 2112;
        unint64_t v23 = (unint64_t)v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Resource storage went under %@ (%@)", (uint8_t *)&v20, 0x16u);
      }
    }
    uint64_t v12 = [(id)a1 abstractObject];
    uint64_t v13 = [v12 engineStore];
    uint64_t v14 = [v13 engineLibrary];
    [v14 requestAttachedLibrary];
  }
  if (!sub_1001A755C(a1, v7, a3)) {
    return 0;
  }
  if ((unint64_t)+[CPLResource largeResourceSizeThreshold] >= a2)return 1; {
  uint64_t v15 = [(id)a1 valueForVariable:*(void *)(a1 + 52)];
  }
  if (v15
    && (+[NSNumber numberWithUnsignedLongLong:a2],
        uint64_t v16 = objc_claimAutoreleasedReturnValue(),
        id v17 = [v15 compare:v16],
        v16,
        v17 != (id)1))
  {
    uint64_t v18 = (uint64_t)[(id)a1 _refreshLargestResourceSizeWithError:a3];
  }
  else
  {
    uint64_t v18 = 1;
  }

  return v18;
}

id sub_1001A6E5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  unint64_t v6 = (char *)[(id)a1 totalOriginalResourceSize];
  unint64_t v7 = &v6[-a2];
  if ((unint64_t)v6 < a2)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = v6;
      uint64_t v9 = sub_1001A6618();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v13 = 134218240;
        unint64_t v14 = a2;
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Total original resource size inconsistency (removing %llu from %llu)", (uint8_t *)&v13, 0x16u);
      }
    }
    unint64_t v7 = 0;
  }
  uint64_t v10 = +[NSNumber numberWithUnsignedLongLong:v7];
  id v11 = [(id)a1 setValue:v10 forVariable:*(void *)(a1 + 44) error:a3];

  return v11;
}

uint64_t sub_1001A7314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  unint64_t v6 = [(id)a1 valueForVariable:*(void *)(a1 + 52)];
  if (!v6
    || (+[NSNumber numberWithUnsignedLongLong:a2],
        unint64_t v7 = objc_claimAutoreleasedReturnValue(),
        id v8 = [v6 compare:v7],
        v7,
        v8 == (id)-1))
  {
    uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:a2];
    unsigned int v10 = [(id)a1 setValue:v9 forVariable:*(void *)(a1 + 52) error:a3];

    if (!v10)
    {
      uint64_t v14 = 0;
      goto LABEL_8;
    }
    id v11 = [(id)a1 abstractObject];
    uint64_t v12 = [v11 engineStore];
    int v13 = +[NSNumber numberWithUnsignedLongLong:a2];
    [v12 predictSyncSessionValue:v13 ofType:CPLSyncSessionPredictionTypeLargestResourceSize];
  }
  uint64_t v14 = 1;
LABEL_8:

  return v14;
}

uint64_t sub_1001A755C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = +[NSNumber numberWithUnsignedLongLong:a2];
    LODWORD(a3) = [(id)v5 setValue:v6 forVariable:*(void *)(v5 + 36) error:a3];

    if (a3)
    {
      unint64_t v7 = [(id)v5 abstractObject];
      id v8 = [v7 engineStore];
      uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:a2];
      [v8 predictSyncSessionValue:v9 ofType:CPLSyncSessionPredictionTypeUploadResourceSize];

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1001A7904(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.resourcestorage.pql");
  uint64_t v3 = qword_1002DC080;
  qword_1002DC080 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001A814C()
{
  if (qword_1002DC088 != -1) {
    dispatch_once(&qword_1002DC088, &stru_10027F740);
  }
  uint64_t v0 = (void *)qword_1002DC090;
  return v0;
}

void sub_1001A81C8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.107137447");
  uint64_t v3 = qword_1002DC090;
  qword_1002DC090 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001A8F2C()
{
  if (qword_1002DC098 != -1) {
    dispatch_once(&qword_1002DC098, &stru_10027F7A0);
  }
  uint64_t v0 = (void *)qword_1002DC0A0;
  return v0;
}

id sub_1001A9B18(id a1, PQLResultSet *a2, id *a3)
{
  uint64_t v3 = a2;
  id v4 = [(PQLResultSet *)v3 cplChangeAtIndex:1];
  id v5 = [(PQLResultSet *)v3 integerAtIndex:0];

  [v4 setScopeIndex:v5];
  return v4;
}

id sub_1001A9EFC(id a1, PQLResultSet *a2, id *a3)
{
  uint64_t v3 = a2;
  id v4 = [(PQLResultSet *)v3 cplChangeAtIndex:1];
  id v5 = [(PQLResultSet *)v3 integerAtIndex:0];

  [v4 setScopeIndex:v5];
  return v4;
}

void sub_1001AAF50(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.changepipe.pql");
  uint64_t v3 = qword_1002DC0A0;
  qword_1002DC0A0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1001AB8C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1001AB8F0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if ([v7 supportsResources])
  {
    if ([v7 hasChangeType:8])
    {
      id v8 = [v7 resources];
      id v9 = [v8 count];

      if (v9) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
    }
  }
  if ((a3 & 2) == 0)
  {
    if ([v7 supportsResources] && objc_msgSend(v7, "hasChangeType:", 8))
    {
      unsigned int v10 = +[NSUUID UUID];
      id v11 = [v10 UUIDString];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _enqueueResourcesForChange:v7 inOutgoingResourcesWithUploadIdentifier:v11];
    }
    else
    {
      id v11 = 0;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      if (([v7 hasChangeType:2] & 1) == 0) {
        [*(id *)(*(void *)(a1 + 32) + 8) fillRelatedIdentifiersInChange:v7];
      }
      id v12 = +[CPLRecordPushContext newEmptyPushContext];
      int v13 = v12;
      if (v11)
      {
        id v14 = [v12 copyContextWithUploadIdentifier:v11];

        int v13 = v14;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 16) storeChange:v7 pushContext:v13 error:0];
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    if (!_CPLSilentLogging)
    {
      __int16 v15 = __CPLGenericOSLogDomain();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412546;
        id v17 = v7;
        __int16 v18 = 2048;
        uint64_t v19 = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to migrate %@ (alteration: %lu)", (uint8_t *)&v16, 0x16u);
      }
    }
    *a4 = 1;
  }
  ++*(void *)(*(void *)(a1 + 32) + 48);
}

void sub_1001ABB3C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 supportsResources] && objc_msgSend(v6, "hasChangeType:", 8))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = objc_msgSend(v6, "resources", 0);
    id v8 = [v7 countByEnumeratingWithState:&v14 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v15;
      while (2)
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _discardResourceForUpload:v12];
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
          {
            if (!_CPLSilentLogging)
            {
              int v13 = __CPLGenericOSLogDomain();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412290;
                uint64_t v19 = v12;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to discard %@", buf, 0xCu);
              }
            }
            goto LABEL_16;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_16:
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a4 = 1;
  }
}

void sub_1001AC17C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.pql.migration.110019222");
  uint64_t v3 = qword_1002DC0B0;
  qword_1002DC0B0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001AC8A8()
{
  if (qword_1002DC0B8 != -1) {
    dispatch_once(&qword_1002DC0B8, &stru_10027F850);
  }
  uint64_t v0 = (void *)qword_1002DC0C0;
  return v0;
}

id sub_1001ACF10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [v5 cplChangeAtIndex:1];
  id v7 = v6;
  if (v6)
  {
    [v6 setScopedIdentifier:*(void *)(a1 + 32)];
    id v8 = [v5 stringAtIndex:2];
    [v7 setRelatedIdentifier:v8];

    id v9 = [v5 stringAtIndex:3];
    [v7 setSecondaryIdentifier:v9];

    [v7 awakeFromStorage];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v10 = sub_1001AC8A8();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v13 = 138412290;
        uint64_t v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to deserialized record with identifier %@", (uint8_t *)&v13, 0xCu);
      }
    }
    if (a3)
    {
      *a3 = +[CPLErrors invalidClientCacheErrorWithReason:0];
    }
  }

  return v7;
}

id sub_1001AD4E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [v5 cplChangeAtIndex:1];
  id v7 = objc_alloc((Class)CPLScopedIdentifier);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = [v5 stringAtIndex:0];
  id v10 = [v7 initWithScopeIdentifier:v8 identifier:v9];

  [v10 setScopeIndex:*(void *)(a1 + 40)];
  if (v6)
  {
    [v6 setScopedIdentifier:v10];
    uint64_t v11 = [v5 stringAtIndex:2];
    [v6 setRelatedIdentifier:v11];

    uint64_t v12 = [v5 stringAtIndex:3];
    [v6 setSecondaryIdentifier:v12];

    [v6 awakeFromStorage];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      int v13 = sub_1001AC8A8();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412290;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to deserialized record with identifier %@", (uint8_t *)&v15, 0xCu);
      }
    }
    if (a3)
    {
      *a3 = +[CPLErrors invalidClientCacheErrorWithReason:0];
    }
  }

  return v6;
}

id sub_1001AD8F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [v5 cplChangeAtIndex:1];
  id v7 = objc_alloc((Class)CPLScopedIdentifier);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = [v5 stringAtIndex:0];
  id v10 = [v7 initWithScopeIdentifier:v8 identifier:v9];

  [v10 setScopeIndex:*(void *)(a1 + 40)];
  if (v6)
  {
    [v6 setScopedIdentifier:v10];
    uint64_t v11 = [v5 stringAtIndex:2];
    [v6 setRelatedIdentifier:v11];

    uint64_t v12 = [v5 stringAtIndex:3];
    [v6 setSecondaryIdentifier:v12];

    [v6 awakeFromStorage];
  }
  else
  {
    if (!_CPLSilentLogging)
    {
      int v13 = sub_1001AC8A8();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412290;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unable to deserialized record with identifier %@", (uint8_t *)&v15, 0xCu);
      }
    }
    if (a3)
    {
      *a3 = +[CPLErrors invalidClientCacheErrorWithReason:0];
    }
  }

  return v6;
}

void sub_1001ADFFC(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  if (v5) {
    CFStringRef v6 = v5;
  }
  else {
    CFStringRef v6 = @"(nil)";
  }
  id v7 = (__CFString *)v6;
  [*(id *)(a1 + 32) appendFormat:@"\n\t%@: %ld", v6, a3];
}

void sub_1001AE154(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  if (!v5) {
    CFStringRef v5 = @"(nil)";
  }
  uint64_t v8 = (__CFString *)v5;
  CFStringRef v6 = *(void **)(a1 + 32);
  id v7 = +[NSNumber numberWithUnsignedInteger:a3];
  [v6 setObject:v7 forKey:v8];
}

NSString *__cdecl sub_1001AE238(id a1, NSString *a2)
{
  os_log_t v2 = a2;
  return v2;
}

id sub_1001AE3A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 stringAtIndex:0];
  CFStringRef v5 = [v3 stringAtIndex:1];

  if (v4) {
    [*(id *)(a1 + 32) setRelatedIdentifier:v4];
  }
  if (v5) {
    [*(id *)(a1 + 32) setSecondaryIdentifier:v5];
  }
  id v6 = *(id *)(a1 + 32);

  return v6;
}

void sub_1001AE504(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.clientcache.pql");
  uint64_t v3 = qword_1002DC0C0;
  qword_1002DC0C0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001AE810()
{
  if (qword_1002DC0C8 != -1) {
    dispatch_once(&qword_1002DC0C8, &stru_10027F870);
  }
  uint64_t v0 = (void *)qword_1002DC0D0;
  return v0;
}

void sub_1001AEE38(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.pendingrecordchecks.pql");
  uint64_t v3 = qword_1002DC0D0;
  qword_1002DC0D0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001AF35C()
{
  if (qword_1002DC0D8 != -1) {
    dispatch_once(&qword_1002DC0D8, &stru_10027F890);
  }
  uint64_t v0 = (void *)qword_1002DC0E0;
  return v0;
}

id sub_1001AF758(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"#__NONE__#"]) {
    id v2 = 0;
  }
  else {
    id v2 = v1;
  }

  return v2;
}

void sub_1001B0504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B0534(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) mainTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_1001B0620(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.computestatequeue.pql");
  uint64_t v3 = qword_1002DC0E0;
  qword_1002DC0E0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001B079C(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) pqStore];
  uint64_t v3 = [*(id *)(a1 + 32) mainTable];
  id v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 tableHasRecords:v3] ^ 1);

  return v4;
}

id sub_1001B1154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 cplChangeAtIndex:2];
  CFStringRef v5 = v4;
  if (v4)
  {
    [v4 setScopedIdentifier:*(void *)(a1 + 32)];
    [v5 awakeFromStorage];
    id v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", (double)(uint64_t)[v3 integerAtIndex:3]);
    id v7 = [objc_alloc((Class)CPLIgnoredRecord) initWithRecord:v5 ignoredDate:v6];
  }
  else
  {
    id v7 = +[NSNull null];
  }

  return v7;
}

id sub_1001B18C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 cplChangeAtIndex:2];
  if (v4)
  {
    id v5 = objc_alloc((Class)CPLScopedIdentifier);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [v3 stringAtIndex:1];
    id v8 = [v5 initWithScopeIdentifier:v6 identifier:v7 scopeIndex:*(void *)(a1 + 40)];

    [v4 setScopedIdentifier:v8];
    [v4 awakeFromStorage];
    id v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", (double)(uint64_t)[v3 integerAtIndex:3]);
    id v10 = [objc_alloc((Class)CPLIgnoredRecord) initWithRecord:v4 ignoredDate:v9];
  }
  else
  {
    id v10 = +[NSNull null];
  }

  return v10;
}

void sub_1001B2084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B20AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B20BC(uint64_t a1)
{
}

void sub_1001B20C4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) cplExecute:@"UPDATE %@ SET otherScopeIndex = 0 WHERE rowID = %lu", *(void *)(a1 + 40), a2];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v5 = [*(id *)(a1 + 32) lastError];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    *a3 = 1;
  }
}

id *sub_1001B23E0(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v24.receiver = a1;
    v24.super_class = (Class)CPLPrequelitePushedChange;
    a1 = (id *)objc_msgSendSuper2(&v24, "init");
    if (a1)
    {
      uint64_t v8 = objc_opt_class();
      id v9 = a1[3];
      a1[3] = (id)v8;

      id v10 = [v6 scopedIdentifier];
      id v11 = [v10 scopeIndex];
      a1[4] = v11;
      if (v11 == (id)0x7FFFFFFFFFFFFFFFLL) {
        sub_1001D337C();
      }
      uint64_t v12 = [v10 identifier];
      id v13 = [v12 copy];
      id v14 = a1[5];
      a1[5] = v13;

      a1[6] = [v6 changeType];
      int v15 = [v6 relatedIdentifier];
      id v16 = [v15 copy];
      id v17 = a1[7];
      a1[7] = v16;

      __int16 v18 = [v6 secondaryIdentifier];
      id v19 = [v18 copy];
      id v20 = a1[8];
      a1[8] = v19;

      a1[9] = [v6 dequeueOrder];
      if ([v6 isDelete]) {
        unsigned __int8 v21 = 1;
      }
      else {
        unsigned __int8 v21 = [v6 inTrash];
      }
      *((unsigned char *)a1 + 8) = v21;
      objc_storeStrong(a1 + 10, a3);
      if ([v6 _shouldNotTrustCloudCache]) {
        int v22 = 2;
      }
      else {
        int v22 = 0;
      }
      *((_DWORD *)a1 + 3) = v22;
      objc_storeStrong(a1 + 11, a2);
    }
  }

  return a1;
}

id sub_1001B2590()
{
  if (qword_1002DC0E8 != -1) {
    dispatch_once(&qword_1002DC0E8, &stru_10027F978);
  }
  uint64_t v0 = (void *)qword_1002DC0F0;
  return v0;
}

id sub_1001B25F0(id a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)CPLPrequelitePushedChange;
    a1 = objc_msgSendSuper2(&v21, "init");
    if (a1)
    {
      id v6 = [v5 stringAtIndex:a3];
      uint64_t v7 = NSClassFromString(v6);
      uint64_t v8 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v7;

      *((void *)a1 + 4) = [v5 integerAtIndex:(a3 + 1)];
      uint64_t v9 = [v5 stringAtIndex:(a3 + 2)];
      id v10 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v9;

      *((void *)a1 + 6) = (int)[v5 intAtIndex:(a3 + 3)];
      uint64_t v11 = [v5 stringAtIndex:(a3 + 4)];
      uint64_t v12 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v11;

      uint64_t v13 = [v5 stringAtIndex:(a3 + 5)];
      id v14 = (void *)*((void *)a1 + 8);
      *((void *)a1 + 8) = v13;

      *((void *)a1 + 9) = [v5 longAtIndex:(a3 + 6)];
      *((unsigned char *)a1 + 8) = [v5 intAtIndex:(a3 + 7)] == 1;
      int v15 = [v5 stringAtIndex:(a3 + 8)];
      id v16 = objc_msgSend(objc_alloc((Class)CPLRecordPushContext), "initWithUploadIdentifier:flags:priority:", v15, objc_msgSend(v5, "integerAtIndex:", (a3 + 9)), objc_msgSend(v5, "unsignedIntegerAtIndex:", (a3 + 10)));
      id v17 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v16;

      *((_DWORD *)a1 + 3) = [v5 intAtIndex:(a3 + 11)];
      uint64_t v18 = [v5 dataAtIndex:(a3 + 12)];
      id v19 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v18;
    }
  }

  return a1;
}

void *sub_1001B27F4(void *a1)
{
  if (a1)
  {
    os_log_t v2 = a1;
    id v3 = (void *)a1[2];
    if (!v3)
    {
      id v4 = (void *)a1[11];
      if (v4 && v2[6] != 1024)
      {
        id v5 = [v4 copy];
        [v5 clearIdentifiers];
        [v5 prepareForStorage];
        uint64_t v6 = +[CPLArchiver archivedDataWithRootObject:v5];
        uint64_t v7 = (void *)v2[2];
        v2[2] = v6;

        id v3 = (void *)v2[2];
      }
      else
      {
        id v3 = 0;
      }
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_1001B288C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 _scopedIdentifierForIdentifier:*(void *)(a1 + 40) scopeIndex:*(void *)(a1 + 32)];
    if (!v5)
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v11 = sub_1001B2590();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *(void *)(a1 + 32);
          uint64_t v13 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 134218242;
          uint64_t v17 = v12;
          __int16 v18 = 2112;
          uint64_t v19 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "impossible to create scoped identifier for %ld/%@", buf, 0x16u);
        }
      }
      id v14 = +[NSAssertionHandler currentHandler];
      int v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
      [v14 handleFailureInMethod:"changeWithinPushRepository:", a1, v15, 205, @"impossible to create scoped identifier for %ld/%@", *(void *)(a1 + 32), *(void *)(a1 + 40) object file lineNumber description];

      abort();
    }
    uint64_t v6 = v5;
    [v5 setScopeIndex:*(void *)(a1 + 32)];
    if (*(void *)(a1 + 48) == 1024)
    {
      id v7 = [*(id *)(a1 + 24) newDeleteChangeWithScopedIdentifier:v6];
    }
    else
    {
      uint64_t v8 = *(void **)(a1 + 88);
      if (v8)
      {
        id v7 = [v8 copy];
        [v7 setScopedIdentifier:v6];
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 16);
        if (v9)
        {
          id v7 = +[CPLArchiver unarchiveObjectWithData:v9 ofClass:objc_opt_class()];
          [v7 setScopedIdentifier:v6];
          [v7 setRelatedIdentifier:*(void *)(a1 + 56)];
          [v7 setSecondaryIdentifier:*(void *)(a1 + 64)];
          [v7 awakeFromStorage];
        }
        else
        {
          id v7 = objc_msgSend(*(id *)(a1 + 24), "newChangeWithScopedIdentifier:changeType:", v6);
          [v7 setRelatedIdentifier:*(void *)(a1 + 56)];
          [v7 setSecondaryIdentifier:*(void *)(a1 + 64)];
        }
      }
    }
    [v7 _setPushContext:*(void *)(a1 + 80)];
    if (*(_DWORD *)(a1 + 12) == 2) {
      [v7 _setShouldNotTrustCloudCache:1];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_1001B2B00(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (a1)
  {
    uint64_t v13 = (void *)v4;
    objc_storeStrong((id *)(a1 + 88), a2);
    uint64_t v6 = [v13 relatedIdentifier];
    id v7 = [v6 copy];
    uint64_t v8 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v7;

    uint64_t v9 = [v13 secondaryIdentifier];
    id v10 = [v9 copy];
    uint64_t v11 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v10;

    *(void *)(a1 + 72) = [v13 dequeueOrder];
    if ([v13 isDelete]) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = (uint64_t)[v13 inTrash];
    }
    *(unsigned char *)(a1 + 8) = v4;
    uint64_t v5 = (uint64_t)v13;
  }
  return _objc_release_x1(v4, v5);
}

void sub_1001B2BD0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_1001B2BE0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

id sub_1001B5C04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [[CPLPrequelitePushedChange alloc] initFromPQLResultSet:v5 error:a3];

  id v7 = sub_1001B288C((uint64_t)v6, *(void **)(a1 + 32));
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    id v9 = +[NSNull null];
  }
  id v10 = v9;

  return v10;
}

id sub_1001B6448(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [[CPLPrequelitePushedChange alloc] initFromPQLResultSet:v5 error:a3];

  id v7 = sub_1001B288C((uint64_t)v6, *(void **)(a1 + 32));
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    id v9 = +[NSNull null];
  }
  id v10 = v9;

  return v10;
}

void sub_1001B6E98(uint64_t a1, void *a2, uint64_t a3)
{
  CFStringRef v5 = a2;
  if (!v5) {
    CFStringRef v5 = @"(nil)";
  }
  id v7 = (__CFString *)v5;
  id v6 = +[NSNumber numberWithUnsignedInteger:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
}

void sub_1001B7418(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init((Class)NSMutableString);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = [v5 allKeys];
  uint64_t v8 = [v7 sortedArrayUsingSelector:"compare:"];

  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        id v14 = [v5 objectForKeyedSubscript:v13];
        [v6 appendFormat:@"\n\t%@: %@", v13, v14];
      }
      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }

  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
}

void sub_1001B75A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v13 = a3;
  id v5 = [*(id *)(a1 + 32) indexForLocalScopeIdentifier:a2];
  id v6 = *(void **)(a1 + 40);
  id v7 = +[NSNumber numberWithInteger:v5];
  id v8 = [v6 objectForKeyedSubscript:v7];

  if (v8)
  {
    id v9 = [v13 summaryDescription];
    [v8 appendFormat:@"\n\textracted: %@", v9];
  }
  else
  {
    id v10 = objc_alloc((Class)NSMutableString);
    uint64_t v11 = [v13 summaryDescription];
    id v8 = [v10 initWithFormat:@"\n\textracted: %@", v11];

    uint64_t v12 = *(void **)(a1 + 40);
    id v9 = +[NSNumber numberWithInteger:v5];
    [v12 setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_1001B791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B794C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) mainTable];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 cplExecute:@"DELETE FROM %@ WHERE rowID = %ld", v7, a2];

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a3 = 1;
  }
}

id sub_1001B7C34(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  os_log_t v2 = [a2 stringAtIndex:0];
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
  }
  else
  {
    id v4 = +[NSNull null];
  }
  id v5 = v4;

  return v5;
}

void sub_1001B7EC4(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  id v5 = [a3 flags];
  if (v5)
  {
    id v6 = v5;
    id v7 = [v29 scopeIdentifier];
    unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

    if (v8)
    {
      id v9 = *(void **)(a1 + 40);
      id v10 = [*(id *)(a1 + 48) mainTable];
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = [v29 identifier];
      id v13 = [v9 cplFetch:@"SELECT flags, changeType FROM %@ WHERE scopeIndex = %ld AND identifier = %@", v10, v11, v12];

      if (![v13 next])
      {
LABEL_9:
        unint64_t v23 = *(void **)(a1 + 56);
        objc_super v24 = +[NSNumber numberWithInteger:v6];
        uint64_t v25 = [v23 objectForKeyedSubscript:v24];
        uint64_t v26 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v25 unsignedIntegerValue] + 1);
        id v27 = *(void **)(a1 + 56);
        id v28 = +[NSNumber numberWithInteger:v6];
        [v27 setObject:v26 forKeyedSubscript:v28];

        goto LABEL_10;
      }
      id v14 = [v13 integerAtIndex:0];
      id v15 = +[CPLRecordPushContext mergingFlags:previousFlags:changeType:](CPLRecordPushContext, "mergingFlags:previousFlags:changeType:", v14, v6, [v13 integerAtIndex:1]);
      id v6 = v15;
      if (v14)
      {
        if (v15 == v14) {
          goto LABEL_10;
        }
        long long v16 = *(void **)(a1 + 56);
        long long v17 = +[NSNumber numberWithInteger:v14];
        long long v18 = [v16 objectForKeyedSubscript:v17];
        long long v19 = (char *)[v18 unsignedIntegerValue];

        if (v19)
        {
          id v20 = +[NSNumber numberWithUnsignedInteger:v19 - 1];
          objc_super v21 = *(void **)(a1 + 56);
          int v22 = +[NSNumber numberWithInteger:v14];
          [v21 setObject:v20 forKeyedSubscript:v22];
        }
      }
      if (v6) {
        goto LABEL_9;
      }
LABEL_10:
    }
  }
}

id sub_1001B8278(uint64_t a1, void *a2)
{
  id v3 = [a2 stringAtIndex:0];
  if (v3)
  {
    id v4 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(a1 + 32) identifier:v3 scopeIndex:*(void *)(a1 + 40)];
  }
  else
  {
    id v4 = +[NSNull null];
  }
  id v5 = v4;

  return v5;
}

id sub_1001B8600(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [[CPLPrequelitePushedChange alloc] initFromPQLResultSet:v5 error:a3];

  id v7 = sub_1001B288C((uint64_t)v6, *(void **)(a1 + 32));
  unsigned int v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    id v9 = +[NSNull null];
  }
  id v10 = v9;

  return v10;
}

void sub_1001B8B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

id sub_1001B8B98(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 unsignedIntegerAtIndex:0];
  id v4 = sub_1001B25F0([CPLPrequelitePushedChange alloc], v3, 1);

  if (v4)
  {
    id v5 = v4;
  }
  else
  {
    id v5 = +[NSNull null];
  }
  id v6 = v5;

  return v6;
}

#error "1001B9368: call analysis failed (funcsize=11)"

void sub_1001B9830(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.pushrepository.pql");
  uint64_t v3 = qword_1002DC0F0;
  qword_1002DC0F0 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001B9990()
{
  if (qword_1002DC0F8 != -1) {
    dispatch_once(&qword_1002DC0F8, &stru_10027F998);
  }
  uint64_t v0 = (void *)qword_1002DC100;
  return v0;
}

void sub_1001BAB44(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.store.history");
  uint64_t v3 = qword_1002DC100;
  qword_1002DC100 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001BAE54()
{
  if (qword_1002DC108 != -1) {
    dispatch_once(&qword_1002DC108, &stru_10027F9B8);
  }
  uint64_t v0 = (void *)qword_1002DC110;
  return v0;
}

id sub_1001BB45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)CPLScopedIdentifier);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v3 stringAtIndex:0];

  id v7 = [v4 initWithScopeIdentifier:v5 identifier:v6 scopeIndex:*(void *)(a1 + 40)];
  return v7;
}

id sub_1001BB7FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 stringAtIndex:0];
  uint64_t v5 = [v3 stringAtIndex:1];

  if (v4 && v5)
  {
    id v6 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(a1 + 32) identifier:v4 scopeIndex:*(void *)(a1 + 40)];
    id v7 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(a1 + 32) identifier:v5 scopeIndex:*(void *)(a1 + 40)];
    unsigned int v8 = sub_1001BB8F0((id *)[CPLPrequeliteRemappedRecord alloc], v6, v7);
  }
  else
  {
    unsigned int v8 = +[NSNull null];
  }

  return v8;
}

id *sub_1001BB8F0(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)CPLPrequeliteRemappedRecord;
    unsigned int v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_1001BBA54(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.remappedrecords.pql");
  uint64_t v3 = qword_1002DC110;
  qword_1002DC110 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001BBBD0(uint64_t a1)
{
  os_log_t v2 = [*(id *)(a1 + 32) pqStore];
  uint64_t v3 = [*(id *)(a1 + 32) mainTable];
  id v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 tableHasRecords:v3] ^ 1);

  return v4;
}

void sub_1001BC1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BC1F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BC208(uint64_t a1)
{
}

id sub_1001BC210(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 integerAtIndex:0];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v4 != *(id *)(v5 + 24))
  {
    *(void *)(v5 + 24) = v4;
    id v6 = [*(id *)(a1 + 32) scopeWithStableIndex:v4];
    if (v6 && ([*(id *)(a1 + 32) valueForFlag:16 forScope:v6] & 1) == 0)
    {
      uint64_t v8 = [v6 scopeIdentifier];
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
      objc_super v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      char v7 = 1;
    }
    else
    {
      char v7 = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v11 = [v3 stringAtIndex:1];
    uint64_t v12 = [v3 stringAtIndex:2];
    uint64_t v13 = v12;
    if (v11
      && v12
      && (Class v14 = NSClassFromString(v12)) != 0
      && (Class v15 = v14,
          ([(objc_class *)v14 isSubclassOfClass:objc_opt_class()] & 1) != 0))
    {
      id v16 = [objc_alloc((Class)CPLScopedIdentifier) initWithScopeIdentifier:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) identifier:v11];
      id v17 = [objc_alloc((Class)CPLPlaceholderRecord) initWithRecordClass:v15 scopedIdentifier:v16 relatedRecordClass:0 relatedIdentifier:0];

      if (v17) {
        goto LABEL_16;
      }
    }
    else
    {
    }
  }
  id v17 = +[NSNull null];
LABEL_16:

  return v17;
}

void sub_1001BC7FC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.revertrecords.pql");
  uint64_t v3 = qword_1002DC120;
  qword_1002DC120 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1001BD2EC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.quarantinedrecords.pql");
  uint64_t v3 = qword_1002DC130;
  qword_1002DC130 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001BDCC8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [objc_alloc((Class)CPLRecordStatus) initFromPQLResultSet:v5 center:*(void *)(a1 + 32) error:a3];

  return v6;
}

void sub_1001BE468(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.statuscenter.pql");
  uint64_t v3 = qword_1002DC140;
  qword_1002DC140 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001BF7B8()
{
  if (qword_1002DC150 != -1) {
    dispatch_once(&qword_1002DC150, &stru_10027FAC8);
  }
  uint64_t v0 = (void *)qword_1002DC158;
  return v0;
}

uint64_t sub_1001C2308(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 lastPathComponent];
  char v7 = +[CPLResourceIdentity identityForStorageName:v6];
  [v7 setAvailable:1];
  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }

  return 1;
}

BOOL sub_1001C29C0(id a1, NSURL *a2, NSError *a3)
{
  return 1;
}

void sub_1001C2D04(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.resourcestorage.filestorage.bucket");
  uint64_t v3 = qword_1002DC158;
  qword_1002DC158 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

id sub_1001C34A0()
{
  if (qword_1002DC160 != -1) {
    dispatch_once(&qword_1002DC160, &stru_10027FB38);
  }
  uint64_t v0 = (void *)qword_1002DC168;
  return v0;
}

uint64_t sub_1001C35A8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = ++*(void *)(*(void *)(result + 32) + 32);
  return result;
}

id sub_1001C3710(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  id v4 = *(void **)(v3 + 40);
  if (v4 == v2)
  {
    *(void *)(v3 + 40) = 0;

    os_log_t v2 = *(void **)(a1 + 40);
  }
  return [v2 sessionIsDone];
}

void sub_1001C38A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  if (*(void **)(v3 + 40) == v2)
  {
    if ([*(id *)(a1 + 48) isCPLOperationDeferredError]
      && (id v4 = (id *)(*(void *)(a1 + 32) + 48), !*v4))
    {
      objc_storeStrong(v4, *(id *)(a1 + 40));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1001C39B4;
      v8[3] = &unk_100276018;
      id v5 = *(void **)(a1 + 40);
      void v8[4] = *(void *)(a1 + 32);
      id v9 = v5;
      [v9 deferWithBlock:v8];
    }
    else
    {
      [*(id *)(a1 + 40) sessionIsDone];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    char v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
  }
  else
  {
    [v2 sessionIsDone];
  }
}

void sub_1001C39B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(v1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001C3AC4;
  v6[3] = &unk_100276018;
  void v6[4] = v1;
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C4E38;
  block[3] = &unk_100275DF8;
  id v9 = v3;
  id v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

void sub_1001C3AC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  id v4 = *(void **)(v3 + 48);
  if (v4 == v2)
  {
    objc_storeStrong((id *)(v3 + 40), v4);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = 0;

    id v7 = [*(id *)(a1 + 32) abstractObject];
    [v7 startRequiredSyncSessionNow:*(void *)(a1 + 40)];
  }
  else
  {
    [v2 sessionIsDone];
  }
}

uint64_t sub_1001C3C90(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1001C3CFC, @"com.apple.cpl.test.haschanges", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_1001C3CFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_1001C34A0();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 138412546;
      id v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ got test notification of external changes: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  uint64_t v6 = [v4 abstractObject];
  [v6 noteServerHasChanges];
}

void sub_1001C3F08(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
  os_log_t v2 = [*(id *)(a1 + 32) abstractObject];
  uint64_t v3 = [v2 engineLibrary];
  id v4 = [v3 transport];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001C4030;
  v7[3] = &unk_10027FAF0;
  uint64_t v8 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001C4200;
  v5[3] = &unk_10027FB18;
  void v5[4] = v8;
  id v6 = *(id *)(a1 + 40);
  [v4 findPersistedInitialSyncSession:v7 completionHandler:v5];
}

void sub_1001C4030(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1001C4154;
  v10[3] = &unk_100276018;
  void v10[4] = v4;
  id v11 = v3;
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C4E38;
  block[3] = &unk_100275DF8;
  id v13 = v6;
  int v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_1001C4154(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  os_log_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 48);
  if (v4 == v2)
  {
    objc_storeStrong((id *)(v3 + 40), v4);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = 0;

    id v7 = [*(id *)(a1 + 32) abstractObject];
    [v7 startRequiredSyncSessionNow:*(void *)(a1 + 40)];
  }
  else
  {
    [v2 sessionIsDone];
  }
}

void sub_1001C4200(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1001C4338;
  v10[3] = &unk_100275D40;
  void v10[4] = v4;
  id v11 = v3;
  id v12 = *(id *)(a1 + 40);
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C4E38;
  block[3] = &unk_100275DF8;
  id v14 = v6;
  id v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

id sub_1001C4338(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 56))
  {
    *(unsigned char *)(v2 + 56) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
    id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return (id)v3();
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 40);
    return [v5 sessionWontHappen];
  }
}

void sub_1001C44C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 56))
  {
    *(unsigned char *)(v2 + 56) = 0;
    id v8 = [*(id *)(a1 + 32) abstractObject];
    id v3 = [v8 engineLibrary];
    uint64_t v4 = [v3 transport];
    [v4 dropPersistedInitialSyncSession];

    uint64_t v5 = v8;
  }
  else
  {
    id v6 = *(void **)(v2 + 48);
    if (!v6) {
      return;
    }
    [v6 sessionWontHappen];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v7 + 48);
    *(void *)(v7 + 48) = 0;
  }
}

uint64_t sub_1001C46A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 16);
  if (v3)
  {
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  id v6 = *(void **)(v2 + 48);
  if (v6)
  {
    if (*(unsigned char *)(a1 + 48)) {
      [v6 sessionWontHappen];
    }
    else {
      [v6 engineIsClosing];
    }
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 48);
    *(void *)(v7 + 48) = 0;
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), @"com.apple.cpl.test.haschanges", 0);
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v10();
}

void sub_1001C4910(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v2)
  {
    [v2 sessionWontHappen];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    if (v4)
    {
      dispatch_source_cancel(v4);
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0;

      uint64_t v3 = *(void *)(a1 + 32);
    }
    uint64_t v7 = *(void **)(v3 + 48);
    *(void *)(v3 + 48) = 0;
  }
  [*(id *)(a1 + 40) timeIntervalSinceNow];
  if (v8 < 0.100000001) {
    double v8 = 0.100000001;
  }
  uint64_t v9 = 60000000000;
  if (v8 < 600.0) {
    uint64_t v9 = 5000000000;
  }
  if (v8 >= 60.0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  double v11 = v8 * 1000000000.0;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 48));
  id v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001C4AE8;
  v19[3] = &unk_100276018;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  dispatch_source_set_event_handler(v12, v19);
  dispatch_time_t v15 = dispatch_walltime(0, (uint64_t)v11);
  dispatch_source_set_timer(v12, v15, 0xFFFFFFFFFFFFFFFFLL, v10);
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = *(void **)(v16 + 16);
  *(void *)(v16 + 16) = v12;
  long long v18 = v12;

  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
}

void sub_1001C4AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 48))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 16));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 40), *(id *)(a1 + 32));
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 48);
    *(void *)(v3 + 48) = 0;

    uint64_t v5 = [*(id *)(a1 + 40) abstractObject];
    [v5 startRequiredSyncSessionNow:*(void *)(a1 + 32)];

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(v6 + 16);
    *(void *)(v6 + 16) = 0;
  }
}

void sub_1001C4CC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v3 == v2)
  {
    [v3 sessionWontHappen];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    if (v5)
    {
      dispatch_source_cancel(v5);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = 0;

      uint64_t v4 = *(void *)(a1 + 32);
    }
    double v8 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = 0;
  }
}

void sub_1001C4DF8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem();
  os_log_t v2 = os_log_create(v1, "engine.scheduler.base");
  uint64_t v3 = qword_1002DC168;
  qword_1002DC168 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1001C4E38(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C4E84(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "APS connection should not be set here", v7, v8, v9, v10, 0);
    }
  }
  double v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *a2;
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNotificationCenter.m"];
  [v11 handleFailureInMethod:v12 object:v13 file:v14 lineNumber:126 description:@"APS connection should not be set here"];

  abort();
}

void sub_1001C4F4C(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Idle APS connection should be set here", v7, v8, v9, v10, 0);
    }
  }
  double v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *a2;
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNotificationCenter.m"];
  [v11 handleFailureInMethod:v12 object:v13 file:v14 lineNumber:112 description:@"Idle APS connection should be set here"];

  abort();
}

void sub_1001C5014(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Idle APS environment should be set here", v7, v8, v9, v10, 0);
    }
  }
  double v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *a2;
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitPushNotificationCenter.m"];
  [v11 handleFailureInMethod:v12 object:v13 file:v14 lineNumber:113 description:@"Idle APS environment should be set here"];

  abort();
}

void sub_1001C50DC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    os_log_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Missing bundle identifier", v8, 2u);
    }
  }
  uint64_t v3 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemon.m"];
  [v3 handleFailureInMethod:v5 object:v4 file:v7 lineNumber:378 description:@"Missing bundle identifier"];

  abort();
}

void sub_1001C51AC(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = [a1 libraryIdentifier];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "No engine provided for %@", buf, 0xCu);
    }
  }
  uint64_t v8 = +[NSAssertionHandler currentHandler];
  uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineWrapper.m"];
  uint64_t v10 = [a1 libraryIdentifier];
  [v8 handleFailureInMethod:a2, a3, v9, 65, @"No engine provided for %@", v10 object file lineNumber description];

  abort();
}

void sub_1001C52CC(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to get a proxy for %@ but the connection is closed", buf, 0xCu);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemonProcessProtocol.m"];
  [v5 handleFailureInMethod:a2, a1, v6, 82, @"Trying to get a proxy for %@ but the connection is closed", a1 object file lineNumber description];

  abort();
}

void sub_1001C53BC(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "There are more closing wrappers than total wrappers", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineWrapperArray.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:296 description:@"There are more closing wrappers than total wrappers"];

  abort();
}

void sub_1001C548C(uint64_t *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = (id)objc_opt_class();
      id v5 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Incorrect class for library manager implementation: %@", buf, 0xCu);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = *(void *)(a2 + 96);
  uint64_t v8 = *a1;
  uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLDaemonLibraryManager.m"];
  [v6 handleFailureInMethod:v7, v8, v9, 296, @"Incorrect class for library manager implementation: %@", objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001C55AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"];
  objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a1, a2, v7, 132, @"Invalid phase %ld", a3);

  abort();
}

void sub_1001C5634(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = (id)objc_opt_class();
      uint64_t v6 = objc_opt_class();
      id v7 = sub_100027BC4(v6);
      sub_100027BE8((void *)&_mh_execute_header, v8, v9, "%@ only supports %@", v10, v11, v12, v13, v17, v18, v19);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  dispatch_time_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"];
  uint64_t v16 = objc_opt_class();
  [v14 handleFailureInMethod:a2, a1, v15, 186, @"%@ only supports %@", v16, objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001C575C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = (id)objc_opt_class();
      uint64_t v6 = objc_opt_class();
      id v7 = sub_100027BC4(v6);
      sub_100027BE8((void *)&_mh_execute_header, v8, v9, "%@ only supports %@", v10, v11, v12, v13, v17, v18, v19);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  dispatch_time_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTActivityReport.m"];
  uint64_t v16 = objc_opt_class();
  [v14 handleFailureInMethod:a2, a1, v15, 198, @"%@ only supports %@", v16, objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001C5884(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = [a1 asPlist];
      *(_DWORD *)long long buf = 138412546;
      int v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to serialize %@: %@", buf, 0x16u);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLEngineParameters.m"];
  int v10 = [a1 asPlist];
  [v8 handleFailureInMethod:a3, a1, v9, 141, @"Failed to serialize %@: %@", v10, a2 object file lineNumber description];

  abort();
}

#error "1001C5A3C: call analysis failed (funcsize=67)"

#error "1001C5B4C: call analysis failed (funcsize=59)"

void sub_1001C5BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  id v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  [v6 handleFailureInMethod:a1, a2, v7, 219, @"Acquired %@ for %@ but while we are not interested", a3, a2 object file lineNumber description];

  abort();
}

void sub_1001C5C50(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v3 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v3)) {
      sub_1000304EC((void *)&_mh_execute_header, v4, v5, "Acquired Task for %@ twice", v6, v7, v8, v9, v12, v13, 2u);
    }
  }
  int v10 = +[NSAssertionHandler currentHandler];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:", a1);

  abort();
}

void sub_1001C5D24()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Missing acquire date when expiring", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001C5E58: call analysis failed (funcsize=52)"

#error "1001C5F38: call analysis failed (funcsize=52)"

void sub_1001C5FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (!_CPLSilentLogging)
  {
    id v28 = __CPLGenericOSLogDomain();
    if (sub_100030534(v28))
    {
      uint64_t v29 = *(void *)(v25 + 104);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v27;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Trying to deregister for %@ while we are registered for %@", (uint8_t *)&buf, 0x16u);
    }
  }
  id v30 = +[NSAssertionHandler currentHandler];
  id v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001C609C()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Acquired task without a request", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001C6150()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Acquired task without having a current registered task identifier", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001C6204()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Acquired task without an interested rescheduler", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001C62B8()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Missing task or error", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001C63E0: call analysis failed (funcsize=50)"

#error "1001C64BC: call analysis failed (funcsize=52)"

#error "1001C659C: call analysis failed (funcsize=52)"

void sub_1001C6604()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Trying to cancel a nil task request", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001C66B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  [v8 handleFailureInMethod:a2, a3, v9, 785, @"Failed to cancel %@: %@", *a1, a4 object file lineNumber description];

  abort();
}

void sub_1001C6748()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v1 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Trying to update an unknown task request", v4, v5, v6, v7, 0);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001C6874: call analysis failed (funcsize=56)"

void sub_1001C68EC(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *a1;
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to acquire CloudKit rescheduler manager for %@ twice", buf, 0xCu);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitReschedulerCoordinator.m"];
  [v6 handleFailureInMethod:v8, v7, v9, 69, @"Trying to acquire CloudKit rescheduler manager for %@ twice", *a1 object file lineNumber description];

  abort();
}

void sub_1001C69EC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = NSStringFromSelector(*(SEL *)(a1 + 32));
      *(_DWORD *)long long buf = 138412290;
      int v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Calling %@ too many times", buf, 0xCu);
    }
  }
  uint64_t v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLCloudKitReschedulerCoordinator.m"];
  uint64_t v8 = NSStringFromSelector(*(SEL *)(a1 + 32));
  [v4 handleFailureInMethod:v5, v6, v7, 118, @"Calling %@ too many times", v8 object file lineNumber description];

  abort();
}

void sub_1001C6B08(uint64_t *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100035B48();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = [*(id *)(*a1 + 312) scopeIdentifier];
      uint64_t v6 = *(void *)(a2 + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Zone for %@ (%@) was not actually created", buf, 0x16u);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *a1;
  int v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFetchTransportScopeTask.m"];
  uint64_t v11 = [*(id *)(*a1 + 312) scopeIdentifier];
  [v7 handleFailureInMethod:v8, v9, v10, 80, @"Zone for %@ (%@) was not actually created", v11, *(void *)(a2 + 48) object file lineNumber description];

  abort();
}

void sub_1001C6C58(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100035B48();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Zone ID for Zone should have been determined by now", v7, v8, v9, v10, 0);
    }
  }
  uint64_t v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *a2;
  __int16 v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFetchTransportScopeTask.m"];
  [v11 handleFailureInMethod:v12 object:v13 file:v14 lineNumber:292 description:@"Zone ID for Zone should have been determined by now"];

  abort();
}

void sub_1001C6D20(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100035B48();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Zone should have been fetched by now", v7, v8, v9, v10, 0);
    }
  }
  uint64_t v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *a2;
  __int16 v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFetchTransportScopeTask.m"];
  [v11 handleFailureInMethod:v12 object:v13 file:v14 lineNumber:263 description:@"Zone should have been fetched by now"];

  abort();
}

#error "1001C6E5C: call analysis failed (funcsize=50)"

void sub_1001C6EC0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_100038278();
    if (sub_1000304D4(v5))
    {
      uint64_t v7 = *(void *)(a1 + 128);
      int v10 = 138412290;
      uint64_t v11 = v7;
      sub_1000405F4((void *)&_mh_execute_header, v2, v6, "Trying to delete shared record for %@ without any shared record ID", (uint8_t *)&v10);
    }
  }
  uint64_t v8 = +[NSAssertionHandler currentHandler];
  uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKBatchUploadPlanner.m"];
  [v8 handleFailureInMethod:a2, a1, v9, 456, @"Trying to delete shared record for %@ without any shared record ID", *(void *)(a1 + 128) object file lineNumber description];

  abort();
}

#error "1001C701C: call analysis failed (funcsize=50)"

#error "1001C70F4: call analysis failed (funcsize=50)"

#error "1001C71CC: call analysis failed (funcsize=50)"

void sub_1001C7230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (v28)
  {
    uint64_t v29 = sub_100038278();
    if (sub_1000304D4(v29))
    {
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v27;
      sub_1000405F4((void *)&_mh_execute_header, v21, v30, "%@ was not merged but actually copied", (uint8_t *)&a11);
    }
  }
  id v31 = +[NSAssertionHandler currentHandler];
  uint64_t v34 = v25 + 40;
  uint64_t v32 = *(void *)(v25 + 40);
  uint64_t v33 = *(void *)(v34 + 8);
  id v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKBatchUploadPlanner.m"];
  [v31 handleFailureInMethod:v33 object:v32 file:v35 lineNumber:786 description:@"%@ was not merged but actually copied"];

  abort();
}

void sub_1001C7308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (v28)
  {
    uint64_t v29 = sub_100038278();
    if (sub_1000304D4(v29))
    {
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v27;
      sub_1000405F4((void *)&_mh_execute_header, v21, v30, "%@ was not merged but actually copied", (uint8_t *)&a11);
    }
  }
  id v31 = +[NSAssertionHandler currentHandler];
  uint64_t v34 = v25 + 40;
  uint64_t v32 = *(void *)(v25 + 40);
  uint64_t v33 = *(void *)(v34 + 8);
  id v35 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKBatchUploadPlanner.m"];
  [v31 handleFailureInMethod:v33 object:v32 file:v35 lineNumber:966 description:@"%@ was not merged but actually copied"];

  abort();
}

void sub_1001C73E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (!_CPLSilentLogging)
  {
    char v28 = sub_100038278();
    if (sub_1000304D4(v28))
    {
      uint64_t v29 = [*(id *)(v27 + 48) otherScopedIdentifier];
      LODWORD(a11) = 138412290;
      *(void *)((char *)&a11 + 4) = v29;
      sub_1000405F4((void *)&_mh_execute_header, v21, v30, "Trying to piggy-back on updating %@ but found no such record in the list of shared record to upload", (uint8_t *)&a11);
    }
  }
  id v31 = +[NSAssertionHandler currentHandler];
  uint64_t v32 = *(void *)(v27 + 80);
  uint64_t v33 = *v25;
  uint64_t v34 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKBatchUploadPlanner.m"];
  id v35 = [*(id *)(v27 + 48) otherScopedIdentifier];
  [v31 handleFailureInMethod:v32 object:v33 file:v34 lineNumber:1024 description:@"Trying to piggy-back on updating %@ but found no such record in the list of shared record to upload"];

  abort();
}

#error "1001C7564: call analysis failed (funcsize=50)"

void sub_1001C75C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (!_CPLSilentLogging)
  {
    char v28 = sub_100038278();
    if (sub_100030534(v28))
    {
      uint64_t v29 = *(void *)(v25 + 128);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v27;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Trying to update %@ for %@ but it is not a supported key", (uint8_t *)&buf, 0x16u);
    }
  }
  uint64_t v30 = +[NSAssertionHandler currentHandler];
  id v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKBatchUploadPlanner.m"];
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001C7738: call analysis failed (funcsize=50)"

#error "1001C7810: call analysis failed (funcsize=50)"

#error "1001C78E8: call analysis failed (funcsize=50)"

#error "1001C79C0: call analysis failed (funcsize=50)"

void sub_1001C7A24(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10004117C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Record for %@ has not been downloaded", buf, 0xCu);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = *(void *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask+CKRecordCopy.m"];
  [v5 handleFailureInMethod:v6, v7, v8, 132, @"Record for %@ has not been downloaded", a1 object file lineNumber description];

  abort();
}

void sub_1001C7B20(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_10004117C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Source recordIDs have not been populated correctly", v9, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *a2;
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask+CKRecordCopy.m"];
  [v5 handleFailureInMethod:v6 object:v7 file:v8 lineNumber:263 description:@"Source recordIDs have not been populated correctly"];

  abort();
}

void sub_1001C7BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to find target for resource-ful record %@", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordBuilder.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 48, @"Failed to find target for resource-ful record %@", a1 object file lineNumber description];

  abort();
}

void sub_1001C7CF0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to create an union builder with no builders", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordBuilder.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:96 description:@"Trying to create an union builder with no builders"];

  abort();
}

void sub_1001C7DC0()
{
  __assert_rtn("-[CPLRemappedRecord writeTo:]", "CPLRemappedRecord.m", 83, "nil != self->_createdByUserID");
}

void sub_1001C7DEC()
{
  __assert_rtn("-[CPLRemappedRecord writeTo:]", "CPLRemappedRecord.m", 88, "nil != self->_recordID");
}

void sub_1001C7E18(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to encode prefix", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitComputeStateEncryptionHelper.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:142 description:@"Failed to encode prefix"];

  abort();
}

void sub_1001C7EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@ was unable to produce any data", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKFeedbackOperation.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 27, @"%@ was unable to produce any data", a1 object file lineNumber description];

  abort();
}

void sub_1001C7FE8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Missing throttling error", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTaskGate.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:237 description:@"Missing throttling error"];

  abort();
}

void sub_1001C80B8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10004BFD8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Did not find query for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  __int16 v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitQueryTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 180, @"Did not find query for %@", *a1 object file lineNumber description];

  abort();
}

void sub_1001C81B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10004BFD8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Invalid class for cursor %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  __int16 v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitQueryTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 346, @"Invalid class for cursor %@", a1 object file lineNumber description];

  abort();
}

void sub_1001C8298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid CloudKit rescheduler: %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitRescheduler.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 26, @"Invalid CloudKit rescheduler: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001C8390()
{
}

void sub_1001C83BC()
{
  __assert_rtn("-[_CPLFakeDerivativeMapper _dimensionsFromBaseResource:]", "CPLCloudKitFakeDynamicDerivatives.m", 427, "scale <= 1.0f");
}

void sub_1001C83E8(id *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100053134();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = [*a1 scope];
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Failed to find a share record to create for %@", v8, v9, v10, v11, v17, v18, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = *(void *)(a2 + 48);
  id v14 = *a1;
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCreateScopeTask.m"];
  uint64_t v16 = [*a1 scope];
  [v12 handleFailureInMethod:v13, v14, v15, 370, @"Failed to find a share record to create for %@", v16 object file lineNumber description];

  abort();
}

void sub_1001C84FC(id *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_100053134();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = [*a1 scope];
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Failed to find a share type to create for %@", v8, v9, v10, v11, v17, v18, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = *(void *)(a2 + 48);
  id v14 = *a1;
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCreateScopeTask.m"];
  uint64_t v16 = [*a1 scope];
  [v12 handleFailureInMethod:v13, v14, v15, 384, @"Failed to find a share type to create for %@", v16 object file lineNumber description];

  abort();
}

void sub_1001C8610(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000588A8();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "%@ should have an identification at this point", v7, v8, v9, v10, v13, v14, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitAcceptSharedScopeTask.m"];
  [v11 handleFailureInMethod:a2, a1, v12, 91, @"%@ should have an identification at this point", *(void *)(a1 + 272) object file lineNumber description];

  abort();
}

void sub_1001C8708(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1000588A8();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "Should have a zone identification for %@", v7, v8, v9, v10, v13, v14, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitAcceptSharedScopeTask.m"];
  [v11 handleFailureInMethod:a2, a1, v12, 229, @"Should have a zone identification for %@", *(void *)(a1 + 272) object file lineNumber description];

  abort();
}

void sub_1001C8800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10005A914();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Missing transport scope for partner scope %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitDownloadBatchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 94, @"Missing transport scope for partner scope %@", a1 object file lineNumber description];

  abort();
}

void sub_1001C88E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10005A914();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "No zone ID for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitDownloadBatchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 101, @"No zone ID for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001C89D0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10005A914();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Should not have any more changes coming", v7, 2u);
    }
  }
  uint64_t v3 = +[NSAssertionHandler currentHandler];
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitDownloadBatchTask.m"];
  [v3 handleFailureInMethod:v4 object:v5 file:v6 lineNumber:469 description:@"Should not have any more changes coming"];

  abort();
}

void sub_1001C8AA4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Push notification center can only be set once on CloudKit coordinator", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:113 description:@"Push notification center can only be set once on CloudKit coordinator"];

  abort();
}

void sub_1001C8B74(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7))
    {
      int v8 = [a1 cplOperationClassDescription];
      sub_1000304B4((void *)&_mh_execute_header, v9, v10, "Trying to run a database operation against container: %@", v11, v12, v13, v14, v18, v19, 2u);
    }
  }
  uint64_t v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  uint64_t v17 = [a1 cplOperationClassDescription];
  [v15 handleFailureInMethod:a2, a3, v16, 450, @"Trying to run a database operation against container: %@", v17 object file lineNumber description];

  abort();
}

void sub_1001C8C7C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7))
    {
      int v8 = [a1 cplOperationClassDescription];
      sub_1000304B4((void *)&_mh_execute_header, v9, v10, "Trying to run a non database operation against private database: %@", v11, v12, v13, v14, v18, v19, 2u);
    }
  }
  uint64_t v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  uint64_t v17 = [a1 cplOperationClassDescription];
  [v15 handleFailureInMethod:a2, a3, v16, 454, @"Trying to run a non database operation against private database: %@", v17 object file lineNumber description];

  abort();
}

void sub_1001C8D84(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7))
    {
      int v8 = [a1 cplOperationClassDescription];
      sub_1000304B4((void *)&_mh_execute_header, v9, v10, "Trying to run a non database operation against shared database: %@", v11, v12, v13, v14, v18, v19, 2u);
    }
  }
  uint64_t v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  uint64_t v17 = [a1 cplOperationClassDescription];
  [v15 handleFailureInMethod:a2, a3, v16, 458, @"Trying to run a non database operation against shared database: %@", v17 object file lineNumber description];

  abort();
}

void sub_1001C8E8C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7))
    {
      int v8 = [a1 cplOperationClassDescription];
      sub_1000304B4((void *)&_mh_execute_header, v9, v10, "Trying to run a non database operation against private database: %@", v11, v12, v13, v14, v18, v19, 2u);
    }
  }
  uint64_t v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  uint64_t v17 = [a1 cplOperationClassDescription];
  [v15 handleFailureInMethod:a2, a3, v16, 462, @"Trying to run a non database operation against private database: %@", v17 object file lineNumber description];

  abort();
}

void sub_1001C8F94(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7))
    {
      int v8 = [a1 cplOperationClassDescription];
      sub_1000304B4((void *)&_mh_execute_header, v9, v10, "Trying to run a non database operation against private database: %@", v11, v12, v13, v14, v18, v19, 2u);
    }
  }
  uint64_t v15 = +[NSAssertionHandler currentHandler];
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  uint64_t v17 = [a1 cplOperationClassDescription];
  [v15 handleFailureInMethod:a2, a3, v16, 466, @"Trying to run a non database operation against private database: %@", v17 object file lineNumber description];

  abort();
}

void sub_1001C909C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  [v4 handleFailureInMethod:a1 object:a2 file:v5 lineNumber:549 description:@"Should not try to determine database for a container operation type"];

  abort();
}

void sub_1001C9114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCoordinator.m"];
  [v4 handleFailureInMethod:a1 object:a2 file:v5 lineNumber:537 description:@"Should not try to determine database for a container operation type"];

  abort();
}

#error "1001C9214: call analysis failed (funcsize=64)"

void sub_1001C929C(uint64_t a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5))
    {
      int v6 = NSStringFromSelector(*(SEL *)(a1 + 72));
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *a2;
      *(_DWORD *)long long buf = 138412802;
      int v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@ has been called for %@ but %@ has not been started yet", buf, 0x20u);
    }
  }
  int v9 = +[NSAssertionHandler currentHandler];
  int v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitOperationsTracker.m"];
  int v11 = NSStringFromSelector(*(SEL *)(a1 + 72));
  objc_msgSend((id)sub_1000643D8(), "handleFailureInMethod:object:file:lineNumber:description:", v11, *(void *)(a1 + 40), *a2);

  abort();
}

void sub_1001C93E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  if (!_CPLSilentLogging)
  {
    uint64_t v30 = __CPLGenericOSLogDomain();
    if (sub_100030534(v30))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@ has no associated task", (uint8_t *)&buf, 0xCu);
    }
  }
  id v31 = +[NSAssertionHandler currentHandler];
  uint64_t v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitOperationsTracker.m"];
  [v31 handleFailureInMethod:v27 object:v25 file:v32 lineNumber:205 description:@"%@ has no associated task"];

  abort();
}

#error "1001C9558: call analysis failed (funcsize=66)"

#error "1001C9670: call analysis failed (funcsize=66)"

#error "1001C9788: call analysis failed (funcsize=66)"

#error "1001C989C: call analysis failed (funcsize=63)"

#error "1001C99AC: call analysis failed (funcsize=63)"

void sub_1001C9A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (!_CPLSilentLogging)
  {
    uint64_t v28 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v28))
    {
      uint64_t v29 = *v27;
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%@ should have an associated context here", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v30 = +[NSAssertionHandler currentHandler];
  uint64_t v33 = v25 + 40;
  uint64_t v31 = *(void *)(v25 + 40);
  uint64_t v32 = *(void *)(v33 + 8);
  uint64_t v34 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitOperationsTracker.m"];
  [v30 handleFailureInMethod:v32 object:v31 file:v34 lineNumber:251 description:@"%@ should have an associated context here"];

  abort();
}

#error "1001C9BAC: call analysis failed (funcsize=66)"

#error "1001C9CC0: call analysis failed (funcsize=63)"

#error "1001C9DCC: call analysis failed (funcsize=63)"

void sub_1001C9E50(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Trying to create a CPLCloudKitScope with no zone", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitScope.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:65 description:@"Trying to create a CPLCloudKitScope with no zone"];

  abort();
}

void sub_1001C9F10(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Trying to create a CPLCloudKitScope with no zone ID", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitScope.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:73 description:@"Trying to create a CPLCloudKitScope with no zone ID"];

  abort();
}

void sub_1001C9FD0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Trying to create a CPLCloudKitScope with no zone ID", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitScope.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:87 description:@"Trying to create a CPLCloudKitScope with no zone ID"];

  abort();
}

void sub_1001CA090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = +[NSString stringWithUTF8String:"CPLCloudKitOperationType CPLCloudKitOperationTypeForScope(CPLCloudKitScope *__strong _Nonnull)"];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask.m"];
  [v4 handleFailureInFunction:v5, v6, 62, @"Invalid database scope for %@: %ld", a1, a2 file lineNumber description];

  abort();
}

void sub_1001CA12C()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"CKDatabaseScope CPLCKDatabaseScopeForCPLCloudKitOperationType(CPLCloudKitOperationType)"];
  uint64_t v2 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask.m"];
  [v0 handleFailureInFunction:v1 file:v2 lineNumber:71 description:@"Invalid source type for record copy"];

  abort();
}

void sub_1001CA1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  if (!_CPLSilentLogging)
  {
    uint64_t v24 = sub_1000673B0();
    if (sub_100030534(v24))
    {
      uint64_t v25 = objc_opt_class();
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v25;
      id v26 = v25;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Unexpected current user ID (%@)", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v27 = +[NSAssertionHandler currentHandler];
  uint64_t v28 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask.m"];
  objc_opt_class();
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001CA338: call analysis failed (funcsize=53)"

#error "1001CA41C: call analysis failed (funcsize=59)"

#error "1001CA518: call analysis failed (funcsize=59)"

#error "1001CA61C: call analysis failed (funcsize=62)"

#error "1001CA72C: call analysis failed (funcsize=64)"

#error "1001CA83C: call analysis failed (funcsize=62)"

#error "1001CA944: call analysis failed (funcsize=62)"

#error "1001CAA4C: call analysis failed (funcsize=62)"

#error "1001CAB54: call analysis failed (funcsize=62)"

void sub_1001CABD4(uint64_t a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_1000673B0();
    if (sub_100030534(v5))
    {
      uint64_t v6 = [a2 idleDescription];
      sub_1000643B8((void *)&_mh_execute_header, v7, v8, "Trying to launch %@ while %@", v9, v10, v11, v12, v18, v19, 2u);
    }
  }
  int v13 = +[NSAssertionHandler currentHandler];
  __int16 v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask.m"];
  uint64_t v15 = [a2 idleDescription];
  __int16 v16 = (void *)v15;
  if (v15) {
    CFStringRef v17 = (const __CFString *)v15;
  }
  else {
    CFStringRef v17 = @"running some other operation";
  }
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", a1, v17);

  abort();
}

#error "1001CAD88: call analysis failed (funcsize=60)"

#error "1001CAEA8: call analysis failed (funcsize=73)"

#error "1001CAFDC: call analysis failed (funcsize=73)"

#error "1001CB110: call analysis failed (funcsize=73)"

void sub_1001CB1A4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_1000673B0();
    if (sub_1000304D4(v5)) {
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "%@ while the task is not running", v8, v9, v10, v11, v14, v15, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  int v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransportTask.m"];
  [v12 handleFailureInMethod:a2, a1, v13, 1092, @"%@ while the task is not running", a1 object file lineNumber description];

  abort();
}

#error "1001CB304: call analysis failed (funcsize=62)"

#error "1001CB404: call analysis failed (funcsize=60)"

void sub_1001CB484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10006EB70();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Unable to find scoped identifier matching %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  int v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitReshareRecordsTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 157, @"Unable to find scoped identifier matching %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CB56C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10006EB70();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Unable to find destination shared record for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  int v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitReshareRecordsTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 159, @"Unable to find destination shared record for %@", *a1 object file lineNumber description];

  abort();
}

void sub_1001CB65C(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = [a1 componentsJoinedByString:@", "];
      *(_DWORD *)long long buf = 138412290;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to add keys %@ not bound to any property", buf, 0xCu);
    }
  }
  int v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordPropertyMapping.m"];
  int v10 = [a1 componentsJoinedByString:@", "];
  [v6 handleFailureInMethod:v7, v8, v9, 254, @"Trying to add keys %@ not bound to any property", v10 object file lineNumber description];

  abort();
}

void sub_1001CB790(void *a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(*(void *)(a1[6] + 8) + 24);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Trying to add shared properties to non-shareable class %@", buf, 0xCu);
    }
  }
  uint64_t v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[4];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordPropertyMapping.m"];
  [v4 handleFailureInMethod:v5, v6, v7, 274, @"Trying to add shared properties to non-shareable class %@", *(void *)(*(void *)(a1[6] + 8) + 24) object file lineNumber description];

  abort();
}

void sub_1001CB8A0(char a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100027BE8((void *)&_mh_execute_header, v5, v6, "%s called too many times on %@", v7, v8, v9, v10, v16, v17, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = a2[11];
  uint64_t v13 = a2[4];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordPropertyMapping.m"];
  if (a1) {
    uint64_t v15 = "BEGIN_SHARED_AND_PRIVATE_PROPERTIES";
  }
  else {
    uint64_t v15 = "BEGIN_SHARED_PROPERTIES";
  }
  [v11 handleFailureInMethod:v12, v13, v14, 275, @"%s called too many times on %@", v15, *(void *)(*(void *)(a2[6] + 8) + 24) object file lineNumber description];

  abort();
}

void sub_1001CB9D4(char a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100027BE8((void *)&_mh_execute_header, v5, v6, "%s called but expected %s", v7, v8, v9, v10, v17, v18, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordPropertyMapping.m"];
  if (a1) {
    uint64_t v15 = "END_SHARED_AND_PRIVATE_PROPERTIES";
  }
  else {
    uint64_t v15 = "END_SHARED_PROPERTIES";
  }
  if (a1) {
    uint64_t v16 = "END_SHARED_PROPERTIES";
  }
  else {
    uint64_t v16 = "END_SHARED_AND_PRIVATE_PROPERTIES";
  }
  objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", v12, v13, v14, 286, @"%s called but expected %s", v15, v16);

  abort();
}

void sub_1001CBAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unsupported %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordPropertyMapping.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 391, @"Unsupported %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CBBF0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10007BCC8((void *)&_mh_execute_header, v3, v4, "%@ has no associated record type", v5, v6, v7, v8, v12, v13, 2u);
    }
  }
  int v9 = +[NSAssertionHandler currentHandler];
  uint64_t v10 = +[NSString stringWithUTF8String:"NSString * _Nonnull CKRecordTypeForCPLRecordChangeClass(__unsafe_unretained Class _Nonnull)"];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  [v9 handleFailureInFunction:v10, v11, 87, @"%@ has no associated record type", a1 file lineNumber description];

  abort();
}

void sub_1001CBCE4(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10007BCC8((void *)&_mh_execute_header, v3, v4, "Missing record identifier for %@", v5, v6, v7, v8, v12, v13, 2u);
    }
  }
  int v9 = +[NSAssertionHandler currentHandler];
  uint64_t v10 = +[NSString stringWithUTF8String:"CKRecord * _Nonnull CPLBaseCKRecordFromCPLRecordChange(CPLRecordChange *__strong _Nonnull, CKRecordZone *__strong _Nonnull, CPLRecordTarget *__strong _Nonnull)"];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  [v9 handleFailureInFunction:v10, v11, 110, @"Missing record identifier for %@", a1 file lineNumber description];

  abort();
}

void sub_1001CBDE0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10007BCC8((void *)&_mh_execute_header, v3, v4, "Missing shared record identifier for %@", v5, v6, v7, v8, v12, v13, 2u);
    }
  }
  int v9 = +[NSAssertionHandler currentHandler];
  uint64_t v10 = +[NSString stringWithUTF8String:"CKRecord * _Nonnull CPLBaseSharedCKRecordFromCPLRecordChange(CPLRecordChange *__strong _Nonnull, CKRecordZone *__strong _Nonnull, CPLRecordTarget *__strong _Nonnull)"];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  [v9 handleFailureInFunction:v10, v11, 171, @"Missing shared record identifier for %@", a1 file lineNumber description];

  abort();
}

void sub_1001CBEDC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    int v3 = __CPLGenericOSLogDomain();
    if (sub_100030534(v3)) {
      sub_1000304B4((void *)&_mh_execute_header, v4, v5, "Unsupported class type: %@", v6, v7, v8, v9, v12, v13, 2u);
    }
  }
  uint64_t v10 = +[NSAssertionHandler currentHandler];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", a1);

  abort();
}

void sub_1001CBFC0()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (sub_100030534(v2))
    {
      int v3 = objc_opt_class();
      id v1 = sub_10007BD00(v3);
      sub_1000304B4((void *)&_mh_execute_header, v4, v5, "%@ should be directly deleted and not expunged", v6, v7, v8, v9, v11, v13, v14);
    }
  }
  uint64_t v10 = +[NSAssertionHandler currentHandler];
  +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  objc_claimAutoreleasedReturnValue();
  uint64_t v12 = sub_10007BCE8();
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", v12);

  abort();
}

void sub_1001CC0A8()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (sub_100030534(v2))
    {
      int v3 = objc_opt_class();
      id v1 = sub_10007BD00(v3);
      sub_1000304B4((void *)&_mh_execute_header, v4, v5, "%@ does not support deletion", v6, v7, v8, v9, v11, v13, v14);
    }
  }
  uint64_t v10 = +[NSAssertionHandler currentHandler];
  +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  objc_claimAutoreleasedReturnValue();
  uint64_t v12 = sub_10007BCE8();
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", v12);

  abort();
}

void sub_1001CC190()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (sub_100030534(v2))
    {
      int v3 = objc_opt_class();
      id v1 = sub_10007BD00(v3);
      sub_1000304B4((void *)&_mh_execute_header, v4, v5, "%@ should be directly deleted and not expunged", v6, v7, v8, v9, v11, v13, v14);
    }
  }
  uint64_t v10 = +[NSAssertionHandler currentHandler];
  +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  objc_claimAutoreleasedReturnValue();
  uint64_t v12 = sub_10007BCE8();
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", v12);

  abort();
}

void sub_1001CC278()
{
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = __CPLGenericOSLogDomain();
    if (sub_100030534(v2))
    {
      int v3 = objc_opt_class();
      id v1 = sub_10007BD00(v3);
      sub_1000304B4((void *)&_mh_execute_header, v4, v5, "%@ does not support deletion", v6, v7, v8, v9, v11, v13, v14);
    }
  }
  uint64_t v10 = +[NSAssertionHandler currentHandler];
  +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  objc_claimAutoreleasedReturnValue();
  uint64_t v12 = sub_10007BCE8();
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", v12);

  abort();
}

void sub_1001CC360(uint64_t a1, uint64_t a2)
{
  int v4 = +[NSAssertionHandler currentHandler];
  int v5 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  [v4 handleFailureInMethod:a1, a2, v5, 826, @"Don't know how to clean %@", a2 object file lineNumber description];

  abort();
}

void sub_1001CC3E0(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = +[NSAssertionHandler currentHandler];
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPL_base.m"];
  int v7 = [a1 localizedDescription];
  objc_msgSend((id)sub_10003054C(), "handleFailureInMethod:object:file:lineNumber:description:", a3, v7);

  abort();
}

void sub_1001CC478(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_10007DD68();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to fetch records using a container operation", v7, 2u);
    }
  }
  int v5 = +[NSAssertionHandler currentHandler];
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordFetchTask.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:75 description:@"Trying to fetch records using a container operation"];

  abort();
}

void sub_1001CC548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10007DD68();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "%@ should not be expunged here", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint8_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordFetchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 523, @"%@ should not be expunged here", a1 object file lineNumber description];

  abort();
}

void sub_1001CC630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_10007DD68();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Asked to fetch %@ with no proposed target", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint8_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordFetchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 598, @"Asked to fetch %@ with no proposed target", a1 object file lineNumber description];

  abort();
}

void sub_1001CC718(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_10007DD68();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Impossible to find target for %@", buf, 0xCu);
    }
  }
  int v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordFetchTask.m"];
  [v5 handleFailureInMethod:v6, v7, v8, 711, @"Impossible to find target for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CC814(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100083F5C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "We should have a destination scope identifier here", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFixUpSparseRecordTask.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:77 description:@"We should have a destination scope identifier here"];

  abort();
}

void sub_1001CC8D4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_100083F5C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "We should have a destination CloudKit scope here", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFixUpSparseRecordTask.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:79 description:@"We should have a destination CloudKit scope here"];

  abort();
}

void sub_1001CC994(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_100083F5C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = [a1 realCloudScopedIdentifier];
      uint64_t v8 = [a1 privateCloudScopedIdentifier];
      *(_DWORD *)long long buf = 138412546;
      uint8_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to find CloudKit scope for %@ (fixing %@)", buf, 0x16u);
    }
  }
  uint64_t v9 = +[NSAssertionHandler currentHandler];
  uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFixUpSparseRecordTask.m"];
  int v11 = [a1 realCloudScopedIdentifier];
  int v12 = [a1 privateCloudScopedIdentifier];
  [v9 handleFailureInMethod:a2, a3, v10, 66, @"Unable to find CloudKit scope for %@ (fixing %@)", v11, v12 object file lineNumber description];

  abort();
}

void sub_1001CCAE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_100083F5C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to transform a CK error to a CPL error: %@", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *a3;
  uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitFixUpSparseRecordTask.m"];
  [v7 handleFailureInMethod:v8, v9, v10, 91, @"Failed to transform a CK error to a CPL error: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CCBE8(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = NSStringFromSelector(a1);
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "%@ was called too many times", v8, v9, v10, v11, v15, v16, 2u);
    }
  }
  uint64_t v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
  uint8_t v14 = NSStringFromSelector(a1);
  [v12 handleFailureInMethod:a1, a2, v13, 1575, @"%@ was called too many times", v14 object file lineNumber description];

  abort();
}

void sub_1001CCCF4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "expect error", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:1735 description:@"expect error"];

  abort();
}

void sub_1001CCDC4(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "Engine was unable to set a file URL on recovered resource %@", v7, v8, v9, v10, v15, v16, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 40);
  uint8_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
  [v11 handleFailureInMethod:v12, v13, v14, 2110, @"Engine was unable to set a file URL on recovered resource %@", *a1 object file lineNumber description];

  abort();
}

void sub_1001CCEB8(void *a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a1;
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "A helper for %@ has already been registered", buf, 0xCu);
    }
  }
  int v8 = +[NSAssertionHandler currentHandler];
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *a3;
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m"];
  [v8 handleFailureInMethod:v9, v10, v11, 2367, @"A helper for %@ has already been registered", *a1 object file lineNumber description];

  abort();
}

void sub_1001CCFC0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10009202C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "missing error parameter", v8, v9, v10, v11, 0);
    }
  }
  uint64_t v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:149 description:@"missing error parameter"];

  abort();
}

void sub_1001CD078(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10009202C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "Did not manage to produce a group of tasks to download", v8, v9, v10, v11, 0);
    }
  }
  uint64_t v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:406 description:@"Did not manage to produce a group of tasks to download"];

  abort();
}

void sub_1001CD130(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10009202C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "We should at least be able to download the first task", v8, v9, v10, v11, 0);
    }
  }
  uint64_t v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:381 description:@"We should at least be able to download the first task"];

  abort();
}

void sub_1001CD1E8(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = sub_10009202C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "invalid scope", v8, v9, v10, v11, 0);
    }
  }
  uint64_t v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *a2;
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  [v12 handleFailureInMethod:v13 object:v14 file:v15 lineNumber:423 description:@"invalid scope"];

  abort();
}

void sub_1001CD2A8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10009202C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [a1 resource];
      sub_1000643B8((void *)&_mh_execute_header, v7, v8, "%@ (%@) has no cloud resource to download", v9, v10, v11, v12, v16, v17, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  uint64_t v15 = [a1 resource];
  [v13 handleFailureInMethod:a2, a3, v14, 477, @"%@ (%@) has no cloud resource to download", a1, v15 object file lineNumber description];

  abort();
}

void sub_1001CD3C4(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10009202C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [a1 resource];
      sub_1000643B8((void *)&_mh_execute_header, v7, v8, "%@ (%@) has no cloud resource to download", v9, v10, v11, v12, v16, v17, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitResourcesDownloadTask.m"];
  uint64_t v15 = [a1 resource];
  [v13 handleFailureInMethod:a2, a3, v14, 696, @"%@ (%@) has no cloud resource to download", a1, v15 object file lineNumber description];

  abort();
}

void sub_1001CD4E0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_1000971FC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Missing shared zone identification", v7, 2u);
    }
  }
  int v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordUpdateTask.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:55 description:@"Missing shared zone identification"];

  abort();
}

void sub_1001CD5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1000971FC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Trying to create sparse private records for a non supported record class %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordUpdateTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 49, @"Trying to create sparse private records for a non supported record class %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CD698(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_1000971FC();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Missing private record ID matching %@", buf, 0xCu);
    }
  }
  int v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = *(void *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordUpdateTask.m"];
  [v5 handleFailureInMethod:v6, v7, v8, 74, @"Missing private record ID matching %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CD794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1000971FC();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Missing target for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitSimpleRecordUpdateTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 363, @"Missing target for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CD87C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5)) {
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Root record for %@ has not type", v8, v9, v10, v11, v14, v15, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  [v12 handleFailureInMethod:a2, a1, v13, 154, @"Root record for %@ has not type", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_1001CD95C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5)) {
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Scope change for %@ should not be nil", v8, v9, v10, v11, v14, v15, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  [v12 handleFailureInMethod:a2, a1, v13, 163, @"Scope change for %@ should not be nil", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_1001CDA3C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5)) {
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Root record for %@ has not type", v8, v9, v10, v11, v14, v15, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  [v12 handleFailureInMethod:a2, a1, v13, 191, @"Root record for %@ has not type", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_1001CDB1C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5)) {
      sub_1000304EC((void *)&_mh_execute_header, v6, v7, "Missing share types for %@", v8, v9, v10, v11, v14, v15, 2u);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  [v12 handleFailureInMethod:a2, a1, v13, 210, @"Missing share types for %@", *(void *)(a1 + 32) object file lineNumber description];

  abort();
}

void sub_1001CDBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v7 = __CPLGenericOSLogDomain();
    if (sub_100030534(v7)) {
      sub_1000643B8((void *)&_mh_execute_header, v8, v9, "Invalid scope change %@ for %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  [v14 handleFailureInMethod:a3, a2, v15, 809, @"Invalid scope change %@ for %@", a1, a2 object file lineNumber description];

  abort();
}

void sub_1001CDCE8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (sub_100030534(v6))
    {
      int v7 = [a1 engineScope];
      int v8 = objc_opt_class();
      id v9 = sub_1000A06F4(v8);
      sub_1000643B8((void *)&_mh_execute_header, v10, v11, "Unexpected class for %@: %@", v12, v13, v14, v15, v19, v20, v21);
    }
  }
  uint64_t v16 = +[NSAssertionHandler currentHandler];
  uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  uint64_t v18 = [a1 engineScope];
  [v16 handleFailureInMethod:a3, a1, v17, 1000, @"Unexpected class for %@: %@", v18, objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001CDE04(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (sub_100030534(v6))
    {
      int v7 = [a1 engineScope];
      int v8 = objc_opt_class();
      id v9 = sub_1000A06F4(v8);
      sub_1000643B8((void *)&_mh_execute_header, v10, v11, "Unexpected class for %@: %@", v12, v13, v14, v15, v19, v20, v21);
    }
  }
  uint64_t v16 = +[NSAssertionHandler currentHandler];
  uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  uint64_t v18 = [a1 engineScope];
  [v16 handleFailureInMethod:a3, a1, v17, 1033, @"Unexpected class for %@: %@", v18, objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001CDF20(void *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (sub_100030534(v6))
    {
      int v7 = [a1 engineScope];
      int v8 = objc_opt_class();
      id v9 = sub_1000A06F4(v8);
      sub_1000643B8((void *)&_mh_execute_header, v10, v11, "Unexpected class for %@: %@", v12, v13, v14, v15, v19, v20, v21);
    }
  }
  uint64_t v16 = +[NSAssertionHandler currentHandler];
  uint64_t v17 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitZoneIdentification.m"];
  uint64_t v18 = [a1 engineScope];
  [v16 handleFailureInMethod:a3, a1, v17, 1066, @"Unexpected class for %@: %@", v18, objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001CE03C(void *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_1000A1A90();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "Failed to find scoped identifier for %@", v7, v8, v9, v10, v15, v16, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 48);
  int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitDownloadComputeStatesTask.m"];
  [v11 handleFailureInMethod:v12, v13, v14, 144, @"Failed to find scoped identifier for %@", *a1 object file lineNumber description];

  abort();
}

void sub_1001CE130(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_1000A1A90();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "%@ should have a payload file", v7, v8, v9, v10, v15, v16, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 48);
  int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitDownloadComputeStatesTask.m"];
  [v11 handleFailureInMethod:v12, v13, v14, 177, @"%@ should have a payload file", a1 object file lineNumber description];

  abort();
}

void sub_1001CE21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_1000A2DB8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Asked to fetch shared records %@ but we have no shared sync zone to work with", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitUploadBatchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 408, @"Asked to fetch shared records %@ but we have no shared sync zone to work with", a1 object file lineNumber description];

  abort();
}

void sub_1001CE304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_1000A2DB8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Asked to fetch shared records %@ but we have no shared sync zone to work with", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  int v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitUploadBatchTask.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 444, @"Asked to fetch shared records %@ but we have no shared sync zone to work with", a1 object file lineNumber description];

  abort();
}

void sub_1001CE3EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = sub_1000A2DB8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Failed to transform a CK error to a CPL error: %@", v9, v10, v11, v12, v17, v18, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *a3;
  uint64_t v16 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitUploadBatchTask.m"];
  [v13 handleFailureInMethod:v14, v15, v16, 560, @"Failed to transform a CK error to a CPL error: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CE4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to find a scoped identifier for %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCKRecordTranslator.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 61, @"Unable to find a scoped identifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CE5D4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "Cannot have nil personIdentifier for %@", v7, v8, v9, v10, v13, v14, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPLFaceCrop.i"];
  [v11 handleFailureInMethod:a2, a1, v12, 11, @"Cannot have nil personIdentifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CE6B4(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "Missing resourceData for %@", v7, v8, v9, v10, v13, v14, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPLFaceCrop.i"];
  [v11 handleFailureInMethod:a2, a1, v12, 25, @"Missing resourceData for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CE794(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000304EC((void *)&_mh_execute_header, v5, v6, "%@ should have a master", v7, v8, v9, v10, v13, v14, 2u);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CKRecord+CPLAsset.i"];
  [v11 handleFailureInMethod:a2, a1, v12, 87, @"%@ should have a master", a1 object file lineNumber description];

  abort();
}

void sub_1001CE874(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "expect error", v7, 2u);
    }
  }
  int v5 = +[NSAssertionHandler currentHandler];
  int v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitErrors.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:67 description:@"expect error"];

  abort();
}

void sub_1001CE944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    int v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "incorrect partial failure error: %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitErrors.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 656, @"incorrect partial failure error: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CEA3C(void *a1, void *a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *a1;
      uint64_t v6 = a2[4];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "incorrect item (not %@) in partial failure error %@", buf, 0x16u);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = a2[7];
  uint64_t v9 = a2[8];
  uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitErrors.m"];
  [v7 handleFailureInMethod:v8, v9, v10, 660, @"incorrect item (not %@) in partial failure error %@", *a1, a2[4] object file lineNumber description];

  abort();
}

void sub_1001CEB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Current session does not have a task of class %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitOperationCounter.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 86, @"Current session does not have a task of class %@", a1 object file lineNumber description];

  abort();
}

void sub_1001CEC48()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_1000BC19C();
    if (sub_1000304D4(v1))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Trying to launch auxiliary operation but it is not relevant to begin with", v4, 2u);
    }
  }
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  int v3 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCleanupStagedScopeTask.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001CED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v21;
  a21 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if (!_CPLSilentLogging)
  {
    uint64_t v29 = sub_1000BC19C();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *v28;
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "main %@ is already launched", (uint8_t *)&buf, 0xCu);
    }
  }
  uint64_t v31 = +[NSAssertionHandler currentHandler];
  uint64_t v32 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitCleanupStagedScopeTask.m"];
  [v31 handleFailureInMethod:v26 object:v24 file:v32 lineNumber:242 description:@"main %@ is already launched"];

  abort();
}

#error "1001CEE88: call analysis failed (funcsize=59)"

#error "1001CEF84: call analysis failed (funcsize=59)"

#error "1001CF080: call analysis failed (funcsize=59)"

#error "1001CF17C: call analysis failed (funcsize=59)"

#error "1001CF274: call analysis failed (funcsize=54)"

#error "1001CF360: call analysis failed (funcsize=59)"

void sub_1001CF3DC(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = NSStringFromSelector(a1);
      uint64_t v6 = *(void *)(a2 + 32);
      *(_DWORD *)long long buf = 138412546;
      int v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ called too many times for %@", buf, 0x16u);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitMetric.m"];
  uint64_t v9 = NSStringFromSelector(a1);
  [v7 handleFailureInMethod:a1, a2, v8, 118, @"%@ called too many times for %@", v9, *(void *)(a2 + 32) object file lineNumber description];

  abort();
}

void sub_1001CF50C(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_1000C1468();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "We should have the current user ID here", v9, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *a2;
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitExitSharedLibraryTask.m"];
  [v5 handleFailureInMethod:v6 object:v7 file:v8 lineNumber:93 description:@"We should have the current user ID here"];

  abort();
}

void sub_1001CF5E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1000C1468();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to compute staging scope identifier from staging zone ID %@", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *a3;
  uint64_t v10 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitExitSharedLibraryTask.m"];
  [v7 handleFailureInMethod:v8, v9, v10, 129, @"Failed to compute staging scope identifier from staging zone ID %@", a1 object file lineNumber description];

  abort();
}

#error "1001CF754: call analysis failed (funcsize=52)"

#error "1001CF83C: call analysis failed (funcsize=55)"

#error "1001CF92C: call analysis failed (funcsize=58)"

#error "1001CFA20: call analysis failed (funcsize=55)"

#error "1001CFB08: call analysis failed (funcsize=54)"

#error "1001CFBFC: call analysis failed (funcsize=59)"

#error "1001CFCF4: call analysis failed (funcsize=58)"

void sub_1001CFD70(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = __CPLGenericOSLogDomain();
    if (sub_1000304D4(v5))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "There should be no resources to check on server when not asked to perform such check", v10, 2u);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *a2;
  uint64_t v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClientToEngine/CPLDirectLibraryManager.m"];
  [v6 handleFailureInMethod:v7 object:v8 file:v9 lineNumber:2532 description:@"There should be no resources to check on server when not asked to perform such check"];

  abort();
}

#error "1001CFEC0: call analysis failed (funcsize=60)"

void sub_1001CFF40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10016CEC4();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(*a1 + a2);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Compacted batch for %@ is nil", buf, 0xCu);
    }
  }
  uint64_t v8 = +[NSAssertionHandler currentHandler];
  uint64_t v9 = *(void *)(a3 + 64);
  uint64_t v10 = *a1;
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClientToEngine/CPLDirectPullChangeSession.m"];
  [v8 handleFailureInMethod:v9, v10, v11, 177, @"Compacted batch for %@ is nil", *(void *)(*a1 + a2) object file lineNumber description];

  abort();
}

void sub_1001D0050(char a1, uint64_t a2)
{
  if (a1)
  {
    int v3 = sub_10016CEC4();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "We should not have a non-empty batch yet as we are trying to look for one", v8, 2u);
    }
  }
  int v4 = +[NSAssertionHandler currentHandler];
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClientToEngine/CPLDirectPullChangeSession.m"];
  [v4 handleFailureInMethod:v5 object:v6 file:v7 lineNumber:238 description:@"We should not have a non-empty batch yet as we are trying to look for one"];

  abort();
}

void sub_1001D0118(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = NSStringFromSelector(a1);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ called too many times", buf, 0xCu);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClientToEngine/CPLDirectChangeSession.m"];
  uint64_t v8 = NSStringFromSelector(a1);
  [v6 handleFailureInMethod:a1, a2, v7, 146, @"%@ called too many times", v8 object file lineNumber description];

  abort();
}

void sub_1001D0234(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_100171058();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = [*(id *)(*(void *)(*(void *)a1 + 8) + 40) incomingBatch];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create a diff from incoming batch:\n%@", buf, 0xCu);
    }
  }
  uint64_t v8 = +[NSAssertionHandler currentHandler];
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *a3;
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/DirectClientToEngine/CPLDirectPushChangeSession.m"];
  uint64_t v12 = [*(id *)(*(void *)(*(void *)a1 + 8) + 40) incomingBatch];
  [v8 handleFailureInMethod:v9, v10, v11, 195, @"Failed to create a diff from incoming batch:\n%@", v12 object file lineNumber description];

  abort();
}

void sub_1001D036C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_10017319C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "invalid scope in scope storage: missing identifier", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  uint64_t v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteScopeStorage.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:62 description:@"invalid scope in scope storage: missing identifier"];

  abort();
}

void sub_1001D042C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteScopeStorage.m"];
  uint64_t v8 = +[CPLScopeChange descriptionForScopeType:a1];
  [v6 handleFailureInMethod:a2, a3, v7, 313, @"%@ should not be directly synchronized with client", v8 object file lineNumber description];

  abort();
}

void sub_1001D04D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10017319C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Missing scope types in order of scope types for %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteScopeStorage.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 778, @"Missing scope types in order of scope types for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D05B8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    int v4 = sub_10017319C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "Unable to determine transport group class", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteScopeStorage.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:1699 description:@"Unable to determine transport group class"];

  abort();
}

void sub_1001D0678(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10017319C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 138412290;
      id v4 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Stored transport group does not seem supported anymore (%@)", (uint8_t *)&v3, 0xCu);
    }
  }
  objc_end_catch();
}

void sub_1001D0744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_10017319C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Can't serialize %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteScopeStorage.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 1724, @"Can't serialize %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D082C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Can't get related scoped identifier from %@", buf, 0xCu);
    }
  }
  int v7 = +[NSAssertionHandler currentHandler];
  int v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLStoreMigrationAssistant_101386451.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 172, @"Can't get related scoped identifier from %@", a1 object file lineNumber description];

  abort();
}

#error "1001D09B4: call analysis failed (funcsize=64)"

#error "1001D0AC8: call analysis failed (funcsize=69)"

#error "1001D0BDC: call analysis failed (funcsize=56)"

#error "1001D0CCC: call analysis failed (funcsize=56)"

#error "1001D0DBC: call analysis failed (funcsize=56)"

#error "1001D0EAC: call analysis failed (funcsize=56)"

#error "1001D0F8C: call analysis failed (funcsize=50)"

#error "1001D1064: call analysis failed (funcsize=50)"

#error "1001D113C: call analysis failed (funcsize=50)"

#error "1001D1214: call analysis failed (funcsize=50)"

void sub_1001D1278(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_1001825C0();
    if (sub_1000304D4(v5))
    {
      id v6 = (id)objc_opt_class();
      sub_1000304EC((void *)&_mh_execute_header, v7, v8, "Trying to recreate main table for %@ while it was just already created", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  uint64_t v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStorage.m"];
  [v13 handleFailureInMethod:a2, a1, v14, 467, @"Trying to recreate main table for %@ while it was just already created", objc_opt_class() object file lineNumber description];

  abort();
}

#error "1001D13E8: call analysis failed (funcsize=55)"

void sub_1001D1458(uint64_t a1, uint64_t *a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = NSStringFromSelector(*(SEL *)(a1 + 48));
      *(_DWORD *)long long buf = 138412290;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ called too many times", buf, 0xCu);
    }
  }
  id v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *a2;
  int v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Base/CPLBaseSyncManager.m"];
  int v10 = NSStringFromSelector(*(SEL *)(a1 + 48));
  [v6 handleFailureInMethod:v7, v8, v9, 232, @"%@ called too many times", v10 object file lineNumber description];

  abort();
}

void sub_1001D157C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "We should not have a progress here", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  id v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Base/CPLBaseSyncManager.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:511 description:@"We should not have a progress here"];

  abort();
}

void sub_1001D164C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10018796C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "Trying to schedule client cache drop twice", v8, v9, v10, v11, 0);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:623 description:@"Trying to schedule client cache drop twice"];

  abort();
}

void sub_1001D1704(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10018796C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "Trying to open the upgrade journal twice", v8, v9, v10, v11, 0);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1037 description:@"Trying to open the upgrade journal twice"];

  abort();
}

void sub_1001D17BC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_begin_catch(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  objc_end_catch();
}

void sub_1001D180C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_begin_catch(a1);
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  objc_end_catch();
}

void sub_1001D185C(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10018796C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "Unable to determine user identifier class", v8, v9, v10, v11, 0);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  uint64_t v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1552 description:@"Unable to determine user identifier class"];

  abort();
}

void sub_1001D1914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_10018796C();
    if (sub_100030534(v7)) {
      sub_1000304B4((void *)&_mh_execute_header, v8, v9, "Can't serialize %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v14 handleFailureInMethod:a2, a3, v15, 1580, @"Can't serialize %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D19F4(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_10018796C();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 138412290;
      id v4 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unable to unarchive stored change session update: %@", (uint8_t *)&v3, 0xCu);
    }
  }
  objc_end_catch();
}

void sub_1001D1AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_10018796C();
    if (sub_100030534(v7)) {
      sub_1000304B4((void *)&_mh_execute_header, v8, v9, "Unable to archive %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v14 handleFailureInMethod:a2, a3, v15, 1761, @"Unable to archive %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D1BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_10018796C();
    if (sub_100030534(v7)) {
      sub_1000304B4((void *)&_mh_execute_header, v8, v9, "Failed to archive %@", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v14 handleFailureInMethod:a2, a3, v15, 1825, @"Failed to archive %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D1C80(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v5 = sub_10018796C();
    if (sub_1000304D4(v5)) {
      sub_10000572C((void *)&_mh_execute_header, v6, v7, "Trying to access client cache outside of authorized migration", v8, v9, v10, v11, 0);
    }
  }
  int v12 = +[NSAssertionHandler currentHandler];
  int v13 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v12 handleFailureInMethod:a1 object:a2 file:v13 lineNumber:1995 description:@"Trying to access client cache outside of authorized migration"];

  abort();
}

void sub_1001D1D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_10018796C();
    if (sub_100030534(v7)) {
      sub_1000304B4((void *)&_mh_execute_header, v8, v9, "%@ is not a dynamically created storage", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v14 handleFailureInMethod:a2, a3, v15, 2143, @"%@ is not a dynamically created storage", a1 object file lineNumber description];

  abort();
}

void sub_1001D1E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v7 = sub_10018796C();
    if (sub_100030534(v7)) {
      sub_1000304B4((void *)&_mh_execute_header, v8, v9, "%@ is not a dynamically created storage", v10, v11, v12, v13, v16, v17, 2u);
    }
  }
  uint64_t v14 = +[NSAssertionHandler currentHandler];
  uint64_t v15 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m"];
  [v14 handleFailureInMethod:a2, a3, v15, 2160, @"%@ is not a dynamically created storage", a1 object file lineNumber description];

  abort();
}

void sub_1001D1EF8(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10019316C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "scope index has not been set", v7, 2u);
    }
  }
  uint64_t v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteOutgoingResources.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:88 description:@"scope index has not been set"];

  abort();
}

#error "1001D204C: call analysis failed (funcsize=60)"

#error "1001D214C: call analysis failed (funcsize=60)"

#error "1001D224C: call analysis failed (funcsize=60)"

#error "1001D234C: call analysis failed (funcsize=60)"

#error "1001D244C: call analysis failed (funcsize=60)"

#error "1001D254C: call analysis failed (funcsize=60)"

void sub_1001D25C8(const char *a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = NSStringFromSelector(a1);
      *(_DWORD *)long long buf = 138412290;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@ does not support type DATA", buf, 0xCu);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteUtilites.m"];
  int v8 = NSStringFromSelector(a1);
  [v6 handleFailureInMethod:a1, a2, v7, 113, @"%@ does not support type DATA", v8 object file lineNumber description];

  abort();
}

void sub_1001D26E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class();
      id v8 = v7;
      *(_DWORD *)long long buf = 138413058;
      uint64_t v14 = a1;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      id v18 = (id)objc_opt_class();
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      id v9 = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid value for %@ (%@): %@ '%@'", buf, 0x2Au);
    }
  }
  int v10 = +[NSAssertionHandler currentHandler];
  int v11 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteUtilites.m"];
  uint64_t v12 = objc_opt_class();
  [v10 handleFailureInMethod:a3, a1, v11, 136, @"Invalid value for %@ (%@): %@ '%@'", a1, v12, objc_opt_class(), a2 object file lineNumber description];

  abort();
}

void sub_1001D2844()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "scope index should have already been set", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D28F8()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "scope index should have been set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D29AC()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Scope index should be set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D2A60()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "scope index should be set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D2B14()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Scope index should be set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D2BC8()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "Scope index should be set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D2C7C()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10019FCA8();
    if (sub_1000304D4(v1)) {
      sub_10000572C((void *)&_mh_execute_header, v2, v3, "scope index should be set here", v4, v5, v6, v7, 0);
    }
  }
  id v8 = +[NSAssertionHandler currentHandler];
  id v9 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteResourceDownloadQueue.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D2D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1001A2DC8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Getting a remapped change from transient repository without an identifier: %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  int v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteTransientRepository.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 398, @"Getting a remapped change from transient repository without an identifier: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D2E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1001A2DC8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000304B4((void *)&_mh_execute_header, v7, v8, "Popping a remapped change from transient repository without an identifier: %@", v9, v10, v11, v12, v15, v16, 2u);
    }
  }
  int v13 = +[NSAssertionHandler currentHandler];
  uint64_t v14 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteTransientRepository.m"];
  [v13 handleFailureInMethod:a2, a3, v14, 418, @"Popping a remapped change from transient repository without an identifier: %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D2F00(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1001A8F2C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "scope index should be set here", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteChangePipe.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:241 description:@"scope index should be set here"];

  abort();
}

void sub_1001D2FC0(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = sub_1001A8F2C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10000572C((void *)&_mh_execute_header, v5, v6, "scope index should be set here", v7, v8, v9, v10, 0);
    }
  }
  int v11 = +[NSAssertionHandler currentHandler];
  int v12 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteChangePipe.m"];
  [v11 handleFailureInMethod:a1 object:a2 file:v12 lineNumber:281 description:@"scope index should be set here"];

  abort();
}

void sub_1001D3080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1001AE810();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@ should have a scope index set here", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePendingRecordChecks.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 60, @"%@ should have a scope index set here", a1 object file lineNumber description];

  abort();
}

void sub_1001D3178(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = (id)objc_opt_class();
      id v5 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "No platform object specified for %@", buf, 0xCu);
    }
  }
  uint64_t v6 = +[NSAssertionHandler currentHandler];
  uint64_t v7 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteClientCacheMigrator.m"];
  [v6 handleFailureInMethod:a2, a1, v7, 19, @"No platform object specified for %@", objc_opt_class() object file lineNumber description];

  abort();
}

void sub_1001D3284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!_CPLSilentLogging)
  {
    uint64_t v6 = sub_1001AF35C();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Missing file storage identifier for %@", buf, 0xCu);
    }
  }
  uint64_t v7 = +[NSAssertionHandler currentHandler];
  uint64_t v8 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteRecordComputeStatePushQueue.m"];
  [v7 handleFailureInMethod:a2, a3, v8, 137, @"Missing file storage identifier for %@", a1 object file lineNumber description];

  abort();
}

void sub_1001D337C()
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_1001B2590();
    if (sub_1000304D4(v1))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Scope index should have been set here", v4, 2u);
    }
  }
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D3440()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  id v1 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D34B4()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  id v1 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D3528()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  id v1 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

#error "1001D3610: call analysis failed (funcsize=50)"

#error "1001D36F4: call analysis failed (funcsize=55)"

#error "1001D37E8: call analysis failed (funcsize=62)"

#error "1001D38DC: call analysis failed (funcsize=50)"

#error "1001D39B4: call analysis failed (funcsize=50)"

#error "1001D3A8C: call analysis failed (funcsize=50)"

#error "1001D3B64: call analysis failed (funcsize=50)"

#error "1001D3C48: call analysis failed (funcsize=59)"

#error "1001D3D38: call analysis failed (funcsize=50)"

#error "1001D3E1C: call analysis failed (funcsize=59)"

void sub_1001D3EA0(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (!_CPLSilentLogging)
  {
    uint64_t v2 = sub_1001B2590();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 138412290;
      id v4 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Stored extracted batch does not seem supported anymore (%@)", (uint8_t *)&v3, 0xCu);
    }
  }
  objc_end_catch();
}

#error "1001D3FE0: call analysis failed (funcsize=50)"

#error "1001D40B8: call analysis failed (funcsize=50)"

#error "1001D4190: call analysis failed (funcsize=50)"

#error "1001D4268: call analysis failed (funcsize=50)"

#error "1001D4340: call analysis failed (funcsize=50)"

#error "1001D4420: call analysis failed (funcsize=50)"

#error "1001D4500: call analysis failed (funcsize=50)"

#error "1001D45D8: call analysis failed (funcsize=50)"

void sub_1001D463C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100030520();
  a20 = v22;
  a21 = v23;
  uint64_t v25 = v24;
  if (!_CPLSilentLogging)
  {
    uint64_t v26 = sub_1001B2590();
    if (sub_1000304D4(v26))
    {
      uint64_t v27 = objc_opt_class();
      id v28 = v27;
      uint64_t v29 = NSStringFromSelector(v25);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v27;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Trying to call -[%@ %@] too many times", (uint8_t *)&buf, 0x16u);
    }
  }
  uint64_t v30 = +[NSAssertionHandler currentHandler];
  uint64_t v31 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequelitePushRepository.m"];
  objc_opt_class();
  uint64_t v32 = NSStringFromSelector(v25);
  objc_msgSend((id)sub_10003050C(), "handleFailureInMethod:object:file:lineNumber:description:");

  abort();
}

void sub_1001D4778(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = __CPLGenericOSLogDomain();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = 0x404E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Expiration interval should be greater or equal to %f", buf, 0xCu);
    }
  }
  id v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteTodoVar.m"];
  objc_msgSend(v5, "handleFailureInMethod:object:file:lineNumber:description:", a1, a2, v6, 53, @"Expiration interval should be greater or equal to %f", 0x404E000000000000);

  abort();
}

void sub_1001D4870(uint64_t a1, uint64_t a2)
{
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1001BF7B8();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Trying to store a file without an finger print", v7, 2u);
    }
  }
  id v5 = +[NSAssertionHandler currentHandler];
  uint64_t v6 = +[NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Resources/CPLBucketFileStorage.m"];
  [v5 handleFailureInMethod:a1 object:a2 file:v6 lineNumber:77 description:@"Trying to store a file without an finger print"];

  abort();
}

uint64_t URLResourceValues.fileSize.getter()
{
  return URLResourceValues.fileSize.getter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.debugDescription.getter()
{
  return Data.debugDescription.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return Date.init(timeIntervalSinceNow:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter()
{
  return dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
}

uint64_t dispatch thunk of CodeOperation.dataProtectionType.setter()
{
  return dispatch thunk of CodeOperation.dataProtectionType.setter();
}

uint64_t dispatch thunk of CodeOperation.perRecordProgressBlock.setter()
{
  return dispatch thunk of CodeOperation.perRecordProgressBlock.setter();
}

uint64_t dispatch thunk of CodeOperation.shouldSendRecordPCSKeys.setter()
{
  return dispatch thunk of CodeOperation.shouldSendRecordPCSKeys.setter();
}

uint64_t dispatch thunk of CodeOperation.perRecordCompletionBlock.setter()
{
  return dispatch thunk of CodeOperation.perRecordCompletionBlock.setter();
}

uint64_t dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter()
{
  return dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter();
}

uint64_t dispatch thunk of CodeOperation.shouldFetchAssetContentInMemory.setter()
{
  return dispatch thunk of CodeOperation.shouldFetchAssetContentInMemory.setter();
}

uint64_t CodeOperation.init(service:functionName:request:destinationServer:)()
{
  return CodeOperation.init(service:functionName:request:destinationServer:)();
}

uint64_t dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter()
{
  return dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter();
}

uint64_t CKCodeOperation.init(functionName:request:)()
{
  return CKCodeOperation.init(functionName:request:)();
}

uint64_t dispatch thunk of CKCodeOperation.request.setter()
{
  return dispatch thunk of CKCodeOperation.request.setter();
}

uint64_t Ckcode_RecordTransport.localSerialization.getter()
{
  return Ckcode_RecordTransport.localSerialization.getter();
}

uint64_t Ckcode_RecordTransport.init()()
{
  return Ckcode_RecordTransport.init()();
}

uint64_t type metadata accessor for Ckcode_RecordTransport()
{
  return type metadata accessor for Ckcode_RecordTransport();
}

uint64_t Ckcode_RecordTransport.init(_:)()
{
  return Ckcode_RecordTransport.init(_:)();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return dispatch thunk of Decoder.handleConflictingOneOf()();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.debugDescription.getter()
{
  return Message.debugDescription.getter();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t static Message.with(_:)()
{
  return static Message.with(_:)();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t _NameMap.init()()
{
  return _NameMap.init()();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t CMTimeRange.isValid.getter()
{
  return CMTimeRange.isValid.getter();
}

uint64_t CKCodeService.add<A, B>(_:)()
{
  return CKCodeService.add<A, B>(_:)();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t CKRecordKeyValueSetting.subscript.getter()
{
  return CKRecordKeyValueSetting.subscript.getter();
}

uint64_t CKRecord.init(_:)()
{
  return CKRecord.init(_:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.distance(from:to:)()
{
  return Substring.distance(from:to:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Int32.init(truncating:)()
{
  return Int32.init(truncating:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return _CFNotificationCenterGetDistributedCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

void CGImageDestinationAddImageFromSource(CGImageDestinationRef idst, CGImageSourceRef isrc, size_t index, CFDictionaryRef properties)
{
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return _CGImageDestinationCopyTypeIdentifiers();
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithURL(url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCopyPropertiesAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithData(data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

uint64_t CKStringFromAccountStatus()
{
  return _CKStringFromAccountStatus();
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  CLLocationCoordinate2D v4 = _CLLocationCoordinate2DMake(latitude, longitude);
  double v3 = v4.longitude;
  double v2 = v4.latitude;
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

Boolean CMTimeRangeEqual(CMTimeRange *range1, CMTimeRange *range2)
{
  return _CMTimeRangeEqual(range1, range2);
}

uint64_t CPCopyBundleIdentifierAndTeamFromAuditToken()
{
  return _CPCopyBundleIdentifierAndTeamFromAuditToken();
}

uint64_t CPLCopyDefaultSerialQueueAttributes()
{
  return _CPLCopyDefaultSerialQueueAttributes();
}

uint64_t CPLCurrentQOS()
{
  return _CPLCurrentQOS();
}

uint64_t CPLEnableUnsupportedScopesAlert()
{
  return _CPLEnableUnsupportedScopesAlert();
}

uint64_t CPLEnableWorkaroundFor101242629()
{
  return _CPLEnableWorkaroundFor101242629();
}

uint64_t CPLIsDynamicResourceFingerprint()
{
  return _CPLIsDynamicResourceFingerprint();
}

uint64_t CPLIsInTestReadonlyMode()
{
  return _CPLIsInTestReadonlyMode();
}

uint64_t CPLIsSharedLibraryFeatureEnabled()
{
  return _CPLIsSharedLibraryFeatureEnabled();
}

uint64_t CPLMarkDownloadedResourceWithDynamicVersion()
{
  return _CPLMarkDownloadedResourceWithDynamicVersion();
}

uint64_t CPLPrimaryScopeIdentifierForCurrentUniverse()
{
  return _CPLPrimaryScopeIdentifierForCurrentUniverse();
}

uint64_t CPLRequestClient()
{
  return _CPLRequestClient();
}

uint64_t CPLRequestClientSetRequestBlock()
{
  return _CPLRequestClientSetRequestBlock();
}

uint64_t CPLSharingScopePrefixForScopeWithIdentifier()
{
  return _CPLSharingScopePrefixForScopeWithIdentifier();
}

uint64_t CPLUniverseNameFromMainScopeIdentifier()
{
  return _CPLUniverseNameFromMainScopeIdentifier();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

uint64_t NSLocalizedFileSizeDescription()
{
  return _NSLocalizedFileSizeDescription();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSSize NSSizeFromString(NSString *aString)
{
  NSSize v3 = _NSSizeFromString(aString);
  double height = v3.height;
  double width = v3.width;
  result.double height = height;
  result.double width = width;
  return result;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return _NSStringFromProtocol(proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return _NSStringFromSize(aSize);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return _PBDataWriterWriteUint64Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CPLArrayFromColonSeparatedList()
{
  return __CPLArrayFromColonSeparatedList();
}

uint64_t _CPLConfigurationDefaultURL()
{
  return __CPLConfigurationDefaultURL();
}

uint64_t _CPLExit()
{
  return __CPLExit();
}

uint64_t _CPLOSLogSubsystem()
{
  return __CPLOSLogSubsystem();
}

uint64_t _CPLShouldValidateStableHash()
{
  return __CPLShouldValidateStableHash();
}

uint64_t _CPLStoreFailure()
{
  return __CPLStoreFailure();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __CPLBuildVersion()
{
  return ___CPLBuildVersion();
}

uint64_t __CPLGenericOSLogDomain()
{
  return ___CPLGenericOSLogDomain();
}

uint64_t __CPLQOSOSLogDomain()
{
  return ___CPLQOSOSLogDomain();
}

uint64_t __CPLShouldLogQOS()
{
  return ___CPLShouldLogQOS();
}

uint64_t __CPLVersion()
{
  return ___CPLVersion();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return _class_getMethodImplementation(cls, name);
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return _dispatch_queue_attr_make_initially_inactive(attr);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return _dispatch_set_qos_class_fallback();
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void exit(int a1)
{
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return _fgetxattr(fd, name, value, size, position, options);
}

void free(void *a1)
{
}

int fremovexattr(int fd, const char *name, int options)
{
  return _fremovexattr(fd, name, options);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return _fsetxattr(fd, name, value, size, position, options);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t pql_sqlite3_bind_pointer()
{
  return _pql_sqlite3_bind_pointer();
}

uint64_t pql_sqlite3_value_object()
{
  return _pql_sqlite3_value_object();
}

uint64_t pql_sqlite3_value_pointer()
{
  return _pql_sqlite3_value_pointer();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  objc_method_description MethodDescription = _protocol_getMethodDescription(p, aSel, isRequiredMethod, isInstanceMethod);
  types = MethodDescription.types;
  name = MethodDescription.name;
  result.types = types;
  result.name = name;
  return result;
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return _sqlite3_create_function_v2(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal, xDestroy);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return _sqlite3_extended_errcode(db);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_sql(pStmt);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return _sqlite3_stmt_readonly(pStmt);
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  return _sqlite3_stmt_status(a1, op, resetFlg);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return _sqlite3_trace_v2(a1, uMask, xCallback, pCtx);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return _sqlite3_user_data(a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return _sqlite3_value_int(a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return _sqlite3_value_int64(a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return _sqlite3_value_type(a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t voucher_adopt()
{
  return _voucher_adopt();
}

uint64_t voucher_copy()
{
  return _voucher_copy();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

uint64_t xpc_set_idle_handler()
{
  return _xpc_set_idle_handler();
}

id objc_msgSend_CPLErrorForCloudKitError_scopeProvider_withRequestUUIDs_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:");
}

id objc_msgSend_CPLErrorForCloudKitError_scopeProvider_withRequestUUIDs_description_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:arguments:");
}

id objc_msgSend_CPLErrorForCloudKitError_withRequestUUIDs_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitError:withRequestUUIDs:description:");
}

id objc_msgSend_CPLErrorForCloudKitUploadError_getDestinationRecordIDs_scopeProvider_withRequestUUIDs_uploadAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__acceptShareWithMetadata_currentUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptShareWithMetadata:currentUserID:completionHandler:");
}

id objc_msgSend__acceptShareWithURL_currentUserID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptShareWithURL:currentUserID:completionHandler:");
}

id objc_msgSend__acquireActivityAndLaunchOperation(void *a1, const char *a2, ...)
{
  return _[a1 _acquireActivityAndLaunchOperation];
}

id objc_msgSend__acquiredTask_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acquiredTask:error:");
}

id objc_msgSend__activityHasExpired(void *a1, const char *a2, ...)
{
  return _[a1 _activityHasExpired];
}

id objc_msgSend__actuallyStartShowingIndicatorLocked(void *a1, const char *a2, ...)
{
  return _[a1 _actuallyStartShowingIndicatorLocked];
}

id objc_msgSend__addCKRecordIDForResourcesUploadProgressTracking_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCKRecordIDForResourcesUploadProgressTracking:size:");
}

id objc_msgSend__addClient_interestedInZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClient:interestedInZoneIDs:");
}

id objc_msgSend__addClientInterestedInAllZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClientInterestedInAllZones:");
}

id objc_msgSend__addClientToInterestingZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addClientToInterestingZones:");
}

id objc_msgSend__addEngineWrapperOpenObserver_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addEngineWrapperOpenObserver:withIdentifier:");
}

id objc_msgSend__addParticipant_toEmails_phoneNumbers_userRecordIDs_participantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addParticipant:toEmails:phoneNumbers:userRecordIDs:participantIDs:");
}

id objc_msgSend__addPostUpgradeMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPostUpgradeMigration:");
}

id objc_msgSend__addRecordWithScopedIdentifierToShareTodos_recordClass_proposedContributorUserIdentifiers_target_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRecordWithScopedIdentifierToShareTodos:recordClass:proposedContributorUserIdentifiers:target:force:");
}

id objc_msgSend__addRecordWithScopedIdentifierToUnshareTodos_recordClass_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRecordWithScopedIdentifierToUnshareTodos:recordClass:target:");
}

id objc_msgSend__addScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addScope:error:");
}

id objc_msgSend__adjustThrottlingDateWithNow_andError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustThrottlingDateWithNow:andError:");
}

id objc_msgSend__afterInitializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 _afterInitializeStorage];
}

id objc_msgSend__allChangesWithScopeIdentifier_scopeIndex_ordered_table_query_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allChangesWithScopeIdentifier:scopeIndex:ordered:table:query:");
}

id objc_msgSend__allKeys(void *a1, const char *a2, ...)
{
  return _[a1 _allKeys];
}

id objc_msgSend__allKeysWithoutExpungedState(void *a1, const char *a2, ...)
{
  return _[a1 _allKeysWithoutExpungedState];
}

id objc_msgSend__appendChange_alreadyMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendChange:alreadyMingled:error:");
}

id objc_msgSend__applyMoveChanges_sourceType_destinationType_helper_operationContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyMoveChanges:sourceType:destinationType:helper:operationContext:completionHandler:");
}

id objc_msgSend__askNextClient_toProvideCKAssetWithRecordID_fieldName_recordType_signature_bestResponseYet_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_askNextClient:toProvideCKAssetWithRecordID:fieldName:recordType:signature:bestResponseYet:completionHandler:");
}

id objc_msgSend__assetCountsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetCountsFromCKRecord:");
}

id objc_msgSend__autoCloseOneWrapper(void *a1, const char *a2, ...)
{
  return _[a1 _autoCloseOneWrapper];
}

id objc_msgSend__autoCloseWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoCloseWrapper:");
}

id objc_msgSend__availabilityOfResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_availabilityOfResource:");
}

id objc_msgSend__backgroundDownloadTaskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _backgroundDownloadTaskIdentifier];
}

id objc_msgSend__badContainerRelationsIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _badContainerRelationsIdentifiers];
}

id objc_msgSend__baseProgressForState_totalUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_baseProgressForState:totalUnits:");
}

id objc_msgSend__baseScopeChange(void *a1, const char *a2, ...)
{
  return _[a1 _baseScopeChange];
}

id objc_msgSend__beforeInitializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 _beforeInitializeStorage];
}

id objc_msgSend__bestClientToReceivePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestClientToReceivePushNotification:");
}

id objc_msgSend__bestErrorForUnderlyingError_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestErrorForUnderlyingError:scopeProvider:");
}

id objc_msgSend__bestSourceResourceFromResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestSourceResourceFromResources:");
}

id objc_msgSend__betterErrorForRecordId_recordError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_betterErrorForRecordId:recordError:");
}

id objc_msgSend__bindableValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bindableValueForValue:");
}

id objc_msgSend__blockedReason(void *a1, const char *a2, ...)
{
  return _[a1 _blockedReason];
}

id objc_msgSend__blockedReasonStatus(void *a1, const char *a2, ...)
{
  return _[a1 _blockedReasonStatus];
}

id objc_msgSend__BOOLValueForDuetKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_BOOLValueForDuetKeyPath:");
}

id objc_msgSend__budgetOverrideKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _budgetOverrideKeyPath];
}

id objc_msgSend__bumpIndexWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bumpIndexWithError:");
}

id objc_msgSend__bundleIdentifiersFromCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIdentifiersFromCKOperation:");
}

id objc_msgSend__cacheAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _cacheAttributes];
}

id objc_msgSend__cacheCountOfOriginalsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _cacheCountOfOriginalsIfNecessary];
}

id objc_msgSend__cacheLocalScopedIdentifier_cloudScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheLocalScopedIdentifier:cloudScopedIdentifier:isFinal:");
}

id objc_msgSend__cacheUploadSizesIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _cacheUploadSizesIfNecessary];
}

id objc_msgSend__cacheValue_forColumnVariable_scope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheValue:forColumnVariable:scope:");
}

id objc_msgSend__cacheValue_forVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheValue:forVariable:");
}

id objc_msgSend__callCompletionWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionWithZone:");
}

id objc_msgSend__callStopAllBlocks(void *a1, const char *a2, ...)
{
  return _[a1 _callStopAllBlocks];
}

id objc_msgSend__canAutoCloseWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canAutoCloseWrapper:");
}

id objc_msgSend__canReallyOpenWrapper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canReallyOpenWrapper:error:");
}

id objc_msgSend__cancelAllOperationsIfBlocked(void *a1, const char *a2, ...)
{
  return _[a1 _cancelAllOperationsIfBlocked];
}

id objc_msgSend__cancelCallbackProgress(void *a1, const char *a2, ...)
{
  return _[a1 _cancelCallbackProgress];
}

id objc_msgSend__checkExitSupervisorInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkExitSupervisorInTransaction:");
}

id objc_msgSend__checkParticipant_inEmails_phoneNumbers_userRecordIDs_participantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkParticipant:inEmails:phoneNumbers:userRecordIDs:participantIDs:");
}

id objc_msgSend__checkResource_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkResource:record:error:");
}

id objc_msgSend__cleanTempRecoveredDataURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanTempRecoveredDataURL:");
}

id objc_msgSend__cleanupComputeStateDownloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupComputeStateDownloadQueue];
}

id objc_msgSend__clearFlagsOnFd_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFlagsOnFd:url:");
}

id objc_msgSend__clearFlagsOnURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFlagsOnURL:");
}

id objc_msgSend__clearPartiallyCreatedZoneIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _clearPartiallyCreatedZoneIfNecessary];
}

id objc_msgSend__clearScopedIdentifiersCache(void *a1, const char *a2, ...)
{
  return _[a1 _clearScopedIdentifiersCache];
}

id objc_msgSend__clientWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientWithErrorHandler:");
}

id objc_msgSend__clientsInterestedToReceiveAPushNotificationForZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientsInterestedToReceiveAPushNotificationForZoneID:");
}

id objc_msgSend__closeUpgradeJournal(void *a1, const char *a2, ...)
{
  return _[a1 _closeUpgradeJournal];
}

id objc_msgSend__closeWipeAndReOpenWithReason_warnUserIfPossible_createRadar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeWipeAndReOpenWithReason:warnUserIfPossible:createRadar:error:");
}

id objc_msgSend__cloudKitReschedulerManagerForLibraryWithIdentifier_involvedProcesses_relatedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:");
}

id objc_msgSend__cloudKitScopeForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudKitScopeForTask:");
}

id objc_msgSend__cloudResourcesToLocalResourcesWithLocalResources_targetMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudResourcesToLocalResourcesWithLocalResources:targetMapping:");
}

id objc_msgSend__computeUpdatedSharedCKRecordsFromFoundRecord_usingUpdates_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeUpdatedSharedCKRecordsFromFoundRecord:usingUpdates:error:");
}

id objc_msgSend__container(void *a1, const char *a2, ...)
{
  return _[a1 _container];
}

id objc_msgSend__containerOptionsIsZoneish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containerOptionsIsZoneish:");
}

id objc_msgSend__contextForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextForOperation:");
}

id objc_msgSend__coordinator_provideCKAssetWithRecordID_fieldName_recordType_signature_tempFolderURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_coordinator:provideCKAssetWithRecordID:fieldName:recordType:signature:tempFolderURL:completionHandler:");
}

id objc_msgSend__coordinatorWontBeUsed(void *a1, const char *a2, ...)
{
  return _[a1 _coordinatorWontBeUsed];
}

id objc_msgSend__copyPrivateMasterWithScopedIdentifier_masterTarget_uploadIndex_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyPrivateMasterWithScopedIdentifier:masterTarget:uploadIndex:reason:");
}

id objc_msgSend__corruptionMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _corruptionMarkerURL];
}

id objc_msgSend__countOfRecordsWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countOfRecordsWithStatus:");
}

id objc_msgSend__countOfUnconfirmedRecords(void *a1, const char *a2, ...)
{
  return _[a1 _countOfUnconfirmedRecords];
}

id objc_msgSend__createCKShare_andRootRecord_currentUserID_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCKShare:andRootRecord:currentUserID:withCompletionHandler:");
}

id objc_msgSend__createFlagsIndexes(void *a1, const char *a2, ...)
{
  return _[a1 _createFlagsIndexes];
}

id objc_msgSend__createIndexForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createIndexForFlags:");
}

id objc_msgSend__createIndexesWithPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createIndexesWithPriority:");
}

id objc_msgSend__createInitialPrimarySyncScope(void *a1, const char *a2, ...)
{
  return _[a1 _createInitialPrimarySyncScope];
}

id objc_msgSend__createLibraryShareWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLibraryShareWithScopeChange:completionHandler:");
}

id objc_msgSend__createLibraryWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLibraryWithScopeChange:completionHandler:");
}

id objc_msgSend__createMomentShareWithScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMomentShareWithScopeChange:completionHandler:");
}

id objc_msgSend__createResourceTypeAndStatusIndex(void *a1, const char *a2, ...)
{
  return _[a1 _createResourceTypeAndStatusIndex];
}

id objc_msgSend__createSparsePrivateRecordsIfNecessary_recordClass_userRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSparsePrivateRecordsIfNecessary:recordClass:userRecordID:completionHandler:");
}

id objc_msgSend__createZoneWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createZoneWithCompletionHandler:");
}

id objc_msgSend__daemonLibraryManagerWantsToExitNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_daemonLibraryManagerWantsToExitNow:");
}

id objc_msgSend__deactivateMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _deactivateMarkerURL];
}

id objc_msgSend__defaultClient(void *a1, const char *a2, ...)
{
  return _[a1 _defaultClient];
}

id objc_msgSend__defaultIdentificationClasses(void *a1, const char *a2, ...)
{
  return _[a1 _defaultIdentificationClasses];
}

id objc_msgSend__defaultValuesObject(void *a1, const char *a2, ...)
{
  return _[a1 _defaultValuesObject];
}

id objc_msgSend__defaultsKey(void *a1, const char *a2, ...)
{
  return _[a1 _defaultsKey];
}

id objc_msgSend__deleteAllChangesWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteAllChangesWithScopedIdentifier:error:");
}

id objc_msgSend__deleteBadRelations(void *a1, const char *a2, ...)
{
  return _[a1 _deleteBadRelations];
}

id objc_msgSend__deleteCorruptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 _deleteCorruptionInfo];
}

id objc_msgSend__deleteEnqueuedResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteEnqueuedResource:error:");
}

id objc_msgSend__deleteRecord(void *a1, const char *a2, ...)
{
  return _[a1 _deleteRecord];
}

id objc_msgSend__deleteRecordWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteRecordWithScopedIdentifier:error:");
}

id objc_msgSend__deleteSharedRecord(void *a1, const char *a2, ...)
{
  return _[a1 _deleteSharedRecord];
}

id objc_msgSend__deleteSourceRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteSourceRecordIDs:");
}

id objc_msgSend__deleteWipeReason(void *a1, const char *a2, ...)
{
  return _[a1 _deleteWipeReason];
}

id objc_msgSend__deregisterTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterTaskIdentifier:");
}

id objc_msgSend__destinationRecordsFromSourceRecords_recordIDs_sourceType_destinationRecordIDs_helper_sourceRecordIDs_operationContext_action_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destinationRecordsFromSourceRecords:recordIDs:sourceType:destinationRecordIDs:helper:sourceRecordIDs:operationContext:action:error:");
}

id objc_msgSend__destinationURLForIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_destinationURLForIdentity:");
}

id objc_msgSend__determineScopeTypeAndFetchLibraryInfoWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineScopeTypeAndFetchLibraryInfoWithCurrentUserID:");
}

id objc_msgSend__didFinishDeleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishDeleteWithError:");
}

id objc_msgSend__dimensionsFromBaseResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dimensionsFromBaseResource:");
}

id objc_msgSend__disableSchedulerBecauseAccountIsUnavailableWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disableSchedulerBecauseAccountIsUnavailableWithReason:");
}

id objc_msgSend__discardCachedValuesForGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardCachedValuesForGroup:");
}

id objc_msgSend__discardResourceForUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardResourceForUpload:");
}

id objc_msgSend__dispatchForceSyncForScopeIdentifiers_errors_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchForceSyncForScopeIdentifiers:errors:completionHandler:");
}

id objc_msgSend__dontUnshareRecordWithScopedIdentifier_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dontUnshareRecordWithScopedIdentifier:recordClass:");
}

id objc_msgSend__downloadComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 _downloadComputeStates];
}

id objc_msgSend__downloadCurrentGroup(void *a1, const char *a2, ...)
{
  return _[a1 _downloadCurrentGroup];
}

id objc_msgSend__downloadNextGroup(void *a1, const char *a2, ...)
{
  return _[a1 _downloadNextGroup];
}

id objc_msgSend__downloadNextOperationType(void *a1, const char *a2, ...)
{
  return _[a1 _downloadNextOperationType];
}

id objc_msgSend__downloadOperationWithRecordIDsAndTasks_keys_perRecordProgressBlock_perRecordCompletionBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadOperationWithRecordIDsAndTasks:keys:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:");
}

id objc_msgSend__dropAllOtherLibraryManagersAndCallBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropAllOtherLibraryManagersAndCallBlock:");
}

id objc_msgSend__dropManagerWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropManagerWithCompletionBlock:");
}

id objc_msgSend__dropTaskRequest(void *a1, const char *a2, ...)
{
  return _[a1 _dropTaskRequest];
}

id objc_msgSend__dropVoucherForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropVoucherForTaskWithIdentifier:");
}

id objc_msgSend__dropWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropWithCompletionBlock:");
}

id objc_msgSend__emergencyExit(void *a1, const char *a2, ...)
{
  return _[a1 _emergencyExit];
}

id objc_msgSend__emitActivityStateLog(void *a1, const char *a2, ...)
{
  return _[a1 _emitActivityStateLog];
}

id objc_msgSend__emitLogForCurrentTasks(void *a1, const char *a2, ...)
{
  return _[a1 _emitLogForCurrentTasks];
}

id objc_msgSend__enableSchedulerBecauseAccountIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _enableSchedulerBecauseAccountIsAvailable];
}

id objc_msgSend__endComputeStateDownload(void *a1, const char *a2, ...)
{
  return _[a1 _endComputeStateDownload];
}

id objc_msgSend__enqueueResourcesForChange_inOutgoingResourcesWithUploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueResourcesForChange:inOutgoingResourcesWithUploadIdentifier:");
}

id objc_msgSend__enqueuedResourceForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueuedResourceForResource:");
}

id objc_msgSend__enqueuedResourceForResource_verifyScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueuedResourceForResource:verifyScopeIndex:");
}

id objc_msgSend__enumerateAllZonesForSharedDatabase_block_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateAllZonesForSharedDatabase:block:completionHandler:");
}

id objc_msgSend__enumeratorForRecordsWithScopeIndex_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithScopeIndex:maximumCount:");
}

id objc_msgSend__enumeratorForRecordsWithTransientType_scopeIndex_class_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithTransientType:scopeIndex:class:maximumCount:");
}

id objc_msgSend__enumeratorForRecordsWithTransientType_scopeIndex_maximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumeratorForRecordsWithTransientType:scopeIndex:maximumCount:");
}

id objc_msgSend__errorForCancelledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForCancelledError:");
}

id objc_msgSend__errorForDeleteError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForDeleteError:");
}

id objc_msgSend__errorForUpdateError_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorForUpdateError:scopeProvider:");
}

id objc_msgSend__executeMaintenanceWithEnumerator_progress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeMaintenanceWithEnumerator:progress:completionHandler:");
}

id objc_msgSend__executeSharePlanFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeSharePlanFromPlanner:completionHandler:");
}

id objc_msgSend__executeUnsharePlanFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeUnsharePlanFromPlanner:completionHandler:");
}

id objc_msgSend__exitErrorFromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exitErrorFromError:");
}

id objc_msgSend__expectedDurationFromPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expectedDurationFromPrediction:");
}

id objc_msgSend__expiredCountLockedWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expiredCountLockedWithDate:");
}

id objc_msgSend__failAllFutureOperationsWithContainerHasBeenWipedError(void *a1, const char *a2, ...)
{
  return _[a1 _failAllFutureOperationsWithContainerHasBeenWipedError];
}

id objc_msgSend__fetchAndMoveNextBatchWithUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAndMoveNextBatchWithUserRecordID:");
}

id objc_msgSend__fetchCKShareWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCKShareWithCompletionHandler:");
}

id objc_msgSend__fetchLibraryInfoAndStateWithCurrentSyncAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchLibraryInfoAndStateWithCurrentSyncAnchor:");
}

id objc_msgSend__fetchMetadataForShareURL_currentUserID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMetadataForShareURL:currentUserID:completion:");
}

id objc_msgSend__fetchNextOperationType_followRemapping_recordIDMapping_inResult_storeRequestUUIDsIn_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchNextOperationType:followRemapping:recordIDMapping:inResult:storeRequestUUIDsIn:completionHandler:");
}

id objc_msgSend__fetchPlaceholderRecordAndStartDownload(void *a1, const char *a2, ...)
{
  return _[a1 _fetchPlaceholderRecordAndStartDownload];
}

id objc_msgSend__fetchPrivateRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPrivateRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchRecordWithIdentifier_expectedClass_currentUserRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordWithIdentifier:expectedClass:currentUserRecordID:completionHandler:");
}

id objc_msgSend__fetchRecordWithScopedIdentifiers_followRemapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordWithScopedIdentifiers:followRemapping:completionHandler:");
}

id objc_msgSend__fetchRecordsFollowRemappingWithIDs_alreadyFetchRecordIDs_remappedRecordIDs_realRecords_type_storeRequestUUIDsIn_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordsFollowRemappingWithIDs:alreadyFetchRecordIDs:remappedRecordIDs:realRecords:type:storeRequestUUIDsIn:completionHandler:");
}

id objc_msgSend__fetchRecordsForNextOperationTypeInEnumerator_task_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordsForNextOperationTypeInEnumerator:task:completionHandler:");
}

id objc_msgSend__fetchRecordsForRemainingScopedIdentifiers_alreadyFetchedScopedIdentifiers_userRecordID_foundCPLRecords_foundCKRecords_targetMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecordsForRemainingScopedIdentifiers:alreadyFetchedScopedIdentifiers:userRecordID:foundCPLRecords:foundCKRecords:targetMapping:completionHandler:");
}

id objc_msgSend__fetchRequestedRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequestedRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchSharedRecordsFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSharedRecordsFromPlanner:completionHandler:");
}

id objc_msgSend__fetchSparseRecordsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSparseRecordsWithCompletionHandler:");
}

id objc_msgSend__fetchTransportScopeForScope_transportGroup_progress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchTransportScopeForScope:transportGroup:progress:completionHandler:");
}

id objc_msgSend__fetchZoneForZoneID_operationType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchZoneForZoneID:operationType:completionHandler:");
}

id objc_msgSend__filteredPartialFailureError_itemClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredPartialFailureError:itemClass:");
}

id objc_msgSend__finishRemainingTasksWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishRemainingTasksWithError:");
}

id objc_msgSend__fix22666940(void *a1, const char *a2, ...)
{
  return _[a1 _fix22666940];
}

id objc_msgSend__fixStoreAfterAnyVersionChange(void *a1, const char *a2, ...)
{
  return _[a1 _fixStoreAfterAnyVersionChange];
}

id objc_msgSend__fixupStoredDestinationURL_isOriginal_needsCommit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixupStoredDestinationURL:isOriginal:needsCommit:error:");
}

id objc_msgSend__forceBackupWithActivity_forceClientPush_enumerator_progress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceBackupWithActivity:forceClientPush:enumerator:progress:completionHandler:");
}

id objc_msgSend__forceUpdateAccountInfoWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceUpdateAccountInfoWithReason:completionHandler:");
}

id objc_msgSend__getEncryptionHelper(void *a1, const char *a2, ...)
{
  return _[a1 _getEncryptionHelper];
}

id objc_msgSend__getIsOriginal_markedForDelete_forDestinationURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getIsOriginal:markedForDelete:forDestinationURL:error:");
}

id objc_msgSend__getLocalIndexes_cloudIndexes_forScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLocalIndexes:cloudIndexes:forScopeIdentifiers:");
}

id objc_msgSend__getNextPosition_andBumpWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getNextPosition:andBumpWithError:");
}

id objc_msgSend__getTemporaryFolder(void *a1, const char *a2, ...)
{
  return _[a1 _getTemporaryFolder];
}

id objc_msgSend__group_dispatchWhenFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_group:dispatchWhenFinished:");
}

id objc_msgSend__hasDeactivateMarker(void *a1, const char *a2, ...)
{
  return _[a1 _hasDeactivateMarker];
}

id objc_msgSend__hasRecordWithScopedIdentifier_isStaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasRecordWithScopedIdentifier:isStaged:");
}

id objc_msgSend__inMemoryDownloadOperationForRecordID_resource_record_keys_operationType_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inMemoryDownloadOperationForRecordID:resource:record:keys:operationType:completionBlock:");
}

id objc_msgSend__incrementThrottledCount(void *a1, const char *a2, ...)
{
  return _[a1 _incrementThrottledCount];
}

id objc_msgSend__initializeDB(void *a1, const char *a2, ...)
{
  return _[a1 _initializeDB];
}

id objc_msgSend__injectionForChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectionForChangeType:");
}

id objc_msgSend__injectionForFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectionForFilter:");
}

id objc_msgSend__injectionForScopesAllowingPullFromTransport(void *a1, const char *a2, ...)
{
  return _[a1 _injectionForScopesAllowingPullFromTransport];
}

id objc_msgSend__insertFinalRecordWithScopedIdentifier_className_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_confirmed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertFinalRecordWithScopedIdentifier:className:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord:confirmed:error:");
}

id objc_msgSend__insertStagedRecordWithScopedIdentifier_className_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertStagedRecordWithScopedIdentifier:className:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord:error:");
}

id objc_msgSend__instantiateWrapperWithParameters_createIfNecessary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_instantiateWrapperWithParameters:createIfNecessary:error:");
}

id objc_msgSend__interpretedChangeFromCKRecord_scopedIdentifier_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpretedChangeFromCKRecord:scopedIdentifier:userRecordID:");
}

id objc_msgSend__interpretedSharedChangeFromCKRecord_scopedIdentifier_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:");
}

id objc_msgSend__isAppLibrary(void *a1, const char *a2, ...)
{
  return _[a1 _isAppLibrary];
}

id objc_msgSend__isBlockedKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _isBlockedKeyPath];
}

id objc_msgSend__isCKErrorForRejectedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCKErrorForRejectedRecord:");
}

id objc_msgSend__isCloudScopedIdentifier_aSuspiciousRemappingToCloudScopedIdentifier_primaryScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCloudScopedIdentifier:aSuspiciousRemappingToCloudScopedIdentifier:primaryScope:");
}

id objc_msgSend__isCurrentUserOwnerOrAdminOfShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCurrentUserOwnerOrAdminOfShare:");
}

id objc_msgSend__isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 _isEmpty];
}

id objc_msgSend__isManagementLibraryManager(void *a1, const char *a2, ...)
{
  return _[a1 _isManagementLibraryManager];
}

id objc_msgSend__isScopeReadonlyFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScopeReadonlyFromCKShare:");
}

id objc_msgSend__isSuspiciousAsset_isBadAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSuspiciousAsset:isBadAsset:");
}

id objc_msgSend__isUnBlockedKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _isUnBlockedKeyPath];
}

id objc_msgSend__isValidListOfShareParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidListOfShareParticipants:");
}

id objc_msgSend__isValidScopeForClient_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidScopeForClient:error:");
}

id objc_msgSend__itemErrorFromError_forID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemErrorFromError:forID:");
}

id objc_msgSend__keyForInsanityForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyForInsanityForLibraryIdentifier:");
}

id objc_msgSend__killWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_killWithCompletionBlock:");
}

id objc_msgSend__launchForcedExitForSupervisor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchForcedExitForSupervisor:");
}

id objc_msgSend__launchOperationForSharedDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchOperationForSharedDatabase:");
}

id objc_msgSend__libraryHasBeenDeleted(void *a1, const char *a2, ...)
{
  return _[a1 _libraryHasBeenDeleted];
}

id objc_msgSend__libraryInfoForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryInfoForScope:");
}

id objc_msgSend__librarySateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_librarySateForScope:");
}

id objc_msgSend__libraryStateFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryStateFromCKRecord:");
}

id objc_msgSend__libraryStateFromRootRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryStateFromRootRecord:");
}

id objc_msgSend__loadWrapperWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadWrapperWithIdentifier:error:");
}

id objc_msgSend__localResourceFromCloudResources_usingMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localResourceFromCloudResources:usingMapping:");
}

id objc_msgSend__localResourceFromCloudResourcesAndErrors_usingMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localResourceFromCloudResourcesAndErrors:usingMapping:");
}

id objc_msgSend__markChangesWithScopedIdentifiersAsMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markChangesWithScopedIdentifiersAsMingled:error:");
}

id objc_msgSend__markFirstSyncOfPrimaryAsSuccessfulWithScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markFirstSyncOfPrimaryAsSuccessfulWithScope:");
}

id objc_msgSend__markLibraryAsCorruptedWithInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markLibraryAsCorruptedWithInfo:");
}

id objc_msgSend__markURLForDelete_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markURLForDelete:error:");
}

id objc_msgSend__mergeChange_overChange_discardedUploadIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeChange:overChange:discardedUploadIdentifier:error:");
}

id objc_msgSend__mergeFoundCKRecords_updateFoundCPLRecords_remainingScopedIdentifiers_fetchedScopedIdentifiers_userRecordID_targetMapping_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeFoundCKRecords:updateFoundCPLRecords:remainingScopedIdentifiers:fetchedScopedIdentifiers:userRecordID:targetMapping:error:");
}

id objc_msgSend__mergePrivateRecord_withSharedRecord_merger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergePrivateRecord:withSharedRecord:merger:");
}

id objc_msgSend__metadataWithoutOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_metadataWithoutOrientation:");
}

id objc_msgSend__migratePushQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migratePushQueue:");
}

id objc_msgSend__minimalPullFromTranportExpirationInterval(void *a1, const char *a2, ...)
{
  return _[a1 _minimalPullFromTranportExpirationInterval];
}

id objc_msgSend__minimumUploadSizeForLargeSession(void *a1, const char *a2, ...)
{
  return _[a1 _minimumUploadSizeForLargeSession];
}

id objc_msgSend__minimumUploadSizeForVeryLargeSession(void *a1, const char *a2, ...)
{
  return _[a1 _minimumUploadSizeForVeryLargeSession];
}

id objc_msgSend__modifyParticipantsOfCKShare_newParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifyParticipantsOfCKShare:newParticipants:");
}

id objc_msgSend__moveBatchRecordWithNames_userRecordID_operationID_moveBatchID_hasMore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveBatchRecordWithNames:userRecordID:operationID:moveBatchID:hasMore:");
}

id objc_msgSend__moveChangesFromSourceRecords_recordIDs_sourceType_destinationRecordIDs_helper_sourceRecordIDs_operationContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveChangesFromSourceRecords:recordIDs:sourceType:destinationRecordIDs:helper:sourceRecordIDs:operationContext:error:");
}

id objc_msgSend__networkBehaviorForConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_networkBehaviorForConfiguration:");
}

id objc_msgSend__nextSequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 _nextSequenceNumber];
}

id objc_msgSend__noteContainerHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 _noteContainerHasBeenWiped];
}

id objc_msgSend__noteEndOfResetIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _noteEndOfResetIfNecessary];
}

id objc_msgSend__noteMasterWillBeUploadedToPrivateZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteMasterWillBeUploadedToPrivateZone:");
}

id objc_msgSend__noteMasterWillBeUploadedToSharedZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteMasterWillBeUploadedToSharedZone:");
}

id objc_msgSend__noteRecordWithScopedIdentifierWillMoveToSplitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noteRecordWithScopedIdentifierWillMoveToSplitState:");
}

id objc_msgSend__notifyVacuumDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 _notifyVacuumDidComplete];
}

id objc_msgSend__openUpgradeJournal(void *a1, const char *a2, ...)
{
  return _[a1 _openUpgradeJournal];
}

id objc_msgSend__openWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openWithError:");
}

id objc_msgSend__operationAllowsCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_operationAllowsCellular:");
}

id objc_msgSend__operationsShouldBeDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 _operationsShouldBeDiscretionary];
}

id objc_msgSend__otherScopeIndexForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_otherScopeIndexForRecord:");
}

id objc_msgSend__outputOptionsFromSource_matchingResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputOptionsFromSource:matchingResource:");
}

id objc_msgSend__overwriteChange_pushContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overwriteChange:pushContext:error:");
}

id objc_msgSend__partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations:");
}

id objc_msgSend__pendingTaskStatus(void *a1, const char *a2, ...)
{
  return _[a1 _pendingTaskStatus];
}

id objc_msgSend__performAfterRegistrations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAfterRegistrations:");
}

id objc_msgSend__performMigrationForRemappedRecord_primaryScope_sharingScope_revertedCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMigrationForRemappedRecord:primaryScope:sharingScope:revertedCount:error:");
}

id objc_msgSend__performMigrationWithPrimaryScope_sharingScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performMigrationWithPrimaryScope:sharingScope:error:");
}

id objc_msgSend__performOnceDeviceIsUnlocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performOnceDeviceIsUnlocked:");
}

id objc_msgSend__performPendingBlockAfterFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 _performPendingBlockAfterFirstUnlock];
}

id objc_msgSend__performWithFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performWithFlags:action:");
}

id objc_msgSend__permissionFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_permissionFromCKShare:");
}

id objc_msgSend__persistedSyncSessionForScheduler_startSyncSessionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistedSyncSessionForScheduler:startSyncSessionBlock:");
}

id objc_msgSend__postUpgradeToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postUpgradeToVersion:");
}

id objc_msgSend__pqlChangeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pqlChangeWithScopedIdentifier:");
}

id objc_msgSend__prepareRecordsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 _prepareRecordsToDelete];
}

id objc_msgSend__priorityDescriptionForOperation_forTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_priorityDescriptionForOperation:forTask:");
}

id objc_msgSend__processConnectionDidInvalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processConnectionDidInvalidate:");
}

id objc_msgSend__processFinalSyncObligationsWithZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFinalSyncObligationsWithZoneIDs:");
}

id objc_msgSend__processListener_shouldAcceptNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processListener:shouldAcceptNewConnection:");
}

id objc_msgSend__publishRealProgressIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _publishRealProgressIfNecessary];
}

id objc_msgSend__pullMarker(void *a1, const char *a2, ...)
{
  return _[a1 _pullMarker];
}

id objc_msgSend__pushContext(void *a1, const char *a2, ...)
{
  return _[a1 _pushContext];
}

id objc_msgSend__pushMarker(void *a1, const char *a2, ...)
{
  return _[a1 _pushMarker];
}

id objc_msgSend__queue(void *a1, const char *a2, ...)
{
  return _[a1 _queue];
}

id objc_msgSend__reallyStartOperation(void *a1, const char *a2, ...)
{
  return _[a1 _reallyStartOperation];
}

id objc_msgSend__reallySubmitTaskRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySubmitTaskRequest:");
}

id objc_msgSend__recordIDForResourcesWithItemScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDForResourcesWithItemScopedIdentifier:");
}

id objc_msgSend__recordIDFromScopedIdentifier_cloudKitScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordIDFromScopedIdentifier:cloudKitScope:error:");
}

id objc_msgSend__recordWithRecordID_usingRealRecords_remappedRecordIDs_wantsAllRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordWithRecordID:usingRealRecords:remappedRecordIDs:wantsAllRecords:");
}

id objc_msgSend__refreshLargestResourceSizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshLargestResourceSizeWithError:");
}

id objc_msgSend__registerAfterLaunchWhenAllEnginesAreOpened(void *a1, const char *a2, ...)
{
  return _[a1 _registerAfterLaunchWhenAllEnginesAreOpened];
}

id objc_msgSend__registerForBackupRequests(void *a1, const char *a2, ...)
{
  return _[a1 _registerForBackupRequests];
}

id objc_msgSend__registerForBatterySaverMode(void *a1, const char *a2, ...)
{
  return _[a1 _registerForBatterySaverMode];
}

id objc_msgSend__registerForConfigurationRefresh(void *a1, const char *a2, ...)
{
  return _[a1 _registerForConfigurationRefresh];
}

id objc_msgSend__registerForFastPassInitialDownload(void *a1, const char *a2, ...)
{
  return _[a1 _registerForFastPassInitialDownload];
}

id objc_msgSend__registerForMaintenance(void *a1, const char *a2, ...)
{
  return _[a1 _registerForMaintenance];
}

id objc_msgSend__registerForPeriodicUploadOfComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 _registerForPeriodicUploadOfComputeStates];
}

id objc_msgSend__registerFromPersistentSyncSessionWithLaunchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerFromPersistentSyncSessionWithLaunchBlock:");
}

id objc_msgSend__registerOpenError_forWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerOpenError:forWrapper:");
}

id objc_msgSend__registerWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerWithTaskIdentifier:");
}

id objc_msgSend__rejectionReasonFromPartialError_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rejectionReasonFromPartialError:identifier:");
}

id objc_msgSend__relatedIdentifierForRecordWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relatedIdentifierForRecordWithIdentifier:");
}

id objc_msgSend__relatedRecordShouldBeShared(void *a1, const char *a2, ...)
{
  return _[a1 _relatedRecordShouldBeShared];
}

id objc_msgSend__removeClient_interestedInSomeZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeClient:interestedInSomeZones:");
}

id objc_msgSend__removeClientFromInterestingZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeClientFromInterestingZones:");
}

id objc_msgSend__removeEngineWrapperOpenObserverWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeEngineWrapperOpenObserverWithIdentifier:");
}

id objc_msgSend__removeExpiredEntriesLockedForNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeExpiredEntriesLockedForNow:");
}

id objc_msgSend__removeFirstEntriesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeFirstEntriesCount:");
}

id objc_msgSend__removeKeyForInsanityForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeKeyForInsanityForLibraryIdentifier:");
}

id objc_msgSend__reportForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportForTaskWithIdentifier:");
}

id objc_msgSend__reportICPLFeatureCheckpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportICPLFeatureCheckpoint:");
}

id objc_msgSend__requestFromUpdatedRequest_updatedPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestFromUpdatedRequest:updatedPrediction:");
}

id objc_msgSend__resetPlannerState(void *a1, const char *a2, ...)
{
  return _[a1 _resetPlannerState];
}

id objc_msgSend__resetPushAndPullMarkersIfEmptyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPushAndPullMarkersIfEmptyWithError:");
}

id objc_msgSend__resetPushAndPullMarkersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPushAndPullMarkersWithError:");
}

id objc_msgSend__resetStore_reason_resetSelector_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetStore:reason:resetSelector:error:");
}

id objc_msgSend__revertRecordWithLocalScopedIdentifier_class_revertedCount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_revertRecordWithLocalScopedIdentifier:class:revertedCount:error:");
}

id objc_msgSend__rootRef(void *a1, const char *a2, ...)
{
  return _[a1 _rootRef];
}

id objc_msgSend__runOperations(void *a1, const char *a2, ...)
{
  return _[a1 _runOperations];
}

id objc_msgSend__runQueryWithCurrentUserID_cursor_additionalInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runQueryWithCurrentUserID:cursor:additionalInfo:completionHandler:");
}

id objc_msgSend__save(void *a1, const char *a2, ...)
{
  return _[a1 _save];
}

id objc_msgSend__saveParameters_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveParameters:withKey:");
}

id objc_msgSend__saveRegisteredTaskIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _saveRegisteredTaskIdentifiers];
}

id objc_msgSend__savedParametersForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedParametersForKey:");
}

id objc_msgSend__scheduleBlockedTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleBlockedTimeout];
}

id objc_msgSend__scheduleClientCacheDrop(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleClientCacheDrop];
}

id objc_msgSend__scheduleClientCacheDropIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleClientCacheDropIfNecessary];
}

id objc_msgSend__scheduleOrLaunchIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleOrLaunchIfNecessary];
}

id objc_msgSend__scopeChangeFromShareMetadata_currentUserID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeChangeFromShareMetadata:currentUserID:error:");
}

id objc_msgSend__scopeIdentifierFromZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIdentifierFromZoneID:");
}

id objc_msgSend__scopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIndexForScopeIdentifier:");
}

id objc_msgSend__scopeIndexForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeIndexForScopedIdentifier:");
}

id objc_msgSend__scopeType_supportsClientSyncWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeType:supportsClientSyncWithOptions:");
}

id objc_msgSend__scopeTypeForCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeTypeForCloudKitScope:");
}

id objc_msgSend__scopeTypeSupportsClientSync_scopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeTypeSupportsClientSync:scopeIdentifier:");
}

id objc_msgSend__scopeWithQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopeWithQuery:");
}

id objc_msgSend__scopedIdentifierForIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scopedIdentifierForIdentifier:scopeIndex:");
}

id objc_msgSend__scopes(void *a1, const char *a2, ...)
{
  return _[a1 _scopes];
}

id objc_msgSend__sendExitFeedbackForSupervisor_cloudKitScope_exitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendExitFeedbackForSupervisor:cloudKitScope:exitState:");
}

id objc_msgSend__sendExitFeedbackWithSourceRecordIDs_destinationRecordIDs_moveError_operationID_moveBatchID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendExitFeedbackWithSourceRecordIDs:destinationRecordIDs:moveError:operationID:moveBatchID:");
}

id objc_msgSend__sessionIsDoneOrWontHappen(void *a1, const char *a2, ...)
{
  return _[a1 _sessionIsDoneOrWontHappen];
}

id objc_msgSend__setBackgroundDownloadTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundDownloadTaskIdentifier:");
}

id objc_msgSend__setCurrentActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentActivity:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setIsOriginal_markedForDelete_onDestinationURL_clearFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:");
}

id objc_msgSend__setKeyForInsanityIfNecessaryForParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setKeyForInsanityIfNecessaryForParameters:");
}

id objc_msgSend__setLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastError:");
}

id objc_msgSend__setLibraryVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLibraryVersion:");
}

id objc_msgSend__setPullMarker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPullMarker:error:");
}

id objc_msgSend__setPushContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushContext:");
}

id objc_msgSend__setPushMarker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushMarker:error:");
}

id objc_msgSend__setPushRegistrationStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPushRegistrationStatus:error:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setShouldNotTrustCloudCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldNotTrustCloudCache:");
}

id objc_msgSend__setSizeOfResourcesToUpload_sizeOfOriginalResourcesToUpload_numberOfImages_numberOfVideos_numberOfOtherItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSizeOfResourcesToUpload:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:");
}

id objc_msgSend__setupCallbacks(void *a1, const char *a2, ...)
{
  return _[a1 _setupCallbacks];
}

id objc_msgSend__setupDBIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupDBIfNeeded];
}

id objc_msgSend__setupPragmasAndFunctions(void *a1, const char *a2, ...)
{
  return _[a1 _setupPragmasAndFunctions];
}

id objc_msgSend__setupProfilingHooks(void *a1, const char *a2, ...)
{
  return _[a1 _setupProfilingHooks];
}

id objc_msgSend__shareTodoForRecordWithScopedIdentifier_recordClass_proposedContributorUserIdentifiers_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareTodoForRecordWithScopedIdentifier:recordClass:proposedContributorUserIdentifiers:target:");
}

id objc_msgSend__sharedRecordToPrivateRecord_scopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sharedRecordToPrivateRecord:scopedIdentifier:");
}

id objc_msgSend__shouldAutoOpenWrapper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAutoOpenWrapper:error:");
}

id objc_msgSend__shouldNotTrustCloudCache(void *a1, const char *a2, ...)
{
  return _[a1 _shouldNotTrustCloudCache];
}

id objc_msgSend__shouldShowIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowIndicator];
}

id objc_msgSend__shouldSkipRampingRequest(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSkipRampingRequest];
}

id objc_msgSend__shouldUpdateKeyOnCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateKeyOnCKRecord:");
}

id objc_msgSend__shouldUpdateKeyOnSharedCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateKeyOnSharedCKRecord:");
}

id objc_msgSend__significantWorkKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 _significantWorkKeyPath];
}

id objc_msgSend__simulateExitForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateExitForScopeIdentifier:");
}

id objc_msgSend__sizeInBytes(void *a1, const char *a2, ...)
{
  return _[a1 _sizeInBytes];
}

id objc_msgSend__startDownload(void *a1, const char *a2, ...)
{
  return _[a1 _startDownload];
}

id objc_msgSend__startShowingIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startShowingIndicator:");
}

id objc_msgSend__startWatchingAccountInfoChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startWatchingAccountInfoChangesWithCompletionHandler:");
}

id objc_msgSend__startWatchingSystemState(void *a1, const char *a2, ...)
{
  return _[a1 _startWatchingSystemState];
}

id objc_msgSend__startWatchingURL_forPauseReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startWatchingURL:forPauseReason:");
}

id objc_msgSend__statusPerScopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 _statusPerScopeIndex];
}

id objc_msgSend__stopShowingIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopShowingIndicator:");
}

id objc_msgSend__stopWatchingAccountInfoChanges(void *a1, const char *a2, ...)
{
  return _[a1 _stopWatchingAccountInfoChanges];
}

id objc_msgSend__stopWatchingSystemState(void *a1, const char *a2, ...)
{
  return _[a1 _stopWatchingSystemState];
}

id objc_msgSend__storeChange_update_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeChange:update:error:");
}

id objc_msgSend__storeLibraryInfo_forScope_libraryInfoHasBeenUpdated_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeLibraryInfo:forScope:libraryInfoHasBeenUpdated:error:");
}

id objc_msgSend__storeSupervisorInfoInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeSupervisorInfoInTransaction:");
}

id objc_msgSend__storeTransportGroup_inColumnVariable_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeTransportGroup:inColumnVariable:forScope:error:");
}

id objc_msgSend__storeUploadTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeUploadTransferTask:");
}

id objc_msgSend__storeValue_forColumnVariable_scope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeValue:forColumnVariable:scope:error:");
}

id objc_msgSend__storeVoucher_forTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeVoucher:forTaskWithIdentifier:");
}

id objc_msgSend__streamOperationForKey_operationType_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_streamOperationForKey:operationType:completionHandler:");
}

id objc_msgSend__stringForQoS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForQoS:");
}

id objc_msgSend__submitIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _submitIfNecessary];
}

id objc_msgSend__submitTaskRequest(void *a1, const char *a2, ...)
{
  return _[a1 _submitTaskRequest];
}

id objc_msgSend__summaryForTaskRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_summaryForTaskRequest:");
}

id objc_msgSend__supervisorExitStateForScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supervisorExitStateForScopeChange:");
}

id objc_msgSend__supportedScopeTypesWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportedScopeTypesWithOptions:");
}

id objc_msgSend__tempDestinationURLForRecoveredDataWithTempFolderURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tempDestinationURLForRecoveredDataWithTempFolderURL:");
}

id objc_msgSend__transactionStatsDescription(void *a1, const char *a2, ...)
{
  return _[a1 _transactionStatsDescription];
}

id objc_msgSend__transferImageFromSource_toDestination_matchingResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferImageFromSource:toDestination:matchingResource:");
}

id objc_msgSend__transferValueFromVariable_type_ofStorage_toColumnVariable_transformer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferValueFromVariable:type:ofStorage:toColumnVariable:transformer:");
}

id objc_msgSend__transportGroupClass(void *a1, const char *a2, ...)
{
  return _[a1 _transportGroupClass];
}

id objc_msgSend__transportGroupForColumnVariable_forScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transportGroupForColumnVariable:forScope:");
}

id objc_msgSend__unBlockedReason(void *a1, const char *a2, ...)
{
  return _[a1 _unBlockedReason];
}

id objc_msgSend__unpublish(void *a1, const char *a2, ...)
{
  return _[a1 _unpublish];
}

id objc_msgSend__unregisterForBatterySaverMode(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForBatterySaverMode];
}

id objc_msgSend__unscheduleBlockedTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _unscheduleBlockedTimeout];
}

id objc_msgSend__unscheduleInQueue(void *a1, const char *a2, ...)
{
  return _[a1 _unscheduleInQueue];
}

id objc_msgSend__unsetupProfilingHooks(void *a1, const char *a2, ...)
{
  return _[a1 _unsetupProfilingHooks];
}

id objc_msgSend__updateAccountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountInfoWithCompletionHandler:");
}

id objc_msgSend__updateAcquireError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAcquireError:");
}

id objc_msgSend__updateBatterySaverMode(void *a1, const char *a2, ...)
{
  return _[a1 _updateBatterySaverMode];
}

id objc_msgSend__updateBudgets(void *a1, const char *a2, ...)
{
  return _[a1 _updateBudgets];
}

id objc_msgSend__updateCKRecordsInSharedScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCKRecordsInSharedScope:");
}

id objc_msgSend__updateCKShare_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCKShare:completionHandler:");
}

id objc_msgSend__updateCloudKitScopeWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCloudKitScopeWithZone:");
}

id objc_msgSend__updateConfigurationRefreshIntervalIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateConfigurationRefreshIntervalIfNecessary];
}

id objc_msgSend__updateFinalRecordWithScopedIdentifer_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_confirmed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFinalRecordWithScopedIdentifer:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord:confirmed:error:");
}

id objc_msgSend__updateOtherScopeIdentifierInRecord_otherScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOtherScopeIdentifierInRecord:otherScopeIndex:");
}

id objc_msgSend__updateOverridingForeground(void *a1, const char *a2, ...)
{
  return _[a1 _updateOverridingForeground];
}

id objc_msgSend__updateRelatedIdentifier_forRecordWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRelatedIdentifier:forRecordWithIdentifier:");
}

id objc_msgSend__updateRequestIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateRequestIfNecessary];
}

id objc_msgSend__updateScopeAndFlagsWithCKRecord_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScopeAndFlagsWithCKRecord:currentUserID:");
}

id objc_msgSend__updateScopeParticipantsWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScopeParticipantsWithCKShare:currentUserID:");
}

id objc_msgSend__updateSparseRecords_currentUserRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSparseRecords:currentUserRecordID:completionHandler:");
}

id objc_msgSend__updateStagedRecordWithScopedIdentifer_relatedIdentifier_secondaryIdentifier_otherScopeIndex_serializedRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStagedRecordWithScopedIdentifer:relatedIdentifier:secondaryIdentifier:otherScopeIndex:serializedRecord:error:");
}

id objc_msgSend__updateStateWithAccountInfo_walrusEnabledDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateWithAccountInfo:walrusEnabledDefault:");
}

id objc_msgSend__updateStateWithAccountStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStateWithAccountStatus:");
}

id objc_msgSend__updateStatusForMainScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStatusForMainScopeChange:");
}

id objc_msgSend__updateTaskIdentifierWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTaskIdentifierWithRequest:");
}

id objc_msgSend__updateWalrusTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWalrusTo:");
}

id objc_msgSend__upgradeDB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeDB:");
}

id objc_msgSend__upgradeToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeToVersion:");
}

id objc_msgSend__uploadBatchFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadBatchFromPlanner:completionHandler:");
}

id objc_msgSend__uploadCKShare_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadCKShare:completionHandler:");
}

id objc_msgSend__uploadDestinationRecords_destinationType_scopeProvider_operationContext_uploadAction_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadDestinationRecords:destinationType:scopeProvider:operationContext:uploadAction:completionHandler:");
}

id objc_msgSend__uploadRecords_deleteRecordIDs_identification_fromPlanner_uploadContext_updateProgress_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadRecords:deleteRecordIDs:identification:fromPlanner:uploadContext:updateProgress:completionHandler:");
}

id objc_msgSend__uploadSharedBatchFromPlanner_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadSharedBatchFromPlanner:completionHandler:");
}

id objc_msgSend__userIdentifierClass(void *a1, const char *a2, ...)
{
  return _[a1 _userIdentifierClass];
}

id objc_msgSend__vacuum_withInitialDatabaseSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_vacuum:withInitialDatabaseSize:");
}

id objc_msgSend__validateLastZoneIDInArray_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateLastZoneIDInArray:currentUserID:");
}

id objc_msgSend__valueForBindableValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForBindableValue:");
}

id objc_msgSend__valueForColumnVariable_scope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForColumnVariable:scope:");
}

id objc_msgSend__valueForKey_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:class:");
}

id objc_msgSend__waitForClients(void *a1, const char *a2, ...)
{
  return _[a1 _waitForClients];
}

id objc_msgSend__waitForClientsIfNecessaryLocked(void *a1, const char *a2, ...)
{
  return _[a1 _waitForClientsIfNecessaryLocked];
}

id objc_msgSend__whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier_callBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier:callBlock:");
}

id objc_msgSend__willUpdateCKRecordWithID_onBehalfOfRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:");
}

id objc_msgSend__wipeBeforeOpeningIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _wipeBeforeOpeningIfNecessary];
}

id objc_msgSend__wipeIfDeactivated_didWipeDatabase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeIfDeactivated:didWipeDatabase:error:");
}

id objc_msgSend__wipeReasonFromCorruptionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeReasonFromCorruptionInfo:");
}

id objc_msgSend__wipeStoreMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 _wipeStoreMarkerURL];
}

id objc_msgSend__wipeStoreMarkerURLWithCloudLibraryStateStorageURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeStoreMarkerURLWithCloudLibraryStateStorageURL:");
}

id objc_msgSend__wipeWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wipeWithReason:");
}

id objc_msgSend__withTempCKAssetForData_tempFolderURL_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_withTempCKAssetForData:tempFolderURL:block:");
}

id objc_msgSend__withVoucherForTaskWithIdentifier_do_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_withVoucherForTaskWithIdentifier:do:");
}

id objc_msgSend__wrappersLibraryIdentifierEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 _wrappersLibraryIdentifierEnumerator];
}

id objc_msgSend__writeStoreMarkerAtURL_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeStoreMarkerAtURL:reason:");
}

id objc_msgSend__zoneishContainer(void *a1, const char *a2, ...)
{
  return _[a1 _zoneishContainer];
}

id objc_msgSend_abstractObject(void *a1, const char *a2, ...)
{
  return _[a1 abstractObject];
}

id objc_msgSend_acceptSharedScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptSharedScope:completionHandler:");
}

id objc_msgSend_acceptTaskForSharedScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptTaskForSharedScope:completionHandler:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _[a1 acceptanceStatus];
}

id objc_msgSend_accessibilityDescription(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityDescription];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_acknowledgeChangeBatch_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangeBatch:withCompletionHandler:");
}

id objc_msgSend_acknowledgeChangedStatuses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangedStatuses:");
}

id objc_msgSend_acknowledgeChangedStatuses_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeChangedStatuses:error:");
}

id objc_msgSend_acquireBackgroundActivityWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireBackgroundActivityWithCompletionHandler:");
}

id objc_msgSend_acquireError(void *a1, const char *a2, ...)
{
  return _[a1 acquireError];
}

id objc_msgSend_acquireHelperWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireHelperWithIdentifier:completionHandler:");
}

id objc_msgSend_acquiredTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquiredTask:");
}

id objc_msgSend_actionData(void *a1, const char *a2, ...)
{
  return _[a1 actionData];
}

id objc_msgSend_activateScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_activationDate(void *a1, const char *a2, ...)
{
  return _[a1 activationDate];
}

id objc_msgSend_activityHasExpired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityHasExpired:");
}

id objc_msgSend_activityHasExpired_forRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityHasExpired:forRescheduler:");
}

id objc_msgSend_activityState(void *a1, const char *a2, ...)
{
  return _[a1 activityState];
}

id objc_msgSend_addBudgetDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBudgetDelegate:");
}

id objc_msgSend_addCKKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCKKeys:");
}

id objc_msgSend_addChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChange:");
}

id objc_msgSend_addChild_withPendingUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChild:withPendingUnitCount:");
}

id objc_msgSend_addColumnVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addColumnVariable:error:");
}

id objc_msgSend_addColumnVariableGroup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addColumnVariableGroup:error:");
}

id objc_msgSend_addComputeState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addComputeState:error:");
}

id objc_msgSend_addCopyMoveFromRecordID_toRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCopyMoveFromRecordID:toRecordID:");
}

id objc_msgSend_addDeferHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeferHandler:");
}

id objc_msgSend_addDownloadTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDownloadTask:");
}

id objc_msgSend_addDropDerivativesRecipe_writeToUserDefaults_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDropDerivativesRecipe:writeToUserDefaults:withCompletionHandler:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExitingUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExitingUserIdentifiers:");
}

id objc_msgSend_addExpungeableResourceStateToCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExpungeableResourceStateToCKRecord:");
}

id objc_msgSend_addFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFeatureVersion:");
}

id objc_msgSend_addFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFeatures:");
}

id objc_msgSend_addGlobalVariable_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGlobalVariable:defaultValue:error:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndexes:");
}

id objc_msgSend_addInfoToLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInfoToLog:");
}

id objc_msgSend_addKeysAndValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeysAndValues:");
}

id objc_msgSend_addKnownTarget_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKnownTarget:forRecordWithScopedIdentifier:");
}

id objc_msgSend_addMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessages:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipant:");
}

id objc_msgSend_addPushPullGatekeeper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPushPullGatekeeper:error:");
}

id objc_msgSend_addRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecord:");
}

id objc_msgSend_addRecord_forRecordID_ignoreResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecord:forRecordID:ignoreResources:");
}

id objc_msgSend_addRecordsToRevertWithLocalScopedIdentifier_class_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordsToRevertWithLocalScopedIdentifier:class:error:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResource:");
}

id objc_msgSend_addResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResourceType:");
}

id objc_msgSend_addShareTodo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShareTodo:");
}

id objc_msgSend_addStatusChangesForRecordsWithScopedIdentifiers_persist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStatusChangesForRecordsWithScopedIdentifiers:persist:");
}

id objc_msgSend_addSyncAnchor_forFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSyncAnchor:forFeatureVersion:");
}

id objc_msgSend_addTransportScopeForScopeIdentifier_scopes_useStagingScopeIfNecessary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTransportScopeForScopeIdentifier:scopes:useStagingScopeIfNecessary:error:");
}

id objc_msgSend_addVolumeUnmountObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVolumeUnmountObserver:");
}

id objc_msgSend_addedDate(void *a1, const char *a2, ...)
{
  return _[a1 addedDate];
}

id objc_msgSend_additionalInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalInfo];
}

id objc_msgSend_additionalStatusForScopeWithIndex_baseRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalStatusForScopeWithIndex:baseRecordCount:");
}

id objc_msgSend_adds(void *a1, const char *a2, ...)
{
  return _[a1 adds];
}

id objc_msgSend_adjustedMediaMetaData(void *a1, const char *a2, ...)
{
  return _[a1 adjustedMediaMetaData];
}

id objc_msgSend_adjustedMediaMetaDataType(void *a1, const char *a2, ...)
{
  return _[a1 adjustedMediaMetaDataType];
}

id objc_msgSend_adjustmentCompoundVersion(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentCompoundVersion];
}

id objc_msgSend_adjustmentCreatorCode(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentCreatorCode];
}

id objc_msgSend_adjustmentFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentFingerprint];
}

id objc_msgSend_adjustmentRenderTypes(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentRenderTypes];
}

id objc_msgSend_adjustmentSourceType(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentSourceType];
}

id objc_msgSend_adjustmentTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentTimestamp];
}

id objc_msgSend_adjustmentType(void *a1, const char *a2, ...)
{
  return _[a1 adjustmentType];
}

id objc_msgSend_adjustments(void *a1, const char *a2, ...)
{
  return _[a1 adjustments];
}

id objc_msgSend_albumSortAscending(void *a1, const char *a2, ...)
{
  return _[a1 albumSortAscending];
}

id objc_msgSend_albumSortType(void *a1, const char *a2, ...)
{
  return _[a1 albumSortType];
}

id objc_msgSend_albumType(void *a1, const char *a2, ...)
{
  return _[a1 albumType];
}

id objc_msgSend_allChangesWithClass_relatedScopedIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:relatedScopedIdentifier:table:");
}

id objc_msgSend_allChangesWithClass_scopeIdentifier_changeType_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:scopeIdentifier:changeType:table:");
}

id objc_msgSend_allChangesWithClass_scopeIdentifier_trashed_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:scopeIdentifier:trashed:table:");
}

id objc_msgSend_allChangesWithClass_secondaryScopedIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithClass:secondaryScopedIdentifier:table:");
}

id objc_msgSend_allChangesWithScopeIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChangesWithScopeIdentifier:table:");
}

id objc_msgSend_allDefinedParameters(void *a1, const char *a2, ...)
{
  return _[a1 allDefinedParameters];
}

id objc_msgSend_allDownloadsDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDownloadsDidFailWithError:");
}

id objc_msgSend_allDownloadsDidStartWithOperationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDownloadsDidStartWithOperationID:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allNonDeletedChangesWithClass_scopeIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allNonDeletedChangesWithClass:scopeIdentifier:table:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allResourcesAreAvailable(void *a1, const char *a2, ...)
{
  return _[a1 allResourcesAreAvailable];
}

id objc_msgSend_allScopeIdentifiersIncludeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allScopeIdentifiersIncludeInactive:");
}

id objc_msgSend_allSourceBundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allSourceBundleIdentifiers];
}

id objc_msgSend_allTargetScopedIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allTargetScopedIdentifiers];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowed(void *a1, const char *a2, ...)
{
  return _[a1 allowed];
}

id objc_msgSend_allowedProtocolForClientAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedProtocolForClientAccess:");
}

id objc_msgSend_allowsCellular(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellular];
}

id objc_msgSend_allowsCellularAccess(void *a1, const char *a2, ...)
{
  return _[a1 allowsCellularAccess];
}

id objc_msgSend_allowsCellularForDownloadOperationOfResource_isForeground_isHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsCellularForDownloadOperationOfResource:isForeground:isHighPriority:");
}

id objc_msgSend_allowsCellularForDownloadOperationOfSize_isForeground_isHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsCellularForDownloadOperationOfSize:isForeground:isHighPriority:");
}

id objc_msgSend_allowsConfigurationRefreshForWrapperArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsConfigurationRefreshForWrapperArray:");
}

id objc_msgSend_allowsFetchCache(void *a1, const char *a2, ...)
{
  return _[a1 allowsFetchCache];
}

id objc_msgSend_allowsSyncOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 allowsSyncOverCellular];
}

id objc_msgSend_allowsSyncOverExpensiveNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowsSyncOverExpensiveNetwork];
}

id objc_msgSend_allowsUserInitiatedOperationsOverExpensiveNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowsUserInitiatedOperationsOverExpensiveNetwork];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_alwaysCreateEPPMomentShares(void *a1, const char *a2, ...)
{
  return _[a1 alwaysCreateEPPMomentShares];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appendBatch_alreadyMingled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBatch:alreadyMingled:error:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationBundleIdentifierOverrideForContainerAccess(void *a1, const char *a2, ...)
{
  return _[a1 applicationBundleIdentifierOverrideForContainerAccess];
}

id objc_msgSend_applicationBundleIdentifierOverrideForNetworkAttribution(void *a1, const char *a2, ...)
{
  return _[a1 applicationBundleIdentifierOverrideForNetworkAttribution];
}

id objc_msgSend_applyChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyChange:");
}

id objc_msgSend_applyPreviousChangeSessionUpdateWithExpectedLibraryVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:error:");
}

id objc_msgSend_approximativeBlockedInterval(void *a1, const char *a2, ...)
{
  return _[a1 approximativeBlockedInterval];
}

id objc_msgSend_archiveCursor(void *a1, const char *a2, ...)
{
  return _[a1 archiveCursor];
}

id objc_msgSend_archiveFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveFileAtURL:outputFileURL:error:");
}

id objc_msgSend_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:");
}

id objc_msgSend_archivedDataWithRootObject_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:usingBlock:");
}

id objc_msgSend_areObjectsDifferentOnProperty_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areObjectsDifferentOnProperty:changeType:");
}

id objc_msgSend_areSomeUsersExiting(void *a1, const char *a2, ...)
{
  return _[a1 areSomeUsersExiting];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asPlist(void *a1, const char *a2, ...)
{
  return _[a1 asPlist];
}

id objc_msgSend_assertNoUnacknowledgedChanges(void *a1, const char *a2, ...)
{
  return _[a1 assertNoUnacknowledgedChanges];
}

id objc_msgSend_assetContent(void *a1, const char *a2, ...)
{
  return _[a1 assetContent];
}

id objc_msgSend_assetCounts(void *a1, const char *a2, ...)
{
  return _[a1 assetCounts];
}

id objc_msgSend_assetDate(void *a1, const char *a2, ...)
{
  return _[a1 assetDate];
}

id objc_msgSend_assetHDRType(void *a1, const char *a2, ...)
{
  return _[a1 assetHDRType];
}

id objc_msgSend_assetList(void *a1, const char *a2, ...)
{
  return _[a1 assetList];
}

id objc_msgSend_assetListPredicate(void *a1, const char *a2, ...)
{
  return _[a1 assetListPredicate];
}

id objc_msgSend_assetReference(void *a1, const char *a2, ...)
{
  return _[a1 assetReference];
}

id objc_msgSend_assetSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 assetSortOrder];
}

id objc_msgSend_assetSubtype(void *a1, const char *a2, ...)
{
  return _[a1 assetSubtype];
}

id objc_msgSend_assetTransferOptions(void *a1, const char *a2, ...)
{
  return _[a1 assetTransferOptions];
}

id objc_msgSend_assetTransferOptionsByRecordTypeAndKey(void *a1, const char *a2, ...)
{
  return _[a1 assetTransferOptionsByRecordTypeAndKey];
}

id objc_msgSend_associateCloudResource_ofRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateCloudResource:ofRecord:");
}

id objc_msgSend_associateMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateMetric:");
}

id objc_msgSend_associateWithCompletedOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWithCompletedOperation:");
}

id objc_msgSend_associateWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWithOperation:");
}

id objc_msgSend_associatedOperationDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedOperationDidComplete:");
}

id objc_msgSend_attachComputeStates_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachComputeStates:completionHandler:");
}

id objc_msgSend_attachObject_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachObject:withCompletionHandler:");
}

id objc_msgSend_attachToCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToCKOperation:");
}

id objc_msgSend_attachToCKOperationConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToCKOperationConfiguration:");
}

id objc_msgSend_attachedDiffTracker(void *a1, const char *a2, ...)
{
  return _[a1 attachedDiffTracker];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_autovacuumableSpaceInBytes(void *a1, const char *a2, ...)
{
  return _[a1 autovacuumableSpaceInBytes];
}

id objc_msgSend_auxiliaryOperationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryOperationDidFinishWithError:");
}

id objc_msgSend_awakeFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 awakeFromStorage];
}

id objc_msgSend_backgroundDownloadDidFailForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDownloadDidFailForResource:");
}

id objc_msgSend_backgroundDownloadDidFinishForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDownloadDidFinishForResource:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseCKRecord(void *a1, const char *a2, ...)
{
  return _[a1 baseCKRecord];
}

id objc_msgSend_baseConfigurationForTask(void *a1, const char *a2, ...)
{
  return _[a1 baseConfigurationForTask];
}

id objc_msgSend_baseDestinationCKRecordForSourceCKRecord_destinationCKRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseDestinationCKRecordForSourceCKRecord:destinationCKRecordID:error:");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _[a1 baseURL];
}

id objc_msgSend_batch(void *a1, const char *a2, ...)
{
  return _[a1 batch];
}

id objc_msgSend_batterySaverWatcherDidChangeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batterySaverWatcherDidChangeState:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginChangeSession_withLibraryVersion_resetTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginChangeSession:withLibraryVersion:resetTracker:error:");
}

id objc_msgSend_beginClientWork(void *a1, const char *a2, ...)
{
  return _[a1 beginClientWork];
}

id objc_msgSend_beginClientWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginClientWork:");
}

id objc_msgSend_beginDownloadForResource_clientBundleID_options_proposedTaskIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDownloadForResource:clientBundleID:options:proposedTaskIdentifier:completionHandler:");
}

id objc_msgSend_beginInMemoryDownloadOfResource_clientBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginInMemoryDownloadOfResource:clientBundleID:completionHandler:");
}

id objc_msgSend_beginPullChangeSessionWithKnownLibraryVersion_resetTracker_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginPullChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:");
}

id objc_msgSend_beginPushChangeSessionWithKnownLibraryVersion_resetTracker_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginPushChangeSessionWithKnownLibraryVersion:resetTracker:completionHandler:");
}

id objc_msgSend_beginRegisteringKnownReschedulerManager(void *a1, const char *a2, ...)
{
  return _[a1 beginRegisteringKnownReschedulerManager];
}

id objc_msgSend_beginTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTask:");
}

id objc_msgSend_beginTransactionWithIdentifier_description_keepPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransactionWithIdentifier:description:keepPower:");
}

id objc_msgSend_bestErrorForUnderlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bestErrorForUnderlyingError:");
}

id objc_msgSend_bindValuesToKeepAlive(void *a1, const char *a2, ...)
{
  return _[a1 bindValuesToKeepAlive];
}

id objc_msgSend_bindWithStatement_startingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindWithStatement:startingAtIndex:");
}

id objc_msgSend_bindableValueForDefaultValue(void *a1, const char *a2, ...)
{
  return _[a1 bindableValueForDefaultValue];
}

id objc_msgSend_bindableValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindableValueForValue:");
}

id objc_msgSend_blacklistedFeature(void *a1, const char *a2, ...)
{
  return _[a1 blacklistedFeature];
}

id objc_msgSend_blockEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockEngineElement:");
}

id objc_msgSend_blockEngineWithReason_onlyIfBlocked_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockEngineWithReason:onlyIfBlocked:block:");
}

id objc_msgSend_blockWithAdaptedQOS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockWithAdaptedQOS:");
}

id objc_msgSend_blockWriteTransactionsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockWriteTransactionsWithCompletionHandler:");
}

id objc_msgSend_blocker(void *a1, const char *a2, ...)
{
  return _[a1 blocker];
}

id objc_msgSend_BOOLAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLAtIndex:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_boostPriorityForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boostPriorityForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_boundaryKey(void *a1, const char *a2, ...)
{
  return _[a1 boundaryKey];
}

id objc_msgSend_bumpPullFromTransportExpirationIntervalWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bumpPullFromTransportExpirationIntervalWithError:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifiers];
}

id objc_msgSend_burstFlags(void *a1, const char *a2, ...)
{
  return _[a1 burstFlags];
}

id objc_msgSend_burstIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 burstIdentifier];
}

id objc_msgSend_busyStateVar(void *a1, const char *a2, ...)
{
  return _[a1 busyStateVar];
}

id objc_msgSend_bypassQueue(void *a1, const char *a2, ...)
{
  return _[a1 bypassQueue];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cachedRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedRecordWithID:");
}

id objc_msgSend_cachedValueForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedValueForIdentifier:");
}

id objc_msgSend_callDidFinish(void *a1, const char *a2, ...)
{
  return _[a1 callDidFinish];
}

id objc_msgSend_callbackOperationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackOperationDidFinishWithError:");
}

id objc_msgSend_cameraWatcherDidChangeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraWatcherDidChangeState:");
}

id objc_msgSend_canAcceptShareWithCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 canAcceptShareWithCloudKit];
}

id objc_msgSend_canActivateScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canActivateScope:error:");
}

id objc_msgSend_canBoostBackgroundOperations(void *a1, const char *a2, ...)
{
  return _[a1 canBoostBackgroundOperations];
}

id objc_msgSend_canBoostOperations(void *a1, const char *a2, ...)
{
  return _[a1 canBoostOperations];
}

id objc_msgSend_canMatchSignatureToFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 canMatchSignatureToFingerprint];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelAllOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperationsWithCompletionHandler:");
}

id objc_msgSend_cancelConfigurationDictionariesRefresh(void *a1, const char *a2, ...)
{
  return _[a1 cancelConfigurationDictionariesRefresh];
}

id objc_msgSend_cancelCurrentSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 cancelCurrentSyncSession];
}

id objc_msgSend_cancelDownloadTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDownloadTask:");
}

id objc_msgSend_cancelTask(void *a1, const char *a2, ...)
{
  return _[a1 cancelTask];
}

id objc_msgSend_cancelTaskRequestWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTaskRequestWithIdentifier:error:");
}

id objc_msgSend_caption(void *a1, const char *a2, ...)
{
  return _[a1 caption];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_center_didReceivePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center:didReceivePushNotification:");
}

id objc_msgSend_changeForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeForType:");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeWithScopedIdentifier:");
}

id objc_msgSend_changeWithSourceRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeWithSourceRecordID:");
}

id objc_msgSend_changedKeys(void *a1, const char *a2, ...)
{
  return _[a1 changedKeys];
}

id objc_msgSend_changedKeysSet(void *a1, const char *a2, ...)
{
  return _[a1 changedKeysSet];
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_checkExpectedLibraryVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExpectedLibraryVersion:error:");
}

id objc_msgSend_checkHasBackgroundDownloadOperationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkHasBackgroundDownloadOperationsWithCompletionHandler:");
}

id objc_msgSend_checkInWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInWithError:");
}

id objc_msgSend_checkOutWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkOutWithError:");
}

id objc_msgSend_checkResourcesAreSafeToPrune_checkServerIfNecessary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourcesAreSafeToPrune:checkServerIfNecessary:completionHandler:");
}

id objc_msgSend_checkScopeIsValidWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkScopeIsValidWithError:");
}

id objc_msgSend_checkServerForResources_targetMapping_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkServerForResources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_ckAssetProperties(void *a1, const char *a2, ...)
{
  return _[a1 ckAssetProperties];
}

id objc_msgSend_ckKeys(void *a1, const char *a2, ...)
{
  return _[a1 ckKeys];
}

id objc_msgSend_ckPropertyForRelatedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 ckPropertyForRelatedIdentifier];
}

id objc_msgSend_ckRecordForLibraryShareSettingsWithZoneID_userID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckRecordForLibraryShareSettingsWithZoneID:userID:");
}

id objc_msgSend_ckRecordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToDelete];
}

id objc_msgSend_ckRecordIDsToShare(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToShare];
}

id objc_msgSend_ckRecordIDsToUnshare(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordIDsToUnshare];
}

id objc_msgSend_ckRecordsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 ckRecordsToUpload];
}

id objc_msgSend_ckValueForRelatedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckValueForRelatedRecord:");
}

id objc_msgSend_classForInitialQueryVar(void *a1, const char *a2, ...)
{
  return _[a1 classForInitialQueryVar];
}

id objc_msgSend_cleanupUnusedUpgradeHistoriesWithUsedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupUnusedUpgradeHistoriesWithUsedBlock:");
}

id objc_msgSend_clearAllPushPullGatekeepersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllPushPullGatekeepersWithError:");
}

id objc_msgSend_clearAllQuotaFlagsForMainScopeWithReason_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllQuotaFlagsForMainScopeWithReason:error:");
}

id objc_msgSend_clearFeatureVersions(void *a1, const char *a2, ...)
{
  return _[a1 clearFeatureVersions];
}

id objc_msgSend_clearFeatures(void *a1, const char *a2, ...)
{
  return _[a1 clearFeatures];
}

id objc_msgSend_clearIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 clearIdentifiers];
}

id objc_msgSend_clientAppBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientAppBundleIdentifier];
}

id objc_msgSend_clientBundleID(void *a1, const char *a2, ...)
{
  return _[a1 clientBundleID];
}

id objc_msgSend_clientCache(void *a1, const char *a2, ...)
{
  return _[a1 clientCache];
}

id objc_msgSend_clientCacheIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientCacheIdentifier];
}

id objc_msgSend_clientIsForeground(void *a1, const char *a2, ...)
{
  return _[a1 clientIsForeground];
}

id objc_msgSend_clientIsPushingChanges(void *a1, const char *a2, ...)
{
  return _[a1 clientIsPushingChanges];
}

id objc_msgSend_clientLibraryBaseURL(void *a1, const char *a2, ...)
{
  return _[a1 clientLibraryBaseURL];
}

id objc_msgSend_clientProtocolInterface(void *a1, const char *a2, ...)
{
  return _[a1 clientProtocolInterface];
}

id objc_msgSend_clientWorkDescription(void *a1, const char *a2, ...)
{
  return _[a1 clientWorkDescription];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_close_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "close:");
}

id objc_msgSend_closeAndDeactivate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndDeactivate:completionHandler:");
}

id objc_msgSend_closeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithCompletionHandler:");
}

id objc_msgSend_closeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeWithError:");
}

id objc_msgSend_cloudCache(void *a1, const char *a2, ...)
{
  return _[a1 cloudCache];
}

id objc_msgSend_cloudCacheGetDescriptionForRecordWithScopedIdentifier_related_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudCacheGetDescriptionForRecordWithScopedIdentifier:related:completionHandler:");
}

id objc_msgSend_cloudIndex(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndex];
}

id objc_msgSend_cloudIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndexVar];
}

id objc_msgSend_cloudIndexesInjection(void *a1, const char *a2, ...)
{
  return _[a1 cloudIndexesInjection];
}

id objc_msgSend_cloudKitClientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitClientIdentifier];
}

id objc_msgSend_cloudKitRescheduler(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitRescheduler];
}

id objc_msgSend_cloudKitReschedulerManagerForLibraryWithIdentifier_involvedProcesses_relatedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:");
}

id objc_msgSend_cloudKitScope(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitScope];
}

id objc_msgSend_cloudKitScopeForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitScopeForScopeIdentifier:");
}

id objc_msgSend_cloudKitScopeListSyncAnchorWithScopeListSyncAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitScopeListSyncAnchorWithScopeListSyncAnchor:");
}

id objc_msgSend_cloudLibraryResourceStorageURL(void *a1, const char *a2, ...)
{
  return _[a1 cloudLibraryResourceStorageURL];
}

id objc_msgSend_cloudLibraryStateStorageURL(void *a1, const char *a2, ...)
{
  return _[a1 cloudLibraryStateStorageURL];
}

id objc_msgSend_cloudRecord(void *a1, const char *a2, ...)
{
  return _[a1 cloudRecord];
}

id objc_msgSend_cloudResource(void *a1, const char *a2, ...)
{
  return _[a1 cloudResource];
}

id objc_msgSend_cloudResourceForLocalResource_cloudRecord_target_shouldNotTrustCaches_allowUnsafeClientCache_transportScopeMapping_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudResourceForLocalResource:cloudRecord:target:shouldNotTrustCaches:allowUnsafeClientCache:transportScopeMapping:error:");
}

id objc_msgSend_cloudResourceForRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudResourceForRecordWithScopedIdentifier:");
}

id objc_msgSend_cloudScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudScopeIndexForScopeIdentifier:");
}

id objc_msgSend_cloudScopedIdentifierForLocalScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudScopedIdentifierForLocalScopedIdentifier:isFinal:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_codec(void *a1, const char *a2, ...)
{
  return _[a1 codec];
}

id objc_msgSend_columnDefinition(void *a1, const char *a2, ...)
{
  return _[a1 columnDefinition];
}

id objc_msgSend_commitChangeBatch_withUnderlyingCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitChangeBatch:withUnderlyingCompletionHandler:");
}

id objc_msgSend_commitStagedChangesForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitStagedChangesForScopeWithIdentifier:error:");
}

id objc_msgSend_compactChangeBatchesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactChangeBatchesWithError:");
}

id objc_msgSend_compactFileCacheWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactFileCacheWithCompletionHandler:");
}

id objc_msgSend_compactWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactWithError:");
}

id objc_msgSend_compactedBatchFromExpandedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactedBatchFromExpandedBatch:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completedUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 completedUnitCount];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_computeDiff(void *a1, const char *a2, ...)
{
  return _[a1 computeDiff];
}

id objc_msgSend_computeExpandedBatchWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeExpandedBatchWithError:");
}

id objc_msgSend_computeStateAdjustmentFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 computeStateAdjustmentFingerprint];
}

id objc_msgSend_computeStateVersion(void *a1, const char *a2, ...)
{
  return _[a1 computeStateVersion];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 configurationDictionary];
}

id objc_msgSend_configureAssetTransferOptionsForCKAsset_fromReference_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:");
}

id objc_msgSend_configureAssetTransferOptionsForCKAsset_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureAssetTransferOptionsForCKAsset:scopeProvider:");
}

id objc_msgSend_configureDirectTransportTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureDirectTransportTask:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_contactDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 contactDescriptor];
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containerHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 containerHasBeenWiped];
}

id objc_msgSend_containerID(void *a1, const char *a2, ...)
{
  return _[a1 containerID];
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containerIdentifier];
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contextForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForOperation:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _[a1 coordinate];
}

id objc_msgSend_coordinator_provideCKAssetWithRecordID_fieldName_recordType_signature_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinator:provideCKAssetWithRecordID:fieldName:recordType:signature:completionHandler:");
}

id objc_msgSend_coordinatorDidReceiveAPushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinatorDidReceiveAPushNotification:");
}

id objc_msgSend_coordinatorWontBeUsed(void *a1, const char *a2, ...)
{
  return _[a1 coordinatorWontBeUsed];
}

id objc_msgSend_copiedRecordFromSourceRecord_action_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copiedRecordFromSourceRecord:action:error:");
}

id objc_msgSend_copiedRecordFromSourceRecord_sourceDatabaseScope_toRecordID_helper_action_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyChangeType:");
}

id objc_msgSend_copyContextWithUploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyContextWithUploadIdentifier:");
}

id objc_msgSend_copyRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:completionHandler:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_corruptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 corruptionInfo];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfChangesInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfChangesInScopeWithIdentifier:");
}

id objc_msgSend_countOfComputeStates(void *a1, const char *a2, ...)
{
  return _[a1 countOfComputeStates];
}

id objc_msgSend_countOfDownloadTasks(void *a1, const char *a2, ...)
{
  return _[a1 countOfDownloadTasks];
}

id objc_msgSend_countOfOperationClasses(void *a1, const char *a2, ...)
{
  return _[a1 countOfOperationClasses];
}

id objc_msgSend_countOfOperationWithCellularAccessClasses(void *a1, const char *a2, ...)
{
  return _[a1 countOfOperationWithCellularAccessClasses];
}

id objc_msgSend_countOfOriginalImages(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalImages];
}

id objc_msgSend_countOfOriginalOthers(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalOthers];
}

id objc_msgSend_countOfOriginalVideos(void *a1, const char *a2, ...)
{
  return _[a1 countOfOriginalVideos];
}

id objc_msgSend_countOfQuarantinedRecordsInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfQuarantinedRecordsInScopeWithIdentifier:");
}

id objc_msgSend_countOfQueuedBatches(void *a1, const char *a2, ...)
{
  return _[a1 countOfQueuedBatches];
}

id objc_msgSend_countOfStashedRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfStashedRecords];
}

id objc_msgSend_countOfUnacknowledgesRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfUnacknowledgesRecords];
}

id objc_msgSend_countOfUnmingledRecords(void *a1, const char *a2, ...)
{
  return _[a1 countOfUnmingledRecords];
}

id objc_msgSend_countPerFlagsForScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countPerFlagsForScopeWithIdentifier:");
}

id objc_msgSend_course(void *a1, const char *a2, ...)
{
  return _[a1 course];
}

id objc_msgSend_cplChangeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplChangeAtIndex:");
}

id objc_msgSend_cplCopyCleanAsset(void *a1, const char *a2, ...)
{
  return _[a1 cplCopyCleanAsset];
}

id objc_msgSend_cplCopyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplCopyItemAtURL:toURL:error:");
}

id objc_msgSend_cplDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 cplDiscretionary];
}

id objc_msgSend_cplEnabledDate(void *a1, const char *a2, ...)
{
  return _[a1 cplEnabledDate];
}

id objc_msgSend_cplErrorCausedBySharedSyncForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorCausedBySharedSyncForError:");
}

id objc_msgSend_cplErrorWithCode_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:description:");
}

id objc_msgSend_cplErrorWithCode_underlyingError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:underlyingError:description:");
}

id objc_msgSend_cplErrorWithCode_underlyingError_userInfo_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplErrorWithCode:underlyingError:userInfo:description:");
}

id objc_msgSend_cplExecute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplExecute:");
}

id objc_msgSend_cplFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetch:");
}

id objc_msgSend_cplFetchObject_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetchObject:sql:");
}

id objc_msgSend_cplFetchObjectOfClass_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFetchObjectOfClass:sql:");
}

id objc_msgSend_cplFileExistsAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFileExistsAtURL:");
}

id objc_msgSend_cplFingerPrint(void *a1, const char *a2, ...)
{
  return _[a1 cplFingerPrint];
}

id objc_msgSend_cplFingerPrintForSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplFingerPrintForSignature:");
}

id objc_msgSend_cplFullDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplFullDescription];
}

id objc_msgSend_cplInjectionFor_isInIndexSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplInjectionFor:isInIndexSet:");
}

id objc_msgSend_cplInjectionFor_isNotInIndexSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplInjectionFor:isNotInIndexSet:");
}

id objc_msgSend_cplIsFileDoesNotExistError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplIsFileDoesNotExistError:");
}

id objc_msgSend_cplIsFileExistsError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplIsFileExistsError:");
}

id objc_msgSend_cplLocationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 cplLocationDictionary];
}

id objc_msgSend_cplMoveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplMoveItemAtURL:toURL:error:");
}

id objc_msgSend_cplNotificationTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplNotificationTypeDescription];
}

id objc_msgSend_cplOperationClassDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplOperationClassDescription];
}

id objc_msgSend_cplPlaceAnnotationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 cplPlaceAnnotationDictionary];
}

id objc_msgSend_cplProperties_areEqualToPropertiesOf_diffTracker_withEqualityBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplProperties:areEqualToPropertiesOf:diffTracker:withEqualityBlock:");
}

id objc_msgSend_cplReason(void *a1, const char *a2, ...)
{
  return _[a1 cplReason];
}

id objc_msgSend_cplRecordWithName_zonedID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplRecordWithName:zonedID:");
}

id objc_msgSend_cplRegisterDeterministicFunction_nArgs_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplRegisterDeterministicFunction:nArgs:handler:");
}

id objc_msgSend_cplResourceWithType_scopedIdentifier_forRecord_isCoherent_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplResourceWithType:scopedIdentifier:forRecord:isCoherent:scopeProvider:");
}

id objc_msgSend_cplResourcesWithScopedIdentifier_coherent_forRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplResourcesWithScopedIdentifier:coherent:forRecord:scopeProvider:");
}

id objc_msgSend_cplSafeErrorForXPC(void *a1, const char *a2, ...)
{
  return _[a1 cplSafeErrorForXPC];
}

id objc_msgSend_cplShouldGenerateDerivatives(void *a1, const char *a2, ...)
{
  return _[a1 cplShouldGenerateDerivatives];
}

id objc_msgSend_cplSyncAnchorDescription(void *a1, const char *a2, ...)
{
  return _[a1 cplSyncAnchorDescription];
}

id objc_msgSend_cplUnderlyingError(void *a1, const char *a2, ...)
{
  return _[a1 cplUnderlyingError];
}

id objc_msgSend_cplUnderlyingPOSIXError(void *a1, const char *a2, ...)
{
  return _[a1 cplUnderlyingPOSIXError];
}

id objc_msgSend_cplValidateAndWarnIntegrityOfResourceData_withFingerPrintKey_andFileSizeKey_fingerprintScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cplValidateAndWarnIntegrityOfResourceData:withFingerPrintKey:andFileSizeKey:fingerprintScheme:");
}

id objc_msgSend_cpl_archivedDataWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_archivedDataWithRootObject:");
}

id objc_msgSend_cpl_decryptedObjectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_decryptedObjectForKey:validateClass:");
}

id objc_msgSend_cpl_destinationRecordIDInPrivateScopeWithCurrentUserRecordID_proposedDestinationRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_destinationRecordIDInPrivateScopeWithCurrentUserRecordID:proposedDestinationRecordID:");
}

id objc_msgSend_cpl_expungedRecordFromCPLRecordChange_inZone_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_expungedRecordFromCPLRecordChange:inZone:target:");
}

id objc_msgSend_cpl_expungedSharedRecordFromCPLRecordChange_inZone_target_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_expungedSharedRecordFromCPLRecordChange:inZone:target:");
}

id objc_msgSend_cpl_inExpunged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_inExpunged");
}

id objc_msgSend_cpl_isSparseRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_isSparseRecord");
}

id objc_msgSend_cpl_legacyDecryptedObjectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_legacyDecryptedObjectForKey:validateClass:");
}

id objc_msgSend_cpl_objectForKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_objectForKey:validateClass:");
}

id objc_msgSend_cpl_recordChangeClassForRecordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_recordChangeClassForRecordType:");
}

id objc_msgSend_cpl_recordChangeMissingResourceProperties_scopeIdentifier_scopeProvider_currentUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:");
}

id objc_msgSend_cpl_redactedShareURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_redactedShareURL");
}

id objc_msgSend_cpl_safeUnarchiveObjectWithData_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_safeUnarchiveObjectWithData:class:");
}

id objc_msgSend_cpl_safeUnarchiveObjectWithData_classes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_safeUnarchiveObjectWithData:classes:");
}

id objc_msgSend_cpl_scopedIdentifierWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_scopedIdentifierWithScopeIdentifier:");
}

id objc_msgSend_cpl_setEncryptedObject_forKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setEncryptedObject:forKey:validateClass:");
}

id objc_msgSend_cpl_setLegacyEncryptedObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setLegacyEncryptedObject:forKey:");
}

id objc_msgSend_cpl_setTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_setTask:");
}

id objc_msgSend_cpl_sharingRecordScopedIdentifierWithScopeProvider_currentUserRecordID_isSparseRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_sharingRecordScopedIdentifierWithScopeProvider:currentUserRecordID:isSparseRecord:");
}

id objc_msgSend_cpl_task(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_task");
}

id objc_msgSend_cpl_updateContributorsOnSharedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_updateContributorsOnSharedRecord:");
}

id objc_msgSend_cpl_updatePrivateRecordSharedToRecordWithID_currentUserRecordID_setSparseRecordFlag_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_updatePrivateRecordSharedToRecordWithID:currentUserRecordID:setSparseRecordFlag:force:");
}

id objc_msgSend_cpl_validObjectForKey_class_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_validObjectForKey:class:");
}

id objc_msgSend_cpl_zoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpl_zoneName");
}

id objc_msgSend_createCloudKitReschedulerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 createCloudKitReschedulerIfNecessary];
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createGroupAllowsCellular_allowsExpensiveNetwork_foreground_upload_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupAllowsCellular:allowsExpensiveNetwork:foreground:upload:metadata:");
}

id objc_msgSend_createGroupForAcceptingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAcceptingLibraryShare];
}

id objc_msgSend_createGroupForAcceptingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAcceptingMomentShare];
}

id objc_msgSend_createGroupForAnalysisDownload(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForAnalysisDownload];
}

id objc_msgSend_createGroupForComputeStateDownloadOnDemand(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForComputeStateDownloadOnDemand];
}

id objc_msgSend_createGroupForComputeStateDownloadPrefetch(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForComputeStateDownloadPrefetch];
}

id objc_msgSend_createGroupForExitSharedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForExitSharedLibrary];
}

id objc_msgSend_createGroupForFeedback(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFeedback];
}

id objc_msgSend_createGroupForFetchingExistingSharedScope(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingExistingSharedScope];
}

id objc_msgSend_createGroupForFetchingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingLibraryShare];
}

id objc_msgSend_createGroupForFetchingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForFetchingMomentShare];
}

id objc_msgSend_createGroupForMovieStreamingWithIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupForMovieStreamingWithIntent:");
}

id objc_msgSend_createGroupForPruningCheck(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPruningCheck];
}

id objc_msgSend_createGroupForPublishingLibraryShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPublishingLibraryShare];
}

id objc_msgSend_createGroupForPublishingMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForPublishingMomentShare];
}

id objc_msgSend_createGroupForQueryUserIdentities(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForQueryUserIdentities];
}

id objc_msgSend_createGroupForSendExitStatus(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSendExitStatus];
}

id objc_msgSend_createGroupForSetup(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSetup];
}

id objc_msgSend_createGroupForSharedLibraryRampCheck(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForSharedLibraryRampCheck];
}

id objc_msgSend_createGroupForTransportScopeDelete(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForTransportScopeDelete];
}

id objc_msgSend_createGroupForTransportScopeRefresh(void *a1, const char *a2, ...)
{
  return _[a1 createGroupForTransportScopeRefresh];
}

id objc_msgSend_createIndex_withDefinition_condition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndex:withDefinition:condition:unique:error:");
}

id objc_msgSend_createIndexOnColumn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexOnColumn:error:");
}

id objc_msgSend_createIndexOnColumnVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexOnColumnVariable:error:");
}

id objc_msgSend_createIndexWithName_withDefinition_condition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexWithName:withDefinition:condition:unique:error:");
}

id objc_msgSend_createIndexWithName_withDefinition_unique_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIndexWithName:withDefinition:unique:error:");
}

id objc_msgSend_createLibraryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLibraryWithError:");
}

id objc_msgSend_createMainTableWithColumnVariables_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMainTableWithColumnVariables:error:");
}

id objc_msgSend_createMainTableWithDefinition_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMainTableWithDefinition:error:");
}

id objc_msgSend_createNewClientCacheIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 createNewClientCacheIdentifier];
}

id objc_msgSend_createNewLibraryVersion(void *a1, const char *a2, ...)
{
  return _[a1 createNewLibraryVersion];
}

id objc_msgSend_createNewTempDownloadFolderWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewTempDownloadFolderWithError:");
}

id objc_msgSend_createRadarURL(void *a1, const char *a2, ...)
{
  return _[a1 createRadarURL];
}

id objc_msgSend_createRecordZoneWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRecordZoneWithID:");
}

id objc_msgSend_createReschedulerForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createReschedulerForSession:");
}

id objc_msgSend_createScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScope:completionHandler:");
}

id objc_msgSend_createScopeTaskForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScopeTaskForScope:completionHandler:");
}

id objc_msgSend_createScopeWithIdentifier_scopeType_flags_transportScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createScopeWithIdentifier:scopeType:flags:transportScope:error:");
}

id objc_msgSend_createStorage(void *a1, const char *a2, ...)
{
  return _[a1 createStorage];
}

id objc_msgSend_createVariable_defaultValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createVariable:defaultValue:error:");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_creationDateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationDateForScope:");
}

id objc_msgSend_creationDateVar(void *a1, const char *a2, ...)
{
  return _[a1 creationDateVar];
}

id objc_msgSend_currentActivity(void *a1, const char *a2, ...)
{
  return _[a1 currentActivity];
}

id objc_msgSend_currentClosingComponentName(void *a1, const char *a2, ...)
{
  return _[a1 currentClosingComponentName];
}

id objc_msgSend_currentFeatureVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentFeatureVersion];
}

id objc_msgSend_currentFetchRecordZoneChangesOperation(void *a1, const char *a2, ...)
{
  return _[a1 currentFetchRecordZoneChangesOperation];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentOperation(void *a1, const char *a2, ...)
{
  return _[a1 currentOperation];
}

id objc_msgSend_currentPlatform(void *a1, const char *a2, ...)
{
  return _[a1 currentPlatform];
}

id objc_msgSend_currentPrediction(void *a1, const char *a2, ...)
{
  return _[a1 currentPrediction];
}

id objc_msgSend_currentProgress(void *a1, const char *a2, ...)
{
  return _[a1 currentProgress];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentServerChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 currentServerChangeToken];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _[a1 currentSession];
}

id objc_msgSend_currentTracker(void *a1, const char *a2, ...)
{
  return _[a1 currentTracker];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentUserID(void *a1, const char *a2, ...)
{
  return _[a1 currentUserID];
}

id objc_msgSend_currentUserParticipant(void *a1, const char *a2, ...)
{
  return _[a1 currentUserParticipant];
}

id objc_msgSend_currentUserRecordID(void *a1, const char *a2, ...)
{
  return _[a1 currentUserRecordID];
}

id objc_msgSend_cursorData(void *a1, const char *a2, ...)
{
  return _[a1 cursorData];
}

id objc_msgSend_customRenderedValue(void *a1, const char *a2, ...)
{
  return _[a1 customRenderedValue];
}

id objc_msgSend_customTitle(void *a1, const char *a2, ...)
{
  return _[a1 customTitle];
}

id objc_msgSend_customUserAssetList(void *a1, const char *a2, ...)
{
  return _[a1 customUserAssetList];
}

id objc_msgSend_daemonLibraryManager_engineWrapperWithClientLibraryBaseURL_cloudLibraryStateStorageURL_cloudLibraryResourceStorageURL_libraryIdentifier_mainScopeIdentifier_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManager:engineWrapperWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:mainScopeIdentifier:options:error:");
}

id objc_msgSend_daemonLibraryManager_wantsToExitAfterResettingParametersForLibraryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManager:wantsToExitAfterResettingParametersForLibraryWithIdentifier:");
}

id objc_msgSend_daemonLibraryManagerHasBeenDisconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerHasBeenDisconnected:");
}

id objc_msgSend_daemonLibraryManagerOtherLibraryManager_withLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerOtherLibraryManager:withLibraryIdentifier:");
}

id objc_msgSend_daemonLibraryManagerWantsToExitNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLibraryManagerWantsToExitNow:");
}

id objc_msgSend_daemonProtocolInterface(void *a1, const char *a2, ...)
{
  return _[a1 daemonProtocolInterface];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAtIndex:");
}

id objc_msgSend_dataClassType(void *a1, const char *a2, ...)
{
  return _[a1 dataClassType];
}

id objc_msgSend_dataRepresentationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataRepresentationWithError:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_databaseForOperationType_relativeToOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseForOperationType:relativeToOperationType:");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return _[a1 databaseScope];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateType(void *a1, const char *a2, ...)
{
  return _[a1 dateType];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_dbHandle(void *a1, const char *a2, ...)
{
  return _[a1 dbHandle];
}

id objc_msgSend_deactivateMarkerURL(void *a1, const char *a2, ...)
{
  return _[a1 deactivateMarkerURL];
}

id objc_msgSend_deactivateScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_deactivateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateWithCompletionHandler:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decryptFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptFileAtURL:outputFileURL:error:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultConfiguration];
}

id objc_msgSend_defaultFlags(void *a1, const char *a2, ...)
{
  return _[a1 defaultFlags];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultOptions(void *a1, const char *a2, ...)
{
  return _[a1 defaultOptions];
}

id objc_msgSend_defaultSourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 defaultSourceBundleIdentifier];
}

id objc_msgSend_defaultSupportedLibraryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 defaultSupportedLibraryIdentifiers];
}

id objc_msgSend_defaultValue(void *a1, const char *a2, ...)
{
  return _[a1 defaultValue];
}

id objc_msgSend_defaultValueForNull(void *a1, const char *a2, ...)
{
  return _[a1 defaultValueForNull];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_deferWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferWithBlock:");
}

id objc_msgSend_definitionInjection(void *a1, const char *a2, ...)
{
  return _[a1 definitionInjection];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteChangeWithScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChangeWithScopedIdentifier:error:");
}

id objc_msgSend_deleteIncomingDownloadFolderWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIncomingDownloadFolderWithError:");
}

id objc_msgSend_deleteMingledRecordsForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMingledRecordsForScopeWithIdentifier:error:");
}

id objc_msgSend_deleteResources_checkServerIfNecessary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteResources:checkServerIfNecessary:completionHandler:");
}

id objc_msgSend_deleteScopeWithIdentifier_forced_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteScopeWithIdentifier:forced:completionHandler:");
}

id objc_msgSend_deleteTransportScope_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTransportScope:scope:completionHandler:");
}

id objc_msgSend_deletes(void *a1, const char *a2, ...)
{
  return _[a1 deletes];
}

id objc_msgSend_dequeueOrder(void *a1, const char *a2, ...)
{
  return _[a1 dequeueOrder];
}

id objc_msgSend_deregisterTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterTaskWithIdentifier:");
}

id objc_msgSend_derivativesCache(void *a1, const char *a2, ...)
{
  return _[a1 derivativesCache];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionForBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForBudgets:");
}

id objc_msgSend_descriptionForBusyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForBusyState:");
}

id objc_msgSend_descriptionForChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForChangeType:");
}

id objc_msgSend_descriptionForCloudKitScopeOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForCloudKitScopeOptions:");
}

id objc_msgSend_descriptionForDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForDirection:");
}

id objc_msgSend_descriptionForExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForExitState:");
}

id objc_msgSend_descriptionForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForFlags:");
}

id objc_msgSend_descriptionForIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForIntent:");
}

id objc_msgSend_descriptionForPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForPhase:");
}

id objc_msgSend_descriptionForScopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForScopeType:");
}

id objc_msgSend_descriptionForTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionForTaskType:");
}

id objc_msgSend_descriptionWithScopeIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionWithScopeIdentifier:identifier:");
}

id objc_msgSend_destinationRecord(void *a1, const char *a2, ...)
{
  return _[a1 destinationRecord];
}

id objc_msgSend_destinationZoneIdentification(void *a1, const char *a2, ...)
{
  return _[a1 destinationZoneIdentification];
}

id objc_msgSend_destinationresourceTypeFromShortDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationresourceTypeFromShortDescription:");
}

id objc_msgSend_detachFromCKOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detachFromCKOperation:");
}

id objc_msgSend_detachObject_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detachObject:withCompletionHandler:");
}

id objc_msgSend_detachedActivity(void *a1, const char *a2, ...)
{
  return _[a1 detachedActivity];
}

id objc_msgSend_detectionType(void *a1, const char *a2, ...)
{
  return _[a1 detectionType];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didAcquire(void *a1, const char *a2, ...)
{
  return _[a1 didAcquire];
}

id objc_msgSend_didAcquireTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAcquireTaskWithIdentifier:");
}

id objc_msgSend_didCancel(void *a1, const char *a2, ...)
{
  return _[a1 didCancel];
}

id objc_msgSend_didCancelTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCancelTaskWithIdentifier:");
}

id objc_msgSend_didDefer(void *a1, const char *a2, ...)
{
  return _[a1 didDefer];
}

id objc_msgSend_didDeferTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDeferTaskWithIdentifier:");
}

id objc_msgSend_didError(void *a1, const char *a2, ...)
{
  return _[a1 didError];
}

id objc_msgSend_didErrorTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didErrorTaskWithIdentifier:");
}

id objc_msgSend_didExpire(void *a1, const char *a2, ...)
{
  return _[a1 didExpire];
}

id objc_msgSend_didExpireTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExpireTaskWithIdentifier:");
}

id objc_msgSend_didFetchPrivateCKRecord_forRecordWithRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchPrivateCKRecord:forRecordWithRecordID:error:");
}

id objc_msgSend_didFetchRecordWithID_record_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchRecordWithID:record:");
}

id objc_msgSend_didFetchSharedCKRecord_forRecordWithRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchSharedCKRecord:forRecordWithRecordID:error:");
}

id objc_msgSend_didFinish(void *a1, const char *a2, ...)
{
  return _[a1 didFinish];
}

id objc_msgSend_didFinishExecutingPlanWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishExecutingPlanWithError:");
}

id objc_msgSend_didFinishTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishTaskWithIdentifier:");
}

id objc_msgSend_didFinishUploadOfRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishUploadOfRecordsWithError:");
}

id objc_msgSend_didFinishUploadOfSharedRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishUploadOfSharedRecordsWithError:");
}

id objc_msgSend_didModifyRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didModifyRecordWithID:");
}

id objc_msgSend_didStartHandler(void *a1, const char *a2, ...)
{
  return _[a1 didStartHandler];
}

id objc_msgSend_didSubmit(void *a1, const char *a2, ...)
{
  return _[a1 didSubmit];
}

id objc_msgSend_didSubmitTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSubmitTaskWithIdentifier:");
}

id objc_msgSend_diffedBatch(void *a1, const char *a2, ...)
{
  return _[a1 diffedBatch];
}

id objc_msgSend_diffedBatchCanLowerQuota(void *a1, const char *a2, ...)
{
  return _[a1 diffedBatchCanLowerQuota];
}

id objc_msgSend_differingProperties(void *a1, const char *a2, ...)
{
  return _[a1 differingProperties];
}

id objc_msgSend_disableMainScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableMainScopeWithCompletionHandler:");
}

id objc_msgSend_disableMingling(void *a1, const char *a2, ...)
{
  return _[a1 disableMingling];
}

id objc_msgSend_disableSynchronizationWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableSynchronizationWithReason:");
}

id objc_msgSend_disabledDate(void *a1, const char *a2, ...)
{
  return _[a1 disabledDate];
}

id objc_msgSend_disabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 disabledFeatures];
}

id objc_msgSend_discardCachedValue(void *a1, const char *a2, ...)
{
  return _[a1 discardCachedValue];
}

id objc_msgSend_discardResource_currentlyStoredResource_lastReference_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardResource:currentlyStoredResource:lastReference:error:");
}

id objc_msgSend_discardResource_discardedResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardResource:discardedResource:error:");
}

id objc_msgSend_discardTentativeResetReason(void *a1, const char *a2, ...)
{
  return _[a1 discardTentativeResetReason];
}

id objc_msgSend_discardTentativeResetReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardTentativeResetReason:");
}

id objc_msgSend_discardTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discardTracker:");
}

id objc_msgSend_discretionaryNetworkBehavior(void *a1, const char *a2, ...)
{
  return _[a1 discretionaryNetworkBehavior];
}

id objc_msgSend_dispatchAfter_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfter:block:");
}

id objc_msgSend_dispatchAsync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAsync:");
}

id objc_msgSend_dispatchCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCallback:");
}

id objc_msgSend_dispatchCallbackOperation_progress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCallbackOperation:progress:");
}

id objc_msgSend_dispatchSynchronousWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchSynchronousWork:");
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayableNameForEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayableNameForEngineLibrary:");
}

id objc_msgSend_displayableNameForLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayableNameForLibraryManager:");
}

id objc_msgSend_displayablePropertyListWithRootObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayablePropertyListWithRootObject:");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_do_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "do:");
}

id objc_msgSend_doScopesNeedMetadataSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doScopesNeedMetadataSync:");
}

id objc_msgSend_doesRecordClassSupportSparseRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesRecordClassSupportSparseRecords:");
}

id objc_msgSend_doesScopeNeedToPullChangesFromTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesScopeNeedToPullChangesFromTransport:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadComputeStatesWithScopedIdentifiers_scope_sharedScope_targetStorageURL_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadComputeStatesWithScopedIdentifiers:scope:sharedScope:targetStorageURL:transportScopeMapping:completionHandler:");
}

id objc_msgSend_downloadDidFinishForResourceTransferTask_finalResource_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidFinishForResourceTransferTask:finalResource:withError:");
}

id objc_msgSend_downloadDidProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidProgress:forResourceTransferTask:");
}

id objc_msgSend_downloadDidStartForResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDidStartForResourceTransferTask:");
}

id objc_msgSend_downloadOperationWithRecordIDsAndTasks_keys_downloadType_perRecordProgressBlock_perRecordCompletionBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadOperationWithRecordIDsAndTasks:keys:downloadType:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:");
}

id objc_msgSend_downloadProgress(void *a1, const char *a2, ...)
{
  return _[a1 downloadProgress];
}

id objc_msgSend_downloadQueue(void *a1, const char *a2, ...)
{
  return _[a1 downloadQueue];
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadSize];
}

id objc_msgSend_downloadTaskForLocalResource_clientBundleID_options_proposedTaskIdentifier_didStartHandler_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskForLocalResource:clientBundleID:options:proposedTaskIdentifier:didStartHandler:progressHandler:completionHandler:");
}

id objc_msgSend_downloadTransportGroupVar(void *a1, const char *a2, ...)
{
  return _[a1 downloadTransportGroupVar];
}

id objc_msgSend_downloadURL(void *a1, const char *a2, ...)
{
  return _[a1 downloadURL];
}

id objc_msgSend_downloadURLExpiration(void *a1, const char *a2, ...)
{
  return _[a1 downloadURLExpiration];
}

id objc_msgSend_downloadedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 downloadedItemCount];
}

id objc_msgSend_downloadedSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadedSize];
}

id objc_msgSend_dropBackgroundActivityRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropBackgroundActivityRequest:");
}

id objc_msgSend_dropCloudKitReschedulerManagerForLibraryWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropCloudKitReschedulerManagerForLibraryWithIdentifier:");
}

id objc_msgSend_dropExpungedResources_withExpungeableResourceStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropExpungedResources:withExpungeableResourceStates:");
}

id objc_msgSend_dropIndexWithName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropIndexWithName:error:");
}

id objc_msgSend_dropPersistedInitialSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 dropPersistedInitialSyncSession];
}

id objc_msgSend_dropResourceForUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropResourceForUpload:error:");
}

id objc_msgSend_dropTaskRequest_forRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropTaskRequest:forRescheduler:");
}

id objc_msgSend_dropUnacknowledgedBatch(void *a1, const char *a2, ...)
{
  return _[a1 dropUnacknowledgedBatch];
}

id objc_msgSend_droppedSomeRecordsVar(void *a1, const char *a2, ...)
{
  return _[a1 droppedSomeRecordsVar];
}

id objc_msgSend_duetStatuses(void *a1, const char *a2, ...)
{
  return _[a1 duetStatuses];
}

id objc_msgSend_duetTicketProvider(void *a1, const char *a2, ...)
{
  return _[a1 duetTicketProvider];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationInNanoSeconds(void *a1, const char *a2, ...)
{
  return _[a1 durationInNanoSeconds];
}

id objc_msgSend_earliestReasonDate(void *a1, const char *a2, ...)
{
  return _[a1 earliestReasonDate];
}

id objc_msgSend_effectiveResourceSizeToUploadUsingStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveResourceSizeToUploadUsingStorage:");
}

id objc_msgSend_email(void *a1, const char *a2, ...)
{
  return _[a1 email];
}

id objc_msgSend_emailAddress(void *a1, const char *a2, ...)
{
  return _[a1 emailAddress];
}

id objc_msgSend_emergencyClose(void *a1, const char *a2, ...)
{
  return _[a1 emergencyClose];
}

id objc_msgSend_emergencyExitForWrapperArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyExitForWrapperArray:");
}

id objc_msgSend_emergencyStop(void *a1, const char *a2, ...)
{
  return _[a1 emergencyStop];
}

id objc_msgSend_enableMainScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableMainScopeWithCompletionHandler:");
}

id objc_msgSend_enableMingling(void *a1, const char *a2, ...)
{
  return _[a1 enableMingling];
}

id objc_msgSend_enableSynchronizationWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSynchronizationWithReason:");
}

id objc_msgSend_enableTransactions(void *a1, const char *a2, ...)
{
  return _[a1 enableTransactions];
}

id objc_msgSend_enableTurboMode(void *a1, const char *a2, ...)
{
  return _[a1 enableTurboMode];
}

id objc_msgSend_enabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 enabledTopics];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encryptFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptFileAtURL:outputFileURL:error:");
}

id objc_msgSend_encryptedValueStore(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValueStore];
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endClientWork(void *a1, const char *a2, ...)
{
  return _[a1 endClientWork];
}

id objc_msgSend_endClientWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endClientWork:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endRegisteringKnownReschedulerManagers(void *a1, const char *a2, ...)
{
  return _[a1 endRegisteringKnownReschedulerManagers];
}

id objc_msgSend_endTask_withOperationClasses_operationsAllowingCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTask:withOperationClasses:operationsAllowingCellular:");
}

id objc_msgSend_endTransactionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransactionWithIdentifier:");
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_engineIsClosing(void *a1, const char *a2, ...)
{
  return _[a1 engineIsClosing];
}

id objc_msgSend_engineLibrary(void *a1, const char *a2, ...)
{
  return _[a1 engineLibrary];
}

id objc_msgSend_engineScope(void *a1, const char *a2, ...)
{
  return _[a1 engineScope];
}

id objc_msgSend_engineStore(void *a1, const char *a2, ...)
{
  return _[a1 engineStore];
}

id objc_msgSend_engineWrapper(void *a1, const char *a2, ...)
{
  return _[a1 engineWrapper];
}

id objc_msgSend_enumerateAllZonesWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAllZonesWithBlock:completionHandler:");
}

id objc_msgSend_enumerateChangesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateChangesWithBlock:");
}

id objc_msgSend_enumerateConcreteScopesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConcreteScopesWithBlock:");
}

id objc_msgSend_enumerateDaemonLibraryManagersWithLibraryIdentifier_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDaemonLibraryManagersWithLibraryIdentifier:block:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjects:");
}

id objc_msgSend_enumerateObjectsOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsOfClass:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateOpenedWrappersWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateOpenedWrappersWithBlock:");
}

id objc_msgSend_enumeratePushContextsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePushContextsWithBlock:");
}

id objc_msgSend_enumerateRecordScopedIdentifiersAndTasksWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRecordScopedIdentifiersAndTasksWithBlock:");
}

id objc_msgSend_enumerateResourceTypesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateResourceTypesWithBlock:");
}

id objc_msgSend_enumerateScopedTasksWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateScopedTasksWithBlock:");
}

id objc_msgSend_enumerateWrappersWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateWrappersWithBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_enumeratorForScopesIncludeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorForScopesIncludeInactive:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorForAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 errorForAllOperations];
}

id objc_msgSend_errorForDB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForDB:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorsForIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsForIdentifiers:error:");
}

id objc_msgSend_errorsPerRecordIDForPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsPerRecordIDForPartialFailureError:");
}

id objc_msgSend_errorsPerZoneIDForPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsPerZoneIDForPartialFailureError:");
}

id objc_msgSend_estimatedAssetCountForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedAssetCountForScope:");
}

id objc_msgSend_estimatedBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedBatchSize];
}

id objc_msgSend_estimatedInitialAssetCountForLocalLibrary(void *a1, const char *a2, ...)
{
  return _[a1 estimatedInitialAssetCountForLocalLibrary];
}

id objc_msgSend_estimatedInitialSizeForLocalLibrary(void *a1, const char *a2, ...)
{
  return _[a1 estimatedInitialSizeForLocalLibrary];
}

id objc_msgSend_estimatedResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 estimatedResourceSize];
}

id objc_msgSend_estimatedRunningTimeFromPrediction_minimumRuntime_minimumRuntimeWithExtendedTime_minimumRuntimeWithVeryLongExtendedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedRunningTimeFromPrediction:minimumRuntime:minimumRuntimeWithExtendedTime:minimumRuntimeWithVeryLongExtendedTime:");
}

id objc_msgSend_estimatedSizeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedSizeForScope:");
}

id objc_msgSend_etag(void *a1, const char *a2, ...)
{
  return _[a1 etag];
}

id objc_msgSend_excludedScopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 excludedScopeIdentifiers];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_execute_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:args:");
}

id objc_msgSend_executeMaintenanceWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeMaintenanceWithCompletionHandler:");
}

id objc_msgSend_executePeriodicUploadOfComputeStatesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executePeriodicUploadOfComputeStatesWithCompletionHandler:");
}

id objc_msgSend_executeRaw_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRaw:");
}

id objc_msgSend_executeSynchronousWork_onItems_description_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeSynchronousWork:onItems:description:completionHandler:");
}

id objc_msgSend_exitDeleteTime(void *a1, const char *a2, ...)
{
  return _[a1 exitDeleteTime];
}

id objc_msgSend_exitRetentionPolicy(void *a1, const char *a2, ...)
{
  return _[a1 exitRetentionPolicy];
}

id objc_msgSend_exitSharedLibraryOperationWithZoneID_retentionPolicy_exitType_exitSource_stopAt_participantUserIDsToRemove_participantIDsToRemove_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitSharedLibraryOperationWithZoneID:retentionPolicy:exitType:exitSource:stopAt:participantUserIDsToRemove:participantIDsToRemove:completionHandler:");
}

id objc_msgSend_exitSource(void *a1, const char *a2, ...)
{
  return _[a1 exitSource];
}

id objc_msgSend_exitStageMapping(void *a1, const char *a2, ...)
{
  return _[a1 exitStageMapping];
}

id objc_msgSend_exitState(void *a1, const char *a2, ...)
{
  return _[a1 exitState];
}

id objc_msgSend_exitType(void *a1, const char *a2, ...)
{
  return _[a1 exitType];
}

id objc_msgSend_exitingUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 exitingUserIdentifiers];
}

id objc_msgSend_expandedBatch(void *a1, const char *a2, ...)
{
  return _[a1 expandedBatch];
}

id objc_msgSend_expectedDuration(void *a1, const char *a2, ...)
{
  return _[a1 expectedDuration];
}

id objc_msgSend_expectedReceiveSize(void *a1, const char *a2, ...)
{
  return _[a1 expectedReceiveSize];
}

id objc_msgSend_expectedSendSize(void *a1, const char *a2, ...)
{
  return _[a1 expectedSendSize];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expirationIntervalVar(void *a1, const char *a2, ...)
{
  return _[a1 expirationIntervalVar];
}

id objc_msgSend_expungeDate(void *a1, const char *a2, ...)
{
  return _[a1 expungeDate];
}

id objc_msgSend_expungeableResourceStates(void *a1, const char *a2, ...)
{
  return _[a1 expungeableResourceStates];
}

id objc_msgSend_expungeableResourceStatesFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expungeableResourceStatesFromCKRecord:");
}

id objc_msgSend_expungedDate(void *a1, const char *a2, ...)
{
  return _[a1 expungedDate];
}

id objc_msgSend_expungedState(void *a1, const char *a2, ...)
{
  return _[a1 expungedState];
}

id objc_msgSend_extendedDescription(void *a1, const char *a2, ...)
{
  return _[a1 extendedDescription];
}

id objc_msgSend_extendedStatusDescriptionStrings(void *a1, const char *a2, ...)
{
  return _[a1 extendedStatusDescriptionStrings];
}

id objc_msgSend_faceCropType(void *a1, const char *a2, ...)
{
  return _[a1 faceCropType];
}

id objc_msgSend_facesAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 facesAdjustmentsFingerprint];
}

id objc_msgSend_facesData(void *a1, const char *a2, ...)
{
  return _[a1 facesData];
}

id objc_msgSend_facesVersion(void *a1, const char *a2, ...)
{
  return _[a1 facesVersion];
}

id objc_msgSend_failedTaskForResource_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedTaskForResource:error:completionHandler:");
}

id objc_msgSend_failedToAcquireTaskWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToAcquireTaskWithError:");
}

id objc_msgSend_fakeDerivativesDescription(void *a1, const char *a2, ...)
{
  return _[a1 fakeDerivativesDescription];
}

id objc_msgSend_fakeIdentity(void *a1, const char *a2, ...)
{
  return _[a1 fakeIdentity];
}

id objc_msgSend_feature(void *a1, const char *a2, ...)
{
  return _[a1 feature];
}

id objc_msgSend_featureCheckAvailabilityCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 featureCheckAvailabilityCompletionBlock];
}

id objc_msgSend_featureCompatibleVersion(void *a1, const char *a2, ...)
{
  return _[a1 featureCompatibleVersion];
}

id objc_msgSend_featureVersionAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureVersionAtIndex:");
}

id objc_msgSend_featureVersionHistory(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionHistory];
}

id objc_msgSend_featureVersionVar(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionVar];
}

id objc_msgSend_featureVersionsCount(void *a1, const char *a2, ...)
{
  return _[a1 featureVersionsCount];
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_featuresAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresAtIndex:");
}

id objc_msgSend_featuresCount(void *a1, const char *a2, ...)
{
  return _[a1 featuresCount];
}

id objc_msgSend_featuresData(void *a1, const char *a2, ...)
{
  return _[a1 featuresData];
}

id objc_msgSend_feedback(void *a1, const char *a2, ...)
{
  return _[a1 feedback];
}

id objc_msgSend_feedbackCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 feedbackCompletionBlock];
}

id objc_msgSend_fetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:");
}

id objc_msgSend_fetch_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:args:");
}

id objc_msgSend_fetchAccountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountInfoWithCompletionHandler:");
}

id objc_msgSend_fetchAllRecordZonesOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecordZonesOperation];
}

id objc_msgSend_fetchCache(void *a1, const char *a2, ...)
{
  return _[a1 fetchCache];
}

id objc_msgSend_fetchComputeStatesForRecordsWithScopedIdentifiers_validator_shouldDecrypt_onDemand_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchComputeStatesForRecordsWithScopedIdentifiers:validator:shouldDecrypt:onDemand:completionHandler:");
}

id objc_msgSend_fetchConfigurationDictionary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConfigurationDictionary:completionHandler:");
}

id objc_msgSend_fetchCurrentUserRecordOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchCurrentUserRecordOperation];
}

id objc_msgSend_fetchDerivativesFilter(void *a1, const char *a2, ...)
{
  return _[a1 fetchDerivativesFilter];
}

id objc_msgSend_fetchDerivativesUploadConfigurationWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDerivativesUploadConfigurationWithCompletionBlock:");
}

id objc_msgSend_fetchDisabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 fetchDisabledFeatures];
}

id objc_msgSend_fetchExistingSharedLibraryScopeTaskWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchExistingSharedLibraryScopeTaskWithCompletionHandler:");
}

id objc_msgSend_fetchExistingSharedLibraryScopeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchExistingSharedLibraryScopeWithCompletionHandler:");
}

id objc_msgSend_fetchFullRecordsForScopedIdentifiers_targetMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFullRecordsForScopedIdentifiers:targetMapping:completionHandler:");
}

id objc_msgSend_fetchObject_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObject:sql:args:");
}

id objc_msgSend_fetchObjectOfClass_initializer_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:initializer:sql:args:");
}

id objc_msgSend_fetchObjectOfClass_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:sql:");
}

id objc_msgSend_fetchObjectOfClass_sql_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectOfClass:sql:args:");
}

id objc_msgSend_fetchPlaceholderRecordsForScopedIdentifiers_targetMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPlaceholderRecordsForScopedIdentifiers:targetMapping:completionHandler:");
}

id objc_msgSend_fetchRecordWithNames_inScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithNames:inScope:completionHandler:");
}

id objc_msgSend_fetchRecordWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_fetchRecordsFollowRemappingWithIDs_wantsAllRecords_type_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsFollowRemappingWithIDs:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_desiredKeys_wantsAllRecords_type_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:desiredKeys:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_desiredKeys_wantsAllRecords_type_perFoundRecordBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:desiredKeys:wantsAllRecords:type:perFoundRecordBlock:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_inScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:inScope:completionHandler:");
}

id objc_msgSend_fetchRecordsWithIDs_fetchResources_wantsAllRecords_type_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithIDs:fetchResources:wantsAllRecords:type:completionHandler:");
}

id objc_msgSend_fetchRequestedRecordsForTransportTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestedRecordsForTransportTask:completionHandler:");
}

id objc_msgSend_fetchShareParticipantsForParticipants_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchShareParticipantsForParticipants:completionBlock:");
}

id objc_msgSend_fetchSharedScopeFromShareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSharedScopeFromShareURL:completionHandler:");
}

id objc_msgSend_fetchTaskForScopeWithShareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTaskForScopeWithShareURL:completionHandler:");
}

id objc_msgSend_fetchTransportScopeForScope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTransportScopeForScope:transportScope:completionHandler:");
}

id objc_msgSend_fetchUnknownTargetsInMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUnknownTargetsInMapping:completionHandler:");
}

id objc_msgSend_fetchUserRecordIDFetchWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDFetchWithCompletionHandler:");
}

id objc_msgSend_fetchZoneForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchZoneForScope:completionHandler:");
}

id objc_msgSend_fieldName(void *a1, const char *a2, ...)
{
  return _[a1 fieldName];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileKind(void *a1, const char *a2, ...)
{
  return _[a1 fileKind];
}

id objc_msgSend_fileSignature(void *a1, const char *a2, ...)
{
  return _[a1 fileSignature];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileStorageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fileStorageIdentifier];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _[a1 fileURL];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileUTI(void *a1, const char *a2, ...)
{
  return _[a1 fileUTI];
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_fillCKRecordBuilder_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillCKRecordBuilder:scopeProvider:");
}

id objc_msgSend_fillCKRecordBuilderWithResourceChange_resourceCountAndSize_scopeProvider_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillCKRecordBuilderWithResourceChange:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_fillMissingCKAssetProperties_withCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillMissingCKAssetProperties:withCKRecord:");
}

id objc_msgSend_fillRelatedIdentifiersInChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillRelatedIdentifiersInChange:");
}

id objc_msgSend_fillResourcesOfCKRecordBuilder_clearMissing_resourceCountAndSize_scopeProvider_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillResourcesOfCKRecordBuilder:clearMissing:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_fillWithCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithCKRecord:");
}

id objc_msgSend_fillWithCKRecord_missingResourceProperties_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithCKRecord:missingResourceProperties:scopeProvider:");
}

id objc_msgSend_filterForExcludedScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterForExcludedScopeIdentifiers:");
}

id objc_msgSend_filterForIncludedScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterForIncludedScopeIdentifiers:");
}

id objc_msgSend_finalizePlan(void *a1, const char *a2, ...)
{
  return _[a1 finalizePlan];
}

id objc_msgSend_finalizeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeWithCompletionHandler:");
}

id objc_msgSend_finalizedDestinationCKRecordFromProposedCKRecord_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizedDestinationCKRecordFromProposedCKRecord:error:");
}

id objc_msgSend_findPersistedInitialSyncSession_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findPersistedInitialSyncSession:completionHandler:");
}

id objc_msgSend_findPersistedSyncSession_forScheduler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findPersistedSyncSession:forScheduler:completionHandler:");
}

id objc_msgSend_fingerPrint(void *a1, const char *a2, ...)
{
  return _[a1 fingerPrint];
}

id objc_msgSend_fingerPrintForData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerPrintForData:error:");
}

id objc_msgSend_fingerprintContext(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintContext];
}

id objc_msgSend_fingerprintSchemeDescription(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintSchemeDescription];
}

id objc_msgSend_fingerprintSchemeForFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeForFingerprint:");
}

id objc_msgSend_fingerprintSchemeForNewMasterAsset(void *a1, const char *a2, ...)
{
  return _[a1 fingerprintSchemeForNewMasterAsset];
}

id objc_msgSend_fingerprintSchemeForSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeForSignature:");
}

id objc_msgSend_fingerprintSchemeWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerprintSchemeWithContext:");
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _[a1 firstIndex];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_fixStorageAfterAnyVersionChange(void *a1, const char *a2, ...)
{
  return _[a1 fixStorageAfterAnyVersionChange];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_flagsForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flagsForScope:");
}

id objc_msgSend_forceApplyPendingChangeSessionUpdateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceApplyPendingChangeSessionUpdateWithError:");
}

id objc_msgSend_forceBackupWithActivity_forceClientPush_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBackupWithActivity:forceClientPush:completionHandler:");
}

id objc_msgSend_forceBackupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBackupWithCompletionHandler:");
}

id objc_msgSend_forceIdentifyUknownScopesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceIdentifyUknownScopesWithError:");
}

id objc_msgSend_forceInitialDownloadWithActivity_scopeIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceInitialDownloadWithActivity:scopeIdentifiers:completionHandler:");
}

id objc_msgSend_forcePushToTransportForActiveScopesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcePushToTransportForActiveScopesWithError:");
}

id objc_msgSend_forceScopeIndexOnAllRecordsTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceScopeIndexOnAllRecordsTo:");
}

id objc_msgSend_forceSyncDelegate(void *a1, const char *a2, ...)
{
  return _[a1 forceSyncDelegate];
}

id objc_msgSend_forceSyncDidFinishForTask_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSyncDidFinishForTask:withErrors:");
}

id objc_msgSend_forceSynchronizingScopeWithIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSynchronizingScopeWithIdentifiers:completionHandler:");
}

id objc_msgSend_forceUpdatePrimarySyncStateOnce(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdatePrimarySyncStateOnce];
}

id objc_msgSend_foreground(void *a1, const char *a2, ...)
{
  return _[a1 foreground];
}

id objc_msgSend_formatInjection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatInjection:");
}

id objc_msgSend_freeDiskSpaceSize(void *a1, const char *a2, ...)
{
  return _[a1 freeDiskSpaceSize];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_fullSizeJPEGSource(void *a1, const char *a2, ...)
{
  return _[a1 fullSizeJPEGSource];
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_getChangeBatchWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getChangeBatchWithCompletionHandler:");
}

id objc_msgSend_getChangedStatusesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getChangedStatusesWithCompletionHandler:");
}

id objc_msgSend_getCloudCacheForRecordWithScopedIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudCacheForRecordWithScopedIdentifier:completionHandler:");
}

id objc_msgSend_getCloudKitErrorCode_internalCode_fromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudKitErrorCode:internalCode:fromError:");
}

id objc_msgSend_getCloudScopedIdentifiersForLocalScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCloudScopedIdentifiersForLocalScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getCommittedRecord_stagedRecord_forScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCommittedRecord:stagedRecord:forScopedIdentifier:");
}

id objc_msgSend_getCurrentRequiredStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentRequiredStateWithCompletionHandler:");
}

id objc_msgSend_getLastClientServedWithAPushNotificationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastClientServedWithAPushNotificationWithCompletionHandler:");
}

id objc_msgSend_getListOfComponentsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getListOfComponentsWithCompletionHandler:");
}

id objc_msgSend_getLocalScopedIdentifiersForCloudScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getNextBatchToMoveOperationWithZoneID_batchSize_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNextBatchToMoveOperationWithZoneID:batchSize:completionHandler:");
}

id objc_msgSend_getRelatedScopedIdentifier_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRelatedScopedIdentifier:forRecordWithScopedIdentifier:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResourcesForItemWithScopedIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourcesForItemWithScopedIdentifier:completionHandler:");
}

id objc_msgSend_getScopeInfoWithTransportScope_scope_previousScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getScopeInfoWithTransportScope:scope:previousScopeChange:completionHandler:");
}

id objc_msgSend_getScopeStatusCountsForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getScopeStatusCountsForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_getStatusArrayForComponents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusArrayForComponents:completionHandler:");
}

id objc_msgSend_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_getStatusForClient_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForClient:completionHandler:");
}

id objc_msgSend_getStatusForComponents_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForComponents:completionHandler:");
}

id objc_msgSend_getStatusForPendingRecordsSharedToScopeWithIdentifier_maximumCount_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForPendingRecordsSharedToScopeWithIdentifier:maximumCount:completionHandler:");
}

id objc_msgSend_getStatusForRecordsWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusForRecordsWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusWithCompletionHandler:");
}

id objc_msgSend_getStatusesForScopesWithIdentifiers_includeStorages_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatusesForScopesWithIdentifiers:includeStorages:completionHandler:");
}

id objc_msgSend_getStreamingURLOrMediaMakerDataForResource_intent_hints_timeRange_clientBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStreamingURLOrMediaMakerDataForResource:intent:hints:timeRange:clientBundleID:completionHandler:");
}

id objc_msgSend_getStreamingURLTaskForResource_intent_hints_timeRange_target_transportScopeMapping_clientBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStreamingURLTaskForResource:intent:hints:timeRange:target:transportScopeMapping:clientBundleID:completionHandler:");
}

id objc_msgSend_getSystemBudgetsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSystemBudgetsWithCompletionHandler:");
}

id objc_msgSend_getTargetsForRecordsWithScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTargetsForRecordsWithScopedIdentifiers:completionHandler:");
}

id objc_msgSend_getTemporaryFolderWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTemporaryFolderWithCompletionHandler:");
}

id objc_msgSend_getTemporaryFolderWithName_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTemporaryFolderWithName:completionHandler:");
}

id objc_msgSend_getUserRecordIDFetchIfNecessaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserRecordIDFetchIfNecessaryWithCompletionHandler:");
}

id objc_msgSend_goodConditionsDescription(void *a1, const char *a2, ...)
{
  return _[a1 goodConditionsDescription];
}

id objc_msgSend_graphData(void *a1, const char *a2, ...)
{
  return _[a1 graphData];
}

id objc_msgSend_graphVersion(void *a1, const char *a2, ...)
{
  return _[a1 graphVersion];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _[a1 group];
}

id objc_msgSend_groupNameForAppLibrarySync(void *a1, const char *a2, ...)
{
  return _[a1 groupNameForAppLibrarySync];
}

id objc_msgSend_groupNameForGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupNameForGroupName:");
}

id objc_msgSend_groupNameForSystemLibrarySync(void *a1, const char *a2, ...)
{
  return _[a1 groupNameForSystemLibrarySync];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_hasActiveOrQueuedBackgroundDownloadOperations(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveOrQueuedBackgroundDownloadOperations];
}

id objc_msgSend_hasBackgroundActivity(void *a1, const char *a2, ...)
{
  return _[a1 hasBackgroundActivity];
}

id objc_msgSend_hasBlockedOperationsIncludingBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBlockedOperationsIncludingBackground:");
}

id objc_msgSend_hasCKKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCKKey:");
}

id objc_msgSend_hasCachedValueForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCachedValueForIdentifier:");
}

id objc_msgSend_hasChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangeType:");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasChangesInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangesInScopeWithIdentifier:");
}

id objc_msgSend_hasChangesInScopeWithIdentifier_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChangesInScopeWithIdentifier:table:");
}

id objc_msgSend_hasDownloadTasks(void *a1, const char *a2, ...)
{
  return _[a1 hasDownloadTasks];
}

id objc_msgSend_hasEPPAssets(void *a1, const char *a2, ...)
{
  return _[a1 hasEPPAssets];
}

id objc_msgSend_hasEnoughPowerForAutomaticOverride(void *a1, const char *a2, ...)
{
  return _[a1 hasEnoughPowerForAutomaticOverride];
}

id objc_msgSend_hasFetchedInitialSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 hasFetchedInitialSyncAnchorVar];
}

id objc_msgSend_hasFileSize(void *a1, const char *a2, ...)
{
  return _[a1 hasFileSize];
}

id objc_msgSend_hasFileUTI(void *a1, const char *a2, ...)
{
  return _[a1 hasFileUTI];
}

id objc_msgSend_hasImageDimensions(void *a1, const char *a2, ...)
{
  return _[a1 hasImageDimensions];
}

id objc_msgSend_hasOnlyMingledRecordsWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOnlyMingledRecordsWithScopeIdentifier:");
}

id objc_msgSend_hasPendingResetSync(void *a1, const char *a2, ...)
{
  return _[a1 hasPendingResetSync];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProperty:");
}

id objc_msgSend_hasQueuedBatches(void *a1, const char *a2, ...)
{
  return _[a1 hasQueuedBatches];
}

id objc_msgSend_hasRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecordWithScopedIdentifier:");
}

id objc_msgSend_hasServerToken(void *a1, const char *a2, ...)
{
  return _[a1 hasServerToken];
}

id objc_msgSend_hasShareTodoForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasShareTodoForScopedIdentifier:");
}

id objc_msgSend_hasSignificantWork(void *a1, const char *a2, ...)
{
  return _[a1 hasSignificantWork];
}

id objc_msgSend_hasSomethingTodo(void *a1, const char *a2, ...)
{
  return _[a1 hasSomethingTodo];
}

id objc_msgSend_hasSomethingTodoNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSomethingTodoNow:");
}

id objc_msgSend_hasStableHash(void *a1, const char *a2, ...)
{
  return _[a1 hasStableHash];
}

id objc_msgSend_hasStagingScopes(void *a1, const char *a2, ...)
{
  return _[a1 hasStagingScopes];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTable:");
}

id objc_msgSend_hasUnknownTargets(void *a1, const char *a2, ...)
{
  return _[a1 hasUnknownTargets];
}

id objc_msgSend_hasValidCredentials(void *a1, const char *a2, ...)
{
  return _[a1 hasValidCredentials];
}

id objc_msgSend_hasVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasVersion];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hasiCloudAccount(void *a1, const char *a2, ...)
{
  return _[a1 hasiCloudAccount];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_helper(void *a1, const char *a2, ...)
{
  return _[a1 helper];
}

id objc_msgSend_hideNetworkIndicatorForBundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideNetworkIndicatorForBundleWithIdentifier:");
}

id objc_msgSend_hideSyncIndicator(void *a1, const char *a2, ...)
{
  return _[a1 hideSyncIndicator];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 horizontalAccuracy];
}

id objc_msgSend_iCloudLibraryClientVersionTooOld(void *a1, const char *a2, ...)
{
  return _[a1 iCloudLibraryClientVersionTooOld];
}

id objc_msgSend_iCloudLibraryHasBeenWiped(void *a1, const char *a2, ...)
{
  return _[a1 iCloudLibraryHasBeenWiped];
}

id objc_msgSend_idMapping(void *a1, const char *a2, ...)
{
  return _[a1 idMapping];
}

id objc_msgSend_identification(void *a1, const char *a2, ...)
{
  return _[a1 identification];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _[a1 identity];
}

id objc_msgSend_identityForStorage(void *a1, const char *a2, ...)
{
  return _[a1 identityForStorage];
}

id objc_msgSend_identityForStorageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForStorageName:");
}

id objc_msgSend_identityFromStoredIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityFromStoredIdentity:");
}

id objc_msgSend_idleDescription(void *a1, const char *a2, ...)
{
  return _[a1 idleDescription];
}

id objc_msgSend_ignoreBeforeDate(void *a1, const char *a2, ...)
{
  return _[a1 ignoreBeforeDate];
}

id objc_msgSend_ignoredRecordCount(void *a1, const char *a2, ...)
{
  return _[a1 ignoredRecordCount];
}

id objc_msgSend_ignoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 ignoredTopics];
}

id objc_msgSend_imageDimensions(void *a1, const char *a2, ...)
{
  return _[a1 imageDimensions];
}

id objc_msgSend_importDate(void *a1, const char *a2, ...)
{
  return _[a1 importDate];
}

id objc_msgSend_importGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 importGroupIdentifier];
}

id objc_msgSend_importedBy(void *a1, const char *a2, ...)
{
  return _[a1 importedBy];
}

id objc_msgSend_importedByBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 importedByBundleIdentifier];
}

id objc_msgSend_importedByDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 importedByDisplayName];
}

id objc_msgSend_inBatterySaverMode(void *a1, const char *a2, ...)
{
  return _[a1 inBatterySaverMode];
}

id objc_msgSend_inEmergencyClosing(void *a1, const char *a2, ...)
{
  return _[a1 inEmergencyClosing];
}

id objc_msgSend_inExpunged(void *a1, const char *a2, ...)
{
  return _[a1 inExpunged];
}

id objc_msgSend_inMemoryDownloadDidFinishForResourceTransferTask_data_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryDownloadDidFinishForResourceTransferTask:data:withError:");
}

id objc_msgSend_inMemoryDownloadOperationForRecordID_resource_record_keys_downloadType_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryDownloadOperationForRecordID:resource:record:keys:downloadType:completionBlock:");
}

id objc_msgSend_inMemoryDownloadTaskForResource_record_target_transportScopeMapping_clientBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryDownloadTaskForResource:record:target:transportScopeMapping:clientBundleID:completionHandler:");
}

id objc_msgSend_inTrash(void *a1, const char *a2, ...)
{
  return _[a1 inTrash];
}

id objc_msgSend_includedScopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 includedScopeIdentifiers];
}

id objc_msgSend_incomingBatch(void *a1, const char *a2, ...)
{
  return _[a1 incomingBatch];
}

id objc_msgSend_incorrectMachineStateErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incorrectMachineStateErrorWithReason:");
}

id objc_msgSend_incorrectParametersErrorForParameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incorrectParametersErrorForParameter:");
}

id objc_msgSend_incrementalVacuum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementalVacuum:");
}

id objc_msgSend_indexForCloudScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForCloudScopeIdentifier:");
}

id objc_msgSend_indexForLocalScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForLocalScopeIdentifier:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexOfObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectIdenticalTo:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexOfObjectWithOptions_passingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectWithOptions:passingTest:");
}

id objc_msgSend_indexSetWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndex:");
}

id objc_msgSend_indexVariableForVariableWithName_forTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexVariableForVariableWithName:forTable:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForSyncBubble_forceClientPush_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForSyncBubble:forceClientPush:");
}

id objc_msgSend_initFromPQLResultSet_center_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromPQLResultSet:center:error:");
}

id objc_msgSend_initFromPQLResultSet_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromPQLResultSet:error:");
}

id objc_msgSend_initFromZoneID_toZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromZoneID:toZoneID:");
}

id objc_msgSend_initRelativeToScopedIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRelativeToScopedIdentifier:identifier:");
}

id objc_msgSend_initRemoveParticipantsWithController_cloudKitScope_scope_share_userIdentifiersToRemove_participantIDsToRemove_retentionPolicy_exitSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRemoveParticipantsWithController:cloudKitScope:scope:share:userIdentifiersToRemove:participantIDsToRemove:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_initSelfExitWithController_cloudKitScope_scope_share_retentionPolicy_exitSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initSelfExitWithController:cloudKitScope:scope:share:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_initSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 initSharedInstance];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAssetContent_itemTypeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetContent:itemTypeHint:");
}

id objc_msgSend_initWithAssetReference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetReference:");
}

id objc_msgSend_initWithBaseCKRecord_scopeProvider_currentUserRecordID_targetMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseCKRecord:scopeProvider:currentUserRecordID:targetMapping:");
}

id objc_msgSend_initWithBaseCKRecord_sourceRecordID_fromPrivateRecord_recordClass_sourceDatabaseScope_destinationRecordID_planner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBypassQueue_blockedQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBypassQueue:blockedQueue:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithCKRecord_scopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKRecord:scopedIdentifier:");
}

id objc_msgSend_initWithCKRecord_zone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKRecord:zone:");
}

id objc_msgSend_initWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKShare:currentUserID:");
}

id objc_msgSend_initWithCKShareParticipant_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCKShareParticipant:currentUserID:");
}

id objc_msgSend_initWithCPLScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCPLScopeIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithClientBundlerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientBundlerIdentifier:");
}

id objc_msgSend_initWithClientDidAcknowledgeBatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientDidAcknowledgeBatchBlock:");
}

id objc_msgSend_initWithClientLibraryBaseURL_cloudLibraryStateStorageURL_cloudLibraryResourceStorageURL_libraryIdentifier_mainScopeIdentifier_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:mainScopeIdentifier:options:");
}

id objc_msgSend_initWithCloudKitClientIdentifier_defaultSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitClientIdentifier:defaultSourceBundleIdentifier:");
}

id objc_msgSend_initWithCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitScope:");
}

id objc_msgSend_initWithCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudKitScope:engineScope:");
}

id objc_msgSend_initWithConfigurationURL_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurationURL:delegate:queue:");
}

id objc_msgSend_initWithConnection_name_allowedProcol_isManagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:name:allowedProcol:isManagement:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:encoding:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:options:error:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_previousScopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:previousScopeChange:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_scopeChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:scopeChange:completionHandler:");
}

id objc_msgSend_initWithController_cloudKitScope_scope_share_retentionPolicy_exitType_exitSource_userIdentifiersToRemove_participantIDsToRemove_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cloudKitScope:scope:share:retentionPolicy:exitType:exitSource:userIdentifiersToRemove:participantIDsToRemove:completionHandler:");
}

id objc_msgSend_initWithController_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:completionHandler:");
}

id objc_msgSend_initWithController_computeStates_scope_sharedScope_targetMapping_transportScopeMapping_knownRecords_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:computeStates:scope:sharedScope:targetMapping:transportScopeMapping:knownRecords:completionHandler:");
}

id objc_msgSend_initWithController_cursor_class_scope_transportScopeMapping_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:cursor:class:scope:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_messages_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:messages:completionHandler:");
}

id objc_msgSend_initWithController_participants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:participants:completionHandler:");
}

id objc_msgSend_initWithController_records_sourceScope_destinationScope_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:records:sourceScope:destinationScope:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_resource_hints_timeRange_target_transportScopeMapping_cache_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resource:hints:timeRange:target:transportScopeMapping:cache:completionHandler:");
}

id objc_msgSend_initWithController_resource_record_target_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resource:record:target:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_resourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resourceType:numRequested:completionHandler:");
}

id objc_msgSend_initWithController_resources_targetMapping_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:resources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_scope_cloudKitScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:cloudKitScope:completionHandler:");
}

id objc_msgSend_initWithController_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:completionHandler:");
}

id objc_msgSend_initWithController_scope_targetMapping_transportScopeMapping_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:targetMapping:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_scope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scope:transportScope:completionHandler:");
}

id objc_msgSend_initWithController_scopeIdentifier_cloudKitScope_status_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopeIdentifier:cloudKitScope:status:completionHandler:");
}

id objc_msgSend_initWithController_scopeListSyncAnchor_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopeListSyncAnchor:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_scopedIdentifiers_scope_sharedScope_targetStorageURL_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopedIdentifiers:scope:sharedScope:targetStorageURL:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_scopedIdentifiers_targetMapping_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:scopedIdentifiers:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_shareURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:shareURL:completionHandler:");
}

id objc_msgSend_initWithController_sharedScope_contributorsUpdates_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:sharedScope:contributorsUpdates:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_sourceRecordIDs_destinationRecordIDs_moveError_operationID_moveBatchID_exitZoneID_scope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:sourceRecordIDs:destinationRecordIDs:moveError:operationID:moveBatchID:exitZoneID:scope:completionHandler:");
}

id objc_msgSend_initWithController_sourceRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:sourceRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:completionHandler:");
}

id objc_msgSend_initWithController_stagedScope_stagingScope_destinationScope_transportScopeMapping_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:stagedScope:stagingScope:destinationScope:transportScopeMapping:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_syncAnchor_scope_transportScopeMapping_currentScopeChange_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:syncAnchor:scope:transportScopeMapping:currentScopeChange:progressHandler:completionHandler:");
}

id objc_msgSend_initWithController_tasks_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:tasks:transportScopeMapping:completionHandler:");
}

id objc_msgSend_initWithController_updateDisabledFeatures_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:updateDisabledFeatures:completionHandler:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:");
}

id objc_msgSend_initWithCurrentFeatureVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCurrentFeatureVersion:");
}

id objc_msgSend_initWithCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCursor:");
}

id objc_msgSend_initWithCursorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCursorData:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDirectoryEnumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectoryEnumerator:");
}

id objc_msgSend_initWithDispatchQueue_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDispatchQueue:delegate:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEmailAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEmailAddress:");
}

id objc_msgSend_initWithEngineLibrary_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngineLibrary:delegate:");
}

id objc_msgSend_initWithEngineLibrary_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngineLibrary:queue:");
}

id objc_msgSend_initWithEnumerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnumerator:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEventName_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventName:atTime:");
}

id objc_msgSend_initWithExcludedScopeIdentifiers_localIndexesInjection_localIndexes_cloudIndexesInjection_cloudIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExcludedScopeIdentifiers:localIndexesInjection:localIndexes:cloudIndexesInjection:cloudIndexes:");
}

id objc_msgSend_initWithExistingRecordID_databaseScope_fieldName_fileSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExistingRecordID:databaseScope:fieldName:fileSignature:");
}

id objc_msgSend_initWithFakeFingerPrint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFakeFingerPrint:");
}

id objc_msgSend_initWithFakeIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFakeIdentity:");
}

id objc_msgSend_initWithFeedbackMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedbackMessages:");
}

id objc_msgSend_initWithFetchCache_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchCache:scopeProvider:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFileURL_name_ownerIdentifier_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:name:ownerIdentifier:delegate:queue:");
}

id objc_msgSend_initWithFileURL_signature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:signature:");
}

id objc_msgSend_initWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlags:");
}

id objc_msgSend_initWithFlagsCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlagsCounts:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithGroupName_minimumThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGroupName:minimumThrottlingInterval:");
}

id objc_msgSend_initWithIdentificationClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentificationClasses:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_cumulativeProductionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:cumulativeProductionCount:");
}

id objc_msgSend_initWithIdentifier_firstSyncOfMainLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:firstSyncOfMainLibrary:");
}

id objc_msgSend_initWithIdentity_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentity:url:");
}

id objc_msgSend_initWithIncludedScopeIdentifiers_localIndexesInjection_localIndexes_cloudIndexesInjection_cloudIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIncludedScopeIdentifiers:localIndexesInjection:localIndexes:cloudIndexesInjection:cloudIndexes:");
}

id objc_msgSend_initWithIncomingBatch_store_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIncomingBatch:store:error:");
}

id objc_msgSend_initWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIndex:");
}

id objc_msgSend_initWithInjection_indexSet_exclude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInjection:indexSet:exclude:");
}

id objc_msgSend_initWithItemScopedIdentifier_fileStorageIdentifier_version_fileURL_adjustmentFingerprint_lastUpdatedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemScopedIdentifier:fileStorageIdentifier:version:fileURL:adjustmentFingerprint:lastUpdatedDate:");
}

id objc_msgSend_initWithKey_object_expirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:object:expirationDate:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithLeewayInterval_maximumCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLeewayInterval:maximumCapacity:");
}

id objc_msgSend_initWithLevel_name_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLevel:name:value:");
}

id objc_msgSend_initWithLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryIdentifier:");
}

id objc_msgSend_initWithLibraryIdentifier_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLibraryIdentifier:reason:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMapping:");
}

id objc_msgSend_initWithMappingAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMappingAtURL:");
}

id objc_msgSend_initWithMappingInFolderWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMappingInFolderWithURL:");
}

id objc_msgSend_initWithMoveChanges_sourceDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMoveChanges:sourceDatabase:");
}

id objc_msgSend_initWithMoveStep_workItemDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMoveStep:workItemDelay:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_defaultExpirationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:defaultExpirationInterval:");
}

id objc_msgSend_initWithName_defaultValue_table_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:defaultValue:table:type:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:count:");
}

id objc_msgSend_initWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:");
}

id objc_msgSend_initWithParameters_clientCount_isOpened_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:clientCount:isOpened:openError:");
}

id objc_msgSend_initWithParameters_engine_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:engine:queue:");
}

id objc_msgSend_initWithParameters_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:openError:");
}

id objc_msgSend_initWithParametersStorage_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParametersStorage:queue:");
}

id objc_msgSend_initWithParent_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParent:userInfo:");
}

id objc_msgSend_initWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPattern:options:error:");
}

id objc_msgSend_initWithPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPhoneNumber:");
}

id objc_msgSend_initWithPlanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlanner:");
}

id objc_msgSend_initWithPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlist:");
}

id objc_msgSend_initWithPrefix_resourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrefix:resourceType:");
}

id objc_msgSend_initWithPrequeliteDictionary_base_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrequeliteDictionary:base:");
}

id objc_msgSend_initWithPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousServerChangeToken:");
}

id objc_msgSend_initWithPrivateChangeToken_sharedChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivateChangeToken:sharedChangeToken:");
}

id objc_msgSend_initWithProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProfile:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithProperty_andKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperty:andKeys:");
}

id objc_msgSend_initWithPushRepository_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushRepository:priority:");
}

id objc_msgSend_initWithPushSessionTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushSessionTracker:error:");
}

id objc_msgSend_initWithQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuery:");
}

id objc_msgSend_initWithQueryCursor_additionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueryCursor:additionalInfo:");
}

id objc_msgSend_initWithRealResourceType_realFingerPrint_outputType_dimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRealResourceType:realFingerPrint:outputType:dimensions:");
}

id objc_msgSend_initWithRecord_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:action:");
}

id objc_msgSend_initWithRecord_generation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:generation:");
}

id objc_msgSend_initWithRecord_ignoredDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecord:ignoredDate:");
}

id objc_msgSend_initWithRecordBuilders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordBuilders:");
}

id objc_msgSend_initWithRecordClass_scopedIdentifier_relatedRecordClass_relatedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordClass:scopedIdentifier:relatedRecordClass:relatedIdentifier:");
}

id objc_msgSend_initWithRecordID_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:action:");
}

id objc_msgSend_initWithRecordID_resourceKey_fingerPrint_filename_groupName_timeRange_useEncryptedStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:resourceKey:fingerPrint:filename:groupName:timeRange:useEncryptedStream:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:predicate:");
}

id objc_msgSend_initWithRecordType_predicate_resultsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:predicate:resultsLimit:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithRequest_reschedulerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:reschedulerManager:");
}

id objc_msgSend_initWithResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:");
}

id objc_msgSend_initWithResource_taskIdentifier_launchHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:taskIdentifier:launchHandler:completionHandler:");
}

id objc_msgSend_initWithResource_uploadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResource:uploadIdentifier:");
}

id objc_msgSend_initWithResourceIdentity_itemScopedIdentifier_resourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceIdentity:itemScopedIdentifier:resourceType:");
}

id objc_msgSend_initWithResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceType:");
}

id objc_msgSend_initWithResourceType_defaultSourceBundleIdentifier_fingerprintContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceType:defaultSourceBundleIdentifier:fingerprintContext:");
}

id objc_msgSend_initWithRootRecord_shareID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootRecord:shareID:");
}

id objc_msgSend_initWithRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRule:");
}

id objc_msgSend_initWithSQL_generation_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSQL:generation:now:");
}

id objc_msgSend_initWithSQL_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSQL:now:");
}

id objc_msgSend_initWithScopeIdentifier_exitState_supervisorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:exitState:supervisorInfo:");
}

id objc_msgSend_initWithScopeIdentifier_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:identifier:");
}

id objc_msgSend_initWithScopeIdentifier_identifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:identifier:scopeIndex:");
}

id objc_msgSend_initWithScopeIdentifier_scopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifier:scopeType:");
}

id objc_msgSend_initWithScopeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifiers:");
}

id objc_msgSend_initWithScopeIdentifiers_engineLibrary_filter_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeIdentifiers:engineLibrary:filter:delegate:");
}

id objc_msgSend_initWithScopeProvider_destinationZoneIdentification_sharedZoneIdentification_propertyMapping_currentUserRecordID_targetMapping_fetchCache_cplEnabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopeProvider:destinationZoneIdentification:sharedZoneIdentification:propertyMapping:currentUserRecordID:targetMapping:fetchCache:cplEnabledDate:");
}

id objc_msgSend_initWithScopedIdentifier_otherScopedIdentifier_targetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScopedIdentifier:otherScopedIdentifier:targetState:");
}

id objc_msgSend_initWithSequenceNumber_expectedDate_scheduler_configuration_scopeFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSequenceNumber:expectedDate:scheduler:configuration:scopeFilter:");
}

id objc_msgSend_initWithSerializedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerializedString:");
}

id objc_msgSend_initWithServiceName_functionName_responseClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:functionName:responseClass:");
}

id objc_msgSend_initWithShareMetadatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareMetadatas:");
}

id objc_msgSend_initWithShareURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:");
}

id objc_msgSend_initWithStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatement:");
}

id objc_msgSend_initWithStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:");
}

id objc_msgSend_initWithStore_expandedClientBatch_expandedCloudBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:expandedClientBatch:expandedCloudBatch:");
}

id objc_msgSend_initWithStore_revertedChangesBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:revertedChangesBatch:");
}

id objc_msgSend_initWithStore_scopesChangeBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:scopesChangeBatch:");
}

id objc_msgSend_initWithStore_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:table:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:");
}

id objc_msgSend_initWithTask_request_rescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:request:rescheduler:");
}

id objc_msgSend_initWithTask_scopedIdentifiers_destinationZoneIdentification_sharedZoneIdentification_targetMapping_propertyMapping_fingerprintContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTask:scopedIdentifiers:destinationZoneIdentification:sharedZoneIdentification:targetMapping:propertyMapping:fingerprintContext:");
}

id objc_msgSend_initWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTaskIdentifier:");
}

id objc_msgSend_initWithTaskIdentifier_involvedProcesses_relatedApplications_groupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTaskIdentifier:involvedProcesses:relatedApplications:groupName:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_initWithTranslator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTranslator:");
}

id objc_msgSend_initWithTypeName_defaultValue_objcClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTypeName:defaultValue:objcClass:");
}

id objc_msgSend_initWithUploadIdentifier_flags_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUploadIdentifier:flags:priority:");
}

id objc_msgSend_initWithUserDefaults_bundleIdentifier_supportedLibraryIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDefaults:bundleIdentifier:supportedLibraryIdentifiers:");
}

id objc_msgSend_initWithUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentifier:");
}

id objc_msgSend_initWithUserIdentityLookupInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserIdentityLookupInfos:");
}

id objc_msgSend_initWithUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserRecordID:");
}

id objc_msgSend_initWithUserRecordID_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserRecordID:scopeProvider:");
}

id objc_msgSend_initWithVariables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVariables:");
}

id objc_msgSend_initWithVariables_object_sql_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVariables:object:sql:");
}

id objc_msgSend_initWithVolumeURL_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVolumeURL:queue:");
}

id objc_msgSend_initWithWrapper_clientCount_isOpened_openError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWrapper:clientCount:isOpened:openError:");
}

id objc_msgSend_initWithWrappers_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWrappers:queue:");
}

id objc_msgSend_initWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:");
}

id objc_msgSend_initWithZone_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:options:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:options:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initWithZoneName_ownerName_databaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:databaseScope:");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init_");
}

id objc_msgSend_initialDownloadDate(void *a1, const char *a2, ...)
{
  return _[a1 initialDownloadDate];
}

id objc_msgSend_initialDownloadHelper_checkActiveAccountWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialDownloadHelper:checkActiveAccountWithCompletionHandler:");
}

id objc_msgSend_initialDownloadIsRunning(void *a1, const char *a2, ...)
{
  return _[a1 initialDownloadIsRunning];
}

id objc_msgSend_initialSyncAnchorForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSyncAnchorForScope:");
}

id objc_msgSend_initialSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 initialSyncAnchorVar];
}

id objc_msgSend_initialSyncDate(void *a1, const char *a2, ...)
{
  return _[a1 initialSyncDate];
}

id objc_msgSend_initialSyncDateForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialSyncDateForScope:");
}

id objc_msgSend_initializeStorage(void *a1, const char *a2, ...)
{
  return _[a1 initializeStorage];
}

id objc_msgSend_injectionForDefaultValuesUpdate(void *a1, const char *a2, ...)
{
  return _[a1 injectionForDefaultValuesUpdate];
}

id objc_msgSend_injectionForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectionForUpdates:");
}

id objc_msgSend_injectionForValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectionForValues:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_intAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intAtIndex:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerAtIndex:");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerType(void *a1, const char *a2, ...)
{
  return _[a1 integerType];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intent(void *a1, const char *a2, ...)
{
  return _[a1 intent];
}

id objc_msgSend_interestingZoneIDsForCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestingZoneIDsForCoordinator:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_invalidClientCacheErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidClientCacheErrorWithReason:");
}

id objc_msgSend_invalidCloudCacheErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidCloudCacheErrorWithReason:");
}

id objc_msgSend_invalidScopeErrorWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopeIdentifier:");
}

id objc_msgSend_invalidScopeErrorWithScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopeIndex:");
}

id objc_msgSend_invalidScopeErrorWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidScopeErrorWithScopedIdentifier:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_involvedProcesses(void *a1, const char *a2, ...)
{
  return _[a1 involvedProcesses];
}

id objc_msgSend_isActivated(void *a1, const char *a2, ...)
{
  return _[a1 isActivated];
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _[a1 isAlive];
}

id objc_msgSend_isAppLibrary(void *a1, const char *a2, ...)
{
  return _[a1 isAppLibrary];
}

id objc_msgSend_isAssetChange(void *a1, const char *a2, ...)
{
  return _[a1 isAssetChange];
}

id objc_msgSend_isAuxiliaryOperationResultRelevant(void *a1, const char *a2, ...)
{
  return _[a1 isAuxiliaryOperationResultRelevant];
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAvailable];
}

id objc_msgSend_isBlocked(void *a1, const char *a2, ...)
{
  return _[a1 isBlocked];
}

id objc_msgSend_isBoostable(void *a1, const char *a2, ...)
{
  return _[a1 isBoostable];
}

id objc_msgSend_isCPLEngineParametersStorageKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCPLEngineParametersStorageKey:");
}

id objc_msgSend_isCPLError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLError];
}

id objc_msgSend_isCPLErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCPLErrorWithCode:");
}

id objc_msgSend_isCPLOperationCancelledError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLOperationCancelledError];
}

id objc_msgSend_isCPLOperationDeferredError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLOperationDeferredError];
}

id objc_msgSend_isCPLThrottlingError(void *a1, const char *a2, ...)
{
  return _[a1 isCPLThrottlingError];
}

id objc_msgSend_isCameraRunning(void *a1, const char *a2, ...)
{
  return _[a1 isCameraRunning];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isClientInForeground(void *a1, const char *a2, ...)
{
  return _[a1 isClientInForeground];
}

id objc_msgSend_isClientInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 isClientInSyncWithClientCache];
}

id objc_msgSend_isCloudKitOperationCancelledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKitOperationCancelledError:");
}

id objc_msgSend_isCoherent(void *a1, const char *a2, ...)
{
  return _[a1 isCoherent];
}

id objc_msgSend_isContainerHasBeenWipedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContainerHasBeenWipedError:");
}

id objc_msgSend_isCurrentUser(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentUser];
}

id objc_msgSend_isDelete(void *a1, const char *a2, ...)
{
  return _[a1 isDelete];
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isDisabled];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExceedingQuota(void *a1, const char *a2, ...)
{
  return _[a1 isExceedingQuota];
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _[a1 isExecuting];
}

id objc_msgSend_isExpiredForNow_withLeeway_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpiredForNow:withLeeway:");
}

id objc_msgSend_isFakeDerivative_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFakeDerivative:");
}

id objc_msgSend_isFavorite(void *a1, const char *a2, ...)
{
  return _[a1 isFavorite];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isForStableHash(void *a1, const char *a2, ...)
{
  return _[a1 isForStableHash];
}

id objc_msgSend_isForeground(void *a1, const char *a2, ...)
{
  return _[a1 isForeground];
}

id objc_msgSend_isForegroundOperationForIntent_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isForegroundOperationForIntent:priority:");
}

id objc_msgSend_isFullRecord(void *a1, const char *a2, ...)
{
  return _[a1 isFullRecord];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isHighPriority(void *a1, const char *a2, ...)
{
  return _[a1 isHighPriority];
}

id objc_msgSend_isInterestedInZoneID_forCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInterestedInZoneID:forCoordinator:");
}

id objc_msgSend_isKeyAsset(void *a1, const char *a2, ...)
{
  return _[a1 isKeyAsset];
}

id objc_msgSend_isKeyReadOnly_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyReadOnly:recordClass:");
}

id objc_msgSend_isKeychainCDPEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isKeychainCDPEnabled];
}

id objc_msgSend_isKnownToServer(void *a1, const char *a2, ...)
{
  return _[a1 isKnownToServer];
}

id objc_msgSend_isLargeUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLargeUploadSize:");
}

id objc_msgSend_isLibraryManager(void *a1, const char *a2, ...)
{
  return _[a1 isLibraryManager];
}

id objc_msgSend_isLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLibraryManager:");
}

id objc_msgSend_isLocalScopeIndexValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocalScopeIndexValid:");
}

id objc_msgSend_isLowPowerModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLowPowerModeEnabled];
}

id objc_msgSend_isMMCSv2(void *a1, const char *a2, ...)
{
  return _[a1 isMMCSv2];
}

id objc_msgSend_isManagementLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagementLibraryManager:");
}

id objc_msgSend_isMasterChange(void *a1, const char *a2, ...)
{
  return _[a1 isMasterChange];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUser];
}

id objc_msgSend_isNetworkConnected(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkConnected];
}

id objc_msgSend_isNetworkConstrained(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkConstrained];
}

id objc_msgSend_isNewCloudKitScope_compatibleWithOldCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNewCloudKitScope:compatibleWithOldCloudKitScope:");
}

id objc_msgSend_isOngoing(void *a1, const char *a2, ...)
{
  return _[a1 isOngoing];
}

id objc_msgSend_isOperationBlocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationBlocked:");
}

id objc_msgSend_isOperationCancelledOrDeferredError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationCancelledOrDeferredError:");
}

id objc_msgSend_isOperationThrottledError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperationThrottledError:");
}

id objc_msgSend_isPartialFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPartialFailureError:");
}

id objc_msgSend_isRecordNotFoundError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRecordNotFoundError:");
}

id objc_msgSend_isReference(void *a1, const char *a2, ...)
{
  return _[a1 isReference];
}

id objc_msgSend_isRejected(void *a1, const char *a2, ...)
{
  return _[a1 isRejected];
}

id objc_msgSend_isScopeReadonlyFromCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScopeReadonlyFromCKShare:");
}

id objc_msgSend_isShared(void *a1, const char *a2, ...)
{
  return _[a1 isShared];
}

id objc_msgSend_isSharedInScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedInScopeWithIdentifier:");
}

id objc_msgSend_isSparseFullChange(void *a1, const char *a2, ...)
{
  return _[a1 isSparseFullChange];
}

id objc_msgSend_isStale(void *a1, const char *a2, ...)
{
  return _[a1 isStale];
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSupportedShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedShare:");
}

id objc_msgSend_isSupportedShareType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedShareType:");
}

id objc_msgSend_isSupportedZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedZoneID:");
}

id objc_msgSend_isSystemLibrary(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLibrary];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isVeryLargeUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVeryLargeUploadSize:");
}

id objc_msgSend_isWalrusEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWalrusEnabled];
}

id objc_msgSend_isWrapperOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWrapperOpened:");
}

id objc_msgSend_isZoneish(void *a1, const char *a2, ...)
{
  return _[a1 isZoneish];
}

id objc_msgSend_itemCount(void *a1, const char *a2, ...)
{
  return _[a1 itemCount];
}

id objc_msgSend_itemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemIdentifier];
}

id objc_msgSend_itemScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemScopedIdentifier];
}

id objc_msgSend_itemType(void *a1, const char *a2, ...)
{
  return _[a1 itemType];
}

id objc_msgSend_itemTypeHint(void *a1, const char *a2, ...)
{
  return _[a1 itemTypeHint];
}

id objc_msgSend_keepUnacknowledgedBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepUnacknowledgedBatch:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyAssetIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 keyAssetIdentifier];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyForLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForLibraryIdentifier:error:");
}

id objc_msgSend_keywords(void *a1, const char *a2, ...)
{
  return _[a1 keywords];
}

id objc_msgSend_largeResourceSizeThreshold(void *a1, const char *a2, ...)
{
  return _[a1 largeResourceSizeThreshold];
}

id objc_msgSend_lastCPLError(void *a1, const char *a2, ...)
{
  return _[a1 lastCPLError];
}

id objc_msgSend_lastCPLUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastCPLUpgradeDate];
}

id objc_msgSend_lastClearedPushVar(void *a1, const char *a2, ...)
{
  return _[a1 lastClearedPushVar];
}

id objc_msgSend_lastCompletionDateVar(void *a1, const char *a2, ...)
{
  return _[a1 lastCompletionDateVar];
}

id objc_msgSend_lastDBUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastDBUpgradeDate];
}

id objc_msgSend_lastDateOfClearedPushRepositoryForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDateOfClearedPushRepositoryForScope:");
}

id objc_msgSend_lastDateOfCompletedPullFromTransportForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDateOfCompletedPullFromTransportForScope:");
}

id objc_msgSend_lastError(void *a1, const char *a2, ...)
{
  return _[a1 lastError];
}

id objc_msgSend_lastOSBuildUpgradeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastOSBuildUpgradeDate];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastOperationRequestUUIDs(void *a1, const char *a2, ...)
{
  return _[a1 lastOperationRequestUUIDs];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastSeenCPLVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenCPLVersion];
}

id objc_msgSend_lastSeenDBVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenDBVersion];
}

id objc_msgSend_lastSeenOSBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenOSBuildVersion];
}

id objc_msgSend_lastSharedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSharedDate];
}

id objc_msgSend_lastUpdatedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdatedDate];
}

id objc_msgSend_lastViewedDate(void *a1, const char *a2, ...)
{
  return _[a1 lastViewedDate];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_launch(void *a1, const char *a2, ...)
{
  return _[a1 launch];
}

id objc_msgSend_launchAuxiliaryOperation_type_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAuxiliaryOperation:type:withContext:");
}

id objc_msgSend_launchOperation_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:");
}

id objc_msgSend_launchOperation_type_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:forClient:");
}

id objc_msgSend_launchOperation_type_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:withContext:");
}

id objc_msgSend_launchOperation_type_withContext_sourceBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOperation:type:withContext:sourceBundleIdentifiers:");
}

id objc_msgSend_launchTask(void *a1, const char *a2, ...)
{
  return _[a1 launchTask];
}

id objc_msgSend_launchTransportTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchTransportTask:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_libraryClosedError(void *a1, const char *a2, ...)
{
  return _[a1 libraryClosedError];
}

id objc_msgSend_libraryCreationDate(void *a1, const char *a2, ...)
{
  return _[a1 libraryCreationDate];
}

id objc_msgSend_libraryDoesNotAutoOpenError(void *a1, const char *a2, ...)
{
  return _[a1 libraryDoesNotAutoOpenError];
}

id objc_msgSend_libraryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 libraryIdentifier];
}

id objc_msgSend_libraryInfo(void *a1, const char *a2, ...)
{
  return _[a1 libraryInfo];
}

id objc_msgSend_libraryInfoRecordName(void *a1, const char *a2, ...)
{
  return _[a1 libraryInfoRecordName];
}

id objc_msgSend_libraryManager(void *a1, const char *a2, ...)
{
  return _[a1 libraryManager];
}

id objc_msgSend_libraryManager_backgroundDownloadDidFailForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:backgroundDownloadDidFailForResource:");
}

id objc_msgSend_libraryManager_backgroundDownloadDidFinishForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:backgroundDownloadDidFinishForResource:");
}

id objc_msgSend_libraryManager_didFinishForceSyncTask_withErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:didFinishForceSyncTask:withErrors:");
}

id objc_msgSend_libraryManager_downloadDidFinishForResourceTransferTask_finalResource_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:downloadDidFinishForResourceTransferTask:finalResource:withError:");
}

id objc_msgSend_libraryManager_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_libraryManager_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:getStatusWithCompletionHandler:");
}

id objc_msgSend_libraryManager_inMemoryDownloadDidFinishForResourceTransferTask_data_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:inMemoryDownloadDidFinishForResourceTransferTask:data:withError:");
}

id objc_msgSend_libraryManager_noteClientIsInForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:noteClientIsInForeground:");
}

id objc_msgSend_libraryManager_provideLocalResource_recordClass_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:provideLocalResource:recordClass:completionHandler:");
}

id objc_msgSend_libraryManager_providePayloadForComputeStates_inFolderWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:providePayloadForComputeStates:inFolderWithURL:completionHandler:");
}

id objc_msgSend_libraryManager_pushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:pushAllChangesWithCompletionHandler:");
}

id objc_msgSend_libraryManager_uploadDidFinishForResourceTransferTask_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidFinishForResourceTransferTask:withError:");
}

id objc_msgSend_libraryManager_uploadDidProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidProgress:forResourceTransferTask:");
}

id objc_msgSend_libraryManager_uploadDidStartForResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManager:uploadDidStartForResourceTransferTask:");
}

id objc_msgSend_libraryManagerDidUpdateSizeOfResourcesToUploadToSize_sizeOfOriginalResourcesToUpload_numberOfImages_numberOfVideos_numberOfOtherItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerDidUpdateSizeOfResourcesToUploadToSize:sizeOfOriginalResourcesToUpload:numberOfImages:numberOfVideos:numberOfOtherItems:");
}

id objc_msgSend_libraryManagerDidUpdateStatusWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerDidUpdateStatusWithProperties:");
}

id objc_msgSend_libraryManagerHasBeenReplaced(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasBeenReplaced];
}

id objc_msgSend_libraryManagerHasChangesToPull(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasChangesToPull];
}

id objc_msgSend_libraryManagerHasChangesToPull_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerHasChangesToPull:");
}

id objc_msgSend_libraryManagerHasStatusChanges(void *a1, const char *a2, ...)
{
  return _[a1 libraryManagerHasStatusChanges];
}

id objc_msgSend_libraryManagerHasStatusChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "libraryManagerHasStatusChanges:");
}

id objc_msgSend_libraryOptions(void *a1, const char *a2, ...)
{
  return _[a1 libraryOptions];
}

id objc_msgSend_libraryVersion(void *a1, const char *a2, ...)
{
  return _[a1 libraryVersion];
}

id objc_msgSend_loadRegisteredWrappers(void *a1, const char *a2, ...)
{
  return _[a1 loadRegisteredWrappers];
}

id objc_msgSend_localChangeBatchFromCloudBatch_usingMapping_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localChangeBatchFromCloudBatch:usingMapping:withError:");
}

id objc_msgSend_localIndex(void *a1, const char *a2, ...)
{
  return _[a1 localIndex];
}

id objc_msgSend_localIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 localIndexVar];
}

id objc_msgSend_localIndexes(void *a1, const char *a2, ...)
{
  return _[a1 localIndexes];
}

id objc_msgSend_localIndexesInjection(void *a1, const char *a2, ...)
{
  return _[a1 localIndexesInjection];
}

id objc_msgSend_localScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopeIndexForScopeIdentifier:");
}

id objc_msgSend_localScopedIdentifierForCloudScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopedIdentifierForCloudScopedIdentifier:isFinal:");
}

id objc_msgSend_localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localScopedIdentifierForCloudScopedIdentifierIncludeRemappedRecords:");
}

id objc_msgSend_localWakingRegistrationWithIdentifier_contextualPredicate_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localWakingRegistrationWithIdentifier:contextualPredicate:callback:");
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationWithCPLLocationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationWithCPLLocationDictionary:");
}

id objc_msgSend_longAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longAtIndex:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lookupInfo(void *a1, const char *a2, ...)
{
  return _[a1 lookupInfo];
}

id objc_msgSend_lowercaseLetterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseLetterCharacterSet];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mainScopeIdentifier];
}

id objc_msgSend_mainScopeSupportsSharingScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScopeSupportsSharingScopeWithIdentifier:");
}

id objc_msgSend_mainSourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mainSourceBundleIdentifier];
}

id objc_msgSend_mainTable(void *a1, const char *a2, ...)
{
  return _[a1 mainTable];
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_manualSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 manualSortOrder];
}

id objc_msgSend_mappingExitSources(void *a1, const char *a2, ...)
{
  return _[a1 mappingExitSources];
}

id objc_msgSend_mappingForMoveSteps(void *a1, const char *a2, ...)
{
  return _[a1 mappingForMoveSteps];
}

id objc_msgSend_mappingList(void *a1, const char *a2, ...)
{
  return _[a1 mappingList];
}

id objc_msgSend_markAsCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 markAsCorrupted];
}

id objc_msgSend_markLibraryManagerAsInvalid(void *a1, const char *a2, ...)
{
  return _[a1 markLibraryManagerAsInvalid];
}

id objc_msgSend_masterIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 masterIdentifier];
}

id objc_msgSend_masterScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 masterScopedIdentifier];
}

id objc_msgSend_matchesParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesParameters:");
}

id objc_msgSend_maximumComputeStatesToUploadPerBatch(void *a1, const char *a2, ...)
{
  return _[a1 maximumComputeStatesToUploadPerBatch];
}

id objc_msgSend_maximumResourceDownloadSizeForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumResourceDownloadSizeForResourceType:");
}

id objc_msgSend_mediaGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mediaGroupIdentifier];
}

id objc_msgSend_mediaItemMaker(void *a1, const char *a2, ...)
{
  return _[a1 mediaItemMaker];
}

id objc_msgSend_mediaItemMakerData(void *a1, const char *a2, ...)
{
  return _[a1 mediaItemMakerData];
}

id objc_msgSend_mediaMetaData(void *a1, const char *a2, ...)
{
  return _[a1 mediaMetaData];
}

id objc_msgSend_mediaMetaDataType(void *a1, const char *a2, ...)
{
  return _[a1 mediaMetaDataType];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeRecord_isSharedRecord_inPrivateRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeRecord:isSharedRecord:inPrivateRecord:");
}

id objc_msgSend_mergeRecordChangeWithNewRecordChange_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeRecordChangeWithNewRecordChange:direction:");
}

id objc_msgSend_mergeTargetPersonIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mergeTargetPersonIdentifier];
}

id objc_msgSend_mergingFlags_previousFlags_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergingFlags:previousFlags:changeType:");
}

id objc_msgSend_mightBeBlocked(void *a1, const char *a2, ...)
{
  return _[a1 mightBeBlocked];
}

id objc_msgSend_migrate(void *a1, const char *a2, ...)
{
  return _[a1 migrate];
}

id objc_msgSend_migrationDescription(void *a1, const char *a2, ...)
{
  return _[a1 migrationDescription];
}

id objc_msgSend_minimumRuntime(void *a1, const char *a2, ...)
{
  return _[a1 minimumRuntime];
}

id objc_msgSend_minimumRuntimeLeeway(void *a1, const char *a2, ...)
{
  return _[a1 minimumRuntimeLeeway];
}

id objc_msgSend_missingError(void *a1, const char *a2, ...)
{
  return _[a1 missingError];
}

id objc_msgSend_modifies(void *a1, const char *a2, ...)
{
  return _[a1 modifies];
}

id objc_msgSend_momentShare(void *a1, const char *a2, ...)
{
  return _[a1 momentShare];
}

id objc_msgSend_mostRecentConfigurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentConfigurationDictionary];
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_moveRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:completionHandler:");
}

id objc_msgSend_moveRecordsWithIDs_followRemapping_sourceType_destinationRecordIDs_destinationType_helper_finalizeMoveChanges_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveRecordsWithIDs:followRemapping:sourceType:destinationRecordIDs:destinationType:helper:finalizeMoveChanges:completionHandler:");
}

id objc_msgSend_moveStep(void *a1, const char *a2, ...)
{
  return _[a1 moveStep];
}

id objc_msgSend_movieData(void *a1, const char *a2, ...)
{
  return _[a1 movieData];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameComponents(void *a1, const char *a2, ...)
{
  return _[a1 nameComponents];
}

id objc_msgSend_nameWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameWithString:");
}

id objc_msgSend_namesInjection(void *a1, const char *a2, ...)
{
  return _[a1 namesInjection];
}

id objc_msgSend_needsRequestedRecords(void *a1, const char *a2, ...)
{
  return _[a1 needsRequestedRecords];
}

id objc_msgSend_needsToAcquireRescheduler(void *a1, const char *a2, ...)
{
  return _[a1 needsToAcquireRescheduler];
}

id objc_msgSend_needsToSetScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 needsToSetScopeIdentifier];
}

id objc_msgSend_networkBehaviorShouldBeDiscretionaryForForegroundOperation_upload_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkBehaviorShouldBeDiscretionaryForForegroundOperation:upload:metadata:");
}

id objc_msgSend_newChangeWithScopedIdentifier_changeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newChangeWithScopedIdentifier:changeType:");
}

id objc_msgSend_newCloudKitReschedulerForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCloudKitReschedulerForSession:");
}

id objc_msgSend_newDeleteChangeWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDeleteChangeWithScopedIdentifier:");
}

id objc_msgSend_newEmptyPushContext(void *a1, const char *a2, ...)
{
  return _[a1 newEmptyPushContext];
}

id objc_msgSend_newOperationConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 newOperationConfiguration];
}

id objc_msgSend_newPlatformImplementationForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newPlatformImplementationForObject:");
}

id objc_msgSend_newRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newRecordWithScopedIdentifier:");
}

id objc_msgSend_newScopeChangeInferClassWithScopeIdentifier_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newScopeChangeInferClassWithScopeIdentifier:type:");
}

id objc_msgSend_newScopeIdentifierRelativeToMainScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newScopeIdentifierRelativeToMainScopeIdentifier:");
}

id objc_msgSend_newTaskRequestForSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTaskRequestForSession:");
}

id objc_msgSend_newTaskRequestWithExpectedDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTaskRequestWithExpectedDuration:");
}

id objc_msgSend_newTransactionWithIdentifier_description_keepPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTransactionWithIdentifier:description:keepPower:");
}

id objc_msgSend_next(void *a1, const char *a2, ...)
{
  return _[a1 next];
}

id objc_msgSend_nextBatch(void *a1, const char *a2, ...)
{
  return _[a1 nextBatch];
}

id objc_msgSend_nextBatchOfRecordsToRevert(void *a1, const char *a2, ...)
{
  return _[a1 nextBatchOfRecordsToRevert];
}

id objc_msgSend_nextForcedExitDate(void *a1, const char *a2, ...)
{
  return _[a1 nextForcedExitDate];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nonPrivateFingerprintScheme(void *a1, const char *a2, ...)
{
  return _[a1 nonPrivateFingerprintScheme];
}

id objc_msgSend_notImplementedError(void *a1, const char *a2, ...)
{
  return _[a1 notImplementedError];
}

id objc_msgSend_noteClientIsInBackground(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsInBackground];
}

id objc_msgSend_noteClientIsInForegroundQuietly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteClientIsInForegroundQuietly:");
}

id objc_msgSend_noteClientIsInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsInSyncWithClientCache];
}

id objc_msgSend_noteClientIsNotInSyncWithClientCache(void *a1, const char *a2, ...)
{
  return _[a1 noteClientIsNotInSyncWithClientCache];
}

id objc_msgSend_noteComputeStateDownloadRequest(void *a1, const char *a2, ...)
{
  return _[a1 noteComputeStateDownloadRequest];
}

id objc_msgSend_noteDatabaseWasUpgradedToVersion_fromVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteDatabaseWasUpgradedToVersion:fromVersion:");
}

id objc_msgSend_noteOtherResetEvent_cause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteOtherResetEvent:cause:");
}

id objc_msgSend_notePruningRequestForResource_realPrune_successful_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePruningRequestForResource:realPrune:successful:");
}

id objc_msgSend_notePruningRequestForResource_realPrune_successful_prunedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePruningRequestForResource:realPrune:successful:prunedSize:");
}

id objc_msgSend_noteQuotaHasChanged(void *a1, const char *a2, ...)
{
  return _[a1 noteQuotaHasChanged];
}

id objc_msgSend_noteResetSyncFinished(void *a1, const char *a2, ...)
{
  return _[a1 noteResetSyncFinished];
}

id objc_msgSend_noteScopeNeedsToUploadComputeState(void *a1, const char *a2, ...)
{
  return _[a1 noteScopeNeedsToUploadComputeState];
}

id objc_msgSend_noteServerHasChanges(void *a1, const char *a2, ...)
{
  return _[a1 noteServerHasChanges];
}

id objc_msgSend_noteServerMightBeAvailableNow(void *a1, const char *a2, ...)
{
  return _[a1 noteServerMightBeAvailableNow];
}

id objc_msgSend_noteStoreNeedsToUpdateDisabledFeatures(void *a1, const char *a2, ...)
{
  return _[a1 noteStoreNeedsToUpdateDisabledFeatures];
}

id objc_msgSend_noteZoneIDChangeWasIgnored_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteZoneIDChangeWasIgnored:");
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notificationID(void *a1, const char *a2, ...)
{
  return _[a1 notificationID];
}

id objc_msgSend_notificationState(void *a1, const char *a2, ...)
{
  return _[a1 notificationState];
}

id objc_msgSend_notificationType(void *a1, const char *a2, ...)
{
  return _[a1 notificationType];
}

id objc_msgSend_notificationUUID(void *a1, const char *a2, ...)
{
  return _[a1 notificationUUID];
}

id objc_msgSend_notifyAttachedObjectsPullQueueIsFull(void *a1, const char *a2, ...)
{
  return _[a1 notifyAttachedObjectsPullQueueIsFull];
}

id objc_msgSend_notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged(void *a1, const char *a2, ...)
{
  return _[a1 notifyAttachedObjectsThatPushRepositoryFlagsCountsHaveChanged];
}

id objc_msgSend_notifyClientOfStatusChangesIfNecessaryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyClientOfStatusChangesIfNecessaryWithError:");
}

id objc_msgSend_notifyStatusForRecordViewHasChanged_persist_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyStatusForRecordViewHasChanged:persist:error:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberOfImagesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfImagesToUpload];
}

id objc_msgSend_numberOfOtherItemsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfOtherItemsToUpload];
}

id objc_msgSend_numberOfVideosToUpload(void *a1, const char *a2, ...)
{
  return _[a1 numberOfVideosToUpload];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objcClass(void *a1, const char *a2, ...)
{
  return _[a1 objcClass];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_date_expirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:date:expirationDate:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectOfClass_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectOfClass:atIndex:");
}

id objc_msgSend_observeAsyncCallOn_selector_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeAsyncCallOn:selector:block:");
}

id objc_msgSend_observeSyncCallOn_selector_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeSyncCallOn:selector:block:");
}

id objc_msgSend_oldestConfigurationDictionary(void *a1, const char *a2, ...)
{
  return _[a1 oldestConfigurationDictionary];
}

id objc_msgSend_openAtURL_sharedCache_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAtURL:sharedCache:error:");
}

id objc_msgSend_openError(void *a1, const char *a2, ...)
{
  return _[a1 openError];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWithCompletionHandler:");
}

id objc_msgSend_opened(void *a1, const char *a2, ...)
{
  return _[a1 opened];
}

id objc_msgSend_openedWrapperWithLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openedWrapperWithLibraryIdentifier:");
}

id objc_msgSend_operation_forTask_didFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:forTask:didFinishWithError:");
}

id objc_msgSend_operation_updateContextWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:updateContextWithBlock:");
}

id objc_msgSend_operation_updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation:updateProgress:");
}

id objc_msgSend_operationCancelledError(void *a1, const char *a2, ...)
{
  return _[a1 operationCancelledError];
}

id objc_msgSend_operationDescription(void *a1, const char *a2, ...)
{
  return _[a1 operationDescription];
}

id objc_msgSend_operationDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinish:");
}

id objc_msgSend_operationDidFinish_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinish:error:");
}

id objc_msgSend_operationDidFinishNow_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinishNow:withError:");
}

id objc_msgSend_operationDidFinishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidFinishWithError:");
}

id objc_msgSend_operationDidProgressOneBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationDidProgressOneBatch:");
}

id objc_msgSend_operationGroup(void *a1, const char *a2, ...)
{
  return _[a1 operationGroup];
}

id objc_msgSend_operationHasBeenCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationHasBeenCancelled:");
}

id objc_msgSend_operationID(void *a1, const char *a2, ...)
{
  return _[a1 operationID];
}

id objc_msgSend_operationStatusDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 operationStatusDictionaries];
}

id objc_msgSend_operationTracker(void *a1, const char *a2, ...)
{
  return _[a1 operationTracker];
}

id objc_msgSend_operationType(void *a1, const char *a2, ...)
{
  return _[a1 operationType];
}

id objc_msgSend_operationWillStart_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWillStart:context:");
}

id objc_msgSend_operationWillStart_forTask_withContext_bundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWillStart:forTask:withContext:bundleIdentifiers:");
}

id objc_msgSend_operationWithGroupName_didFinishNow_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWithGroupName:didFinishNow:withError:");
}

id objc_msgSend_opportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 opportunisticTopics];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_originalChoice(void *a1, const char *a2, ...)
{
  return _[a1 originalChoice];
}

id objc_msgSend_originalOrientation(void *a1, const char *a2, ...)
{
  return _[a1 originalOrientation];
}

id objc_msgSend_originatingFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 originatingFingerprint];
}

id objc_msgSend_originatingScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 originatingScopeIdentifier];
}

id objc_msgSend_otherAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 otherAdjustmentsFingerprint];
}

id objc_msgSend_otherItemCount(void *a1, const char *a2, ...)
{
  return _[a1 otherItemCount];
}

id objc_msgSend_otherScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 otherScopedIdentifier];
}

id objc_msgSend_outgoingResources(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResources];
}

id objc_msgSend_outputType(void *a1, const char *a2, ...)
{
  return _[a1 outputType];
}

id objc_msgSend_outstandingBeginCount(void *a1, const char *a2, ...)
{
  return _[a1 outstandingBeginCount];
}

id objc_msgSend_overriddenResourcesFromResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overriddenResourcesFromResources:");
}

id objc_msgSend_overrideRateLimiting(void *a1, const char *a2, ...)
{
  return _[a1 overrideRateLimiting];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_ownerIsCurrentUser(void *a1, const char *a2, ...)
{
  return _[a1 ownerIsCurrentUser];
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return _[a1 ownerName];
}

id objc_msgSend_ownerNameForEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerNameForEngineLibrary:");
}

id objc_msgSend_ownerNameForLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerNameForLibraryManager:");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _[a1 parameters];
}

id objc_msgSend_parametersForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parametersForLibraryIdentifier:");
}

id objc_msgSend_parentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 parentIdentifier];
}

id objc_msgSend_participantID(void *a1, const char *a2, ...)
{
  return _[a1 participantID];
}

id objc_msgSend_participantUserID(void *a1, const char *a2, ...)
{
  return _[a1 participantUserID];
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return _[a1 participants];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _[a1 pathComponents];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pendingCount(void *a1, const char *a2, ...)
{
  return _[a1 pendingCount];
}

id objc_msgSend_people(void *a1, const char *a2, ...)
{
  return _[a1 people];
}

id objc_msgSend_performAsCurrentWithPendingUnitCount_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsCurrentWithPendingUnitCount:usingBlock:");
}

id objc_msgSend_performBatchedWriteTransactionWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBatchedWriteTransactionWithBlock:completionHandler:");
}

id objc_msgSend_performMaintenanceCleanupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMaintenanceCleanupWithCompletionHandler:");
}

id objc_msgSend_performMigrationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithError:");
}

id objc_msgSend_performReadTransactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performReadTransactionWithBlock:");
}

id objc_msgSend_performWithFlags_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithFlags:action:");
}

id objc_msgSend_performWriteTransactionByPassBlocker_withBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWriteTransactionByPassBlocker:withBlock:completionHandler:");
}

id objc_msgSend_performWriteTransactionWithBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWriteTransactionWithBlock:completionHandler:");
}

id objc_msgSend_permission(void *a1, const char *a2, ...)
{
  return _[a1 permission];
}

id objc_msgSend_persistentDomainForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentDomainForName:");
}

id objc_msgSend_personScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 personScopedIdentifier];
}

id objc_msgSend_personType(void *a1, const char *a2, ...)
{
  return _[a1 personType];
}

id objc_msgSend_personsData(void *a1, const char *a2, ...)
{
  return _[a1 personsData];
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumber];
}

id objc_msgSend_ping(void *a1, const char *a2, ...)
{
  return _[a1 ping];
}

id objc_msgSend_placeAnnotation(void *a1, const char *a2, ...)
{
  return _[a1 placeAnnotation];
}

id objc_msgSend_placeAnnotationWithCPLPlaceAnnotationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeAnnotationWithCPLPlaceAnnotationDictionary:");
}

id objc_msgSend_placeLevel(void *a1, const char *a2, ...)
{
  return _[a1 placeLevel];
}

id objc_msgSend_placeName(void *a1, const char *a2, ...)
{
  return _[a1 placeName];
}

id objc_msgSend_planProgess(void *a1, const char *a2, ...)
{
  return _[a1 planProgess];
}

id objc_msgSend_planRecordChangeUpload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planRecordChangeUpload:error:");
}

id objc_msgSend_platformObject(void *a1, const char *a2, ...)
{
  return _[a1 platformObject];
}

id objc_msgSend_playCount(void *a1, const char *a2, ...)
{
  return _[a1 playCount];
}

id objc_msgSend_pluginFields(void *a1, const char *a2, ...)
{
  return _[a1 pluginFields];
}

id objc_msgSend_popNextBatchWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popNextBatchWithError:");
}

id objc_msgSend_popSignificantWorkIsPending(void *a1, const char *a2, ...)
{
  return _[a1 popSignificantWorkIsPending];
}

id objc_msgSend_popTaskOperation(void *a1, const char *a2, ...)
{
  return _[a1 popTaskOperation];
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _[a1 position];
}

id objc_msgSend_posixErrorForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "posixErrorForURL:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_powerNap(void *a1, const char *a2, ...)
{
  return _[a1 powerNap];
}

id objc_msgSend_pqStore(void *a1, const char *a2, ...)
{
  return _[a1 pqStore];
}

id objc_msgSend_pqlConnection(void *a1, const char *a2, ...)
{
  return _[a1 pqlConnection];
}

id objc_msgSend_predicateForChangeAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForChangeAtKeyPath:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predictSyncSessionValue_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predictSyncSessionValue:ofType:");
}

id objc_msgSend_predictor(void *a1, const char *a2, ...)
{
  return _[a1 predictor];
}

id objc_msgSend_prefixForNewScopesRelativeToMainScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefixForNewScopesRelativeToMainScopeIdentifier:");
}

id objc_msgSend_prepareCKEventMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareCKEventMetric:");
}

id objc_msgSend_prepareCopyForCKRecordID_fromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareCopyForCKRecordID:fromCKRecord:");
}

id objc_msgSend_prepareForStorage(void *a1, const char *a2, ...)
{
  return _[a1 prepareForStorage];
}

id objc_msgSend_prepareWithCKRecord_scopeIdentifier_scopeProvider_currentUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithCKRecord:scopeIdentifier:scopeProvider:currentUserRecordID:");
}

id objc_msgSend_prepareWithCKRecordBuilder_resourceCountAndSize_scopeProvider_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithCKRecordBuilder:resourceCountAndSize:scopeProvider:error:");
}

id objc_msgSend_preventWipeErrorWithReason_preventedByUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preventWipeErrorWithReason:preventedByUser:");
}

id objc_msgSend_previewImageData(void *a1, const char *a2, ...)
{
  return _[a1 previewImageData];
}

id objc_msgSend_previousCPLVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousCPLVersion];
}

id objc_msgSend_previousDBVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousDBVersion];
}

id objc_msgSend_previousOSBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousOSBuildVersion];
}

id objc_msgSend_primaryScope(void *a1, const char *a2, ...)
{
  return _[a1 primaryScope];
}

id objc_msgSend_primaryZoneIDFromProposedZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryZoneIDFromProposedZoneIDs:");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 privateChangeToken];
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudDatabase];
}

id objc_msgSend_privateCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudScopedIdentifier];
}

id objc_msgSend_privateRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 privateRecordIDs];
}

id objc_msgSend_processErrorIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processErrorIfNeeded:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processSessionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSessionContext:");
}

id objc_msgSend_processSessionContext_inStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSessionContext:inStore:error:");
}

id objc_msgSend_processedFetchedRequestedRecordsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processedFetchedRequestedRecordsWithError:");
}

id objc_msgSend_processesInvolvedInSyncSessions(void *a1, const char *a2, ...)
{
  return _[a1 processesInvolvedInSyncSessions];
}

id objc_msgSend_producedCumulativeResults_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "producedCumulativeResults:error:");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_progressHandler(void *a1, const char *a2, ...)
{
  return _[a1 progressHandler];
}

id objc_msgSend_progressWithTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressWithTotalUnitCount:");
}

id objc_msgSend_projectData(void *a1, const char *a2, ...)
{
  return _[a1 projectData];
}

id objc_msgSend_projectDocumentType(void *a1, const char *a2, ...)
{
  return _[a1 projectDocumentType];
}

id objc_msgSend_projectPreviewImageData(void *a1, const char *a2, ...)
{
  return _[a1 projectPreviewImageData];
}

id objc_msgSend_promisedAssetCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedAssetCount];
}

id objc_msgSend_promisedPhotosCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedPhotosCount];
}

id objc_msgSend_promisedVideosCount(void *a1, const char *a2, ...)
{
  return _[a1 promisedVideosCount];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertyKeys(void *a1, const char *a2, ...)
{
  return _[a1 propertyKeys];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_propertyMapping(void *a1, const char *a2, ...)
{
  return _[a1 propertyMapping];
}

id objc_msgSend_proposedScopeTypeForCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedScopeTypeForCloudKitScope:");
}

id objc_msgSend_proposedStagingZoneIdentificationWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposedStagingZoneIdentificationWithCurrentUserID:");
}

id objc_msgSend_provideCKAssetWithRecordID_fieldName_recordType_signature_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideCKAssetWithRecordID:fieldName:recordType:signature:completionHandler:");
}

id objc_msgSend_provideCloudResource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideCloudResource:completionHandler:");
}

id objc_msgSend_provideLocalResource_recordClassString_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideLocalResource:recordClassString:completionHandler:");
}

id objc_msgSend_providePayloadForComputeStates_inFolderWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providePayloadForComputeStates:inFolderWithURL:completionHandler:");
}

id objc_msgSend_provideRecordWithCloudScopeIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideRecordWithCloudScopeIdentifier:completionHandler:");
}

id objc_msgSend_provideScopeChangeForScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideScopeChangeForScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_publicPermission(void *a1, const char *a2, ...)
{
  return _[a1 publicPermission];
}

id objc_msgSend_publish(void *a1, const char *a2, ...)
{
  return _[a1 publish];
}

id objc_msgSend_pullQueue(void *a1, const char *a2, ...)
{
  return _[a1 pullQueue];
}

id objc_msgSend_pushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushAllChangesWithCompletionHandler:");
}

id objc_msgSend_pushChangeTasks(void *a1, const char *a2, ...)
{
  return _[a1 pushChangeTasks];
}

id objc_msgSend_pushContextMergingFlags_changeType_uploadIdentifier_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushContextMergingFlags:changeType:uploadIdentifier:priority:");
}

id objc_msgSend_pushPullGatekeepers(void *a1, const char *a2, ...)
{
  return _[a1 pushPullGatekeepers];
}

id objc_msgSend_pushRepository(void *a1, const char *a2, ...)
{
  return _[a1 pushRepository];
}

id objc_msgSend_pushSignificantWorkIsPending(void *a1, const char *a2, ...)
{
  return _[a1 pushSignificantWorkIsPending];
}

id objc_msgSend_pushTaskOperation(void *a1, const char *a2, ...)
{
  return _[a1 pushTaskOperation];
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfService];
}

id objc_msgSend_qualityOfServiceForForcedTasks(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfServiceForForcedTasks];
}

id objc_msgSend_qualityOfServiceForSyncSessions(void *a1, const char *a2, ...)
{
  return _[a1 qualityOfServiceForSyncSessions];
}

id objc_msgSend_quantity(void *a1, const char *a2, ...)
{
  return _[a1 quantity];
}

id objc_msgSend_quarantinedRecords(void *a1, const char *a2, ...)
{
  return _[a1 quarantinedRecords];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryCursor(void *a1, const char *a2, ...)
{
  return _[a1 queryCursor];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryUserDetailsForShareParticipants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUserDetailsForShareParticipants:completionHandler:");
}

id objc_msgSend_queryUserDetailsTaskForParticipants_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUserDetailsTaskForParticipants:completionHandler:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queuedResourceForResource_pendingCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queuedResourceForResource:pendingCount:");
}

id objc_msgSend_rampingRequestForResourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rampingRequestForResourceType:numRequested:completionHandler:");
}

id objc_msgSend_rampingRequestTaskForResourceType_numRequested_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rampingRequestTaskForResourceType:numRequested:completionHandler:");
}

id objc_msgSend_rangeOfData_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfData:options:range:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rawInjection_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawInjection:length:");
}

id objc_msgSend_rawInjectionForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawInjectionForValue:");
}

id objc_msgSend_readOnlyError(void *a1, const char *a2, ...)
{
  return _[a1 readOnlyError];
}

id objc_msgSend_realCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 realCloudScopedIdentifier];
}

id objc_msgSend_realErrorForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realErrorForError:");
}

id objc_msgSend_realIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 realIdentifier];
}

id objc_msgSend_realResourceType(void *a1, const char *a2, ...)
{
  return _[a1 realResourceType];
}

id objc_msgSend_realResourceTypeForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realResourceTypeForResource:");
}

id objc_msgSend_realScopedIdentifierForRemappedScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "realScopedIdentifierForRemappedScopedIdentifier:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_recordBuilderForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordBuilderForKey:");
}

id objc_msgSend_recordChangeData(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeData];
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeTag];
}

id objc_msgSend_recordClass(void *a1, const char *a2, ...)
{
  return _[a1 recordClass];
}

id objc_msgSend_recordComputeStateDelegate(void *a1, const char *a2, ...)
{
  return _[a1 recordComputeStateDelegate];
}

id objc_msgSend_recordComputeStatePushQueue(void *a1, const char *a2, ...)
{
  return _[a1 recordComputeStatePushQueue];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordIDForResourcesOfRecordWithScopedIdentifier_cloudKitScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDForResourcesOfRecordWithScopedIdentifier:cloudKitScope:error:");
}

id objc_msgSend_recordIDWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDWithRecordName:");
}

id objc_msgSend_recordList(void *a1, const char *a2, ...)
{
  return _[a1 recordList];
}

id objc_msgSend_recordModificationDate(void *a1, const char *a2, ...)
{
  return _[a1 recordModificationDate];
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _[a1 recordName];
}

id objc_msgSend_recordNameInDestinationCKRecordFromRecordName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordNameInDestinationCKRecordFromRecordName:error:");
}

id objc_msgSend_recordNamesForScopeInfo(void *a1, const char *a2, ...)
{
  return _[a1 recordNamesForScopeInfo];
}

id objc_msgSend_recordRequestor(void *a1, const char *a2, ...)
{
  return _[a1 recordRequestor];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _[a1 recordType];
}

id objc_msgSend_recordUpgradeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordUpgradeEvent:");
}

id objc_msgSend_recordUpgradeEvent_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordUpgradeEvent:arguments:");
}

id objc_msgSend_recordViewForStatusWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordViewForStatusWithScopedIdentifier:");
}

id objc_msgSend_recordViewWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordViewWithScopedIdentifier:");
}

id objc_msgSend_recordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:");
}

id objc_msgSend_recordWithScopedIdentifier_isConfirmed_isStaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:isConfirmed:isStaged:");
}

id objc_msgSend_recordWithScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWithScopedIdentifier:isFinal:");
}

id objc_msgSend_recordZoneID(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneID];
}

id objc_msgSend_recordZoneIDsWithSyncObligations(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneIDsWithSyncObligations];
}

id objc_msgSend_records(void *a1, const char *a2, ...)
{
  return _[a1 records];
}

id objc_msgSend_recordsDesignation(void *a1, const char *a2, ...)
{
  return _[a1 recordsDesignation];
}

id objc_msgSend_recordsToFetchForScopeInfoWithCurrentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchForScopeInfoWithCurrentUserID:");
}

id objc_msgSend_recordsToFetchToIdentifyCloudKitScope_proposedScopeType_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchToIdentifyCloudKitScope:proposedScopeType:currentUserID:");
}

id objc_msgSend_recordsToFetchToIdentifyZoneID_proposedScopeType_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToFetchToIdentifyZoneID:proposedScopeType:currentUserID:");
}

id objc_msgSend_recordsToUpdateFromScopeChange_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToUpdateFromScopeChange:currentUserID:");
}

id objc_msgSend_recordsWithRelatedScopedIdentifier_isFinal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsWithRelatedScopedIdentifier:isFinal:");
}

id objc_msgSend_recreateMainTableWithCopyInstructions_oldFields_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recreateMainTableWithCopyInstructions:oldFields:error:");
}

id objc_msgSend_referenceAction(void *a1, const char *a2, ...)
{
  return _[a1 referenceAction];
}

id objc_msgSend_referencedResourcesCount(void *a1, const char *a2, ...)
{
  return _[a1 referencedResourcesCount];
}

id objc_msgSend_referencedResourcesSize(void *a1, const char *a2, ...)
{
  return _[a1 referencedResourcesSize];
}

id objc_msgSend_refreshAllConfigurationDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 refreshAllConfigurationDictionaries];
}

id objc_msgSend_refreshAllConfigurationDictionariesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAllConfigurationDictionariesWithCompletionHandler:");
}

id objc_msgSend_refreshInterval(void *a1, const char *a2, ...)
{
  return _[a1 refreshInterval];
}

id objc_msgSend_refreshScopeWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshScopeWithIdentifier:completionHandler:");
}

id objc_msgSend_registerCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCallback:");
}

id objc_msgSend_registerClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:");
}

id objc_msgSend_registerForFeatureChangeNotificationsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForFeatureChangeNotificationsUsingBlock:");
}

id objc_msgSend_registerForSyncBubble(void *a1, const char *a2, ...)
{
  return _[a1 registerForSyncBubble];
}

id objc_msgSend_registerForTaskWithIdentifier_usingQueue_launchHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTaskWithIdentifier:usingQueue:launchHandler:");
}

id objc_msgSend_registerHelper_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerHelper:withIdentifier:");
}

id objc_msgSend_registerLikelyResetReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerLikelyResetReason:");
}

id objc_msgSend_registerTentativeResetReason(void *a1, const char *a2, ...)
{
  return _[a1 registerTentativeResetReason];
}

id objc_msgSend_registerTentativeResetReasonIfCrashing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerTentativeResetReasonIfCrashing:");
}

id objc_msgSend_registerUserSyncStakeholder_withMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUserSyncStakeholder:withMachServiceName:");
}

id objc_msgSend_registeredLibraryIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 registeredLibraryIdentifiers];
}

id objc_msgSend_registeredWrapperCreateIfNecessaryWithParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredWrapperCreateIfNecessaryWithParameters:error:");
}

id objc_msgSend_registeredWrapperWithLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredWrapperWithLibraryIdentifier:error:");
}

id objc_msgSend_rejectedPersonIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 rejectedPersonIdentifier];
}

id objc_msgSend_rejectedScopedIdentifierForRejectedCKRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rejectedScopedIdentifierForRejectedCKRecordID:");
}

id objc_msgSend_relatedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 relatedIdentifier];
}

id objc_msgSend_relatedRecordClass(void *a1, const char *a2, ...)
{
  return _[a1 relatedRecordClass];
}

id objc_msgSend_relatedScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 relatedScopedIdentifier];
}

id objc_msgSend_relation(void *a1, const char *a2, ...)
{
  return _[a1 relation];
}

id objc_msgSend_releaseFileURL_forResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseFileURL:forResource:error:");
}

id objc_msgSend_relevantUntilDate(void *a1, const char *a2, ...)
{
  return _[a1 relevantUntilDate];
}

id objc_msgSend_remapAllRecordsWithPreviousScopedIdentifier_newScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remapAllRecordsWithPreviousScopedIdentifier:newScopedIdentifier:error:");
}

id objc_msgSend_remappedRecordEnumeratorInScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remappedRecordEnumeratorInScope:");
}

id objc_msgSend_remappedRecords(void *a1, const char *a2, ...)
{
  return _[a1 remappedRecords];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeBudgetDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeBudgetDelegate:");
}

id objc_msgSend_removeDeferHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeferHandler:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeMappingForCloudScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMappingForCloudScopedIdentifier:error:");
}

id objc_msgSend_removeMappingForLocalScopedIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMappingForLocalScopedIdentifier:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeParametersWithLibraryIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParametersWithLibraryIdentifier:error:");
}

id objc_msgSend_removeParticipantInSharedLibraryTaskFromSharedScope_transportScope_share_retentionPolicy_exitSource_userIdentifiersToRemove_participantIDsToRemove_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipantInSharedLibraryTaskFromSharedScope:transportScope:share:retentionPolicy:exitSource:userIdentifiersToRemove:participantIDsToRemove:completionHandler:");
}

id objc_msgSend_removeParticipants_fromSharedScopeWithIdentifier_retentionPolicy_exitSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipants:fromSharedScopeWithIdentifier:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_removePendingParticipantIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePendingParticipantIDs:");
}

id objc_msgSend_removeShareTodoForScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeShareTodoForScopedIdentifier:");
}

id objc_msgSend_removeVolumeUnmountObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeVolumeUnmountObserver:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_reportFeatureCheckpoint_forFeature_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportFeatureCheckpoint:forFeature:error:");
}

id objc_msgSend_reportLibraryCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 reportLibraryCorrupted];
}

id objc_msgSend_reportMiscInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportMiscInformation:");
}

id objc_msgSend_reportQuarantineCountIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 reportQuarantineCountIfNecessary];
}

id objc_msgSend_reportSetting_hasBeenSetToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportSetting:hasBeenSetToValue:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAttachedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 requestAttachedLibrary];
}

id objc_msgSend_requestClientToPullAllChangesInScopeIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPullAllChangesInScopeIdentifier:completionHandler:");
}

id objc_msgSend_requestClientToPullAllChangesWithScopeIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPullAllChangesWithScopeIdentifiers:completionHandler:");
}

id objc_msgSend_requestClientToPushAllChangesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestClientToPushAllChangesWithCompletionHandler:");
}

id objc_msgSend_requestCompletedBlock(void *a1, const char *a2, ...)
{
  return _[a1 requestCompletedBlock];
}

id objc_msgSend_requestInitialDownloadOfMainScopeForLibraryWithIdentifier_progressHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestInitialDownloadOfMainScopeForLibraryWithIdentifier:progressHandler:completionHandler:");
}

id objc_msgSend_requestLibraryWithIdentifier_withActivatedMainScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLibraryWithIdentifier:withActivatedMainScope:completionHandler:");
}

id objc_msgSend_requestPrivateCKRecordWithRecordIDBeforeUpload_fetchedBlock_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestPrivateCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:");
}

id objc_msgSend_requestRecordWithID_cloudKitScope_forKey_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRecordWithID:cloudKitScope:forKey:completionHandler:");
}

id objc_msgSend_requestRecordWithRecordID_operationType_forRecordWithRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRecordWithRecordID:operationType:forRecordWithRecordID:completionHandler:");
}

id objc_msgSend_requestRegisteredWrapperWithIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRegisteredWrapperWithIdentifier:completionHandler:");
}

id objc_msgSend_requestScopesWithIdentifiersToBeActivated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestScopesWithIdentifiersToBeActivated:completionHandler:");
}

id objc_msgSend_requestSharedCKRecordWithRecordIDBeforeUpload_fetchedBlock_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSharedCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:");
}

id objc_msgSend_requestUUID(void *a1, const char *a2, ...)
{
  return _[a1 requestUUID];
}

id objc_msgSend_requestedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 requestedItemCount];
}

id objc_msgSend_requestedPrivateCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 requestedPrivateCKRecordIDs];
}

id objc_msgSend_requestedSharedCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 requestedSharedCKRecordIDs];
}

id objc_msgSend_requiresExternalPower(void *a1, const char *a2, ...)
{
  return _[a1 requiresExternalPower];
}

id objc_msgSend_requiresNetworkConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresNetworkConnectivity];
}

id objc_msgSend_requiresSignificantUserInactivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresSignificantUserInactivity];
}

id objc_msgSend_requiresStableHashForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresStableHashForResourceType:");
}

id objc_msgSend_requiresUserInactivity(void *a1, const char *a2, ...)
{
  return _[a1 requiresUserInactivity];
}

id objc_msgSend_rescheduler(void *a1, const char *a2, ...)
{
  return _[a1 rescheduler];
}

id objc_msgSend_reschedulerDescription(void *a1, const char *a2, ...)
{
  return _[a1 reschedulerDescription];
}

id objc_msgSend_reschedulerManager(void *a1, const char *a2, ...)
{
  return _[a1 reschedulerManager];
}

id objc_msgSend_resetBackoffInterval(void *a1, const char *a2, ...)
{
  return _[a1 resetBackoffInterval];
}

id objc_msgSend_resetCacheWithOption_reason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCacheWithOption:reason:completionHandler:");
}

id objc_msgSend_resetCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCloudKitScope:");
}

id objc_msgSend_resetCompleteSyncStateIncludingIDMappingWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCompleteSyncStateIncludingIDMappingWithCause:error:");
}

id objc_msgSend_resetCompleteSyncStateWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCompleteSyncStateWithCause:error:");
}

id objc_msgSend_resetLocalSyncStateWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetLocalSyncStateWithCause:error:");
}

id objc_msgSend_resetNotificationForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNotificationForLibraryIdentifier:");
}

id objc_msgSend_resetStableRecordsForScopeWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetStableRecordsForScopeWithIdentifier:error:");
}

id objc_msgSend_resetSyncAnchorForScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncAnchorForScope:error:");
}

id objc_msgSend_resetSyncAnchorWithCause_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncAnchorWithCause:error:");
}

id objc_msgSend_resetTracker(void *a1, const char *a2, ...)
{
  return _[a1 resetTracker];
}

id objc_msgSend_resetTrackingCounts(void *a1, const char *a2, ...)
{
  return _[a1 resetTrackingCounts];
}

id objc_msgSend_resetValueForGlobalVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetValueForGlobalVariable:error:");
}

id objc_msgSend_resetVersionHasChanged(void *a1, const char *a2, ...)
{
  return _[a1 resetVersionHasChanged];
}

id objc_msgSend_resolveLocalScopedIdentifiersForCloudScopedIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveLocalScopedIdentifiersForCloudScopedIdentifiers:completionHandler:");
}

id objc_msgSend_resolvedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 resolvedConfiguration];
}

id objc_msgSend_resource(void *a1, const char *a2, ...)
{
  return _[a1 resource];
}

id objc_msgSend_resourceCheckTaskForResources_targetMapping_transportScopeMapping_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceCheckTaskForResources:targetMapping:transportScopeMapping:completionHandler:");
}

id objc_msgSend_resourceCopyFromScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceCopyFromScopedIdentifier];
}

id objc_msgSend_resourceData(void *a1, const char *a2, ...)
{
  return _[a1 resourceData];
}

id objc_msgSend_resourceForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceForType:");
}

id objc_msgSend_resourceIntensive(void *a1, const char *a2, ...)
{
  return _[a1 resourceIntensive];
}

id objc_msgSend_resourceKey(void *a1, const char *a2, ...)
{
  return _[a1 resourceKey];
}

id objc_msgSend_resourceProgressDelegate(void *a1, const char *a2, ...)
{
  return _[a1 resourceProgressDelegate];
}

id objc_msgSend_resourceScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceScopedIdentifier];
}

id objc_msgSend_resourceStorage(void *a1, const char *a2, ...)
{
  return _[a1 resourceStorage];
}

id objc_msgSend_resourceType(void *a1, const char *a2, ...)
{
  return _[a1 resourceType];
}

id objc_msgSend_resourceTypeDescription(void *a1, const char *a2, ...)
{
  return _[a1 resourceTypeDescription];
}

id objc_msgSend_resourceTypeFromShortDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceTypeFromShortDescription:");
}

id objc_msgSend_resourceTypeSupportsResourceExpunge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceTypeSupportsResourceExpunge:");
}

id objc_msgSend_resourceWithDownloadQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithDownloadQueue:");
}

id objc_msgSend_resourceWithOutgoingResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithOutgoingResources:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didDownloadCKAsset_withOperationType_transcoderVersion_withFingerPrint_andFileUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifier:didDownloadCKAsset:withOperationType:transcoderVersion:withFingerPrint:andFileUTI:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didFailToDownloadWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifier:didFailToDownloadWithError:");
}

id objc_msgSend_resourceWithRecordScopedIdentifier_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifier:didProgress:");
}

id objc_msgSend_resourceWithRecordScopedIdentifierDidStart_operationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithRecordScopedIdentifierDidStart:operationID:");
}

id objc_msgSend_resourceWithScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceWithScopeIdentifier:");
}

id objc_msgSend_resources(void *a1, const char *a2, ...)
{
  return _[a1 resources];
}

id objc_msgSend_responses(void *a1, const char *a2, ...)
{
  return _[a1 responses];
}

id objc_msgSend_resubmitTaskRequestForRescheduler_updatedPrediction_afterTaskHasBeenDeferred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resubmitTaskRequestForRescheduler:updatedPrediction:afterTaskHasBeenDeferred:");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return _[a1 result];
}

id objc_msgSend_resultDescription(void *a1, const char *a2, ...)
{
  return _[a1 resultDescription];
}

id objc_msgSend_resultsCount(void *a1, const char *a2, ...)
{
  return _[a1 resultsCount];
}

id objc_msgSend_resultsLimit(void *a1, const char *a2, ...)
{
  return _[a1 resultsLimit];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retainFileURLForResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retainFileURLForResource:error:");
}

id objc_msgSend_retryAfterMillis(void *a1, const char *a2, ...)
{
  return _[a1 retryAfterMillis];
}

id objc_msgSend_retryCount(void *a1, const char *a2, ...)
{
  return _[a1 retryCount];
}

id objc_msgSend_revertRecords(void *a1, const char *a2, ...)
{
  return _[a1 revertRecords];
}

id objc_msgSend_revertedChanges(void *a1, const char *a2, ...)
{
  return _[a1 revertedChanges];
}

id objc_msgSend_rewindAnchorsPerSharingScopes(void *a1, const char *a2, ...)
{
  return _[a1 rewindAnchorsPerSharingScopes];
}

id objc_msgSend_rewindSyncAnchorsVar(void *a1, const char *a2, ...)
{
  return _[a1 rewindSyncAnchorsVar];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_rootRecord(void *a1, const char *a2, ...)
{
  return _[a1 rootRecord];
}

id objc_msgSend_rootRecordID(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordID];
}

id objc_msgSend_rootRecordName(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordName];
}

id objc_msgSend_rootRecordType(void *a1, const char *a2, ...)
{
  return _[a1 rootRecordType];
}

id objc_msgSend_rootRecordUsingTempCKAssetURL_inZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootRecordUsingTempCKAssetURL:inZone:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runAuxiliaryOperation(void *a1, const char *a2, ...)
{
  return _[a1 runAuxiliaryOperation];
}

id objc_msgSend_runOperations(void *a1, const char *a2, ...)
{
  return _[a1 runOperations];
}

id objc_msgSend_runWithNoSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 runWithNoSyncSession];
}

id objc_msgSend_safeFilename(void *a1, const char *a2, ...)
{
  return _[a1 safeFilename];
}

id objc_msgSend_safeResourcesToDeleteFromProposedResources_realPrune_checkServerIfNecessary_allowUnconfirmed_resourcesToCheckOnServer_targetScopeMapping_unsafeResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeResourcesToDeleteFromProposedResources:realPrune:checkServerIfNecessary:allowUnconfirmed:resourcesToCheckOnServer:targetScopeMapping:unsafeResources:");
}

id objc_msgSend_saveParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveParameters:error:");
}

id objc_msgSend_scheduleSendBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleSendBarrierBlock:");
}

id objc_msgSend_scheduler(void *a1, const char *a2, ...)
{
  return _[a1 scheduler];
}

id objc_msgSend_scope(void *a1, const char *a2, ...)
{
  return _[a1 scope];
}

id objc_msgSend_scopeChangeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangeForScope:");
}

id objc_msgSend_scopeChangeFromCKRecords_currentUserID_previousScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangeFromCKRecords:currentUserID:previousScopeChange:");
}

id objc_msgSend_scopeChangesNeedingToBePulledByClientWithMaximumCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeChangesNeedingToBePulledByClientWithMaximumCount:");
}

id objc_msgSend_scopeFlagsUpdateFromCKRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeFlagsUpdateFromCKRecords:");
}

id objc_msgSend_scopeForSharingScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeForSharingScope:");
}

id objc_msgSend_scopeFromTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeFromTransportScope:");
}

id objc_msgSend_scopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifier];
}

id objc_msgSend_scopeIdentifierForCloudScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierForCloudScopeIndex:");
}

id objc_msgSend_scopeIdentifierForLocalScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierForLocalScopeIndex:");
}

id objc_msgSend_scopeIdentifierFromZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIdentifierFromZoneID:");
}

id objc_msgSend_scopeIdentifierVar(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifierVar];
}

id objc_msgSend_scopeIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 scopeIdentifiers];
}

id objc_msgSend_scopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 scopeIndex];
}

id objc_msgSend_scopeIndexColumnName(void *a1, const char *a2, ...)
{
  return _[a1 scopeIndexColumnName];
}

id objc_msgSend_scopeIndexForCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIndexForCloudScopedIdentifier:");
}

id objc_msgSend_scopeIndexForLocalScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeIndexForLocalScopedIdentifier:");
}

id objc_msgSend_scopeListSyncAnchor(void *a1, const char *a2, ...)
{
  return _[a1 scopeListSyncAnchor];
}

id objc_msgSend_scopeType(void *a1, const char *a2, ...)
{
  return _[a1 scopeType];
}

id objc_msgSend_scopeTypeForCloudKitScope_proposedScopeType_fetchedRecords_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeTypeForCloudKitScope:proposedScopeType:fetchedRecords:currentUserID:");
}

id objc_msgSend_scopeTypeVar(void *a1, const char *a2, ...)
{
  return _[a1 scopeTypeVar];
}

id objc_msgSend_scopeWithCloudScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithCloudScopeIndex:");
}

id objc_msgSend_scopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithIdentifier:");
}

id objc_msgSend_scopeWithLocalScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithLocalScopeIndex:");
}

id objc_msgSend_scopeWithStableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithStableIndex:");
}

id objc_msgSend_scopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 scopedIdentifier];
}

id objc_msgSend_scopedIdentifierForCKRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCKRecordID:");
}

id objc_msgSend_scopedIdentifierForCloudIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCloudIdentifier:scopeIndex:");
}

id objc_msgSend_scopedIdentifierForCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForCloudScopedIdentifier:");
}

id objc_msgSend_scopedIdentifierForLocalIdentifier_scopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForLocalIdentifier:scopeIndex:");
}

id objc_msgSend_scopedIdentifierForLocalScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierForLocalScopedIdentifier:");
}

id objc_msgSend_scopedIdentifierWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierWithIdentifier:");
}

id objc_msgSend_scopedIdentifierWithString_includeScopeIndex_defaultScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifierWithString:includeScopeIndex:defaultScopeIdentifier:");
}

id objc_msgSend_scopedIdentifiersForChangesWithFlag_forScopeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifiersForChangesWithFlag:forScopeWithIdentifier:");
}

id objc_msgSend_scopedIdentifiersRemappedToScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopedIdentifiersRemappedToScopedIdentifier:");
}

id objc_msgSend_scopes(void *a1, const char *a2, ...)
{
  return _[a1 scopes];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _[a1 score];
}

id objc_msgSend_secondaryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 secondaryIdentifier];
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _[a1 selector];
}

id objc_msgSend_selfCrashResetReason(void *a1, const char *a2, ...)
{
  return _[a1 selfCrashResetReason];
}

id objc_msgSend_selfIfMatchesRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selfIfMatchesRecordName:");
}

id objc_msgSend_sendExitMoveBatchFeedbackWithMoveBatchOperationID_moveBatchID_exitZoneID_feedbackItems_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendExitMoveBatchFeedbackWithMoveBatchOperationID:moveBatchID:exitZoneID:feedbackItems:completionHandler:");
}

id objc_msgSend_sendExitStatusFeedbackWithOperationID_shareID_status_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendExitStatusFeedbackWithOperationID:shareID:status:completionHandler:");
}

id objc_msgSend_sendFeedbackToServerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 sendFeedbackToServerIfNecessary];
}

id objc_msgSend_sendProgressBatch_updatedCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProgressBatch:updatedCursor:");
}

id objc_msgSend_sendProgressBatch_updatedScopeChange_updatedFlags_updatedSyncAnchor_zoneIDsWithSyncObligations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProgressBatch:updatedScopeChange:updatedFlags:updatedSyncAnchor:zoneIDsWithSyncObligations:");
}

id objc_msgSend_serializedString(void *a1, const char *a2, ...)
{
  return _[a1 serializedString];
}

id objc_msgSend_serverMessage(void *a1, const char *a2, ...)
{
  return _[a1 serverMessage];
}

id objc_msgSend_serverPreferredPushEnvironmentWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverPreferredPushEnvironmentWithCompletionHandler:");
}

id objc_msgSend_serverRecordIsCorrupted(void *a1, const char *a2, ...)
{
  return _[a1 serverRecordIsCorrupted];
}

id objc_msgSend_serverSupportsAssetSortOrder(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsAssetSortOrder];
}

id objc_msgSend_serverSupportsDeletedByUserIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsDeletedByUserIdentifier];
}

id objc_msgSend_serverSupportsDetectionType(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsDetectionType];
}

id objc_msgSend_serverSupportsGraphPeopleHome(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsGraphPeopleHome];
}

id objc_msgSend_serverSupportsLastViewedDate(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLastViewedDate];
}

id objc_msgSend_serverSupportsLibraryShareSettingsRecordSyncing(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLibraryShareSettingsRecordSyncing];
}

id objc_msgSend_serverSupportsLibraryShareSettingsUserViewedParticipantTrashNotificationDateSyncing(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsLibraryShareSettingsUserViewedParticipantTrashNotificationDateSyncing];
}

id objc_msgSend_serverSupportsMergeTargetRef(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsMergeTargetRef];
}

id objc_msgSend_serverSupportsSharedLibrarySharingState(void *a1, const char *a2, ...)
{
  return _[a1 serverSupportsSharedLibrarySharingState];
}

id objc_msgSend_serverToken(void *a1, const char *a2, ...)
{
  return _[a1 serverToken];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionHasBeenDeferredError(void *a1, const char *a2, ...)
{
  return _[a1 sessionHasBeenDeferredError];
}

id objc_msgSend_sessionIsDone(void *a1, const char *a2, ...)
{
  return _[a1 sessionIsDone];
}

id objc_msgSend_sessionWontHappen(void *a1, const char *a2, ...)
{
  return _[a1 sessionWontHappen];
}

id objc_msgSend_setAcceptSharesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptSharesCompletionBlock:");
}

id objc_msgSend_setAcceptanceStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptanceStatus:");
}

id objc_msgSend_setAccessibilityDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityDescription:");
}

id objc_msgSend_setAccountFlagsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountFlagsData:");
}

id objc_msgSend_setActionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionData:");
}

id objc_msgSend_setActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivated:");
}

id objc_msgSend_setActivationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivationDate:");
}

id objc_msgSend_setAddedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAddedDate:");
}

id objc_msgSend_setAdditionalRequestHTTPHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalRequestHTTPHeaders:");
}

id objc_msgSend_setAdds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdds:");
}

id objc_msgSend_setAdjustedMediaMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedMediaMetaData:");
}

id objc_msgSend_setAdjustedMediaMetaDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedMediaMetaDataType:");
}

id objc_msgSend_setAdjustmentCompoundVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentCompoundVersion:");
}

id objc_msgSend_setAdjustmentCreatorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentCreatorCode:");
}

id objc_msgSend_setAdjustmentRenderTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentRenderTypes:");
}

id objc_msgSend_setAdjustmentSourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentSourceType:");
}

id objc_msgSend_setAdjustmentTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentTimestamp:");
}

id objc_msgSend_setAdjustmentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustmentType:");
}

id objc_msgSend_setAdjustments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustments:");
}

id objc_msgSend_setAlbumSortAscending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumSortAscending:");
}

id objc_msgSend_setAlbumSortType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumSortType:");
}

id objc_msgSend_setAlbumType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlbumType:");
}

id objc_msgSend_setAllowsAnonymousPublicAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsAnonymousPublicAccess:");
}

id objc_msgSend_setAllowsCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellular:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsExpensiveNetworkAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveNetworkAccess:");
}

id objc_msgSend_setAllowsFakeDerivatives_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsFakeDerivatives:");
}

id objc_msgSend_setAllowsNull_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsNull:");
}

id objc_msgSend_setApplicationBundleIdentifierOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverride:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForContainerAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForContainerAccess:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForNetworkAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForNetworkAttribution:");
}

id objc_msgSend_setApplicationBundleIdentifierOverrideForPushTopicGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationBundleIdentifierOverrideForPushTopicGeneration:");
}

id objc_msgSend_setArchiveCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArchiveCursor:");
}

id objc_msgSend_setAssetCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetCounts:");
}

id objc_msgSend_setAssetDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDate:");
}

id objc_msgSend_setAssetHDRType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetHDRType:");
}

id objc_msgSend_setAssetList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetList:");
}

id objc_msgSend_setAssetListPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetListPredicate:");
}

id objc_msgSend_setAssetPublishedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetPublishedBlock:");
}

id objc_msgSend_setAssetSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetSortOrder:");
}

id objc_msgSend_setAssetSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetSubtype:");
}

id objc_msgSend_setAssetTransferOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptions:");
}

id objc_msgSend_setAssetTransferOptionsByRecordTypeAndKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTransferOptionsByRecordTypeAndKey:");
}

id objc_msgSend_setAutoRollbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoRollbackHandler:");
}

id objc_msgSend_setAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailable:");
}

id objc_msgSend_setBatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatch:");
}

id objc_msgSend_setBlacklistedFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlacklistedFeature:");
}

id objc_msgSend_setBoostable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoostable:");
}

id objc_msgSend_setBoundaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoundaryKey:");
}

id objc_msgSend_setBundleIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifiers:");
}

id objc_msgSend_setBurstFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBurstFlags:");
}

id objc_msgSend_setBurstIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBurstIdentifier:");
}

id objc_msgSend_setBusyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBusyState:");
}

id objc_msgSend_setBypassForceSyncLimitations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBypassForceSyncLimitations:");
}

id objc_msgSend_setCKAsset_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCKAsset:forKey:");
}

id objc_msgSend_setCKReferenceWithScopedIdentifier_forKey_referenceAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCKReferenceWithScopedIdentifier:forKey:referenceAction:");
}

id objc_msgSend_setCPLDiscretionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCPLDiscretionary:");
}

id objc_msgSend_setCachedValue_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedValue:forIdentifier:");
}

id objc_msgSend_setCancellable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancellable:");
}

id objc_msgSend_setCancellationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancellationHandler:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCaption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaption:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setChangeTokenUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeTokenUpdatedBlock:");
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeType:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBundleID:");
}

id objc_msgSend_setClientQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientQueue:");
}

id objc_msgSend_setCloudIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudIndex:");
}

id objc_msgSend_setCodeOperationCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCodeOperationCompletionBlock:");
}

id objc_msgSend_setCodec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCodec:");
}

id objc_msgSend_setCompletedUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletedUnitCount:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setComputeStateAdjustmentFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateAdjustmentFingerprint:");
}

id objc_msgSend_setComputeStateLastUpdatedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateLastUpdatedDate:");
}

id objc_msgSend_setComputeStateVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComputeStateVersion:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setContactDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactDescriptor:");
}

id objc_msgSend_setContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainer:");
}

id objc_msgSend_setContainerHasBeenWiped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerHasBeenWiped:");
}

id objc_msgSend_setContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerIdentifier:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCplEnabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCplEnabledDate:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCurrentFetchRecordZoneChangesOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFetchRecordZoneChangesOperation:");
}

id objc_msgSend_setCustomRenderedValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomRenderedValue:");
}

id objc_msgSend_setCustomTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomTitle:");
}

id objc_msgSend_setCustomUserAssetList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomUserAssetList:");
}

id objc_msgSend_setDateDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateDeleted:");
}

id objc_msgSend_setDefaultConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultConfiguration:");
}

id objc_msgSend_setDefaultHEVC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultHEVC:");
}

id objc_msgSend_setDefaultPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultPlatform:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeleteDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteDate:");
}

id objc_msgSend_setDeleteDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeleteDate:forScope:error:");
}

id objc_msgSend_setDeletedByUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedByUserIdentifier:");
}

id objc_msgSend_setDeletes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletes:");
}

id objc_msgSend_setDerivativeGeneratorClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDerivativeGeneratorClass:");
}

id objc_msgSend_setDesiredKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredKeys:");
}

id objc_msgSend_setDestinationRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationRecord:");
}

id objc_msgSend_setDestinationRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationRecordID:");
}

id objc_msgSend_setDetectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectionType:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDidDropSomeRecordsForScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidDropSomeRecordsForScope:error:");
}

id objc_msgSend_setDirectClientImplementationForPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectClientImplementationForPlatform:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledDate:");
}

id objc_msgSend_setDisabledDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledDate:forScope:error:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDownloadedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedItemCount:");
}

id objc_msgSend_setDownloadedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownloadedSize:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDurationInNanoSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationInNanoSeconds:");
}

id objc_msgSend_setEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmail:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:opportunisticTopics:");
}

id objc_msgSend_setEncryptedObject_forKey_validateClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedObject:forKey:validateClass:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEngineLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngineLibrary:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorDomain:");
}

id objc_msgSend_setErrorForAllOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorForAllOperations:");
}

id objc_msgSend_setErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorMessage:");
}

id objc_msgSend_setEstimatedInitialSizeForLocalLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedInitialSizeForLocalLibrary:");
}

id objc_msgSend_setEtag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEtag:");
}

id objc_msgSend_setExitRetentionPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitRetentionPolicy:");
}

id objc_msgSend_setExitSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitSource:");
}

id objc_msgSend_setExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitState:");
}

id objc_msgSend_setExitType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitType:");
}

id objc_msgSend_setExitingUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitingUserIdentifiers:");
}

id objc_msgSend_setExpectedDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedDuration:");
}

id objc_msgSend_setExpectedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedSize:");
}

id objc_msgSend_setExpirationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationHandler:");
}

id objc_msgSend_setExpiryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpiryDate:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExpungeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungeDate:");
}

id objc_msgSend_setExpungeableResourceStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungeableResourceStates:");
}

id objc_msgSend_setExpungedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungedDate:");
}

id objc_msgSend_setExpungedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpungedState:");
}

id objc_msgSend_setExtendedDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtendedDescription:");
}

id objc_msgSend_setFaceCropType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFaceCropType:");
}

id objc_msgSend_setFacesAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesAdjustmentsFingerprint:");
}

id objc_msgSend_setFacesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesData:");
}

id objc_msgSend_setFacesVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFacesVersion:");
}

id objc_msgSend_setFavorite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFavorite:");
}

id objc_msgSend_setFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeature:");
}

id objc_msgSend_setFeatureCheckAvailabilityCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCheckAvailabilityCompletionBlock:");
}

id objc_msgSend_setFeatureCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCodes:");
}

id objc_msgSend_setFeatureCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureCompatibleVersion:");
}

id objc_msgSend_setFeatureVersionHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureVersionHistory:");
}

id objc_msgSend_setFeaturesData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeaturesData:");
}

id objc_msgSend_setFeedbackCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedbackCompletionBlock:");
}

id objc_msgSend_setFetchAllChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllChanges:");
}

id objc_msgSend_setFetchAllResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllResults:");
}

id objc_msgSend_setFetchCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCache:");
}

id objc_msgSend_setFetchDatabaseChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZoneChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZoneChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZonesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setFetchShareMetadataCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchShareMetadataCompletionBlock:");
}

id objc_msgSend_setFetchShareParticipantsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchShareParticipantsCompletionBlock:");
}

id objc_msgSend_setFileNamesByAssetFieldNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileNamesByAssetFieldNames:");
}

id objc_msgSend_setFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileSize:");
}

id objc_msgSend_setFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileURL:");
}

id objc_msgSend_setFileUTI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileUTI:");
}

id objc_msgSend_setFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilename:");
}

id objc_msgSend_setFingerPrint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerPrint:");
}

id objc_msgSend_setForceSyncDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceSyncDelegate:");
}

id objc_msgSend_setForceUpdatePrimarySyncStateOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceUpdatePrimarySyncStateOnce:");
}

id objc_msgSend_setForced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForced:");
}

id objc_msgSend_setForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForeground:");
}

id objc_msgSend_setFullName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullName:");
}

id objc_msgSend_setFullSizeJPEGSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSizeJPEGSource:");
}

id objc_msgSend_setGate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGate:");
}

id objc_msgSend_setGraphData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGraphData:");
}

id objc_msgSend_setGraphVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGraphVersion:");
}

id objc_msgSend_setGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroup:");
}

id objc_msgSend_setGroupConcurrencyLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupConcurrencyLimit:");
}

id objc_msgSend_setGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupName:");
}

id objc_msgSend_setHasBackgroundActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBackgroundActivity:");
}

id objc_msgSend_setHasCellularBudget_hasBatteryBudget_hasLowBatteryLevel_isConstrainedNetwork_isBlockedByLowPowerMode_hasHeavyResourceUsage_hasPoorNetworkQuality_hasModerateThermalPressure_hasThermalPressure_hasPoorSystemConditions_isBudgetValid_blockedReason_unBlockedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:isBlockedByLowPowerMode:hasHeavyResourceUsage:hasPoorNetworkQuality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReason:unBlockedReason:");
}

id objc_msgSend_setHasCompletedGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCompletedGeneration:");
}

id objc_msgSend_setHasCompletedGeneration_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCompletedGeneration:now:");
}

id objc_msgSend_setHasEPPAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasEPPAssets:");
}

id objc_msgSend_setHasSomethingTodo(void *a1, const char *a2, ...)
{
  return _[a1 setHasSomethingTodo];
}

id objc_msgSend_setHasVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasVersion:");
}

id objc_msgSend_setHasiCloudAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasiCloudAccount:");
}

id objc_msgSend_setHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeight:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighPriority:");
}

id objc_msgSend_setICloudLibraryClientIsNotAuthenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudLibraryClientIsNotAuthenticated:");
}

id objc_msgSend_setICloudLibraryClientVersionTooOld_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudLibraryClientVersionTooOld:");
}

id objc_msgSend_setIdleDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleDescription:");
}

id objc_msgSend_setImageDimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDimensions:");
}

id objc_msgSend_setImportDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportDate:");
}

id objc_msgSend_setImportGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportGroupIdentifier:");
}

id objc_msgSend_setImportedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedBy:");
}

id objc_msgSend_setImportedByBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedByBundleIdentifier:");
}

id objc_msgSend_setImportedByDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImportedByDisplayName:");
}

id objc_msgSend_setInEmergencyClosing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInEmergencyClosing:");
}

id objc_msgSend_setInExpunged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInExpunged:");
}

id objc_msgSend_setInTrash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTrash:");
}

id objc_msgSend_setInitialSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialSyncAnchor:forScope:error:");
}

id objc_msgSend_setIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntent:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvolvedProcesses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvolvedProcesses:");
}

id objc_msgSend_setIsCurrentUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCurrentUser:");
}

id objc_msgSend_setIsMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMetadata:");
}

id objc_msgSend_setIsUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUpload:");
}

id objc_msgSend_setItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemCount:");
}

id objc_msgSend_setItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemIdentifier:");
}

id objc_msgSend_setItemScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemScopedIdentifier:");
}

id objc_msgSend_setItemType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemType:");
}

id objc_msgSend_setItemTypeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemTypeHint:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeyAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyAsset:");
}

id objc_msgSend_setKeyAssetIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyAssetIdentifier:");
}

id objc_msgSend_setKeychainCDPEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeychainCDPEnabled:");
}

id objc_msgSend_setKeywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeywords:");
}

id objc_msgSend_setKnownToServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKnownToServer:");
}

id objc_msgSend_setLastBatchDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBatchDate:");
}

id objc_msgSend_setLastError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastError:");
}

id objc_msgSend_setLastSharedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSharedDate:");
}

id objc_msgSend_setLastViewedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastViewedDate:");
}

id objc_msgSend_setLegacyEncryptedObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLegacyEncryptedObject:forKey:");
}

id objc_msgSend_setLibraryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryInfo:");
}

id objc_msgSend_setLibraryState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibraryState:");
}

id objc_msgSend_setLocalIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalIndex:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setManualSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualSortOrder:");
}

id objc_msgSend_setMasterIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasterIdentifier:");
}

id objc_msgSend_setMediaGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaGroupIdentifier:");
}

id objc_msgSend_setMediaItemMakerData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaItemMakerData:");
}

id objc_msgSend_setMediaMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaMetaData:");
}

id objc_msgSend_setMediaMetaDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaMetaDataType:");
}

id objc_msgSend_setMergeTargetPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergeTargetPersonIdentifier:");
}

id objc_msgSend_setMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetric:");
}

id objc_msgSend_setMinDurationBetweenInstances_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinDurationBetweenInstances:");
}

id objc_msgSend_setMinimumThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumThrottlingInterval:");
}

id objc_msgSend_setMmcsEncryptionSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMmcsEncryptionSupport:");
}

id objc_msgSend_setModifies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifies:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setMomentShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMomentShare:");
}

id objc_msgSend_setMostRecentAddedDateOnCKRecord_withCPLEnabledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentAddedDateOnCKRecord:withCPLEnabledDate:");
}

id objc_msgSend_setMovePhotosCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovePhotosCompletionBlock:");
}

id objc_msgSend_setMovieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMovieData:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNameComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameComponents:");
}

id objc_msgSend_setNetworkDownloadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkDownloadSize:");
}

id objc_msgSend_setNetworkUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkUploadSize:");
}

id objc_msgSend_setNotificationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationState:");
}

id objc_msgSend_setNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNow:");
}

id objc_msgSend_setNumRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumRequested:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKey_expirationDate_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:expirationDate:date:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpened:");
}

id objc_msgSend_setOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperation:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOriginRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginRecordID:");
}

id objc_msgSend_setOriginalChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalChoice:");
}

id objc_msgSend_setOriginalOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalOrientation:");
}

id objc_msgSend_setOriginatingFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginatingFingerprint:");
}

id objc_msgSend_setOriginatingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginatingScopeIdentifier:");
}

id objc_msgSend_setOtherAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherAdjustmentsFingerprint:");
}

id objc_msgSend_setOtherItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherItemCount:");
}

id objc_msgSend_setOverrideRateLimiting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideRateLimiting:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setParentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentIdentifier:");
}

id objc_msgSend_setParticipantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipantID:");
}

id objc_msgSend_setParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipants:");
}

id objc_msgSend_setPausable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPausable:");
}

id objc_msgSend_setPeople_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeople:");
}

id objc_msgSend_setPerRecordCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordCompletionBlock:");
}

id objc_msgSend_setPerRecordDeleteBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordDeleteBlock:");
}

id objc_msgSend_setPerRecordMoveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordMoveBlock:");
}

id objc_msgSend_setPerRecordProgressBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordProgressBlock:");
}

id objc_msgSend_setPerRecordSaveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordSaveBlock:");
}

id objc_msgSend_setPerShareCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareCompletionBlock:");
}

id objc_msgSend_setPerShareMetadataBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareMetadataBlock:");
}

id objc_msgSend_setPerShareParticipantCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareParticipantCompletionBlock:");
}

id objc_msgSend_setPermission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPermission:");
}

id objc_msgSend_setPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonIdentifier:");
}

id objc_msgSend_setPersonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonType:");
}

id objc_msgSend_setPersonsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonsData:");
}

id objc_msgSend_setPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumber:");
}

id objc_msgSend_setPlaceAnnotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceAnnotation:");
}

id objc_msgSend_setPlaceLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceLevel:");
}

id objc_msgSend_setPlaceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceName:");
}

id objc_msgSend_setPlatformImplementation_forClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlatformImplementation:forClass:");
}

id objc_msgSend_setPlayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlayCount:");
}

id objc_msgSend_setPluginFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPluginFields:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPrequeliteStoreImplementationForPlatform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrequeliteStoreImplementationForPlatform:");
}

id objc_msgSend_setPreviewImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviewImageData:");
}

id objc_msgSend_setPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousServerChangeToken:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProblematicFormerSharedScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProblematicFormerSharedScopeIdentifier:");
}

id objc_msgSend_setProcessingTaskIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingTaskIdentifiers:");
}

id objc_msgSend_setProducedResultIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProducedResultIdentifiers:");
}

id objc_msgSend_setProfilingHook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProfilingHook:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHandler:");
}

id objc_msgSend_setProjectData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectData:");
}

id objc_msgSend_setProjectDocumentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectDocumentType:");
}

id objc_msgSend_setProjectPreviewImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProjectPreviewImageData:");
}

id objc_msgSend_setPromisedAssetCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedAssetCount:");
}

id objc_msgSend_setPromisedPhotosCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedPhotosCount:");
}

id objc_msgSend_setPromisedVideosCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromisedVideosCount:");
}

id objc_msgSend_setPublicPermission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicPermission:");
}

id objc_msgSend_setPublishAssetCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublishAssetCompletionBlock:");
}

id objc_msgSend_setPullFromTransportExpirationInterval_scope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPullFromTransportExpirationInterval:scope:error:");
}

id objc_msgSend_setPushNotificationCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushNotificationCenter:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueryCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCompletionBlock:");
}

id objc_msgSend_setQueryCursorFetchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryCursorFetchedBlock:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setReRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReRun:");
}

id objc_msgSend_setRealIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealIdentifier:");
}

id objc_msgSend_setRecordChangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordChangeData:");
}

id objc_msgSend_setRecordComputeStateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordComputeStateDelegate:");
}

id objc_msgSend_setRecordList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordList:");
}

id objc_msgSend_setRecordMatchedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordMatchedBlock:");
}

id objc_msgSend_setRecordModificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordModificationDate:");
}

id objc_msgSend_setRecordWasChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWasChangedBlock:");
}

id objc_msgSend_setRecordWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWithIDWasDeletedBlock:");
}

id objc_msgSend_setRecordZoneChangeTokensUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneChangeTokensUpdatedBlock:");
}

id objc_msgSend_setRecordZoneFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneFetchCompletionBlock:");
}

id objc_msgSend_setRecordZoneWithIDChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDChangedBlock:");
}

id objc_msgSend_setRecordZoneWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDWasDeletedBlock:");
}

id objc_msgSend_setReferencedResourcesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferencedResourcesCount:");
}

id objc_msgSend_setReferencedResourcesSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferencedResourcesSize:");
}

id objc_msgSend_setRejected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRejected:");
}

id objc_msgSend_setRejectedPersonIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRejectedPersonIdentifier:");
}

id objc_msgSend_setRelatedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedApplications:");
}

id objc_msgSend_setRelatedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedIdentifier:");
}

id objc_msgSend_setRelatedValueOnRecord_fromRelatedRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedValueOnRecord:fromRelatedRecord:");
}

id objc_msgSend_setRelation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelation:");
}

id objc_msgSend_setRelevantUntilDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelevantUntilDate:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestCompletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCompletedBlock:");
}

id objc_msgSend_setRequestedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedItemCount:");
}

id objc_msgSend_setRequiresExternalPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresExternalPower:");
}

id objc_msgSend_setRequiresNetworkConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresNetworkConnectivity:");
}

id objc_msgSend_setRequiresProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresProtectionClass:");
}

id objc_msgSend_setRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRescheduler:");
}

id objc_msgSend_setReschedulerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReschedulerManager:");
}

id objc_msgSend_setResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResource:");
}

id objc_msgSend_setResourceData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceData:");
}

id objc_msgSend_setResourceProgressDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceProgressDelegate:");
}

id objc_msgSend_setResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceType:");
}

id objc_msgSend_setResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResources:");
}

id objc_msgSend_setResultsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsCount:");
}

id objc_msgSend_setResultsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsLimit:");
}

id objc_msgSend_setRewindAnchorsPerSharingScopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRewindAnchorsPerSharingScopes:");
}

id objc_msgSend_setRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRole:");
}

id objc_msgSend_setSavePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavePolicy:");
}

id objc_msgSend_setScheduleAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleAfter:");
}

id objc_msgSend_setScopeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeIndex:");
}

id objc_msgSend_setScopeNeedsToUploadComputeState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeNeedsToUploadComputeState:error:");
}

id objc_msgSend_setScopeNeedsUpdateFromTransport_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopeNeedsUpdateFromTransport:error:");
}

id objc_msgSend_setScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopedIdentifier:");
}

id objc_msgSend_setScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScore:");
}

id objc_msgSend_setSecondaryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryIdentifier:");
}

id objc_msgSend_setServerFeatureCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerFeatureCompatibleVersion:");
}

id objc_msgSend_setServerRecordIsCorrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerRecordIsCorrupted:");
}

id objc_msgSend_setServerToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerToken:");
}

id objc_msgSend_setShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShare:");
}

id objc_msgSend_setShareCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShareCount:");
}

id objc_msgSend_setSharedLibrarySharingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedLibrarySharingState:");
}

id objc_msgSend_setSharingContributorUserIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingContributorUserIdentifiers:");
}

id objc_msgSend_setSharingRecordChangeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingRecordChangeData:");
}

id objc_msgSend_setSharingRecordScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingRecordScopedIdentifier:");
}

id objc_msgSend_setSharingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingScopeIdentifier:");
}

id objc_msgSend_setShouldCheckFilesForUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCheckFilesForUpload:");
}

id objc_msgSend_setShouldCreateScopeIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldCreateScopeIfNecessary:");
}

id objc_msgSend_setShouldDecrypt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDecrypt:");
}

id objc_msgSend_setShouldFetchAssetContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContent:");
}

id objc_msgSend_setShouldFetchAssetContentInMemory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContentInMemory:");
}

id objc_msgSend_setShouldFetchAssetContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchAssetContents:");
}

id objc_msgSend_setShouldFetchRootRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFetchRootRecord:");
}

id objc_msgSend_setShouldNotCacheValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldNotCacheValue:");
}

id objc_msgSend_setShouldOverride_forSystemBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOverride:forSystemBudgets:");
}

id objc_msgSend_setShouldUpdateDisabledFeaturesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdateDisabledFeaturesWithError:");
}

id objc_msgSend_setShouldWarnUserBeforeWipeOnUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldWarnUserBeforeWipeOnUpgrade:");
}

id objc_msgSend_setSimilarToOriginalAdjustmentsFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimilarToOriginalAdjustmentsFingerprint:");
}

id objc_msgSend_setSimpleAdjustmentData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleAdjustmentData:");
}

id objc_msgSend_setSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceBundleIdentifier:");
}

id objc_msgSend_setSourceRecordChangeTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRecordChangeTag:");
}

id objc_msgSend_setSourceRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceRecordID:");
}

id objc_msgSend_setSqliteErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSqliteErrorHandler:");
}

id objc_msgSend_setStableHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStableHash:");
}

id objc_msgSend_setStableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStableIndex:");
}

id objc_msgSend_setStagedScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagedScopeChange:");
}

id objc_msgSend_setStagedTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagedTransportScope:");
}

id objc_msgSend_setStagingCloudKitScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagingCloudKitScope:");
}

id objc_msgSend_setStagingScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStagingScopeIdentifier:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStorageGroupingPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStorageGroupingPolicy:");
}

id objc_msgSend_setStreamingURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamingURL:");
}

id objc_msgSend_setSubcategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubcategory:");
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitle:");
}

id objc_msgSend_setSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtype:");
}

id objc_msgSend_setSupervisor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupervisor:");
}

id objc_msgSend_setSupplementalChangeTokenByZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupplementalChangeTokenByZoneID:");
}

id objc_msgSend_setSupportedDeviceCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportedDeviceCapabilities:");
}

id objc_msgSend_setSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncAnchor:forScope:error:");
}

id objc_msgSend_setSyndicationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyndicationIdentifier:");
}

id objc_msgSend_setTarget_forRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:forRecordWithScopedIdentifier:");
}

id objc_msgSend_setTaskCompleted(void *a1, const char *a2, ...)
{
  return _[a1 setTaskCompleted];
}

id objc_msgSend_setTaskDidFinishWithErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskDidFinishWithErrorBlock:");
}

id objc_msgSend_setTaskExpiredWithRetryAfter_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskExpiredWithRetryAfter:error:");
}

id objc_msgSend_setTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskIdentifier:");
}

id objc_msgSend_setThumbnailImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThumbnailImageData:");
}

id objc_msgSend_setTimeZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZoneName:");
}

id objc_msgSend_setTimeZoneOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZoneOffset:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalUnitCount:");
}

id objc_msgSend_setTrackingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackingContext:");
}

id objc_msgSend_setTranscodedItemCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranscodedItemCount:");
}

id objc_msgSend_setTransportGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportGroup:");
}

id objc_msgSend_setTransportIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportIdentifier:");
}

id objc_msgSend_setTransportScopeMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransportScopeMapping:");
}

id objc_msgSend_setTrashed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrashed:");
}

id objc_msgSend_setTrashedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrashedReason:");
}

id objc_msgSend_setTrySchedulingBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrySchedulingBefore:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setURLOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLOptions:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUnique_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnique:");
}

id objc_msgSend_setUpgradeSuggestedToAccessAllPhotos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpgradeSuggestedToAccessAllPhotos:");
}

id objc_msgSend_setUploadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadSize:");
}

id objc_msgSend_setUploadedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadedSize:");
}

id objc_msgSend_setUseMMCSEncryptionV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMMCSEncryptionV2:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUserActionOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActionOptions:");
}

id objc_msgSend_setUserDefinedRules_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefinedRules:");
}

id objc_msgSend_setUserInfoObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfoObject:forKey:");
}

id objc_msgSend_setUserVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserVersion:");
}

id objc_msgSend_setUserViewedParticipantTrashNotificationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserViewedParticipantTrashNotificationDate:");
}

id objc_msgSend_setUsesGroupingSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesGroupingSeparator:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forFlag:");
}

id objc_msgSend_setValue_forGlobalVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forGlobalVariable:error:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forVariable_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forVariable:error:");
}

id objc_msgSend_setVerifiedType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerifiedType:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVideoComplementDurationTimescale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementDurationTimescale:");
}

id objc_msgSend_setVideoComplementDurationValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementDurationValue:");
}

id objc_msgSend_setVideoComplementImageDisplayTimescale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementImageDisplayTimescale:");
}

id objc_msgSend_setVideoComplementImageDisplayValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementImageDisplayValue:");
}

id objc_msgSend_setVideoComplementVisibilityState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoComplementVisibilityState:");
}

id objc_msgSend_setVideoFrameRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoFrameRate:");
}

id objc_msgSend_setViewCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewCount:");
}

id objc_msgSend_setViewPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewPresentation:");
}

id objc_msgSend_setVolumeURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeURL:");
}

id objc_msgSend_setWalrusEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWalrusEnabled:");
}

id objc_msgSend_setWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidth:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneID:");
}

id objc_msgSend_setupConfigurationForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupConfigurationForOperation:");
}

id objc_msgSend_setupPragmas(void *a1, const char *a2, ...)
{
  return _[a1 setupPragmas];
}

id objc_msgSend_setupRootOnRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupRootOnRecord:");
}

id objc_msgSend_share(void *a1, const char *a2, ...)
{
  return _[a1 share];
}

id objc_msgSend_shareCount(void *a1, const char *a2, ...)
{
  return _[a1 shareCount];
}

id objc_msgSend_shareParticipantsFromCKShareParticipants_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareParticipantsFromCKShareParticipants:currentUserID:");
}

id objc_msgSend_sharePlan(void *a1, const char *a2, ...)
{
  return _[a1 sharePlan];
}

id objc_msgSend_shareRecordIDToDelete(void *a1, const char *a2, ...)
{
  return _[a1 shareRecordIDToDelete];
}

id objc_msgSend_shareRecordName(void *a1, const char *a2, ...)
{
  return _[a1 shareRecordName];
}

id objc_msgSend_shareTypeForScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareTypeForScopeChange:");
}

id objc_msgSend_shareTypes(void *a1, const char *a2, ...)
{
  return _[a1 shareTypes];
}

id objc_msgSend_sharedCKRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordIDs];
}

id objc_msgSend_sharedCKRecordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordIDsToDelete];
}

id objc_msgSend_sharedCKRecordsToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sharedCKRecordsToUpload];
}

id objc_msgSend_sharedChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 sharedChangeToken];
}

id objc_msgSend_sharedCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedCloudDatabase];
}

id objc_msgSend_sharedCloudScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharedCloudScopedIdentifier];
}

id objc_msgSend_sharedContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedContext];
}

id objc_msgSend_sharedCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 sharedCoordinator];
}

id objc_msgSend_sharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabase];
}

id objc_msgSend_sharedDuetTicketProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedDuetTicketProvider];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedLibraryRampCheckWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLibraryRampCheckWithCompletionHandler:");
}

id objc_msgSend_sharedLibraryServerRampTaskWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedLibraryServerRampTaskWithCompletionHandler:");
}

id objc_msgSend_sharedLibrarySharingState(void *a1, const char *a2, ...)
{
  return _[a1 sharedLibrarySharingState];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedRecordIDsToMissingPrivateRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 sharedRecordIDsToMissingPrivateRecordIDs];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 sharedScheduler];
}

id objc_msgSend_sharedZoneIdentification(void *a1, const char *a2, ...)
{
  return _[a1 sharedZoneIdentification];
}

id objc_msgSend_sharingContributorUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 sharingContributorUserIdentifiers];
}

id objc_msgSend_sharingRecordChangeData(void *a1, const char *a2, ...)
{
  return _[a1 sharingRecordChangeData];
}

id objc_msgSend_sharingRecordScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingRecordScopedIdentifier];
}

id objc_msgSend_sharingScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharingScopeForScope:");
}

id objc_msgSend_sharingScopeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingScopeIdentifier];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _[a1 shortDescription];
}

id objc_msgSend_shortDescriptionForResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescriptionForResourceType:");
}

id objc_msgSend_shortDescriptionForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDescriptionForState:");
}

id objc_msgSend_shouldApplyPropertiesWithSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldApplyPropertiesWithSelector:");
}

id objc_msgSend_shouldAutoactivateScopeWithIdentifier_scopeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAutoactivateScopeWithIdentifier:scopeType:");
}

id objc_msgSend_shouldBeCreatedDynamically(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeCreatedDynamically];
}

id objc_msgSend_shouldBeDiscretionary(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeDiscretionary];
}

id objc_msgSend_shouldBoostPriority(void *a1, const char *a2, ...)
{
  return _[a1 shouldBoostPriority];
}

id objc_msgSend_shouldCheckFilesForUpload(void *a1, const char *a2, ...)
{
  return _[a1 shouldCheckFilesForUpload];
}

id objc_msgSend_shouldClearMissingResourcesInCKRecord(void *a1, const char *a2, ...)
{
  return _[a1 shouldClearMissingResourcesInCKRecord];
}

id objc_msgSend_shouldCopyCKRecordKeyToDestinationCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCopyCKRecordKeyToDestinationCKRecord:");
}

id objc_msgSend_shouldDefer(void *a1, const char *a2, ...)
{
  return _[a1 shouldDefer];
}

id objc_msgSend_shouldIgnoreDefaultsCPLKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreDefaultsCPLKey:");
}

id objc_msgSend_shouldIgnoreResourceTypeOnUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreResourceTypeOnUpload:");
}

id objc_msgSend_shouldIgnoreZoneWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreZoneWithZoneID:");
}

id objc_msgSend_shouldIncludeInStatus(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeInStatus];
}

id objc_msgSend_shouldKeepPower(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepPower];
}

id objc_msgSend_shouldLaunchAuxiliaryOperation(void *a1, const char *a2, ...)
{
  return _[a1 shouldLaunchAuxiliaryOperation];
}

id objc_msgSend_shouldOnlyUploadNewResources(void *a1, const char *a2, ...)
{
  return _[a1 shouldOnlyUploadNewResources];
}

id objc_msgSend_shouldPreventWipeOnUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 shouldPreventWipeOnUpgrade];
}

id objc_msgSend_shouldPreventWipeOnUpgradeCreateRadar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPreventWipeOnUpgradeCreateRadar:");
}

id objc_msgSend_shouldProtectResourceTypeFromClearing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldProtectResourceTypeFromClearing:");
}

id objc_msgSend_shouldProtectZoneIDFromDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldProtectZoneIDFromDeletion:");
}

id objc_msgSend_shouldRegisterClient(void *a1, const char *a2, ...)
{
  return _[a1 shouldRegisterClient];
}

id objc_msgSend_shouldRequestEncryptedStream(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestEncryptedStream];
}

id objc_msgSend_shouldRequestMoreTime(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestMoreTime];
}

id objc_msgSend_shouldRunForceProcessingStagedScopesTaskNow(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunForceProcessingStagedScopesTaskNow];
}

id objc_msgSend_shouldRunForceProcessingStagedScopesTaskNowMovingToForeground(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunForceProcessingStagedScopesTaskNowMovingToForeground];
}

id objc_msgSend_shouldRunOperationsForTask_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsForTask:error:");
}

id objc_msgSend_shouldRunOperationsNow_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsNow:error:");
}

id objc_msgSend_shouldRunOperationsNow_forGroupName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsNow:forGroupName:error:");
}

id objc_msgSend_shouldRunOperationsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunOperationsWithError:");
}

id objc_msgSend_shouldScheduleForceProcessingStagedScopesTask(void *a1, const char *a2, ...)
{
  return _[a1 shouldScheduleForceProcessingStagedScopesTask];
}

id objc_msgSend_shouldSplitIndirectRecordForKey_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSplitIndirectRecordForKey:recordClass:");
}

id objc_msgSend_shouldTryReopening(void *a1, const char *a2, ...)
{
  return _[a1 shouldTryReopening];
}

id objc_msgSend_shouldTryReopeningWithoutLibrary(void *a1, const char *a2, ...)
{
  return _[a1 shouldTryReopeningWithoutLibrary];
}

id objc_msgSend_shouldUpdateKeyOnBothRecords_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnBothRecords:recordClass:");
}

id objc_msgSend_shouldUpdateKeyOnPrivateRecord_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnPrivateRecord:recordClass:");
}

id objc_msgSend_shouldUpdateKeyOnSharedRecord_recordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateKeyOnSharedRecord:recordClass:");
}

id objc_msgSend_shouldUpgradeSchema(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpgradeSchema];
}

id objc_msgSend_shouldUploadResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUploadResource:");
}

id objc_msgSend_shouldUploadToOtherRecord(void *a1, const char *a2, ...)
{
  return _[a1 shouldUploadToOtherRecord];
}

id objc_msgSend_shouldUseEncryptedPropertiesIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseEncryptedPropertiesIfPossible];
}

id objc_msgSend_shouldUseEncryptedPropertiesIfPossibleWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseEncryptedPropertiesIfPossibleWithContext:");
}

id objc_msgSend_shouldWarnUserBeforeWipeOnUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 shouldWarnUserBeforeWipeOnUpgrade];
}

id objc_msgSend_showNetworkIndicatorForBundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNetworkIndicatorForBundleWithIdentifier:");
}

id objc_msgSend_showSyncIndicator(void *a1, const char *a2, ...)
{
  return _[a1 showSyncIndicator];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_silentMoverServerRampOperationWithOperationID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "silentMoverServerRampOperationWithOperationID:completionHandler:");
}

id objc_msgSend_similarToOriginalAdjustmentsFingerprint(void *a1, const char *a2, ...)
{
  return _[a1 similarToOriginalAdjustmentsFingerprint];
}

id objc_msgSend_simpleAdjustmentData(void *a1, const char *a2, ...)
{
  return _[a1 simpleAdjustmentData];
}

id objc_msgSend_simplifiedTaskIdentifierForTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simplifiedTaskIdentifierForTaskIdentifier:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeOfOriginalResourcesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfOriginalResourcesToUpload];
}

id objc_msgSend_sizeOfResourcesToUpload(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfResourcesToUpload];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sourceBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sourceBundleIdentifier];
}

id objc_msgSend_sourceRecordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 sourceRecordChangeTag];
}

id objc_msgSend_sourceRecordID(void *a1, const char *a2, ...)
{
  return _[a1 sourceRecordID];
}

id objc_msgSend_sourceResourceType(void *a1, const char *a2, ...)
{
  return _[a1 sourceResourceType];
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return _[a1 speed];
}

id objc_msgSend_sql(void *a1, const char *a2, ...)
{
  return _[a1 sql];
}

id objc_msgSend_sqliteBind_index_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sqliteBind:index:");
}

id objc_msgSend_sqliteErrorHandler(void *a1, const char *a2, ...)
{
  return _[a1 sqliteErrorHandler];
}

id objc_msgSend_stableHash(void *a1, const char *a2, ...)
{
  return _[a1 stableHash];
}

id objc_msgSend_stableIndex(void *a1, const char *a2, ...)
{
  return _[a1 stableIndex];
}

id objc_msgSend_stableIndexVar(void *a1, const char *a2, ...)
{
  return _[a1 stableIndexVar];
}

id objc_msgSend_stableScopeIndexForScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stableScopeIndexForScopeIdentifier:");
}

id objc_msgSend_stagedScopeChange(void *a1, const char *a2, ...)
{
  return _[a1 stagedScopeChange];
}

id objc_msgSend_stagedSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 stagedSyncAnchorVar];
}

id objc_msgSend_stagingScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagingScopeForScope:");
}

id objc_msgSend_stagingZoneID(void *a1, const char *a2, ...)
{
  return _[a1 stagingZoneID];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAutomaticOverridingSystemBudgets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAutomaticOverridingSystemBudgets:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDateDescriptionWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDateDescriptionWithNow:");
}

id objc_msgSend_startExitFromSharedScopeWithIdentifier_retentionPolicy_exitSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startExitFromSharedScopeWithIdentifier:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_startExitTaskFromSharedScope_transportScope_share_retentionPolicy_exitSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startExitTaskFromSharedScope:transportScope:share:retentionPolicy:exitSource:completionHandler:");
}

id objc_msgSend_startOverridingSystemBudgets_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOverridingSystemBudgets:reason:");
}

id objc_msgSend_startOverridingSystemBudgetsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOverridingSystemBudgetsForClient:");
}

id objc_msgSend_startRequiredSyncSessionNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRequiredSyncSessionNow:");
}

id objc_msgSend_startSyncTaskForDaemonLibraryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSyncTaskForDaemonLibraryManager:");
}

id objc_msgSend_startVacuumWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startVacuumWithCompletionHandler:");
}

id objc_msgSend_startWatching(void *a1, const char *a2, ...)
{
  return _[a1 startWatching];
}

id objc_msgSend_startWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithError:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_statement(void *a1, const char *a2, ...)
{
  return _[a1 statement];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCenter(void *a1, const char *a2, ...)
{
  return _[a1 statusCenter];
}

id objc_msgSend_statusChanges(void *a1, const char *a2, ...)
{
  return _[a1 statusChanges];
}

id objc_msgSend_statusDictionary(void *a1, const char *a2, ...)
{
  return _[a1 statusDictionary];
}

id objc_msgSend_statusDictionaryForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusDictionaryForScope:");
}

id objc_msgSend_statusError(void *a1, const char *a2, ...)
{
  return _[a1 statusError];
}

id objc_msgSend_statusObject(void *a1, const char *a2, ...)
{
  return _[a1 statusObject];
}

id objc_msgSend_statusPerOperationType(void *a1, const char *a2, ...)
{
  return _[a1 statusPerOperationType];
}

id objc_msgSend_statusPerScopeIndex(void *a1, const char *a2, ...)
{
  return _[a1 statusPerScopeIndex];
}

id objc_msgSend_statusWithIndent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithIndent:");
}

id objc_msgSend_statusWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusWithNow:");
}

id objc_msgSend_statusesForRecordsWithScopedIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusesForRecordsWithScopedIdentifiers:");
}

id objc_msgSend_statusesWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusesWithNow:");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAllWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAllWithCompletionHandler:");
}

id objc_msgSend_stopOverridingSystemBudgets_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopOverridingSystemBudgets:reason:");
}

id objc_msgSend_stopOverridingSystemBudgetsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopOverridingSystemBudgetsForClient:");
}

id objc_msgSend_stopWatching(void *a1, const char *a2, ...)
{
  return _[a1 stopWatching];
}

id objc_msgSend_storageNameForFingerPrint_fileUTI_bucket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storageNameForFingerPrint:fileUTI:bucket:");
}

id objc_msgSend_storages(void *a1, const char *a2, ...)
{
  return _[a1 storages];
}

id objc_msgSend_store(void *a1, const char *a2, ...)
{
  return _[a1 store];
}

id objc_msgSend_storeChange_pushContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChange:pushContext:error:");
}

id objc_msgSend_storeChangeSessionUpdate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChangeSessionUpdate:error:");
}

id objc_msgSend_storeClientIsInSyncWithClientCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeClientIsInSyncWithClientCacheWithError:");
}

id objc_msgSend_storeEstimatedSize_estimatedAssetCount_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeEstimatedSize:estimatedAssetCount:forScope:error:");
}

id objc_msgSend_storeExtractedBatch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeExtractedBatch:error:");
}

id objc_msgSend_storeInitialMetadataDownloadDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMetadataDownloadDate:forScope:error:");
}

id objc_msgSend_storeInitialMetadataQueriesDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMetadataQueriesDate:forScope:error:");
}

id objc_msgSend_storeInitialMingleDate_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInitialMingleDate:forScope:error:");
}

id objc_msgSend_storeLibraryVersion_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeLibraryVersion:withError:");
}

id objc_msgSend_storeResourcesToUpload_withUploadIdentifier_shouldCheckResources_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeResourcesToUpload:withUploadIdentifier:shouldCheckResources:error:");
}

id objc_msgSend_storeScopeChange_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeScopeChange:forScope:error:");
}

id objc_msgSend_storeSupportedFeatureVersionInLastSync_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeSupportedFeatureVersionInLastSync:forScope:error:");
}

id objc_msgSend_storeTransientSyncAnchor_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeTransientSyncAnchor:forScope:error:");
}

id objc_msgSend_storedExtractedBatch(void *a1, const char *a2, ...)
{
  return _[a1 storedExtractedBatch];
}

id objc_msgSend_streamOperationForRecordID_key_downloadType_filename_timeRange_mediaRequestHints_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamOperationForRecordID:key:downloadType:filename:timeRange:mediaRequestHints:completionBlock:");
}

id objc_msgSend_streamingURL(void *a1, const char *a2, ...)
{
  return _[a1 streamingURL];
}

id objc_msgSend_stringAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringAtIndex:");
}

id objc_msgSend_stringByAbbreviatingWithTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByAbbreviatingWithTildeInPath];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingMatchesInString:options:range:withTemplate:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTimeInterval:");
}

id objc_msgSend_stringForTimeIntervalAgo_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTimeIntervalAgo:now:");
}

id objc_msgSend_stringFromByteCount_countStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromByteCount:countStyle:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromDateAgo_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDateAgo:now:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringType(void *a1, const char *a2, ...)
{
  return _[a1 stringType];
}

id objc_msgSend_stringWithContentsOfURL_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithContentsOfURL:encoding:error:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subcategory(void *a1, const char *a2, ...)
{
  return _[a1 subcategory];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submitEventMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEventMetric:");
}

id objc_msgSend_submitTaskRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitTaskRequest:error:");
}

id objc_msgSend_submitTaskRequestForRescheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitTaskRequestForRescheduler:");
}

id objc_msgSend_submitted(void *a1, const char *a2, ...)
{
  return _[a1 submitted];
}

id objc_msgSend_subscriptionID(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionID];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _[a1 subtitle];
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_summaryDescription(void *a1, const char *a2, ...)
{
  return _[a1 summaryDescription];
}

id objc_msgSend_supervisor(void *a1, const char *a2, ...)
{
  return _[a1 supervisor];
}

id objc_msgSend_supervisorInfo(void *a1, const char *a2, ...)
{
  return _[a1 supervisorInfo];
}

id objc_msgSend_supervisorInfoForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supervisorInfoForScope:");
}

id objc_msgSend_supportedFeatureVersionInLastSyncForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedFeatureVersionInLastSyncForScope:");
}

id objc_msgSend_supportedZonePrefixes(void *a1, const char *a2, ...)
{
  return _[a1 supportedZonePrefixes];
}

id objc_msgSend_supportsCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCloudKitScope:engineScope:");
}

id objc_msgSend_supportsDeletion(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeletion];
}

id objc_msgSend_supportsDeletionOfRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeletionOfRecord:scopeProvider:");
}

id objc_msgSend_supportsDeletionOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeletionOfRecordClass:");
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_supportsDirectDeletion(void *a1, const char *a2, ...)
{
  return _[a1 supportsDirectDeletion];
}

id objc_msgSend_supportsDirectDeletionOfRecord_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDirectDeletionOfRecord:scopeProvider:");
}

id objc_msgSend_supportsDirectDeletionOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDirectDeletionOfRecordClass:");
}

id objc_msgSend_supportsDownloadOfChange_scopeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDownloadOfChange:scopeProvider:");
}

id objc_msgSend_supportsDownloadOfRecordClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDownloadOfRecordClass:");
}

id objc_msgSend_supportsEPP(void *a1, const char *a2, ...)
{
  return _[a1 supportsEPP];
}

id objc_msgSend_supportsResourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsResourceType:");
}

id objc_msgSend_supportsResources(void *a1, const char *a2, ...)
{
  return _[a1 supportsResources];
}

id objc_msgSend_supportsSharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharedDatabase];
}

id objc_msgSend_supportsSharing(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharing];
}

id objc_msgSend_supportsSharingScopedIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 supportsSharingScopedIdentifier];
}

id objc_msgSend_supportsStagingScopeForScopeWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsStagingScopeForScopeWithType:");
}

id objc_msgSend_supportsZoneCreation(void *a1, const char *a2, ...)
{
  return _[a1 supportsZoneCreation];
}

id objc_msgSend_supportsZoneDelete(void *a1, const char *a2, ...)
{
  return _[a1 supportsZoneDelete];
}

id objc_msgSend_syncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 syncAnchorVar];
}

id objc_msgSend_syncManager(void *a1, const char *a2, ...)
{
  return _[a1 syncManager];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronousWorkQueue(void *a1, const char *a2, ...)
{
  return _[a1 synchronousWorkQueue];
}

id objc_msgSend_syndicationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 syndicationIdentifier];
}

id objc_msgSend_systemMonitor(void *a1, const char *a2, ...)
{
  return _[a1 systemMonitor];
}

id objc_msgSend_table(void *a1, const char *a2, ...)
{
  return _[a1 table];
}

id objc_msgSend_table_countOfRecordsMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:countOfRecordsMatchingQuery:");
}

id objc_msgSend_table_enumerateCountGroupedByProperty_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:enumerateCountGroupedByProperty:block:");
}

id objc_msgSend_table_enumerateCountGroupedByUnsignedIntegerProperty_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:enumerateCountGroupedByUnsignedIntegerProperty:block:");
}

id objc_msgSend_table_hasColumnWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:hasColumnWithName:");
}

id objc_msgSend_table_hasRecordsMatchingQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "table:hasRecordsMatchingQuery:");
}

id objc_msgSend_tableCountOfRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableCountOfRecords:");
}

id objc_msgSend_tableHasRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableHasRecords:");
}

id objc_msgSend_tableName(void *a1, const char *a2, ...)
{
  return _[a1 tableName];
}

id objc_msgSend_tableWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableWithName:");
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_targetDescriptions(void *a1, const char *a2, ...)
{
  return _[a1 targetDescriptions];
}

id objc_msgSend_targetForRecordWithCloudScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithCloudScopedIdentifier:");
}

id objc_msgSend_targetForRecordWithOtherScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithOtherScopedIdentifier:");
}

id objc_msgSend_targetForRecordWithScopedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetForRecordWithScopedIdentifier:");
}

id objc_msgSend_targetGenerationVar(void *a1, const char *a2, ...)
{
  return _[a1 targetGenerationVar];
}

id objc_msgSend_targetMapping(void *a1, const char *a2, ...)
{
  return _[a1 targetMapping];
}

id objc_msgSend_targetState(void *a1, const char *a2, ...)
{
  return _[a1 targetState];
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return _[a1 task];
}

id objc_msgSend_taskDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskDidFinish:");
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifier];
}

id objc_msgSend_taskIdentifierForLibraryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskIdentifierForLibraryIdentifier:");
}

id objc_msgSend_taskIdentifierForSystemLibrary(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifierForSystemLibrary];
}

id objc_msgSend_taskRequestForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskRequestForIdentifier:");
}

id objc_msgSend_taskStatusesWithNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskStatusesWithNow:");
}

id objc_msgSend_taskWillStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskWillStart:");
}

id objc_msgSend_taskWithName_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskWithName:reason:");
}

id objc_msgSend_tearedDown(void *a1, const char *a2, ...)
{
  return _[a1 tearedDown];
}

id objc_msgSend_testKey_value_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testKey:value:completionHandler:");
}

id objc_msgSend_thumbnailImageData(void *a1, const char *a2, ...)
{
  return _[a1 thumbnailImageData];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeZoneName(void *a1, const char *a2, ...)
{
  return _[a1 timeZoneName];
}

id objc_msgSend_timeZoneOffset(void *a1, const char *a2, ...)
{
  return _[a1 timeZoneOffset];
}

id objc_msgSend_timeoutIntervalForRequest(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForRequest];
}

id objc_msgSend_timeoutIntervalForResource(void *a1, const char *a2, ...)
{
  return _[a1 timeoutIntervalForResource];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_todoVariableWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todoVariableWithName:");
}

id objc_msgSend_todoVariableWithName_defaultExpirationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todoVariableWithName:defaultExpirationInterval:");
}

id objc_msgSend_tooManyOpenedEnginesError(void *a1, const char *a2, ...)
{
  return _[a1 tooManyOpenedEnginesError];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_totalDurationOfUpload(void *a1, const char *a2, ...)
{
  return _[a1 totalDurationOfUpload];
}

id objc_msgSend_totalOriginalResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 totalOriginalResourceSize];
}

id objc_msgSend_totalResourceSize(void *a1, const char *a2, ...)
{
  return _[a1 totalResourceSize];
}

id objc_msgSend_totalUnitCount(void *a1, const char *a2, ...)
{
  return _[a1 totalUnitCount];
}

id objc_msgSend_trackingContext(void *a1, const char *a2, ...)
{
  return _[a1 trackingContext];
}

id objc_msgSend_transactionClientCacheView(void *a1, const char *a2, ...)
{
  return _[a1 transactionClientCacheView];
}

id objc_msgSend_transactionCount(void *a1, const char *a2, ...)
{
  return _[a1 transactionCount];
}

id objc_msgSend_transactionTransportScopeMapping(void *a1, const char *a2, ...)
{
  return _[a1 transactionTransportScopeMapping];
}

id objc_msgSend_transactions(void *a1, const char *a2, ...)
{
  return _[a1 transactions];
}

id objc_msgSend_transcodedItemCount(void *a1, const char *a2, ...)
{
  return _[a1 transcodedItemCount];
}

id objc_msgSend_transformData_fileType_matchingResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformData:fileType:matchingResource:error:");
}

id objc_msgSend_transformFromURL_fileType_toTargetURL_matchingResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformFromURL:fileType:toTargetURL:matchingResource:error:");
}

id objc_msgSend_transientPullRepository(void *a1, const char *a2, ...)
{
  return _[a1 transientPullRepository];
}

id objc_msgSend_transientSyncAnchorForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transientSyncAnchorForScope:");
}

id objc_msgSend_transientSyncAnchorVar(void *a1, const char *a2, ...)
{
  return _[a1 transientSyncAnchorVar];
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return _[a1 transport];
}

id objc_msgSend_transportGroup(void *a1, const char *a2, ...)
{
  return _[a1 transportGroup];
}

id objc_msgSend_transportGroupClass(void *a1, const char *a2, ...)
{
  return _[a1 transportGroupClass];
}

id objc_msgSend_transportNotedServerHasChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportNotedServerHasChanges:");
}

id objc_msgSend_transportScope(void *a1, const char *a2, ...)
{
  return _[a1 transportScope];
}

id objc_msgSend_transportScopeForScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportScopeForScope:");
}

id objc_msgSend_transportScopeForUpgradeFromScopeName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportScopeForUpgradeFromScopeName:");
}

id objc_msgSend_transportScopeMapping(void *a1, const char *a2, ...)
{
  return _[a1 transportScopeMapping];
}

id objc_msgSend_trashed(void *a1, const char *a2, ...)
{
  return _[a1 trashed];
}

id objc_msgSend_trashedReason(void *a1, const char *a2, ...)
{
  return _[a1 trashedReason];
}

id objc_msgSend_triggerResetAfterUpgrade_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerResetAfterUpgrade:withReason:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithIdentifier:");
}

id objc_msgSend_unarchiveArrayOfCPLDropDerivativeRecipesFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveArrayOfCPLDropDerivativeRecipesFrom:");
}

id objc_msgSend_unarchiveFileAtURL_outputFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveFileAtURL:outputFileURL:error:");
}

id objc_msgSend_unarchiveObjectWithData_ofClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchiveObjectWithData:ofClass:");
}

id objc_msgSend_unblock(void *a1, const char *a2, ...)
{
  return _[a1 unblock];
}

id objc_msgSend_unblockEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockEngineElement:");
}

id objc_msgSend_unblockEngineElementOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unblockEngineElementOnce:");
}

id objc_msgSend_underlyingErrorWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingErrorWithReason:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_unknownError(void *a1, const char *a2, ...)
{
  return _[a1 unknownError];
}

id objc_msgSend_unknownTargetScopedIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 unknownTargetScopedIdentifiers];
}

id objc_msgSend_unopenedCount(void *a1, const char *a2, ...)
{
  return _[a1 unopenedCount];
}

id objc_msgSend_unpublish(void *a1, const char *a2, ...)
{
  return _[a1 unpublish];
}

id objc_msgSend_unregister(void *a1, const char *a2, ...)
{
  return _[a1 unregister];
}

id objc_msgSend_unregisterClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:");
}

id objc_msgSend_unregisterForFeatureChangeNotificationsUsingObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForFeatureChangeNotificationsUsingObserver:");
}

id objc_msgSend_unregisterFromUploadRequestsWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterFromUploadRequestsWithMachServiceName:");
}

id objc_msgSend_unregisterStakeHolder_status_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterStakeHolder:status:reason:");
}

id objc_msgSend_unregisterUnusedReschedulerWithTaskIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterUnusedReschedulerWithTaskIdentifier:");
}

id objc_msgSend_unsafeResources_withError_realPrune_resourceStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeResources:withError:realPrune:resourceStorage:");
}

id objc_msgSend_unsharePlan(void *a1, const char *a2, ...)
{
  return _[a1 unsharePlan];
}

id objc_msgSend_unsignedIntegerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerAtIndex:");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateCKShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCKShare:");
}

id objc_msgSend_updateCKShareParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCKShareParticipant:");
}

id objc_msgSend_updateComputeSyncMetrics_silentDecryptionFailed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateComputeSyncMetrics:silentDecryptionFailed:error:");
}

id objc_msgSend_updateConfigurationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConfigurationDictionary:");
}

id objc_msgSend_updateContextWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContextWithBlock:");
}

id objc_msgSend_updateContextWithBlock_forOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContextWithBlock:forOperation:");
}

id objc_msgSend_updateExitConfigFromPreviousScopeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExitConfigFromPreviousScopeChange:");
}

id objc_msgSend_updateFlags_forScope_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFlags:forScope:error:");
}

id objc_msgSend_updateInitialDownloadDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitialDownloadDate:");
}

id objc_msgSend_updateInitialSyncDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitialSyncDate:");
}

id objc_msgSend_updateLibraryOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLibraryOptions:error:");
}

id objc_msgSend_updateLibraryShareSettingsWithCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLibraryShareSettingsWithCKRecord:");
}

id objc_msgSend_updateOneBatchForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOneBatchForOperation:");
}

id objc_msgSend_updatePrivatePropertiesOnAssetsWithScopedIdentifiers_desiredKeys_destinationZoneIdentification_sharedZoneIdentification_targetMapping_knownRecords_shouldUpdateRecord_updateBlock_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrivatePropertiesOnAssetsWithScopedIdentifiers:desiredKeys:destinationZoneIdentification:sharedZoneIdentification:targetMapping:knownRecords:shouldUpdateRecord:updateBlock:completionHandler:");
}

id objc_msgSend_updatePrivateRecord_sharedToRecordWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrivateRecord:sharedToRecordWithID:");
}

id objc_msgSend_updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProgress:");
}

id objc_msgSend_updateRecords_cloudKitScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRecords:cloudKitScope:completionHandler:");
}

id objc_msgSend_updateResources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateResources:");
}

id objc_msgSend_updateScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScopeIdentifier:");
}

id objc_msgSend_updateScopeWithNewScopeType_scope_updatedScopeChange_updatedFlags_oldTransportScope_updatedTransportScope_shouldUpdateTransportScope_store_transport_session_inTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScopeWithNewScopeType:scope:updatedScopeChange:updatedFlags:oldTransportScope:updatedTransportScope:shouldUpdateTransportScope:store:transport:session:inTransaction:");
}

id objc_msgSend_updateShareForScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShareForScope:completionHandler:");
}

id objc_msgSend_updateShareTaskForScope_transportScope_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShareTaskForScope:transportScope:completionHandler:");
}

id objc_msgSend_updateSharingContributorUserIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 updateSharingContributorUserIdentifiers];
}

id objc_msgSend_updateTargetMappingAfterUpload(void *a1, const char *a2, ...)
{
  return _[a1 updateTargetMappingAfterUpload];
}

id objc_msgSend_updateTargetMappingAfterUploadWithRealSourceRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTargetMappingAfterUploadWithRealSourceRecordIDs:");
}

id objc_msgSend_updateTaskRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTaskRequest:error:");
}

id objc_msgSend_updateTaskRequest_updatedPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTaskRequest:updatedPrediction:");
}

id objc_msgSend_updateWithCKRecord_zone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCKRecord:zone:");
}

id objc_msgSend_updateWithCKShare_currentUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCKShare:currentUserID:");
}

id objc_msgSend_updateWithExitConfigRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExitConfigRecord:");
}

id objc_msgSend_updateWithExitStatesRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExitStatesRecord:");
}

id objc_msgSend_updateWithLibraryInfoCKRecord_zone_userRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithLibraryInfoCKRecord:zone:userRecordID:");
}

id objc_msgSend_updateWithPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithPrediction:");
}

id objc_msgSend_updateWithRootCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithRootCKRecord:");
}

id objc_msgSend_updateWithTransportScopeMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithTransportScopeMapping:");
}

id objc_msgSend_updatedFlagsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromCKRecord:");
}

id objc_msgSend_updatedFlagsFromDeletedCKRecordID_recordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromDeletedCKRecordID:recordType:");
}

id objc_msgSend_updatedFlagsFromFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedFlagsFromFlags:");
}

id objc_msgSend_updatedFlagsMask(void *a1, const char *a2, ...)
{
  return _[a1 updatedFlagsMask];
}

id objc_msgSend_updatedScopeChangeFromScopeChange_currentUserID_withCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedScopeChangeFromScopeChange:currentUserID:withCKRecord:");
}

id objc_msgSend_updatedScopeChangeFromScopeChange_currentUserID_withDeletedCKRecordID_recordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedScopeChangeFromScopeChange:currentUserID:withDeletedCKRecordID:recordType:");
}

id objc_msgSend_upgradeFlags_fromTransportScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeFlags:fromTransportScope:");
}

id objc_msgSend_upgradeScopesWithNewLibraryOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeScopesWithNewLibraryOptions:error:");
}

id objc_msgSend_upgradeStorageToVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeStorageToVersion:");
}

id objc_msgSend_uploadCKRecord_forScopedIdentifier_triggeringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadCKRecord:forScopedIdentifier:triggeringKey:");
}

id objc_msgSend_uploadDidStartForResource_withResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadDidStartForResource:withResourceTransferTask:");
}

id objc_msgSend_uploadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uploadIdentifier];
}

id objc_msgSend_uploadOfRecordID_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfRecordID:didProgress:");
}

id objc_msgSend_uploadOfResource_didFinishForResourceTransferTask_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfResource:didFinishForResourceTransferTask:withError:");
}

id objc_msgSend_uploadOfResource_didProgress_forResourceTransferTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfResource:didProgress:forResourceTransferTask:");
}

id objc_msgSend_uploadOfSharedRecordID_didProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadOfSharedRecordID:didProgress:");
}

id objc_msgSend_uploadRecords_cloudKitScope_scopeProvider_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadRecords:cloudKitScope:scopeProvider:completionHandler:");
}

id objc_msgSend_uploadSharedCKRecord_forScopedIdentifier_triggeringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadSharedCKRecord:forScopedIdentifier:triggeringKey:");
}

id objc_msgSend_uploadSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadSize];
}

id objc_msgSend_uploadTransportGroupVar(void *a1, const char *a2, ...)
{
  return _[a1 uploadTransportGroupVar];
}

id objc_msgSend_uploadedSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadedSize];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_userActionOptions(void *a1, const char *a2, ...)
{
  return _[a1 userActionOptions];
}

id objc_msgSend_userContext(void *a1, const char *a2, ...)
{
  return _[a1 userContext];
}

id objc_msgSend_userDefinedRules(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedRules];
}

id objc_msgSend_userIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 userIdentifier];
}

id objc_msgSend_userIdentifierClass(void *a1, const char *a2, ...)
{
  return _[a1 userIdentifierClass];
}

id objc_msgSend_userIdentity(void *a1, const char *a2, ...)
{
  return _[a1 userIdentity];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userRecordID(void *a1, const char *a2, ...)
{
  return _[a1 userRecordID];
}

id objc_msgSend_userType(void *a1, const char *a2, ...)
{
  return _[a1 userType];
}

id objc_msgSend_userVersion(void *a1, const char *a2, ...)
{
  return _[a1 userVersion];
}

id objc_msgSend_userViewedParticipantTrashNotificationDate(void *a1, const char *a2, ...)
{
  return _[a1 userViewedParticipantTrashNotificationDate];
}

id objc_msgSend_usesSandboxEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 usesSandboxEnvironment];
}

id objc_msgSend_validCloudScopeIndexes(void *a1, const char *a2, ...)
{
  return _[a1 validCloudScopeIndexes];
}

id objc_msgSend_validLocalScopeIndexes(void *a1, const char *a2, ...)
{
  return _[a1 validLocalScopeIndexes];
}

id objc_msgSend_validateAcceptSharedScopeTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAcceptSharedScopeTask:completionHandler:");
}

id objc_msgSend_validateCreateScopeTask_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateCreateScopeTask:completionHandler:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForFlag:");
}

id objc_msgSend_valueForFlag_forScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForFlag:forScope:");
}

id objc_msgSend_valueForGlobalVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForGlobalVariable:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForVariable:");
}

id objc_msgSend_valueFromSet_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueFromSet:atIndex:");
}

id objc_msgSend_valueStore(void *a1, const char *a2, ...)
{
  return _[a1 valueStore];
}

id objc_msgSend_valueWithConstructor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithConstructor:");
}

id objc_msgSend_valuesInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valuesInSet:");
}

id objc_msgSend_variableGroupWithVariables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableGroupWithVariables:");
}

id objc_msgSend_variableGroupWithVariablesAndGroups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableGroupWithVariablesAndGroups:");
}

id objc_msgSend_variableName(void *a1, const char *a2, ...)
{
  return _[a1 variableName];
}

id objc_msgSend_variableWithName_defaultValue_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:defaultValue:type:");
}

id objc_msgSend_variableWithName_forTable_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:forTable:type:");
}

id objc_msgSend_variableWithName_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variableWithName:type:");
}

id objc_msgSend_variables(void *a1, const char *a2, ...)
{
  return _[a1 variables];
}

id objc_msgSend_verifiedType(void *a1, const char *a2, ...)
{
  return _[a1 verifiedType];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_versionHasChanged(void *a1, const char *a2, ...)
{
  return _[a1 versionHasChanged];
}

id objc_msgSend_verticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 verticalAccuracy];
}

id objc_msgSend_videoComplementDurationTimescale(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementDurationTimescale];
}

id objc_msgSend_videoComplementDurationValue(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementDurationValue];
}

id objc_msgSend_videoComplementImageDisplayTimescale(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementImageDisplayTimescale];
}

id objc_msgSend_videoComplementImageDisplayValue(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementImageDisplayValue];
}

id objc_msgSend_videoComplementVisibilityState(void *a1, const char *a2, ...)
{
  return _[a1 videoComplementVisibilityState];
}

id objc_msgSend_videoFrameRate(void *a1, const char *a2, ...)
{
  return _[a1 videoFrameRate];
}

id objc_msgSend_viewCount(void *a1, const char *a2, ...)
{
  return _[a1 viewCount];
}

id objc_msgSend_viewPresentation(void *a1, const char *a2, ...)
{
  return _[a1 viewPresentation];
}

id objc_msgSend_walrusStatus(void *a1, const char *a2, ...)
{
  return _[a1 walrusStatus];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_willFetchRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willFetchRecordCount:");
}

id objc_msgSend_willRunEngineElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willRunEngineElement:");
}

id objc_msgSend_willUploadRecords(void *a1, const char *a2, ...)
{
  return _[a1 willUploadRecords];
}

id objc_msgSend_willUploadSharedRecords(void *a1, const char *a2, ...)
{
  return _[a1 willUploadSharedRecords];
}

id objc_msgSend_wipeEnginesIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wipeEnginesIfNecessary];
}

id objc_msgSend_wipeReason(void *a1, const char *a2, ...)
{
  return _[a1 wipeReason];
}

id objc_msgSend_wipeStoreAtNextOpeningWithCloudLibraryStorageURL_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeStoreAtNextOpeningWithCloudLibraryStorageURL:reason:");
}

id objc_msgSend_wipeStoreAtNextOpeningWithReason_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeStoreAtNextOpeningWithReason:completionBlock:");
}

id objc_msgSend_wipeWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeWithReason:completionHandler:");
}

id objc_msgSend_workItemDelay(void *a1, const char *a2, ...)
{
  return _[a1 workItemDelay];
}

id objc_msgSend_wrapper_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_wrapper_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:getStatusWithCompletionHandler:");
}

id objc_msgSend_wrapper_libraryDidOpenWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapper:libraryDidOpenWithError:");
}

id objc_msgSend_wrapperArray_countOfClientsForWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:countOfClientsForWrapper:");
}

id objc_msgSend_wrapperArray_engineWrapperWithParameters_createIfNecessary_queue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:engineWrapperWithParameters:createIfNecessary:queue:error:");
}

id objc_msgSend_wrapperArray_getStatusDictionaryWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:getStatusDictionaryWithCompletionHandler:");
}

id objc_msgSend_wrapperArray_getStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:getStatusWithCompletionHandler:");
}

id objc_msgSend_wrapperArray_wrapperDidCompleteInitialSyncOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperDidCompleteInitialSyncOfMainScope:");
}

id objc_msgSend_wrapperArray_wrapperNeedsInitialDownloadOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperNeedsInitialDownloadOfMainScope:");
}

id objc_msgSend_wrapperArray_wrapperShouldBeDropped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArray:wrapperShouldBeDropped:");
}

id objc_msgSend_wrapperArrayCountDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperArrayCountDidChange:");
}

id objc_msgSend_wrapperDidCompleteInitialSyncOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperDidCompleteInitialSyncOfMainScope:");
}

id objc_msgSend_wrapperEmergencyExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperEmergencyExit:");
}

id objc_msgSend_wrapperLibraryDidClose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperLibraryDidClose:");
}

id objc_msgSend_wrapperNeedsInitialDownloadOfMainScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperNeedsInitialDownloadOfMainScope:");
}

id objc_msgSend_wrapperShouldBeDropped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrapperShouldBeDropped:");
}

id objc_msgSend_wrapperStatuses(void *a1, const char *a2, ...)
{
  return _[a1 wrapperStatuses];
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeTransactionBlocker(void *a1, const char *a2, ...)
{
  return _[a1 writeTransactionBlocker];
}

id objc_msgSend_zone(void *a1, const char *a2, ...)
{
  return _[a1 zone];
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIDFromScopeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDFromScopeIdentifier:");
}

id objc_msgSend_zoneIdentificationForCloudKitScope_engineScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIdentificationForCloudKitScope:engineScope:");
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}

id objc_msgSend_zoneishContainer(void *a1, const char *a2, ...)
{
  return _[a1 zoneishContainer];
}